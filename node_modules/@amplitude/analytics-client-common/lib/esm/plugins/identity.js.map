{"version":3,"file":"identity.js","sourceRoot":"","sources":["../../../src/plugins/identity.ts"],"names":[],"mappings":";AAAA,OAAO,EAA+B,UAAU,EAAE,MAAM,4BAA4B,CAAC;AACrF,OAAO,EAAE,qBAAqB,EAAE,MAAM,wBAAwB,CAAC;AAE/D;IAAA;QACE,SAAI,GAAG,UAAU,CAAC;QAClB,SAAI,GAAG,UAAU,CAAC,MAAe,CAAC;QAElC,kBAAa,GAAG,qBAAqB,EAAE,CAAC,aAAa,CAAC;IAaxD,CAAC;IAXO,qCAAO,GAAb,UAAc,OAAc;;;;gBACpB,cAAc,GAAG,OAAO,CAAC,eAAsC,CAAC;gBACtE,IAAI,cAAc,EAAE;oBAClB,IAAI,CAAC,aAAa,CAAC,YAAY,EAAE,CAAC,oBAAoB,CAAC,cAAc,CAAC,CAAC,MAAM,EAAE,CAAC;iBACjF;gBACD,sBAAO,OAAO,EAAC;;;KAChB;IAED,mCAAK,GAAL,UAAM,CAAS;QACb,OAAO,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;IACpC,CAAC;IACH,0BAAC;AAAD,CAAC,AAjBD,IAiBC","sourcesContent":["import { BeforePlugin, Config, Event, PluginType } from '@amplitude/analytics-types';\nimport { getAnalyticsConnector } from '../analytics-connector';\n\nexport class IdentityEventSender implements BeforePlugin {\n  name = 'identity';\n  type = PluginType.BEFORE as const;\n\n  identityStore = getAnalyticsConnector().identityStore;\n\n  async execute(context: Event): Promise<Event> {\n    const userProperties = context.user_properties as Record<string, any>;\n    if (userProperties) {\n      this.identityStore.editIdentity().updateUserProperties(userProperties).commit();\n    }\n    return context;\n  }\n\n  setup(_: Config): Promise<undefined> {\n    return Promise.resolve(undefined);\n  }\n}\n"]}