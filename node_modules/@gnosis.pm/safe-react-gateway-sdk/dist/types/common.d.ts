import { IncomingTransfer, ModuleTransaction, MultisigTransaction, Page } from '..';
export declare type AddressEx = {
    value: string;
    name: string | null;
    logoUri: string | null;
};
export declare type SafeInfo = {
    address: AddressEx;
    chainId: string;
    nonce: number;
    threshold: number;
    owners: AddressEx[];
    implementation: AddressEx;
    modules: AddressEx[];
    guard: AddressEx | null;
    fallbackHandler: AddressEx;
    version: string;
    collectiblesTag: string;
    txQueuedTag: string;
    txHistoryTag: string;
};
export declare type FiatCurrencies = string[];
export declare type OwnedSafes = {
    safes: string[];
};
export declare enum TokenType {
    ERC20 = "ERC20",
    ERC721 = "ERC721",
    NATIVE_TOKEN = "NATIVE_TOKEN"
}
export declare type TokenInfo = {
    type: TokenType;
    address: string;
    decimals: number;
    symbol: string;
    name: string;
    logoUri: string | null;
};
export declare type SafeBalanceResponse = {
    fiatTotal: string;
    items: Array<{
        tokenInfo: TokenInfo;
        balance: string;
        fiatBalance: string;
        fiatConversion: string;
    }>;
};
export declare type SafeIncomingTransfersResponse = Page<IncomingTransfer>;
export declare type SafeModuleTransactionsResponse = Page<ModuleTransaction>;
export declare type SafeMultisigTransactionsResponse = Page<MultisigTransaction>;
export declare type SafeCollectibleResponse = {
    address: string;
    tokenName: string;
    tokenSymbol: string;
    logoUri: string;
    id: string;
    uri: string;
    name: string;
    description: string;
    imageUri: string;
    metadata: {
        [key: string]: string;
    };
};
