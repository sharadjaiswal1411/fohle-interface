/**
 * Event names that can occur in the application.
 *
 * Subject to change as new features are added and new events are defined
 * and logged.
 */
export var EventName;
(function (EventName) {
    EventName["APPROVE_TOKEN_TXN_SUBMITTED"] = "Approve Token Transaction Submitted";
    EventName["APP_LOADED"] = "Application Loaded";
    EventName["CONNECT_WALLET_BUTTON_CLICKED"] = "Connect Wallet Button Clicked";
    EventName["ELEMENT_CLICKED"] = "Element Clicked";
    EventName["EXPLORE_BANNER_CLICKED"] = "Explore Banner Clicked";
    EventName["EXPLORE_SEARCH_SELECTED"] = "Explore Search Selected";
    EventName["EXPLORE_TOKEN_ROW_CLICKED"] = "Explore Token Row Clicked";
    EventName["FOOTER_CLICKED"] = "Footer Clicked";
    EventName["MENU_CLICKED"] = "Menu Clicked";
    EventName["NAVBAR_CLICKED"] = "Navbar Clicked";
    EventName["NAVBAR_RESULT_SELECTED"] = "Navbar Result Selected";
    EventName["NAVBAR_SEARCH_EXITED"] = "Navbar Search Exited";
    EventName["NAVBAR_SEARCH_SELECTED"] = "Navbar Search Selected";
    EventName["NFT_ACTIVITY_SELECTED"] = "NFT Activity Selected";
    EventName["NFT_BUY_ADDED"] = "NFT Buy Bag Added";
    EventName["NFT_BUY_BAG_CHANGED"] = "NFT Buy Bag Changed";
    EventName["NFT_BUY_BAG_PAY"] = "NFT Buy Bag Pay Clicked";
    EventName["NFT_BUY_BAG_REFUNDED"] = "NFT Buy Bag Refunded";
    EventName["NFT_BUY_BAG_SIGNED"] = "NFT Buy Bag Signed";
    EventName["NFT_BUY_BAG_SUCCEEDED"] = "NFT Buy Bag Succeeded";
    EventName["NFT_FILTER_OPENED"] = "NFT Collection Filter Opened";
    EventName["NFT_FILTER_SELECTED"] = "NFT Filter Selected";
    EventName["NFT_LISTING_COMPLETED"] = "NFT Listing Success";
    EventName["NFT_LISTING_SIGNED"] = "NFT Listing Signed";
    EventName["NFT_PROFILE_PAGE_START_SELL"] = "NFT Profile Page Start Sell";
    EventName["NFT_SELL_ITEM_ADDED"] = "NFT Sell Item Added";
    EventName["NFT_SELL_START_LISTING"] = "NFT List Page Start Listing";
    EventName["NFT_TRENDING_ROW_SELECTED"] = "Trending Row Selected";
    EventName["PAGE_CLICKED"] = "Page Clicked";
    EventName["PAGE_VIEWED"] = "Page Viewed";
    EventName["SEARCH_BAR_CLICKED"] = "Search Bar Clicked";
    EventName["SENTIMENT_SUBMITTED"] = "Sentiment Submitted";
    EventName["SWAP_AUTOROUTER_VISUALIZATION_EXPANDED"] = "Swap Autorouter Visualization Expanded";
    EventName["SWAP_DETAILS_EXPANDED"] = "Swap Details Expanded";
    EventName["SWAP_MAX_TOKEN_AMOUNT_SELECTED"] = "Swap Max Token Amount Selected";
    EventName["SWAP_MODIFIED_IN_WALLET"] = "Swap Modified in Wallet";
    EventName["SWAP_PRICE_UPDATE_ACKNOWLEDGED"] = "Swap Price Update Acknowledged";
    EventName["SWAP_QUOTE_RECEIVED"] = "Swap Quote Received";
    EventName["SWAP_SIGNED"] = "Swap Signed";
    EventName["SWAP_SUBMITTED_BUTTON_CLICKED"] = "Swap Submit Button Clicked";
    EventName["SWAP_TOKENS_REVERSED"] = "Swap Tokens Reversed";
    EventName["SWAP_TRANSACTION_COMPLETED"] = "Swap Transaction Completed";
    EventName["TOKEN_IMPORTED"] = "Token Imported";
    EventName["TOKEN_SELECTED"] = "Token Selected";
    EventName["TOKEN_SELECTOR_OPENED"] = "Token Selector Opened";
    EventName["WALLET_CONNECT_TXN_COMPLETED"] = "Wallet Connect Transaction Completed";
    EventName["WALLET_SELECTED"] = "Wallet Selected";
    EventName["WEB_VITALS"] = "Web Vitals";
    EventName["WRAP_TOKEN_TXN_INVALIDATED"] = "Wrap Token Transaction Invalidated";
    EventName["WRAP_TOKEN_TXN_SUBMITTED"] = "Wrap Token Transaction Submitted";
})(EventName || (EventName = {}));
/**
 * Known events that trigger callbacks.
 * @example
 *  <TraceEvent events={[BrowserEvent.onClick]} element={name}>
 */
export var BrowserEvent;
(function (BrowserEvent) {
    BrowserEvent["onClick"] = "onClick";
    BrowserEvent["onFocus"] = "onFocus";
    BrowserEvent["onKeyPress"] = "onKeyPress";
    BrowserEvent["onSelect"] = "onSelect";
})(BrowserEvent || (BrowserEvent = {}));
export var Browser;
(function (Browser) {
    Browser["BRAVE"] = "Brave";
    Browser["CHROME"] = "Google Chrome or Chromium";
    Browser["EDGE"] = "Microsoft Edge (Legacy)";
    Browser["EDGE_CHROMIUM"] = "Microsoft Edge (Chromium)";
    Browser["FIREFOX"] = "Mozilla Firefox";
    Browser["INTERNET_EXPLORER"] = "Microsoft Internet Explorer";
    Browser["OPERA"] = "Opera";
    Browser["SAFARI"] = "Apple Safari";
    Browser["SAMSUNG"] = "Samsung Internet";
    Browser["UNKNOWN"] = "unknown";
})(Browser || (Browser = {}));
// Get browser being used, code comes from: https://developer.mozilla.org/en-US/docs/Web/API/Window/navigator.
export function getBrowser() {
    const sUsrAg = navigator.userAgent;
    // The order matters here, and this may report false positives for unlisted browsers.
    if (sUsrAg.indexOf('Firefox') > -1) {
        return Browser.FIREFOX;
        // "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:61.0) Gecko/20100101 Firefox/61.0"
    }
    else if (sUsrAg.indexOf('SamsungBrowser') > -1) {
        return Browser.SAMSUNG;
        // "Mozilla/5.0 (Linux; Android 9; SAMSUNG SM-G955F Build/PPR1.180610.011) AppleWebKit/537.36 (KHTML, like Gecko) SamsungBrowser/9.4 Chrome/67.0.3396.87 Mobile Safari/537.36
    }
    else if (sUsrAg.indexOf('Opera') > -1 || sUsrAg.indexOf('OPR') > -1) {
        return Browser.OPERA;
        // "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36 OPR/57.0.3098.106"
    }
    else if (sUsrAg.indexOf('Trident') > -1) {
        return Browser.INTERNET_EXPLORER;
    }
    else if (sUsrAg.indexOf('Brave') > -1) {
        return Browser.BRAVE;
        // "Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; .NET4.0C; .NET4.0E; Zoom 3.6.0; wbx 1.0.0; rv:11.0) like Gecko"
    }
    else if (sUsrAg.indexOf('Edge') > -1) {
        return Browser.EDGE;
        // "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36 Edge/16.16299"
    }
    else if (sUsrAg.indexOf('Edg') > -1) {
        return Browser.EDGE_CHROMIUM;
        // Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36 Edg/91.0.864.64
    }
    else if (sUsrAg.indexOf('Chrome') > -1) {
        return Browser.CHROME;
        // "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/66.0.3359.181 Chrome/66.0.3359.181 Safari/537.36"
    }
    else if (sUsrAg.indexOf('Safari') > -1) {
        return Browser.SAFARI;
        // "Mozilla/5.0 (iPhone; CPU iPhone OS 11_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/11.0 Mobile/15E148 Safari/604.1 980x1306"
    }
    else {
        return Browser.UNKNOWN;
    }
}
export var CustomUserProperties;
(function (CustomUserProperties) {
    CustomUserProperties["ALL_WALLET_ADDRESSES_CONNECTED"] = "all_wallet_addresses_connected";
    CustomUserProperties["ALL_WALLET_CHAIN_IDS"] = "all_wallet_chain_ids";
    CustomUserProperties["BROWSER"] = "browser";
    CustomUserProperties["DARK_MODE"] = "is_dark_mode";
    CustomUserProperties["EXPERT_MODE"] = "is_expert_mode";
    CustomUserProperties["SCREEN_RESOLUTION_HEIGHT"] = "screen_resolution_height";
    CustomUserProperties["SCREEN_RESOLUTION_WIDTH"] = "screen_resolution_width";
    CustomUserProperties["USER_AGENT"] = "user_agent";
    CustomUserProperties["WALLET_ADDRESS"] = "wallet_address";
    CustomUserProperties["WALLET_TYPE"] = "wallet_type";
})(CustomUserProperties || (CustomUserProperties = {}));
