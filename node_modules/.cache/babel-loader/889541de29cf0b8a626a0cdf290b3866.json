{"ast":null,"code":"import _toConsumableArray from\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import{ConnectionType}from'connection';import{getConnection}from'connection/utils';import{useMemo}from'react';import{useAppSelector}from'state/hooks';var SELECTABLE_WALLETS=[ConnectionType.INJECTED,ConnectionType.COINBASE_WALLET,ConnectionType.WALLET_CONNECT];export default function useOrderedConnections(){var selectedWallet=useAppSelector(function(state){return state.user.selectedWallet;});return useMemo(function(){var orderedConnectionTypes=[];// Always attempt to use to Gnosis Safe first, as we can't know if we're in a SafeContext.\norderedConnectionTypes.push(ConnectionType.GNOSIS_SAFE);// Add the `selectedWallet` to the top so it's prioritized, then add the other selectable wallets.\nif(selectedWallet){orderedConnectionTypes.push(selectedWallet);}orderedConnectionTypes.push.apply(orderedConnectionTypes,_toConsumableArray(SELECTABLE_WALLETS.filter(function(wallet){return wallet!==selectedWallet;})));// Add network connection last as it should be the fallback.\norderedConnectionTypes.push(ConnectionType.NETWORK);return orderedConnectionTypes.map(getConnection);},[selectedWallet]);}","map":{"version":3,"names":["ConnectionType","getConnection","useMemo","useAppSelector","SELECTABLE_WALLETS","INJECTED","COINBASE_WALLET","WALLET_CONNECT","useOrderedConnections","selectedWallet","state","user","orderedConnectionTypes","push","GNOSIS_SAFE","filter","wallet","NETWORK","map"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/hooks/useOrderedConnections.ts"],"sourcesContent":["import { ConnectionType } from 'connection'\nimport { getConnection } from 'connection/utils'\nimport { useMemo } from 'react'\nimport { useAppSelector } from 'state/hooks'\n\nconst SELECTABLE_WALLETS = [ConnectionType.INJECTED, ConnectionType.COINBASE_WALLET, ConnectionType.WALLET_CONNECT]\n\nexport default function useOrderedConnections() {\n  const selectedWallet = useAppSelector((state) => state.user.selectedWallet)\n  return useMemo(() => {\n    const orderedConnectionTypes: ConnectionType[] = []\n\n    // Always attempt to use to Gnosis Safe first, as we can't know if we're in a SafeContext.\n    orderedConnectionTypes.push(ConnectionType.GNOSIS_SAFE)\n\n    // Add the `selectedWallet` to the top so it's prioritized, then add the other selectable wallets.\n    if (selectedWallet) {\n      orderedConnectionTypes.push(selectedWallet)\n    }\n    orderedConnectionTypes.push(...SELECTABLE_WALLETS.filter((wallet) => wallet !== selectedWallet))\n\n    // Add network connection last as it should be the fallback.\n    orderedConnectionTypes.push(ConnectionType.NETWORK)\n\n    return orderedConnectionTypes.map(getConnection)\n  }, [selectedWallet])\n}\n"],"mappings":"oLAAA,OAASA,cAAc,KAAQ,YAAY,CAC3C,OAASC,aAAa,KAAQ,kBAAkB,CAChD,OAASC,OAAO,KAAQ,OAAO,CAC/B,OAASC,cAAc,KAAQ,aAAa,CAE5C,GAAMC,mBAAkB,CAAG,CAACJ,cAAc,CAACK,QAAQ,CAAEL,cAAc,CAACM,eAAe,CAAEN,cAAc,CAACO,cAAc,CAAC,CAEnH,cAAe,SAASC,sBAAqB,EAAG,CAC9C,GAAMC,eAAc,CAAGN,cAAc,CAAC,SAACO,KAAK,QAAKA,MAAK,CAACC,IAAI,CAACF,cAAc,GAAC,CAC3E,MAAOP,QAAO,CAAC,UAAM,CACnB,GAAMU,uBAAwC,CAAG,EAAE,CAEnD;AACAA,sBAAsB,CAACC,IAAI,CAACb,cAAc,CAACc,WAAW,CAAC,CAEvD;AACA,GAAIL,cAAc,CAAE,CAClBG,sBAAsB,CAACC,IAAI,CAACJ,cAAc,CAAC,CAC7C,CACAG,sBAAsB,CAACC,IAAI,OAA3BD,sBAAsB,oBAASR,kBAAkB,CAACW,MAAM,CAAC,SAACC,MAAM,QAAKA,OAAM,GAAKP,cAAc,GAAC,EAAC,CAEhG;AACAG,sBAAsB,CAACC,IAAI,CAACb,cAAc,CAACiB,OAAO,CAAC,CAEnD,MAAOL,uBAAsB,CAACM,GAAG,CAACjB,aAAa,CAAC,CAClD,CAAC,CAAE,CAACQ,cAAc,CAAC,CAAC,CACtB"},"metadata":{},"sourceType":"module"}