{"ast":null,"code":"import _objectSpread from\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{tokensToChainTokenMap}from'lib/hooks/useTokenList/utils';import{useMemo}from'react';import{useAppSelector}from'state/hooks';import sortByListPriority from'utils/listSort';import BROKEN_LIST from'../../constants/tokenLists/broken.tokenlist.json';import{DEFAULT_ACTIVE_LIST_URLS,UNSUPPORTED_LIST_URLS}from'./../../constants/lists';export function useAllLists(){return useAppSelector(function(state){return state.lists.byUrl;});}/**\n * Combine the tokens in map2 with the tokens on map1, where tokens on map1 take precedence\n * @param map1 the base token map\n * @param map2 the map of additioanl tokens to add to the base map\n */function combineMaps(map1,map2){var chainIds=Object.keys(Object.keys(map1).concat(Object.keys(map2)).reduce(function(memo,value){memo[value]=true;return memo;},{})).map(function(id){return parseInt(id);});return chainIds.reduce(function(memo,chainId){memo[chainId]=_objectSpread(_objectSpread({},map2[chainId]),map1[chainId]);return memo;},{});}// merge tokens contained within lists from urls\nfunction useCombinedTokenMapFromUrls(urls){var lists=useAllLists();return useMemo(function(){if(!urls)return{};return urls.slice()// sort by priority so top priority goes last\n.sort(sortByListPriority).reduce(function(allTokens,currentUrl){var _lists$currentUrl;var current=(_lists$currentUrl=lists[currentUrl])===null||_lists$currentUrl===void 0?void 0:_lists$currentUrl.current;if(!current)return allTokens;try{return combineMaps(allTokens,tokensToChainTokenMap(current));}catch(error){console.error('Could not show token list due to error',error);return allTokens;}},{});},[lists,urls]);}// get all the tokens from active lists, combine with local default tokens\nexport function useCombinedActiveList(){var activeTokens=useCombinedTokenMapFromUrls(DEFAULT_ACTIVE_LIST_URLS);return activeTokens;}// list of tokens not supported on interface for various reasons, used to show warnings and prevent swaps and adds\nexport function useUnsupportedTokenList(){// get hard-coded broken tokens\nvar brokenListMap=useMemo(function(){return tokensToChainTokenMap(BROKEN_LIST);},[]);// get dynamic list of unsupported tokens\nvar loadedUnsupportedListMap=useCombinedTokenMapFromUrls(UNSUPPORTED_LIST_URLS);// format into one token address map\nreturn useMemo(function(){return combineMaps(brokenListMap,loadedUnsupportedListMap);},[brokenListMap,loadedUnsupportedListMap]);}","map":{"version":3,"names":["tokensToChainTokenMap","useMemo","useAppSelector","sortByListPriority","BROKEN_LIST","DEFAULT_ACTIVE_LIST_URLS","UNSUPPORTED_LIST_URLS","useAllLists","state","lists","byUrl","combineMaps","map1","map2","chainIds","Object","keys","concat","reduce","memo","value","map","id","parseInt","chainId","useCombinedTokenMapFromUrls","urls","slice","sort","allTokens","currentUrl","current","error","console","useCombinedActiveList","activeTokens","useUnsupportedTokenList","brokenListMap","loadedUnsupportedListMap"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/state/lists/hooks.ts"],"sourcesContent":["import { ChainTokenMap, tokensToChainTokenMap } from 'lib/hooks/useTokenList/utils'\nimport { useMemo } from 'react'\nimport { useAppSelector } from 'state/hooks'\nimport sortByListPriority from 'utils/listSort'\n\nimport BROKEN_LIST from '../../constants/tokenLists/broken.tokenlist.json'\nimport { AppState } from '../index'\nimport { DEFAULT_ACTIVE_LIST_URLS, UNSUPPORTED_LIST_URLS } from './../../constants/lists'\n\nexport type TokenAddressMap = ChainTokenMap\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: Mutable<T[P]>\n}\n\nexport function useAllLists(): AppState['lists']['byUrl'] {\n  return useAppSelector((state) => state.lists.byUrl)\n}\n\n/**\n * Combine the tokens in map2 with the tokens on map1, where tokens on map1 take precedence\n * @param map1 the base token map\n * @param map2 the map of additioanl tokens to add to the base map\n */\nfunction combineMaps(map1: TokenAddressMap, map2: TokenAddressMap): TokenAddressMap {\n  const chainIds = Object.keys(\n    Object.keys(map1)\n      .concat(Object.keys(map2))\n      .reduce<{ [chainId: string]: true }>((memo, value) => {\n        memo[value] = true\n        return memo\n      }, {})\n  ).map((id) => parseInt(id))\n\n  return chainIds.reduce<Mutable<TokenAddressMap>>((memo, chainId) => {\n    memo[chainId] = {\n      ...map2[chainId],\n      // map1 takes precedence\n      ...map1[chainId],\n    }\n    return memo\n  }, {}) as TokenAddressMap\n}\n\n// merge tokens contained within lists from urls\nfunction useCombinedTokenMapFromUrls(urls: string[] | undefined): TokenAddressMap {\n  const lists = useAllLists()\n  return useMemo(() => {\n    if (!urls) return {}\n    return (\n      urls\n        .slice()\n        // sort by priority so top priority goes last\n        .sort(sortByListPriority)\n        .reduce((allTokens, currentUrl) => {\n          const current = lists[currentUrl]?.current\n          if (!current) return allTokens\n          try {\n            return combineMaps(allTokens, tokensToChainTokenMap(current))\n          } catch (error) {\n            console.error('Could not show token list due to error', error)\n            return allTokens\n          }\n        }, {})\n    )\n  }, [lists, urls])\n}\n\n// get all the tokens from active lists, combine with local default tokens\nexport function useCombinedActiveList(): TokenAddressMap {\n  const activeTokens = useCombinedTokenMapFromUrls(DEFAULT_ACTIVE_LIST_URLS)\n  return activeTokens\n}\n\n// list of tokens not supported on interface for various reasons, used to show warnings and prevent swaps and adds\nexport function useUnsupportedTokenList(): TokenAddressMap {\n  // get hard-coded broken tokens\n  const brokenListMap = useMemo(() => tokensToChainTokenMap(BROKEN_LIST), [])\n\n  // get dynamic list of unsupported tokens\n  const loadedUnsupportedListMap = useCombinedTokenMapFromUrls(UNSUPPORTED_LIST_URLS)\n\n  // format into one token address map\n  return useMemo(() => combineMaps(brokenListMap, loadedUnsupportedListMap), [brokenListMap, loadedUnsupportedListMap])\n}\n"],"mappings":"2KAAA,OAAwBA,qBAAqB,KAAQ,8BAA8B,CACnF,OAASC,OAAO,KAAQ,OAAO,CAC/B,OAASC,cAAc,KAAQ,aAAa,CAC5C,MAAOC,mBAAkB,KAAM,gBAAgB,CAE/C,MAAOC,YAAW,KAAM,kDAAkD,CAE1E,OAASC,wBAAwB,CAAEC,qBAAqB,KAAQ,yBAAyB,CAQzF,MAAO,SAASC,YAAW,EAA+B,CACxD,MAAOL,eAAc,CAAC,SAACM,KAAK,QAAKA,MAAK,CAACC,KAAK,CAACC,KAAK,GAAC,CACrD,CAEA;AACA;AACA;AACA;AACA,GACA,QAASC,YAAW,CAACC,IAAqB,CAAEC,IAAqB,CAAmB,CAClF,GAAMC,SAAQ,CAAGC,MAAM,CAACC,IAAI,CAC1BD,MAAM,CAACC,IAAI,CAACJ,IAAI,CAAC,CACdK,MAAM,CAACF,MAAM,CAACC,IAAI,CAACH,IAAI,CAAC,CAAC,CACzBK,MAAM,CAA8B,SAACC,IAAI,CAAEC,KAAK,CAAK,CACpDD,IAAI,CAACC,KAAK,CAAC,CAAG,IAAI,CAClB,MAAOD,KAAI,CACb,CAAC,CAAE,CAAC,CAAC,CAAC,CACT,CAACE,GAAG,CAAC,SAACC,EAAE,QAAKC,SAAQ,CAACD,EAAE,CAAC,GAAC,CAE3B,MAAOR,SAAQ,CAACI,MAAM,CAA2B,SAACC,IAAI,CAAEK,OAAO,CAAK,CAClEL,IAAI,CAACK,OAAO,CAAC,gCACRX,IAAI,CAACW,OAAO,CAAC,EAEbZ,IAAI,CAACY,OAAO,CAAC,CACjB,CACD,MAAOL,KAAI,CACb,CAAC,CAAE,CAAC,CAAC,CAAC,CACR,CAEA;AACA,QAASM,4BAA2B,CAACC,IAA0B,CAAmB,CAChF,GAAMjB,MAAK,CAAGF,WAAW,EAAE,CAC3B,MAAON,QAAO,CAAC,UAAM,CACnB,GAAI,CAACyB,IAAI,CAAE,MAAO,CAAC,CAAC,CACpB,MACEA,KAAI,CACDC,KAAK,EACN;AAAA,CACCC,IAAI,CAACzB,kBAAkB,CAAC,CACxBe,MAAM,CAAC,SAACW,SAAS,CAAEC,UAAU,CAAK,uBACjC,GAAMC,QAAO,oBAAGtB,KAAK,CAACqB,UAAU,CAAC,4CAAjB,kBAAmBC,OAAO,CAC1C,GAAI,CAACA,OAAO,CAAE,MAAOF,UAAS,CAC9B,GAAI,CACF,MAAOlB,YAAW,CAACkB,SAAS,CAAE7B,qBAAqB,CAAC+B,OAAO,CAAC,CAAC,CAC/D,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,wCAAwC,CAAEA,KAAK,CAAC,CAC9D,MAAOH,UAAS,CAClB,CACF,CAAC,CAAE,CAAC,CAAC,CAAC,CAEZ,CAAC,CAAE,CAACpB,KAAK,CAAEiB,IAAI,CAAC,CAAC,CACnB,CAEA;AACA,MAAO,SAASQ,sBAAqB,EAAoB,CACvD,GAAMC,aAAY,CAAGV,2BAA2B,CAACpB,wBAAwB,CAAC,CAC1E,MAAO8B,aAAY,CACrB,CAEA;AACA,MAAO,SAASC,wBAAuB,EAAoB,CACzD;AACA,GAAMC,cAAa,CAAGpC,OAAO,CAAC,iBAAMD,sBAAqB,CAACI,WAAW,CAAC,GAAE,EAAE,CAAC,CAE3E;AACA,GAAMkC,yBAAwB,CAAGb,2BAA2B,CAACnB,qBAAqB,CAAC,CAEnF;AACA,MAAOL,QAAO,CAAC,iBAAMU,YAAW,CAAC0B,aAAa,CAAEC,wBAAwB,CAAC,GAAE,CAACD,aAAa,CAAEC,wBAAwB,CAAC,CAAC,CACvH"},"metadata":{},"sourceType":"module"}