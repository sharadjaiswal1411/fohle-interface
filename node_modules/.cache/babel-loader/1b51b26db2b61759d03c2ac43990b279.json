{"ast":null,"code":"var _s = $RefreshSig$();\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { CurrencyAmount } from '@uniswap/sdk-core';\nimport { useSingleCallResult } from 'lib/hooks/multicall';\nimport useBlockNumber from 'lib/hooks/useBlockNumber';\nimport { useEffect, useState } from 'react';\nimport { unwrappedToken } from 'utils/unwrappedToken';\nimport { useV3NFTPositionManagerContract } from './useContract';\nconst MAX_UINT128 = BigNumber.from(2).pow(128).sub(1);\n\n// compute current + counterfactual fees for a v3 position\nexport function useV3PositionFees(pool, tokenId) {\n  _s();\n  var _useSingleCallResult$;\n  let asWETH = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  const positionManager = useV3NFTPositionManagerContract(false);\n  const owner = (_useSingleCallResult$ = useSingleCallResult(tokenId ? positionManager : null, 'ownerOf', [tokenId]).result) === null || _useSingleCallResult$ === void 0 ? void 0 : _useSingleCallResult$[0];\n  const tokenIdHexString = tokenId === null || tokenId === void 0 ? void 0 : tokenId.toHexString();\n  const latestBlockNumber = useBlockNumber();\n\n  // we can't use multicall for this because we need to simulate the call from a specific address\n  // latestBlockNumber is included to ensure data stays up-to-date every block\n  const [amounts, setAmounts] = useState();\n  useEffect(() => {\n    if (positionManager && tokenIdHexString && owner) {\n      positionManager.callStatic.collect({\n        tokenId: tokenIdHexString,\n        recipient: owner,\n        // some tokens might fail if transferred to address(0)\n        amount0Max: MAX_UINT128,\n        amount1Max: MAX_UINT128\n      }, {\n        from: owner\n      } // need to simulate the call as the owner\n      ).then(results => {\n        setAmounts([results.amount0, results.amount1]);\n      });\n    }\n  }, [positionManager, tokenIdHexString, owner, latestBlockNumber]);\n  if (pool && amounts) {\n    return [CurrencyAmount.fromRawAmount(asWETH ? pool.token0 : unwrappedToken(pool.token0), amounts[0].toString()), CurrencyAmount.fromRawAmount(asWETH ? pool.token1 : unwrappedToken(pool.token1), amounts[1].toString())];\n  } else {\n    return [undefined, undefined];\n  }\n}\n_s(useV3PositionFees, \"t8p/q2rBtY3wEf4/gwyPaO1+rtM=\", false, function () {\n  return [useV3NFTPositionManagerContract, useSingleCallResult, useBlockNumber];\n});","map":{"version":3,"names":["BigNumber","CurrencyAmount","useSingleCallResult","useBlockNumber","useEffect","useState","unwrappedToken","useV3NFTPositionManagerContract","MAX_UINT128","from","pow","sub","useV3PositionFees","pool","tokenId","asWETH","positionManager","owner","result","tokenIdHexString","toHexString","latestBlockNumber","amounts","setAmounts","callStatic","collect","recipient","amount0Max","amount1Max","then","results","amount0","amount1","fromRawAmount","token0","toString","token1","undefined"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/hooks/useV3PositionFees.ts"],"sourcesContent":["import { BigNumber } from '@ethersproject/bignumber'\nimport { Currency, CurrencyAmount } from '@uniswap/sdk-core'\nimport { Pool } from '@uniswap/v3-sdk'\nimport { useSingleCallResult } from 'lib/hooks/multicall'\nimport useBlockNumber from 'lib/hooks/useBlockNumber'\nimport { useEffect, useState } from 'react'\nimport { unwrappedToken } from 'utils/unwrappedToken'\n\nimport { useV3NFTPositionManagerContract } from './useContract'\n\nconst MAX_UINT128 = BigNumber.from(2).pow(128).sub(1)\n\n// compute current + counterfactual fees for a v3 position\nexport function useV3PositionFees(\n  pool?: Pool,\n  tokenId?: BigNumber,\n  asWETH = false\n): [CurrencyAmount<Currency>, CurrencyAmount<Currency>] | [undefined, undefined] {\n  const positionManager = useV3NFTPositionManagerContract(false)\n  const owner: string | undefined = useSingleCallResult(tokenId ? positionManager : null, 'ownerOf', [tokenId])\n    .result?.[0]\n\n  const tokenIdHexString = tokenId?.toHexString()\n  const latestBlockNumber = useBlockNumber()\n\n  // we can't use multicall for this because we need to simulate the call from a specific address\n  // latestBlockNumber is included to ensure data stays up-to-date every block\n  const [amounts, setAmounts] = useState<[BigNumber, BigNumber] | undefined>()\n  useEffect(() => {\n    if (positionManager && tokenIdHexString && owner) {\n      positionManager.callStatic\n        .collect(\n          {\n            tokenId: tokenIdHexString,\n            recipient: owner, // some tokens might fail if transferred to address(0)\n            amount0Max: MAX_UINT128,\n            amount1Max: MAX_UINT128,\n          },\n          { from: owner } // need to simulate the call as the owner\n        )\n        .then((results) => {\n          setAmounts([results.amount0, results.amount1])\n        })\n    }\n  }, [positionManager, tokenIdHexString, owner, latestBlockNumber])\n\n  if (pool && amounts) {\n    return [\n      CurrencyAmount.fromRawAmount(asWETH ? pool.token0 : unwrappedToken(pool.token0), amounts[0].toString()),\n      CurrencyAmount.fromRawAmount(asWETH ? pool.token1 : unwrappedToken(pool.token1), amounts[1].toString()),\n    ]\n  } else {\n    return [undefined, undefined]\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,0BAA0B;AACpD,SAAmBC,cAAc,QAAQ,mBAAmB;AAE5D,SAASC,mBAAmB,QAAQ,qBAAqB;AACzD,OAAOC,cAAc,MAAM,0BAA0B;AACrD,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,cAAc,QAAQ,sBAAsB;AAErD,SAASC,+BAA+B,QAAQ,eAAe;AAE/D,MAAMC,WAAW,GAAGR,SAAS,CAACS,IAAI,CAAC,CAAC,CAAC,CAACC,GAAG,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,CAAC,CAAC;;AAErD;AACA,OAAO,SAASC,iBAAiB,CAC/BC,IAAW,EACXC,OAAmB,EAE4D;EAAA;EAAA;EAAA,IAD/EC,MAAM,uEAAG,KAAK;EAEd,MAAMC,eAAe,GAAGT,+BAA+B,CAAC,KAAK,CAAC;EAC9D,MAAMU,KAAyB,4BAAGf,mBAAmB,CAACY,OAAO,GAAGE,eAAe,GAAG,IAAI,EAAE,SAAS,EAAE,CAACF,OAAO,CAAC,CAAC,CAC1GI,MAAM,0DADyB,sBACtB,CAAC,CAAC;EAEd,MAAMC,gBAAgB,GAAGL,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEM,WAAW,EAAE;EAC/C,MAAMC,iBAAiB,GAAGlB,cAAc,EAAE;;EAE1C;EACA;EACA,MAAM,CAACmB,OAAO,EAAEC,UAAU,CAAC,GAAGlB,QAAQ,EAAsC;EAC5ED,SAAS,CAAC,MAAM;IACd,IAAIY,eAAe,IAAIG,gBAAgB,IAAIF,KAAK,EAAE;MAChDD,eAAe,CAACQ,UAAU,CACvBC,OAAO,CACN;QACEX,OAAO,EAAEK,gBAAgB;QACzBO,SAAS,EAAET,KAAK;QAAE;QAClBU,UAAU,EAAEnB,WAAW;QACvBoB,UAAU,EAAEpB;MACd,CAAC,EACD;QAAEC,IAAI,EAAEQ;MAAM,CAAC,CAAC;MAAA,CACjB,CACAY,IAAI,CAAEC,OAAO,IAAK;QACjBP,UAAU,CAAC,CAACO,OAAO,CAACC,OAAO,EAAED,OAAO,CAACE,OAAO,CAAC,CAAC;MAChD,CAAC,CAAC;IACN;EACF,CAAC,EAAE,CAAChB,eAAe,EAAEG,gBAAgB,EAAEF,KAAK,EAAEI,iBAAiB,CAAC,CAAC;EAEjE,IAAIR,IAAI,IAAIS,OAAO,EAAE;IACnB,OAAO,CACLrB,cAAc,CAACgC,aAAa,CAAClB,MAAM,GAAGF,IAAI,CAACqB,MAAM,GAAG5B,cAAc,CAACO,IAAI,CAACqB,MAAM,CAAC,EAAEZ,OAAO,CAAC,CAAC,CAAC,CAACa,QAAQ,EAAE,CAAC,EACvGlC,cAAc,CAACgC,aAAa,CAAClB,MAAM,GAAGF,IAAI,CAACuB,MAAM,GAAG9B,cAAc,CAACO,IAAI,CAACuB,MAAM,CAAC,EAAEd,OAAO,CAAC,CAAC,CAAC,CAACa,QAAQ,EAAE,CAAC,CACxG;EACH,CAAC,MAAM;IACL,OAAO,CAACE,SAAS,EAAEA,SAAS,CAAC;EAC/B;AACF;AAAC,GAzCezB,iBAAiB;EAAA,QAKPL,+BAA+B,EACrBL,mBAAmB,EAI3BC,cAAc;AAAA"},"metadata":{},"sourceType":"module"}