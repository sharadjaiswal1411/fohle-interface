{"ast":null,"code":"import _regeneratorRuntime from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { BigNumber } from '@ethersproject/bignumber';\nimport _ from 'lodash';\nimport { log, WRAPPED_NATIVE_CURRENCY } from '../../../../util';\nimport { CurrencyAmount } from '../../../../util/amounts';\nimport { IV2GasModelFactory, usdGasTokensByChain } from '../gas-model';\n// Constant cost for doing any swap regardless of pools.\nexport var BASE_SWAP_COST = BigNumber.from(135000); // 115000, bumped up by 20_000 @eric 7/8/2022\n// Constant per extra hop in the route.\nexport var COST_PER_EXTRA_HOP = BigNumber.from(50000); // 20000, bumped up by 30_000 @eric 7/8/2022\n/**\n * Computes a gas estimate for a V2 swap using heuristics.\n * Considers number of hops in the route and the typical base cost for a swap.\n *\n * We compute gas estimates off-chain because\n *  1/ Calling eth_estimateGas for a swaps requires the caller to have\n *     the full balance token being swapped, and approvals.\n *  2/ Tracking gas used using a wrapper contract is not accurate with Multicall\n *     due to EIP-2929. We would have to make a request for every swap we wanted to estimate.\n *  3/ For V2 we simulate all our swaps off-chain so have no way to track gas used.\n *\n * Note, certain tokens e.g. rebasing/fee-on-transfer, may incur higher gas costs than\n * what we estimate here. This is because they run extra logic on token transfer.\n *\n * @export\n * @class V2HeuristicGasModelFactory\n */\nexport var V2HeuristicGasModelFactory = /*#__PURE__*/function (_IV2GasModelFactory) {\n  _inherits(V2HeuristicGasModelFactory, _IV2GasModelFactory);\n  var _super = _createSuper(V2HeuristicGasModelFactory);\n  function V2HeuristicGasModelFactory() {\n    _classCallCheck(this, V2HeuristicGasModelFactory);\n    return _super.call(this);\n  }\n  _createClass(V2HeuristicGasModelFactory, [{\n    key: \"buildGasModel\",\n    value: function () {\n      var _buildGasModel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n        var _this = this;\n        var chainId, gasPriceWei, poolProvider, token, _usdPool, ethPool, usdPool;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                chainId = _ref.chainId, gasPriceWei = _ref.gasPriceWei, poolProvider = _ref.poolProvider, token = _ref.token;\n                if (!token.equals(WRAPPED_NATIVE_CURRENCY[chainId])) {\n                  _context.next = 6;\n                  break;\n                }\n                _context.next = 4;\n                return this.getHighestLiquidityUSDPool(chainId, poolProvider);\n              case 4:\n                _usdPool = _context.sent;\n                return _context.abrupt(\"return\", {\n                  estimateGasCost: function estimateGasCost(routeWithValidQuote) {\n                    var _this$estimateGas = _this.estimateGas(routeWithValidQuote, gasPriceWei, chainId),\n                      gasCostInEth = _this$estimateGas.gasCostInEth,\n                      gasUse = _this$estimateGas.gasUse;\n                    var ethToken0 = _usdPool.token0.address == WRAPPED_NATIVE_CURRENCY[chainId].address;\n                    var ethTokenPrice = ethToken0 ? _usdPool.token0Price : _usdPool.token1Price;\n                    var gasCostInTermsOfUSD = ethTokenPrice.quote(gasCostInEth);\n                    return {\n                      gasEstimate: gasUse,\n                      gasCostInToken: gasCostInEth,\n                      gasCostInUSD: gasCostInTermsOfUSD\n                    };\n                  }\n                });\n              case 6:\n                _context.next = 8;\n                return this.getEthPool(chainId, token, poolProvider);\n              case 8:\n                ethPool = _context.sent;\n                if (!ethPool) {\n                  log.info('Unable to find ETH pool with the quote token to produce gas adjusted costs. Route will not account for gas.');\n                }\n                _context.next = 12;\n                return this.getHighestLiquidityUSDPool(chainId, poolProvider);\n              case 12:\n                usdPool = _context.sent;\n                return _context.abrupt(\"return\", {\n                  estimateGasCost: function estimateGasCost(routeWithValidQuote) {\n                    var usdToken = usdPool.token0.address == WRAPPED_NATIVE_CURRENCY[chainId].address ? usdPool.token1 : usdPool.token0;\n                    var _this$estimateGas2 = _this.estimateGas(routeWithValidQuote, gasPriceWei, chainId),\n                      gasCostInEth = _this$estimateGas2.gasCostInEth,\n                      gasUse = _this$estimateGas2.gasUse;\n                    if (!ethPool) {\n                      return {\n                        gasEstimate: gasUse,\n                        gasCostInToken: CurrencyAmount.fromRawAmount(token, 0),\n                        gasCostInUSD: CurrencyAmount.fromRawAmount(usdToken, 0)\n                      };\n                    }\n                    var ethToken0 = ethPool.token0.address == WRAPPED_NATIVE_CURRENCY[chainId].address;\n                    var ethTokenPrice = ethToken0 ? ethPool.token0Price : ethPool.token1Price;\n                    var gasCostInTermsOfQuoteToken;\n                    try {\n                      gasCostInTermsOfQuoteToken = ethTokenPrice.quote(gasCostInEth);\n                    } catch (err) {\n                      log.error({\n                        ethTokenPriceBase: ethTokenPrice.baseCurrency,\n                        ethTokenPriceQuote: ethTokenPrice.quoteCurrency,\n                        gasCostInEth: gasCostInEth.currency\n                      }, 'Debug eth price token issue');\n                      throw err;\n                    }\n                    var ethToken0USDPool = usdPool.token0.address == WRAPPED_NATIVE_CURRENCY[chainId].address;\n                    var ethTokenPriceUSDPool = ethToken0USDPool ? usdPool.token0Price : usdPool.token1Price;\n                    var gasCostInTermsOfUSD;\n                    try {\n                      gasCostInTermsOfUSD = ethTokenPriceUSDPool.quote(gasCostInEth);\n                    } catch (err) {\n                      log.error({\n                        usdT1: usdPool.token0.symbol,\n                        usdT2: usdPool.token1.symbol,\n                        gasCostInEthToken: gasCostInEth.currency.symbol\n                      }, 'Failed to compute USD gas price');\n                      throw err;\n                    }\n                    return {\n                      gasEstimate: gasUse,\n                      gasCostInToken: gasCostInTermsOfQuoteToken,\n                      gasCostInUSD: gasCostInTermsOfUSD\n                    };\n                  }\n                });\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function buildGasModel(_x) {\n        return _buildGasModel.apply(this, arguments);\n      }\n      return buildGasModel;\n    }()\n  }, {\n    key: \"estimateGas\",\n    value: function estimateGas(routeWithValidQuote, gasPriceWei, chainId) {\n      var hops = routeWithValidQuote.route.pairs.length;\n      var gasUse = BASE_SWAP_COST.add(COST_PER_EXTRA_HOP.mul(hops - 1));\n      var totalGasCostWei = gasPriceWei.mul(gasUse);\n      var weth = WRAPPED_NATIVE_CURRENCY[chainId];\n      var gasCostInEth = CurrencyAmount.fromRawAmount(weth, totalGasCostWei.toString());\n      return {\n        gasCostInEth: gasCostInEth,\n        gasUse: gasUse\n      };\n    }\n  }, {\n    key: \"getEthPool\",\n    value: function () {\n      var _getEthPool = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(chainId, token, poolProvider) {\n        var weth, poolAccessor, pool;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                weth = WRAPPED_NATIVE_CURRENCY[chainId];\n                _context2.next = 3;\n                return poolProvider.getPools([[weth, token]]);\n              case 3:\n                poolAccessor = _context2.sent;\n                pool = poolAccessor.getPool(weth, token);\n                if (!(!pool || pool.reserve0.equalTo(0) || pool.reserve1.equalTo(0))) {\n                  _context2.next = 8;\n                  break;\n                }\n                log.error({\n                  weth: weth,\n                  token: token,\n                  reserve0: pool === null || pool === void 0 ? void 0 : pool.reserve0.toExact(),\n                  reserve1: pool === null || pool === void 0 ? void 0 : pool.reserve1.toExact()\n                }, \"Could not find a valid WETH pool with \".concat(token.symbol, \" for computing gas costs.\"));\n                return _context2.abrupt(\"return\", null);\n              case 8:\n                return _context2.abrupt(\"return\", pool);\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n      function getEthPool(_x2, _x3, _x4) {\n        return _getEthPool.apply(this, arguments);\n      }\n      return getEthPool;\n    }()\n  }, {\n    key: \"getHighestLiquidityUSDPool\",\n    value: function () {\n      var _getHighestLiquidityUSDPool = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(chainId, poolProvider) {\n        var usdTokens, usdPools, poolAccessor, poolsRaw, pools, maxPool;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                usdTokens = usdGasTokensByChain[chainId];\n                if (usdTokens) {\n                  _context3.next = 3;\n                  break;\n                }\n                throw new Error(\"Could not find a USD token for computing gas costs on \".concat(chainId));\n              case 3:\n                usdPools = _.map(usdTokens, function (usdToken) {\n                  return [usdToken, WRAPPED_NATIVE_CURRENCY[chainId]];\n                });\n                _context3.next = 6;\n                return poolProvider.getPools(usdPools);\n              case 6:\n                poolAccessor = _context3.sent;\n                poolsRaw = poolAccessor.getAllPools();\n                pools = _.filter(poolsRaw, function (pool) {\n                  return pool.reserve0.greaterThan(0) && pool.reserve1.greaterThan(0);\n                });\n                if (!(pools.length == 0)) {\n                  _context3.next = 12;\n                  break;\n                }\n                log.error({\n                  pools: pools\n                }, \"Could not find a USD/WETH pool for computing gas costs.\");\n                throw new Error(\"Can't find USD/WETH pool for computing gas costs.\");\n              case 12:\n                maxPool = _.maxBy(pools, function (pool) {\n                  if (pool.token0.equals(WRAPPED_NATIVE_CURRENCY[chainId])) {\n                    return parseFloat(pool.reserve0.toSignificant(2));\n                  } else {\n                    return parseFloat(pool.reserve1.toSignificant(2));\n                  }\n                });\n                return _context3.abrupt(\"return\", maxPool);\n              case 14:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n      function getHighestLiquidityUSDPool(_x5, _x6) {\n        return _getHighestLiquidityUSDPool.apply(this, arguments);\n      }\n      return getHighestLiquidityUSDPool;\n    }()\n  }]);\n  return V2HeuristicGasModelFactory;\n}(IV2GasModelFactory);","map":{"version":3,"sources":["../../../../../../src/routers/alpha-router/gas-models/v2/v2-heuristic-gas-model.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { BigNumber } from '@ethersproject/bignumber';\nimport _ from 'lodash';\nimport { log, WRAPPED_NATIVE_CURRENCY } from '../../../../util';\nimport { CurrencyAmount } from '../../../../util/amounts';\nimport { IV2GasModelFactory, usdGasTokensByChain, } from '../gas-model';\n// Constant cost for doing any swap regardless of pools.\nexport const BASE_SWAP_COST = BigNumber.from(135000); // 115000, bumped up by 20_000 @eric 7/8/2022\n// Constant per extra hop in the route.\nexport const COST_PER_EXTRA_HOP = BigNumber.from(50000); // 20000, bumped up by 30_000 @eric 7/8/2022\n/**\n * Computes a gas estimate for a V2 swap using heuristics.\n * Considers number of hops in the route and the typical base cost for a swap.\n *\n * We compute gas estimates off-chain because\n *  1/ Calling eth_estimateGas for a swaps requires the caller to have\n *     the full balance token being swapped, and approvals.\n *  2/ Tracking gas used using a wrapper contract is not accurate with Multicall\n *     due to EIP-2929. We would have to make a request for every swap we wanted to estimate.\n *  3/ For V2 we simulate all our swaps off-chain so have no way to track gas used.\n *\n * Note, certain tokens e.g. rebasing/fee-on-transfer, may incur higher gas costs than\n * what we estimate here. This is because they run extra logic on token transfer.\n *\n * @export\n * @class V2HeuristicGasModelFactory\n */\nexport class V2HeuristicGasModelFactory extends IV2GasModelFactory {\n    constructor() {\n        super();\n    }\n    async buildGasModel({ chainId, gasPriceWei, poolProvider, token, }) {\n        if (token.equals(WRAPPED_NATIVE_CURRENCY[chainId])) {\n            const usdPool = await this.getHighestLiquidityUSDPool(chainId, poolProvider);\n            return {\n                estimateGasCost: (routeWithValidQuote) => {\n                    const { gasCostInEth, gasUse } = this.estimateGas(routeWithValidQuote, gasPriceWei, chainId);\n                    const ethToken0 = usdPool.token0.address == WRAPPED_NATIVE_CURRENCY[chainId].address;\n                    const ethTokenPrice = ethToken0\n                        ? usdPool.token0Price\n                        : usdPool.token1Price;\n                    const gasCostInTermsOfUSD = ethTokenPrice.quote(gasCostInEth);\n                    return {\n                        gasEstimate: gasUse,\n                        gasCostInToken: gasCostInEth,\n                        gasCostInUSD: gasCostInTermsOfUSD,\n                    };\n                },\n            };\n        }\n        // If the quote token is not WETH, we convert the gas cost to be in terms of the quote token.\n        // We do this by getting the highest liquidity <token>/ETH pool.\n        const ethPool = await this.getEthPool(chainId, token, poolProvider);\n        if (!ethPool) {\n            log.info('Unable to find ETH pool with the quote token to produce gas adjusted costs. Route will not account for gas.');\n        }\n        const usdPool = await this.getHighestLiquidityUSDPool(chainId, poolProvider);\n        return {\n            estimateGasCost: (routeWithValidQuote) => {\n                const usdToken = usdPool.token0.address == WRAPPED_NATIVE_CURRENCY[chainId].address\n                    ? usdPool.token1\n                    : usdPool.token0;\n                const { gasCostInEth, gasUse } = this.estimateGas(routeWithValidQuote, gasPriceWei, chainId);\n                if (!ethPool) {\n                    return {\n                        gasEstimate: gasUse,\n                        gasCostInToken: CurrencyAmount.fromRawAmount(token, 0),\n                        gasCostInUSD: CurrencyAmount.fromRawAmount(usdToken, 0),\n                    };\n                }\n                const ethToken0 = ethPool.token0.address == WRAPPED_NATIVE_CURRENCY[chainId].address;\n                const ethTokenPrice = ethToken0\n                    ? ethPool.token0Price\n                    : ethPool.token1Price;\n                let gasCostInTermsOfQuoteToken;\n                try {\n                    gasCostInTermsOfQuoteToken = ethTokenPrice.quote(gasCostInEth);\n                }\n                catch (err) {\n                    log.error({\n                        ethTokenPriceBase: ethTokenPrice.baseCurrency,\n                        ethTokenPriceQuote: ethTokenPrice.quoteCurrency,\n                        gasCostInEth: gasCostInEth.currency,\n                    }, 'Debug eth price token issue');\n                    throw err;\n                }\n                const ethToken0USDPool = usdPool.token0.address == WRAPPED_NATIVE_CURRENCY[chainId].address;\n                const ethTokenPriceUSDPool = ethToken0USDPool\n                    ? usdPool.token0Price\n                    : usdPool.token1Price;\n                let gasCostInTermsOfUSD;\n                try {\n                    gasCostInTermsOfUSD = ethTokenPriceUSDPool.quote(gasCostInEth);\n                }\n                catch (err) {\n                    log.error({\n                        usdT1: usdPool.token0.symbol,\n                        usdT2: usdPool.token1.symbol,\n                        gasCostInEthToken: gasCostInEth.currency.symbol,\n                    }, 'Failed to compute USD gas price');\n                    throw err;\n                }\n                return {\n                    gasEstimate: gasUse,\n                    gasCostInToken: gasCostInTermsOfQuoteToken,\n                    gasCostInUSD: gasCostInTermsOfUSD,\n                };\n            },\n        };\n    }\n    estimateGas(routeWithValidQuote, gasPriceWei, chainId) {\n        const hops = routeWithValidQuote.route.pairs.length;\n        const gasUse = BASE_SWAP_COST.add(COST_PER_EXTRA_HOP.mul(hops - 1));\n        const totalGasCostWei = gasPriceWei.mul(gasUse);\n        const weth = WRAPPED_NATIVE_CURRENCY[chainId];\n        const gasCostInEth = CurrencyAmount.fromRawAmount(weth, totalGasCostWei.toString());\n        return { gasCostInEth, gasUse };\n    }\n    async getEthPool(chainId, token, poolProvider) {\n        const weth = WRAPPED_NATIVE_CURRENCY[chainId];\n        const poolAccessor = await poolProvider.getPools([[weth, token]]);\n        const pool = poolAccessor.getPool(weth, token);\n        if (!pool || pool.reserve0.equalTo(0) || pool.reserve1.equalTo(0)) {\n            log.error({\n                weth,\n                token,\n                reserve0: pool === null || pool === void 0 ? void 0 : pool.reserve0.toExact(),\n                reserve1: pool === null || pool === void 0 ? void 0 : pool.reserve1.toExact(),\n            }, `Could not find a valid WETH pool with ${token.symbol} for computing gas costs.`);\n            return null;\n        }\n        return pool;\n    }\n    async getHighestLiquidityUSDPool(chainId, poolProvider) {\n        const usdTokens = usdGasTokensByChain[chainId];\n        if (!usdTokens) {\n            throw new Error(`Could not find a USD token for computing gas costs on ${chainId}`);\n        }\n        const usdPools = _.map(usdTokens, (usdToken) => [\n            usdToken,\n            WRAPPED_NATIVE_CURRENCY[chainId],\n        ]);\n        const poolAccessor = await poolProvider.getPools(usdPools);\n        const poolsRaw = poolAccessor.getAllPools();\n        const pools = _.filter(poolsRaw, (pool) => pool.reserve0.greaterThan(0) && pool.reserve1.greaterThan(0));\n        if (pools.length == 0) {\n            log.error({ pools }, `Could not find a USD/WETH pool for computing gas costs.`);\n            throw new Error(`Can't find USD/WETH pool for computing gas costs.`);\n        }\n        const maxPool = _.maxBy(pools, (pool) => {\n            if (pool.token0.equals(WRAPPED_NATIVE_CURRENCY[chainId])) {\n                return parseFloat(pool.reserve0.toSignificant(2));\n            }\n            else {\n                return parseFloat(pool.reserve1.toSignificant(2));\n            }\n        });\n        return maxPool;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidjItaGV1cmlzdGljLWdhcy1tb2RlbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9yb3V0ZXJzL2FscGhhLXJvdXRlci9nYXMtbW9kZWxzL3YyL3YyLWhldXJpc3RpYy1nYXMtbW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBR3JELE9BQU8sQ0FBQyxNQUFNLFFBQVEsQ0FBQztBQUd2QixPQUFPLEVBQVcsR0FBRyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDekUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBRTFELE9BQU8sRUFHTCxrQkFBa0IsRUFDbEIsbUJBQW1CLEdBQ3BCLE1BQU0sY0FBYyxDQUFDO0FBRXRCLHdEQUF3RDtBQUN4RCxNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLDZDQUE2QztBQUVuRyx1Q0FBdUM7QUFDdkMsTUFBTSxDQUFDLE1BQU0sa0JBQWtCLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLDRDQUE0QztBQUVyRzs7Ozs7Ozs7Ozs7Ozs7OztHQWdCRztBQUNILE1BQU0sT0FBTywwQkFBMkIsU0FBUSxrQkFBa0I7SUFDaEU7UUFDRSxLQUFLLEVBQUUsQ0FBQztJQUNWLENBQUM7SUFFTSxLQUFLLENBQUMsYUFBYSxDQUFDLEVBQ3pCLE9BQU8sRUFDUCxXQUFXLEVBQ1gsWUFBWSxFQUNaLEtBQUssR0FDc0I7UUFDM0IsSUFBSSxLQUFLLENBQUMsTUFBTSxDQUFDLHVCQUF1QixDQUFDLE9BQU8sQ0FBRSxDQUFDLEVBQUU7WUFDbkQsTUFBTSxPQUFPLEdBQVMsTUFBTSxJQUFJLENBQUMsMEJBQTBCLENBQ3pELE9BQU8sRUFDUCxZQUFZLENBQ2IsQ0FB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"]},"metadata":{},"sourceType":"module"}