{"ast":null,"code":"import { Contract } from '@ethersproject/contracts';\nimport { namehash } from '@ethersproject/hash';\nconst REGISTRAR_ABI = [{\n  constant: true,\n  inputs: [{\n    name: 'node',\n    type: 'bytes32'\n  }],\n  name: 'resolver',\n  outputs: [{\n    name: 'resolverAddress',\n    type: 'address'\n  }],\n  payable: false,\n  stateMutability: 'view',\n  type: 'function'\n}];\nconst REGISTRAR_ADDRESS = '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e';\nconst RESOLVER_ABI = [{\n  constant: true,\n  inputs: [{\n    internalType: 'bytes32',\n    name: 'node',\n    type: 'bytes32'\n  }],\n  name: 'contenthash',\n  outputs: [{\n    internalType: 'bytes',\n    name: '',\n    type: 'bytes'\n  }],\n  payable: false,\n  stateMutability: 'view',\n  type: 'function'\n}];\n\n// cache the resolver contracts since most of them are the public resolver\nfunction resolverContract(resolverAddress, provider) {\n  return new Contract(resolverAddress, RESOLVER_ABI, provider);\n}\n\n/**\n * Fetches and decodes the result of an ENS contenthash lookup on mainnet to a URI\n * @param ensName to resolve\n * @param provider provider to use to fetch the data\n */\nexport default async function resolveENSContentHash(ensName, provider) {\n  const ensRegistrarContract = new Contract(REGISTRAR_ADDRESS, REGISTRAR_ABI, provider);\n  const hash = namehash(ensName);\n  const resolverAddress = await ensRegistrarContract.resolver(hash);\n  return resolverContract(resolverAddress, provider).contenthash(hash);\n}","map":{"version":3,"names":["Contract","namehash","REGISTRAR_ABI","constant","inputs","name","type","outputs","payable","stateMutability","REGISTRAR_ADDRESS","RESOLVER_ABI","internalType","resolverContract","resolverAddress","provider","resolveENSContentHash","ensName","ensRegistrarContract","hash","resolver","contenthash"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/lib/utils/resolveENSContentHash.ts"],"sourcesContent":["import { Provider } from '@ethersproject/abstract-provider'\nimport { Contract } from '@ethersproject/contracts'\nimport { namehash } from '@ethersproject/hash'\n\nconst REGISTRAR_ABI = [\n  {\n    constant: true,\n    inputs: [\n      {\n        name: 'node',\n        type: 'bytes32',\n      },\n    ],\n    name: 'resolver',\n    outputs: [\n      {\n        name: 'resolverAddress',\n        type: 'address',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n]\nconst REGISTRAR_ADDRESS = '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e'\n\nconst RESOLVER_ABI = [\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: 'bytes32',\n        name: 'node',\n        type: 'bytes32',\n      },\n    ],\n    name: 'contenthash',\n    outputs: [\n      {\n        internalType: 'bytes',\n        name: '',\n        type: 'bytes',\n      },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n]\n\n// cache the resolver contracts since most of them are the public resolver\nfunction resolverContract(resolverAddress: string, provider: Provider): Contract {\n  return new Contract(resolverAddress, RESOLVER_ABI, provider)\n}\n\n/**\n * Fetches and decodes the result of an ENS contenthash lookup on mainnet to a URI\n * @param ensName to resolve\n * @param provider provider to use to fetch the data\n */\nexport default async function resolveENSContentHash(ensName: string, provider: Provider): Promise<string> {\n  const ensRegistrarContract = new Contract(REGISTRAR_ADDRESS, REGISTRAR_ABI, provider)\n  const hash = namehash(ensName)\n  const resolverAddress = await ensRegistrarContract.resolver(hash)\n  return resolverContract(resolverAddress, provider).contenthash(hash)\n}\n"],"mappings":"AACA,SAASA,QAAQ,QAAQ,0BAA0B;AACnD,SAASC,QAAQ,QAAQ,qBAAqB;AAE9C,MAAMC,aAAa,GAAG,CACpB;EACEC,QAAQ,EAAE,IAAI;EACdC,MAAM,EAAE,CACN;IACEC,IAAI,EAAE,MAAM;IACZC,IAAI,EAAE;EACR,CAAC,CACF;EACDD,IAAI,EAAE,UAAU;EAChBE,OAAO,EAAE,CACP;IACEF,IAAI,EAAE,iBAAiB;IACvBC,IAAI,EAAE;EACR,CAAC,CACF;EACDE,OAAO,EAAE,KAAK;EACdC,eAAe,EAAE,MAAM;EACvBH,IAAI,EAAE;AACR,CAAC,CACF;AACD,MAAMI,iBAAiB,GAAG,4CAA4C;AAEtE,MAAMC,YAAY,GAAG,CACnB;EACER,QAAQ,EAAE,IAAI;EACdC,MAAM,EAAE,CACN;IACEQ,YAAY,EAAE,SAAS;IACvBP,IAAI,EAAE,MAAM;IACZC,IAAI,EAAE;EACR,CAAC,CACF;EACDD,IAAI,EAAE,aAAa;EACnBE,OAAO,EAAE,CACP;IACEK,YAAY,EAAE,OAAO;IACrBP,IAAI,EAAE,EAAE;IACRC,IAAI,EAAE;EACR,CAAC,CACF;EACDE,OAAO,EAAE,KAAK;EACdC,eAAe,EAAE,MAAM;EACvBH,IAAI,EAAE;AACR,CAAC,CACF;;AAED;AACA,SAASO,gBAAgB,CAACC,eAAuB,EAAEC,QAAkB,EAAY;EAC/E,OAAO,IAAIf,QAAQ,CAACc,eAAe,EAAEH,YAAY,EAAEI,QAAQ,CAAC;AAC9D;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,eAAeC,qBAAqB,CAACC,OAAe,EAAEF,QAAkB,EAAmB;EACxG,MAAMG,oBAAoB,GAAG,IAAIlB,QAAQ,CAACU,iBAAiB,EAAER,aAAa,EAAEa,QAAQ,CAAC;EACrF,MAAMI,IAAI,GAAGlB,QAAQ,CAACgB,OAAO,CAAC;EAC9B,MAAMH,eAAe,GAAG,MAAMI,oBAAoB,CAACE,QAAQ,CAACD,IAAI,CAAC;EACjE,OAAON,gBAAgB,CAACC,eAAe,EAAEC,QAAQ,CAAC,CAACM,WAAW,CAACF,IAAI,CAAC;AACtE"},"metadata":{},"sourceType":"module"}