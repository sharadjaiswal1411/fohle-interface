{"ast":null,"code":"var _regeneratorRuntime = require(\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\nvar _asyncToGenerator = require(\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\nvar SafeEventEmitter = require('@metamask/safe-event-emitter').default;\nvar createScaffoldMiddleware = require('eth-json-rpc-middleware/scaffold');\nvar _require = require('json-rpc-engine'),\n  createAsyncMiddleware = _require.createAsyncMiddleware;\nvar createFilterMiddleware = require('./index.js');\nvar _require2 = require('./hexUtils.js'),\n  unsafeRandomBytes = _require2.unsafeRandomBytes,\n  incrementHexInt = _require2.incrementHexInt;\nvar getBlocksForRange = require('./getBlocksForRange.js');\nmodule.exports = createSubscriptionMiddleware;\nfunction createSubscriptionMiddleware(_ref) {\n  var blockTracker = _ref.blockTracker,\n    provider = _ref.provider;\n  // state and utilities for handling subscriptions\n  var subscriptions = {};\n  var filterManager = createFilterMiddleware({\n    blockTracker: blockTracker,\n    provider: provider\n  });\n\n  // internal flag\n  var isDestroyed = false;\n\n  // create subscriptionManager api object\n  var events = new SafeEventEmitter();\n  var middleware = createScaffoldMiddleware({\n    eth_subscribe: createAsyncMiddleware(subscribe),\n    eth_unsubscribe: createAsyncMiddleware(unsubscribe)\n  });\n  middleware.destroy = destroy;\n  return {\n    events: events,\n    middleware: middleware\n  };\n  function subscribe(_x, _x2) {\n    return _subscribe.apply(this, arguments);\n  }\n  function _subscribe() {\n    _subscribe = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(req, res) {\n      var subscriptionType, subId, sub, filterParams, filter, createSubNewHeads, createSubFromFilter;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              createSubFromFilter = function _createSubFromFilter(_ref4) {\n                var subId = _ref4.subId,\n                  filter = _ref4.filter;\n                filter.on('update', function (result) {\n                  return _emitSubscriptionResult(subId, result);\n                });\n                var sub = {\n                  type: subscriptionType,\n                  destroy: function () {\n                    var _destroy2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n                      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                        while (1) {\n                          switch (_context3.prev = _context3.next) {\n                            case 0:\n                              _context3.next = 2;\n                              return filterManager.uninstallFilter(filter.idHex);\n                            case 2:\n                              return _context3.abrupt(\"return\", _context3.sent);\n                            case 3:\n                            case \"end\":\n                              return _context3.stop();\n                          }\n                        }\n                      }, _callee3);\n                    }));\n                    function destroy() {\n                      return _destroy2.apply(this, arguments);\n                    }\n                    return destroy;\n                  }()\n                };\n                return sub;\n              };\n              createSubNewHeads = function _createSubNewHeads(_ref2) {\n                var subId = _ref2.subId;\n                var sub = {\n                  type: subscriptionType,\n                  destroy: function () {\n                    var _destroy = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                      return _regeneratorRuntime.wrap(function _callee$(_context) {\n                        while (1) {\n                          switch (_context.prev = _context.next) {\n                            case 0:\n                              blockTracker.removeListener('sync', sub.update);\n                            case 1:\n                            case \"end\":\n                              return _context.stop();\n                          }\n                        }\n                      }, _callee);\n                    }));\n                    function destroy() {\n                      return _destroy.apply(this, arguments);\n                    }\n                    return destroy;\n                  }(),\n                  update: function () {\n                    var _update = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref3) {\n                      var oldBlock, newBlock, toBlock, fromBlock, rawBlocks, results;\n                      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                        while (1) {\n                          switch (_context2.prev = _context2.next) {\n                            case 0:\n                              oldBlock = _ref3.oldBlock, newBlock = _ref3.newBlock;\n                              // for newHeads\n                              toBlock = newBlock;\n                              fromBlock = incrementHexInt(oldBlock);\n                              _context2.next = 5;\n                              return getBlocksForRange({\n                                provider: provider,\n                                fromBlock: fromBlock,\n                                toBlock: toBlock\n                              });\n                            case 5:\n                              rawBlocks = _context2.sent;\n                              results = rawBlocks.map(normalizeBlock);\n                              results.forEach(function (value) {\n                                _emitSubscriptionResult(subId, value);\n                              });\n                            case 8:\n                            case \"end\":\n                              return _context2.stop();\n                          }\n                        }\n                      }, _callee2);\n                    }));\n                    function update(_x5) {\n                      return _update.apply(this, arguments);\n                    }\n                    return update;\n                  }()\n                };\n                // check for subscription updates on new block\n                blockTracker.on('sync', sub.update);\n                return sub;\n              };\n              if (!isDestroyed) {\n                _context4.next = 4;\n                break;\n              }\n              throw new Error('SubscriptionManager - attempting to use after destroying');\n            case 4:\n              subscriptionType = req.params[0]; // subId is 16 byte hex string\n              subId = unsafeRandomBytes(16); // create sub\n              _context4.t0 = subscriptionType;\n              _context4.next = _context4.t0 === 'newHeads' ? 9 : _context4.t0 === 'logs' ? 11 : 17;\n              break;\n            case 9:\n              sub = createSubNewHeads({\n                subId: subId\n              });\n              return _context4.abrupt(\"break\", 18);\n            case 11:\n              filterParams = req.params[1];\n              _context4.next = 14;\n              return filterManager.newLogFilter(filterParams);\n            case 14:\n              filter = _context4.sent;\n              sub = createSubFromFilter({\n                subId: subId,\n                filter: filter\n              });\n              return _context4.abrupt(\"break\", 18);\n            case 17:\n              throw new Error(\"SubscriptionManager - unsupported subscription type \\\"\".concat(subscriptionType, \"\\\"\"));\n            case 18:\n              subscriptions[subId] = sub;\n              res.result = subId;\n              return _context4.abrupt(\"return\");\n            case 21:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n    return _subscribe.apply(this, arguments);\n  }\n  function unsubscribe(_x3, _x4) {\n    return _unsubscribe.apply(this, arguments);\n  }\n  function _unsubscribe() {\n    _unsubscribe = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(req, res) {\n      var id, subscription;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              if (!isDestroyed) {\n                _context5.next = 2;\n                break;\n              }\n              throw new Error('SubscriptionManager - attempting to use after destroying');\n            case 2:\n              id = req.params[0];\n              subscription = subscriptions[id]; // if missing, return \"false\" to indicate it was not removed\n              if (subscription) {\n                _context5.next = 7;\n                break;\n              }\n              res.result = false;\n              return _context5.abrupt(\"return\");\n            case 7:\n              // cleanup subscription\n              delete subscriptions[id];\n              _context5.next = 10;\n              return subscription.destroy();\n            case 10:\n              res.result = true;\n            case 11:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n    return _unsubscribe.apply(this, arguments);\n  }\n  function _emitSubscriptionResult(filterIdHex, value) {\n    events.emit('notification', {\n      jsonrpc: '2.0',\n      method: 'eth_subscription',\n      params: {\n        subscription: filterIdHex,\n        result: value\n      }\n    });\n  }\n  function destroy() {\n    events.removeAllListeners();\n    for (var id in subscriptions) {\n      subscriptions[id].destroy();\n      delete subscriptions[id];\n    }\n    isDestroyed = true;\n  }\n}\nfunction normalizeBlock(block) {\n  return {\n    hash: block.hash,\n    parentHash: block.parentHash,\n    sha3Uncles: block.sha3Uncles,\n    miner: block.miner,\n    stateRoot: block.stateRoot,\n    transactionsRoot: block.transactionsRoot,\n    receiptsRoot: block.receiptsRoot,\n    logsBloom: block.logsBloom,\n    difficulty: block.difficulty,\n    number: block.number,\n    gasLimit: block.gasLimit,\n    gasUsed: block.gasUsed,\n    nonce: block.nonce,\n    mixHash: block.mixHash,\n    timestamp: block.timestamp,\n    extraData: block.extraData\n  };\n}","map":{"version":3,"names":["SafeEventEmitter","require","default","createScaffoldMiddleware","createAsyncMiddleware","createFilterMiddleware","unsafeRandomBytes","incrementHexInt","getBlocksForRange","module","exports","createSubscriptionMiddleware","blockTracker","provider","subscriptions","filterManager","isDestroyed","events","middleware","eth_subscribe","subscribe","eth_unsubscribe","unsubscribe","destroy","req","res","createSubNewHeads","createSubFromFilter","subId","filter","on","result","_emitSubscriptionResult","sub","type","subscriptionType","uninstallFilter","idHex","removeListener","update","oldBlock","newBlock","toBlock","fromBlock","rawBlocks","results","map","normalizeBlock","forEach","value","Error","params","filterParams","newLogFilter","id","subscription","filterIdHex","emit","jsonrpc","method","removeAllListeners","block","hash","parentHash","sha3Uncles","miner","stateRoot","transactionsRoot","receiptsRoot","logsBloom","difficulty","number","gasLimit","gasUsed","nonce","mixHash","timestamp","extraData"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/eth-json-rpc-filters/subscriptionManager.js"],"sourcesContent":["const SafeEventEmitter = require('@metamask/safe-event-emitter').default\nconst createScaffoldMiddleware = require('eth-json-rpc-middleware/scaffold')\nconst { createAsyncMiddleware } = require('json-rpc-engine')\nconst createFilterMiddleware = require('./index.js')\nconst { unsafeRandomBytes, incrementHexInt } = require('./hexUtils.js')\nconst getBlocksForRange = require('./getBlocksForRange.js')\n\nmodule.exports = createSubscriptionMiddleware\n\n\nfunction createSubscriptionMiddleware({ blockTracker, provider }) {\n  // state and utilities for handling subscriptions\n  const subscriptions = {}\n  const filterManager = createFilterMiddleware({ blockTracker, provider })\n\n  // internal flag\n  let isDestroyed = false\n\n  // create subscriptionManager api object\n  const events = new SafeEventEmitter()\n  const middleware = createScaffoldMiddleware({\n    eth_subscribe: createAsyncMiddleware(subscribe),\n    eth_unsubscribe: createAsyncMiddleware(unsubscribe),\n  })\n  middleware.destroy = destroy\n  return { events, middleware }\n\n  async function subscribe(req, res) {\n\n    if (isDestroyed) throw new Error(\n      'SubscriptionManager - attempting to use after destroying'\n    )\n\n    const subscriptionType = req.params[0]\n    // subId is 16 byte hex string\n    const subId = unsafeRandomBytes(16)\n\n    // create sub\n    let sub\n    switch (subscriptionType) {\n      case 'newHeads':\n        sub = createSubNewHeads({ subId })\n        break\n      case 'logs':\n        const filterParams = req.params[1]\n        const filter = await filterManager.newLogFilter(filterParams)\n        sub = createSubFromFilter({ subId, filter })\n        break\n      default:\n        throw new Error(`SubscriptionManager - unsupported subscription type \"${subscriptionType}\"`)\n\n    }\n    subscriptions[subId] = sub\n\n    res.result = subId\n    return\n\n    function createSubNewHeads({ subId }) {\n      const sub = {\n        type: subscriptionType,\n        destroy: async () => {\n          blockTracker.removeListener('sync', sub.update)\n        },\n        update: async ({ oldBlock, newBlock }) => {\n          // for newHeads\n          const toBlock = newBlock\n          const fromBlock = incrementHexInt(oldBlock)\n          const rawBlocks = await getBlocksForRange({ provider, fromBlock, toBlock })\n          const results = rawBlocks.map(normalizeBlock)\n          results.forEach((value) => {\n            _emitSubscriptionResult(subId, value)\n          })\n        }\n      }\n      // check for subscription updates on new block\n      blockTracker.on('sync', sub.update)\n      return sub\n    }\n\n    function createSubFromFilter({ subId, filter }){\n      filter.on('update', result => _emitSubscriptionResult(subId, result))\n      const sub = {\n        type: subscriptionType,\n        destroy: async () => {\n          return await filterManager.uninstallFilter(filter.idHex)\n        },\n      }\n      return sub\n    }\n  }\n\n  async function unsubscribe(req, res) {\n\n    if (isDestroyed) throw new Error(\n      'SubscriptionManager - attempting to use after destroying'\n    )\n\n    const id = req.params[0]\n    const subscription = subscriptions[id]\n    // if missing, return \"false\" to indicate it was not removed\n    if (!subscription) {\n      res.result = false\n      return\n    }\n    // cleanup subscription\n    delete subscriptions[id]\n    await subscription.destroy()\n    res.result = true\n  }\n\n  function _emitSubscriptionResult(filterIdHex, value) {\n    events.emit('notification', {\n      jsonrpc: '2.0',\n      method: 'eth_subscription',\n      params: {\n        subscription: filterIdHex,\n        result: value,\n      },\n    })\n  }\n\n  function destroy () {\n    events.removeAllListeners()\n    for (const id in subscriptions) {\n      subscriptions[id].destroy()\n      delete subscriptions[id]\n    }\n    isDestroyed = true\n  }\n}\n\nfunction normalizeBlock(block) {\n  return {\n    hash: block.hash,\n    parentHash: block.parentHash,\n    sha3Uncles: block.sha3Uncles,\n    miner: block.miner,\n    stateRoot: block.stateRoot,\n    transactionsRoot: block.transactionsRoot,\n    receiptsRoot: block.receiptsRoot,\n    logsBloom: block.logsBloom,\n    difficulty: block.difficulty,\n    number: block.number,\n    gasLimit: block.gasLimit,\n    gasUsed: block.gasUsed,\n    nonce: block.nonce,\n    mixHash: block.mixHash,\n    timestamp: block.timestamp,\n    extraData: block.extraData,\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}