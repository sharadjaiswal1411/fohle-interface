{"ast":null,"code":"import { BigNumber } from '@ethersproject/bignumber';\nimport _ from 'lodash';\nimport { log, WRAPPED_NATIVE_CURRENCY } from '../../../../util';\nimport { CurrencyAmount } from '../../../../util/amounts';\nimport { IV2GasModelFactory, usdGasTokensByChain } from '../gas-model';\n// Constant cost for doing any swap regardless of pools.\nexport const BASE_SWAP_COST = BigNumber.from(135000); // 115000, bumped up by 20_000 @eric 7/8/2022\n// Constant per extra hop in the route.\nexport const COST_PER_EXTRA_HOP = BigNumber.from(50000); // 20000, bumped up by 30_000 @eric 7/8/2022\n/**\n * Computes a gas estimate for a V2 swap using heuristics.\n * Considers number of hops in the route and the typical base cost for a swap.\n *\n * We compute gas estimates off-chain because\n *  1/ Calling eth_estimateGas for a swaps requires the caller to have\n *     the full balance token being swapped, and approvals.\n *  2/ Tracking gas used using a wrapper contract is not accurate with Multicall\n *     due to EIP-2929. We would have to make a request for every swap we wanted to estimate.\n *  3/ For V2 we simulate all our swaps off-chain so have no way to track gas used.\n *\n * Note, certain tokens e.g. rebasing/fee-on-transfer, may incur higher gas costs than\n * what we estimate here. This is because they run extra logic on token transfer.\n *\n * @export\n * @class V2HeuristicGasModelFactory\n */\nexport class V2HeuristicGasModelFactory extends IV2GasModelFactory {\n  constructor() {\n    super();\n  }\n  async buildGasModel(_ref) {\n    let {\n      chainId,\n      gasPriceWei,\n      poolProvider,\n      token\n    } = _ref;\n    if (token.equals(WRAPPED_NATIVE_CURRENCY[chainId])) {\n      const usdPool = await this.getHighestLiquidityUSDPool(chainId, poolProvider);\n      return {\n        estimateGasCost: routeWithValidQuote => {\n          const {\n            gasCostInEth,\n            gasUse\n          } = this.estimateGas(routeWithValidQuote, gasPriceWei, chainId);\n          const ethToken0 = usdPool.token0.address == WRAPPED_NATIVE_CURRENCY[chainId].address;\n          const ethTokenPrice = ethToken0 ? usdPool.token0Price : usdPool.token1Price;\n          const gasCostInTermsOfUSD = ethTokenPrice.quote(gasCostInEth);\n          return {\n            gasEstimate: gasUse,\n            gasCostInToken: gasCostInEth,\n            gasCostInUSD: gasCostInTermsOfUSD\n          };\n        }\n      };\n    }\n    // If the quote token is not WETH, we convert the gas cost to be in terms of the quote token.\n    // We do this by getting the highest liquidity <token>/ETH pool.\n    const ethPool = await this.getEthPool(chainId, token, poolProvider);\n    if (!ethPool) {\n      log.info('Unable to find ETH pool with the quote token to produce gas adjusted costs. Route will not account for gas.');\n    }\n    const usdPool = await this.getHighestLiquidityUSDPool(chainId, poolProvider);\n    return {\n      estimateGasCost: routeWithValidQuote => {\n        const usdToken = usdPool.token0.address == WRAPPED_NATIVE_CURRENCY[chainId].address ? usdPool.token1 : usdPool.token0;\n        const {\n          gasCostInEth,\n          gasUse\n        } = this.estimateGas(routeWithValidQuote, gasPriceWei, chainId);\n        if (!ethPool) {\n          return {\n            gasEstimate: gasUse,\n            gasCostInToken: CurrencyAmount.fromRawAmount(token, 0),\n            gasCostInUSD: CurrencyAmount.fromRawAmount(usdToken, 0)\n          };\n        }\n        const ethToken0 = ethPool.token0.address == WRAPPED_NATIVE_CURRENCY[chainId].address;\n        const ethTokenPrice = ethToken0 ? ethPool.token0Price : ethPool.token1Price;\n        let gasCostInTermsOfQuoteToken;\n        try {\n          gasCostInTermsOfQuoteToken = ethTokenPrice.quote(gasCostInEth);\n        } catch (err) {\n          log.error({\n            ethTokenPriceBase: ethTokenPrice.baseCurrency,\n            ethTokenPriceQuote: ethTokenPrice.quoteCurrency,\n            gasCostInEth: gasCostInEth.currency\n          }, 'Debug eth price token issue');\n          throw err;\n        }\n        const ethToken0USDPool = usdPool.token0.address == WRAPPED_NATIVE_CURRENCY[chainId].address;\n        const ethTokenPriceUSDPool = ethToken0USDPool ? usdPool.token0Price : usdPool.token1Price;\n        let gasCostInTermsOfUSD;\n        try {\n          gasCostInTermsOfUSD = ethTokenPriceUSDPool.quote(gasCostInEth);\n        } catch (err) {\n          log.error({\n            usdT1: usdPool.token0.symbol,\n            usdT2: usdPool.token1.symbol,\n            gasCostInEthToken: gasCostInEth.currency.symbol\n          }, 'Failed to compute USD gas price');\n          throw err;\n        }\n        return {\n          gasEstimate: gasUse,\n          gasCostInToken: gasCostInTermsOfQuoteToken,\n          gasCostInUSD: gasCostInTermsOfUSD\n        };\n      }\n    };\n  }\n  estimateGas(routeWithValidQuote, gasPriceWei, chainId) {\n    const hops = routeWithValidQuote.route.pairs.length;\n    const gasUse = BASE_SWAP_COST.add(COST_PER_EXTRA_HOP.mul(hops - 1));\n    const totalGasCostWei = gasPriceWei.mul(gasUse);\n    const weth = WRAPPED_NATIVE_CURRENCY[chainId];\n    const gasCostInEth = CurrencyAmount.fromRawAmount(weth, totalGasCostWei.toString());\n    return {\n      gasCostInEth,\n      gasUse\n    };\n  }\n  async getEthPool(chainId, token, poolProvider) {\n    const weth = WRAPPED_NATIVE_CURRENCY[chainId];\n    const poolAccessor = await poolProvider.getPools([[weth, token]]);\n    const pool = poolAccessor.getPool(weth, token);\n    if (!pool || pool.reserve0.equalTo(0) || pool.reserve1.equalTo(0)) {\n      log.error({\n        weth,\n        token,\n        reserve0: pool === null || pool === void 0 ? void 0 : pool.reserve0.toExact(),\n        reserve1: pool === null || pool === void 0 ? void 0 : pool.reserve1.toExact()\n      }, `Could not find a valid WETH pool with ${token.symbol} for computing gas costs.`);\n      return null;\n    }\n    return pool;\n  }\n  async getHighestLiquidityUSDPool(chainId, poolProvider) {\n    const usdTokens = usdGasTokensByChain[chainId];\n    if (!usdTokens) {\n      throw new Error(`Could not find a USD token for computing gas costs on ${chainId}`);\n    }\n    const usdPools = _.map(usdTokens, usdToken => [usdToken, WRAPPED_NATIVE_CURRENCY[chainId]]);\n    const poolAccessor = await poolProvider.getPools(usdPools);\n    const poolsRaw = poolAccessor.getAllPools();\n    const pools = _.filter(poolsRaw, pool => pool.reserve0.greaterThan(0) && pool.reserve1.greaterThan(0));\n    if (pools.length == 0) {\n      log.error({\n        pools\n      }, `Could not find a USD/WETH pool for computing gas costs.`);\n      throw new Error(`Can't find USD/WETH pool for computing gas costs.`);\n    }\n    const maxPool = _.maxBy(pools, pool => {\n      if (pool.token0.equals(WRAPPED_NATIVE_CURRENCY[chainId])) {\n        return parseFloat(pool.reserve0.toSignificant(2));\n      } else {\n        return parseFloat(pool.reserve1.toSignificant(2));\n      }\n    });\n    return maxPool;\n  }\n}","map":{"version":3,"sources":["../../../../../../src/routers/alpha-router/gas-models/v2/v2-heuristic-gas-model.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { BigNumber } from '@ethersproject/bignumber';\nimport _ from 'lodash';\nimport { log, WRAPPED_NATIVE_CURRENCY } from '../../../../util';\nimport { CurrencyAmount } from '../../../../util/amounts';\nimport { IV2GasModelFactory, usdGasTokensByChain, } from '../gas-model';\n// Constant cost for doing any swap regardless of pools.\nexport const BASE_SWAP_COST = BigNumber.from(135000); // 115000, bumped up by 20_000 @eric 7/8/2022\n// Constant per extra hop in the route.\nexport const COST_PER_EXTRA_HOP = BigNumber.from(50000); // 20000, bumped up by 30_000 @eric 7/8/2022\n/**\n * Computes a gas estimate for a V2 swap using heuristics.\n * Considers number of hops in the route and the typical base cost for a swap.\n *\n * We compute gas estimates off-chain because\n *  1/ Calling eth_estimateGas for a swaps requires the caller to have\n *     the full balance token being swapped, and approvals.\n *  2/ Tracking gas used using a wrapper contract is not accurate with Multicall\n *     due to EIP-2929. We would have to make a request for every swap we wanted to estimate.\n *  3/ For V2 we simulate all our swaps off-chain so have no way to track gas used.\n *\n * Note, certain tokens e.g. rebasing/fee-on-transfer, may incur higher gas costs than\n * what we estimate here. This is because they run extra logic on token transfer.\n *\n * @export\n * @class V2HeuristicGasModelFactory\n */\nexport class V2HeuristicGasModelFactory extends IV2GasModelFactory {\n    constructor() {\n        super();\n    }\n    async buildGasModel({ chainId, gasPriceWei, poolProvider, token, }) {\n        if (token.equals(WRAPPED_NATIVE_CURRENCY[chainId])) {\n            const usdPool = await this.getHighestLiquidityUSDPool(chainId, poolProvider);\n            return {\n                estimateGasCost: (routeWithValidQuote) => {\n                    const { gasCostInEth, gasUse } = this.estimateGas(routeWithValidQuote, gasPriceWei, chainId);\n                    const ethToken0 = usdPool.token0.address == WRAPPED_NATIVE_CURRENCY[chainId].address;\n                    const ethTokenPrice = ethToken0\n                        ? usdPool.token0Price\n                        : usdPool.token1Price;\n                    const gasCostInTermsOfUSD = ethTokenPrice.quote(gasCostInEth);\n                    return {\n                        gasEstimate: gasUse,\n                        gasCostInToken: gasCostInEth,\n                        gasCostInUSD: gasCostInTermsOfUSD,\n                    };\n                },\n            };\n        }\n        // If the quote token is not WETH, we convert the gas cost to be in terms of the quote token.\n        // We do this by getting the highest liquidity <token>/ETH pool.\n        const ethPool = await this.getEthPool(chainId, token, poolProvider);\n        if (!ethPool) {\n            log.info('Unable to find ETH pool with the quote token to produce gas adjusted costs. Route will not account for gas.');\n        }\n        const usdPool = await this.getHighestLiquidityUSDPool(chainId, poolProvider);\n        return {\n            estimateGasCost: (routeWithValidQuote) => {\n                const usdToken = usdPool.token0.address == WRAPPED_NATIVE_CURRENCY[chainId].address\n                    ? usdPool.token1\n                    : usdPool.token0;\n                const { gasCostInEth, gasUse } = this.estimateGas(routeWithValidQuote, gasPriceWei, chainId);\n                if (!ethPool) {\n                    return {\n                        gasEstimate: gasUse,\n                        gasCostInToken: CurrencyAmount.fromRawAmount(token, 0),\n                        gasCostInUSD: CurrencyAmount.fromRawAmount(usdToken, 0),\n                    };\n                }\n                const ethToken0 = ethPool.token0.address == WRAPPED_NATIVE_CURRENCY[chainId].address;\n                const ethTokenPrice = ethToken0\n                    ? ethPool.token0Price\n                    : ethPool.token1Price;\n                let gasCostInTermsOfQuoteToken;\n                try {\n                    gasCostInTermsOfQuoteToken = ethTokenPrice.quote(gasCostInEth);\n                }\n                catch (err) {\n                    log.error({\n                        ethTokenPriceBase: ethTokenPrice.baseCurrency,\n                        ethTokenPriceQuote: ethTokenPrice.quoteCurrency,\n                        gasCostInEth: gasCostInEth.currency,\n                    }, 'Debug eth price token issue');\n                    throw err;\n                }\n                const ethToken0USDPool = usdPool.token0.address == WRAPPED_NATIVE_CURRENCY[chainId].address;\n                const ethTokenPriceUSDPool = ethToken0USDPool\n                    ? usdPool.token0Price\n                    : usdPool.token1Price;\n                let gasCostInTermsOfUSD;\n                try {\n                    gasCostInTermsOfUSD = ethTokenPriceUSDPool.quote(gasCostInEth);\n                }\n                catch (err) {\n                    log.error({\n                        usdT1: usdPool.token0.symbol,\n                        usdT2: usdPool.token1.symbol,\n                        gasCostInEthToken: gasCostInEth.currency.symbol,\n                    }, 'Failed to compute USD gas price');\n                    throw err;\n                }\n                return {\n                    gasEstimate: gasUse,\n                    gasCostInToken: gasCostInTermsOfQuoteToken,\n                    gasCostInUSD: gasCostInTermsOfUSD,\n                };\n            },\n        };\n    }\n    estimateGas(routeWithValidQuote, gasPriceWei, chainId) {\n        const hops = routeWithValidQuote.route.pairs.length;\n        const gasUse = BASE_SWAP_COST.add(COST_PER_EXTRA_HOP.mul(hops - 1));\n        const totalGasCostWei = gasPriceWei.mul(gasUse);\n        const weth = WRAPPED_NATIVE_CURRENCY[chainId];\n        const gasCostInEth = CurrencyAmount.fromRawAmount(weth, totalGasCostWei.toString());\n        return { gasCostInEth, gasUse };\n    }\n    async getEthPool(chainId, token, poolProvider) {\n        const weth = WRAPPED_NATIVE_CURRENCY[chainId];\n        const poolAccessor = await poolProvider.getPools([[weth, token]]);\n        const pool = poolAccessor.getPool(weth, token);\n        if (!pool || pool.reserve0.equalTo(0) || pool.reserve1.equalTo(0)) {\n            log.error({\n                weth,\n                token,\n                reserve0: pool === null || pool === void 0 ? void 0 : pool.reserve0.toExact(),\n                reserve1: pool === null || pool === void 0 ? void 0 : pool.reserve1.toExact(),\n            }, `Could not find a valid WETH pool with ${token.symbol} for computing gas costs.`);\n            return null;\n        }\n        return pool;\n    }\n    async getHighestLiquidityUSDPool(chainId, poolProvider) {\n        const usdTokens = usdGasTokensByChain[chainId];\n        if (!usdTokens) {\n            throw new Error(`Could not find a USD token for computing gas costs on ${chainId}`);\n        }\n        const usdPools = _.map(usdTokens, (usdToken) => [\n            usdToken,\n            WRAPPED_NATIVE_CURRENCY[chainId],\n        ]);\n        const poolAccessor = await poolProvider.getPools(usdPools);\n        const poolsRaw = poolAccessor.getAllPools();\n        const pools = _.filter(poolsRaw, (pool) => pool.reserve0.greaterThan(0) && pool.reserve1.greaterThan(0));\n        if (pools.length == 0) {\n            log.error({ pools }, `Could not find a USD/WETH pool for computing gas costs.`);\n            throw new Error(`Can't find USD/WETH pool for computing gas costs.`);\n        }\n        const maxPool = _.maxBy(pools, (pool) => {\n            if (pool.token0.equals(WRAPPED_NATIVE_CURRENCY[chainId])) {\n                return parseFloat(pool.reserve0.toSignificant(2));\n            }\n            else {\n                return parseFloat(pool.reserve1.toSignificant(2));\n            }\n        });\n        return maxPool;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidjItaGV1cmlzdGljLWdhcy1tb2RlbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9yb3V0ZXJzL2FscGhhLXJvdXRlci9nYXMtbW9kZWxzL3YyL3YyLWhldXJpc3RpYy1nYXMtbW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBR3JELE9BQU8sQ0FBQyxNQUFNLFFBQVEsQ0FBQztBQUd2QixPQUFPLEVBQVcsR0FBRyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDekUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBRTFELE9BQU8sRUFHTCxrQkFBa0IsRUFDbEIsbUJBQW1CLEdBQ3BCLE1BQU0sY0FBYyxDQUFDO0FBRXRCLHdEQUF3RDtBQUN4RCxNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLDZDQUE2QztBQUVuRyx1Q0FBdUM7QUFDdkMsTUFBTSxDQUFDLE1BQU0sa0JBQWtCLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLDRDQUE0QztBQUVyRzs7Ozs7Ozs7Ozs7Ozs7OztHQWdCRztBQUNILE1BQU0sT0FBTywwQkFBMkIsU0FBUSxrQkFBa0I7SUFDaEU7UUFDRSxLQUFLLEVBQUUsQ0FBQztJQUNWLENBQUM7SUFFTSxLQUFLLENBQUMsYUFBYSxDQUFDLEVBQ3pCLE9BQU8sRUFDUCxXQUFXLEVBQ1gsWUFBWSxFQUNaLEtBQUssR0FDc0I7UUFDM0IsSUFBSSxLQUFLLENBQUMsTUFBTSxDQUFDLHVCQUF1QixDQUFDLE9BQU8sQ0FBRSxDQUFDLEVBQUU7WUFDbkQsTUFBTSxPQUFPLEdBQVMsTUFBTSxJQUFJLENBQUMsMEJBQTBCLENBQ3pELE9BQU8sRUFDUCxZQUFZLENBQ2IsQ0FBQztZQUVGLE9BQU87Z0JBQ0wsZUFBZSxFQUFFLENBQUMsbUJBQTBDLEVBQUUsRUFBRTtvQkFDOUQsTUFBTSxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUMvQyxtQkFBbUIsRUFDbkIsV0FBVyxFQUNYLE9BQU8sQ0FDUixDQUFDO29CQUVGLE1BQU0sU0FBUyxHQUNiLE9BQU8sQ0FBQyxNQUFNLENBQUMsT0FBTyxJQUFJLHVCQUF1QixDQUFDLE9BQU8sQ0FBRSxDQUFDLE9BQU8sQ0FBQztvQkFFdEUsTUFBTSxhQUFhLEdBQUcsU0FBUzt3QkFDN0IsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxXQUFXO3dCQUNyQixDQUFDLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQztvQkFFeEIsTUFBTSxtQkFBbUIsR0FBbUIsYUFBYSxDQUFDLEtBQUssQ0FDN0QsWUFBWSxDQUNLLENBQUM7b0JBRXBCLE9BQU87d0JBQ0wsV0FBVyxFQUFFLE1BQU07d0JBQ25CLGNBQWMsRUFBRSxZQUFZO3dCQUM1QixZQUFZLEVBQUUsbUJBQW1CO3FCQUNsQyxDQUFDO2dCQUNKLENBQUM7YUFDRixDQUFDO1NBQ0g7UUFFRCw2RkFBNkY7UUFDN0YsZ0VBQWdFO1FBQ2hFLE1BQU0sT0FBTyxHQUFnQixNQUFNLElBQUksQ0FBQyxVQUFVLENBQ2hELE9BQU8sRUFDUCxLQUFLLEVBQ0wsWUFBWSxDQUNiLENBQUM7UUFDRixJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ1osR0FBRyxDQUFDLElBQUksQ0FDTiw2R0FBNkcsQ0FDOUcsQ0FBQztTQUNIO1FBRUQsTUFBTSxPQUFPLEdBQVMsTUFBTSxJQUFJLENBQUMsMEJBQTBCLENBQ3pELE9BQU8sRUFDUCxZQUFZLENBQ2IsQ0FBQztRQUVGLE9BQU87WUFDTCxlQUFlLEVBQUUsQ0FBQyxtQkFBMEMsRUFBRSxFQUFFO2dCQUM5RCxNQUFNLFFBQVEsR0FDWixPQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sSUFBSSx1QkFBdUIsQ0FBQyxPQUFPLENBQUUsQ0FBQyxPQUFPO29CQUNqRSxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU07b0JBQ2hCLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDO2dCQUVyQixNQUFNLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQy9DLG1CQUFtQixFQUNuQixXQUFXLEVBQ1gsT0FBTyxDQUNSLENBQUM7Z0JBRUYsSUFBSSxDQUFDLE9BQU8sRUFBRTtvQkFDWixPQUFPO3dCQUNMLFdBQVcsRUFBRSxNQUFNO3dCQUNuQixjQUFjLEVBQUUsY0FBYyxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO3dCQUN0RCxZQUFZLEVBQUUsY0FBYyxDQUFDLGFBQWEsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO3FCQUN4RCxDQUFDO2lCQUNIO2dCQUVELE1BQU0sU0FBUyxHQUNiLE9BQU8sQ0FBQyxNQUFNLENBQUMsT0FBTyxJQUFJLHVCQUF1QixDQUFDLE9BQU8sQ0FBRSxDQUFDLE9BQU8sQ0FBQztnQkFFdEUsTUFBTSxhQUFhLEdBQUcsU0FBUztvQkFDN0IsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxXQUFXO29CQUNyQixDQUFDLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQztnQkFFeEIsSUFBSSwwQkFBMEMsQ0FBQztnQkFDL0MsSUFBSTtvQkFDRiwwQkFBMEIsR0FBRyxhQUFhLENBQUMsS0FBSyxDQUM5QyxZQUFZLENBQ0ssQ0FBQztpQkFDckI7Z0JBQUMsT0FBTyxHQUFHLEVBQUU7b0JBQ1osR0FBRyxDQUFDLEtBQUssQ0FDUDt3QkFDRSxpQkFBaUIsRUFBRSxhQUFhLENBQUMsWUFBWTt3QkFDN0Msa0JBQWtCLEVBQUUsYUFBYSxDQUFDLGFBQWE7d0JBQy9DLFlBQVksRUFBRSxZQUFZLENBQUMsUUFBUTtxQkFDcEMsRUFDRCw2QkFBNkIsQ0FDOUIsQ0FBQztvQkFDRixNQUFNLEdBQUcsQ0FBQztpQkFDWDtnQkFFRCxNQUFNLGdCQUFnQixHQUNwQixPQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sSUFBSSx1QkFBdUIsQ0FBQyxPQUFPLENBQUUsQ0FBQyxPQUFPLENBQUM7Z0JBRXRFLE1BQU0sb0JBQW9CLEdBQUcsZ0JBQWdCO29CQUMzQyxDQUFDLENBQUMsT0FBTyxDQUFDLFdBQVc7b0JBQ3JCLENBQUMsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDO2dCQUV4QixJQUFJLG1CQUFtQyxDQUFDO2dCQUN4QyxJQUFJO29CQUNGLG1CQUFtQixHQUFHLG9CQUFvQixDQUFDLEtBQUssQ0FDOUMsWUFBWSxDQUNLLENBQUM7aUJBQ3JCO2dCQUFDLE9BQU8sR0FBRyxFQUFFO29CQUNaLEdBQUcsQ0FBQyxLQUFLLENBQ1A7d0JBQ0UsS0FBSyxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTTt3QkFDNUIsS0FBSyxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTTt3QkFDNUIsaUJBQWlCLEVBQUUsWUFBWSxDQUFDLFFBQVEsQ0FBQyxNQUFNO3FCQUNoRCxFQUNELGlDQUFpQyxDQUNsQyxDQUFDO29CQUNGLE1BQU0sR0FBRyxDQUFDO2lCQUNYO2dCQUVELE9BQU87b0JBQ0wsV0FBVyxFQUFFLE1BQU07b0JBQ25CLGNBQWMsRUFBRSwwQkFBMEI7b0JBQzFDLFlBQVksRUFBRSxtQkFBb0I7aUJBQ25DLENBQUM7WUFDSixDQUFDO1NBQ0YsQ0FBQztJQUNKLENBQUM7SUFFTyxXQUFXLENBQ2pCLG1CQUEwQyxFQUMxQyxXQUFzQixFQUN0QixPQUFnQjtRQUVoQixNQUFNLElBQUksR0FBRyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQztRQUNwRCxNQUFNLE1BQU0sR0FBRyxjQUFjLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUVwRSxNQUFNLGVBQWUsR0FBRyxXQUFXLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRWhELE1BQU0sSUFBSSxHQUFHLHVCQUF1QixDQUFDLE9BQU8sQ0FBRSxDQUFDO1FBRS9DLE1BQU0sWUFBWSxHQUFHLGNBQWMsQ0FBQyxhQUFhLENBQy9DLElBQUksRUFDSixlQUFlLENBQUMsUUFBUSxFQUFFLENBQzNCLENBQUM7UUFFRixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxDQUFDO0lBQ2xDLENBQUM7SUFFTyxLQUFLLENBQUMsVUFBVSxDQUN0QixPQUFnQixFQUNoQixLQUFZLEVBQ1osWUFBNkI7UUFFN0IsTUFBTSxJQUFJLEdBQUcsdUJBQXVCLENBQUMsT0FBTyxDQUFFLENBQUM7UUFFL0MsTUFBTSxZQUFZLEdBQUcsTUFBTSxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2xFLE1BQU0sSUFBSSxHQUFHLFlBQVksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRS9DLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDakUsR0FBRyxDQUFDLEtBQUssQ0FDUDtnQkFDRSxJQUFJO2dCQUNKLEtBQUs7Z0JBQ0wsUUFBUSxFQUFFLElBQUksYUFBSixJQUFJLHVCQUFKLElBQUksQ0FBRSxRQUFRLENBQUMsT0FBTyxFQUFFO2dCQUNsQyxRQUFRLEVBQUUsSUFBSSxhQUFKLElBQUksdUJBQUosSUFBSSxDQUFFLFFBQVEsQ0FBQyxPQUFPLEVBQUU7YUFDbkMsRUFDRCx5Q0FBeUMsS0FBSyxDQUFDLE1BQU0sMkJBQTJCLENBQ2pGLENBQUM7WUFFRixPQUFPLElBQUksQ0FBQztTQUNiO1FBRUQsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRU8sS0FBSyxDQUFDLDBCQUEwQixDQUN0QyxPQUFnQixFQUNoQixZQUE2QjtRQUU3QixNQUFNLFNBQVMsR0FBRyxtQkFBbUIsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUUvQyxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2QsTUFBTSxJQUFJLEtBQUssQ0FDYix5REFBeUQsT0FBTyxFQUFFLENBQ25FLENBQUM7U0FDSDtRQUVELE1BQU0sUUFBUSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQXdCLFNBQVMsRUFBRSxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUM7WUFDckUsUUFBUTtZQUNSLHVCQUF1QixDQUFDLE9BQU8sQ0FBRTtTQUNsQyxDQUFDLENBQUM7UUFDSCxNQUFNLFlBQVksR0FBRyxNQUFNLFlBQVksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDM0QsTUFBTSxRQUFRLEdBQUcsWUFBWSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQzVDLE1BQU0sS0FBSyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQ3BCLFFBQVEsRUFDUixDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQ3ZFLENBQUM7UUFFRixJQUFJLEtBQUssQ0FBQyxNQUFNLElBQUksQ0FBQyxFQUFFO1lBQ3JCLEdBQUcsQ0FBQyxLQUFLLENBQ1AsRUFBRSxLQUFLLEVBQUUsRUFDVCx5REFBeUQsQ0FDMUQsQ0FBQztZQUNGLE1BQU0sSUFBSSxLQUFLLENBQUMsbURBQW1ELENBQUMsQ0FBQztTQUN0RTtRQUVELE1BQU0sT0FBTyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxFQUFFLEVBQUU7WUFDdEMsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyx1QkFBdUIsQ0FBQyxPQUFPLENBQUUsQ0FBQyxFQUFFO2dCQUN6RCxPQUFPLFVBQVUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ25EO2lCQUFNO2dCQUNMLE9BQU8sVUFBVSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDbkQ7UUFDSCxDQUFDLENBQVMsQ0FBQztRQUVYLE9BQU8sT0FBTyxDQUFDO0lBQ2pCLENBQUM7Q0FDRiJ9"]},"metadata":{},"sourceType":"module"}