{"ast":null,"code":"import { Connector } from '@web3-react/types';\nimport { coinbaseWalletConnection, ConnectionType, gnosisSafeConnection, injectedConnection, networkConnection, walletConnectConnection } from 'connection';\nexport function getIsInjected() {\n  return Boolean(window.ethereum);\n}\nexport function getIsMetaMask() {\n  var _window$ethereum$isMe, _window$ethereum;\n  return (_window$ethereum$isMe = (_window$ethereum = window.ethereum) === null || _window$ethereum === void 0 ? void 0 : _window$ethereum.isMetaMask) !== null && _window$ethereum$isMe !== void 0 ? _window$ethereum$isMe : false;\n}\nexport function getIsCoinbaseWallet() {\n  var _window$ethereum$isCo, _window$ethereum2;\n  return (_window$ethereum$isCo = (_window$ethereum2 = window.ethereum) === null || _window$ethereum2 === void 0 ? void 0 : _window$ethereum2.isCoinbaseWallet) !== null && _window$ethereum$isCo !== void 0 ? _window$ethereum$isCo : false;\n}\nconst CONNECTIONS = [gnosisSafeConnection, injectedConnection, coinbaseWalletConnection, walletConnectConnection, networkConnection];\nexport function getConnection(c) {\n  if (c instanceof Connector) {\n    const connection = CONNECTIONS.find(connection => connection.connector === c);\n    if (!connection) {\n      throw Error('unsupported connector');\n    }\n    return connection;\n  } else {\n    switch (c) {\n      case ConnectionType.INJECTED:\n        return injectedConnection;\n      case ConnectionType.COINBASE_WALLET:\n        return coinbaseWalletConnection;\n      case ConnectionType.WALLET_CONNECT:\n        return walletConnectConnection;\n      case ConnectionType.NETWORK:\n        return networkConnection;\n      case ConnectionType.GNOSIS_SAFE:\n        return gnosisSafeConnection;\n    }\n  }\n}\nexport function getConnectionName(connectionType, isMetaMask) {\n  switch (connectionType) {\n    case ConnectionType.INJECTED:\n      return isMetaMask ? 'MetaMask' : 'Browser Wallet';\n    case ConnectionType.COINBASE_WALLET:\n      return 'Coinbase Wallet';\n    case ConnectionType.WALLET_CONNECT:\n      return 'WalletConnect';\n    case ConnectionType.NETWORK:\n      return 'Network';\n    case ConnectionType.GNOSIS_SAFE:\n      return 'Gnosis Safe';\n  }\n}","map":{"version":3,"names":["Connector","coinbaseWalletConnection","ConnectionType","gnosisSafeConnection","injectedConnection","networkConnection","walletConnectConnection","getIsInjected","Boolean","window","ethereum","getIsMetaMask","isMetaMask","getIsCoinbaseWallet","isCoinbaseWallet","CONNECTIONS","getConnection","c","connection","find","connector","Error","INJECTED","COINBASE_WALLET","WALLET_CONNECT","NETWORK","GNOSIS_SAFE","getConnectionName","connectionType"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/connection/utils.ts"],"sourcesContent":["import { Connector } from '@web3-react/types'\nimport {\n  coinbaseWalletConnection,\n  ConnectionType,\n  gnosisSafeConnection,\n  injectedConnection,\n  networkConnection,\n  walletConnectConnection,\n} from 'connection'\n\nexport function getIsInjected(): boolean {\n  return Boolean(window.ethereum)\n}\n\nexport function getIsMetaMask(): boolean {\n  return window.ethereum?.isMetaMask ?? false\n}\n\nexport function getIsCoinbaseWallet(): boolean {\n  return window.ethereum?.isCoinbaseWallet ?? false\n}\n\nconst CONNECTIONS = [\n  gnosisSafeConnection,\n  injectedConnection,\n  coinbaseWalletConnection,\n  walletConnectConnection,\n  networkConnection,\n]\nexport function getConnection(c: Connector | ConnectionType) {\n  if (c instanceof Connector) {\n    const connection = CONNECTIONS.find((connection) => connection.connector === c)\n    if (!connection) {\n      throw Error('unsupported connector')\n    }\n    return connection\n  } else {\n    switch (c) {\n      case ConnectionType.INJECTED:\n        return injectedConnection\n      case ConnectionType.COINBASE_WALLET:\n        return coinbaseWalletConnection\n      case ConnectionType.WALLET_CONNECT:\n        return walletConnectConnection\n      case ConnectionType.NETWORK:\n        return networkConnection\n      case ConnectionType.GNOSIS_SAFE:\n        return gnosisSafeConnection\n    }\n  }\n}\n\nexport function getConnectionName(connectionType: ConnectionType, isMetaMask?: boolean) {\n  switch (connectionType) {\n    case ConnectionType.INJECTED:\n      return isMetaMask ? 'MetaMask' : 'Browser Wallet'\n    case ConnectionType.COINBASE_WALLET:\n      return 'Coinbase Wallet'\n    case ConnectionType.WALLET_CONNECT:\n      return 'WalletConnect'\n    case ConnectionType.NETWORK:\n      return 'Network'\n    case ConnectionType.GNOSIS_SAFE:\n      return 'Gnosis Safe'\n  }\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,mBAAmB;AAC7C,SACEC,wBAAwB,EACxBC,cAAc,EACdC,oBAAoB,EACpBC,kBAAkB,EAClBC,iBAAiB,EACjBC,uBAAuB,QAClB,YAAY;AAEnB,OAAO,SAASC,aAAa,GAAY;EACvC,OAAOC,OAAO,CAACC,MAAM,CAACC,QAAQ,CAAC;AACjC;AAEA,OAAO,SAASC,aAAa,GAAY;EAAA;EACvC,oDAAOF,MAAM,CAACC,QAAQ,qDAAf,iBAAiBE,UAAU,yEAAI,KAAK;AAC7C;AAEA,OAAO,SAASC,mBAAmB,GAAY;EAAA;EAC7C,qDAAOJ,MAAM,CAACC,QAAQ,sDAAf,kBAAiBI,gBAAgB,yEAAI,KAAK;AACnD;AAEA,MAAMC,WAAW,GAAG,CAClBZ,oBAAoB,EACpBC,kBAAkB,EAClBH,wBAAwB,EACxBK,uBAAuB,EACvBD,iBAAiB,CAClB;AACD,OAAO,SAASW,aAAa,CAACC,CAA6B,EAAE;EAC3D,IAAIA,CAAC,YAAYjB,SAAS,EAAE;IAC1B,MAAMkB,UAAU,GAAGH,WAAW,CAACI,IAAI,CAAED,UAAU,IAAKA,UAAU,CAACE,SAAS,KAAKH,CAAC,CAAC;IAC/E,IAAI,CAACC,UAAU,EAAE;MACf,MAAMG,KAAK,CAAC,uBAAuB,CAAC;IACtC;IACA,OAAOH,UAAU;EACnB,CAAC,MAAM;IACL,QAAQD,CAAC;MACP,KAAKf,cAAc,CAACoB,QAAQ;QAC1B,OAAOlB,kBAAkB;MAC3B,KAAKF,cAAc,CAACqB,eAAe;QACjC,OAAOtB,wBAAwB;MACjC,KAAKC,cAAc,CAACsB,cAAc;QAChC,OAAOlB,uBAAuB;MAChC,KAAKJ,cAAc,CAACuB,OAAO;QACzB,OAAOpB,iBAAiB;MAC1B,KAAKH,cAAc,CAACwB,WAAW;QAC7B,OAAOvB,oBAAoB;IAAA;EAEjC;AACF;AAEA,OAAO,SAASwB,iBAAiB,CAACC,cAA8B,EAAEhB,UAAoB,EAAE;EACtF,QAAQgB,cAAc;IACpB,KAAK1B,cAAc,CAACoB,QAAQ;MAC1B,OAAOV,UAAU,GAAG,UAAU,GAAG,gBAAgB;IACnD,KAAKV,cAAc,CAACqB,eAAe;MACjC,OAAO,iBAAiB;IAC1B,KAAKrB,cAAc,CAACsB,cAAc;MAChC,OAAO,eAAe;IACxB,KAAKtB,cAAc,CAACuB,OAAO;MACzB,OAAO,SAAS;IAClB,KAAKvB,cAAc,CAACwB,WAAW;MAC7B,OAAO,aAAa;EAAA;AAE1B"},"metadata":{},"sourceType":"module"}