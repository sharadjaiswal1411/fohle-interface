{"ast":null,"code":"import store from '../state';\nimport { UNI_EXTENDED_LIST, UNI_LIST, UNSUPPORTED_LIST_URLS } from './lists';\nimport brokenTokenList from './tokenLists/broken.tokenlist.json';\nimport { NATIVE_CHAIN_ID } from './tokens';\nexport let TOKEN_LIST_TYPES;\n(function (TOKEN_LIST_TYPES) {\n  TOKEN_LIST_TYPES[TOKEN_LIST_TYPES[\"UNI_DEFAULT\"] = 1] = \"UNI_DEFAULT\";\n  TOKEN_LIST_TYPES[TOKEN_LIST_TYPES[\"UNI_EXTENDED\"] = 2] = \"UNI_EXTENDED\";\n  TOKEN_LIST_TYPES[TOKEN_LIST_TYPES[\"UNKNOWN\"] = 3] = \"UNKNOWN\";\n  TOKEN_LIST_TYPES[TOKEN_LIST_TYPES[\"BLOCKED\"] = 4] = \"BLOCKED\";\n  TOKEN_LIST_TYPES[TOKEN_LIST_TYPES[\"BROKEN\"] = 5] = \"BROKEN\";\n})(TOKEN_LIST_TYPES || (TOKEN_LIST_TYPES = {}));\nclass TokenSafetyLookupTable {\n  constructor() {\n    this.dict = null;\n  }\n  createMap() {\n    var _store$getState$lists, _store$getState$lists2;\n    const dict = {};\n\n    // Initialize extended tokens first\n    (_store$getState$lists = store.getState().lists.byUrl[UNI_EXTENDED_LIST].current) === null || _store$getState$lists === void 0 ? void 0 : _store$getState$lists.tokens.forEach(token => {\n      dict[token.address.toLowerCase()] = TOKEN_LIST_TYPES.UNI_EXTENDED;\n    });\n\n    // Initialize default tokens second, so that any tokens on both default and extended will display as default (no warning)\n    (_store$getState$lists2 = store.getState().lists.byUrl[UNI_LIST].current) === null || _store$getState$lists2 === void 0 ? void 0 : _store$getState$lists2.tokens.forEach(token => {\n      dict[token.address.toLowerCase()] = TOKEN_LIST_TYPES.UNI_DEFAULT;\n    });\n\n    // TODO: Figure out if this list is still relevant\n    brokenTokenList.tokens.forEach(token => {\n      dict[token.address.toLowerCase()] = TOKEN_LIST_TYPES.BROKEN;\n    });\n\n    // Initialize blocked tokens from all urls included\n    UNSUPPORTED_LIST_URLS.map(url => {\n      var _store$getState$lists3;\n      return (_store$getState$lists3 = store.getState().lists.byUrl[url].current) === null || _store$getState$lists3 === void 0 ? void 0 : _store$getState$lists3.tokens;\n    }).filter(x => !!x).flat(1).forEach(token => {\n      dict[token.address.toLowerCase()] = TOKEN_LIST_TYPES.BLOCKED;\n    });\n    return dict;\n  }\n  checkToken(address) {\n    var _this$dict$address;\n    if (!this.dict) {\n      this.dict = this.createMap();\n    }\n    if (address === NATIVE_CHAIN_ID.toLowerCase()) {\n      return TOKEN_LIST_TYPES.UNI_DEFAULT;\n    }\n    return (_this$dict$address = this.dict[address]) !== null && _this$dict$address !== void 0 ? _this$dict$address : TOKEN_LIST_TYPES.UNKNOWN;\n  }\n}\nexport default new TokenSafetyLookupTable();","map":{"version":3,"names":["store","UNI_EXTENDED_LIST","UNI_LIST","UNSUPPORTED_LIST_URLS","brokenTokenList","NATIVE_CHAIN_ID","TOKEN_LIST_TYPES","TokenSafetyLookupTable","dict","createMap","getState","lists","byUrl","current","tokens","forEach","token","address","toLowerCase","UNI_EXTENDED","UNI_DEFAULT","BROKEN","map","url","filter","x","flat","BLOCKED","checkToken","UNKNOWN"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/constants/TokenSafetyLookupTable.ts"],"sourcesContent":["import { TokenInfo } from '@uniswap/token-lists'\n\nimport store from '../state'\nimport { UNI_EXTENDED_LIST, UNI_LIST, UNSUPPORTED_LIST_URLS } from './lists'\nimport brokenTokenList from './tokenLists/broken.tokenlist.json'\nimport { NATIVE_CHAIN_ID } from './tokens'\n\nexport enum TOKEN_LIST_TYPES {\n  UNI_DEFAULT = 1,\n  UNI_EXTENDED,\n  UNKNOWN,\n  BLOCKED,\n  BROKEN,\n}\n\nclass TokenSafetyLookupTable {\n  dict: { [key: string]: TOKEN_LIST_TYPES } | null = null\n\n  createMap() {\n    const dict: { [key: string]: TOKEN_LIST_TYPES } = {}\n\n    // Initialize extended tokens first\n    store.getState().lists.byUrl[UNI_EXTENDED_LIST].current?.tokens.forEach((token) => {\n      dict[token.address.toLowerCase()] = TOKEN_LIST_TYPES.UNI_EXTENDED\n    })\n\n    // Initialize default tokens second, so that any tokens on both default and extended will display as default (no warning)\n    store.getState().lists.byUrl[UNI_LIST].current?.tokens.forEach((token) => {\n      dict[token.address.toLowerCase()] = TOKEN_LIST_TYPES.UNI_DEFAULT\n    })\n\n    // TODO: Figure out if this list is still relevant\n    brokenTokenList.tokens.forEach((token) => {\n      dict[token.address.toLowerCase()] = TOKEN_LIST_TYPES.BROKEN\n    })\n\n    // Initialize blocked tokens from all urls included\n    UNSUPPORTED_LIST_URLS.map((url) => store.getState().lists.byUrl[url].current?.tokens)\n      .filter((x): x is TokenInfo[] => !!x)\n      .flat(1)\n      .forEach((token) => {\n        dict[token.address.toLowerCase()] = TOKEN_LIST_TYPES.BLOCKED\n      })\n    return dict\n  }\n\n  checkToken(address: string) {\n    if (!this.dict) {\n      this.dict = this.createMap()\n    }\n    if (address === NATIVE_CHAIN_ID.toLowerCase()) {\n      return TOKEN_LIST_TYPES.UNI_DEFAULT\n    }\n    return this.dict[address] ?? TOKEN_LIST_TYPES.UNKNOWN\n  }\n}\n\nexport default new TokenSafetyLookupTable()\n"],"mappings":"AAEA,OAAOA,KAAK,MAAM,UAAU;AAC5B,SAASC,iBAAiB,EAAEC,QAAQ,EAAEC,qBAAqB,QAAQ,SAAS;AAC5E,OAAOC,eAAe,MAAM,oCAAoC;AAChE,SAASC,eAAe,QAAQ,UAAU;AAE1C,WAAYC,gBAAgB;AAM3B,WANWA,gBAAgB;EAAhBA,gBAAgB,CAAhBA,gBAAgB;EAAhBA,gBAAgB,CAAhBA,gBAAgB;EAAhBA,gBAAgB,CAAhBA,gBAAgB;EAAhBA,gBAAgB,CAAhBA,gBAAgB;EAAhBA,gBAAgB,CAAhBA,gBAAgB;AAAA,GAAhBA,gBAAgB,KAAhBA,gBAAgB;AAQ5B,MAAMC,sBAAsB,CAAC;EAAA;IAAA,KAC3BC,IAAI,GAA+C,IAAI;EAAA;EAEvDC,SAAS,GAAG;IAAA;IACV,MAAMD,IAAyC,GAAG,CAAC,CAAC;;IAEpD;IACA,yBAAAR,KAAK,CAACU,QAAQ,EAAE,CAACC,KAAK,CAACC,KAAK,CAACX,iBAAiB,CAAC,CAACY,OAAO,0DAAvD,sBAAyDC,MAAM,CAACC,OAAO,CAAEC,KAAK,IAAK;MACjFR,IAAI,CAACQ,KAAK,CAACC,OAAO,CAACC,WAAW,EAAE,CAAC,GAAGZ,gBAAgB,CAACa,YAAY;IACnE,CAAC,CAAC;;IAEF;IACA,0BAAAnB,KAAK,CAACU,QAAQ,EAAE,CAACC,KAAK,CAACC,KAAK,CAACV,QAAQ,CAAC,CAACW,OAAO,2DAA9C,uBAAgDC,MAAM,CAACC,OAAO,CAAEC,KAAK,IAAK;MACxER,IAAI,CAACQ,KAAK,CAACC,OAAO,CAACC,WAAW,EAAE,CAAC,GAAGZ,gBAAgB,CAACc,WAAW;IAClE,CAAC,CAAC;;IAEF;IACAhB,eAAe,CAACU,MAAM,CAACC,OAAO,CAAEC,KAAK,IAAK;MACxCR,IAAI,CAACQ,KAAK,CAACC,OAAO,CAACC,WAAW,EAAE,CAAC,GAAGZ,gBAAgB,CAACe,MAAM;IAC7D,CAAC,CAAC;;IAEF;IACAlB,qBAAqB,CAACmB,GAAG,CAAEC,GAAG;MAAA;MAAA,iCAAKvB,KAAK,CAACU,QAAQ,EAAE,CAACC,KAAK,CAACC,KAAK,CAACW,GAAG,CAAC,CAACV,OAAO,2DAAzC,uBAA2CC,MAAM;IAAA,EAAC,CAClFU,MAAM,CAAEC,CAAC,IAAuB,CAAC,CAACA,CAAC,CAAC,CACpCC,IAAI,CAAC,CAAC,CAAC,CACPX,OAAO,CAAEC,KAAK,IAAK;MAClBR,IAAI,CAACQ,KAAK,CAACC,OAAO,CAACC,WAAW,EAAE,CAAC,GAAGZ,gBAAgB,CAACqB,OAAO;IAC9D,CAAC,CAAC;IACJ,OAAOnB,IAAI;EACb;EAEAoB,UAAU,CAACX,OAAe,EAAE;IAAA;IAC1B,IAAI,CAAC,IAAI,CAACT,IAAI,EAAE;MACd,IAAI,CAACA,IAAI,GAAG,IAAI,CAACC,SAAS,EAAE;IAC9B;IACA,IAAIQ,OAAO,KAAKZ,eAAe,CAACa,WAAW,EAAE,EAAE;MAC7C,OAAOZ,gBAAgB,CAACc,WAAW;IACrC;IACA,6BAAO,IAAI,CAACZ,IAAI,CAACS,OAAO,CAAC,mEAAIX,gBAAgB,CAACuB,OAAO;EACvD;AACF;AAEA,eAAe,IAAItB,sBAAsB,EAAE"},"metadata":{},"sourceType":"module"}