{"ast":null,"code":"/**\n * Given a URI that may be ipfs, ipns, http, https, ar, or data protocol, return the fetch-able http(s) URLs for the same content\n * @param uri to convert to fetch-able http url\n */export default function uriToHttp(uri){var protocol=uri.split(':')[0].toLowerCase();switch(protocol){case'data':return[uri];case'https':return[uri];case'http':return['https'+uri.substr(4),uri];case'ipfs':{var _uri$match;var hash=(_uri$match=uri.match(/^ipfs:(\\/\\/)?(.*)$/i))===null||_uri$match===void 0?void 0:_uri$match[2];return[\"https://cloudflare-ipfs.com/ipfs/\".concat(hash,\"/\"),\"https://ipfs.io/ipfs/\".concat(hash,\"/\")];}case'ipns':{var _uri$match2;var name=(_uri$match2=uri.match(/^ipns:(\\/\\/)?(.*)$/i))===null||_uri$match2===void 0?void 0:_uri$match2[2];return[\"https://cloudflare-ipfs.com/ipns/\".concat(name,\"/\"),\"https://ipfs.io/ipns/\".concat(name,\"/\")];}case'ar':{var _uri$match3;var tx=(_uri$match3=uri.match(/^ar:(\\/\\/)?(.*)$/i))===null||_uri$match3===void 0?void 0:_uri$match3[2];return[\"https://arweave.net/\".concat(tx)];}default:return[];}}","map":{"version":3,"names":["uriToHttp","uri","protocol","split","toLowerCase","substr","hash","match","name","tx"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/lib/utils/uriToHttp.ts"],"sourcesContent":["/**\n * Given a URI that may be ipfs, ipns, http, https, ar, or data protocol, return the fetch-able http(s) URLs for the same content\n * @param uri to convert to fetch-able http url\n */\nexport default function uriToHttp(uri: string): string[] {\n  const protocol = uri.split(':')[0].toLowerCase()\n  switch (protocol) {\n    case 'data':\n      return [uri]\n    case 'https':\n      return [uri]\n    case 'http':\n      return ['https' + uri.substr(4), uri]\n    case 'ipfs': {\n      const hash = uri.match(/^ipfs:(\\/\\/)?(.*)$/i)?.[2]\n      return [`https://cloudflare-ipfs.com/ipfs/${hash}/`, `https://ipfs.io/ipfs/${hash}/`]\n    }\n    case 'ipns': {\n      const name = uri.match(/^ipns:(\\/\\/)?(.*)$/i)?.[2]\n      return [`https://cloudflare-ipfs.com/ipns/${name}/`, `https://ipfs.io/ipns/${name}/`]\n    }\n    case 'ar': {\n      const tx = uri.match(/^ar:(\\/\\/)?(.*)$/i)?.[2]\n      return [`https://arweave.net/${tx}`]\n    }\n    default:\n      return []\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,GACA,cAAe,SAASA,UAAS,CAACC,GAAW,CAAY,CACvD,GAAMC,SAAQ,CAAGD,GAAG,CAACE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACC,WAAW,EAAE,CAChD,OAAQF,QAAQ,EACd,IAAK,MAAM,CACT,MAAO,CAACD,GAAG,CAAC,CACd,IAAK,OAAO,CACV,MAAO,CAACA,GAAG,CAAC,CACd,IAAK,MAAM,CACT,MAAO,CAAC,OAAO,CAAGA,GAAG,CAACI,MAAM,CAAC,CAAC,CAAC,CAAEJ,GAAG,CAAC,CACvC,IAAK,MAAM,CAAE,gBACX,GAAMK,KAAI,aAAGL,GAAG,CAACM,KAAK,CAAC,qBAAqB,CAAC,qCAAhC,WAAmC,CAAC,CAAC,CAClD,MAAO,4CAAqCD,IAAI,qCAA6BA,IAAI,MAAI,CACvF,CACA,IAAK,MAAM,CAAE,iBACX,GAAME,KAAI,cAAGP,GAAG,CAACM,KAAK,CAAC,qBAAqB,CAAC,sCAAhC,YAAmC,CAAC,CAAC,CAClD,MAAO,4CAAqCC,IAAI,qCAA6BA,IAAI,MAAI,CACvF,CACA,IAAK,IAAI,CAAE,iBACT,GAAMC,GAAE,cAAGR,GAAG,CAACM,KAAK,CAAC,mBAAmB,CAAC,sCAA9B,YAAiC,CAAC,CAAC,CAC9C,MAAO,+BAAwBE,EAAE,EAAG,CACtC,CACA,QACE,MAAO,EAAE,EAEf"},"metadata":{},"sourceType":"module"}