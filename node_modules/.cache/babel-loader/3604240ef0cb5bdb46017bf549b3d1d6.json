{"ast":null,"code":"/**\n * gets the amoutn difference plus the % change in change itself (second order change)\n * @param {*} valueNow\n * @param {*} value24HoursAgo\n * @param {*} value48HoursAgo\n */export var get2DayChange=function get2DayChange(valueNow,value24HoursAgo,value48HoursAgo){// get volume info for both 24 hour periods\nvar currentChange=parseFloat(valueNow)-parseFloat(value24HoursAgo);var previousChange=parseFloat(value24HoursAgo)-parseFloat(value48HoursAgo);var adjustedPercentChange=(currentChange-previousChange)/previousChange*100;if(isNaN(adjustedPercentChange)||!isFinite(adjustedPercentChange)){return[currentChange,0];}return[currentChange,adjustedPercentChange];};/**\n * get standard percent change between two values\n * @param {*} valueNow\n * @param {*} value24HoursAgo\n */export var getPercentChange=function getPercentChange(valueNow,value24HoursAgo){if(valueNow&&value24HoursAgo){var change=(parseFloat(valueNow)-parseFloat(value24HoursAgo))/parseFloat(value24HoursAgo)*100;if(isFinite(change))return change;}return 0;};","map":{"version":3,"names":["get2DayChange","valueNow","value24HoursAgo","value48HoursAgo","currentChange","parseFloat","previousChange","adjustedPercentChange","isNaN","isFinite","getPercentChange","change"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/utils/data.ts"],"sourcesContent":["/**\n * gets the amoutn difference plus the % change in change itself (second order change)\n * @param {*} valueNow\n * @param {*} value24HoursAgo\n * @param {*} value48HoursAgo\n */\nexport const get2DayChange = (valueNow: string, value24HoursAgo: string, value48HoursAgo: string): [number, number] => {\n  // get volume info for both 24 hour periods\n  const currentChange = parseFloat(valueNow) - parseFloat(value24HoursAgo)\n  const previousChange = parseFloat(value24HoursAgo) - parseFloat(value48HoursAgo)\n  const adjustedPercentChange = ((currentChange - previousChange) / previousChange) * 100\n  if (isNaN(adjustedPercentChange) || !isFinite(adjustedPercentChange)) {\n    return [currentChange, 0]\n  }\n  return [currentChange, adjustedPercentChange]\n}\n\n/**\n * get standard percent change between two values\n * @param {*} valueNow\n * @param {*} value24HoursAgo\n */\nexport const getPercentChange = (valueNow: string | undefined, value24HoursAgo: string | undefined): number => {\n  if (valueNow && value24HoursAgo) {\n    const change = ((parseFloat(valueNow) - parseFloat(value24HoursAgo)) / parseFloat(value24HoursAgo)) * 100\n    if (isFinite(change)) return change\n  }\n  return 0\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,IAAMA,cAAa,CAAG,QAAhBA,cAAa,CAAIC,QAAgB,CAAEC,eAAuB,CAAEC,eAAuB,CAAuB,CACrH;AACA,GAAMC,cAAa,CAAGC,UAAU,CAACJ,QAAQ,CAAC,CAAGI,UAAU,CAACH,eAAe,CAAC,CACxE,GAAMI,eAAc,CAAGD,UAAU,CAACH,eAAe,CAAC,CAAGG,UAAU,CAACF,eAAe,CAAC,CAChF,GAAMI,sBAAqB,CAAI,CAACH,aAAa,CAAGE,cAAc,EAAIA,cAAc,CAAI,GAAG,CACvF,GAAIE,KAAK,CAACD,qBAAqB,CAAC,EAAI,CAACE,QAAQ,CAACF,qBAAqB,CAAC,CAAE,CACpE,MAAO,CAACH,aAAa,CAAE,CAAC,CAAC,CAC3B,CACA,MAAO,CAACA,aAAa,CAAEG,qBAAqB,CAAC,CAC/C,CAAC,CAED;AACA;AACA;AACA;AACA,GACA,MAAO,IAAMG,iBAAgB,CAAG,QAAnBA,iBAAgB,CAAIT,QAA4B,CAAEC,eAAmC,CAAa,CAC7G,GAAID,QAAQ,EAAIC,eAAe,CAAE,CAC/B,GAAMS,OAAM,CAAI,CAACN,UAAU,CAACJ,QAAQ,CAAC,CAAGI,UAAU,CAACH,eAAe,CAAC,EAAIG,UAAU,CAACH,eAAe,CAAC,CAAI,GAAG,CACzG,GAAIO,QAAQ,CAACE,MAAM,CAAC,CAAE,MAAOA,OAAM,CACrC,CACA,MAAO,EAAC,CACV,CAAC"},"metadata":{},"sourceType":"module"}