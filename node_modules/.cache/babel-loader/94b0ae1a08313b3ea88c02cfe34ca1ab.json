{"ast":null,"code":"var _s = $RefreshSig$();\nimport { parseEther } from '@ethersproject/units';\nimport gql from 'graphql-tag';\nimport { useMemo } from 'react';\nimport { useDetailsQuery } from '../__generated__/types-and-hooks';\ngql`\n  query Details($address: String!, $tokenId: String!) {\n    nftAssets(address: $address, filter: { listed: false, tokenIds: [$tokenId] }) {\n      edges {\n        node {\n          id\n          name\n          ownerAddress\n          image {\n            url\n          }\n          smallImage {\n            url\n          }\n          originalImage {\n            url\n          }\n          tokenId\n          description\n          animationUrl\n          suspiciousFlag\n          creator {\n            address\n            profileImage {\n              url\n            }\n            isVerified\n          }\n          collection {\n            name\n            isVerified\n            numAssets\n            twitterName\n            discordUrl\n            homepageUrl\n            image {\n              url\n            }\n            nftContracts {\n              address\n              standard\n            }\n            description\n          }\n          listings(first: 1) {\n            edges {\n              node {\n                address\n                createdAt\n                endAt\n                id\n                maker\n                marketplace\n                marketplaceUrl\n                orderHash\n                price {\n                  currency\n                  value\n                }\n                quantity\n                startAt\n                status\n                taker\n                tokenId\n                type\n                protocolParameters\n              }\n              cursor\n            }\n          }\n          rarities {\n            provider\n            rank\n            score\n          }\n          metadataUrl\n          traits {\n            name\n            value\n          }\n        }\n      }\n    }\n  }\n`;\nexport function useNftAssetDetails(address, tokenId) {\n  _s();\n  var _queryData$nftAssets, _queryData$nftAssets$, _asset$listings, _asset$listings$edges, _listing$price$value$, _listing$price, _listing$price$value;\n  const {\n    data: queryData,\n    loading\n  } = useDetailsQuery({\n    variables: {\n      address,\n      tokenId\n    }\n  });\n  const asset = queryData === null || queryData === void 0 ? void 0 : (_queryData$nftAssets = queryData.nftAssets) === null || _queryData$nftAssets === void 0 ? void 0 : (_queryData$nftAssets$ = _queryData$nftAssets.edges[0]) === null || _queryData$nftAssets$ === void 0 ? void 0 : _queryData$nftAssets$.node;\n  const collection = asset === null || asset === void 0 ? void 0 : asset.collection;\n  const listing = asset === null || asset === void 0 ? void 0 : (_asset$listings = asset.listings) === null || _asset$listings === void 0 ? void 0 : (_asset$listings$edges = _asset$listings.edges[0]) === null || _asset$listings$edges === void 0 ? void 0 : _asset$listings$edges.node;\n  const ethPrice = parseEther((_listing$price$value$ = listing === null || listing === void 0 ? void 0 : (_listing$price = listing.price) === null || _listing$price === void 0 ? void 0 : (_listing$price$value = _listing$price.value) === null || _listing$price$value === void 0 ? void 0 : _listing$price$value.toString()) !== null && _listing$price$value$ !== void 0 ? _listing$price$value$ : '0').toString();\n  return useMemo(() => {\n    var _asset$collection, _asset$collection2, _asset$collection2$im, _asset$image, _asset$listings2, _asset$smallImage, _asset$collection3, _asset$collection3$nf, _asset$collection3$nf2, _asset$collection4, _asset$rarities, _asset$creator$profil, _asset$creator, _asset$creator$profil2, _asset$creator$addres, _asset$creator2, _asset$metadataUrl, _asset$traits, _collection$image;\n    return {\n      data: [{\n        id: asset === null || asset === void 0 ? void 0 : asset.id,\n        address,\n        notForSale: (asset === null || asset === void 0 ? void 0 : asset.listings) === null,\n        collectionName: asset === null || asset === void 0 ? void 0 : (_asset$collection = asset.collection) === null || _asset$collection === void 0 ? void 0 : _asset$collection.name,\n        collectionSymbol: asset === null || asset === void 0 ? void 0 : (_asset$collection2 = asset.collection) === null || _asset$collection2 === void 0 ? void 0 : (_asset$collection2$im = _asset$collection2.image) === null || _asset$collection2$im === void 0 ? void 0 : _asset$collection2$im.url,\n        imageUrl: asset === null || asset === void 0 ? void 0 : (_asset$image = asset.image) === null || _asset$image === void 0 ? void 0 : _asset$image.url,\n        animationUrl: asset === null || asset === void 0 ? void 0 : asset.animationUrl,\n        marketplace: listing === null || listing === void 0 ? void 0 : listing.marketplace.toLowerCase(),\n        name: asset === null || asset === void 0 ? void 0 : asset.name,\n        priceInfo: {\n          ETHPrice: ethPrice,\n          baseAsset: 'ETH',\n          baseDecimals: '18',\n          basePrice: ethPrice\n        },\n        susFlag: asset === null || asset === void 0 ? void 0 : asset.suspiciousFlag,\n        sellorders: asset === null || asset === void 0 ? void 0 : (_asset$listings2 = asset.listings) === null || _asset$listings2 === void 0 ? void 0 : _asset$listings2.edges.map(listingNode => {\n          return {\n            ...listingNode.node,\n            protocolParameters: listingNode.node.protocolParameters ? JSON.parse(listingNode.node.protocolParameters.toString()) : undefined\n          };\n        }),\n        smallImageUrl: asset === null || asset === void 0 ? void 0 : (_asset$smallImage = asset.smallImage) === null || _asset$smallImage === void 0 ? void 0 : _asset$smallImage.url,\n        tokenId,\n        tokenType: asset === null || asset === void 0 ? void 0 : (_asset$collection3 = asset.collection) === null || _asset$collection3 === void 0 ? void 0 : (_asset$collection3$nf = _asset$collection3.nftContracts) === null || _asset$collection3$nf === void 0 ? void 0 : (_asset$collection3$nf2 = _asset$collection3$nf[0]) === null || _asset$collection3$nf2 === void 0 ? void 0 : _asset$collection3$nf2.standard,\n        collectionIsVerified: asset === null || asset === void 0 ? void 0 : (_asset$collection4 = asset.collection) === null || _asset$collection4 === void 0 ? void 0 : _asset$collection4.isVerified,\n        rarity: {\n          primaryProvider: 'Rarity Sniper',\n          // TODO update when backend adds more providers\n          providers: asset === null || asset === void 0 ? void 0 : (_asset$rarities = asset.rarities) === null || _asset$rarities === void 0 ? void 0 : _asset$rarities.map(rarity => {\n            return {\n              rank: rarity.rank,\n              score: rarity.score,\n              provider: 'Rarity Sniper'\n            };\n          })\n        },\n        ownerAddress: asset === null || asset === void 0 ? void 0 : asset.ownerAddress,\n        creator: {\n          profile_img_url: (_asset$creator$profil = asset === null || asset === void 0 ? void 0 : (_asset$creator = asset.creator) === null || _asset$creator === void 0 ? void 0 : (_asset$creator$profil2 = _asset$creator.profileImage) === null || _asset$creator$profil2 === void 0 ? void 0 : _asset$creator$profil2.url) !== null && _asset$creator$profil !== void 0 ? _asset$creator$profil : '',\n          address: (_asset$creator$addres = asset === null || asset === void 0 ? void 0 : (_asset$creator2 = asset.creator) === null || _asset$creator2 === void 0 ? void 0 : _asset$creator2.address) !== null && _asset$creator$addres !== void 0 ? _asset$creator$addres : ''\n        },\n        metadataUrl: (_asset$metadataUrl = asset === null || asset === void 0 ? void 0 : asset.metadataUrl) !== null && _asset$metadataUrl !== void 0 ? _asset$metadataUrl : '',\n        traits: asset === null || asset === void 0 ? void 0 : (_asset$traits = asset.traits) === null || _asset$traits === void 0 ? void 0 : _asset$traits.map(trait => {\n          var _trait$name, _trait$value;\n          return {\n            trait_type: (_trait$name = trait.name) !== null && _trait$name !== void 0 ? _trait$name : '',\n            trait_value: (_trait$value = trait.value) !== null && _trait$value !== void 0 ? _trait$value : ''\n          };\n        })\n      }, {\n        collectionDescription: collection === null || collection === void 0 ? void 0 : collection.description,\n        collectionImageUrl: collection === null || collection === void 0 ? void 0 : (_collection$image = collection.image) === null || _collection$image === void 0 ? void 0 : _collection$image.url,\n        collectionName: collection === null || collection === void 0 ? void 0 : collection.name,\n        isVerified: collection === null || collection === void 0 ? void 0 : collection.isVerified,\n        totalSupply: collection === null || collection === void 0 ? void 0 : collection.numAssets,\n        twitterUrl: collection === null || collection === void 0 ? void 0 : collection.twitterName,\n        discordUrl: collection === null || collection === void 0 ? void 0 : collection.discordUrl,\n        externalUrl: collection === null || collection === void 0 ? void 0 : collection.homepageUrl\n      }],\n      loading\n    };\n  }, [address, asset, collection, ethPrice, listing === null || listing === void 0 ? void 0 : listing.marketplace, loading, tokenId]);\n}\n_s(useNftAssetDetails, \"PeAfmmNObsa/sUHs9t/uJtdx5Ng=\", false, function () {\n  return [useDetailsQuery];\n});","map":{"version":3,"names":["parseEther","gql","useMemo","useDetailsQuery","useNftAssetDetails","address","tokenId","data","queryData","loading","variables","asset","nftAssets","edges","node","collection","listing","listings","ethPrice","price","value","toString","id","notForSale","collectionName","name","collectionSymbol","image","url","imageUrl","animationUrl","marketplace","toLowerCase","priceInfo","ETHPrice","baseAsset","baseDecimals","basePrice","susFlag","suspiciousFlag","sellorders","map","listingNode","protocolParameters","JSON","parse","undefined","smallImageUrl","smallImage","tokenType","nftContracts","standard","collectionIsVerified","isVerified","rarity","primaryProvider","providers","rarities","rank","score","provider","ownerAddress","creator","profile_img_url","profileImage","metadataUrl","traits","trait","trait_type","trait_value","collectionDescription","description","collectionImageUrl","totalSupply","numAssets","twitterUrl","twitterName","discordUrl","externalUrl","homepageUrl"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/graphql/data/nft/Details.ts"],"sourcesContent":["import { parseEther } from '@ethersproject/units'\nimport gql from 'graphql-tag'\nimport { CollectionInfoForAsset, GenieAsset, Markets, SellOrder } from 'nft/types'\nimport { useMemo } from 'react'\n\nimport { NftAsset, useDetailsQuery } from '../__generated__/types-and-hooks'\n\ngql`\n  query Details($address: String!, $tokenId: String!) {\n    nftAssets(address: $address, filter: { listed: false, tokenIds: [$tokenId] }) {\n      edges {\n        node {\n          id\n          name\n          ownerAddress\n          image {\n            url\n          }\n          smallImage {\n            url\n          }\n          originalImage {\n            url\n          }\n          tokenId\n          description\n          animationUrl\n          suspiciousFlag\n          creator {\n            address\n            profileImage {\n              url\n            }\n            isVerified\n          }\n          collection {\n            name\n            isVerified\n            numAssets\n            twitterName\n            discordUrl\n            homepageUrl\n            image {\n              url\n            }\n            nftContracts {\n              address\n              standard\n            }\n            description\n          }\n          listings(first: 1) {\n            edges {\n              node {\n                address\n                createdAt\n                endAt\n                id\n                maker\n                marketplace\n                marketplaceUrl\n                orderHash\n                price {\n                  currency\n                  value\n                }\n                quantity\n                startAt\n                status\n                taker\n                tokenId\n                type\n                protocolParameters\n              }\n              cursor\n            }\n          }\n          rarities {\n            provider\n            rank\n            score\n          }\n          metadataUrl\n          traits {\n            name\n            value\n          }\n        }\n      }\n    }\n  }\n`\n\nexport function useNftAssetDetails(\n  address: string,\n  tokenId: string\n): { data: [GenieAsset, CollectionInfoForAsset]; loading: boolean } {\n  const { data: queryData, loading } = useDetailsQuery({\n    variables: {\n      address,\n      tokenId,\n    },\n  })\n\n  const asset = queryData?.nftAssets?.edges[0]?.node as NonNullable<NftAsset> | undefined\n  const collection = asset?.collection\n  const listing = asset?.listings?.edges[0]?.node\n  const ethPrice = parseEther(listing?.price?.value?.toString() ?? '0').toString()\n\n  return useMemo(\n    () => ({\n      data: [\n        {\n          id: asset?.id,\n          address,\n          notForSale: asset?.listings === null,\n          collectionName: asset?.collection?.name,\n          collectionSymbol: asset?.collection?.image?.url,\n          imageUrl: asset?.image?.url,\n          animationUrl: asset?.animationUrl,\n          marketplace: listing?.marketplace.toLowerCase() as unknown as Markets,\n          name: asset?.name,\n          priceInfo: {\n            ETHPrice: ethPrice,\n            baseAsset: 'ETH',\n            baseDecimals: '18',\n            basePrice: ethPrice,\n          },\n          susFlag: asset?.suspiciousFlag,\n          sellorders: asset?.listings?.edges.map((listingNode) => {\n            return {\n              ...listingNode.node,\n              protocolParameters: listingNode.node.protocolParameters\n                ? JSON.parse(listingNode.node.protocolParameters.toString())\n                : undefined,\n            } as SellOrder\n          }),\n          smallImageUrl: asset?.smallImage?.url,\n          tokenId,\n          tokenType: asset?.collection?.nftContracts?.[0]?.standard,\n          collectionIsVerified: asset?.collection?.isVerified,\n          rarity: {\n            primaryProvider: 'Rarity Sniper', // TODO update when backend adds more providers\n            providers: asset?.rarities?.map((rarity) => {\n              return {\n                rank: rarity.rank,\n                score: rarity.score,\n                provider: 'Rarity Sniper',\n              }\n            }),\n          },\n          ownerAddress: asset?.ownerAddress,\n          creator: {\n            profile_img_url: asset?.creator?.profileImage?.url ?? '',\n            address: asset?.creator?.address ?? '',\n          },\n          metadataUrl: asset?.metadataUrl ?? '',\n          traits: asset?.traits?.map((trait) => {\n            return { trait_type: trait.name ?? '', trait_value: trait.value ?? '' }\n          }),\n        },\n        {\n          collectionDescription: collection?.description,\n          collectionImageUrl: collection?.image?.url,\n          collectionName: collection?.name,\n          isVerified: collection?.isVerified,\n          totalSupply: collection?.numAssets,\n          twitterUrl: collection?.twitterName,\n          discordUrl: collection?.discordUrl,\n          externalUrl: collection?.homepageUrl,\n        },\n      ],\n      loading,\n    }),\n    [address, asset, collection, ethPrice, listing?.marketplace, loading, tokenId]\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}