{"ast":null,"code":"import _objectSpread from\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{createReducer}from'@reduxjs/toolkit';import{Field,resetMintState,setFullRange,typeInput,typeLeftRangeInput,typeRightRangeInput,typeStartPriceInput}from'./actions';var initialState={independentField:Field.CURRENCY_A,typedValue:'',startPriceTypedValue:'',leftRangeTypedValue:'',rightRangeTypedValue:''};export default createReducer(initialState,function(builder){return builder.addCase(resetMintState,function(){return initialState;}).addCase(setFullRange,function(state){return _objectSpread(_objectSpread({},state),{},{leftRangeTypedValue:true,rightRangeTypedValue:true});}).addCase(typeStartPriceInput,function(state,_ref){var typedValue=_ref.payload.typedValue;return _objectSpread(_objectSpread({},state),{},{startPriceTypedValue:typedValue});}).addCase(typeLeftRangeInput,function(state,_ref2){var typedValue=_ref2.payload.typedValue;return _objectSpread(_objectSpread({},state),{},{leftRangeTypedValue:typedValue});}).addCase(typeRightRangeInput,function(state,_ref3){var typedValue=_ref3.payload.typedValue;return _objectSpread(_objectSpread({},state),{},{rightRangeTypedValue:typedValue});}).addCase(typeInput,function(state,_ref4){var _ref4$payload=_ref4.payload,field=_ref4$payload.field,typedValue=_ref4$payload.typedValue,noLiquidity=_ref4$payload.noLiquidity;if(noLiquidity){// they're typing into the field they've last typed in\nif(field===state.independentField){return _objectSpread(_objectSpread({},state),{},{independentField:field,typedValue:typedValue});}// they're typing into a new field, store the other value\nelse{return _objectSpread(_objectSpread({},state),{},{independentField:field,typedValue:typedValue});}}else{return _objectSpread(_objectSpread({},state),{},{independentField:field,typedValue:typedValue});}});});","map":{"version":3,"names":["createReducer","Field","resetMintState","setFullRange","typeInput","typeLeftRangeInput","typeRightRangeInput","typeStartPriceInput","initialState","independentField","CURRENCY_A","typedValue","startPriceTypedValue","leftRangeTypedValue","rightRangeTypedValue","builder","addCase","state","payload","field","noLiquidity"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/state/mint/v3/reducer.ts"],"sourcesContent":["import { createReducer } from '@reduxjs/toolkit'\n\nimport {\n  Field,\n  resetMintState,\n  setFullRange,\n  typeInput,\n  typeLeftRangeInput,\n  typeRightRangeInput,\n  typeStartPriceInput,\n} from './actions'\n\ntype FullRange = true\n\ninterface MintState {\n  readonly independentField: Field\n  readonly typedValue: string\n  readonly startPriceTypedValue: string // for the case when there's no liquidity\n  readonly leftRangeTypedValue: string | FullRange\n  readonly rightRangeTypedValue: string | FullRange\n}\n\nconst initialState: MintState = {\n  independentField: Field.CURRENCY_A,\n  typedValue: '',\n  startPriceTypedValue: '',\n  leftRangeTypedValue: '',\n  rightRangeTypedValue: '',\n}\n\nexport default createReducer<MintState>(initialState, (builder) =>\n  builder\n    .addCase(resetMintState, () => initialState)\n    .addCase(setFullRange, (state) => {\n      return {\n        ...state,\n        leftRangeTypedValue: true,\n        rightRangeTypedValue: true,\n      }\n    })\n    .addCase(typeStartPriceInput, (state, { payload: { typedValue } }) => {\n      return {\n        ...state,\n        startPriceTypedValue: typedValue,\n      }\n    })\n    .addCase(typeLeftRangeInput, (state, { payload: { typedValue } }) => {\n      return {\n        ...state,\n        leftRangeTypedValue: typedValue,\n      }\n    })\n    .addCase(typeRightRangeInput, (state, { payload: { typedValue } }) => {\n      return {\n        ...state,\n        rightRangeTypedValue: typedValue,\n      }\n    })\n    .addCase(typeInput, (state, { payload: { field, typedValue, noLiquidity } }) => {\n      if (noLiquidity) {\n        // they're typing into the field they've last typed in\n        if (field === state.independentField) {\n          return {\n            ...state,\n            independentField: field,\n            typedValue,\n          }\n        }\n        // they're typing into a new field, store the other value\n        else {\n          return {\n            ...state,\n            independentField: field,\n            typedValue,\n          }\n        }\n      } else {\n        return {\n          ...state,\n          independentField: field,\n          typedValue,\n        }\n      }\n    })\n)\n"],"mappings":"2KAAA,OAASA,aAAa,KAAQ,kBAAkB,CAEhD,OACEC,KAAK,CACLC,cAAc,CACdC,YAAY,CACZC,SAAS,CACTC,kBAAkB,CAClBC,mBAAmB,CACnBC,mBAAmB,KACd,WAAW,CAYlB,GAAMC,aAAuB,CAAG,CAC9BC,gBAAgB,CAAER,KAAK,CAACS,UAAU,CAClCC,UAAU,CAAE,EAAE,CACdC,oBAAoB,CAAE,EAAE,CACxBC,mBAAmB,CAAE,EAAE,CACvBC,oBAAoB,CAAE,EACxB,CAAC,CAED,cAAed,cAAa,CAAYQ,YAAY,CAAE,SAACO,OAAO,QAC5DA,QAAO,CACJC,OAAO,CAACd,cAAc,CAAE,iBAAMM,aAAY,GAAC,CAC3CQ,OAAO,CAACb,YAAY,CAAE,SAACc,KAAK,CAAK,CAChC,sCACKA,KAAK,MACRJ,mBAAmB,CAAE,IAAI,CACzBC,oBAAoB,CAAE,IAAI,GAE9B,CAAC,CAAC,CACDE,OAAO,CAACT,mBAAmB,CAAE,SAACU,KAAK,MAAkC,IAAnBN,WAAU,MAArBO,OAAO,CAAIP,UAAU,CAC3D,sCACKM,KAAK,MACRL,oBAAoB,CAAED,UAAU,GAEpC,CAAC,CAAC,CACDK,OAAO,CAACX,kBAAkB,CAAE,SAACY,KAAK,OAAkC,IAAnBN,WAAU,OAArBO,OAAO,CAAIP,UAAU,CAC1D,sCACKM,KAAK,MACRJ,mBAAmB,CAAEF,UAAU,GAEnC,CAAC,CAAC,CACDK,OAAO,CAACV,mBAAmB,CAAE,SAACW,KAAK,OAAkC,IAAnBN,WAAU,OAArBO,OAAO,CAAIP,UAAU,CAC3D,sCACKM,KAAK,MACRH,oBAAoB,CAAEH,UAAU,GAEpC,CAAC,CAAC,CACDK,OAAO,CAACZ,SAAS,CAAE,SAACa,KAAK,OAAsD,yBAAlDC,OAAO,CAAIC,KAAK,eAALA,KAAK,CAAER,UAAU,eAAVA,UAAU,CAAES,WAAW,eAAXA,WAAW,CACrE,GAAIA,WAAW,CAAE,CACf;AACA,GAAID,KAAK,GAAKF,KAAK,CAACR,gBAAgB,CAAE,CACpC,sCACKQ,KAAK,MACRR,gBAAgB,CAAEU,KAAK,CACvBR,UAAU,CAAVA,UAAU,GAEd,CACA;AAAA,IACK,CACH,sCACKM,KAAK,MACRR,gBAAgB,CAAEU,KAAK,CACvBR,UAAU,CAAVA,UAAU,GAEd,CACF,CAAC,IAAM,CACL,sCACKM,KAAK,MACRR,gBAAgB,CAAEU,KAAK,CACvBR,UAAU,CAAVA,UAAU,GAEd,CACF,CAAC,CAAC,GACL"},"metadata":{},"sourceType":"module"}