{"ast":null,"code":"import axios from 'axios';\nimport { BigNumber } from 'ethers/lib/ethers';\nimport { Erc20__factory } from '../types/other/factories/Erc20__factory';\nimport { SwapRouter02__factory } from '../types/other/factories/SwapRouter02__factory';\nimport { ChainId, log, SWAP_ROUTER_ADDRESS } from '../util';\nimport { APPROVE_TOKEN_FOR_TRANSFER } from '../util/callData';\nimport { calculateGasUsed, initSwapRouteFromExisting } from '../util/gas-factory-helpers';\nconst TENDERLY_BATCH_SIMULATE_API = (tenderlyBaseUrl, tenderlyUser, tenderlyProject) => `${tenderlyBaseUrl}/api/v1/account/${tenderlyUser}/project/${tenderlyProject}/simulate-batch`;\n// We multiply tenderly gas estimate by this estimate to overestimate gas fee\nconst ESTIMATE_MULTIPLIER = 1.25;\nconst checkTokenApproved = async (fromAddress, inputAmount, provider) => {\n  const tokenContract = Erc20__factory.connect(inputAmount.currency.wrapped.address, provider);\n  const allowance = await tokenContract.allowance(fromAddress, SWAP_ROUTER_ADDRESS);\n  // Return true if token allowance is greater than input amount\n  return allowance.gt(BigNumber.from(inputAmount.quotient.toString()));\n};\nexport class FallbackTenderlySimulator {\n  constructor(tenderlyBaseUrl, tenderlyUser, tenderlyProject, tenderlyAccessKey, provider, v2PoolProvider, v3PoolProvider, tenderlySimulator) {\n    this.tenderlySimulator = tenderlySimulator !== null && tenderlySimulator !== void 0 ? tenderlySimulator : new TenderlySimulator(tenderlyBaseUrl, tenderlyUser, tenderlyProject, tenderlyAccessKey, v2PoolProvider, v3PoolProvider);\n    this.provider = provider;\n    this.v2PoolProvider = v2PoolProvider;\n    this.v3PoolProvider = v3PoolProvider;\n  }\n  async ethEstimateGas(fromAddress, route, l2GasData) {\n    const currencyIn = route.trade.inputAmount.currency;\n    const router = SwapRouter02__factory.connect(SWAP_ROUTER_ADDRESS, this.provider);\n    const estimatedGasUsed = await router.estimateGas['multicall(bytes[])']([route.methodParameters.calldata], {\n      from: fromAddress,\n      value: BigNumber.from(currencyIn.isNative ? route.methodParameters.value : '0')\n    });\n    const {\n      estimatedGasUsedUSD,\n      estimatedGasUsedQuoteToken,\n      quoteGasAdjusted\n    } = await calculateGasUsed(route.quote.currency.chainId, route, estimatedGasUsed, this.v2PoolProvider, this.v3PoolProvider, l2GasData);\n    return initSwapRouteFromExisting(route, this.v2PoolProvider, this.v3PoolProvider, quoteGasAdjusted, estimatedGasUsed, estimatedGasUsedQuoteToken, estimatedGasUsedUSD);\n  }\n  async simulateTransaction(fromAddress, swapRoute, l2GasData) {\n    // Make call to eth estimate gas if possible\n    // For erc20s, we must check if the token allowance is sufficient\n    const inputAmount = swapRoute.trade.inputAmount;\n    if (inputAmount.currency.isNative || (await checkTokenApproved(fromAddress, inputAmount, this.provider))) {\n      try {\n        const swapRouteWithGasEstimate = await this.ethEstimateGas(fromAddress, swapRoute, l2GasData);\n        return swapRouteWithGasEstimate;\n      } catch (err) {\n        log.info({\n          err: err\n        }, 'Error calling eth estimate gas!');\n        return {\n          ...swapRoute,\n          simulationError: true\n        };\n      }\n    }\n    // simulate via tenderly\n    try {\n      return await this.tenderlySimulator.simulateTransaction(fromAddress, swapRoute, l2GasData);\n    } catch (err) {\n      log.info({\n        err: err\n      }, 'Failed to simulate via Tenderly!');\n      // set error flag to true\n      return {\n        ...swapRoute,\n        simulationError: true\n      };\n    }\n  }\n}\nexport class TenderlySimulator {\n  constructor(tenderlyBaseUrl, tenderlyUser, tenderlyProject, tenderlyAccessKey, v2PoolProvider, v3PoolProvider) {\n    this.tenderlyBaseUrl = tenderlyBaseUrl;\n    this.tenderlyUser = tenderlyUser;\n    this.tenderlyProject = tenderlyProject;\n    this.tenderlyAccessKey = tenderlyAccessKey;\n    this.v2PoolProvider = v2PoolProvider;\n    this.v3PoolProvider = v3PoolProvider;\n  }\n  async simulateTransaction(fromAddress, swapRoute, l2GasData) {\n    const currencyIn = swapRoute.trade.inputAmount.currency;\n    const tokenIn = currencyIn.wrapped;\n    const chainId = tokenIn.chainId;\n    if ([ChainId.CELO, ChainId.CELO_ALFAJORES].includes(chainId)) {\n      const msg = 'Celo not supported by Tenderly!';\n      log.info(msg);\n      return {\n        ...swapRoute,\n        simulationError: true\n      };\n    }\n    if (!swapRoute.methodParameters) {\n      const msg = 'No calldata provided to simulate transaction';\n      log.info(msg);\n      throw new Error(msg);\n    }\n    const {\n      calldata\n    } = swapRoute.methodParameters;\n    log.info({\n      calldata: swapRoute.methodParameters.calldata,\n      fromAddress: fromAddress,\n      chainId: chainId,\n      tokenInAddress: tokenIn.address\n    }, 'Simulating transaction via Tenderly');\n    const approve = {\n      network_id: chainId,\n      input: APPROVE_TOKEN_FOR_TRANSFER,\n      to: tokenIn.address,\n      value: '0',\n      from: fromAddress,\n      gasPrice: '0',\n      gas: 30000000\n    };\n    const swap = {\n      network_id: chainId,\n      input: calldata,\n      to: SWAP_ROUTER_ADDRESS,\n      value: currencyIn.isNative ? swapRoute.methodParameters.value : '0',\n      from: fromAddress,\n      gasPrice: '0',\n      gas: 30000000,\n      type: 1\n    };\n    const body = {\n      simulations: [approve, swap]\n    };\n    const opts = {\n      headers: {\n        'X-Access-Key': this.tenderlyAccessKey\n      }\n    };\n    const url = TENDERLY_BATCH_SIMULATE_API(this.tenderlyBaseUrl, this.tenderlyUser, this.tenderlyProject);\n    const resp = (await axios.post(url, body, opts)).data;\n    // Validate tenderly response body\n    if (!resp || resp.simulation_results.length < 2 || !resp.simulation_results[1].transaction || resp.simulation_results[1].transaction.error_message) {\n      const msg = `Failed to Simulate Via Tenderly!: ${resp.simulation_results[1].transaction.error_message}`;\n      log.info({\n        err: resp.simulation_results[1].transaction.error_message\n      }, msg);\n      return {\n        ...swapRoute,\n        simulationError: true\n      };\n    }\n    log.info({\n      approve: resp.simulation_results[0],\n      swap: resp.simulation_results[1]\n    }, 'Simulated Approval + Swap via Tenderly');\n    // Parse the gas used in the simulation response object, and then pad it so that we overestimate.\n    const estimatedGasUsed = BigNumber.from((resp.simulation_results[1].transaction.gas_used * ESTIMATE_MULTIPLIER).toFixed(0));\n    const {\n      estimatedGasUsedUSD,\n      estimatedGasUsedQuoteToken,\n      quoteGasAdjusted\n    } = await calculateGasUsed(chainId, swapRoute, estimatedGasUsed, this.v2PoolProvider, this.v3PoolProvider, l2GasData);\n    return initSwapRouteFromExisting(swapRoute, this.v2PoolProvider, this.v3PoolProvider, quoteGasAdjusted, estimatedGasUsed, estimatedGasUsedQuoteToken, estimatedGasUsedUSD);\n  }\n}","map":{"version":3,"sources":["../../../src/providers/tenderly-simulation-provider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import axios from 'axios';\nimport { BigNumber } from 'ethers/lib/ethers';\nimport { Erc20__factory } from '../types/other/factories/Erc20__factory';\nimport { SwapRouter02__factory } from '../types/other/factories/SwapRouter02__factory';\nimport { ChainId, log, SWAP_ROUTER_ADDRESS } from '../util';\nimport { APPROVE_TOKEN_FOR_TRANSFER } from '../util/callData';\nimport { calculateGasUsed, initSwapRouteFromExisting, } from '../util/gas-factory-helpers';\nconst TENDERLY_BATCH_SIMULATE_API = (tenderlyBaseUrl, tenderlyUser, tenderlyProject) => `${tenderlyBaseUrl}/api/v1/account/${tenderlyUser}/project/${tenderlyProject}/simulate-batch`;\n// We multiply tenderly gas estimate by this estimate to overestimate gas fee\nconst ESTIMATE_MULTIPLIER = 1.25;\nconst checkTokenApproved = async (fromAddress, inputAmount, provider) => {\n    const tokenContract = Erc20__factory.connect(inputAmount.currency.wrapped.address, provider);\n    const allowance = await tokenContract.allowance(fromAddress, SWAP_ROUTER_ADDRESS);\n    // Return true if token allowance is greater than input amount\n    return allowance.gt(BigNumber.from(inputAmount.quotient.toString()));\n};\nexport class FallbackTenderlySimulator {\n    constructor(tenderlyBaseUrl, tenderlyUser, tenderlyProject, tenderlyAccessKey, provider, v2PoolProvider, v3PoolProvider, tenderlySimulator) {\n        this.tenderlySimulator =\n            tenderlySimulator !== null && tenderlySimulator !== void 0 ? tenderlySimulator : new TenderlySimulator(tenderlyBaseUrl, tenderlyUser, tenderlyProject, tenderlyAccessKey, v2PoolProvider, v3PoolProvider);\n        this.provider = provider;\n        this.v2PoolProvider = v2PoolProvider;\n        this.v3PoolProvider = v3PoolProvider;\n    }\n    async ethEstimateGas(fromAddress, route, l2GasData) {\n        const currencyIn = route.trade.inputAmount.currency;\n        const router = SwapRouter02__factory.connect(SWAP_ROUTER_ADDRESS, this.provider);\n        const estimatedGasUsed = await router.estimateGas['multicall(bytes[])']([route.methodParameters.calldata], {\n            from: fromAddress,\n            value: BigNumber.from(currencyIn.isNative ? route.methodParameters.value : '0'),\n        });\n        const { estimatedGasUsedUSD, estimatedGasUsedQuoteToken, quoteGasAdjusted, } = await calculateGasUsed(route.quote.currency.chainId, route, estimatedGasUsed, this.v2PoolProvider, this.v3PoolProvider, l2GasData);\n        return initSwapRouteFromExisting(route, this.v2PoolProvider, this.v3PoolProvider, quoteGasAdjusted, estimatedGasUsed, estimatedGasUsedQuoteToken, estimatedGasUsedUSD);\n    }\n    async simulateTransaction(fromAddress, swapRoute, l2GasData) {\n        // Make call to eth estimate gas if possible\n        // For erc20s, we must check if the token allowance is sufficient\n        const inputAmount = swapRoute.trade.inputAmount;\n        if (inputAmount.currency.isNative ||\n            (await checkTokenApproved(fromAddress, inputAmount, this.provider))) {\n            try {\n                const swapRouteWithGasEstimate = await this.ethEstimateGas(fromAddress, swapRoute, l2GasData);\n                return swapRouteWithGasEstimate;\n            }\n            catch (err) {\n                log.info({ err: err }, 'Error calling eth estimate gas!');\n                return { ...swapRoute, simulationError: true };\n            }\n        }\n        // simulate via tenderly\n        try {\n            return await this.tenderlySimulator.simulateTransaction(fromAddress, swapRoute, l2GasData);\n        }\n        catch (err) {\n            log.info({ err: err }, 'Failed to simulate via Tenderly!');\n            // set error flag to true\n            return { ...swapRoute, simulationError: true };\n        }\n    }\n}\nexport class TenderlySimulator {\n    constructor(tenderlyBaseUrl, tenderlyUser, tenderlyProject, tenderlyAccessKey, v2PoolProvider, v3PoolProvider) {\n        this.tenderlyBaseUrl = tenderlyBaseUrl;\n        this.tenderlyUser = tenderlyUser;\n        this.tenderlyProject = tenderlyProject;\n        this.tenderlyAccessKey = tenderlyAccessKey;\n        this.v2PoolProvider = v2PoolProvider;\n        this.v3PoolProvider = v3PoolProvider;\n    }\n    async simulateTransaction(fromAddress, swapRoute, l2GasData) {\n        const currencyIn = swapRoute.trade.inputAmount.currency;\n        const tokenIn = currencyIn.wrapped;\n        const chainId = tokenIn.chainId;\n        if ([ChainId.CELO, ChainId.CELO_ALFAJORES].includes(chainId)) {\n            const msg = 'Celo not supported by Tenderly!';\n            log.info(msg);\n            return { ...swapRoute, simulationError: true };\n        }\n        if (!swapRoute.methodParameters) {\n            const msg = 'No calldata provided to simulate transaction';\n            log.info(msg);\n            throw new Error(msg);\n        }\n        const { calldata } = swapRoute.methodParameters;\n        log.info({\n            calldata: swapRoute.methodParameters.calldata,\n            fromAddress: fromAddress,\n            chainId: chainId,\n            tokenInAddress: tokenIn.address,\n        }, 'Simulating transaction via Tenderly');\n        const approve = {\n            network_id: chainId,\n            input: APPROVE_TOKEN_FOR_TRANSFER,\n            to: tokenIn.address,\n            value: '0',\n            from: fromAddress,\n            gasPrice: '0',\n            gas: 30000000,\n        };\n        const swap = {\n            network_id: chainId,\n            input: calldata,\n            to: SWAP_ROUTER_ADDRESS,\n            value: currencyIn.isNative ? swapRoute.methodParameters.value : '0',\n            from: fromAddress,\n            gasPrice: '0',\n            gas: 30000000,\n            type: 1,\n        };\n        const body = { simulations: [approve, swap] };\n        const opts = {\n            headers: {\n                'X-Access-Key': this.tenderlyAccessKey,\n            },\n        };\n        const url = TENDERLY_BATCH_SIMULATE_API(this.tenderlyBaseUrl, this.tenderlyUser, this.tenderlyProject);\n        const resp = (await axios.post(url, body, opts)).data;\n        // Validate tenderly response body\n        if (!resp ||\n            resp.simulation_results.length < 2 ||\n            !resp.simulation_results[1].transaction ||\n            resp.simulation_results[1].transaction.error_message) {\n            const msg = `Failed to Simulate Via Tenderly!: ${resp.simulation_results[1].transaction.error_message}`;\n            log.info({ err: resp.simulation_results[1].transaction.error_message }, msg);\n            return { ...swapRoute, simulationError: true };\n        }\n        log.info({ approve: resp.simulation_results[0], swap: resp.simulation_results[1] }, 'Simulated Approval + Swap via Tenderly');\n        // Parse the gas used in the simulation response object, and then pad it so that we overestimate.\n        const estimatedGasUsed = BigNumber.from((resp.simulation_results[1].transaction.gas_used * ESTIMATE_MULTIPLIER).toFixed(0));\n        const { estimatedGasUsedUSD, estimatedGasUsedQuoteToken, quoteGasAdjusted, } = await calculateGasUsed(chainId, swapRoute, estimatedGasUsed, this.v2PoolProvider, this.v3PoolProvider, l2GasData);\n        return initSwapRouteFromExisting(swapRoute, this.v2PoolProvider, this.v3PoolProvider, quoteGasAdjusted, estimatedGasUsed, estimatedGasUsedQuoteToken, estimatedGasUsedUSD);\n    }\n}\n//# sourceMappingURL=data:application/json;base64,"]},"metadata":{},"sourceType":"module"}