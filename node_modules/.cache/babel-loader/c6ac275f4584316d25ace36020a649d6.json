{"ast":null,"code":"import create from 'zustand';\nimport { devtools, persist } from 'zustand/middleware';\nexport const useSweep = create()(persist(devtools(set => ({\n  sweepAssets: [],\n  setSweepAssets: assets => set(() => {\n    return {\n      sweepAssets: assets\n    };\n  }),\n  removeSweepAsset: asset => {\n    set(_ref => {\n      let {\n        sweepAssets\n      } = _ref;\n      if (sweepAssets.length === 0) return {\n        sweepAssets: []\n      };else sweepAssets.find(x => x.tokenId === asset.tokenId && x.address === asset.address);\n      const assetsCopy = [...sweepAssets];\n      assetsCopy.splice(sweepAssets.findIndex(n => n.tokenId === asset.tokenId && n.address === asset.address), 1);\n      return {\n        sweepAssets: assetsCopy\n      };\n    });\n  },\n  reset: () => set(() => ({\n    sweepAssets: []\n  }))\n})), {\n  name: 'useSweep'\n}));","map":{"version":3,"names":["create","devtools","persist","useSweep","set","sweepAssets","setSweepAssets","assets","removeSweepAsset","asset","length","find","x","tokenId","address","assetsCopy","splice","findIndex","n","reset","name"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/nft/hooks/useSweep.ts"],"sourcesContent":["import create from 'zustand'\nimport { devtools, persist } from 'zustand/middleware'\n\nimport { GenieAsset } from '../types'\n\ninterface SweepState {\n  sweepAssets: GenieAsset[]\n  setSweepAssets: (assets: GenieAsset[]) => void\n  removeSweepAsset: (asset: GenieAsset) => void\n  reset: () => void\n}\n\nexport const useSweep = create<SweepState>()(\n  persist(\n    devtools((set) => ({\n      sweepAssets: [],\n      setSweepAssets: (assets) =>\n        set(() => {\n          return { sweepAssets: assets }\n        }),\n      removeSweepAsset: (asset) => {\n        set(({ sweepAssets }) => {\n          if (sweepAssets.length === 0) return { sweepAssets: [] }\n          else sweepAssets.find((x) => x.tokenId === asset.tokenId && x.address === asset.address)\n          const assetsCopy = [...sweepAssets]\n          assetsCopy.splice(\n            sweepAssets.findIndex((n) => n.tokenId === asset.tokenId && n.address === asset.address),\n            1\n          )\n          return { sweepAssets: assetsCopy }\n        })\n      },\n      reset: () => set(() => ({ sweepAssets: [] })),\n    })),\n    { name: 'useSweep' }\n  )\n)\n"],"mappings":"AAAA,OAAOA,MAAM,MAAM,SAAS;AAC5B,SAASC,QAAQ,EAAEC,OAAO,QAAQ,oBAAoB;AAWtD,OAAO,MAAMC,QAAQ,GAAGH,MAAM,EAAc,CAC1CE,OAAO,CACLD,QAAQ,CAAEG,GAAG,KAAM;EACjBC,WAAW,EAAE,EAAE;EACfC,cAAc,EAAGC,MAAM,IACrBH,GAAG,CAAC,MAAM;IACR,OAAO;MAAEC,WAAW,EAAEE;IAAO,CAAC;EAChC,CAAC,CAAC;EACJC,gBAAgB,EAAGC,KAAK,IAAK;IAC3BL,GAAG,CAAC,QAAqB;MAAA,IAApB;QAAEC;MAAY,CAAC;MAClB,IAAIA,WAAW,CAACK,MAAM,KAAK,CAAC,EAAE,OAAO;QAAEL,WAAW,EAAE;MAAG,CAAC,MACnDA,WAAW,CAACM,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACC,OAAO,KAAKJ,KAAK,CAACI,OAAO,IAAID,CAAC,CAACE,OAAO,KAAKL,KAAK,CAACK,OAAO,CAAC;MACxF,MAAMC,UAAU,GAAG,CAAC,GAAGV,WAAW,CAAC;MACnCU,UAAU,CAACC,MAAM,CACfX,WAAW,CAACY,SAAS,CAAEC,CAAC,IAAKA,CAAC,CAACL,OAAO,KAAKJ,KAAK,CAACI,OAAO,IAAIK,CAAC,CAACJ,OAAO,KAAKL,KAAK,CAACK,OAAO,CAAC,EACxF,CAAC,CACF;MACD,OAAO;QAAET,WAAW,EAAEU;MAAW,CAAC;IACpC,CAAC,CAAC;EACJ,CAAC;EACDI,KAAK,EAAE,MAAMf,GAAG,CAAC,OAAO;IAAEC,WAAW,EAAE;EAAG,CAAC,CAAC;AAC9C,CAAC,CAAC,CAAC,EACH;EAAEe,IAAI,EAAE;AAAW,CAAC,CACrB,CACF"},"metadata":{},"sourceType":"module"}