{"ast":null,"code":"import{getVersionUpgrade,minVersionBump,VersionUpgrade}from'@uniswap/token-lists';import{useWeb3React}from'@web3-react/core';import{UNSUPPORTED_LIST_URLS}from'constants/lists';import useInterval from'lib/hooks/useInterval';import{useCallback,useEffect}from'react';import{useAppDispatch}from'state/hooks';import{useAllLists}from'state/lists/hooks';import{useFetchListCallback}from'../../hooks/useFetchListCallback';import useIsWindowVisible from'../../hooks/useIsWindowVisible';import{acceptListUpdate}from'./actions';export default function Updater(){var _useWeb3React=useWeb3React(),provider=_useWeb3React.provider;var dispatch=useAppDispatch();var isWindowVisible=useIsWindowVisible();// get all loaded lists, and the active urls\nvar lists=useAllLists();var fetchList=useFetchListCallback();var fetchAllListsCallback=useCallback(function(){if(!isWindowVisible)return;Object.keys(lists).forEach(function(url){// Skip validation on unsupported lists\nvar isUnsupportedList=UNSUPPORTED_LIST_URLS.includes(url);fetchList(url,false,isUnsupportedList).catch(function(error){return console.debug('interval list fetching error',error);});});},[fetchList,isWindowVisible,lists]);// fetch all lists every 10 minutes, but only after we initialize provider\nuseInterval(fetchAllListsCallback,provider?1000*60*10:null);// whenever a list is not loaded and not loading, try again to load it\nuseEffect(function(){Object.keys(lists).forEach(function(listUrl){var list=lists[listUrl];if(!list.current&&!list.loadingRequestId&&!list.error){fetchList(listUrl).catch(function(error){return console.debug('list added fetching error',error);});}});},[dispatch,fetchList,lists]);// if any lists from unsupported lists are loaded, check them too (in case new updates since last visit)\nuseEffect(function(){UNSUPPORTED_LIST_URLS.forEach(function(listUrl){var list=lists[listUrl];if(!list||!list.current&&!list.loadingRequestId&&!list.error){fetchList(listUrl,undefined,true).catch(function(error){return console.debug('list added fetching error',error);});}});},[dispatch,fetchList,lists]);// automatically update lists if versions are minor/patch\nuseEffect(function(){Object.keys(lists).forEach(function(listUrl){var list=lists[listUrl];if(list.current&&list.pendingUpdate){var bump=getVersionUpgrade(list.current.version,list.pendingUpdate.version);switch(bump){case VersionUpgrade.NONE:throw new Error('unexpected no version bump');case VersionUpgrade.PATCH:case VersionUpgrade.MINOR:{var min=minVersionBump(list.current.tokens,list.pendingUpdate.tokens);// automatically update minor/patch as long as bump matches the min update\nif(bump>=min){dispatch(acceptListUpdate(listUrl));}else{console.error(\"List at url \".concat(listUrl,\" could not automatically update because the version bump was only PATCH/MINOR while the update had breaking changes and should have been MAJOR\"));}break;}// update any active or inactive lists\ncase VersionUpgrade.MAJOR:dispatch(acceptListUpdate(listUrl));}}});},[dispatch,lists]);return null;}","map":{"version":3,"names":["getVersionUpgrade","minVersionBump","VersionUpgrade","useWeb3React","UNSUPPORTED_LIST_URLS","useInterval","useCallback","useEffect","useAppDispatch","useAllLists","useFetchListCallback","useIsWindowVisible","acceptListUpdate","Updater","provider","dispatch","isWindowVisible","lists","fetchList","fetchAllListsCallback","Object","keys","forEach","url","isUnsupportedList","includes","catch","error","console","debug","listUrl","list","current","loadingRequestId","undefined","pendingUpdate","bump","version","NONE","Error","PATCH","MINOR","min","tokens","MAJOR"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/state/lists/updater.ts"],"sourcesContent":["import { getVersionUpgrade, minVersionBump, VersionUpgrade } from '@uniswap/token-lists'\nimport { useWeb3React } from '@web3-react/core'\nimport { UNSUPPORTED_LIST_URLS } from 'constants/lists'\nimport useInterval from 'lib/hooks/useInterval'\nimport { useCallback, useEffect } from 'react'\nimport { useAppDispatch } from 'state/hooks'\nimport { useAllLists } from 'state/lists/hooks'\n\nimport { useFetchListCallback } from '../../hooks/useFetchListCallback'\nimport useIsWindowVisible from '../../hooks/useIsWindowVisible'\nimport { acceptListUpdate } from './actions'\nexport default function Updater(): null {\n  const { provider } = useWeb3React()\n  const dispatch = useAppDispatch()\n  const isWindowVisible = useIsWindowVisible()\n\n  // get all loaded lists, and the active urls\n  const lists = useAllLists()\n\n  const fetchList = useFetchListCallback()\n  const fetchAllListsCallback = useCallback(() => {\n    if (!isWindowVisible) return\n    Object.keys(lists).forEach((url) => {\n      // Skip validation on unsupported lists\n      const isUnsupportedList = UNSUPPORTED_LIST_URLS.includes(url)\n      fetchList(url, false, isUnsupportedList).catch((error) => console.debug('interval list fetching error', error))\n    })\n  }, [fetchList, isWindowVisible, lists])\n\n  // fetch all lists every 10 minutes, but only after we initialize provider\n  useInterval(fetchAllListsCallback, provider ? 1000 * 60 * 10 : null)\n\n  // whenever a list is not loaded and not loading, try again to load it\n  useEffect(() => {\n    Object.keys(lists).forEach((listUrl) => {\n      const list = lists[listUrl]\n      if (!list.current && !list.loadingRequestId && !list.error) {\n        fetchList(listUrl).catch((error) => console.debug('list added fetching error', error))\n      }\n    })\n  }, [dispatch, fetchList, lists])\n\n  // if any lists from unsupported lists are loaded, check them too (in case new updates since last visit)\n  useEffect(() => {\n    UNSUPPORTED_LIST_URLS.forEach((listUrl) => {\n      const list = lists[listUrl]\n      if (!list || (!list.current && !list.loadingRequestId && !list.error)) {\n        fetchList(listUrl, undefined, true).catch((error) => console.debug('list added fetching error', error))\n      }\n    })\n  }, [dispatch, fetchList, lists])\n\n  // automatically update lists if versions are minor/patch\n  useEffect(() => {\n    Object.keys(lists).forEach((listUrl) => {\n      const list = lists[listUrl]\n      if (list.current && list.pendingUpdate) {\n        const bump = getVersionUpgrade(list.current.version, list.pendingUpdate.version)\n        switch (bump) {\n          case VersionUpgrade.NONE:\n            throw new Error('unexpected no version bump')\n          case VersionUpgrade.PATCH:\n          case VersionUpgrade.MINOR: {\n            const min = minVersionBump(list.current.tokens, list.pendingUpdate.tokens)\n            // automatically update minor/patch as long as bump matches the min update\n            if (bump >= min) {\n              dispatch(acceptListUpdate(listUrl))\n            } else {\n              console.error(\n                `List at url ${listUrl} could not automatically update because the version bump was only PATCH/MINOR while the update had breaking changes and should have been MAJOR`\n              )\n            }\n            break\n          }\n          // update any active or inactive lists\n          case VersionUpgrade.MAJOR:\n            dispatch(acceptListUpdate(listUrl))\n        }\n      }\n    })\n  }, [dispatch, lists])\n\n  return null\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}