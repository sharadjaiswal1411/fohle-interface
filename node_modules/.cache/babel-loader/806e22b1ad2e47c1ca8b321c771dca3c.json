{"ast":null,"code":"import _classCallCheck from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { syntaxError } from '../error/syntaxError.mjs';\nimport { Location, OperationTypeNode } from './ast.mjs';\nimport { DirectiveLocation } from './directiveLocation.mjs';\nimport { Kind } from './kinds.mjs';\nimport { isPunctuatorTokenKind, Lexer } from './lexer.mjs';\nimport { isSource, Source } from './source.mjs';\nimport { TokenKind } from './tokenKind.mjs';\n/**\n * Configuration options to control parser behavior\n */\n\n/**\n * Given a GraphQL source, parses it into a Document.\n * Throws GraphQLError if a syntax error is encountered.\n */\nexport function parse(source, options) {\n  var parser = new Parser(source, options);\n  return parser.parseDocument();\n}\n/**\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\n * that value.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Values directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: valueFromAST().\n */\n\nexport function parseValue(source, options) {\n  var parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  var value = parser.parseValueLiteral(false);\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Similar to parseValue(), but raises a parse error if it encounters a\n * variable. The return type will be a constant value.\n */\n\nexport function parseConstValue(source, options) {\n  var parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  var value = parser.parseConstValueLiteral();\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\n * that type.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Types directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: typeFromAST().\n */\n\nexport function parseType(source, options) {\n  var parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  var type = parser.parseTypeReference();\n  parser.expectToken(TokenKind.EOF);\n  return type;\n}\n/**\n * This class is exported only to assist people in implementing their own parsers\n * without duplicating too much code and should be used only as last resort for cases\n * such as experimental syntax or if certain features could not be contributed upstream.\n *\n * It is still part of the internal API and is versioned, so any changes to it are never\n * considered breaking changes. If you still need to support multiple versions of the\n * library, please use the `versionInfo` variable for version detection.\n *\n * @internal\n */\n\nexport var Parser = /*#__PURE__*/function () {\n  function Parser(source, options) {\n    _classCallCheck(this, Parser);\n    var sourceObj = isSource(source) ? source : new Source(source);\n    this._lexer = new Lexer(sourceObj);\n    this._options = options;\n  }\n  /**\n   * Converts a name lex token into a name parse node.\n   */\n  _createClass(Parser, [{\n    key: \"parseName\",\n    value: function parseName() {\n      var token = this.expectToken(TokenKind.NAME);\n      return this.node(token, {\n        kind: Kind.NAME,\n        value: token.value\n      });\n    } // Implements the parsing rules in the Document section.\n\n    /**\n     * Document : Definition+\n     */\n  }, {\n    key: \"parseDocument\",\n    value: function parseDocument() {\n      return this.node(this._lexer.token, {\n        kind: Kind.DOCUMENT,\n        definitions: this.many(TokenKind.SOF, this.parseDefinition, TokenKind.EOF)\n      });\n    }\n    /**\n     * Definition :\n     *   - ExecutableDefinition\n     *   - TypeSystemDefinition\n     *   - TypeSystemExtension\n     *\n     * ExecutableDefinition :\n     *   - OperationDefinition\n     *   - FragmentDefinition\n     *\n     * TypeSystemDefinition :\n     *   - SchemaDefinition\n     *   - TypeDefinition\n     *   - DirectiveDefinition\n     *\n     * TypeDefinition :\n     *   - ScalarTypeDefinition\n     *   - ObjectTypeDefinition\n     *   - InterfaceTypeDefinition\n     *   - UnionTypeDefinition\n     *   - EnumTypeDefinition\n     *   - InputObjectTypeDefinition\n     */\n  }, {\n    key: \"parseDefinition\",\n    value: function parseDefinition() {\n      if (this.peek(TokenKind.BRACE_L)) {\n        return this.parseOperationDefinition();\n      } // Many definitions begin with a description and require a lookahead.\n\n      var hasDescription = this.peekDescription();\n      var keywordToken = hasDescription ? this._lexer.lookahead() : this._lexer.token;\n      if (keywordToken.kind === TokenKind.NAME) {\n        switch (keywordToken.value) {\n          case 'schema':\n            return this.parseSchemaDefinition();\n          case 'scalar':\n            return this.parseScalarTypeDefinition();\n          case 'type':\n            return this.parseObjectTypeDefinition();\n          case 'interface':\n            return this.parseInterfaceTypeDefinition();\n          case 'union':\n            return this.parseUnionTypeDefinition();\n          case 'enum':\n            return this.parseEnumTypeDefinition();\n          case 'input':\n            return this.parseInputObjectTypeDefinition();\n          case 'directive':\n            return this.parseDirectiveDefinition();\n        }\n        if (hasDescription) {\n          throw syntaxError(this._lexer.source, this._lexer.token.start, 'Unexpected description, descriptions are supported only on type definitions.');\n        }\n        switch (keywordToken.value) {\n          case 'query':\n          case 'mutation':\n          case 'subscription':\n            return this.parseOperationDefinition();\n          case 'fragment':\n            return this.parseFragmentDefinition();\n          case 'extend':\n            return this.parseTypeSystemExtension();\n        }\n      }\n      throw this.unexpected(keywordToken);\n    } // Implements the parsing rules in the Operations section.\n\n    /**\n     * OperationDefinition :\n     *  - SelectionSet\n     *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\n     */\n  }, {\n    key: \"parseOperationDefinition\",\n    value: function parseOperationDefinition() {\n      var start = this._lexer.token;\n      if (this.peek(TokenKind.BRACE_L)) {\n        return this.node(start, {\n          kind: Kind.OPERATION_DEFINITION,\n          operation: OperationTypeNode.QUERY,\n          name: undefined,\n          variableDefinitions: [],\n          directives: [],\n          selectionSet: this.parseSelectionSet()\n        });\n      }\n      var operation = this.parseOperationType();\n      var name;\n      if (this.peek(TokenKind.NAME)) {\n        name = this.parseName();\n      }\n      return this.node(start, {\n        kind: Kind.OPERATION_DEFINITION,\n        operation: operation,\n        name: name,\n        variableDefinitions: this.parseVariableDefinitions(),\n        directives: this.parseDirectives(false),\n        selectionSet: this.parseSelectionSet()\n      });\n    }\n    /**\n     * OperationType : one of query mutation subscription\n     */\n  }, {\n    key: \"parseOperationType\",\n    value: function parseOperationType() {\n      var operationToken = this.expectToken(TokenKind.NAME);\n      switch (operationToken.value) {\n        case 'query':\n          return OperationTypeNode.QUERY;\n        case 'mutation':\n          return OperationTypeNode.MUTATION;\n        case 'subscription':\n          return OperationTypeNode.SUBSCRIPTION;\n      }\n      throw this.unexpected(operationToken);\n    }\n    /**\n     * VariableDefinitions : ( VariableDefinition+ )\n     */\n  }, {\n    key: \"parseVariableDefinitions\",\n    value: function parseVariableDefinitions() {\n      return this.optionalMany(TokenKind.PAREN_L, this.parseVariableDefinition, TokenKind.PAREN_R);\n    }\n    /**\n     * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?\n     */\n  }, {\n    key: \"parseVariableDefinition\",\n    value: function parseVariableDefinition() {\n      return this.node(this._lexer.token, {\n        kind: Kind.VARIABLE_DEFINITION,\n        variable: this.parseVariable(),\n        type: (this.expectToken(TokenKind.COLON), this.parseTypeReference()),\n        defaultValue: this.expectOptionalToken(TokenKind.EQUALS) ? this.parseConstValueLiteral() : undefined,\n        directives: this.parseConstDirectives()\n      });\n    }\n    /**\n     * Variable : $ Name\n     */\n  }, {\n    key: \"parseVariable\",\n    value: function parseVariable() {\n      var start = this._lexer.token;\n      this.expectToken(TokenKind.DOLLAR);\n      return this.node(start, {\n        kind: Kind.VARIABLE,\n        name: this.parseName()\n      });\n    }\n    /**\n     * ```\n     * SelectionSet : { Selection+ }\n     * ```\n     */\n  }, {\n    key: \"parseSelectionSet\",\n    value: function parseSelectionSet() {\n      return this.node(this._lexer.token, {\n        kind: Kind.SELECTION_SET,\n        selections: this.many(TokenKind.BRACE_L, this.parseSelection, TokenKind.BRACE_R)\n      });\n    }\n    /**\n     * Selection :\n     *   - Field\n     *   - FragmentSpread\n     *   - InlineFragment\n     */\n  }, {\n    key: \"parseSelection\",\n    value: function parseSelection() {\n      return this.peek(TokenKind.SPREAD) ? this.parseFragment() : this.parseField();\n    }\n    /**\n     * Field : Alias? Name Arguments? Directives? SelectionSet?\n     *\n     * Alias : Name :\n     */\n  }, {\n    key: \"parseField\",\n    value: function parseField() {\n      var start = this._lexer.token;\n      var nameOrAlias = this.parseName();\n      var alias;\n      var name;\n      if (this.expectOptionalToken(TokenKind.COLON)) {\n        alias = nameOrAlias;\n        name = this.parseName();\n      } else {\n        name = nameOrAlias;\n      }\n      return this.node(start, {\n        kind: Kind.FIELD,\n        alias: alias,\n        name: name,\n        arguments: this.parseArguments(false),\n        directives: this.parseDirectives(false),\n        selectionSet: this.peek(TokenKind.BRACE_L) ? this.parseSelectionSet() : undefined\n      });\n    }\n    /**\n     * Arguments[Const] : ( Argument[?Const]+ )\n     */\n  }, {\n    key: \"parseArguments\",\n    value: function parseArguments(isConst) {\n      var item = isConst ? this.parseConstArgument : this.parseArgument;\n      return this.optionalMany(TokenKind.PAREN_L, item, TokenKind.PAREN_R);\n    }\n    /**\n     * Argument[Const] : Name : Value[?Const]\n     */\n  }, {\n    key: \"parseArgument\",\n    value: function parseArgument() {\n      var isConst = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var start = this._lexer.token;\n      var name = this.parseName();\n      this.expectToken(TokenKind.COLON);\n      return this.node(start, {\n        kind: Kind.ARGUMENT,\n        name: name,\n        value: this.parseValueLiteral(isConst)\n      });\n    }\n  }, {\n    key: \"parseConstArgument\",\n    value: function parseConstArgument() {\n      return this.parseArgument(true);\n    } // Implements the parsing rules in the Fragments section.\n\n    /**\n     * Corresponds to both FragmentSpread and InlineFragment in the spec.\n     *\n     * FragmentSpread : ... FragmentName Directives?\n     *\n     * InlineFragment : ... TypeCondition? Directives? SelectionSet\n     */\n  }, {\n    key: \"parseFragment\",\n    value: function parseFragment() {\n      var start = this._lexer.token;\n      this.expectToken(TokenKind.SPREAD);\n      var hasTypeCondition = this.expectOptionalKeyword('on');\n      if (!hasTypeCondition && this.peek(TokenKind.NAME)) {\n        return this.node(start, {\n          kind: Kind.FRAGMENT_SPREAD,\n          name: this.parseFragmentName(),\n          directives: this.parseDirectives(false)\n        });\n      }\n      return this.node(start, {\n        kind: Kind.INLINE_FRAGMENT,\n        typeCondition: hasTypeCondition ? this.parseNamedType() : undefined,\n        directives: this.parseDirectives(false),\n        selectionSet: this.parseSelectionSet()\n      });\n    }\n    /**\n     * FragmentDefinition :\n     *   - fragment FragmentName on TypeCondition Directives? SelectionSet\n     *\n     * TypeCondition : NamedType\n     */\n  }, {\n    key: \"parseFragmentDefinition\",\n    value: function parseFragmentDefinition() {\n      var _this$_options;\n      var start = this._lexer.token;\n      this.expectKeyword('fragment'); // Legacy support for defining variables within fragments changes\n      // the grammar of FragmentDefinition:\n      //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet\n\n      if (((_this$_options = this._options) === null || _this$_options === void 0 ? void 0 : _this$_options.allowLegacyFragmentVariables) === true) {\n        return this.node(start, {\n          kind: Kind.FRAGMENT_DEFINITION,\n          name: this.parseFragmentName(),\n          variableDefinitions: this.parseVariableDefinitions(),\n          typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n          directives: this.parseDirectives(false),\n          selectionSet: this.parseSelectionSet()\n        });\n      }\n      return this.node(start, {\n        kind: Kind.FRAGMENT_DEFINITION,\n        name: this.parseFragmentName(),\n        typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n        directives: this.parseDirectives(false),\n        selectionSet: this.parseSelectionSet()\n      });\n    }\n    /**\n     * FragmentName : Name but not `on`\n     */\n  }, {\n    key: \"parseFragmentName\",\n    value: function parseFragmentName() {\n      if (this._lexer.token.value === 'on') {\n        throw this.unexpected();\n      }\n      return this.parseName();\n    } // Implements the parsing rules in the Values section.\n\n    /**\n     * Value[Const] :\n     *   - [~Const] Variable\n     *   - IntValue\n     *   - FloatValue\n     *   - StringValue\n     *   - BooleanValue\n     *   - NullValue\n     *   - EnumValue\n     *   - ListValue[?Const]\n     *   - ObjectValue[?Const]\n     *\n     * BooleanValue : one of `true` `false`\n     *\n     * NullValue : `null`\n     *\n     * EnumValue : Name but not `true`, `false` or `null`\n     */\n  }, {\n    key: \"parseValueLiteral\",\n    value: function parseValueLiteral(isConst) {\n      var token = this._lexer.token;\n      switch (token.kind) {\n        case TokenKind.BRACKET_L:\n          return this.parseList(isConst);\n        case TokenKind.BRACE_L:\n          return this.parseObject(isConst);\n        case TokenKind.INT:\n          this._lexer.advance();\n          return this.node(token, {\n            kind: Kind.INT,\n            value: token.value\n          });\n        case TokenKind.FLOAT:\n          this._lexer.advance();\n          return this.node(token, {\n            kind: Kind.FLOAT,\n            value: token.value\n          });\n        case TokenKind.STRING:\n        case TokenKind.BLOCK_STRING:\n          return this.parseStringLiteral();\n        case TokenKind.NAME:\n          this._lexer.advance();\n          switch (token.value) {\n            case 'true':\n              return this.node(token, {\n                kind: Kind.BOOLEAN,\n                value: true\n              });\n            case 'false':\n              return this.node(token, {\n                kind: Kind.BOOLEAN,\n                value: false\n              });\n            case 'null':\n              return this.node(token, {\n                kind: Kind.NULL\n              });\n            default:\n              return this.node(token, {\n                kind: Kind.ENUM,\n                value: token.value\n              });\n          }\n        case TokenKind.DOLLAR:\n          if (isConst) {\n            this.expectToken(TokenKind.DOLLAR);\n            if (this._lexer.token.kind === TokenKind.NAME) {\n              var varName = this._lexer.token.value;\n              throw syntaxError(this._lexer.source, token.start, \"Unexpected variable \\\"$\".concat(varName, \"\\\" in constant value.\"));\n            } else {\n              throw this.unexpected(token);\n            }\n          }\n          return this.parseVariable();\n        default:\n          throw this.unexpected();\n      }\n    }\n  }, {\n    key: \"parseConstValueLiteral\",\n    value: function parseConstValueLiteral() {\n      return this.parseValueLiteral(true);\n    }\n  }, {\n    key: \"parseStringLiteral\",\n    value: function parseStringLiteral() {\n      var token = this._lexer.token;\n      this._lexer.advance();\n      return this.node(token, {\n        kind: Kind.STRING,\n        value: token.value,\n        block: token.kind === TokenKind.BLOCK_STRING\n      });\n    }\n    /**\n     * ListValue[Const] :\n     *   - [ ]\n     *   - [ Value[?Const]+ ]\n     */\n  }, {\n    key: \"parseList\",\n    value: function parseList(isConst) {\n      var _this = this;\n      var item = function item() {\n        return _this.parseValueLiteral(isConst);\n      };\n      return this.node(this._lexer.token, {\n        kind: Kind.LIST,\n        values: this.any(TokenKind.BRACKET_L, item, TokenKind.BRACKET_R)\n      });\n    }\n    /**\n     * ```\n     * ObjectValue[Const] :\n     *   - { }\n     *   - { ObjectField[?Const]+ }\n     * ```\n     */\n  }, {\n    key: \"parseObject\",\n    value: function parseObject(isConst) {\n      var _this2 = this;\n      var item = function item() {\n        return _this2.parseObjectField(isConst);\n      };\n      return this.node(this._lexer.token, {\n        kind: Kind.OBJECT,\n        fields: this.any(TokenKind.BRACE_L, item, TokenKind.BRACE_R)\n      });\n    }\n    /**\n     * ObjectField[Const] : Name : Value[?Const]\n     */\n  }, {\n    key: \"parseObjectField\",\n    value: function parseObjectField(isConst) {\n      var start = this._lexer.token;\n      var name = this.parseName();\n      this.expectToken(TokenKind.COLON);\n      return this.node(start, {\n        kind: Kind.OBJECT_FIELD,\n        name: name,\n        value: this.parseValueLiteral(isConst)\n      });\n    } // Implements the parsing rules in the Directives section.\n\n    /**\n     * Directives[Const] : Directive[?Const]+\n     */\n  }, {\n    key: \"parseDirectives\",\n    value: function parseDirectives(isConst) {\n      var directives = [];\n      while (this.peek(TokenKind.AT)) {\n        directives.push(this.parseDirective(isConst));\n      }\n      return directives;\n    }\n  }, {\n    key: \"parseConstDirectives\",\n    value: function parseConstDirectives() {\n      return this.parseDirectives(true);\n    }\n    /**\n     * ```\n     * Directive[Const] : @ Name Arguments[?Const]?\n     * ```\n     */\n  }, {\n    key: \"parseDirective\",\n    value: function parseDirective(isConst) {\n      var start = this._lexer.token;\n      this.expectToken(TokenKind.AT);\n      return this.node(start, {\n        kind: Kind.DIRECTIVE,\n        name: this.parseName(),\n        arguments: this.parseArguments(isConst)\n      });\n    } // Implements the parsing rules in the Types section.\n\n    /**\n     * Type :\n     *   - NamedType\n     *   - ListType\n     *   - NonNullType\n     */\n  }, {\n    key: \"parseTypeReference\",\n    value: function parseTypeReference() {\n      var start = this._lexer.token;\n      var type;\n      if (this.expectOptionalToken(TokenKind.BRACKET_L)) {\n        var innerType = this.parseTypeReference();\n        this.expectToken(TokenKind.BRACKET_R);\n        type = this.node(start, {\n          kind: Kind.LIST_TYPE,\n          type: innerType\n        });\n      } else {\n        type = this.parseNamedType();\n      }\n      if (this.expectOptionalToken(TokenKind.BANG)) {\n        return this.node(start, {\n          kind: Kind.NON_NULL_TYPE,\n          type: type\n        });\n      }\n      return type;\n    }\n    /**\n     * NamedType : Name\n     */\n  }, {\n    key: \"parseNamedType\",\n    value: function parseNamedType() {\n      return this.node(this._lexer.token, {\n        kind: Kind.NAMED_TYPE,\n        name: this.parseName()\n      });\n    } // Implements the parsing rules in the Type Definition section.\n  }, {\n    key: \"peekDescription\",\n    value: function peekDescription() {\n      return this.peek(TokenKind.STRING) || this.peek(TokenKind.BLOCK_STRING);\n    }\n    /**\n     * Description : StringValue\n     */\n  }, {\n    key: \"parseDescription\",\n    value: function parseDescription() {\n      if (this.peekDescription()) {\n        return this.parseStringLiteral();\n      }\n    }\n    /**\n     * ```\n     * SchemaDefinition : Description? schema Directives[Const]? { OperationTypeDefinition+ }\n     * ```\n     */\n  }, {\n    key: \"parseSchemaDefinition\",\n    value: function parseSchemaDefinition() {\n      var start = this._lexer.token;\n      var description = this.parseDescription();\n      this.expectKeyword('schema');\n      var directives = this.parseConstDirectives();\n      var operationTypes = this.many(TokenKind.BRACE_L, this.parseOperationTypeDefinition, TokenKind.BRACE_R);\n      return this.node(start, {\n        kind: Kind.SCHEMA_DEFINITION,\n        description: description,\n        directives: directives,\n        operationTypes: operationTypes\n      });\n    }\n    /**\n     * OperationTypeDefinition : OperationType : NamedType\n     */\n  }, {\n    key: \"parseOperationTypeDefinition\",\n    value: function parseOperationTypeDefinition() {\n      var start = this._lexer.token;\n      var operation = this.parseOperationType();\n      this.expectToken(TokenKind.COLON);\n      var type = this.parseNamedType();\n      return this.node(start, {\n        kind: Kind.OPERATION_TYPE_DEFINITION,\n        operation: operation,\n        type: type\n      });\n    }\n    /**\n     * ScalarTypeDefinition : Description? scalar Name Directives[Const]?\n     */\n  }, {\n    key: \"parseScalarTypeDefinition\",\n    value: function parseScalarTypeDefinition() {\n      var start = this._lexer.token;\n      var description = this.parseDescription();\n      this.expectKeyword('scalar');\n      var name = this.parseName();\n      var directives = this.parseConstDirectives();\n      return this.node(start, {\n        kind: Kind.SCALAR_TYPE_DEFINITION,\n        description: description,\n        name: name,\n        directives: directives\n      });\n    }\n    /**\n     * ObjectTypeDefinition :\n     *   Description?\n     *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?\n     */\n  }, {\n    key: \"parseObjectTypeDefinition\",\n    value: function parseObjectTypeDefinition() {\n      var start = this._lexer.token;\n      var description = this.parseDescription();\n      this.expectKeyword('type');\n      var name = this.parseName();\n      var interfaces = this.parseImplementsInterfaces();\n      var directives = this.parseConstDirectives();\n      var fields = this.parseFieldsDefinition();\n      return this.node(start, {\n        kind: Kind.OBJECT_TYPE_DEFINITION,\n        description: description,\n        name: name,\n        interfaces: interfaces,\n        directives: directives,\n        fields: fields\n      });\n    }\n    /**\n     * ImplementsInterfaces :\n     *   - implements `&`? NamedType\n     *   - ImplementsInterfaces & NamedType\n     */\n  }, {\n    key: \"parseImplementsInterfaces\",\n    value: function parseImplementsInterfaces() {\n      return this.expectOptionalKeyword('implements') ? this.delimitedMany(TokenKind.AMP, this.parseNamedType) : [];\n    }\n    /**\n     * ```\n     * FieldsDefinition : { FieldDefinition+ }\n     * ```\n     */\n  }, {\n    key: \"parseFieldsDefinition\",\n    value: function parseFieldsDefinition() {\n      return this.optionalMany(TokenKind.BRACE_L, this.parseFieldDefinition, TokenKind.BRACE_R);\n    }\n    /**\n     * FieldDefinition :\n     *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?\n     */\n  }, {\n    key: \"parseFieldDefinition\",\n    value: function parseFieldDefinition() {\n      var start = this._lexer.token;\n      var description = this.parseDescription();\n      var name = this.parseName();\n      var args = this.parseArgumentDefs();\n      this.expectToken(TokenKind.COLON);\n      var type = this.parseTypeReference();\n      var directives = this.parseConstDirectives();\n      return this.node(start, {\n        kind: Kind.FIELD_DEFINITION,\n        description: description,\n        name: name,\n        arguments: args,\n        type: type,\n        directives: directives\n      });\n    }\n    /**\n     * ArgumentsDefinition : ( InputValueDefinition+ )\n     */\n  }, {\n    key: \"parseArgumentDefs\",\n    value: function parseArgumentDefs() {\n      return this.optionalMany(TokenKind.PAREN_L, this.parseInputValueDef, TokenKind.PAREN_R);\n    }\n    /**\n     * InputValueDefinition :\n     *   - Description? Name : Type DefaultValue? Directives[Const]?\n     */\n  }, {\n    key: \"parseInputValueDef\",\n    value: function parseInputValueDef() {\n      var start = this._lexer.token;\n      var description = this.parseDescription();\n      var name = this.parseName();\n      this.expectToken(TokenKind.COLON);\n      var type = this.parseTypeReference();\n      var defaultValue;\n      if (this.expectOptionalToken(TokenKind.EQUALS)) {\n        defaultValue = this.parseConstValueLiteral();\n      }\n      var directives = this.parseConstDirectives();\n      return this.node(start, {\n        kind: Kind.INPUT_VALUE_DEFINITION,\n        description: description,\n        name: name,\n        type: type,\n        defaultValue: defaultValue,\n        directives: directives\n      });\n    }\n    /**\n     * InterfaceTypeDefinition :\n     *   - Description? interface Name Directives[Const]? FieldsDefinition?\n     */\n  }, {\n    key: \"parseInterfaceTypeDefinition\",\n    value: function parseInterfaceTypeDefinition() {\n      var start = this._lexer.token;\n      var description = this.parseDescription();\n      this.expectKeyword('interface');\n      var name = this.parseName();\n      var interfaces = this.parseImplementsInterfaces();\n      var directives = this.parseConstDirectives();\n      var fields = this.parseFieldsDefinition();\n      return this.node(start, {\n        kind: Kind.INTERFACE_TYPE_DEFINITION,\n        description: description,\n        name: name,\n        interfaces: interfaces,\n        directives: directives,\n        fields: fields\n      });\n    }\n    /**\n     * UnionTypeDefinition :\n     *   - Description? union Name Directives[Const]? UnionMemberTypes?\n     */\n  }, {\n    key: \"parseUnionTypeDefinition\",\n    value: function parseUnionTypeDefinition() {\n      var start = this._lexer.token;\n      var description = this.parseDescription();\n      this.expectKeyword('union');\n      var name = this.parseName();\n      var directives = this.parseConstDirectives();\n      var types = this.parseUnionMemberTypes();\n      return this.node(start, {\n        kind: Kind.UNION_TYPE_DEFINITION,\n        description: description,\n        name: name,\n        directives: directives,\n        types: types\n      });\n    }\n    /**\n     * UnionMemberTypes :\n     *   - = `|`? NamedType\n     *   - UnionMemberTypes | NamedType\n     */\n  }, {\n    key: \"parseUnionMemberTypes\",\n    value: function parseUnionMemberTypes() {\n      return this.expectOptionalToken(TokenKind.EQUALS) ? this.delimitedMany(TokenKind.PIPE, this.parseNamedType) : [];\n    }\n    /**\n     * EnumTypeDefinition :\n     *   - Description? enum Name Directives[Const]? EnumValuesDefinition?\n     */\n  }, {\n    key: \"parseEnumTypeDefinition\",\n    value: function parseEnumTypeDefinition() {\n      var start = this._lexer.token;\n      var description = this.parseDescription();\n      this.expectKeyword('enum');\n      var name = this.parseName();\n      var directives = this.parseConstDirectives();\n      var values = this.parseEnumValuesDefinition();\n      return this.node(start, {\n        kind: Kind.ENUM_TYPE_DEFINITION,\n        description: description,\n        name: name,\n        directives: directives,\n        values: values\n      });\n    }\n    /**\n     * ```\n     * EnumValuesDefinition : { EnumValueDefinition+ }\n     * ```\n     */\n  }, {\n    key: \"parseEnumValuesDefinition\",\n    value: function parseEnumValuesDefinition() {\n      return this.optionalMany(TokenKind.BRACE_L, this.parseEnumValueDefinition, TokenKind.BRACE_R);\n    }\n    /**\n     * EnumValueDefinition : Description? EnumValue Directives[Const]?\n     */\n  }, {\n    key: \"parseEnumValueDefinition\",\n    value: function parseEnumValueDefinition() {\n      var start = this._lexer.token;\n      var description = this.parseDescription();\n      var name = this.parseEnumValueName();\n      var directives = this.parseConstDirectives();\n      return this.node(start, {\n        kind: Kind.ENUM_VALUE_DEFINITION,\n        description: description,\n        name: name,\n        directives: directives\n      });\n    }\n    /**\n     * EnumValue : Name but not `true`, `false` or `null`\n     */\n  }, {\n    key: \"parseEnumValueName\",\n    value: function parseEnumValueName() {\n      if (this._lexer.token.value === 'true' || this._lexer.token.value === 'false' || this._lexer.token.value === 'null') {\n        throw syntaxError(this._lexer.source, this._lexer.token.start, \"\".concat(getTokenDesc(this._lexer.token), \" is reserved and cannot be used for an enum value.\"));\n      }\n      return this.parseName();\n    }\n    /**\n     * InputObjectTypeDefinition :\n     *   - Description? input Name Directives[Const]? InputFieldsDefinition?\n     */\n  }, {\n    key: \"parseInputObjectTypeDefinition\",\n    value: function parseInputObjectTypeDefinition() {\n      var start = this._lexer.token;\n      var description = this.parseDescription();\n      this.expectKeyword('input');\n      var name = this.parseName();\n      var directives = this.parseConstDirectives();\n      var fields = this.parseInputFieldsDefinition();\n      return this.node(start, {\n        kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n        description: description,\n        name: name,\n        directives: directives,\n        fields: fields\n      });\n    }\n    /**\n     * ```\n     * InputFieldsDefinition : { InputValueDefinition+ }\n     * ```\n     */\n  }, {\n    key: \"parseInputFieldsDefinition\",\n    value: function parseInputFieldsDefinition() {\n      return this.optionalMany(TokenKind.BRACE_L, this.parseInputValueDef, TokenKind.BRACE_R);\n    }\n    /**\n     * TypeSystemExtension :\n     *   - SchemaExtension\n     *   - TypeExtension\n     *\n     * TypeExtension :\n     *   - ScalarTypeExtension\n     *   - ObjectTypeExtension\n     *   - InterfaceTypeExtension\n     *   - UnionTypeExtension\n     *   - EnumTypeExtension\n     *   - InputObjectTypeDefinition\n     */\n  }, {\n    key: \"parseTypeSystemExtension\",\n    value: function parseTypeSystemExtension() {\n      var keywordToken = this._lexer.lookahead();\n      if (keywordToken.kind === TokenKind.NAME) {\n        switch (keywordToken.value) {\n          case 'schema':\n            return this.parseSchemaExtension();\n          case 'scalar':\n            return this.parseScalarTypeExtension();\n          case 'type':\n            return this.parseObjectTypeExtension();\n          case 'interface':\n            return this.parseInterfaceTypeExtension();\n          case 'union':\n            return this.parseUnionTypeExtension();\n          case 'enum':\n            return this.parseEnumTypeExtension();\n          case 'input':\n            return this.parseInputObjectTypeExtension();\n        }\n      }\n      throw this.unexpected(keywordToken);\n    }\n    /**\n     * ```\n     * SchemaExtension :\n     *  - extend schema Directives[Const]? { OperationTypeDefinition+ }\n     *  - extend schema Directives[Const]\n     * ```\n     */\n  }, {\n    key: \"parseSchemaExtension\",\n    value: function parseSchemaExtension() {\n      var start = this._lexer.token;\n      this.expectKeyword('extend');\n      this.expectKeyword('schema');\n      var directives = this.parseConstDirectives();\n      var operationTypes = this.optionalMany(TokenKind.BRACE_L, this.parseOperationTypeDefinition, TokenKind.BRACE_R);\n      if (directives.length === 0 && operationTypes.length === 0) {\n        throw this.unexpected();\n      }\n      return this.node(start, {\n        kind: Kind.SCHEMA_EXTENSION,\n        directives: directives,\n        operationTypes: operationTypes\n      });\n    }\n    /**\n     * ScalarTypeExtension :\n     *   - extend scalar Name Directives[Const]\n     */\n  }, {\n    key: \"parseScalarTypeExtension\",\n    value: function parseScalarTypeExtension() {\n      var start = this._lexer.token;\n      this.expectKeyword('extend');\n      this.expectKeyword('scalar');\n      var name = this.parseName();\n      var directives = this.parseConstDirectives();\n      if (directives.length === 0) {\n        throw this.unexpected();\n      }\n      return this.node(start, {\n        kind: Kind.SCALAR_TYPE_EXTENSION,\n        name: name,\n        directives: directives\n      });\n    }\n    /**\n     * ObjectTypeExtension :\n     *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n     *  - extend type Name ImplementsInterfaces? Directives[Const]\n     *  - extend type Name ImplementsInterfaces\n     */\n  }, {\n    key: \"parseObjectTypeExtension\",\n    value: function parseObjectTypeExtension() {\n      var start = this._lexer.token;\n      this.expectKeyword('extend');\n      this.expectKeyword('type');\n      var name = this.parseName();\n      var interfaces = this.parseImplementsInterfaces();\n      var directives = this.parseConstDirectives();\n      var fields = this.parseFieldsDefinition();\n      if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {\n        throw this.unexpected();\n      }\n      return this.node(start, {\n        kind: Kind.OBJECT_TYPE_EXTENSION,\n        name: name,\n        interfaces: interfaces,\n        directives: directives,\n        fields: fields\n      });\n    }\n    /**\n     * InterfaceTypeExtension :\n     *  - extend interface Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n     *  - extend interface Name ImplementsInterfaces? Directives[Const]\n     *  - extend interface Name ImplementsInterfaces\n     */\n  }, {\n    key: \"parseInterfaceTypeExtension\",\n    value: function parseInterfaceTypeExtension() {\n      var start = this._lexer.token;\n      this.expectKeyword('extend');\n      this.expectKeyword('interface');\n      var name = this.parseName();\n      var interfaces = this.parseImplementsInterfaces();\n      var directives = this.parseConstDirectives();\n      var fields = this.parseFieldsDefinition();\n      if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {\n        throw this.unexpected();\n      }\n      return this.node(start, {\n        kind: Kind.INTERFACE_TYPE_EXTENSION,\n        name: name,\n        interfaces: interfaces,\n        directives: directives,\n        fields: fields\n      });\n    }\n    /**\n     * UnionTypeExtension :\n     *   - extend union Name Directives[Const]? UnionMemberTypes\n     *   - extend union Name Directives[Const]\n     */\n  }, {\n    key: \"parseUnionTypeExtension\",\n    value: function parseUnionTypeExtension() {\n      var start = this._lexer.token;\n      this.expectKeyword('extend');\n      this.expectKeyword('union');\n      var name = this.parseName();\n      var directives = this.parseConstDirectives();\n      var types = this.parseUnionMemberTypes();\n      if (directives.length === 0 && types.length === 0) {\n        throw this.unexpected();\n      }\n      return this.node(start, {\n        kind: Kind.UNION_TYPE_EXTENSION,\n        name: name,\n        directives: directives,\n        types: types\n      });\n    }\n    /**\n     * EnumTypeExtension :\n     *   - extend enum Name Directives[Const]? EnumValuesDefinition\n     *   - extend enum Name Directives[Const]\n     */\n  }, {\n    key: \"parseEnumTypeExtension\",\n    value: function parseEnumTypeExtension() {\n      var start = this._lexer.token;\n      this.expectKeyword('extend');\n      this.expectKeyword('enum');\n      var name = this.parseName();\n      var directives = this.parseConstDirectives();\n      var values = this.parseEnumValuesDefinition();\n      if (directives.length === 0 && values.length === 0) {\n        throw this.unexpected();\n      }\n      return this.node(start, {\n        kind: Kind.ENUM_TYPE_EXTENSION,\n        name: name,\n        directives: directives,\n        values: values\n      });\n    }\n    /**\n     * InputObjectTypeExtension :\n     *   - extend input Name Directives[Const]? InputFieldsDefinition\n     *   - extend input Name Directives[Const]\n     */\n  }, {\n    key: \"parseInputObjectTypeExtension\",\n    value: function parseInputObjectTypeExtension() {\n      var start = this._lexer.token;\n      this.expectKeyword('extend');\n      this.expectKeyword('input');\n      var name = this.parseName();\n      var directives = this.parseConstDirectives();\n      var fields = this.parseInputFieldsDefinition();\n      if (directives.length === 0 && fields.length === 0) {\n        throw this.unexpected();\n      }\n      return this.node(start, {\n        kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,\n        name: name,\n        directives: directives,\n        fields: fields\n      });\n    }\n    /**\n     * ```\n     * DirectiveDefinition :\n     *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations\n     * ```\n     */\n  }, {\n    key: \"parseDirectiveDefinition\",\n    value: function parseDirectiveDefinition() {\n      var start = this._lexer.token;\n      var description = this.parseDescription();\n      this.expectKeyword('directive');\n      this.expectToken(TokenKind.AT);\n      var name = this.parseName();\n      var args = this.parseArgumentDefs();\n      var repeatable = this.expectOptionalKeyword('repeatable');\n      this.expectKeyword('on');\n      var locations = this.parseDirectiveLocations();\n      return this.node(start, {\n        kind: Kind.DIRECTIVE_DEFINITION,\n        description: description,\n        name: name,\n        arguments: args,\n        repeatable: repeatable,\n        locations: locations\n      });\n    }\n    /**\n     * DirectiveLocations :\n     *   - `|`? DirectiveLocation\n     *   - DirectiveLocations | DirectiveLocation\n     */\n  }, {\n    key: \"parseDirectiveLocations\",\n    value: function parseDirectiveLocations() {\n      return this.delimitedMany(TokenKind.PIPE, this.parseDirectiveLocation);\n    }\n    /*\n     * DirectiveLocation :\n     *   - ExecutableDirectiveLocation\n     *   - TypeSystemDirectiveLocation\n     *\n     * ExecutableDirectiveLocation : one of\n     *   `QUERY`\n     *   `MUTATION`\n     *   `SUBSCRIPTION`\n     *   `FIELD`\n     *   `FRAGMENT_DEFINITION`\n     *   `FRAGMENT_SPREAD`\n     *   `INLINE_FRAGMENT`\n     *\n     * TypeSystemDirectiveLocation : one of\n     *   `SCHEMA`\n     *   `SCALAR`\n     *   `OBJECT`\n     *   `FIELD_DEFINITION`\n     *   `ARGUMENT_DEFINITION`\n     *   `INTERFACE`\n     *   `UNION`\n     *   `ENUM`\n     *   `ENUM_VALUE`\n     *   `INPUT_OBJECT`\n     *   `INPUT_FIELD_DEFINITION`\n     */\n  }, {\n    key: \"parseDirectiveLocation\",\n    value: function parseDirectiveLocation() {\n      var start = this._lexer.token;\n      var name = this.parseName();\n      if (Object.prototype.hasOwnProperty.call(DirectiveLocation, name.value)) {\n        return name;\n      }\n      throw this.unexpected(start);\n    } // Core parsing utility functions\n\n    /**\n     * Returns a node that, if configured to do so, sets a \"loc\" field as a\n     * location object, used to identify the place in the source that created a\n     * given parsed object.\n     */\n  }, {\n    key: \"node\",\n    value: function node(startToken, _node) {\n      var _this$_options2;\n      if (((_this$_options2 = this._options) === null || _this$_options2 === void 0 ? void 0 : _this$_options2.noLocation) !== true) {\n        _node.loc = new Location(startToken, this._lexer.lastToken, this._lexer.source);\n      }\n      return _node;\n    }\n    /**\n     * Determines if the next token is of a given kind\n     */\n  }, {\n    key: \"peek\",\n    value: function peek(kind) {\n      return this._lexer.token.kind === kind;\n    }\n    /**\n     * If the next token is of the given kind, return that token after advancing the lexer.\n     * Otherwise, do not change the parser state and throw an error.\n     */\n  }, {\n    key: \"expectToken\",\n    value: function expectToken(kind) {\n      var token = this._lexer.token;\n      if (token.kind === kind) {\n        this._lexer.advance();\n        return token;\n      }\n      throw syntaxError(this._lexer.source, token.start, \"Expected \".concat(getTokenKindDesc(kind), \", found \").concat(getTokenDesc(token), \".\"));\n    }\n    /**\n     * If the next token is of the given kind, return \"true\" after advancing the lexer.\n     * Otherwise, do not change the parser state and return \"false\".\n     */\n  }, {\n    key: \"expectOptionalToken\",\n    value: function expectOptionalToken(kind) {\n      var token = this._lexer.token;\n      if (token.kind === kind) {\n        this._lexer.advance();\n        return true;\n      }\n      return false;\n    }\n    /**\n     * If the next token is a given keyword, advance the lexer.\n     * Otherwise, do not change the parser state and throw an error.\n     */\n  }, {\n    key: \"expectKeyword\",\n    value: function expectKeyword(value) {\n      var token = this._lexer.token;\n      if (token.kind === TokenKind.NAME && token.value === value) {\n        this._lexer.advance();\n      } else {\n        throw syntaxError(this._lexer.source, token.start, \"Expected \\\"\".concat(value, \"\\\", found \").concat(getTokenDesc(token), \".\"));\n      }\n    }\n    /**\n     * If the next token is a given keyword, return \"true\" after advancing the lexer.\n     * Otherwise, do not change the parser state and return \"false\".\n     */\n  }, {\n    key: \"expectOptionalKeyword\",\n    value: function expectOptionalKeyword(value) {\n      var token = this._lexer.token;\n      if (token.kind === TokenKind.NAME && token.value === value) {\n        this._lexer.advance();\n        return true;\n      }\n      return false;\n    }\n    /**\n     * Helper function for creating an error when an unexpected lexed token is encountered.\n     */\n  }, {\n    key: \"unexpected\",\n    value: function unexpected(atToken) {\n      var token = atToken !== null && atToken !== void 0 ? atToken : this._lexer.token;\n      return syntaxError(this._lexer.source, token.start, \"Unexpected \".concat(getTokenDesc(token), \".\"));\n    }\n    /**\n     * Returns a possibly empty list of parse nodes, determined by the parseFn.\n     * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n     * Advances the parser to the next lex token after the closing token.\n     */\n  }, {\n    key: \"any\",\n    value: function any(openKind, parseFn, closeKind) {\n      this.expectToken(openKind);\n      var nodes = [];\n      while (!this.expectOptionalToken(closeKind)) {\n        nodes.push(parseFn.call(this));\n      }\n      return nodes;\n    }\n    /**\n     * Returns a list of parse nodes, determined by the parseFn.\n     * It can be empty only if open token is missing otherwise it will always return non-empty list\n     * that begins with a lex token of openKind and ends with a lex token of closeKind.\n     * Advances the parser to the next lex token after the closing token.\n     */\n  }, {\n    key: \"optionalMany\",\n    value: function optionalMany(openKind, parseFn, closeKind) {\n      if (this.expectOptionalToken(openKind)) {\n        var nodes = [];\n        do {\n          nodes.push(parseFn.call(this));\n        } while (!this.expectOptionalToken(closeKind));\n        return nodes;\n      }\n      return [];\n    }\n    /**\n     * Returns a non-empty list of parse nodes, determined by the parseFn.\n     * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n     * Advances the parser to the next lex token after the closing token.\n     */\n  }, {\n    key: \"many\",\n    value: function many(openKind, parseFn, closeKind) {\n      this.expectToken(openKind);\n      var nodes = [];\n      do {\n        nodes.push(parseFn.call(this));\n      } while (!this.expectOptionalToken(closeKind));\n      return nodes;\n    }\n    /**\n     * Returns a non-empty list of parse nodes, determined by the parseFn.\n     * This list may begin with a lex token of delimiterKind followed by items separated by lex tokens of tokenKind.\n     * Advances the parser to the next lex token after last item in the list.\n     */\n  }, {\n    key: \"delimitedMany\",\n    value: function delimitedMany(delimiterKind, parseFn) {\n      this.expectOptionalToken(delimiterKind);\n      var nodes = [];\n      do {\n        nodes.push(parseFn.call(this));\n      } while (this.expectOptionalToken(delimiterKind));\n      return nodes;\n    }\n  }]);\n  return Parser;\n}();\n/**\n * A helper function to describe a token as a string for debugging.\n */\n\nfunction getTokenDesc(token) {\n  var value = token.value;\n  return getTokenKindDesc(token.kind) + (value != null ? \" \\\"\".concat(value, \"\\\"\") : '');\n}\n/**\n * A helper function to describe a token kind as a string for debugging.\n */\n\nfunction getTokenKindDesc(kind) {\n  return isPunctuatorTokenKind(kind) ? \"\\\"\".concat(kind, \"\\\"\") : kind;\n}","map":{"version":3,"names":["syntaxError","Location","OperationTypeNode","DirectiveLocation","Kind","isPunctuatorTokenKind","Lexer","isSource","Source","TokenKind","parse","source","options","parser","Parser","parseDocument","parseValue","expectToken","SOF","value","parseValueLiteral","EOF","parseConstValue","parseConstValueLiteral","parseType","type","parseTypeReference","sourceObj","_lexer","_options","token","NAME","node","kind","DOCUMENT","definitions","many","parseDefinition","peek","BRACE_L","parseOperationDefinition","hasDescription","peekDescription","keywordToken","lookahead","parseSchemaDefinition","parseScalarTypeDefinition","parseObjectTypeDefinition","parseInterfaceTypeDefinition","parseUnionTypeDefinition","parseEnumTypeDefinition","parseInputObjectTypeDefinition","parseDirectiveDefinition","start","parseFragmentDefinition","parseTypeSystemExtension","unexpected","OPERATION_DEFINITION","operation","QUERY","name","undefined","variableDefinitions","directives","selectionSet","parseSelectionSet","parseOperationType","parseName","parseVariableDefinitions","parseDirectives","operationToken","MUTATION","SUBSCRIPTION","optionalMany","PAREN_L","parseVariableDefinition","PAREN_R","VARIABLE_DEFINITION","variable","parseVariable","COLON","defaultValue","expectOptionalToken","EQUALS","parseConstDirectives","DOLLAR","VARIABLE","SELECTION_SET","selections","parseSelection","BRACE_R","SPREAD","parseFragment","parseField","nameOrAlias","alias","FIELD","arguments","parseArguments","isConst","item","parseConstArgument","parseArgument","ARGUMENT","hasTypeCondition","expectOptionalKeyword","FRAGMENT_SPREAD","parseFragmentName","INLINE_FRAGMENT","typeCondition","parseNamedType","_this$_options","expectKeyword","allowLegacyFragmentVariables","FRAGMENT_DEFINITION","BRACKET_L","parseList","parseObject","INT","advance","FLOAT","STRING","BLOCK_STRING","parseStringLiteral","BOOLEAN","NULL","ENUM","varName","block","LIST","values","any","BRACKET_R","parseObjectField","OBJECT","fields","OBJECT_FIELD","AT","push","parseDirective","DIRECTIVE","innerType","LIST_TYPE","BANG","NON_NULL_TYPE","NAMED_TYPE","description","parseDescription","operationTypes","parseOperationTypeDefinition","SCHEMA_DEFINITION","OPERATION_TYPE_DEFINITION","SCALAR_TYPE_DEFINITION","interfaces","parseImplementsInterfaces","parseFieldsDefinition","OBJECT_TYPE_DEFINITION","delimitedMany","AMP","parseFieldDefinition","args","parseArgumentDefs","FIELD_DEFINITION","parseInputValueDef","INPUT_VALUE_DEFINITION","INTERFACE_TYPE_DEFINITION","types","parseUnionMemberTypes","UNION_TYPE_DEFINITION","PIPE","parseEnumValuesDefinition","ENUM_TYPE_DEFINITION","parseEnumValueDefinition","parseEnumValueName","ENUM_VALUE_DEFINITION","getTokenDesc","parseInputFieldsDefinition","INPUT_OBJECT_TYPE_DEFINITION","parseSchemaExtension","parseScalarTypeExtension","parseObjectTypeExtension","parseInterfaceTypeExtension","parseUnionTypeExtension","parseEnumTypeExtension","parseInputObjectTypeExtension","length","SCHEMA_EXTENSION","SCALAR_TYPE_EXTENSION","OBJECT_TYPE_EXTENSION","INTERFACE_TYPE_EXTENSION","UNION_TYPE_EXTENSION","ENUM_TYPE_EXTENSION","INPUT_OBJECT_TYPE_EXTENSION","repeatable","locations","parseDirectiveLocations","DIRECTIVE_DEFINITION","parseDirectiveLocation","Object","prototype","hasOwnProperty","call","startToken","_this$_options2","noLocation","loc","lastToken","getTokenKindDesc","atToken","openKind","parseFn","closeKind","nodes","delimiterKind"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/graphql/language/parser.mjs"],"sourcesContent":["import { syntaxError } from '../error/syntaxError.mjs';\nimport { Location, OperationTypeNode } from './ast.mjs';\nimport { DirectiveLocation } from './directiveLocation.mjs';\nimport { Kind } from './kinds.mjs';\nimport { isPunctuatorTokenKind, Lexer } from './lexer.mjs';\nimport { isSource, Source } from './source.mjs';\nimport { TokenKind } from './tokenKind.mjs';\n/**\n * Configuration options to control parser behavior\n */\n\n/**\n * Given a GraphQL source, parses it into a Document.\n * Throws GraphQLError if a syntax error is encountered.\n */\nexport function parse(source, options) {\n  const parser = new Parser(source, options);\n  return parser.parseDocument();\n}\n/**\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\n * that value.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Values directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: valueFromAST().\n */\n\nexport function parseValue(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const value = parser.parseValueLiteral(false);\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Similar to parseValue(), but raises a parse error if it encounters a\n * variable. The return type will be a constant value.\n */\n\nexport function parseConstValue(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const value = parser.parseConstValueLiteral();\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\n * that type.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Types directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: typeFromAST().\n */\n\nexport function parseType(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const type = parser.parseTypeReference();\n  parser.expectToken(TokenKind.EOF);\n  return type;\n}\n/**\n * This class is exported only to assist people in implementing their own parsers\n * without duplicating too much code and should be used only as last resort for cases\n * such as experimental syntax or if certain features could not be contributed upstream.\n *\n * It is still part of the internal API and is versioned, so any changes to it are never\n * considered breaking changes. If you still need to support multiple versions of the\n * library, please use the `versionInfo` variable for version detection.\n *\n * @internal\n */\n\nexport class Parser {\n  constructor(source, options) {\n    const sourceObj = isSource(source) ? source : new Source(source);\n    this._lexer = new Lexer(sourceObj);\n    this._options = options;\n  }\n  /**\n   * Converts a name lex token into a name parse node.\n   */\n\n  parseName() {\n    const token = this.expectToken(TokenKind.NAME);\n    return this.node(token, {\n      kind: Kind.NAME,\n      value: token.value,\n    });\n  } // Implements the parsing rules in the Document section.\n\n  /**\n   * Document : Definition+\n   */\n\n  parseDocument() {\n    return this.node(this._lexer.token, {\n      kind: Kind.DOCUMENT,\n      definitions: this.many(\n        TokenKind.SOF,\n        this.parseDefinition,\n        TokenKind.EOF,\n      ),\n    });\n  }\n  /**\n   * Definition :\n   *   - ExecutableDefinition\n   *   - TypeSystemDefinition\n   *   - TypeSystemExtension\n   *\n   * ExecutableDefinition :\n   *   - OperationDefinition\n   *   - FragmentDefinition\n   *\n   * TypeSystemDefinition :\n   *   - SchemaDefinition\n   *   - TypeDefinition\n   *   - DirectiveDefinition\n   *\n   * TypeDefinition :\n   *   - ScalarTypeDefinition\n   *   - ObjectTypeDefinition\n   *   - InterfaceTypeDefinition\n   *   - UnionTypeDefinition\n   *   - EnumTypeDefinition\n   *   - InputObjectTypeDefinition\n   */\n\n  parseDefinition() {\n    if (this.peek(TokenKind.BRACE_L)) {\n      return this.parseOperationDefinition();\n    } // Many definitions begin with a description and require a lookahead.\n\n    const hasDescription = this.peekDescription();\n    const keywordToken = hasDescription\n      ? this._lexer.lookahead()\n      : this._lexer.token;\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaDefinition();\n\n        case 'scalar':\n          return this.parseScalarTypeDefinition();\n\n        case 'type':\n          return this.parseObjectTypeDefinition();\n\n        case 'interface':\n          return this.parseInterfaceTypeDefinition();\n\n        case 'union':\n          return this.parseUnionTypeDefinition();\n\n        case 'enum':\n          return this.parseEnumTypeDefinition();\n\n        case 'input':\n          return this.parseInputObjectTypeDefinition();\n\n        case 'directive':\n          return this.parseDirectiveDefinition();\n      }\n\n      if (hasDescription) {\n        throw syntaxError(\n          this._lexer.source,\n          this._lexer.token.start,\n          'Unexpected description, descriptions are supported only on type definitions.',\n        );\n      }\n\n      switch (keywordToken.value) {\n        case 'query':\n        case 'mutation':\n        case 'subscription':\n          return this.parseOperationDefinition();\n\n        case 'fragment':\n          return this.parseFragmentDefinition();\n\n        case 'extend':\n          return this.parseTypeSystemExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  } // Implements the parsing rules in the Operations section.\n\n  /**\n   * OperationDefinition :\n   *  - SelectionSet\n   *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\n   */\n\n  parseOperationDefinition() {\n    const start = this._lexer.token;\n\n    if (this.peek(TokenKind.BRACE_L)) {\n      return this.node(start, {\n        kind: Kind.OPERATION_DEFINITION,\n        operation: OperationTypeNode.QUERY,\n        name: undefined,\n        variableDefinitions: [],\n        directives: [],\n        selectionSet: this.parseSelectionSet(),\n      });\n    }\n\n    const operation = this.parseOperationType();\n    let name;\n\n    if (this.peek(TokenKind.NAME)) {\n      name = this.parseName();\n    }\n\n    return this.node(start, {\n      kind: Kind.OPERATION_DEFINITION,\n      operation,\n      name,\n      variableDefinitions: this.parseVariableDefinitions(),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * OperationType : one of query mutation subscription\n   */\n\n  parseOperationType() {\n    const operationToken = this.expectToken(TokenKind.NAME);\n\n    switch (operationToken.value) {\n      case 'query':\n        return OperationTypeNode.QUERY;\n\n      case 'mutation':\n        return OperationTypeNode.MUTATION;\n\n      case 'subscription':\n        return OperationTypeNode.SUBSCRIPTION;\n    }\n\n    throw this.unexpected(operationToken);\n  }\n  /**\n   * VariableDefinitions : ( VariableDefinition+ )\n   */\n\n  parseVariableDefinitions() {\n    return this.optionalMany(\n      TokenKind.PAREN_L,\n      this.parseVariableDefinition,\n      TokenKind.PAREN_R,\n    );\n  }\n  /**\n   * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?\n   */\n\n  parseVariableDefinition() {\n    return this.node(this._lexer.token, {\n      kind: Kind.VARIABLE_DEFINITION,\n      variable: this.parseVariable(),\n      type: (this.expectToken(TokenKind.COLON), this.parseTypeReference()),\n      defaultValue: this.expectOptionalToken(TokenKind.EQUALS)\n        ? this.parseConstValueLiteral()\n        : undefined,\n      directives: this.parseConstDirectives(),\n    });\n  }\n  /**\n   * Variable : $ Name\n   */\n\n  parseVariable() {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.DOLLAR);\n    return this.node(start, {\n      kind: Kind.VARIABLE,\n      name: this.parseName(),\n    });\n  }\n  /**\n   * ```\n   * SelectionSet : { Selection+ }\n   * ```\n   */\n\n  parseSelectionSet() {\n    return this.node(this._lexer.token, {\n      kind: Kind.SELECTION_SET,\n      selections: this.many(\n        TokenKind.BRACE_L,\n        this.parseSelection,\n        TokenKind.BRACE_R,\n      ),\n    });\n  }\n  /**\n   * Selection :\n   *   - Field\n   *   - FragmentSpread\n   *   - InlineFragment\n   */\n\n  parseSelection() {\n    return this.peek(TokenKind.SPREAD)\n      ? this.parseFragment()\n      : this.parseField();\n  }\n  /**\n   * Field : Alias? Name Arguments? Directives? SelectionSet?\n   *\n   * Alias : Name :\n   */\n\n  parseField() {\n    const start = this._lexer.token;\n    const nameOrAlias = this.parseName();\n    let alias;\n    let name;\n\n    if (this.expectOptionalToken(TokenKind.COLON)) {\n      alias = nameOrAlias;\n      name = this.parseName();\n    } else {\n      name = nameOrAlias;\n    }\n\n    return this.node(start, {\n      kind: Kind.FIELD,\n      alias,\n      name,\n      arguments: this.parseArguments(false),\n      directives: this.parseDirectives(false),\n      selectionSet: this.peek(TokenKind.BRACE_L)\n        ? this.parseSelectionSet()\n        : undefined,\n    });\n  }\n  /**\n   * Arguments[Const] : ( Argument[?Const]+ )\n   */\n\n  parseArguments(isConst) {\n    const item = isConst ? this.parseConstArgument : this.parseArgument;\n    return this.optionalMany(TokenKind.PAREN_L, item, TokenKind.PAREN_R);\n  }\n  /**\n   * Argument[Const] : Name : Value[?Const]\n   */\n\n  parseArgument(isConst = false) {\n    const start = this._lexer.token;\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return this.node(start, {\n      kind: Kind.ARGUMENT,\n      name,\n      value: this.parseValueLiteral(isConst),\n    });\n  }\n\n  parseConstArgument() {\n    return this.parseArgument(true);\n  } // Implements the parsing rules in the Fragments section.\n\n  /**\n   * Corresponds to both FragmentSpread and InlineFragment in the spec.\n   *\n   * FragmentSpread : ... FragmentName Directives?\n   *\n   * InlineFragment : ... TypeCondition? Directives? SelectionSet\n   */\n\n  parseFragment() {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.SPREAD);\n    const hasTypeCondition = this.expectOptionalKeyword('on');\n\n    if (!hasTypeCondition && this.peek(TokenKind.NAME)) {\n      return this.node(start, {\n        kind: Kind.FRAGMENT_SPREAD,\n        name: this.parseFragmentName(),\n        directives: this.parseDirectives(false),\n      });\n    }\n\n    return this.node(start, {\n      kind: Kind.INLINE_FRAGMENT,\n      typeCondition: hasTypeCondition ? this.parseNamedType() : undefined,\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * FragmentDefinition :\n   *   - fragment FragmentName on TypeCondition Directives? SelectionSet\n   *\n   * TypeCondition : NamedType\n   */\n\n  parseFragmentDefinition() {\n    var _this$_options;\n\n    const start = this._lexer.token;\n    this.expectKeyword('fragment'); // Legacy support for defining variables within fragments changes\n    // the grammar of FragmentDefinition:\n    //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet\n\n    if (\n      ((_this$_options = this._options) === null || _this$_options === void 0\n        ? void 0\n        : _this$_options.allowLegacyFragmentVariables) === true\n    ) {\n      return this.node(start, {\n        kind: Kind.FRAGMENT_DEFINITION,\n        name: this.parseFragmentName(),\n        variableDefinitions: this.parseVariableDefinitions(),\n        typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n        directives: this.parseDirectives(false),\n        selectionSet: this.parseSelectionSet(),\n      });\n    }\n\n    return this.node(start, {\n      kind: Kind.FRAGMENT_DEFINITION,\n      name: this.parseFragmentName(),\n      typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * FragmentName : Name but not `on`\n   */\n\n  parseFragmentName() {\n    if (this._lexer.token.value === 'on') {\n      throw this.unexpected();\n    }\n\n    return this.parseName();\n  } // Implements the parsing rules in the Values section.\n\n  /**\n   * Value[Const] :\n   *   - [~Const] Variable\n   *   - IntValue\n   *   - FloatValue\n   *   - StringValue\n   *   - BooleanValue\n   *   - NullValue\n   *   - EnumValue\n   *   - ListValue[?Const]\n   *   - ObjectValue[?Const]\n   *\n   * BooleanValue : one of `true` `false`\n   *\n   * NullValue : `null`\n   *\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n\n  parseValueLiteral(isConst) {\n    const token = this._lexer.token;\n\n    switch (token.kind) {\n      case TokenKind.BRACKET_L:\n        return this.parseList(isConst);\n\n      case TokenKind.BRACE_L:\n        return this.parseObject(isConst);\n\n      case TokenKind.INT:\n        this._lexer.advance();\n\n        return this.node(token, {\n          kind: Kind.INT,\n          value: token.value,\n        });\n\n      case TokenKind.FLOAT:\n        this._lexer.advance();\n\n        return this.node(token, {\n          kind: Kind.FLOAT,\n          value: token.value,\n        });\n\n      case TokenKind.STRING:\n      case TokenKind.BLOCK_STRING:\n        return this.parseStringLiteral();\n\n      case TokenKind.NAME:\n        this._lexer.advance();\n\n        switch (token.value) {\n          case 'true':\n            return this.node(token, {\n              kind: Kind.BOOLEAN,\n              value: true,\n            });\n\n          case 'false':\n            return this.node(token, {\n              kind: Kind.BOOLEAN,\n              value: false,\n            });\n\n          case 'null':\n            return this.node(token, {\n              kind: Kind.NULL,\n            });\n\n          default:\n            return this.node(token, {\n              kind: Kind.ENUM,\n              value: token.value,\n            });\n        }\n\n      case TokenKind.DOLLAR:\n        if (isConst) {\n          this.expectToken(TokenKind.DOLLAR);\n\n          if (this._lexer.token.kind === TokenKind.NAME) {\n            const varName = this._lexer.token.value;\n            throw syntaxError(\n              this._lexer.source,\n              token.start,\n              `Unexpected variable \"$${varName}\" in constant value.`,\n            );\n          } else {\n            throw this.unexpected(token);\n          }\n        }\n\n        return this.parseVariable();\n\n      default:\n        throw this.unexpected();\n    }\n  }\n\n  parseConstValueLiteral() {\n    return this.parseValueLiteral(true);\n  }\n\n  parseStringLiteral() {\n    const token = this._lexer.token;\n\n    this._lexer.advance();\n\n    return this.node(token, {\n      kind: Kind.STRING,\n      value: token.value,\n      block: token.kind === TokenKind.BLOCK_STRING,\n    });\n  }\n  /**\n   * ListValue[Const] :\n   *   - [ ]\n   *   - [ Value[?Const]+ ]\n   */\n\n  parseList(isConst) {\n    const item = () => this.parseValueLiteral(isConst);\n\n    return this.node(this._lexer.token, {\n      kind: Kind.LIST,\n      values: this.any(TokenKind.BRACKET_L, item, TokenKind.BRACKET_R),\n    });\n  }\n  /**\n   * ```\n   * ObjectValue[Const] :\n   *   - { }\n   *   - { ObjectField[?Const]+ }\n   * ```\n   */\n\n  parseObject(isConst) {\n    const item = () => this.parseObjectField(isConst);\n\n    return this.node(this._lexer.token, {\n      kind: Kind.OBJECT,\n      fields: this.any(TokenKind.BRACE_L, item, TokenKind.BRACE_R),\n    });\n  }\n  /**\n   * ObjectField[Const] : Name : Value[?Const]\n   */\n\n  parseObjectField(isConst) {\n    const start = this._lexer.token;\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return this.node(start, {\n      kind: Kind.OBJECT_FIELD,\n      name,\n      value: this.parseValueLiteral(isConst),\n    });\n  } // Implements the parsing rules in the Directives section.\n\n  /**\n   * Directives[Const] : Directive[?Const]+\n   */\n\n  parseDirectives(isConst) {\n    const directives = [];\n\n    while (this.peek(TokenKind.AT)) {\n      directives.push(this.parseDirective(isConst));\n    }\n\n    return directives;\n  }\n\n  parseConstDirectives() {\n    return this.parseDirectives(true);\n  }\n  /**\n   * ```\n   * Directive[Const] : @ Name Arguments[?Const]?\n   * ```\n   */\n\n  parseDirective(isConst) {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.AT);\n    return this.node(start, {\n      kind: Kind.DIRECTIVE,\n      name: this.parseName(),\n      arguments: this.parseArguments(isConst),\n    });\n  } // Implements the parsing rules in the Types section.\n\n  /**\n   * Type :\n   *   - NamedType\n   *   - ListType\n   *   - NonNullType\n   */\n\n  parseTypeReference() {\n    const start = this._lexer.token;\n    let type;\n\n    if (this.expectOptionalToken(TokenKind.BRACKET_L)) {\n      const innerType = this.parseTypeReference();\n      this.expectToken(TokenKind.BRACKET_R);\n      type = this.node(start, {\n        kind: Kind.LIST_TYPE,\n        type: innerType,\n      });\n    } else {\n      type = this.parseNamedType();\n    }\n\n    if (this.expectOptionalToken(TokenKind.BANG)) {\n      return this.node(start, {\n        kind: Kind.NON_NULL_TYPE,\n        type,\n      });\n    }\n\n    return type;\n  }\n  /**\n   * NamedType : Name\n   */\n\n  parseNamedType() {\n    return this.node(this._lexer.token, {\n      kind: Kind.NAMED_TYPE,\n      name: this.parseName(),\n    });\n  } // Implements the parsing rules in the Type Definition section.\n\n  peekDescription() {\n    return this.peek(TokenKind.STRING) || this.peek(TokenKind.BLOCK_STRING);\n  }\n  /**\n   * Description : StringValue\n   */\n\n  parseDescription() {\n    if (this.peekDescription()) {\n      return this.parseStringLiteral();\n    }\n  }\n  /**\n   * ```\n   * SchemaDefinition : Description? schema Directives[Const]? { OperationTypeDefinition+ }\n   * ```\n   */\n\n  parseSchemaDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('schema');\n    const directives = this.parseConstDirectives();\n    const operationTypes = this.many(\n      TokenKind.BRACE_L,\n      this.parseOperationTypeDefinition,\n      TokenKind.BRACE_R,\n    );\n    return this.node(start, {\n      kind: Kind.SCHEMA_DEFINITION,\n      description,\n      directives,\n      operationTypes,\n    });\n  }\n  /**\n   * OperationTypeDefinition : OperationType : NamedType\n   */\n\n  parseOperationTypeDefinition() {\n    const start = this._lexer.token;\n    const operation = this.parseOperationType();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseNamedType();\n    return this.node(start, {\n      kind: Kind.OPERATION_TYPE_DEFINITION,\n      operation,\n      type,\n    });\n  }\n  /**\n   * ScalarTypeDefinition : Description? scalar Name Directives[Const]?\n   */\n\n  parseScalarTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('scalar');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.SCALAR_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n    });\n  }\n  /**\n   * ObjectTypeDefinition :\n   *   Description?\n   *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?\n   */\n\n  parseObjectTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('type');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.OBJECT_TYPE_DEFINITION,\n      description,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ImplementsInterfaces :\n   *   - implements `&`? NamedType\n   *   - ImplementsInterfaces & NamedType\n   */\n\n  parseImplementsInterfaces() {\n    return this.expectOptionalKeyword('implements')\n      ? this.delimitedMany(TokenKind.AMP, this.parseNamedType)\n      : [];\n  }\n  /**\n   * ```\n   * FieldsDefinition : { FieldDefinition+ }\n   * ```\n   */\n\n  parseFieldsDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseFieldDefinition,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * FieldDefinition :\n   *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?\n   */\n\n  parseFieldDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseName();\n    const args = this.parseArgumentDefs();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseTypeReference();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.FIELD_DEFINITION,\n      description,\n      name,\n      arguments: args,\n      type,\n      directives,\n    });\n  }\n  /**\n   * ArgumentsDefinition : ( InputValueDefinition+ )\n   */\n\n  parseArgumentDefs() {\n    return this.optionalMany(\n      TokenKind.PAREN_L,\n      this.parseInputValueDef,\n      TokenKind.PAREN_R,\n    );\n  }\n  /**\n   * InputValueDefinition :\n   *   - Description? Name : Type DefaultValue? Directives[Const]?\n   */\n\n  parseInputValueDef() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseTypeReference();\n    let defaultValue;\n\n    if (this.expectOptionalToken(TokenKind.EQUALS)) {\n      defaultValue = this.parseConstValueLiteral();\n    }\n\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.INPUT_VALUE_DEFINITION,\n      description,\n      name,\n      type,\n      defaultValue,\n      directives,\n    });\n  }\n  /**\n   * InterfaceTypeDefinition :\n   *   - Description? interface Name Directives[Const]? FieldsDefinition?\n   */\n\n  parseInterfaceTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('interface');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.INTERFACE_TYPE_DEFINITION,\n      description,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * UnionTypeDefinition :\n   *   - Description? union Name Directives[Const]? UnionMemberTypes?\n   */\n\n  parseUnionTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('union');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const types = this.parseUnionMemberTypes();\n    return this.node(start, {\n      kind: Kind.UNION_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      types,\n    });\n  }\n  /**\n   * UnionMemberTypes :\n   *   - = `|`? NamedType\n   *   - UnionMemberTypes | NamedType\n   */\n\n  parseUnionMemberTypes() {\n    return this.expectOptionalToken(TokenKind.EQUALS)\n      ? this.delimitedMany(TokenKind.PIPE, this.parseNamedType)\n      : [];\n  }\n  /**\n   * EnumTypeDefinition :\n   *   - Description? enum Name Directives[Const]? EnumValuesDefinition?\n   */\n\n  parseEnumTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('enum');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const values = this.parseEnumValuesDefinition();\n    return this.node(start, {\n      kind: Kind.ENUM_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      values,\n    });\n  }\n  /**\n   * ```\n   * EnumValuesDefinition : { EnumValueDefinition+ }\n   * ```\n   */\n\n  parseEnumValuesDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseEnumValueDefinition,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * EnumValueDefinition : Description? EnumValue Directives[Const]?\n   */\n\n  parseEnumValueDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseEnumValueName();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.ENUM_VALUE_DEFINITION,\n      description,\n      name,\n      directives,\n    });\n  }\n  /**\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n\n  parseEnumValueName() {\n    if (\n      this._lexer.token.value === 'true' ||\n      this._lexer.token.value === 'false' ||\n      this._lexer.token.value === 'null'\n    ) {\n      throw syntaxError(\n        this._lexer.source,\n        this._lexer.token.start,\n        `${getTokenDesc(\n          this._lexer.token,\n        )} is reserved and cannot be used for an enum value.`,\n      );\n    }\n\n    return this.parseName();\n  }\n  /**\n   * InputObjectTypeDefinition :\n   *   - Description? input Name Directives[Const]? InputFieldsDefinition?\n   */\n\n  parseInputObjectTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('input');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseInputFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ```\n   * InputFieldsDefinition : { InputValueDefinition+ }\n   * ```\n   */\n\n  parseInputFieldsDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseInputValueDef,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * TypeSystemExtension :\n   *   - SchemaExtension\n   *   - TypeExtension\n   *\n   * TypeExtension :\n   *   - ScalarTypeExtension\n   *   - ObjectTypeExtension\n   *   - InterfaceTypeExtension\n   *   - UnionTypeExtension\n   *   - EnumTypeExtension\n   *   - InputObjectTypeDefinition\n   */\n\n  parseTypeSystemExtension() {\n    const keywordToken = this._lexer.lookahead();\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaExtension();\n\n        case 'scalar':\n          return this.parseScalarTypeExtension();\n\n        case 'type':\n          return this.parseObjectTypeExtension();\n\n        case 'interface':\n          return this.parseInterfaceTypeExtension();\n\n        case 'union':\n          return this.parseUnionTypeExtension();\n\n        case 'enum':\n          return this.parseEnumTypeExtension();\n\n        case 'input':\n          return this.parseInputObjectTypeExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  }\n  /**\n   * ```\n   * SchemaExtension :\n   *  - extend schema Directives[Const]? { OperationTypeDefinition+ }\n   *  - extend schema Directives[Const]\n   * ```\n   */\n\n  parseSchemaExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('schema');\n    const directives = this.parseConstDirectives();\n    const operationTypes = this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseOperationTypeDefinition,\n      TokenKind.BRACE_R,\n    );\n\n    if (directives.length === 0 && operationTypes.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.SCHEMA_EXTENSION,\n      directives,\n      operationTypes,\n    });\n  }\n  /**\n   * ScalarTypeExtension :\n   *   - extend scalar Name Directives[Const]\n   */\n\n  parseScalarTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('scalar');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n\n    if (directives.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.SCALAR_TYPE_EXTENSION,\n      name,\n      directives,\n    });\n  }\n  /**\n   * ObjectTypeExtension :\n   *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend type Name ImplementsInterfaces? Directives[Const]\n   *  - extend type Name ImplementsInterfaces\n   */\n\n  parseObjectTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('type');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n\n    if (\n      interfaces.length === 0 &&\n      directives.length === 0 &&\n      fields.length === 0\n    ) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.OBJECT_TYPE_EXTENSION,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * InterfaceTypeExtension :\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]\n   *  - extend interface Name ImplementsInterfaces\n   */\n\n  parseInterfaceTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('interface');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n\n    if (\n      interfaces.length === 0 &&\n      directives.length === 0 &&\n      fields.length === 0\n    ) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.INTERFACE_TYPE_EXTENSION,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * UnionTypeExtension :\n   *   - extend union Name Directives[Const]? UnionMemberTypes\n   *   - extend union Name Directives[Const]\n   */\n\n  parseUnionTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('union');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const types = this.parseUnionMemberTypes();\n\n    if (directives.length === 0 && types.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.UNION_TYPE_EXTENSION,\n      name,\n      directives,\n      types,\n    });\n  }\n  /**\n   * EnumTypeExtension :\n   *   - extend enum Name Directives[Const]? EnumValuesDefinition\n   *   - extend enum Name Directives[Const]\n   */\n\n  parseEnumTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('enum');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const values = this.parseEnumValuesDefinition();\n\n    if (directives.length === 0 && values.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.ENUM_TYPE_EXTENSION,\n      name,\n      directives,\n      values,\n    });\n  }\n  /**\n   * InputObjectTypeExtension :\n   *   - extend input Name Directives[Const]? InputFieldsDefinition\n   *   - extend input Name Directives[Const]\n   */\n\n  parseInputObjectTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('input');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseInputFieldsDefinition();\n\n    if (directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,\n      name,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ```\n   * DirectiveDefinition :\n   *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations\n   * ```\n   */\n\n  parseDirectiveDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('directive');\n    this.expectToken(TokenKind.AT);\n    const name = this.parseName();\n    const args = this.parseArgumentDefs();\n    const repeatable = this.expectOptionalKeyword('repeatable');\n    this.expectKeyword('on');\n    const locations = this.parseDirectiveLocations();\n    return this.node(start, {\n      kind: Kind.DIRECTIVE_DEFINITION,\n      description,\n      name,\n      arguments: args,\n      repeatable,\n      locations,\n    });\n  }\n  /**\n   * DirectiveLocations :\n   *   - `|`? DirectiveLocation\n   *   - DirectiveLocations | DirectiveLocation\n   */\n\n  parseDirectiveLocations() {\n    return this.delimitedMany(TokenKind.PIPE, this.parseDirectiveLocation);\n  }\n  /*\n   * DirectiveLocation :\n   *   - ExecutableDirectiveLocation\n   *   - TypeSystemDirectiveLocation\n   *\n   * ExecutableDirectiveLocation : one of\n   *   `QUERY`\n   *   `MUTATION`\n   *   `SUBSCRIPTION`\n   *   `FIELD`\n   *   `FRAGMENT_DEFINITION`\n   *   `FRAGMENT_SPREAD`\n   *   `INLINE_FRAGMENT`\n   *\n   * TypeSystemDirectiveLocation : one of\n   *   `SCHEMA`\n   *   `SCALAR`\n   *   `OBJECT`\n   *   `FIELD_DEFINITION`\n   *   `ARGUMENT_DEFINITION`\n   *   `INTERFACE`\n   *   `UNION`\n   *   `ENUM`\n   *   `ENUM_VALUE`\n   *   `INPUT_OBJECT`\n   *   `INPUT_FIELD_DEFINITION`\n   */\n\n  parseDirectiveLocation() {\n    const start = this._lexer.token;\n    const name = this.parseName();\n\n    if (Object.prototype.hasOwnProperty.call(DirectiveLocation, name.value)) {\n      return name;\n    }\n\n    throw this.unexpected(start);\n  } // Core parsing utility functions\n\n  /**\n   * Returns a node that, if configured to do so, sets a \"loc\" field as a\n   * location object, used to identify the place in the source that created a\n   * given parsed object.\n   */\n\n  node(startToken, node) {\n    var _this$_options2;\n\n    if (\n      ((_this$_options2 = this._options) === null || _this$_options2 === void 0\n        ? void 0\n        : _this$_options2.noLocation) !== true\n    ) {\n      node.loc = new Location(\n        startToken,\n        this._lexer.lastToken,\n        this._lexer.source,\n      );\n    }\n\n    return node;\n  }\n  /**\n   * Determines if the next token is of a given kind\n   */\n\n  peek(kind) {\n    return this._lexer.token.kind === kind;\n  }\n  /**\n   * If the next token is of the given kind, return that token after advancing the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n\n  expectToken(kind) {\n    const token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this._lexer.advance();\n\n      return token;\n    }\n\n    throw syntaxError(\n      this._lexer.source,\n      token.start,\n      `Expected ${getTokenKindDesc(kind)}, found ${getTokenDesc(token)}.`,\n    );\n  }\n  /**\n   * If the next token is of the given kind, return \"true\" after advancing the lexer.\n   * Otherwise, do not change the parser state and return \"false\".\n   */\n\n  expectOptionalToken(kind) {\n    const token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this._lexer.advance();\n\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * If the next token is a given keyword, advance the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n\n  expectKeyword(value) {\n    const token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this._lexer.advance();\n    } else {\n      throw syntaxError(\n        this._lexer.source,\n        token.start,\n        `Expected \"${value}\", found ${getTokenDesc(token)}.`,\n      );\n    }\n  }\n  /**\n   * If the next token is a given keyword, return \"true\" after advancing the lexer.\n   * Otherwise, do not change the parser state and return \"false\".\n   */\n\n  expectOptionalKeyword(value) {\n    const token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this._lexer.advance();\n\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Helper function for creating an error when an unexpected lexed token is encountered.\n   */\n\n  unexpected(atToken) {\n    const token =\n      atToken !== null && atToken !== void 0 ? atToken : this._lexer.token;\n    return syntaxError(\n      this._lexer.source,\n      token.start,\n      `Unexpected ${getTokenDesc(token)}.`,\n    );\n  }\n  /**\n   * Returns a possibly empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  any(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    const nodes = [];\n\n    while (!this.expectOptionalToken(closeKind)) {\n      nodes.push(parseFn.call(this));\n    }\n\n    return nodes;\n  }\n  /**\n   * Returns a list of parse nodes, determined by the parseFn.\n   * It can be empty only if open token is missing otherwise it will always return non-empty list\n   * that begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  optionalMany(openKind, parseFn, closeKind) {\n    if (this.expectOptionalToken(openKind)) {\n      const nodes = [];\n\n      do {\n        nodes.push(parseFn.call(this));\n      } while (!this.expectOptionalToken(closeKind));\n\n      return nodes;\n    }\n\n    return [];\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  many(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    const nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (!this.expectOptionalToken(closeKind));\n\n    return nodes;\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list may begin with a lex token of delimiterKind followed by items separated by lex tokens of tokenKind.\n   * Advances the parser to the next lex token after last item in the list.\n   */\n\n  delimitedMany(delimiterKind, parseFn) {\n    this.expectOptionalToken(delimiterKind);\n    const nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (this.expectOptionalToken(delimiterKind));\n\n    return nodes;\n  }\n}\n/**\n * A helper function to describe a token as a string for debugging.\n */\n\nfunction getTokenDesc(token) {\n  const value = token.value;\n  return getTokenKindDesc(token.kind) + (value != null ? ` \"${value}\"` : '');\n}\n/**\n * A helper function to describe a token kind as a string for debugging.\n */\n\nfunction getTokenKindDesc(kind) {\n  return isPunctuatorTokenKind(kind) ? `\"${kind}\"` : kind;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}