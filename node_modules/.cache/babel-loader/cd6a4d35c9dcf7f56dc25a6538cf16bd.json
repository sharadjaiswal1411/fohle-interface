{"ast":null,"code":"import { formatEther, parseEther } from '@ethersproject/units';\nexport const formatUsdPrice = price => {\n  if (price > 1000000) {\n    return `$${(price / 1000000).toFixed(1)}M`;\n  } else if (price > 1000) {\n    return `$${(price / 1000).toFixed(1)}K`;\n  } else {\n    return `$${price.toFixed(2)}`;\n  }\n};\nexport const formatEth = price => {\n  if (price > 1000000) {\n    return `${Math.round(price / 1000000)}M`;\n  } else if (price > 1000) {\n    return `${Math.round(price / 1000)}K`;\n  } else if (price < 0.001) {\n    return '<0.001';\n  } else {\n    return `${Math.round(price * 100 + Number.EPSILON) / 100}`;\n  }\n};\nexport const formatUSDPriceWithCommas = price => {\n  return `$${Math.round(price).toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}`;\n};\nexport const formatEthPrice = price => {\n  if (!price) return 0;\n  const formattedPrice = parseFloat(formatEther(String(price)));\n  return Math.round(formattedPrice * (formattedPrice >= 1 ? 100 : 1000) + Number.EPSILON) / (formattedPrice >= 1 ? 100 : 1000);\n};\n\n// Stringify the `price` anyway because the `price` is being passed as any in some places\nexport const numberToWei = amount => {\n  return parseEther(amount.toString());\n};\nexport const ethNumberStandardFormatter = function (amount) {\n  let includeDollarSign = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  let removeZeroes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  let roundToNearestWholeNumber = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  if (!amount) return '-';\n  const amountInDecimals = parseFloat(amount.toString());\n  const conditionalDollarSign = includeDollarSign ? '$' : '';\n  if (amountInDecimals <= 0) return '-';\n  if (amountInDecimals < 0.0001) return `< ${conditionalDollarSign}0.00001`;\n  if (amountInDecimals < 1) return `${conditionalDollarSign}${parseFloat(amountInDecimals.toFixed(3))}`;\n  const formattedPrice = (removeZeroes ? parseFloat(amountInDecimals.toFixed(2)) : roundToNearestWholeNumber ? Math.round(amountInDecimals) : amountInDecimals.toFixed(2)).toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n  return conditionalDollarSign + formattedPrice;\n};\nexport const formatWeiToDecimal = function (amount) {\n  let removeZeroes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  if (!amount) return '-';\n  return ethNumberStandardFormatter(formatEther(amount), false, removeZeroes, false);\n};\n\n// prevent BigNumber overflow by properly handling scientific notation and comma delimited values\nexport function wrapScientificNotation(value) {\n  return parseFloat(value.toString()).toLocaleString('fullwide', {\n    useGrouping: false\n  }).replace(',', '.').replace(' ', '');\n}","map":{"version":3,"names":["formatEther","parseEther","formatUsdPrice","price","toFixed","formatEth","Math","round","Number","EPSILON","formatUSDPriceWithCommas","toString","replace","formatEthPrice","formattedPrice","parseFloat","String","numberToWei","amount","ethNumberStandardFormatter","includeDollarSign","removeZeroes","roundToNearestWholeNumber","amountInDecimals","conditionalDollarSign","formatWeiToDecimal","wrapScientificNotation","value","toLocaleString","useGrouping"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/nft/utils/currency.ts"],"sourcesContent":["import { formatEther, parseEther } from '@ethersproject/units'\n\nexport const formatUsdPrice = (price: number) => {\n  if (price > 1000000) {\n    return `$${(price / 1000000).toFixed(1)}M`\n  } else if (price > 1000) {\n    return `$${(price / 1000).toFixed(1)}K`\n  } else {\n    return `$${price.toFixed(2)}`\n  }\n}\n\nexport const formatEth = (price: number) => {\n  if (price > 1000000) {\n    return `${Math.round(price / 1000000)}M`\n  } else if (price > 1000) {\n    return `${Math.round(price / 1000)}K`\n  } else if (price < 0.001) {\n    return '<0.001'\n  } else {\n    return `${Math.round(price * 100 + Number.EPSILON) / 100}`\n  }\n}\n\nexport const formatUSDPriceWithCommas = (price: number) => {\n  return `$${Math.round(price)\n    .toString()\n    .replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}`\n}\n\nexport const formatEthPrice = (price: string | undefined) => {\n  if (!price) return 0\n\n  const formattedPrice = parseFloat(formatEther(String(price)))\n  return (\n    Math.round(formattedPrice * (formattedPrice >= 1 ? 100 : 1000) + Number.EPSILON) /\n    (formattedPrice >= 1 ? 100 : 1000)\n  )\n}\n\n// Stringify the `price` anyway because the `price` is being passed as any in some places\nexport const numberToWei = (amount: number) => {\n  return parseEther(amount.toString())\n}\n\nexport const ethNumberStandardFormatter = (\n  amount: string | number | undefined,\n  includeDollarSign = false,\n  removeZeroes = false,\n  roundToNearestWholeNumber = false\n): string => {\n  if (!amount) return '-'\n\n  const amountInDecimals = parseFloat(amount.toString())\n  const conditionalDollarSign = includeDollarSign ? '$' : ''\n\n  if (amountInDecimals <= 0) return '-'\n  if (amountInDecimals < 0.0001) return `< ${conditionalDollarSign}0.00001`\n  if (amountInDecimals < 1) return `${conditionalDollarSign}${parseFloat(amountInDecimals.toFixed(3))}`\n  const formattedPrice = (\n    removeZeroes\n      ? parseFloat(amountInDecimals.toFixed(2))\n      : roundToNearestWholeNumber\n      ? Math.round(amountInDecimals)\n      : amountInDecimals.toFixed(2)\n  )\n    .toString()\n    .replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')\n  return conditionalDollarSign + formattedPrice\n}\n\nexport const formatWeiToDecimal = (amount: string, removeZeroes = false) => {\n  if (!amount) return '-'\n  return ethNumberStandardFormatter(formatEther(amount), false, removeZeroes, false)\n}\n\n// prevent BigNumber overflow by properly handling scientific notation and comma delimited values\nexport function wrapScientificNotation(value: string | number): string {\n  return parseFloat(value.toString())\n    .toLocaleString('fullwide', { useGrouping: false })\n    .replace(',', '.')\n    .replace(' ', '')\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}