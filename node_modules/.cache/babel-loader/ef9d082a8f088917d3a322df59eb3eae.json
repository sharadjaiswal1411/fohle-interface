{"ast":null,"code":"var _createForOfIteratorHelper = require(\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\nvar _slicedToArray = require(\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\nvar util = require('./util');\nvar abi = require('./abi');\nvar TYPED_MESSAGE_SCHEMA = {\n  type: 'object',\n  properties: {\n    types: {\n      type: 'object',\n      additionalProperties: {\n        type: 'array',\n        items: {\n          type: 'object',\n          properties: {\n            name: {\n              type: 'string'\n            },\n            type: {\n              type: 'string'\n            }\n          },\n          required: ['name', 'type']\n        }\n      }\n    },\n    primaryType: {\n      type: 'string'\n    },\n    domain: {\n      type: 'object'\n    },\n    message: {\n      type: 'object'\n    }\n  },\n  required: ['types', 'primaryType', 'domain', 'message']\n};\n\n/**\n * A collection of utility functions used for signing typed data\n */\nvar TypedDataUtils = {\n  /**\n   * Encodes an object by encoding and concatenating each of its members\n   *\n   * @param {string} primaryType - Root type\n   * @param {Object} data - Object to encode\n   * @param {Object} types - Type definitions\n   * @returns {string} - Encoded representation of an object\n   */\n  encodeData: function encodeData(primaryType, data, types) {\n    var _this = this;\n    var useV4 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    var encodedTypes = ['bytes32'];\n    var encodedValues = [this.hashType(primaryType, types)];\n    if (useV4) {\n      var encodeField = function encodeField(name, type, value) {\n        if (types[type] !== undefined) {\n          return ['bytes32', value == null ? '0x0000000000000000000000000000000000000000000000000000000000000000' : util.keccak(_this.encodeData(type, value, types, useV4))];\n        }\n        if (value === undefined) throw new Error(\"missing value for field \".concat(name, \" of type \").concat(type));\n        if (type === 'bytes') {\n          return ['bytes32', util.keccak(value)];\n        }\n        if (type === 'string') {\n          // convert string to buffer - prevents ethUtil from interpreting strings like '0xabcd' as hex\n          if (typeof value === 'string') {\n            value = Buffer.from(value, 'utf8');\n          }\n          return ['bytes32', util.keccak(value)];\n        }\n        if (type.lastIndexOf(']') === type.length - 1) {\n          var parsedType = type.slice(0, type.lastIndexOf('['));\n          var typeValuePairs = value.map(function (item) {\n            return encodeField(name, parsedType, item);\n          });\n          return ['bytes32', util.keccak(abi.rawEncode(typeValuePairs.map(function (_ref) {\n            var _ref2 = _slicedToArray(_ref, 1),\n              type = _ref2[0];\n            return type;\n          }), typeValuePairs.map(function (_ref3) {\n            var _ref4 = _slicedToArray(_ref3, 2),\n              value = _ref4[1];\n            return value;\n          })))];\n        }\n        return [type, value];\n      };\n      var _iterator = _createForOfIteratorHelper(types[primaryType]),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var field = _step.value;\n          var _encodeField = encodeField(field.name, field.type, data[field.name]),\n            _encodeField2 = _slicedToArray(_encodeField, 2),\n            type = _encodeField2[0],\n            value = _encodeField2[1];\n          encodedTypes.push(type);\n          encodedValues.push(value);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    } else {\n      var _iterator2 = _createForOfIteratorHelper(types[primaryType]),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _field = _step2.value;\n          var _value = data[_field.name];\n          if (_value !== undefined) {\n            if (_field.type === 'bytes') {\n              encodedTypes.push('bytes32');\n              _value = util.keccak(_value);\n              encodedValues.push(_value);\n            } else if (_field.type === 'string') {\n              encodedTypes.push('bytes32');\n              // convert string to buffer - prevents ethUtil from interpreting strings like '0xabcd' as hex\n              if (typeof _value === 'string') {\n                _value = Buffer.from(_value, 'utf8');\n              }\n              _value = util.keccak(_value);\n              encodedValues.push(_value);\n            } else if (types[_field.type] !== undefined) {\n              encodedTypes.push('bytes32');\n              _value = util.keccak(this.encodeData(_field.type, _value, types, useV4));\n              encodedValues.push(_value);\n            } else if (_field.type.lastIndexOf(']') === _field.type.length - 1) {\n              throw new Error('Arrays currently unimplemented in encodeData');\n            } else {\n              encodedTypes.push(_field.type);\n              encodedValues.push(_value);\n            }\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n    return abi.rawEncode(encodedTypes, encodedValues);\n  },\n  /**\n   * Encodes the type of an object by encoding a comma delimited list of its members\n   *\n   * @param {string} primaryType - Root type to encode\n   * @param {Object} types - Type definitions\n   * @returns {string} - Encoded representation of the type of an object\n   */\n  encodeType: function encodeType(primaryType, types) {\n    var result = '';\n    var deps = this.findTypeDependencies(primaryType, types).filter(function (dep) {\n      return dep !== primaryType;\n    });\n    deps = [primaryType].concat(deps.sort());\n    var _iterator3 = _createForOfIteratorHelper(deps),\n      _step3;\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var type = _step3.value;\n        var children = types[type];\n        if (!children) {\n          throw new Error('No type definition specified: ' + type);\n        }\n        result += type + '(' + types[type].map(function (_ref5) {\n          var name = _ref5.name,\n            type = _ref5.type;\n          return type + ' ' + name;\n        }).join(',') + ')';\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n    return result;\n  },\n  /**\n   * Finds all types within a type defintion object\n   *\n   * @param {string} primaryType - Root type\n   * @param {Object} types - Type definitions\n   * @param {Array} results - current set of accumulated types\n   * @returns {Array} - Set of all types found in the type definition\n   */\n  findTypeDependencies: function findTypeDependencies(primaryType, types) {\n    var results = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    primaryType = primaryType.match(/^\\w*/)[0];\n    if (results.includes(primaryType) || types[primaryType] === undefined) {\n      return results;\n    }\n    results.push(primaryType);\n    var _iterator4 = _createForOfIteratorHelper(types[primaryType]),\n      _step4;\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        var field = _step4.value;\n        var _iterator5 = _createForOfIteratorHelper(this.findTypeDependencies(field.type, types, results)),\n          _step5;\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var dep = _step5.value;\n            !results.includes(dep) && results.push(dep);\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n    return results;\n  },\n  /**\n   * Hashes an object\n   *\n   * @param {string} primaryType - Root type\n   * @param {Object} data - Object to hash\n   * @param {Object} types - Type definitions\n   * @returns {Buffer} - Hash of an object\n   */\n  hashStruct: function hashStruct(primaryType, data, types) {\n    var useV4 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    return util.keccak(this.encodeData(primaryType, data, types, useV4));\n  },\n  /**\n   * Hashes the type of an object\n   *\n   * @param {string} primaryType - Root type to hash\n   * @param {Object} types - Type definitions\n   * @returns {string} - Hash of an object\n   */\n  hashType: function hashType(primaryType, types) {\n    return util.keccak(this.encodeType(primaryType, types));\n  },\n  /**\n   * Removes properties from a message object that are not defined per EIP-712\n   *\n   * @param {Object} data - typed message object\n   * @returns {Object} - typed message object with only allowed fields\n   */\n  sanitizeData: function sanitizeData(data) {\n    var sanitizedData = {};\n    for (var key in TYPED_MESSAGE_SCHEMA.properties) {\n      data[key] && (sanitizedData[key] = data[key]);\n    }\n    if (sanitizedData.types) {\n      sanitizedData.types = Object.assign({\n        EIP712Domain: []\n      }, sanitizedData.types);\n    }\n    return sanitizedData;\n  },\n  /**\n   * Returns the hash of a typed message as per EIP-712 for signing\n   *\n   * @param {Object} typedData - Types message data to sign\n   * @returns {string} - sha3 hash for signing\n   */\n  hash: function hash(typedData) {\n    var useV4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    var sanitizedData = this.sanitizeData(typedData);\n    var parts = [Buffer.from('1901', 'hex')];\n    parts.push(this.hashStruct('EIP712Domain', sanitizedData.domain, sanitizedData.types, useV4));\n    if (sanitizedData.primaryType !== 'EIP712Domain') {\n      parts.push(this.hashStruct(sanitizedData.primaryType, sanitizedData.message, sanitizedData.types, useV4));\n    }\n    return util.keccak(Buffer.concat(parts));\n  }\n};\nmodule.exports = {\n  TYPED_MESSAGE_SCHEMA: TYPED_MESSAGE_SCHEMA,\n  TypedDataUtils: TypedDataUtils,\n  hashForSignTypedDataLegacy: function hashForSignTypedDataLegacy(msgParams) {\n    return typedSignatureHashLegacy(msgParams.data);\n  },\n  hashForSignTypedData_v3: function hashForSignTypedData_v3(msgParams) {\n    return TypedDataUtils.hash(msgParams.data, false);\n  },\n  hashForSignTypedData_v4: function hashForSignTypedData_v4(msgParams) {\n    return TypedDataUtils.hash(msgParams.data);\n  }\n};\n\n/**\n * @param typedData - Array of data along with types, as per EIP712.\n * @returns Buffer\n */\nfunction typedSignatureHashLegacy(typedData) {\n  var error = new Error('Expect argument to be non-empty array');\n  if (typeof typedData !== 'object' || !typedData.length) throw error;\n  var data = typedData.map(function (e) {\n    return e.type === 'bytes' ? util.toBuffer(e.value) : e.value;\n  });\n  var types = typedData.map(function (e) {\n    return e.type;\n  });\n  var schema = typedData.map(function (e) {\n    if (!e.name) throw error;\n    return e.type + ' ' + e.name;\n  });\n  return abi.soliditySHA3(['bytes32', 'bytes32'], [abi.soliditySHA3(new Array(typedData.length).fill('string'), schema), abi.soliditySHA3(types, data)]);\n}","map":{"version":3,"names":["util","require","abi","TYPED_MESSAGE_SCHEMA","type","properties","types","additionalProperties","items","name","required","primaryType","domain","message","TypedDataUtils","encodeData","data","useV4","encodedTypes","encodedValues","hashType","encodeField","value","undefined","keccak","Error","Buffer","from","lastIndexOf","length","parsedType","slice","typeValuePairs","map","item","rawEncode","field","push","encodeType","result","deps","findTypeDependencies","filter","dep","concat","sort","children","join","results","match","includes","hashStruct","sanitizeData","sanitizedData","key","Object","assign","EIP712Domain","hash","typedData","parts","module","exports","hashForSignTypedDataLegacy","msgParams","typedSignatureHashLegacy","hashForSignTypedData_v3","hashForSignTypedData_v4","error","e","toBuffer","schema","soliditySHA3","Array","fill"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/@coinbase/wallet-sdk/dist/vendor-js/eth-eip712-util/index.js"],"sourcesContent":["const util = require('./util')\nconst abi = require('./abi')\n\nconst TYPED_MESSAGE_SCHEMA = {\n  type: 'object',\n  properties: {\n    types: {\n      type: 'object',\n      additionalProperties: {\n        type: 'array',\n        items: {\n          type: 'object',\n          properties: {\n            name: {type: 'string'},\n            type: {type: 'string'},\n          },\n          required: ['name', 'type'],\n        },\n      },\n    },\n    primaryType: {type: 'string'},\n    domain: {type: 'object'},\n    message: {type: 'object'},\n  },\n  required: ['types', 'primaryType', 'domain', 'message'],\n}\n\n/**\n * A collection of utility functions used for signing typed data\n */\nconst TypedDataUtils = {\n  /**\n   * Encodes an object by encoding and concatenating each of its members\n   *\n   * @param {string} primaryType - Root type\n   * @param {Object} data - Object to encode\n   * @param {Object} types - Type definitions\n   * @returns {string} - Encoded representation of an object\n   */\n  encodeData (primaryType, data, types, useV4 = true) {\n    const encodedTypes = ['bytes32']\n    const encodedValues = [this.hashType(primaryType, types)]\n\n    if(useV4) {\n      const encodeField = (name, type, value) => {\n        if (types[type] !== undefined) {\n          return ['bytes32', value == null ?\n            '0x0000000000000000000000000000000000000000000000000000000000000000' :\n            util.keccak(this.encodeData(type, value, types, useV4))]\n        }\n\n        if(value === undefined)\n          throw new Error(`missing value for field ${name} of type ${type}`)\n\n        if (type === 'bytes') {\n          return ['bytes32', util.keccak(value)]\n        }\n\n        if (type === 'string') {\n          // convert string to buffer - prevents ethUtil from interpreting strings like '0xabcd' as hex\n          if (typeof value === 'string') {\n            value = Buffer.from(value, 'utf8')\n          }\n          return ['bytes32', util.keccak(value)]\n        }\n\n        if (type.lastIndexOf(']') === type.length - 1) {\n          const parsedType = type.slice(0, type.lastIndexOf('['))\n          const typeValuePairs = value.map(item =>\n            encodeField(name, parsedType, item))\n          return ['bytes32', util.keccak(abi.rawEncode(\n            typeValuePairs.map(([type]) => type),\n            typeValuePairs.map(([, value]) => value),\n          ))]\n        }\n\n        return [type, value]\n      }\n\n      for (const field of types[primaryType]) {\n        const [type, value] = encodeField(field.name, field.type, data[field.name])\n        encodedTypes.push(type)\n        encodedValues.push(value)\n      }\n    } else {\n      for (const field of types[primaryType]) {\n        let value = data[field.name]\n        if (value !== undefined) {\n          if (field.type === 'bytes') {\n            encodedTypes.push('bytes32')\n            value = util.keccak(value)\n            encodedValues.push(value)\n          } else if (field.type === 'string') {\n            encodedTypes.push('bytes32')\n            // convert string to buffer - prevents ethUtil from interpreting strings like '0xabcd' as hex\n            if (typeof value === 'string') {\n              value = Buffer.from(value, 'utf8')\n            }\n            value = util.keccak(value)\n            encodedValues.push(value)\n          } else if (types[field.type] !== undefined) {\n            encodedTypes.push('bytes32')\n            value = util.keccak(this.encodeData(field.type, value, types, useV4))\n            encodedValues.push(value)\n          } else if (field.type.lastIndexOf(']') === field.type.length - 1) {\n            throw new Error('Arrays currently unimplemented in encodeData')\n          } else {\n            encodedTypes.push(field.type)\n            encodedValues.push(value)\n          }\n        }\n      }\n    }\n\n    return abi.rawEncode(encodedTypes, encodedValues)\n  },\n\n  /**\n   * Encodes the type of an object by encoding a comma delimited list of its members\n   *\n   * @param {string} primaryType - Root type to encode\n   * @param {Object} types - Type definitions\n   * @returns {string} - Encoded representation of the type of an object\n   */\n  encodeType (primaryType, types) {\n    let result = ''\n    let deps = this.findTypeDependencies(primaryType, types).filter(dep => dep !== primaryType)\n    deps = [primaryType].concat(deps.sort())\n    for (const type of deps) {\n      const children = types[type]\n      if (!children) {\n        throw new Error('No type definition specified: ' + type)\n      }\n      result += type + '(' + types[type].map(({ name, type }) => type + ' ' + name).join(',') + ')'\n    }\n    return result\n  },\n\n  /**\n   * Finds all types within a type defintion object\n   *\n   * @param {string} primaryType - Root type\n   * @param {Object} types - Type definitions\n   * @param {Array} results - current set of accumulated types\n   * @returns {Array} - Set of all types found in the type definition\n   */\n  findTypeDependencies (primaryType, types, results = []) {\n    primaryType = primaryType.match(/^\\w*/)[0]\n    if (results.includes(primaryType) || types[primaryType] === undefined) { return results }\n    results.push(primaryType)\n    for (const field of types[primaryType]) {\n      for (const dep of this.findTypeDependencies(field.type, types, results)) {\n        !results.includes(dep) && results.push(dep)\n      }\n    }\n    return results\n  },\n\n  /**\n   * Hashes an object\n   *\n   * @param {string} primaryType - Root type\n   * @param {Object} data - Object to hash\n   * @param {Object} types - Type definitions\n   * @returns {Buffer} - Hash of an object\n   */\n  hashStruct (primaryType, data, types, useV4 = true) {\n    return util.keccak(this.encodeData(primaryType, data, types, useV4))\n  },\n\n  /**\n   * Hashes the type of an object\n   *\n   * @param {string} primaryType - Root type to hash\n   * @param {Object} types - Type definitions\n   * @returns {string} - Hash of an object\n   */\n  hashType (primaryType, types) {\n    return util.keccak(this.encodeType(primaryType, types))\n  },\n\n  /**\n   * Removes properties from a message object that are not defined per EIP-712\n   *\n   * @param {Object} data - typed message object\n   * @returns {Object} - typed message object with only allowed fields\n   */\n  sanitizeData (data) {\n    const sanitizedData = {}\n    for (const key in TYPED_MESSAGE_SCHEMA.properties) {\n      data[key] && (sanitizedData[key] = data[key])\n    }\n    if (sanitizedData.types) {\n      sanitizedData.types = Object.assign({ EIP712Domain: [] }, sanitizedData.types)\n    }\n    return sanitizedData\n  },\n\n  /**\n   * Returns the hash of a typed message as per EIP-712 for signing\n   *\n   * @param {Object} typedData - Types message data to sign\n   * @returns {string} - sha3 hash for signing\n   */\n  hash (typedData, useV4 = true) {\n    const sanitizedData = this.sanitizeData(typedData)\n    const parts = [Buffer.from('1901', 'hex')]\n    parts.push(this.hashStruct('EIP712Domain', sanitizedData.domain, sanitizedData.types, useV4))\n    if (sanitizedData.primaryType !== 'EIP712Domain') {\n      parts.push(this.hashStruct(sanitizedData.primaryType, sanitizedData.message, sanitizedData.types, useV4))\n    }\n    return util.keccak(Buffer.concat(parts))\n  },\n}\n\nmodule.exports = {\n  TYPED_MESSAGE_SCHEMA,\n  TypedDataUtils,\n\n  hashForSignTypedDataLegacy: function (msgParams) {\n    return typedSignatureHashLegacy(msgParams.data)\n  },\n\n  hashForSignTypedData_v3: function (msgParams) {\n    return TypedDataUtils.hash(msgParams.data, false)\n  },\n\n  hashForSignTypedData_v4: function (msgParams) {\n    return TypedDataUtils.hash(msgParams.data)\n  },\n}\n\n/**\n * @param typedData - Array of data along with types, as per EIP712.\n * @returns Buffer\n */\nfunction typedSignatureHashLegacy(typedData) {\n  const error = new Error('Expect argument to be non-empty array')\n  if (typeof typedData !== 'object' || !typedData.length) throw error\n\n  const data = typedData.map(function (e) {\n    return e.type === 'bytes' ? util.toBuffer(e.value) : e.value\n  })\n  const types = typedData.map(function (e) { return e.type })\n  const schema = typedData.map(function (e) {\n    if (!e.name) throw error\n    return e.type + ' ' + e.name\n  })\n\n  return abi.soliditySHA3(\n    ['bytes32', 'bytes32'],\n    [\n      abi.soliditySHA3(new Array(typedData.length).fill('string'), schema),\n      abi.soliditySHA3(types, data)\n    ]\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}