{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst code_1 = require(\"../code\");\nconst codegen_1 = require(\"../../compile/codegen\");\nconst util_1 = require(\"../../compile/util\");\nconst error = {\n  message: _ref => {\n    let {\n      params: {\n        missingProperty\n      }\n    } = _ref;\n    return (0, codegen_1.str)`must have required property '${missingProperty}'`;\n  },\n  params: _ref2 => {\n    let {\n      params: {\n        missingProperty\n      }\n    } = _ref2;\n    return (0, codegen_1._)`{missingProperty: ${missingProperty}}`;\n  }\n};\nconst def = {\n  keyword: \"required\",\n  type: \"object\",\n  schemaType: \"array\",\n  $data: true,\n  error,\n  code(cxt) {\n    const {\n      gen,\n      schema,\n      schemaCode,\n      data,\n      $data,\n      it\n    } = cxt;\n    const {\n      opts\n    } = it;\n    if (!$data && schema.length === 0) return;\n    const useLoop = schema.length >= opts.loopRequired;\n    if (it.allErrors) allErrorsMode();else exitOnErrorMode();\n    if (opts.strictRequired) {\n      const props = cxt.parentSchema.properties;\n      const {\n        definedProperties\n      } = cxt.it;\n      for (const requiredKey of schema) {\n        if ((props === null || props === void 0 ? void 0 : props[requiredKey]) === undefined && !definedProperties.has(requiredKey)) {\n          const schemaPath = it.schemaEnv.baseId + it.errSchemaPath;\n          const msg = `required property \"${requiredKey}\" is not defined at \"${schemaPath}\" (strictRequired)`;\n          (0, util_1.checkStrictMode)(it, msg, it.opts.strictRequired);\n        }\n      }\n    }\n    function allErrorsMode() {\n      if (useLoop || $data) {\n        cxt.block$data(codegen_1.nil, loopAllRequired);\n      } else {\n        for (const prop of schema) {\n          (0, code_1.checkReportMissingProp)(cxt, prop);\n        }\n      }\n    }\n    function exitOnErrorMode() {\n      const missing = gen.let(\"missing\");\n      if (useLoop || $data) {\n        const valid = gen.let(\"valid\", true);\n        cxt.block$data(valid, () => loopUntilMissing(missing, valid));\n        cxt.ok(valid);\n      } else {\n        gen.if((0, code_1.checkMissingProp)(cxt, schema, missing));\n        (0, code_1.reportMissingProp)(cxt, missing);\n        gen.else();\n      }\n    }\n    function loopAllRequired() {\n      gen.forOf(\"prop\", schemaCode, prop => {\n        cxt.setParams({\n          missingProperty: prop\n        });\n        gen.if((0, code_1.noPropertyInData)(gen, data, prop, opts.ownProperties), () => cxt.error());\n      });\n    }\n    function loopUntilMissing(missing, valid) {\n      cxt.setParams({\n        missingProperty: missing\n      });\n      gen.forOf(missing, schemaCode, () => {\n        gen.assign(valid, (0, code_1.propertyInData)(gen, data, missing, opts.ownProperties));\n        gen.if((0, codegen_1.not)(valid), () => {\n          cxt.error();\n          gen.break();\n        });\n      }, codegen_1.nil);\n    }\n  }\n};\nexports.default = def;","map":{"version":3,"sources":["../../../lib/vocabularies/validation/required.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst code_1 = require(\"../code\");\nconst codegen_1 = require(\"../../compile/codegen\");\nconst util_1 = require(\"../../compile/util\");\nconst error = {\n    message: ({ params: { missingProperty } }) => (0, codegen_1.str) `must have required property '${missingProperty}'`,\n    params: ({ params: { missingProperty } }) => (0, codegen_1._) `{missingProperty: ${missingProperty}}`,\n};\nconst def = {\n    keyword: \"required\",\n    type: \"object\",\n    schemaType: \"array\",\n    $data: true,\n    error,\n    code(cxt) {\n        const { gen, schema, schemaCode, data, $data, it } = cxt;\n        const { opts } = it;\n        if (!$data && schema.length === 0)\n            return;\n        const useLoop = schema.length >= opts.loopRequired;\n        if (it.allErrors)\n            allErrorsMode();\n        else\n            exitOnErrorMode();\n        if (opts.strictRequired) {\n            const props = cxt.parentSchema.properties;\n            const { definedProperties } = cxt.it;\n            for (const requiredKey of schema) {\n                if ((props === null || props === void 0 ? void 0 : props[requiredKey]) === undefined && !definedProperties.has(requiredKey)) {\n                    const schemaPath = it.schemaEnv.baseId + it.errSchemaPath;\n                    const msg = `required property \"${requiredKey}\" is not defined at \"${schemaPath}\" (strictRequired)`;\n                    (0, util_1.checkStrictMode)(it, msg, it.opts.strictRequired);\n                }\n            }\n        }\n        function allErrorsMode() {\n            if (useLoop || $data) {\n                cxt.block$data(codegen_1.nil, loopAllRequired);\n            }\n            else {\n                for (const prop of schema) {\n                    (0, code_1.checkReportMissingProp)(cxt, prop);\n                }\n            }\n        }\n        function exitOnErrorMode() {\n            const missing = gen.let(\"missing\");\n            if (useLoop || $data) {\n                const valid = gen.let(\"valid\", true);\n                cxt.block$data(valid, () => loopUntilMissing(missing, valid));\n                cxt.ok(valid);\n            }\n            else {\n                gen.if((0, code_1.checkMissingProp)(cxt, schema, missing));\n                (0, code_1.reportMissingProp)(cxt, missing);\n                gen.else();\n            }\n        }\n        function loopAllRequired() {\n            gen.forOf(\"prop\", schemaCode, (prop) => {\n                cxt.setParams({ missingProperty: prop });\n                gen.if((0, code_1.noPropertyInData)(gen, data, prop, opts.ownProperties), () => cxt.error());\n            });\n        }\n        function loopUntilMissing(missing, valid) {\n            cxt.setParams({ missingProperty: missing });\n            gen.forOf(missing, schemaCode, () => {\n                gen.assign(valid, (0, code_1.propertyInData)(gen, data, missing, opts.ownProperties));\n                gen.if((0, codegen_1.not)(valid), () => {\n                    cxt.error();\n                    gen.break();\n                });\n            }, codegen_1.nil);\n        }\n    },\n};\nexports.default = def;\n//# sourceMappingURL=required.js.map"]},"metadata":{},"sourceType":"script"}