{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.extendSubschemaMode = exports.extendSubschemaData = exports.getSubschema = void 0;\nconst codegen_1 = require(\"../codegen\");\nconst util_1 = require(\"../util\");\nfunction getSubschema(it, _ref) {\n  let {\n    keyword,\n    schemaProp,\n    schema,\n    schemaPath,\n    errSchemaPath,\n    topSchemaRef\n  } = _ref;\n  if (keyword !== undefined && schema !== undefined) {\n    throw new Error('both \"keyword\" and \"schema\" passed, only one allowed');\n  }\n  if (keyword !== undefined) {\n    const sch = it.schema[keyword];\n    return schemaProp === undefined ? {\n      schema: sch,\n      schemaPath: (0, codegen_1._)`${it.schemaPath}${(0, codegen_1.getProperty)(keyword)}`,\n      errSchemaPath: `${it.errSchemaPath}/${keyword}`\n    } : {\n      schema: sch[schemaProp],\n      schemaPath: (0, codegen_1._)`${it.schemaPath}${(0, codegen_1.getProperty)(keyword)}${(0, codegen_1.getProperty)(schemaProp)}`,\n      errSchemaPath: `${it.errSchemaPath}/${keyword}/${(0, util_1.escapeFragment)(schemaProp)}`\n    };\n  }\n  if (schema !== undefined) {\n    if (schemaPath === undefined || errSchemaPath === undefined || topSchemaRef === undefined) {\n      throw new Error('\"schemaPath\", \"errSchemaPath\" and \"topSchemaRef\" are required with \"schema\"');\n    }\n    return {\n      schema,\n      schemaPath,\n      topSchemaRef,\n      errSchemaPath\n    };\n  }\n  throw new Error('either \"keyword\" or \"schema\" must be passed');\n}\nexports.getSubschema = getSubschema;\nfunction extendSubschemaData(subschema, it, _ref2) {\n  let {\n    dataProp,\n    dataPropType: dpType,\n    data,\n    dataTypes,\n    propertyName\n  } = _ref2;\n  if (data !== undefined && dataProp !== undefined) {\n    throw new Error('both \"data\" and \"dataProp\" passed, only one allowed');\n  }\n  const {\n    gen\n  } = it;\n  if (dataProp !== undefined) {\n    const {\n      errorPath,\n      dataPathArr,\n      opts\n    } = it;\n    const nextData = gen.let(\"data\", (0, codegen_1._)`${it.data}${(0, codegen_1.getProperty)(dataProp)}`, true);\n    dataContextProps(nextData);\n    subschema.errorPath = (0, codegen_1.str)`${errorPath}${(0, util_1.getErrorPath)(dataProp, dpType, opts.jsPropertySyntax)}`;\n    subschema.parentDataProperty = (0, codegen_1._)`${dataProp}`;\n    subschema.dataPathArr = [...dataPathArr, subschema.parentDataProperty];\n  }\n  if (data !== undefined) {\n    const nextData = data instanceof codegen_1.Name ? data : gen.let(\"data\", data, true); // replaceable if used once?\n    dataContextProps(nextData);\n    if (propertyName !== undefined) subschema.propertyName = propertyName;\n    // TODO something is possibly wrong here with not changing parentDataProperty and not appending dataPathArr\n  }\n\n  if (dataTypes) subschema.dataTypes = dataTypes;\n  function dataContextProps(_nextData) {\n    subschema.data = _nextData;\n    subschema.dataLevel = it.dataLevel + 1;\n    subschema.dataTypes = [];\n    it.definedProperties = new Set();\n    subschema.parentData = it.data;\n    subschema.dataNames = [...it.dataNames, _nextData];\n  }\n}\nexports.extendSubschemaData = extendSubschemaData;\nfunction extendSubschemaMode(subschema, _ref3) {\n  let {\n    jtdDiscriminator,\n    jtdMetadata,\n    compositeRule,\n    createErrors,\n    allErrors\n  } = _ref3;\n  if (compositeRule !== undefined) subschema.compositeRule = compositeRule;\n  if (createErrors !== undefined) subschema.createErrors = createErrors;\n  if (allErrors !== undefined) subschema.allErrors = allErrors;\n  subschema.jtdDiscriminator = jtdDiscriminator; // not inherited\n  subschema.jtdMetadata = jtdMetadata; // not inherited\n}\n\nexports.extendSubschemaMode = extendSubschemaMode;","map":{"version":3,"sources":["../../../lib/compile/validate/subschema.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.extendSubschemaMode = exports.extendSubschemaData = exports.getSubschema = void 0;\nconst codegen_1 = require(\"../codegen\");\nconst util_1 = require(\"../util\");\nfunction getSubschema(it, { keyword, schemaProp, schema, schemaPath, errSchemaPath, topSchemaRef }) {\n    if (keyword !== undefined && schema !== undefined) {\n        throw new Error('both \"keyword\" and \"schema\" passed, only one allowed');\n    }\n    if (keyword !== undefined) {\n        const sch = it.schema[keyword];\n        return schemaProp === undefined\n            ? {\n                schema: sch,\n                schemaPath: (0, codegen_1._) `${it.schemaPath}${(0, codegen_1.getProperty)(keyword)}`,\n                errSchemaPath: `${it.errSchemaPath}/${keyword}`,\n            }\n            : {\n                schema: sch[schemaProp],\n                schemaPath: (0, codegen_1._) `${it.schemaPath}${(0, codegen_1.getProperty)(keyword)}${(0, codegen_1.getProperty)(schemaProp)}`,\n                errSchemaPath: `${it.errSchemaPath}/${keyword}/${(0, util_1.escapeFragment)(schemaProp)}`,\n            };\n    }\n    if (schema !== undefined) {\n        if (schemaPath === undefined || errSchemaPath === undefined || topSchemaRef === undefined) {\n            throw new Error('\"schemaPath\", \"errSchemaPath\" and \"topSchemaRef\" are required with \"schema\"');\n        }\n        return {\n            schema,\n            schemaPath,\n            topSchemaRef,\n            errSchemaPath,\n        };\n    }\n    throw new Error('either \"keyword\" or \"schema\" must be passed');\n}\nexports.getSubschema = getSubschema;\nfunction extendSubschemaData(subschema, it, { dataProp, dataPropType: dpType, data, dataTypes, propertyName }) {\n    if (data !== undefined && dataProp !== undefined) {\n        throw new Error('both \"data\" and \"dataProp\" passed, only one allowed');\n    }\n    const { gen } = it;\n    if (dataProp !== undefined) {\n        const { errorPath, dataPathArr, opts } = it;\n        const nextData = gen.let(\"data\", (0, codegen_1._) `${it.data}${(0, codegen_1.getProperty)(dataProp)}`, true);\n        dataContextProps(nextData);\n        subschema.errorPath = (0, codegen_1.str) `${errorPath}${(0, util_1.getErrorPath)(dataProp, dpType, opts.jsPropertySyntax)}`;\n        subschema.parentDataProperty = (0, codegen_1._) `${dataProp}`;\n        subschema.dataPathArr = [...dataPathArr, subschema.parentDataProperty];\n    }\n    if (data !== undefined) {\n        const nextData = data instanceof codegen_1.Name ? data : gen.let(\"data\", data, true); // replaceable if used once?\n        dataContextProps(nextData);\n        if (propertyName !== undefined)\n            subschema.propertyName = propertyName;\n        // TODO something is possibly wrong here with not changing parentDataProperty and not appending dataPathArr\n    }\n    if (dataTypes)\n        subschema.dataTypes = dataTypes;\n    function dataContextProps(_nextData) {\n        subschema.data = _nextData;\n        subschema.dataLevel = it.dataLevel + 1;\n        subschema.dataTypes = [];\n        it.definedProperties = new Set();\n        subschema.parentData = it.data;\n        subschema.dataNames = [...it.dataNames, _nextData];\n    }\n}\nexports.extendSubschemaData = extendSubschemaData;\nfunction extendSubschemaMode(subschema, { jtdDiscriminator, jtdMetadata, compositeRule, createErrors, allErrors }) {\n    if (compositeRule !== undefined)\n        subschema.compositeRule = compositeRule;\n    if (createErrors !== undefined)\n        subschema.createErrors = createErrors;\n    if (allErrors !== undefined)\n        subschema.allErrors = allErrors;\n    subschema.jtdDiscriminator = jtdDiscriminator; // not inherited\n    subschema.jtdMetadata = jtdMetadata; // not inherited\n}\nexports.extendSubschemaMode = extendSubschemaMode;\n//# sourceMappingURL=subschema.js.map"]},"metadata":{},"sourceType":"script"}