{"ast":null,"code":"var _s = $RefreshSig$();\nimport { Trans } from \"@lingui/react\";\nimport { i18n } from \"@lingui/core\";\nimport { sendAnalyticsEvent } from '@uniswap/analytics';\nimport { EventName } from '@uniswap/analytics-events';\nimport { formatSwapSignedAnalyticsEventProperties } from 'lib/utils/analytics';\nimport { useMemo } from 'react';\nimport { calculateGasMargin } from 'utils/calculateGasMargin';\nimport isZero from 'utils/isZero';\nimport { swapErrorToUserReadableMessage } from 'utils/swapErrorToUserReadableMessage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass InvalidSwapError extends Error {}\n\n// returns a function that will execute a swap, if the parameters are all valid\nexport default function useSendSwapTransaction(account, chainId, provider, trade,\n// trade to execute, required\nswapCalls) {\n  _s();\n  return useMemo(() => {\n    if (!trade || !provider || !account || !chainId) {\n      return {\n        callback: null\n      };\n    }\n    console.log('swapCallsswapCalls', swapCalls);\n    return {\n      callback: async function onSwap() {\n        const estimatedCalls = await Promise.all(swapCalls.map(call => {\n          const {\n            address,\n            calldata,\n            value\n          } = call;\n          const tx = !value || isZero(value) ? {\n            from: account,\n            to: address,\n            data: calldata\n          } : {\n            from: account,\n            to: address,\n            data: calldata,\n            value\n          };\n          return provider.estimateGas(tx).then(gasEstimate => {\n            return {\n              call,\n              gasEstimate\n            };\n          }).catch(gasError => {\n            console.debug('Gas estimate failed, trying eth_call to extract error', call);\n            return provider.call(tx).then(result => {\n              console.debug('Unexpected successful call after failed estimate gas', call, gasError, result);\n              return {\n                call,\n                error: /*#__PURE__*/_jsxDEV(Trans, {\n                  id: \"Unexpected issue with estimating the gas. Please try again.\"\n                }, void 0, false, void 0, this)\n              };\n            }).catch(callError => {\n              alert(5);\n              console.debug('Call threw error', call, callError);\n              return {\n                call,\n                error: swapErrorToUserReadableMessage(callError)\n              };\n            });\n          });\n        }));\n\n        // a successful estimation is a bignumber gas estimate and the next call is also a bignumber gas estimate\n        let bestCallOption = estimatedCalls.find((el, ix, list) => 'gasEstimate' in el && (ix === list.length - 1 || 'gasEstimate' in list[ix + 1]));\n\n        // check if any calls errored with a recognizable error\n        if (!bestCallOption) {\n          const errorCalls = estimatedCalls.filter(call => 'error' in call);\n          if (errorCalls.length > 0) throw errorCalls[errorCalls.length - 1].error;\n          const firstNoErrorCall = estimatedCalls.find(call => !('error' in call));\n          if (!firstNoErrorCall) throw new Error( /*i18n*/i18n._(\"Unexpected error. Could not estimate gas for the swap.\"));\n          bestCallOption = firstNoErrorCall;\n        }\n        const {\n          call: {\n            address,\n            calldata,\n            value\n          }\n        } = bestCallOption;\n        return provider.getSigner().sendTransaction({\n          from: account,\n          to: address,\n          data: calldata,\n          // let the wallet try if we can't estimate the gas\n          ...('gasEstimate' in bestCallOption ? {\n            gasLimit: calculateGasMargin(bestCallOption.gasEstimate)\n          } : {}),\n          ...(value && !isZero(value) ? {\n            value\n          } : {})\n        }).then(response => {\n          sendAnalyticsEvent(EventName.SWAP_SIGNED, formatSwapSignedAnalyticsEventProperties({\n            trade,\n            txHash: response.hash\n          }));\n          if (calldata !== response.data) {\n            sendAnalyticsEvent(EventName.SWAP_MODIFIED_IN_WALLET, {\n              txHash: response.hash\n            });\n            throw new InvalidSwapError( /*i18n*/i18n._(\"Your swap was modified through your wallet. If this was a mistake, please cancel immediately or risk losing your funds.\"));\n          }\n          return response;\n        }).catch(error => {\n          // if the user rejected the tx, pass this along\n          if ((error === null || error === void 0 ? void 0 : error.code) === 4001) {\n            throw new Error( /*i18n*/i18n._(\"Transaction rejected\"));\n          } else {\n            // otherwise, the error was unexpected and we need to convey that\n            console.error(`Swap failed`, error, address, calldata, value);\n            if (error instanceof InvalidSwapError) {\n              throw error;\n            } else {\n              throw new Error( /*i18n*/i18n._(\"Swap failed: {0}\", {\n                0: swapErrorToUserReadableMessage(error)\n              }));\n            }\n          }\n        });\n      }\n    };\n  }, [account, chainId, provider, swapCalls, trade]);\n}\n_s(useSendSwapTransaction, \"nwk+m61qLgjDVUp4IGV/072DDN4=\");","map":{"version":3,"names":["sendAnalyticsEvent","EventName","formatSwapSignedAnalyticsEventProperties","useMemo","calculateGasMargin","isZero","swapErrorToUserReadableMessage","InvalidSwapError","Error","useSendSwapTransaction","account","chainId","provider","trade","swapCalls","callback","console","log","onSwap","estimatedCalls","Promise","all","map","call","address","calldata","value","tx","from","to","data","estimateGas","then","gasEstimate","catch","gasError","debug","result","error","callError","alert","bestCallOption","find","el","ix","list","length","errorCalls","filter","firstNoErrorCall","getSigner","sendTransaction","gasLimit","response","SWAP_SIGNED","txHash","hash","SWAP_MODIFIED_IN_WALLET","code"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/lib/hooks/swap/useSendSwapTransaction.tsx"],"sourcesContent":["import { BigNumber } from '@ethersproject/bignumber'\nimport type {\n  JsonRpcProvider,\n  TransactionResponse,\n} from '@ethersproject/providers'\n// eslint-disable-next-line no-restricted-imports\nimport { t, Trans } from '@lingui/macro'\nimport { sendAnalyticsEvent } from '@uniswap/analytics'\nimport { EventName } from '@uniswap/analytics-events'\nimport { Trade } from '@uniswap/router-sdk'\nimport { Currency, TradeType } from '@uniswap/sdk-core'\nimport { formatSwapSignedAnalyticsEventProperties } from 'lib/utils/analytics'\nimport { useMemo } from 'react'\nimport { calculateGasMargin } from 'utils/calculateGasMargin'\nimport isZero from 'utils/isZero'\nimport { swapErrorToUserReadableMessage } from 'utils/swapErrorToUserReadableMessage'\n\ninterface SwapCall {\n  address: string\n  calldata: string\n  value: string\n}\n\ninterface SwapCallEstimate {\n  call: SwapCall\n}\n\ninterface SuccessfulCall extends SwapCallEstimate {\n  call: SwapCall\n  gasEstimate: BigNumber\n}\n\ninterface FailedCall extends SwapCallEstimate {\n  call: SwapCall\n  error: Error\n}\n\nclass InvalidSwapError extends Error {}\n\n// returns a function that will execute a swap, if the parameters are all valid\nexport default function useSendSwapTransaction(\n  account: string | null | undefined,\n  chainId: number | undefined,\n  provider: JsonRpcProvider | undefined,\n  trade: Trade<Currency, Currency, TradeType> | undefined, // trade to execute, required\n  swapCalls: SwapCall[]\n): { callback: null | (() => Promise<TransactionResponse>) } {\n  return useMemo(() => {\n    if (!trade || !provider || !account || !chainId) {\n      return { callback: null }\n    }\n\n    console.log('swapCallsswapCalls', swapCalls)\n\n    return {\n      callback: async function onSwap(): Promise<TransactionResponse> {\n        const estimatedCalls: SwapCallEstimate[] = await Promise.all(\n          swapCalls.map((call) => {\n            const { address, calldata, value } = call\n\n            const tx =\n              !value || isZero(value)\n                ? { from: account, to: address, data: calldata }\n                : {\n                    from: account,\n                    to: address,\n                    data: calldata,\n                    value,\n                  }\n\n            return provider\n              .estimateGas(tx)\n              .then((gasEstimate) => {\n                return {\n                  call,\n                  gasEstimate,\n                }\n              })\n              .catch((gasError) => {\n                console.debug(\n                  'Gas estimate failed, trying eth_call to extract error',\n                  call\n                )\n\n                return provider\n                  .call(tx)\n                  .then((result) => {\n                    console.debug(\n                      'Unexpected successful call after failed estimate gas',\n                      call,\n                      gasError,\n                      result\n                    )\n                    return {\n                      call,\n                      error: (\n                        <Trans>\n                          Unexpected issue with estimating the gas. Please try\n                          again.\n                        </Trans>\n                      ),\n                    }\n                  })\n                  .catch((callError) => {\n                    alert(5)\n                    console.debug('Call threw error', call, callError)\n                    return {\n                      call,\n                      error: swapErrorToUserReadableMessage(callError),\n                    }\n                  })\n              })\n          })\n        )\n\n        // a successful estimation is a bignumber gas estimate and the next call is also a bignumber gas estimate\n        let bestCallOption: SuccessfulCall | SwapCallEstimate | undefined =\n          estimatedCalls.find(\n            (el, ix, list): el is SuccessfulCall =>\n              'gasEstimate' in el &&\n              (ix === list.length - 1 || 'gasEstimate' in list[ix + 1])\n          )\n\n        // check if any calls errored with a recognizable error\n        if (!bestCallOption) {\n          const errorCalls = estimatedCalls.filter(\n            (call): call is FailedCall => 'error' in call\n          )\n          if (errorCalls.length > 0)\n            throw errorCalls[errorCalls.length - 1].error\n          const firstNoErrorCall = estimatedCalls.find<SwapCallEstimate>(\n            (call): call is SwapCallEstimate => !('error' in call)\n          )\n          if (!firstNoErrorCall)\n            throw new Error(\n              t`Unexpected error. Could not estimate gas for the swap.`\n            )\n          bestCallOption = firstNoErrorCall\n        }\n\n        const {\n          call: { address, calldata, value },\n        } = bestCallOption\n\n        return provider\n          .getSigner()\n          .sendTransaction({\n            from: account,\n            to: address,\n            data: calldata,\n            // let the wallet try if we can't estimate the gas\n            ...('gasEstimate' in bestCallOption\n              ? { gasLimit: calculateGasMargin(bestCallOption.gasEstimate) }\n              : {}),\n            ...(value && !isZero(value) ? { value } : {}),\n          })\n          .then((response) => {\n            sendAnalyticsEvent(\n              EventName.SWAP_SIGNED,\n              formatSwapSignedAnalyticsEventProperties({\n                trade,\n                txHash: response.hash,\n              })\n            )\n            if (calldata !== response.data) {\n              sendAnalyticsEvent(EventName.SWAP_MODIFIED_IN_WALLET, {\n                txHash: response.hash,\n              })\n              throw new InvalidSwapError(\n                t`Your swap was modified through your wallet. If this was a mistake, please cancel immediately or risk losing your funds.`\n              )\n            }\n            return response\n          })\n          .catch((error) => {\n            // if the user rejected the tx, pass this along\n            if (error?.code === 4001) {\n              throw new Error(t`Transaction rejected`)\n            } else {\n              // otherwise, the error was unexpected and we need to convey that\n              console.error(`Swap failed`, error, address, calldata, value)\n\n              if (error instanceof InvalidSwapError) {\n                throw error\n              } else {\n                throw new Error(\n                  t`Swap failed: ${swapErrorToUserReadableMessage(error)}`\n                )\n              }\n            }\n          })\n      },\n    }\n  }, [account, chainId, provider, swapCalls, trade])\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}