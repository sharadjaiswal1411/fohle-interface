{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useWeb3React } from '@web3-react/core';\nimport { getConnection } from 'connection/utils';\nimport { useCallback } from 'react';\nimport { addPopup } from 'state/application/reducer';\nimport { updateConnectionError } from 'state/connection/reducer';\nimport { useAppDispatch } from 'state/hooks';\nimport { switchChain } from 'utils/switchChain';\nexport default function useSelectChain() {\n  _s();\n  const dispatch = useAppDispatch();\n  const {\n    connector\n  } = useWeb3React();\n  return useCallback(async targetChain => {\n    if (!connector) return;\n    const connectionType = getConnection(connector).type;\n    try {\n      dispatch(updateConnectionError({\n        connectionType,\n        error: undefined\n      }));\n      await switchChain(connector, targetChain);\n    } catch (error) {\n      console.error('Failed to switch networks', error);\n      dispatch(updateConnectionError({\n        connectionType,\n        error: error.message\n      }));\n      dispatch(addPopup({\n        content: {\n          failedSwitchNetwork: targetChain\n        },\n        key: `failed-network-switch`\n      }));\n    }\n  }, [connector, dispatch]);\n}\n_s(useSelectChain, \"ghSDQtvAmfcctKRb7a46w/pXrfU=\", false, function () {\n  return [useAppDispatch, useWeb3React];\n});","map":{"version":3,"names":["useWeb3React","getConnection","useCallback","addPopup","updateConnectionError","useAppDispatch","switchChain","useSelectChain","dispatch","connector","targetChain","connectionType","type","error","undefined","console","message","content","failedSwitchNetwork","key"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/hooks/useSelectChain.ts"],"sourcesContent":["import { useWeb3React } from '@web3-react/core'\nimport { getConnection } from 'connection/utils'\nimport { SupportedChainId } from 'constants/chains'\nimport { useCallback } from 'react'\nimport { addPopup } from 'state/application/reducer'\nimport { updateConnectionError } from 'state/connection/reducer'\nimport { useAppDispatch } from 'state/hooks'\nimport { switchChain } from 'utils/switchChain'\n\nexport default function useSelectChain() {\n  const dispatch = useAppDispatch()\n  const { connector } = useWeb3React()\n\n  return useCallback(\n    async (targetChain: SupportedChainId) => {\n      if (!connector) return\n\n      const connectionType = getConnection(connector).type\n\n      try {\n        dispatch(updateConnectionError({ connectionType, error: undefined }))\n        await switchChain(connector, targetChain)\n      } catch (error) {\n        console.error('Failed to switch networks', error)\n\n        dispatch(updateConnectionError({ connectionType, error: error.message }))\n        dispatch(addPopup({ content: { failedSwitchNetwork: targetChain }, key: `failed-network-switch` }))\n      }\n    },\n    [connector, dispatch]\n  )\n}\n"],"mappings":";AAAA,SAASA,YAAY,QAAQ,kBAAkB;AAC/C,SAASC,aAAa,QAAQ,kBAAkB;AAEhD,SAASC,WAAW,QAAQ,OAAO;AACnC,SAASC,QAAQ,QAAQ,2BAA2B;AACpD,SAASC,qBAAqB,QAAQ,0BAA0B;AAChE,SAASC,cAAc,QAAQ,aAAa;AAC5C,SAASC,WAAW,QAAQ,mBAAmB;AAE/C,eAAe,SAASC,cAAc,GAAG;EAAA;EACvC,MAAMC,QAAQ,GAAGH,cAAc,EAAE;EACjC,MAAM;IAAEI;EAAU,CAAC,GAAGT,YAAY,EAAE;EAEpC,OAAOE,WAAW,CAChB,MAAOQ,WAA6B,IAAK;IACvC,IAAI,CAACD,SAAS,EAAE;IAEhB,MAAME,cAAc,GAAGV,aAAa,CAACQ,SAAS,CAAC,CAACG,IAAI;IAEpD,IAAI;MACFJ,QAAQ,CAACJ,qBAAqB,CAAC;QAAEO,cAAc;QAAEE,KAAK,EAAEC;MAAU,CAAC,CAAC,CAAC;MACrE,MAAMR,WAAW,CAACG,SAAS,EAAEC,WAAW,CAAC;IAC3C,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdE,OAAO,CAACF,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MAEjDL,QAAQ,CAACJ,qBAAqB,CAAC;QAAEO,cAAc;QAAEE,KAAK,EAAEA,KAAK,CAACG;MAAQ,CAAC,CAAC,CAAC;MACzER,QAAQ,CAACL,QAAQ,CAAC;QAAEc,OAAO,EAAE;UAAEC,mBAAmB,EAAER;QAAY,CAAC;QAAES,GAAG,EAAG;MAAuB,CAAC,CAAC,CAAC;IACrG;EACF,CAAC,EACD,CAACV,SAAS,EAAED,QAAQ,CAAC,CACtB;AACH;AAAC,GAtBuBD,cAAc;EAAA,QACnBF,cAAc,EACTL,YAAY;AAAA"},"metadata":{},"sourceType":"module"}