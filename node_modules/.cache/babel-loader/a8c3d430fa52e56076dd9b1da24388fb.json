{"ast":null,"code":"import _createForOfIteratorHelper from\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import{partitionMixedRouteByProtocol,Protocol}from'@uniswap/router-sdk';import{CurrencyAmount,Percent}from'@uniswap/sdk-core';import{Pair}from'@uniswap/v2-sdk';import{Pool}from'@uniswap/v3-sdk';import{useWeb3React}from'@web3-react/core';import{SUPPORTED_GAS_ESTIMATE_CHAIN_IDS}from'constants/chains';import{L2_CHAIN_IDS}from'constants/chains';import JSBI from'jsbi';import useNativeCurrency from'lib/hooks/useNativeCurrency';import{useMemo}from'react';import useGasPrice from'./useGasPrice';import useStablecoinPrice,{useStablecoinValue}from'./useStablecoinPrice';var V3_SWAP_DEFAULT_SLIPPAGE=new Percent(50,10000);// .50%\nvar ONE_TENTHS_PERCENT=new Percent(10,10000);// .10%\nvar DEFAULT_AUTO_SLIPPAGE=ONE_TENTHS_PERCENT;var GAS_ESTIMATE_BUFFER=new Percent(10,100);// 10%\n// Base costs regardless of how many hops in the route\nvar V3_SWAP_BASE_GAS_ESTIMATE=100000;var V2_SWAP_BASE_GAS_ESTIMATE=135000;// Extra cost per hop in the route\nvar V3_SWAP_HOP_GAS_ESTIMATE=70000;var V2_SWAP_HOP_GAS_ESTIMATE=50000;/**\n * Return a guess of the gas cost used in computing slippage tolerance for a given trade\n * @param trade the trade for which to _guess_ the amount of gas it would cost to execute\n *\n * V3 logic is inspired by:\n * https://github.com/Uniswap/smart-order-router/blob/main/src/routers/alpha-router/gas-models/v3/v3-heuristic-gas-model.ts\n * V2 logic is inspired by:\n * https://github.com/Uniswap/smart-order-router/blob/main/src/routers/alpha-router/gas-models/v2/v2-heuristic-gas-model.ts\n */function guesstimateGas(trade){if(trade){var gas=0;var _iterator=_createForOfIteratorHelper(trade.swaps),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var route=_step.value.route;if(route.protocol===Protocol.V2){gas+=V2_SWAP_BASE_GAS_ESTIMATE+route.pools.length*V2_SWAP_HOP_GAS_ESTIMATE;}else if(route.protocol===Protocol.V3){// V3 gas costs scale on initialized ticks being crossed, but we don't have that data here.\n// We bake in some tick crossings into the base 100k cost.\ngas+=V3_SWAP_BASE_GAS_ESTIMATE+route.pools.length*V3_SWAP_HOP_GAS_ESTIMATE;}else if(route.protocol===Protocol.MIXED){var sections=partitionMixedRouteByProtocol(route);gas+=sections.reduce(function(gas,section){if(section.every(function(pool){return pool instanceof Pool;})){return gas+V3_SWAP_BASE_GAS_ESTIMATE+section.length*V3_SWAP_HOP_GAS_ESTIMATE;}else if(section.every(function(pool){return pool instanceof Pair;})){return gas+V2_SWAP_BASE_GAS_ESTIMATE+(section.length-1)*V2_SWAP_HOP_GAS_ESTIMATE;}else{console.warn('Invalid section');return gas;}},0);}else{// fallback general gas estimation\ngas+=V3_SWAP_BASE_GAS_ESTIMATE+route.pools.length*V3_SWAP_HOP_GAS_ESTIMATE;}}}catch(err){_iterator.e(err);}finally{_iterator.f();}return gas;}return undefined;}var MIN_AUTO_SLIPPAGE_TOLERANCE=new Percent(5,1000);// 0.5%\nvar MAX_AUTO_SLIPPAGE_TOLERANCE=new Percent(25,100);// 25%\n/**\n * Returns slippage tolerance based on values from current trade, gas estimates from api, and active network.\n */export default function useAutoSlippageTolerance(trade){var _ref;var _useWeb3React=useWeb3React(),chainId=_useWeb3React.chainId;var onL2=chainId&&L2_CHAIN_IDS.includes(chainId);var outputDollarValue=useStablecoinValue(trade===null||trade===void 0?void 0:trade.outputAmount);var nativeGasPrice=useGasPrice();var gasEstimate=guesstimateGas(trade);var nativeCurrency=useNativeCurrency();var nativeCurrencyPrice=useStablecoinPrice((_ref=trade&&nativeCurrency)!==null&&_ref!==void 0?_ref:undefined);return useMemo(function(){if(!trade||onL2)return DEFAULT_AUTO_SLIPPAGE;var nativeGasCost=nativeGasPrice&&typeof gasEstimate==='number'?JSBI.multiply(nativeGasPrice,JSBI.BigInt(gasEstimate)):undefined;var dollarGasCost=nativeCurrency&&nativeGasCost&&nativeCurrencyPrice?nativeCurrencyPrice.quote(CurrencyAmount.fromRawAmount(nativeCurrency,nativeGasCost)):undefined;// if valid estimate from api and using api trade, use gas estimate from api\n// NOTE - dont use gas estimate for L2s yet - need to verify accuracy\n// if not, use local heuristic\nvar dollarCostToUse=chainId&&SUPPORTED_GAS_ESTIMATE_CHAIN_IDS.includes(chainId)&&(trade===null||trade===void 0?void 0:trade.gasUseEstimateUSD)?trade.gasUseEstimateUSD.multiply(GAS_ESTIMATE_BUFFER):dollarGasCost===null||dollarGasCost===void 0?void 0:dollarGasCost.multiply(GAS_ESTIMATE_BUFFER);if(outputDollarValue&&dollarCostToUse){// the rationale is that a user will not want their trade to fail for a loss due to slippage that is less than\n// the cost of the gas of the failed transaction\nvar fraction=dollarCostToUse.asFraction.divide(outputDollarValue.asFraction);var result=new Percent(fraction.numerator,fraction.denominator);if(result.greaterThan(MAX_AUTO_SLIPPAGE_TOLERANCE)){return MAX_AUTO_SLIPPAGE_TOLERANCE;}if(result.lessThan(MIN_AUTO_SLIPPAGE_TOLERANCE)){return MIN_AUTO_SLIPPAGE_TOLERANCE;}return result;}return V3_SWAP_DEFAULT_SLIPPAGE;},[trade,onL2,nativeGasPrice,gasEstimate,nativeCurrency,nativeCurrencyPrice,chainId,outputDollarValue]);}","map":{"version":3,"names":["partitionMixedRouteByProtocol","Protocol","CurrencyAmount","Percent","Pair","Pool","useWeb3React","SUPPORTED_GAS_ESTIMATE_CHAIN_IDS","L2_CHAIN_IDS","JSBI","useNativeCurrency","useMemo","useGasPrice","useStablecoinPrice","useStablecoinValue","V3_SWAP_DEFAULT_SLIPPAGE","ONE_TENTHS_PERCENT","DEFAULT_AUTO_SLIPPAGE","GAS_ESTIMATE_BUFFER","V3_SWAP_BASE_GAS_ESTIMATE","V2_SWAP_BASE_GAS_ESTIMATE","V3_SWAP_HOP_GAS_ESTIMATE","V2_SWAP_HOP_GAS_ESTIMATE","guesstimateGas","trade","gas","swaps","route","protocol","V2","pools","length","V3","MIXED","sections","reduce","section","every","pool","console","warn","undefined","MIN_AUTO_SLIPPAGE_TOLERANCE","MAX_AUTO_SLIPPAGE_TOLERANCE","useAutoSlippageTolerance","chainId","onL2","includes","outputDollarValue","outputAmount","nativeGasPrice","gasEstimate","nativeCurrency","nativeCurrencyPrice","nativeGasCost","multiply","BigInt","dollarGasCost","quote","fromRawAmount","dollarCostToUse","gasUseEstimateUSD","fraction","asFraction","divide","result","numerator","denominator","greaterThan","lessThan"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/hooks/useAutoSlippageTolerance.ts"],"sourcesContent":["import { MixedRoute, partitionMixedRouteByProtocol, Protocol, Trade } from '@uniswap/router-sdk'\nimport { Currency, CurrencyAmount, Percent, TradeType } from '@uniswap/sdk-core'\nimport { Pair } from '@uniswap/v2-sdk'\nimport { Pool } from '@uniswap/v3-sdk'\nimport { useWeb3React } from '@web3-react/core'\nimport { SUPPORTED_GAS_ESTIMATE_CHAIN_IDS } from 'constants/chains'\nimport { L2_CHAIN_IDS } from 'constants/chains'\nimport JSBI from 'jsbi'\nimport useNativeCurrency from 'lib/hooks/useNativeCurrency'\nimport { useMemo } from 'react'\nimport { InterfaceTrade } from 'state/routing/types'\n\nimport useGasPrice from './useGasPrice'\nimport useStablecoinPrice, { useStablecoinValue } from './useStablecoinPrice'\n\nconst V3_SWAP_DEFAULT_SLIPPAGE = new Percent(50, 10_000) // .50%\nconst ONE_TENTHS_PERCENT = new Percent(10, 10_000) // .10%\nconst DEFAULT_AUTO_SLIPPAGE = ONE_TENTHS_PERCENT\nconst GAS_ESTIMATE_BUFFER = new Percent(10, 100) // 10%\n\n// Base costs regardless of how many hops in the route\nconst V3_SWAP_BASE_GAS_ESTIMATE = 100_000\nconst V2_SWAP_BASE_GAS_ESTIMATE = 135_000\n\n// Extra cost per hop in the route\nconst V3_SWAP_HOP_GAS_ESTIMATE = 70_000\nconst V2_SWAP_HOP_GAS_ESTIMATE = 50_000\n\n/**\n * Return a guess of the gas cost used in computing slippage tolerance for a given trade\n * @param trade the trade for which to _guess_ the amount of gas it would cost to execute\n *\n * V3 logic is inspired by:\n * https://github.com/Uniswap/smart-order-router/blob/main/src/routers/alpha-router/gas-models/v3/v3-heuristic-gas-model.ts\n * V2 logic is inspired by:\n * https://github.com/Uniswap/smart-order-router/blob/main/src/routers/alpha-router/gas-models/v2/v2-heuristic-gas-model.ts\n */\nfunction guesstimateGas(trade: Trade<Currency, Currency, TradeType> | undefined): number | undefined {\n  if (trade) {\n    let gas = 0\n    for (const { route } of trade.swaps) {\n      if (route.protocol === Protocol.V2) {\n        gas += V2_SWAP_BASE_GAS_ESTIMATE + route.pools.length * V2_SWAP_HOP_GAS_ESTIMATE\n      } else if (route.protocol === Protocol.V3) {\n        // V3 gas costs scale on initialized ticks being crossed, but we don't have that data here.\n        // We bake in some tick crossings into the base 100k cost.\n        gas += V3_SWAP_BASE_GAS_ESTIMATE + route.pools.length * V3_SWAP_HOP_GAS_ESTIMATE\n      } else if (route.protocol === Protocol.MIXED) {\n        const sections = partitionMixedRouteByProtocol(route as MixedRoute<Currency, Currency>)\n        gas += sections.reduce((gas, section) => {\n          if (section.every((pool) => pool instanceof Pool)) {\n            return gas + V3_SWAP_BASE_GAS_ESTIMATE + section.length * V3_SWAP_HOP_GAS_ESTIMATE\n          } else if (section.every((pool) => pool instanceof Pair)) {\n            return gas + V2_SWAP_BASE_GAS_ESTIMATE + (section.length - 1) * V2_SWAP_HOP_GAS_ESTIMATE\n          } else {\n            console.warn('Invalid section')\n            return gas\n          }\n        }, 0)\n      } else {\n        // fallback general gas estimation\n        gas += V3_SWAP_BASE_GAS_ESTIMATE + route.pools.length * V3_SWAP_HOP_GAS_ESTIMATE\n      }\n    }\n    return gas\n  }\n  return undefined\n}\n\nconst MIN_AUTO_SLIPPAGE_TOLERANCE = new Percent(5, 1000) // 0.5%\nconst MAX_AUTO_SLIPPAGE_TOLERANCE = new Percent(25, 100) // 25%\n\n/**\n * Returns slippage tolerance based on values from current trade, gas estimates from api, and active network.\n */\nexport default function useAutoSlippageTolerance(\n  trade: InterfaceTrade<Currency, Currency, TradeType> | undefined\n): Percent {\n  const { chainId } = useWeb3React()\n  const onL2 = chainId && L2_CHAIN_IDS.includes(chainId)\n  const outputDollarValue = useStablecoinValue(trade?.outputAmount)\n  const nativeGasPrice = useGasPrice()\n\n  const gasEstimate = guesstimateGas(trade)\n  const nativeCurrency = useNativeCurrency()\n  const nativeCurrencyPrice = useStablecoinPrice((trade && nativeCurrency) ?? undefined)\n\n  return useMemo(() => {\n    if (!trade || onL2) return DEFAULT_AUTO_SLIPPAGE\n\n    const nativeGasCost =\n      nativeGasPrice && typeof gasEstimate === 'number'\n        ? JSBI.multiply(nativeGasPrice, JSBI.BigInt(gasEstimate))\n        : undefined\n    const dollarGasCost =\n      nativeCurrency && nativeGasCost && nativeCurrencyPrice\n        ? nativeCurrencyPrice.quote(CurrencyAmount.fromRawAmount(nativeCurrency, nativeGasCost))\n        : undefined\n\n    // if valid estimate from api and using api trade, use gas estimate from api\n    // NOTE - dont use gas estimate for L2s yet - need to verify accuracy\n    // if not, use local heuristic\n    const dollarCostToUse =\n      chainId && SUPPORTED_GAS_ESTIMATE_CHAIN_IDS.includes(chainId) && trade?.gasUseEstimateUSD\n        ? trade.gasUseEstimateUSD.multiply(GAS_ESTIMATE_BUFFER)\n        : dollarGasCost?.multiply(GAS_ESTIMATE_BUFFER)\n\n    if (outputDollarValue && dollarCostToUse) {\n      // the rationale is that a user will not want their trade to fail for a loss due to slippage that is less than\n      // the cost of the gas of the failed transaction\n      const fraction = dollarCostToUse.asFraction.divide(outputDollarValue.asFraction)\n      const result = new Percent(fraction.numerator, fraction.denominator)\n      if (result.greaterThan(MAX_AUTO_SLIPPAGE_TOLERANCE)) {\n        return MAX_AUTO_SLIPPAGE_TOLERANCE\n      }\n\n      if (result.lessThan(MIN_AUTO_SLIPPAGE_TOLERANCE)) {\n        return MIN_AUTO_SLIPPAGE_TOLERANCE\n      }\n\n      return result\n    }\n\n    return V3_SWAP_DEFAULT_SLIPPAGE\n  }, [trade, onL2, nativeGasPrice, gasEstimate, nativeCurrency, nativeCurrencyPrice, chainId, outputDollarValue])\n}\n"],"mappings":"oMAAA,OAAqBA,6BAA6B,CAAEC,QAAQ,KAAe,qBAAqB,CAChG,OAAmBC,cAAc,CAAEC,OAAO,KAAmB,mBAAmB,CAChF,OAASC,IAAI,KAAQ,iBAAiB,CACtC,OAASC,IAAI,KAAQ,iBAAiB,CACtC,OAASC,YAAY,KAAQ,kBAAkB,CAC/C,OAASC,gCAAgC,KAAQ,kBAAkB,CACnE,OAASC,YAAY,KAAQ,kBAAkB,CAC/C,MAAOC,KAAI,KAAM,MAAM,CACvB,MAAOC,kBAAiB,KAAM,6BAA6B,CAC3D,OAASC,OAAO,KAAQ,OAAO,CAG/B,MAAOC,YAAW,KAAM,eAAe,CACvC,MAAOC,mBAAkB,EAAIC,kBAAkB,KAAQ,sBAAsB,CAE7E,GAAMC,yBAAwB,CAAG,GAAIZ,QAAO,CAAC,EAAE,CAAE,KAAM,CAAC,CAAC;AACzD,GAAMa,mBAAkB,CAAG,GAAIb,QAAO,CAAC,EAAE,CAAE,KAAM,CAAC,CAAC;AACnD,GAAMc,sBAAqB,CAAGD,kBAAkB,CAChD,GAAME,oBAAmB,CAAG,GAAIf,QAAO,CAAC,EAAE,CAAE,GAAG,CAAC,CAAC;AAEjD;AACA,GAAMgB,0BAAyB,CAAG,MAAO,CACzC,GAAMC,0BAAyB,CAAG,MAAO,CAEzC;AACA,GAAMC,yBAAwB,CAAG,KAAM,CACvC,GAAMC,yBAAwB,CAAG,KAAM,CAEvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,QAASC,eAAc,CAACC,KAAuD,CAAsB,CACnG,GAAIA,KAAK,CAAE,CACT,GAAIC,IAAG,CAAG,CAAC,0CACaD,KAAK,CAACE,KAAK,YAAnC,+CAAqC,IAAxBC,MAAK,aAALA,KAAK,CAChB,GAAIA,KAAK,CAACC,QAAQ,GAAK3B,QAAQ,CAAC4B,EAAE,CAAE,CAClCJ,GAAG,EAAIL,yBAAyB,CAAGO,KAAK,CAACG,KAAK,CAACC,MAAM,CAAGT,wBAAwB,CAClF,CAAC,IAAM,IAAIK,KAAK,CAACC,QAAQ,GAAK3B,QAAQ,CAAC+B,EAAE,CAAE,CACzC;AACA;AACAP,GAAG,EAAIN,yBAAyB,CAAGQ,KAAK,CAACG,KAAK,CAACC,MAAM,CAAGV,wBAAwB,CAClF,CAAC,IAAM,IAAIM,KAAK,CAACC,QAAQ,GAAK3B,QAAQ,CAACgC,KAAK,CAAE,CAC5C,GAAMC,SAAQ,CAAGlC,6BAA6B,CAAC2B,KAAK,CAAmC,CACvFF,GAAG,EAAIS,QAAQ,CAACC,MAAM,CAAC,SAACV,GAAG,CAAEW,OAAO,CAAK,CACvC,GAAIA,OAAO,CAACC,KAAK,CAAC,SAACC,IAAI,QAAKA,KAAI,WAAYjC,KAAI,GAAC,CAAE,CACjD,MAAOoB,IAAG,CAAGN,yBAAyB,CAAGiB,OAAO,CAACL,MAAM,CAAGV,wBAAwB,CACpF,CAAC,IAAM,IAAIe,OAAO,CAACC,KAAK,CAAC,SAACC,IAAI,QAAKA,KAAI,WAAYlC,KAAI,GAAC,CAAE,CACxD,MAAOqB,IAAG,CAAGL,yBAAyB,CAAG,CAACgB,OAAO,CAACL,MAAM,CAAG,CAAC,EAAIT,wBAAwB,CAC1F,CAAC,IAAM,CACLiB,OAAO,CAACC,IAAI,CAAC,iBAAiB,CAAC,CAC/B,MAAOf,IAAG,CACZ,CACF,CAAC,CAAE,CAAC,CAAC,CACP,CAAC,IAAM,CACL;AACAA,GAAG,EAAIN,yBAAyB,CAAGQ,KAAK,CAACG,KAAK,CAACC,MAAM,CAAGV,wBAAwB,CAClF,CACF,CAAC,qDACD,MAAOI,IAAG,CACZ,CACA,MAAOgB,UAAS,CAClB,CAEA,GAAMC,4BAA2B,CAAG,GAAIvC,QAAO,CAAC,CAAC,CAAE,IAAI,CAAC,CAAC;AACzD,GAAMwC,4BAA2B,CAAG,GAAIxC,QAAO,CAAC,EAAE,CAAE,GAAG,CAAC,CAAC;AAEzD;AACA;AACA,GACA,cAAe,SAASyC,yBAAwB,CAC9CpB,KAAgE,CACvD,UACT,kBAAoBlB,YAAY,EAAE,CAA1BuC,OAAO,eAAPA,OAAO,CACf,GAAMC,KAAI,CAAGD,OAAO,EAAIrC,YAAY,CAACuC,QAAQ,CAACF,OAAO,CAAC,CACtD,GAAMG,kBAAiB,CAAGlC,kBAAkB,CAACU,KAAK,SAALA,KAAK,iBAALA,KAAK,CAAEyB,YAAY,CAAC,CACjE,GAAMC,eAAc,CAAGtC,WAAW,EAAE,CAEpC,GAAMuC,YAAW,CAAG5B,cAAc,CAACC,KAAK,CAAC,CACzC,GAAM4B,eAAc,CAAG1C,iBAAiB,EAAE,CAC1C,GAAM2C,oBAAmB,CAAGxC,kBAAkB,OAAEW,KAAK,EAAI4B,cAAc,6BAAKX,SAAS,CAAC,CAEtF,MAAO9B,QAAO,CAAC,UAAM,CACnB,GAAI,CAACa,KAAK,EAAIsB,IAAI,CAAE,MAAO7B,sBAAqB,CAEhD,GAAMqC,cAAa,CACjBJ,cAAc,EAAI,MAAOC,YAAW,GAAK,QAAQ,CAC7C1C,IAAI,CAAC8C,QAAQ,CAACL,cAAc,CAAEzC,IAAI,CAAC+C,MAAM,CAACL,WAAW,CAAC,CAAC,CACvDV,SAAS,CACf,GAAMgB,cAAa,CACjBL,cAAc,EAAIE,aAAa,EAAID,mBAAmB,CAClDA,mBAAmB,CAACK,KAAK,CAACxD,cAAc,CAACyD,aAAa,CAACP,cAAc,CAAEE,aAAa,CAAC,CAAC,CACtFb,SAAS,CAEf;AACA;AACA;AACA,GAAMmB,gBAAe,CACnBf,OAAO,EAAItC,gCAAgC,CAACwC,QAAQ,CAACF,OAAO,CAAC,GAAIrB,KAAK,SAALA,KAAK,iBAALA,KAAK,CAAEqC,iBAAiB,EACrFrC,KAAK,CAACqC,iBAAiB,CAACN,QAAQ,CAACrC,mBAAmB,CAAC,CACrDuC,aAAa,SAAbA,aAAa,iBAAbA,aAAa,CAAEF,QAAQ,CAACrC,mBAAmB,CAAC,CAElD,GAAI8B,iBAAiB,EAAIY,eAAe,CAAE,CACxC;AACA;AACA,GAAME,SAAQ,CAAGF,eAAe,CAACG,UAAU,CAACC,MAAM,CAAChB,iBAAiB,CAACe,UAAU,CAAC,CAChF,GAAME,OAAM,CAAG,GAAI9D,QAAO,CAAC2D,QAAQ,CAACI,SAAS,CAAEJ,QAAQ,CAACK,WAAW,CAAC,CACpE,GAAIF,MAAM,CAACG,WAAW,CAACzB,2BAA2B,CAAC,CAAE,CACnD,MAAOA,4BAA2B,CACpC,CAEA,GAAIsB,MAAM,CAACI,QAAQ,CAAC3B,2BAA2B,CAAC,CAAE,CAChD,MAAOA,4BAA2B,CACpC,CAEA,MAAOuB,OAAM,CACf,CAEA,MAAOlD,yBAAwB,CACjC,CAAC,CAAE,CAACS,KAAK,CAAEsB,IAAI,CAAEI,cAAc,CAAEC,WAAW,CAAEC,cAAc,CAAEC,mBAAmB,CAAER,OAAO,CAAEG,iBAAiB,CAAC,CAAC,CACjH"},"metadata":{},"sourceType":"module"}