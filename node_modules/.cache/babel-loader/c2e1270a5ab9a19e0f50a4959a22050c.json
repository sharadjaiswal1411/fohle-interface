{"ast":null,"code":"import { GLOBAL_OBJ, getGlobalSingleton } from './worldwide.js';\n\n/** Prefix for logging strings */\nvar PREFIX = 'Sentry Logger ';\nvar CONSOLE_LEVELS = ['debug', 'info', 'warn', 'error', 'log', 'assert', 'trace'];\n\n/**\n * Temporarily disable sentry console instrumentations.\n *\n * @param callback The function to run against the original `console` messages\n * @returns The results of the callback\n */\nfunction consoleSandbox(callback) {\n  if (!('console' in GLOBAL_OBJ)) {\n    return callback();\n  }\n  var originalConsole = GLOBAL_OBJ.console;\n  var wrappedLevels = {};\n\n  // Restore all wrapped console methods\n  CONSOLE_LEVELS.forEach(function (level) {\n    // TODO(v7): Remove this check as it's only needed for Node 6\n    var originalWrappedFunc = originalConsole[level] && originalConsole[level].__sentry_original__;\n    if (level in originalConsole && originalWrappedFunc) {\n      wrappedLevels[level] = originalConsole[level];\n      originalConsole[level] = originalWrappedFunc;\n    }\n  });\n  try {\n    return callback();\n  } finally {\n    // Revert restoration to wrapped state\n    Object.keys(wrappedLevels).forEach(function (level) {\n      originalConsole[level] = wrappedLevels[level];\n    });\n  }\n}\nfunction makeLogger() {\n  var enabled = false;\n  var logger = {\n    enable: function enable() {\n      enabled = true;\n    },\n    disable: function disable() {\n      enabled = false;\n    }\n  };\n  if (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) {\n    CONSOLE_LEVELS.forEach(function (name) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      logger[name] = function () {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        if (enabled) {\n          consoleSandbox(function () {\n            var _GLOBAL_OBJ$console;\n            (_GLOBAL_OBJ$console = GLOBAL_OBJ.console)[name].apply(_GLOBAL_OBJ$console, [\"\".concat(PREFIX, \"[\").concat(name, \"]:\")].concat(args));\n          });\n        }\n      };\n    });\n  } else {\n    CONSOLE_LEVELS.forEach(function (name) {\n      logger[name] = function () {\n        return undefined;\n      };\n    });\n  }\n  return logger;\n}\n\n// Ensure we only have a single logger instance, even if multiple versions of @sentry/utils are being used\nvar logger;\nif (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) {\n  logger = getGlobalSingleton('logger', makeLogger);\n} else {\n  logger = makeLogger();\n}\nexport { CONSOLE_LEVELS, consoleSandbox, logger };","map":{"version":3,"sources":["../../src/logger.ts"],"names":[],"mappings":";;AAIA;AACA,IAAA,MAAA,GAAA,gBAAA;AAEA,IAAA,cAAA,GAAA,CAAA,OAAA,EAAA,MAAA,EAAA,MAAA,EAAA,OAAA,EAAA,KAAA,EAAA,QAAA,EAAA,OAAA,CAAA;;AAYA;AACA;AACA;AACA;AACA;AACA;AACA,SAAA,cAAA,CAAA,QAAA,EAAA;EACA,IAAA,EAAA,SAAA,IAAA,UAAA,CAAA,EAAA;IACA,OAAA,QAAA,EAAA;EACA;EAEA,IAAA,eAAA,GAAA,UAAA,CAAA,OAAA;EACA,IAAA,aAAA,GAAA,CAAA,CAAA;;EAEA;EACA,cAAA,CAAA,OAAA,CAAA,UAAA,KAAA,EAAA;IACA;IACA,IAAA,mBAAA,GACA,eAAA,CAAA,KAAA,CAAA,IAAA,eAAA,CAAA,KAAA,CAAA,CAAA,mBAAA;IACA,IAAA,KAAA,IAAA,eAAA,IAAA,mBAAA,EAAA;MACA,aAAA,CAAA,KAAA,CAAA,GAAA,eAAA,CAAA,KAAA,CAAA;MACA,eAAA,CAAA,KAAA,CAAA,GAAA,mBAAA;IACA;EACA,CAAA,CAAA;EAEA,IAAA;IACA,OAAA,QAAA,EAAA;EACA,CAAA,SAAA;IACA;IACA,MAAA,CAAA,IAAA,CAAA,aAAA,CAAA,CAAA,OAAA,CAAA,UAAA,KAAA,EAAA;MACA,eAAA,CAAA,KAAA,CAAA,GAAA,aAAA,CAAA,KAAA,CAAA;IACA,CAAA,CAAA;EACA;AACA;AAEA,SAAA,UAAA,GAAA;EACA,IAAA,OAAA,GAAA,KAAA;EACA,IAAA,MAAA,GAAA;IACA,MAAA,EAAA,kBAAA;MACA,OAAA,GAAA,IAAA;IACA,CAAA;IACA,OAAA,EAAA,mBAAA;MACA,OAAA,GAAA,KAAA;IACA;EACA,CAAA;EAEA,IAAA,OAAA,gBAAA,KAAA,WAAA,IAAA,gBAAA,EAAA;IACA,cAAA,CAAA,OAAA,CAAA,UAAA,IAAA,EAAA;MACA;MACA,MAAA,CAAA,IAAA,CAAA,GAAA,YAAA;QAAA,kCAAA,IAAA;UAAA,IAAA;QAAA;QACA,IAAA,OAAA,EAAA;UACA,cAAA,CAAA,YAAA;YAAA;YACA,uBAAA,UAAA,CAAA,OAAA,EAAA,IAAA,CAAA,uCAAA,MAAA,cAAA,IAAA,gBAAA,IAAA,EAAA;UACA,CAAA,CAAA;QACA;MACA,CAAA;IACA,CAAA,CAAA;EACA,CAAA,MAAA;IACA,cAAA,CAAA,OAAA,CAAA,UAAA,IAAA,EAAA;MACA,MAAA,CAAA,IAAA,CAAA,GAAA;QAAA,OAAA,SAAA;MAAA;IACA,CAAA,CAAA;EACA;EAEA,OAAA,MAAA;AACA;;AAEA;AACA,IAAA,MAAA;AACA,IAAA,OAAA,gBAAA,KAAA,WAAA,IAAA,gBAAA,EAAA;EACA,MAAA,GAAA,kBAAA,CAAA,QAAA,EAAA,UAAA,CAAA;AACA,CAAA,MAAA;EACA,MAAA,GAAA,UAAA,EAAA;AACA","sourcesContent":["import { WrappedFunction } from '@sentry/types';\n\nimport { getGlobalSingleton, GLOBAL_OBJ } from './worldwide';\n\n/** Prefix for logging strings */\nconst PREFIX = 'Sentry Logger ';\n\nexport const CONSOLE_LEVELS = ['debug', 'info', 'warn', 'error', 'log', 'assert', 'trace'] as const;\nexport type ConsoleLevel = typeof CONSOLE_LEVELS[number];\n\ntype LoggerMethod = (...args: unknown[]) => void;\ntype LoggerConsoleMethods = Record<typeof CONSOLE_LEVELS[number], LoggerMethod>;\n\n/** JSDoc */\ninterface Logger extends LoggerConsoleMethods {\n  disable(): void;\n  enable(): void;\n}\n\n/**\n * Temporarily disable sentry console instrumentations.\n *\n * @param callback The function to run against the original `console` messages\n * @returns The results of the callback\n */\nexport function consoleSandbox<T>(callback: () => T): T {\n  if (!('console' in GLOBAL_OBJ)) {\n    return callback();\n  }\n\n  const originalConsole = GLOBAL_OBJ.console as Console & Record<string, unknown>;\n  const wrappedLevels: Partial<LoggerConsoleMethods> = {};\n\n  // Restore all wrapped console methods\n  CONSOLE_LEVELS.forEach(level => {\n    // TODO(v7): Remove this check as it's only needed for Node 6\n    const originalWrappedFunc =\n      originalConsole[level] && (originalConsole[level] as WrappedFunction).__sentry_original__;\n    if (level in originalConsole && originalWrappedFunc) {\n      wrappedLevels[level] = originalConsole[level] as LoggerConsoleMethods[typeof level];\n      originalConsole[level] = originalWrappedFunc as Console[typeof level];\n    }\n  });\n\n  try {\n    return callback();\n  } finally {\n    // Revert restoration to wrapped state\n    Object.keys(wrappedLevels).forEach(level => {\n      originalConsole[level] = wrappedLevels[level as typeof CONSOLE_LEVELS[number]];\n    });\n  }\n}\n\nfunction makeLogger(): Logger {\n  let enabled = false;\n  const logger: Partial<Logger> = {\n    enable: () => {\n      enabled = true;\n    },\n    disable: () => {\n      enabled = false;\n    },\n  };\n\n  if (__DEBUG_BUILD__) {\n    CONSOLE_LEVELS.forEach(name => {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      logger[name] = (...args: any[]) => {\n        if (enabled) {\n          consoleSandbox(() => {\n            GLOBAL_OBJ.console[name](`${PREFIX}[${name}]:`, ...args);\n          });\n        }\n      };\n    });\n  } else {\n    CONSOLE_LEVELS.forEach(name => {\n      logger[name] = () => undefined;\n    });\n  }\n\n  return logger as Logger;\n}\n\n// Ensure we only have a single logger instance, even if multiple versions of @sentry/utils are being used\nlet logger: Logger;\nif (__DEBUG_BUILD__) {\n  logger = getGlobalSingleton('logger', makeLogger);\n} else {\n  logger = makeLogger();\n}\n\nexport { logger };\n"]},"metadata":{},"sourceType":"module"}