{"ast":null,"code":"'use strict';\n\nvar whitespace = require('is-whitespace-character');\nvar locate = require('../locate/code-inline');\nmodule.exports = inlineCode;\ninlineCode.locator = locate;\nvar C_TICK = '`';\n\n/* Tokenise inline code. */\nfunction inlineCode(eat, value, silent) {\n  var length = value.length;\n  var index = 0;\n  var queue = '';\n  var tickQueue = '';\n  var contentQueue;\n  var subqueue;\n  var count;\n  var openingCount;\n  var subvalue;\n  var character;\n  var found;\n  var next;\n  while (index < length) {\n    if (value.charAt(index) !== C_TICK) {\n      break;\n    }\n    queue += C_TICK;\n    index++;\n  }\n  if (!queue) {\n    return;\n  }\n  subvalue = queue;\n  openingCount = index;\n  queue = '';\n  next = value.charAt(index);\n  count = 0;\n  while (index < length) {\n    character = next;\n    next = value.charAt(index + 1);\n    if (character === C_TICK) {\n      count++;\n      tickQueue += character;\n    } else {\n      count = 0;\n      queue += character;\n    }\n    if (count && next !== C_TICK) {\n      if (count === openingCount) {\n        subvalue += queue + tickQueue;\n        found = true;\n        break;\n      }\n      queue += tickQueue;\n      tickQueue = '';\n    }\n    index++;\n  }\n  if (!found) {\n    if (openingCount % 2 !== 0) {\n      return;\n    }\n    queue = '';\n  }\n\n  /* istanbul ignore if - never used (yet) */\n  if (silent) {\n    return true;\n  }\n  contentQueue = '';\n  subqueue = '';\n  length = queue.length;\n  index = -1;\n  while (++index < length) {\n    character = queue.charAt(index);\n    if (whitespace(character)) {\n      subqueue += character;\n      continue;\n    }\n    if (subqueue) {\n      if (contentQueue) {\n        contentQueue += subqueue;\n      }\n      subqueue = '';\n    }\n    contentQueue += character;\n  }\n  return eat(subvalue)({\n    type: 'inlineCode',\n    value: contentQueue\n  });\n}","map":{"version":3,"names":["whitespace","require","locate","module","exports","inlineCode","locator","C_TICK","eat","value","silent","length","index","queue","tickQueue","contentQueue","subqueue","count","openingCount","subvalue","character","found","next","charAt","type"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/remark-parse/lib/tokenize/code-inline.js"],"sourcesContent":["'use strict';\n\nvar whitespace = require('is-whitespace-character');\nvar locate = require('../locate/code-inline');\n\nmodule.exports = inlineCode;\ninlineCode.locator = locate;\n\nvar C_TICK = '`';\n\n/* Tokenise inline code. */\nfunction inlineCode(eat, value, silent) {\n  var length = value.length;\n  var index = 0;\n  var queue = '';\n  var tickQueue = '';\n  var contentQueue;\n  var subqueue;\n  var count;\n  var openingCount;\n  var subvalue;\n  var character;\n  var found;\n  var next;\n\n  while (index < length) {\n    if (value.charAt(index) !== C_TICK) {\n      break;\n    }\n\n    queue += C_TICK;\n    index++;\n  }\n\n  if (!queue) {\n    return;\n  }\n\n  subvalue = queue;\n  openingCount = index;\n  queue = '';\n  next = value.charAt(index);\n  count = 0;\n\n  while (index < length) {\n    character = next;\n    next = value.charAt(index + 1);\n\n    if (character === C_TICK) {\n      count++;\n      tickQueue += character;\n    } else {\n      count = 0;\n      queue += character;\n    }\n\n    if (count && next !== C_TICK) {\n      if (count === openingCount) {\n        subvalue += queue + tickQueue;\n        found = true;\n        break;\n      }\n\n      queue += tickQueue;\n      tickQueue = '';\n    }\n\n    index++;\n  }\n\n  if (!found) {\n    if (openingCount % 2 !== 0) {\n      return;\n    }\n\n    queue = '';\n  }\n\n  /* istanbul ignore if - never used (yet) */\n  if (silent) {\n    return true;\n  }\n\n  contentQueue = '';\n  subqueue = '';\n  length = queue.length;\n  index = -1;\n\n  while (++index < length) {\n    character = queue.charAt(index);\n\n    if (whitespace(character)) {\n      subqueue += character;\n      continue;\n    }\n\n    if (subqueue) {\n      if (contentQueue) {\n        contentQueue += subqueue;\n      }\n\n      subqueue = '';\n    }\n\n    contentQueue += character;\n  }\n\n  return eat(subvalue)({\n    type: 'inlineCode',\n    value: contentQueue\n  });\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,UAAU,GAAGC,OAAO,CAAC,yBAAyB,CAAC;AACnD,IAAIC,MAAM,GAAGD,OAAO,CAAC,uBAAuB,CAAC;AAE7CE,MAAM,CAACC,OAAO,GAAGC,UAAU;AAC3BA,UAAU,CAACC,OAAO,GAAGJ,MAAM;AAE3B,IAAIK,MAAM,GAAG,GAAG;;AAEhB;AACA,SAASF,UAAU,CAACG,GAAG,EAAEC,KAAK,EAAEC,MAAM,EAAE;EACtC,IAAIC,MAAM,GAAGF,KAAK,CAACE,MAAM;EACzB,IAAIC,KAAK,GAAG,CAAC;EACb,IAAIC,KAAK,GAAG,EAAE;EACd,IAAIC,SAAS,GAAG,EAAE;EAClB,IAAIC,YAAY;EAChB,IAAIC,QAAQ;EACZ,IAAIC,KAAK;EACT,IAAIC,YAAY;EAChB,IAAIC,QAAQ;EACZ,IAAIC,SAAS;EACb,IAAIC,KAAK;EACT,IAAIC,IAAI;EAER,OAAOV,KAAK,GAAGD,MAAM,EAAE;IACrB,IAAIF,KAAK,CAACc,MAAM,CAACX,KAAK,CAAC,KAAKL,MAAM,EAAE;MAClC;IACF;IAEAM,KAAK,IAAIN,MAAM;IACfK,KAAK,EAAE;EACT;EAEA,IAAI,CAACC,KAAK,EAAE;IACV;EACF;EAEAM,QAAQ,GAAGN,KAAK;EAChBK,YAAY,GAAGN,KAAK;EACpBC,KAAK,GAAG,EAAE;EACVS,IAAI,GAAGb,KAAK,CAACc,MAAM,CAACX,KAAK,CAAC;EAC1BK,KAAK,GAAG,CAAC;EAET,OAAOL,KAAK,GAAGD,MAAM,EAAE;IACrBS,SAAS,GAAGE,IAAI;IAChBA,IAAI,GAAGb,KAAK,CAACc,MAAM,CAACX,KAAK,GAAG,CAAC,CAAC;IAE9B,IAAIQ,SAAS,KAAKb,MAAM,EAAE;MACxBU,KAAK,EAAE;MACPH,SAAS,IAAIM,SAAS;IACxB,CAAC,MAAM;MACLH,KAAK,GAAG,CAAC;MACTJ,KAAK,IAAIO,SAAS;IACpB;IAEA,IAAIH,KAAK,IAAIK,IAAI,KAAKf,MAAM,EAAE;MAC5B,IAAIU,KAAK,KAAKC,YAAY,EAAE;QAC1BC,QAAQ,IAAIN,KAAK,GAAGC,SAAS;QAC7BO,KAAK,GAAG,IAAI;QACZ;MACF;MAEAR,KAAK,IAAIC,SAAS;MAClBA,SAAS,GAAG,EAAE;IAChB;IAEAF,KAAK,EAAE;EACT;EAEA,IAAI,CAACS,KAAK,EAAE;IACV,IAAIH,YAAY,GAAG,CAAC,KAAK,CAAC,EAAE;MAC1B;IACF;IAEAL,KAAK,GAAG,EAAE;EACZ;;EAEA;EACA,IAAIH,MAAM,EAAE;IACV,OAAO,IAAI;EACb;EAEAK,YAAY,GAAG,EAAE;EACjBC,QAAQ,GAAG,EAAE;EACbL,MAAM,GAAGE,KAAK,CAACF,MAAM;EACrBC,KAAK,GAAG,CAAC,CAAC;EAEV,OAAO,EAAEA,KAAK,GAAGD,MAAM,EAAE;IACvBS,SAAS,GAAGP,KAAK,CAACU,MAAM,CAACX,KAAK,CAAC;IAE/B,IAAIZ,UAAU,CAACoB,SAAS,CAAC,EAAE;MACzBJ,QAAQ,IAAII,SAAS;MACrB;IACF;IAEA,IAAIJ,QAAQ,EAAE;MACZ,IAAID,YAAY,EAAE;QAChBA,YAAY,IAAIC,QAAQ;MAC1B;MAEAA,QAAQ,GAAG,EAAE;IACf;IAEAD,YAAY,IAAIK,SAAS;EAC3B;EAEA,OAAOZ,GAAG,CAACW,QAAQ,CAAC,CAAC;IACnBK,IAAI,EAAE,YAAY;IAClBf,KAAK,EAAEM;EACT,CAAC,CAAC;AACJ"},"metadata":{},"sourceType":"script"}