{"ast":null,"code":"var _process$env$REACT_AP;\nimport { Web3Provider } from '@ethersproject/providers';\nimport { InjectedConnector } from '@web3-react/injected-connector';\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector';\nimport { WalletLinkConnector } from '@web3-react/walletlink-connector';\nimport { PortisConnector } from '@web3-react/portis-connector';\nimport { NetworkConnector } from './NetworkConnector';\nconst NETWORK_URL = process.env.REACT_APP_NETWORK_URL;\nconst FORMATIC_KEY = process.env.REACT_APP_FORTMATIC_KEY;\nconst PORTIS_ID = process.env.REACT_APP_PORTIS_ID;\nexport const NETWORK_CHAIN_ID = parseInt((_process$env$REACT_AP = process.env.REACT_APP_CHAIN_ID) !== null && _process$env$REACT_AP !== void 0 ? _process$env$REACT_AP : '1');\nif (typeof NETWORK_URL === 'undefined') {\n  throw new Error(`REACT_APP_NETWORK_URL must be a defined environment variable`);\n}\nexport const network = new NetworkConnector({\n  urls: {\n    [NETWORK_CHAIN_ID]: NETWORK_URL\n  }\n});\nlet networkLibrary;\nexport function getNetworkLibrary() {\n  var _networkLibrary;\n  return networkLibrary = (_networkLibrary = networkLibrary) !== null && _networkLibrary !== void 0 ? _networkLibrary : new Web3Provider(network.provider);\n}\nexport const injected = new InjectedConnector({\n  supportedChainIds: [1, 3, 4, 5, 42]\n});\n\n// mainnet only\nexport const walletconnect = new WalletConnectConnector({\n  rpc: {\n    1: NETWORK_URL\n  },\n  bridge: 'https://bridge.walletconnect.org',\n  qrcode: true,\n  pollingInterval: 15000\n});\n\n// // mainnet only\n// export const fortmatic = new FortmaticConnector({\n//   apiKey: FORMATIC_KEY ?? '',\n//   chainId: 1,\n// })\n\n// mainnet only\nexport const portis = new PortisConnector({\n  dAppId: PORTIS_ID !== null && PORTIS_ID !== void 0 ? PORTIS_ID : '',\n  networks: [1]\n});\n\n// mainnet only\nexport const walletlink = new WalletLinkConnector({\n  url: NETWORK_URL,\n  appName: 'Uniswap',\n  appLogoUrl: 'https://mpng.pngfly.com/20181202/bex/kisspng-emoji-domain-unicorn-pin-badges-sticker-unicorn-tumblr-emoji-unicorn-iphoneemoji-5c046729264a77.5671679315437924251569.jpg'\n});","map":{"version":3,"names":["Web3Provider","InjectedConnector","WalletConnectConnector","WalletLinkConnector","PortisConnector","NetworkConnector","NETWORK_URL","process","env","REACT_APP_NETWORK_URL","FORMATIC_KEY","REACT_APP_FORTMATIC_KEY","PORTIS_ID","REACT_APP_PORTIS_ID","NETWORK_CHAIN_ID","parseInt","REACT_APP_CHAIN_ID","Error","network","urls","networkLibrary","getNetworkLibrary","provider","injected","supportedChainIds","walletconnect","rpc","bridge","qrcode","pollingInterval","portis","dAppId","networks","walletlink","url","appName","appLogoUrl"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/connectors/index.ts"],"sourcesContent":["import { Web3Provider } from '@ethersproject/providers'\nimport { InjectedConnector } from '@web3-react/injected-connector'\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector'\nimport { WalletLinkConnector } from '@web3-react/walletlink-connector'\nimport { PortisConnector } from '@web3-react/portis-connector'\n\nimport { FortmaticConnector } from './Fortmatic'\nimport { NetworkConnector } from './NetworkConnector'\n\nconst NETWORK_URL = process.env.REACT_APP_NETWORK_URL\nconst FORMATIC_KEY = process.env.REACT_APP_FORTMATIC_KEY\nconst PORTIS_ID = process.env.REACT_APP_PORTIS_ID\n\nexport const NETWORK_CHAIN_ID: number = parseInt(process.env.REACT_APP_CHAIN_ID ?? '1')\n\nif (typeof NETWORK_URL === 'undefined') {\n  throw new Error(`REACT_APP_NETWORK_URL must be a defined environment variable`)\n}\n\nexport const network = new NetworkConnector({\n  urls: { [NETWORK_CHAIN_ID]: NETWORK_URL },\n})\n\nlet networkLibrary: Web3Provider | undefined\nexport function getNetworkLibrary(): Web3Provider {\n  return (networkLibrary = networkLibrary ?? new Web3Provider(network.provider as any))\n}\n\nexport const injected = new InjectedConnector({\n  supportedChainIds: [1, 3, 4, 5, 42],\n})\n\n// mainnet only\nexport const walletconnect = new WalletConnectConnector({\n  rpc: { 1: NETWORK_URL },\n  bridge: 'https://bridge.walletconnect.org',\n  qrcode: true,\n  pollingInterval: 15000,\n})\n\n// // mainnet only\n// export const fortmatic = new FortmaticConnector({\n//   apiKey: FORMATIC_KEY ?? '',\n//   chainId: 1,\n// })\n\n// mainnet only\nexport const portis = new PortisConnector({\n  dAppId: PORTIS_ID ?? '',\n  networks: [1],\n})\n\n// mainnet only\nexport const walletlink = new WalletLinkConnector({\n  url: NETWORK_URL,\n  appName: 'Uniswap',\n  appLogoUrl:\n    'https://mpng.pngfly.com/20181202/bex/kisspng-emoji-domain-unicorn-pin-badges-sticker-unicorn-tumblr-emoji-unicorn-iphoneemoji-5c046729264a77.5671679315437924251569.jpg',\n})"],"mappings":";AAAA,SAASA,YAAY,QAAQ,0BAA0B;AACvD,SAASC,iBAAiB,QAAQ,gCAAgC;AAClE,SAASC,sBAAsB,QAAQ,qCAAqC;AAC5E,SAASC,mBAAmB,QAAQ,kCAAkC;AACtE,SAASC,eAAe,QAAQ,8BAA8B;AAG9D,SAASC,gBAAgB,QAAQ,oBAAoB;AAErD,MAAMC,WAAW,GAAGC,OAAO,CAACC,GAAG,CAACC,qBAAqB;AACrD,MAAMC,YAAY,GAAGH,OAAO,CAACC,GAAG,CAACG,uBAAuB;AACxD,MAAMC,SAAS,GAAGL,OAAO,CAACC,GAAG,CAACK,mBAAmB;AAEjD,OAAO,MAAMC,gBAAwB,GAAGC,QAAQ,0BAACR,OAAO,CAACC,GAAG,CAACQ,kBAAkB,yEAAI,GAAG,CAAC;AAEvF,IAAI,OAAOV,WAAW,KAAK,WAAW,EAAE;EACtC,MAAM,IAAIW,KAAK,CAAE,8DAA6D,CAAC;AACjF;AAEA,OAAO,MAAMC,OAAO,GAAG,IAAIb,gBAAgB,CAAC;EAC1Cc,IAAI,EAAE;IAAE,CAACL,gBAAgB,GAAGR;EAAY;AAC1C,CAAC,CAAC;AAEF,IAAIc,cAAwC;AAC5C,OAAO,SAASC,iBAAiB,GAAiB;EAAA;EAChD,OAAQD,cAAc,sBAAGA,cAAc,6DAAI,IAAIpB,YAAY,CAACkB,OAAO,CAACI,QAAQ,CAAQ;AACtF;AAEA,OAAO,MAAMC,QAAQ,GAAG,IAAItB,iBAAiB,CAAC;EAC5CuB,iBAAiB,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE;AACpC,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,aAAa,GAAG,IAAIvB,sBAAsB,CAAC;EACtDwB,GAAG,EAAE;IAAE,CAAC,EAAEpB;EAAY,CAAC;EACvBqB,MAAM,EAAE,kCAAkC;EAC1CC,MAAM,EAAE,IAAI;EACZC,eAAe,EAAE;AACnB,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAO,MAAMC,MAAM,GAAG,IAAI1B,eAAe,CAAC;EACxC2B,MAAM,EAAEnB,SAAS,aAATA,SAAS,cAATA,SAAS,GAAI,EAAE;EACvBoB,QAAQ,EAAE,CAAC,CAAC;AACd,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,UAAU,GAAG,IAAI9B,mBAAmB,CAAC;EAChD+B,GAAG,EAAE5B,WAAW;EAChB6B,OAAO,EAAE,SAAS;EAClBC,UAAU,EACR;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module"}