{"ast":null,"code":"import { __assign, __awaiter, __extends, __generator } from \"tslib\";\nimport { AmplitudeCore, Destination, Identify, Revenue, UUID, returnWrapper, debugWrapper, getClientLogConfig, getClientStates } from '@amplitude/analytics-core';\nimport { CampaignTracker, getAnalyticsConnector, IdentityEventSender } from '@amplitude/analytics-client-common';\nimport { convertProxyObjectToRealObject, isInstanceProxy } from './utils/snippet-helper';\nimport { Context } from './plugins/context';\nimport { useBrowserConfig, createTransport, createFlexibleStorage } from './config';\nimport { parseOldCookies } from './cookie-migration';\nvar AmplitudeBrowser = /** @class */function (_super) {\n  __extends(AmplitudeBrowser, _super);\n  function AmplitudeBrowser() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  AmplitudeBrowser.prototype.init = function (apiKey, userId, options) {\n    var _a, _b, _c;\n    if (apiKey === void 0) {\n      apiKey = '';\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      var oldCookies, browserOptions, isNewSession, connector;\n      var _this = this;\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            // Step 0: Block concurrent initialization\n            if (this.initializing) {\n              return [2 /*return*/];\n            }\n\n            this.initializing = true;\n            return [4 /*yield*/, parseOldCookies(apiKey, options)];\n          case 1:\n            oldCookies = _d.sent();\n            return [4 /*yield*/, useBrowserConfig(apiKey, userId || oldCookies.userId, __assign(__assign({}, options), {\n              deviceId: (_a = oldCookies.deviceId) !== null && _a !== void 0 ? _a : options === null || options === void 0 ? void 0 : options.deviceId,\n              sessionId: (_b = oldCookies.sessionId) !== null && _b !== void 0 ? _b : options === null || options === void 0 ? void 0 : options.sessionId,\n              optOut: (_c = options === null || options === void 0 ? void 0 : options.optOut) !== null && _c !== void 0 ? _c : oldCookies.optOut,\n              lastEventTime: oldCookies.lastEventTime\n            }))];\n          case 2:\n            browserOptions = _d.sent();\n            return [4 /*yield*/, _super.prototype._init.call(this, browserOptions)];\n          case 3:\n            _d.sent();\n            isNewSession = !this.config.lastEventTime;\n            if (!this.config.sessionId || this.config.lastEventTime && Date.now() - this.config.lastEventTime > this.config.sessionTimeout) {\n              // Either\n              // 1) No previous session; or\n              // 2) Previous session expired\n              this.setSessionId(Date.now());\n              isNewSession = true;\n            }\n            connector = getAnalyticsConnector();\n            connector.eventBridge.setEventReceiver(function (event) {\n              void _this.track(event.eventType, event.eventProperties);\n            });\n            connector.identityStore.setIdentity({\n              userId: this.config.userId,\n              deviceId: this.config.deviceId\n            });\n            // Step 4: Install plugins\n            // Do not track any events before this\n            return [4 /*yield*/, this.add(new Context())];\n          case 4:\n            // Step 4: Install plugins\n            // Do not track any events before this\n            _d.sent();\n            return [4 /*yield*/, this.add(new IdentityEventSender())];\n          case 5:\n            _d.sent();\n            return [4 /*yield*/, this.add(new Destination())];\n          case 6:\n            _d.sent();\n            this.initializing = false;\n            // Step 5: Track attributions\n            return [4 /*yield*/, this.runAttributionStrategy(browserOptions.attribution, isNewSession)];\n          case 7:\n            // Step 5: Track attributions\n            _d.sent();\n            // Step 6: Run queued dispatch functions\n            return [4 /*yield*/, this.runQueuedFunctions('dispatchQ')];\n          case 8:\n            // Step 6: Run queued dispatch functions\n            _d.sent();\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AmplitudeBrowser.prototype.runAttributionStrategy = function (attributionConfig, isNewSession) {\n    if (isNewSession === void 0) {\n      isNewSession = false;\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      var track, onNewCampaign, storage, campaignTracker;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            track = this.track.bind(this);\n            onNewCampaign = this.setSessionId.bind(this, Date.now());\n            return [4 /*yield*/, createFlexibleStorage(this.config)];\n          case 1:\n            storage = _a.sent();\n            campaignTracker = new CampaignTracker(this.config.apiKey, __assign(__assign({}, attributionConfig), {\n              storage: storage,\n              track: track,\n              onNewCampaign: onNewCampaign\n            }));\n            return [4 /*yield*/, campaignTracker.send(isNewSession)];\n          case 2:\n            _a.sent();\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AmplitudeBrowser.prototype.getUserId = function () {\n    var _a;\n    return (_a = this.config) === null || _a === void 0 ? void 0 : _a.userId;\n  };\n  AmplitudeBrowser.prototype.setUserId = function (userId) {\n    if (!this.config) {\n      this.q.push(this.setUserId.bind(this, userId));\n      return;\n    }\n    this.config.userId = userId;\n  };\n  AmplitudeBrowser.prototype.getDeviceId = function () {\n    var _a;\n    return (_a = this.config) === null || _a === void 0 ? void 0 : _a.deviceId;\n  };\n  AmplitudeBrowser.prototype.setDeviceId = function (deviceId) {\n    if (!this.config) {\n      this.q.push(this.setDeviceId.bind(this, deviceId));\n      return;\n    }\n    this.config.deviceId = deviceId;\n  };\n  AmplitudeBrowser.prototype.reset = function () {\n    this.setUserId(undefined);\n    this.setDeviceId(UUID());\n  };\n  AmplitudeBrowser.prototype.getSessionId = function () {\n    var _a;\n    return (_a = this.config) === null || _a === void 0 ? void 0 : _a.sessionId;\n  };\n  AmplitudeBrowser.prototype.setSessionId = function (sessionId) {\n    if (!this.config) {\n      this.q.push(this.setSessionId.bind(this, sessionId));\n      return;\n    }\n    this.config.sessionId = sessionId;\n    this.config.lastEventTime = undefined;\n  };\n  AmplitudeBrowser.prototype.setTransport = function (transport) {\n    if (!this.config) {\n      this.q.push(this.setTransport.bind(this, transport));\n      return;\n    }\n    this.config.transportProvider = createTransport(transport);\n  };\n  AmplitudeBrowser.prototype.identify = function (identify, eventOptions) {\n    if (isInstanceProxy(identify)) {\n      var queue = identify._q;\n      identify._q = [];\n      identify = convertProxyObjectToRealObject(new Identify(), queue);\n    }\n    if (eventOptions === null || eventOptions === void 0 ? void 0 : eventOptions.user_id) {\n      this.setUserId(eventOptions.user_id);\n    }\n    if (eventOptions === null || eventOptions === void 0 ? void 0 : eventOptions.device_id) {\n      this.setDeviceId(eventOptions.device_id);\n    }\n    return _super.prototype.identify.call(this, identify, eventOptions);\n  };\n  AmplitudeBrowser.prototype.groupIdentify = function (groupType, groupName, identify, eventOptions) {\n    if (isInstanceProxy(identify)) {\n      var queue = identify._q;\n      identify._q = [];\n      identify = convertProxyObjectToRealObject(new Identify(), queue);\n    }\n    return _super.prototype.groupIdentify.call(this, groupType, groupName, identify, eventOptions);\n  };\n  AmplitudeBrowser.prototype.revenue = function (revenue, eventOptions) {\n    if (isInstanceProxy(revenue)) {\n      var queue = revenue._q;\n      revenue._q = [];\n      revenue = convertProxyObjectToRealObject(new Revenue(), queue);\n    }\n    return _super.prototype.revenue.call(this, revenue, eventOptions);\n  };\n  return AmplitudeBrowser;\n}(AmplitudeCore);\nexport { AmplitudeBrowser };\nexport var createInstance = function () {\n  var client = new AmplitudeBrowser();\n  return {\n    init: debugWrapper(returnWrapper(client.init.bind(client)), 'init', getClientLogConfig(client), getClientStates(client, ['config'])),\n    add: debugWrapper(returnWrapper(client.add.bind(client)), 'add', getClientLogConfig(client), getClientStates(client, ['config.apiKey', 'timeline.plugins'])),\n    remove: debugWrapper(returnWrapper(client.remove.bind(client)), 'remove', getClientLogConfig(client), getClientStates(client, ['config.apiKey', 'timeline.plugins'])),\n    track: debugWrapper(returnWrapper(client.track.bind(client)), 'track', getClientLogConfig(client), getClientStates(client, ['config.apiKey', 'timeline.queue.length'])),\n    logEvent: debugWrapper(returnWrapper(client.logEvent.bind(client)), 'logEvent', getClientLogConfig(client), getClientStates(client, ['config.apiKey', 'timeline.queue.length'])),\n    identify: debugWrapper(returnWrapper(client.identify.bind(client)), 'identify', getClientLogConfig(client), getClientStates(client, ['config.apiKey', 'timeline.queue.length'])),\n    groupIdentify: debugWrapper(returnWrapper(client.groupIdentify.bind(client)), 'groupIdentify', getClientLogConfig(client), getClientStates(client, ['config.apiKey', 'timeline.queue.length'])),\n    setGroup: debugWrapper(returnWrapper(client.setGroup.bind(client)), 'setGroup', getClientLogConfig(client), getClientStates(client, ['config.apiKey', 'timeline.queue.length'])),\n    revenue: debugWrapper(returnWrapper(client.revenue.bind(client)), 'revenue', getClientLogConfig(client), getClientStates(client, ['config.apiKey', 'timeline.queue.length'])),\n    flush: debugWrapper(returnWrapper(client.flush.bind(client)), 'flush', getClientLogConfig(client), getClientStates(client, ['config.apiKey', 'timeline.queue.length'])),\n    getUserId: debugWrapper(client.getUserId.bind(client), 'getUserId', getClientLogConfig(client), getClientStates(client, ['config', 'config.userId'])),\n    setUserId: debugWrapper(client.setUserId.bind(client), 'setUserId', getClientLogConfig(client), getClientStates(client, ['config', 'config.userId'])),\n    getDeviceId: debugWrapper(client.getDeviceId.bind(client), 'getDeviceId', getClientLogConfig(client), getClientStates(client, ['config', 'config.deviceId'])),\n    setDeviceId: debugWrapper(client.setDeviceId.bind(client), 'setDeviceId', getClientLogConfig(client), getClientStates(client, ['config', 'config.deviceId'])),\n    reset: debugWrapper(client.reset.bind(client), 'reset', getClientLogConfig(client), getClientStates(client, ['config', 'config.userId', 'config.deviceId'])),\n    getSessionId: debugWrapper(client.getSessionId.bind(client), 'getSessionId', getClientLogConfig(client), getClientStates(client, ['config'])),\n    setSessionId: debugWrapper(client.setSessionId.bind(client), 'setSessionId', getClientLogConfig(client), getClientStates(client, ['config'])),\n    setOptOut: debugWrapper(client.setOptOut.bind(client), 'setOptOut', getClientLogConfig(client), getClientStates(client, ['config'])),\n    setTransport: debugWrapper(client.setTransport.bind(client), 'setTransport', getClientLogConfig(client), getClientStates(client, ['config']))\n  };\n};\nexport default createInstance();","map":{"version":3,"sources":["../../src/browser-client.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  AmplitudeCore,\n  Destination,\n  Identify,\n  Revenue,\n  UUID,\n  returnWrapper,\n  debugWrapper,\n  getClientLogConfig,\n  getClientStates,\n} from '@amplitude/analytics-core';\nimport { CampaignTracker, getAnalyticsConnector, IdentityEventSender } from '@amplitude/analytics-client-common';\nimport {\n  AttributionOptions,\n  BrowserClient,\n  BrowserConfig,\n  BrowserOptions,\n  Campaign,\n  EventOptions,\n  Identify as IIdentify,\n  Result,\n  Revenue as IRevenue,\n  TransportType,\n} from '@amplitude/analytics-types';\nimport { convertProxyObjectToRealObject, isInstanceProxy } from './utils/snippet-helper';\nimport { Context } from './plugins/context';\nimport { useBrowserConfig, createTransport, createFlexibleStorage } from './config';\nimport { parseOldCookies } from './cookie-migration';\n\nexport class AmplitudeBrowser extends AmplitudeCore<BrowserConfig> {\n  async init(apiKey = '', userId?: string, options?: BrowserOptions) {\n    // Step 0: Block concurrent initialization\n    if (this.initializing) {\n      return;\n    }\n    this.initializing = true;\n\n    // Step 1: Read cookies stored by old SDK\n    const oldCookies = await parseOldCookies(apiKey, options);\n\n    // Step 2: Create browser config\n    const browserOptions = await useBrowserConfig(apiKey, userId || oldCookies.userId, {\n      ...options,\n      deviceId: oldCookies.deviceId ?? options?.deviceId,\n      sessionId: oldCookies.sessionId ?? options?.sessionId,\n      optOut: options?.optOut ?? oldCookies.optOut,\n      lastEventTime: oldCookies.lastEventTime,\n    });\n\n    await super._init(browserOptions);\n\n    // Step 3: Manage session\n    let isNewSession = !this.config.lastEventTime;\n    if (\n      !this.config.sessionId ||\n      (this.config.lastEventTime && Date.now() - this.config.lastEventTime > this.config.sessionTimeout)\n    ) {\n      // Either\n      // 1) No previous session; or\n      // 2) Previous session expired\n      this.setSessionId(Date.now());\n      isNewSession = true;\n    }\n\n    // Set up the analytics connector to integrate with the experiment SDK.\n    // Send events from the experiment SDK and forward identifies to the\n    // identity store.\n    const connector = getAnalyticsConnector();\n    connector.eventBridge.setEventReceiver((event) => {\n      void this.track(event.eventType, event.eventProperties);\n    });\n    connector.identityStore.setIdentity({\n      userId: this.config.userId,\n      deviceId: this.config.deviceId,\n    });\n\n    // Step 4: Install plugins\n    // Do not track any events before this\n    await this.add(new Context());\n    await this.add(new IdentityEventSender());\n    await this.add(new Destination());\n\n    this.initializing = false;\n\n    // Step 5: Track attributions\n    await this.runAttributionStrategy(browserOptions.attribution, isNewSession);\n\n    // Step 6: Run queued dispatch functions\n    await this.runQueuedFunctions('dispatchQ');\n  }\n\n  async runAttributionStrategy(attributionConfig?: AttributionOptions, isNewSession = false) {\n    const track = this.track.bind(this);\n    const onNewCampaign = this.setSessionId.bind(this, Date.now());\n\n    const storage = await createFlexibleStorage<Campaign>(this.config);\n    const campaignTracker = new CampaignTracker(this.config.apiKey, {\n      ...attributionConfig,\n      storage,\n      track,\n      onNewCampaign,\n    });\n\n    await campaignTracker.send(isNewSession);\n  }\n\n  getUserId() {\n    return this.config?.userId;\n  }\n\n  setUserId(userId: string | undefined) {\n    if (!this.config) {\n      this.q.push(this.setUserId.bind(this, userId));\n      return;\n    }\n    this.config.userId = userId;\n  }\n\n  getDeviceId() {\n    return this.config?.deviceId;\n  }\n\n  setDeviceId(deviceId: string) {\n    if (!this.config) {\n      this.q.push(this.setDeviceId.bind(this, deviceId));\n      return;\n    }\n    this.config.deviceId = deviceId;\n  }\n\n  reset() {\n    this.setUserId(undefined);\n    this.setDeviceId(UUID());\n  }\n\n  getSessionId() {\n    return this.config?.sessionId;\n  }\n\n  setSessionId(sessionId: number) {\n    if (!this.config) {\n      this.q.push(this.setSessionId.bind(this, sessionId));\n      return;\n    }\n    this.config.sessionId = sessionId;\n    this.config.lastEventTime = undefined;\n  }\n\n  setTransport(transport: TransportType) {\n    if (!this.config) {\n      this.q.push(this.setTransport.bind(this, transport));\n      return;\n    }\n    this.config.transportProvider = createTransport(transport);\n  }\n\n  identify(identify: IIdentify, eventOptions?: EventOptions): Promise<Result> {\n    if (isInstanceProxy(identify)) {\n      const queue = identify._q;\n      identify._q = [];\n      identify = convertProxyObjectToRealObject(new Identify(), queue);\n    }\n    if (eventOptions?.user_id) {\n      this.setUserId(eventOptions.user_id);\n    }\n    if (eventOptions?.device_id) {\n      this.setDeviceId(eventOptions.device_id);\n    }\n    return super.identify(identify, eventOptions);\n  }\n\n  groupIdentify(\n    groupType: string,\n    groupName: string | string[],\n    identify: IIdentify,\n    eventOptions?: EventOptions,\n  ): Promise<Result> {\n    if (isInstanceProxy(identify)) {\n      const queue = identify._q;\n      identify._q = [];\n      identify = convertProxyObjectToRealObject(new Identify(), queue);\n    }\n    return super.groupIdentify(groupType, groupName, identify, eventOptions);\n  }\n\n  revenue(revenue: IRevenue, eventOptions?: EventOptions) {\n    if (isInstanceProxy(revenue)) {\n      const queue = revenue._q;\n      revenue._q = [];\n      revenue = convertProxyObjectToRealObject(new Revenue(), queue);\n    }\n    return super.revenue(revenue, eventOptions);\n  }\n}\n\nexport const createInstance = (): BrowserClient => {\n  const client = new AmplitudeBrowser();\n  return {\n    init: debugWrapper(\n      returnWrapper(client.init.bind(client)),\n      'init',\n      getClientLogConfig(client),\n      getClientStates(client, ['config']),\n    ),\n    add: debugWrapper(\n      returnWrapper(client.add.bind(client)),\n      'add',\n      getClientLogConfig(client),\n      getClientStates(client, ['config.apiKey', 'timeline.plugins']),\n    ),\n    remove: debugWrapper(\n      returnWrapper(client.remove.bind(client)),\n      'remove',\n      getClientLogConfig(client),\n      getClientStates(client, ['config.apiKey', 'timeline.plugins']),\n    ),\n    track: debugWrapper(\n      returnWrapper(client.track.bind(client)),\n      'track',\n      getClientLogConfig(client),\n      getClientStates(client, ['config.apiKey', 'timeline.queue.length']),\n    ),\n    logEvent: debugWrapper(\n      returnWrapper(client.logEvent.bind(client)),\n      'logEvent',\n      getClientLogConfig(client),\n      getClientStates(client, ['config.apiKey', 'timeline.queue.length']),\n    ),\n    identify: debugWrapper(\n      returnWrapper(client.identify.bind(client)),\n      'identify',\n      getClientLogConfig(client),\n      getClientStates(client, ['config.apiKey', 'timeline.queue.length']),\n    ),\n    groupIdentify: debugWrapper(\n      returnWrapper(client.groupIdentify.bind(client)),\n      'groupIdentify',\n      getClientLogConfig(client),\n      getClientStates(client, ['config.apiKey', 'timeline.queue.length']),\n    ),\n    setGroup: debugWrapper(\n      returnWrapper(client.setGroup.bind(client)),\n      'setGroup',\n      getClientLogConfig(client),\n      getClientStates(client, ['config.apiKey', 'timeline.queue.length']),\n    ),\n    revenue: debugWrapper(\n      returnWrapper(client.revenue.bind(client)),\n      'revenue',\n      getClientLogConfig(client),\n      getClientStates(client, ['config.apiKey', 'timeline.queue.length']),\n    ),\n    flush: debugWrapper(\n      returnWrapper(client.flush.bind(client)),\n      'flush',\n      getClientLogConfig(client),\n      getClientStates(client, ['config.apiKey', 'timeline.queue.length']),\n    ),\n    getUserId: debugWrapper(\n      client.getUserId.bind(client),\n      'getUserId',\n      getClientLogConfig(client),\n      getClientStates(client, ['config', 'config.userId']),\n    ),\n    setUserId: debugWrapper(\n      client.setUserId.bind(client),\n      'setUserId',\n      getClientLogConfig(client),\n      getClientStates(client, ['config', 'config.userId']),\n    ),\n    getDeviceId: debugWrapper(\n      client.getDeviceId.bind(client),\n      'getDeviceId',\n      getClientLogConfig(client),\n      getClientStates(client, ['config', 'config.deviceId']),\n    ),\n    setDeviceId: debugWrapper(\n      client.setDeviceId.bind(client),\n      'setDeviceId',\n      getClientLogConfig(client),\n      getClientStates(client, ['config', 'config.deviceId']),\n    ),\n    reset: debugWrapper(\n      client.reset.bind(client),\n      'reset',\n      getClientLogConfig(client),\n      getClientStates(client, ['config', 'config.userId', 'config.deviceId']),\n    ),\n    getSessionId: debugWrapper(\n      client.getSessionId.bind(client),\n      'getSessionId',\n      getClientLogConfig(client),\n      getClientStates(client, ['config']),\n    ),\n    setSessionId: debugWrapper(\n      client.setSessionId.bind(client),\n      'setSessionId',\n      getClientLogConfig(client),\n      getClientStates(client, ['config']),\n    ),\n    setOptOut: debugWrapper(\n      client.setOptOut.bind(client),\n      'setOptOut',\n      getClientLogConfig(client),\n      getClientStates(client, ['config']),\n    ),\n    setTransport: debugWrapper(\n      client.setTransport.bind(client),\n      'setTransport',\n      getClientLogConfig(client),\n      getClientStates(client, ['config']),\n    ),\n  };\n};\n\nexport default createInstance();\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}