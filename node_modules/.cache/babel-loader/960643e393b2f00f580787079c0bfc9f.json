{"ast":null,"code":"import { BigNumber, ethers } from 'ethers';\nimport { walletContracts } from '@0xsequence/abi';\nimport { getRandomInt, promisify } from '@0xsequence/utils';\nimport { sequenceContext, JsonRpcVersion } from '@0xsequence/network';\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nlet JsonRpcMethod;\n(function (JsonRpcMethod) {\n  JsonRpcMethod[\"ethCall\"] = \"eth_call\";\n  JsonRpcMethod[\"ethGetBalance\"] = \"eth_getBalance\";\n  JsonRpcMethod[\"ethGetCode\"] = \"eth_getCode\";\n})(JsonRpcMethod || (JsonRpcMethod = {}));\nasync function safeSolve(promise, def) {\n  try {\n    return await promise;\n  } catch (e) {\n    const d = def instanceof Function ? def(e) : def;\n    return d;\n  }\n}\nfunction partition(array, callback) {\n  return array.reduce(function (result, element, i) {\n    callback(element, i) ? result[0].push(element) : result[1].push(element);\n    return result;\n  }, [[], []]);\n}\nfunction parseBlockTag(cand) {\n  if (cand === undefined) return 'latest';\n  switch (cand) {\n    case 'earliest':\n    case 'latest':\n    case 'pending':\n      return cand;\n  }\n  return BigNumber.from(cand);\n}\nfunction eqBlockTag(a, b) {\n  if (a === b) return true;\n  if (BigNumber.isBigNumber(a)) {\n    if (BigNumber.isBigNumber(b)) return a.eq(b);\n    return false;\n  }\n  if (BigNumber.isBigNumber(b)) return false;\n  return a === b;\n}\nconst DefaultMulticallOptions = {\n  batchSize: 50,\n  timeWindow: 50,\n  contract: sequenceContext.sequenceUtils,\n  verbose: false\n};\nclass Multicall {\n  constructor(options) {\n    var _this = this;\n    this.batchableJsonRpcMethods = [JsonRpcMethod.ethCall, JsonRpcMethod.ethGetCode, JsonRpcMethod.ethGetBalance];\n    this.multicallInterface = new ethers.utils.Interface(walletContracts.sequenceUtils.abi);\n    this.options = void 0;\n    this.timeout = void 0;\n    this.queue = [];\n    this.scheduleExecution = () => {\n      if (this.queue.length > 0) {\n        if (this.timeout) clearTimeout(this.timeout);\n        this.timeout = setTimeout(this.run, this.options.timeWindow);\n      }\n    };\n    this.handle = (next, request, callback) => {\n      // Schedule for batching and return\n      if (this.batchableJsonRpcMethods.find(m => m === request.method)) {\n        this.queue.push({\n          request: request,\n          callback: callback,\n          next: next\n        });\n        if (this.options.verbose) console.log('Scheduling call', request.method);\n        this.scheduleExecution();\n        return;\n      }\n      if (this.options.verbose) console.log('Forwarded call', request.method); // Move to next handler\n\n      return next(request, callback);\n    };\n    this.run = async function () {\n      /* eslint-disable no-var */\n      if (_this.options.verbose) console.log('Processing multicall'); // Read items from queue\n\n      const limit = Math.min(_this.options.batchSize, _this.queue.length);\n      if (limit === 0) return; // Skip multicall on single item\n\n      if (limit === 1) {\n        _this.forward(_this.queue[0]);\n        _this.queue = [];\n        if (_this.options.verbose) console.log('Skip multicall, single item');\n        return;\n      }\n      if (_this.options.verbose) console.log('Resolving', limit); // Get batch from queue\n\n      var items = _this.queue.slice(0, limit); // Update queue\n\n      _this.queue = limit === _this.queue.length ? [] : _this.queue.slice(limit);\n      if (_this.options.verbose) console.log('Updated queue', _this.queue.length);\n      if (_this.queue.length !== 0) {\n        _this.scheduleExecution();\n      } // Get next candidate\n\n      const next = items[0].next;\n      let blockTag; // Partition incompatible calls\n\n      var [items, discartItems] = partition(items, item => {\n        try {\n          // Mixed next callbacks\n          if (item.next !== next) return false;\n          switch (item.request.method) {\n            case JsonRpcMethod.ethCall:\n              // Unsupported eth_call parameters\n              if (item.request.params[0].from || item.request.params[0].gasPrice || item.request.params[0].value) {\n                return false;\n              }\n            case JsonRpcMethod.ethGetBalance:\n            case JsonRpcMethod.ethGetCode:\n              // Mixed blockTags\n              const itemBlockTag = parseBlockTag(item.request.params[1]);\n              if (blockTag === undefined) blockTag = itemBlockTag;\n              if (!eqBlockTag(itemBlockTag, blockTag)) return false;\n          }\n          return true;\n        } catch (_unused) {\n          return false;\n        }\n      }); // Forward discarted items\n      // end execution if no items remain\n\n      if (discartItems.length !== 0) {\n        if (_this.options.verbose) console.log('Forwarding incompatible calls', discartItems.length);\n        _this.forward(discartItems);\n        if (items.length === 0) return;\n      } // Aggregate all calls\n\n      let callParams = items.map(v => {\n        try {\n          switch (v.request.method) {\n            case JsonRpcMethod.ethCall:\n              return {\n                delegateCall: false,\n                revertOnError: false,\n                target: v.request.params[0].to,\n                data: v.request.params[0].data,\n                gasLimit: v.request.params[0].gas ? v.request.params[0].gas : 0,\n                value: 0\n              };\n            case JsonRpcMethod.ethGetCode:\n              return {\n                delegateCall: false,\n                revertOnError: false,\n                target: _this.options.contract,\n                gasLimit: 0,\n                value: 0,\n                data: _this.multicallInterface.encodeFunctionData(_this.multicallInterface.getFunction('callCode'), [v.request.params[0]])\n              };\n            case JsonRpcMethod.ethGetBalance:\n              return {\n                delegateCall: false,\n                revertOnError: false,\n                target: _this.options.contract,\n                gasLimit: 0,\n                value: 0,\n                data: _this.multicallInterface.encodeFunctionData(_this.multicallInterface.getFunction('callBalanceOf'), [v.request.params[0]])\n              };\n            default:\n              return null;\n          }\n        } catch (_unused2) {\n          return null;\n        }\n      }); // Filter calls with enconding errors and forward items\n\n      var [items, discartItems] = partition(items, (_, i) => callParams[i] !== undefined);\n      callParams = callParams.filter(c => c);\n      if (discartItems.length !== 0) {\n        if (_this.options.verbose) console.log('Forwarding calls on error', discartItems.length);\n        _this.forward(discartItems);\n        if (items.length === 0) return;\n      } // Encode multicall\n\n      let encodedCall;\n      try {\n        encodedCall = _this.multicallInterface.encodeFunctionData(_this.multicallInterface.getFunction('multiCall'), [callParams]);\n      } catch (_unused3) {\n        _this.forward(items);\n        return;\n      } // Forward single multicall rpc call\n\n      const reqId = getRandomInt(); // TODO: fix types below..\n\n      const res = await safeSolve(\n      // @ts-ignore\n      promisify(next)({\n        id: reqId,\n        jsonrpc: JsonRpcVersion,\n        method: JsonRpcMethod.ethCall,\n        params: [{\n          to: _this.options.contract,\n          value: 0,\n          data: encodedCall\n        }, BigNumber.isBigNumber(blockTag) ? blockTag.toNumber() : blockTag] // @ts-ignore\n      }), e => ({\n        jsonrpc: JsonRpcVersion,\n        id: reqId,\n        result: undefined,\n        error: e\n      })); // Error calling multicall\n      // Forward all calls to middleware\n      // @ts-ignore\n\n      if (res.error) {\n        return _this.forward(items);\n      } // Decode result from multicall\n\n      let decoded;\n      try {\n        // @ts-ignore\n        decoded = _this.multicallInterface.decodeFunctionResult(_this.multicallInterface.getFunction('multiCall'), res.result);\n      } catch (_unused4) {\n        _this.forward(items);\n        return;\n      } // Send results for each request\n      // errors fallback through the middleware\n\n      if (_this.options.verbose) console.log('Got response for', items.length);\n      items.forEach((item, index) => {\n        if (!decoded[0][index]) {\n          _this.forward(item);\n        } else {\n          switch (item.request.method) {\n            case JsonRpcMethod.ethCall:\n              item.callback(undefined, {\n                jsonrpc: item.request.jsonrpc,\n                id: item.request.id,\n                result: decoded[1][index]\n              });\n              break;\n            case JsonRpcMethod.ethGetCode:\n              item.callback(undefined, {\n                jsonrpc: item.request.jsonrpc,\n                id: item.request.id,\n                result: ethers.utils.defaultAbiCoder.decode(['bytes'], decoded[1][index])[0]\n              });\n              break;\n            case JsonRpcMethod.ethGetBalance:\n              item.callback(undefined, {\n                jsonrpc: item.request.jsonrpc,\n                id: item.request.id,\n                result: ethers.utils.defaultAbiCoder.decode(['uint256'], decoded[1][index])[0]\n              });\n              break;\n          }\n        }\n      });\n    };\n    this.options = options ? _extends({}, Multicall.DefaultOptions, options) : Multicall.DefaultOptions;\n    if (this.options.batchSize <= 0) throw new Error(`Invalid batch size of ${this.options.batchSize}`);\n  }\n  forward(entries) {\n    if (Array.isArray(entries)) {\n      entries.forEach(e => e.next(e.request, e.callback));\n    } else {\n      entries.next(entries.request, entries.callback);\n    }\n  }\n  static isMulticall(cand) {\n    return cand && cand.handle !== undefined && cand.conf !== undefined && Multicall.isMulticallOptions(cand.options);\n  }\n  static isMulticallOptions(cand) {\n    return cand !== undefined && cand.batchSize !== undefined && cand.timeWindow !== undefined && cand.contract !== undefined;\n  }\n}\nMulticall.DefaultOptions = _extends({}, DefaultMulticallOptions);\nconst ProxyMethods = ['getNetwork', 'getBlockNumber', 'getGasPrice', 'getTransactionCount', 'getStorageAt', 'sendTransaction', 'estimateGas', 'getBlock', 'getTransaction', 'getTransactionReceipt', 'getLogs', 'emit', 'litenerCount', 'addListener', 'removeListener', 'waitForTransaction', 'detectNetwork', 'getBlockWithTransactions'];\nclass MulticallProvider extends ethers.providers.BaseProvider {\n  constructor(provider, multicall) {\n    var _this;\n    super(provider.getNetwork());\n    _this = this;\n    this.provider = provider;\n    this.multicall = void 0;\n    this.listenerCount = this.provider.listenerCount;\n    this.getResolver = async function (name) {\n      const provider = _this.provider;\n      if (provider.getResolver) {\n        const ogResolver = await provider.getResolver(await name);\n        if (!ogResolver) return null;\n        return new ethers.providers.Resolver(_this, ogResolver.address, ogResolver.name);\n      }\n      return provider.getResolver(await name);\n    };\n    this.next = async function (req, callback) {\n      try {\n        switch (req.method) {\n          case JsonRpcMethod.ethCall:\n            _this.callback(req, callback, await _this.provider.call(req.params[0], req.params[1]));\n            break;\n          case JsonRpcMethod.ethGetCode:\n            _this.callback(req, callback, await _this.provider.getCode(req.params[0], req.params[1]));\n            break;\n          case JsonRpcMethod.ethGetBalance:\n            _this.callback(req, callback, await _this.provider.getBalance(req.params[0], req.params[1]));\n            break;\n        }\n      } catch (e) {\n        _this.callback(req, callback, undefined, e);\n      }\n    };\n    this.multicall = Multicall.isMulticall(multicall) ? multicall : new Multicall(multicall);\n    ProxyMethods.forEach(m => {\n      if (provider[m] !== undefined) {\n        this[m] = function () {\n          return provider[m](...arguments);\n        };\n      }\n    });\n  }\n  callback(req, callback, resp, err) {\n    callback(err, {\n      jsonrpc: JsonRpcVersion,\n      id: req.id,\n      result: resp,\n      error: err\n    });\n  }\n  async call(transaction, blockTag) {\n    return this.rpcCall(JsonRpcMethod.ethCall, transaction, blockTag);\n  }\n  async getCode(addressOrName, blockTag) {\n    return this.rpcCall(JsonRpcMethod.ethGetCode, addressOrName, blockTag);\n  }\n  async getBalance(addressOrName, blockTag) {\n    return this.rpcCall(JsonRpcMethod.ethGetBalance, addressOrName, blockTag);\n  }\n  async rpcCall(method) {\n    const reqId = getRandomInt();\n    for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      params[_key - 1] = arguments[_key];\n    }\n    const resp = await promisify(this.multicall.handle)(this.next, {\n      jsonrpc: JsonRpcVersion,\n      id: reqId,\n      method: method,\n      params: params\n    });\n    return resp.result;\n  }\n}\nclass MulticallExternalProvider {\n  constructor(provider, multicall) {\n    this.provider = provider;\n    this.multicall = void 0;\n    this.multicall = Multicall.isMulticall(multicall) ? multicall : new Multicall(multicall);\n    if (provider.send) {\n      const next = async function next(req, callback) {\n        provider.send(req, callback);\n      };\n      this.send = (request, callback) => {\n        this.multicall.handle(next, request, callback);\n      };\n    }\n    if (provider.sendAsync) {\n      const next = async function next(req, callback) {\n        provider.sendAsync(req, callback);\n      };\n      this.sendAsync = (request, callback) => {\n        this.multicall.handle(next, request, callback);\n      };\n    }\n  }\n  get isMetaMask() {\n    return this.provider.isMetaMask;\n  }\n  get isStatus() {\n    return this.provider.isStatus;\n  }\n}\nconst multicallMiddleware = multicall => next => {\n  const lib = Multicall.isMulticall(multicall) ? multicall : new Multicall(multicall);\n  return (request, callback) => {\n    return lib.handle(next, request, callback);\n  };\n};\nvar index = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  ProxyMethods: ProxyMethods,\n  MulticallProvider: MulticallProvider,\n  MulticallExternalProvider: MulticallExternalProvider,\n  multicallMiddleware: multicallMiddleware\n});\nexport { Multicall, index as providers };","map":{"version":3,"names":["BigNumber","ethers","walletContracts","getRandomInt","promisify","sequenceContext","JsonRpcVersion","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","JsonRpcMethod","safeSolve","promise","def","e","d","Function","partition","array","callback","reduce","result","element","push","parseBlockTag","cand","undefined","from","eqBlockTag","a","b","isBigNumber","eq","DefaultMulticallOptions","batchSize","timeWindow","contract","sequenceUtils","verbose","Multicall","constructor","options","_this","batchableJsonRpcMethods","ethCall","ethGetCode","ethGetBalance","multicallInterface","utils","Interface","abi","timeout","queue","scheduleExecution","clearTimeout","setTimeout","run","handle","next","request","find","m","method","console","log","limit","Math","min","forward","items","slice","blockTag","discartItems","item","params","gasPrice","value","itemBlockTag","_unused","callParams","map","v","delegateCall","revertOnError","to","data","gasLimit","gas","encodeFunctionData","getFunction","_unused2","_","filter","c","encodedCall","_unused3","reqId","res","id","jsonrpc","toNumber","error","decoded","decodeFunctionResult","_unused4","forEach","index","defaultAbiCoder","decode","DefaultOptions","Error","entries","Array","isArray","isMulticall","conf","isMulticallOptions","ProxyMethods","MulticallProvider","providers","BaseProvider","provider","multicall","getNetwork","listenerCount","getResolver","name","ogResolver","Resolver","address","req","getCode","getBalance","resp","err","transaction","rpcCall","addressOrName","MulticallExternalProvider","send","sendAsync","isMetaMask","isStatus","multicallMiddleware","lib","freeze","__proto__"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/@0xsequence/multicall/dist/0xsequence-multicall.esm.js"],"sourcesContent":["import { BigNumber, ethers } from 'ethers';\nimport { walletContracts } from '@0xsequence/abi';\nimport { getRandomInt, promisify } from '@0xsequence/utils';\nimport { sequenceContext, JsonRpcVersion } from '@0xsequence/network';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nlet JsonRpcMethod;\n\n(function (JsonRpcMethod) {\n  JsonRpcMethod[\"ethCall\"] = \"eth_call\";\n  JsonRpcMethod[\"ethGetBalance\"] = \"eth_getBalance\";\n  JsonRpcMethod[\"ethGetCode\"] = \"eth_getCode\";\n})(JsonRpcMethod || (JsonRpcMethod = {}));\n\nasync function safeSolve(promise, def) {\n  try {\n    return await promise;\n  } catch (e) {\n    const d = def instanceof Function ? def(e) : def;\n    return d;\n  }\n}\nfunction partition(array, callback) {\n  return array.reduce(function (result, element, i) {\n    callback(element, i) ? result[0].push(element) : result[1].push(element);\n    return result;\n  }, [[], []]);\n}\nfunction parseBlockTag(cand) {\n  if (cand === undefined) return 'latest';\n\n  switch (cand) {\n    case 'earliest':\n    case 'latest':\n    case 'pending':\n      return cand;\n  }\n\n  return BigNumber.from(cand);\n}\nfunction eqBlockTag(a, b) {\n  if (a === b) return true;\n\n  if (BigNumber.isBigNumber(a)) {\n    if (BigNumber.isBigNumber(b)) return a.eq(b);\n    return false;\n  }\n\n  if (BigNumber.isBigNumber(b)) return false;\n  return a === b;\n}\n\nconst DefaultMulticallOptions = {\n  batchSize: 50,\n  timeWindow: 50,\n  contract: sequenceContext.sequenceUtils,\n  verbose: false\n};\nclass Multicall {\n  constructor(options) {\n    var _this = this;\n\n    this.batchableJsonRpcMethods = [JsonRpcMethod.ethCall, JsonRpcMethod.ethGetCode, JsonRpcMethod.ethGetBalance];\n    this.multicallInterface = new ethers.utils.Interface(walletContracts.sequenceUtils.abi);\n    this.options = void 0;\n    this.timeout = void 0;\n    this.queue = [];\n\n    this.scheduleExecution = () => {\n      if (this.queue.length > 0) {\n        if (this.timeout) clearTimeout(this.timeout);\n        this.timeout = setTimeout(this.run, this.options.timeWindow);\n      }\n    };\n\n    this.handle = (next, request, callback) => {\n      // Schedule for batching and return\n      if (this.batchableJsonRpcMethods.find(m => m === request.method)) {\n        this.queue.push({\n          request: request,\n          callback: callback,\n          next: next\n        });\n        if (this.options.verbose) console.log('Scheduling call', request.method);\n        this.scheduleExecution();\n        return;\n      }\n\n      if (this.options.verbose) console.log('Forwarded call', request.method); // Move to next handler\n\n      return next(request, callback);\n    };\n\n    this.run = async function () {\n      /* eslint-disable no-var */\n      if (_this.options.verbose) console.log('Processing multicall'); // Read items from queue\n\n      const limit = Math.min(_this.options.batchSize, _this.queue.length);\n      if (limit === 0) return; // Skip multicall on single item\n\n      if (limit === 1) {\n        _this.forward(_this.queue[0]);\n\n        _this.queue = [];\n        if (_this.options.verbose) console.log('Skip multicall, single item');\n        return;\n      }\n\n      if (_this.options.verbose) console.log('Resolving', limit); // Get batch from queue\n\n      var items = _this.queue.slice(0, limit); // Update queue\n\n\n      _this.queue = limit === _this.queue.length ? [] : _this.queue.slice(limit);\n      if (_this.options.verbose) console.log('Updated queue', _this.queue.length);\n\n      if (_this.queue.length !== 0) {\n        _this.scheduleExecution();\n      } // Get next candidate\n\n\n      const next = items[0].next;\n      let blockTag; // Partition incompatible calls\n\n      var [items, discartItems] = partition(items, item => {\n        try {\n          // Mixed next callbacks\n          if (item.next !== next) return false;\n\n          switch (item.request.method) {\n            case JsonRpcMethod.ethCall:\n              // Unsupported eth_call parameters\n              if (item.request.params[0].from || item.request.params[0].gasPrice || item.request.params[0].value) {\n                return false;\n              }\n\n            case JsonRpcMethod.ethGetBalance:\n            case JsonRpcMethod.ethGetCode:\n              // Mixed blockTags\n              const itemBlockTag = parseBlockTag(item.request.params[1]);\n              if (blockTag === undefined) blockTag = itemBlockTag;\n              if (!eqBlockTag(itemBlockTag, blockTag)) return false;\n          }\n\n          return true;\n        } catch (_unused) {\n          return false;\n        }\n      }); // Forward discarted items\n      // end execution if no items remain\n\n      if (discartItems.length !== 0) {\n        if (_this.options.verbose) console.log('Forwarding incompatible calls', discartItems.length);\n\n        _this.forward(discartItems);\n\n        if (items.length === 0) return;\n      } // Aggregate all calls\n\n\n      let callParams = items.map(v => {\n        try {\n          switch (v.request.method) {\n            case JsonRpcMethod.ethCall:\n              return {\n                delegateCall: false,\n                revertOnError: false,\n                target: v.request.params[0].to,\n                data: v.request.params[0].data,\n                gasLimit: v.request.params[0].gas ? v.request.params[0].gas : 0,\n                value: 0\n              };\n\n            case JsonRpcMethod.ethGetCode:\n              return {\n                delegateCall: false,\n                revertOnError: false,\n                target: _this.options.contract,\n                gasLimit: 0,\n                value: 0,\n                data: _this.multicallInterface.encodeFunctionData(_this.multicallInterface.getFunction('callCode'), [v.request.params[0]])\n              };\n\n            case JsonRpcMethod.ethGetBalance:\n              return {\n                delegateCall: false,\n                revertOnError: false,\n                target: _this.options.contract,\n                gasLimit: 0,\n                value: 0,\n                data: _this.multicallInterface.encodeFunctionData(_this.multicallInterface.getFunction('callBalanceOf'), [v.request.params[0]])\n              };\n\n            default:\n              return null;\n          }\n        } catch (_unused2) {\n          return null;\n        }\n      }); // Filter calls with enconding errors and forward items\n\n      var [items, discartItems] = partition(items, (_, i) => callParams[i] !== undefined);\n      callParams = callParams.filter(c => c);\n\n      if (discartItems.length !== 0) {\n        if (_this.options.verbose) console.log('Forwarding calls on error', discartItems.length);\n\n        _this.forward(discartItems);\n\n        if (items.length === 0) return;\n      } // Encode multicall\n\n\n      let encodedCall;\n\n      try {\n        encodedCall = _this.multicallInterface.encodeFunctionData(_this.multicallInterface.getFunction('multiCall'), [callParams]);\n      } catch (_unused3) {\n        _this.forward(items);\n\n        return;\n      } // Forward single multicall rpc call\n\n\n      const reqId = getRandomInt(); // TODO: fix types below..\n\n      const res = await safeSolve( // @ts-ignore\n      promisify(next)({\n        id: reqId,\n        jsonrpc: JsonRpcVersion,\n        method: JsonRpcMethod.ethCall,\n        params: [{\n          to: _this.options.contract,\n          value: 0,\n          data: encodedCall\n        }, BigNumber.isBigNumber(blockTag) ? blockTag.toNumber() : blockTag] // @ts-ignore\n\n      }), e => ({\n        jsonrpc: JsonRpcVersion,\n        id: reqId,\n        result: undefined,\n        error: e\n      })); // Error calling multicall\n      // Forward all calls to middleware\n      // @ts-ignore\n\n      if (res.error) {\n        return _this.forward(items);\n      } // Decode result from multicall\n\n\n      let decoded;\n\n      try {\n        // @ts-ignore\n        decoded = _this.multicallInterface.decodeFunctionResult(_this.multicallInterface.getFunction('multiCall'), res.result);\n      } catch (_unused4) {\n        _this.forward(items);\n\n        return;\n      } // Send results for each request\n      // errors fallback through the middleware\n\n\n      if (_this.options.verbose) console.log('Got response for', items.length);\n      items.forEach((item, index) => {\n        if (!decoded[0][index]) {\n          _this.forward(item);\n        } else {\n          switch (item.request.method) {\n            case JsonRpcMethod.ethCall:\n              item.callback(undefined, {\n                jsonrpc: item.request.jsonrpc,\n                id: item.request.id,\n                result: decoded[1][index]\n              });\n              break;\n\n            case JsonRpcMethod.ethGetCode:\n              item.callback(undefined, {\n                jsonrpc: item.request.jsonrpc,\n                id: item.request.id,\n                result: ethers.utils.defaultAbiCoder.decode(['bytes'], decoded[1][index])[0]\n              });\n              break;\n\n            case JsonRpcMethod.ethGetBalance:\n              item.callback(undefined, {\n                jsonrpc: item.request.jsonrpc,\n                id: item.request.id,\n                result: ethers.utils.defaultAbiCoder.decode(['uint256'], decoded[1][index])[0]\n              });\n              break;\n          }\n        }\n      });\n    };\n\n    this.options = options ? _extends({}, Multicall.DefaultOptions, options) : Multicall.DefaultOptions;\n    if (this.options.batchSize <= 0) throw new Error(`Invalid batch size of ${this.options.batchSize}`);\n  }\n\n  forward(entries) {\n    if (Array.isArray(entries)) {\n      entries.forEach(e => e.next(e.request, e.callback));\n    } else {\n      entries.next(entries.request, entries.callback);\n    }\n  }\n\n  static isMulticall(cand) {\n    return cand && cand.handle !== undefined && cand.conf !== undefined && Multicall.isMulticallOptions(cand.options);\n  }\n\n  static isMulticallOptions(cand) {\n    return cand !== undefined && cand.batchSize !== undefined && cand.timeWindow !== undefined && cand.contract !== undefined;\n  }\n\n}\nMulticall.DefaultOptions = _extends({}, DefaultMulticallOptions);\n\nconst ProxyMethods = ['getNetwork', 'getBlockNumber', 'getGasPrice', 'getTransactionCount', 'getStorageAt', 'sendTransaction', 'estimateGas', 'getBlock', 'getTransaction', 'getTransactionReceipt', 'getLogs', 'emit', 'litenerCount', 'addListener', 'removeListener', 'waitForTransaction', 'detectNetwork', 'getBlockWithTransactions'];\nclass MulticallProvider extends ethers.providers.BaseProvider {\n  constructor(provider, multicall) {\n    var _this;\n\n    super(provider.getNetwork());\n    _this = this;\n    this.provider = provider;\n    this.multicall = void 0;\n    this.listenerCount = this.provider.listenerCount;\n\n    this.getResolver = async function (name) {\n      const provider = _this.provider;\n\n      if (provider.getResolver) {\n        const ogResolver = await provider.getResolver(await name);\n        if (!ogResolver) return null;\n        return new ethers.providers.Resolver(_this, ogResolver.address, ogResolver.name);\n      }\n\n      return provider.getResolver(await name);\n    };\n\n    this.next = async function (req, callback) {\n      try {\n        switch (req.method) {\n          case JsonRpcMethod.ethCall:\n            _this.callback(req, callback, await _this.provider.call(req.params[0], req.params[1]));\n\n            break;\n\n          case JsonRpcMethod.ethGetCode:\n            _this.callback(req, callback, await _this.provider.getCode(req.params[0], req.params[1]));\n\n            break;\n\n          case JsonRpcMethod.ethGetBalance:\n            _this.callback(req, callback, await _this.provider.getBalance(req.params[0], req.params[1]));\n\n            break;\n        }\n      } catch (e) {\n        _this.callback(req, callback, undefined, e);\n      }\n    };\n\n    this.multicall = Multicall.isMulticall(multicall) ? multicall : new Multicall(multicall);\n    ProxyMethods.forEach(m => {\n      if (provider[m] !== undefined) {\n\n        this[m] = (...args) => provider[m](...args);\n      }\n    });\n  }\n\n  callback(req, callback, resp, err) {\n    callback(err, {\n      jsonrpc: JsonRpcVersion,\n      id: req.id,\n      result: resp,\n      error: err\n    });\n  }\n\n  async call(transaction, blockTag) {\n    return this.rpcCall(JsonRpcMethod.ethCall, transaction, blockTag);\n  }\n\n  async getCode(addressOrName, blockTag) {\n    return this.rpcCall(JsonRpcMethod.ethGetCode, addressOrName, blockTag);\n  }\n\n  async getBalance(addressOrName, blockTag) {\n    return this.rpcCall(JsonRpcMethod.ethGetBalance, addressOrName, blockTag);\n  }\n\n  async rpcCall(method, ...params) {\n    const reqId = getRandomInt();\n    const resp = await promisify(this.multicall.handle)(this.next, {\n      jsonrpc: JsonRpcVersion,\n      id: reqId,\n      method: method,\n      params: params\n    });\n    return resp.result;\n  }\n\n}\n\nclass MulticallExternalProvider {\n  constructor(provider, multicall) {\n    this.provider = provider;\n    this.multicall = void 0;\n    this.multicall = Multicall.isMulticall(multicall) ? multicall : new Multicall(multicall);\n\n    if (provider.send) {\n      const next = async function next(req, callback) {\n        provider.send(req, callback);\n      };\n\n      this.send = (request, callback) => {\n        this.multicall.handle(next, request, callback);\n      };\n    }\n\n    if (provider.sendAsync) {\n      const next = async function next(req, callback) {\n        provider.sendAsync(req, callback);\n      };\n\n      this.sendAsync = (request, callback) => {\n        this.multicall.handle(next, request, callback);\n      };\n    }\n  }\n\n  get isMetaMask() {\n    return this.provider.isMetaMask;\n  }\n\n  get isStatus() {\n    return this.provider.isStatus;\n  }\n\n}\n\nconst multicallMiddleware = multicall => next => {\n  const lib = Multicall.isMulticall(multicall) ? multicall : new Multicall(multicall);\n  return (request, callback) => {\n    return lib.handle(next, request, callback);\n  };\n};\n\nvar index = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  ProxyMethods: ProxyMethods,\n  MulticallProvider: MulticallProvider,\n  MulticallExternalProvider: MulticallExternalProvider,\n  multicallMiddleware: multicallMiddleware\n});\n\nexport { Multicall, index as providers };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}