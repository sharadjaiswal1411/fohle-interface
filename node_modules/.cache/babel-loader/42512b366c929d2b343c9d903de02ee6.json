{"ast":null,"code":"import{createSlice}from'@reduxjs/toolkit';import{shallowEqual}from'react-redux';var initialState={connectedWallets:[]};var walletsSlice=createSlice({name:'wallets',initialState:initialState,reducers:{addConnectedWallet:function addConnectedWallet(state,_ref){var payload=_ref.payload;var existsAlready=state.connectedWallets.find(function(wallet){return shallowEqual(payload,wallet);});if(!existsAlready){state.connectedWallets=state.connectedWallets.concat(payload);}},removeConnectedWallet:function removeConnectedWallet(state,_ref2){var payload=_ref2.payload;state.connectedWallets=state.connectedWallets.filter(function(wallet){return!shallowEqual(wallet,payload);});}}});var _walletsSlice$actions=walletsSlice.actions,addConnectedWallet=_walletsSlice$actions.addConnectedWallet,removeConnectedWallet=_walletsSlice$actions.removeConnectedWallet;export{addConnectedWallet,removeConnectedWallet};export default walletsSlice.reducer;","map":{"version":3,"names":["createSlice","shallowEqual","initialState","connectedWallets","walletsSlice","name","reducers","addConnectedWallet","state","payload","existsAlready","find","wallet","concat","removeConnectedWallet","filter","actions","reducer"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/state/wallets/reducer.ts"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\nimport { shallowEqual } from 'react-redux'\n\nimport { Wallet } from './types'\n\n/* Used to track wallets that have been connected by the user in current session, and remove them when deliberately disconnected. \n  Used to compute is_reconnect event property for analytics */\ninterface WalletState {\n  connectedWallets: Wallet[]\n}\n\nconst initialState: WalletState = {\n  connectedWallets: [],\n}\n\nconst walletsSlice = createSlice({\n  name: 'wallets',\n  initialState,\n  reducers: {\n    addConnectedWallet(state, { payload }) {\n      const existsAlready = state.connectedWallets.find((wallet) => shallowEqual(payload, wallet))\n      if (!existsAlready) {\n        state.connectedWallets = state.connectedWallets.concat(payload)\n      }\n    },\n    removeConnectedWallet(state, { payload }) {\n      state.connectedWallets = state.connectedWallets.filter((wallet) => !shallowEqual(wallet, payload))\n    },\n  },\n})\n\nexport const { addConnectedWallet, removeConnectedWallet } = walletsSlice.actions\nexport default walletsSlice.reducer\n"],"mappings":"AAAA,OAASA,WAAW,KAAQ,kBAAkB,CAC9C,OAASC,YAAY,KAAQ,aAAa,CAU1C,GAAMC,aAAyB,CAAG,CAChCC,gBAAgB,CAAE,EACpB,CAAC,CAED,GAAMC,aAAY,CAAGJ,WAAW,CAAC,CAC/BK,IAAI,CAAE,SAAS,CACfH,YAAY,CAAZA,YAAY,CACZI,QAAQ,CAAE,CACRC,kBAAkB,6BAACC,KAAK,MAAe,IAAXC,QAAO,MAAPA,OAAO,CACjC,GAAMC,cAAa,CAAGF,KAAK,CAACL,gBAAgB,CAACQ,IAAI,CAAC,SAACC,MAAM,QAAKX,aAAY,CAACQ,OAAO,CAAEG,MAAM,CAAC,GAAC,CAC5F,GAAI,CAACF,aAAa,CAAE,CAClBF,KAAK,CAACL,gBAAgB,CAAGK,KAAK,CAACL,gBAAgB,CAACU,MAAM,CAACJ,OAAO,CAAC,CACjE,CACF,CAAC,CACDK,qBAAqB,gCAACN,KAAK,OAAe,IAAXC,QAAO,OAAPA,OAAO,CACpCD,KAAK,CAACL,gBAAgB,CAAGK,KAAK,CAACL,gBAAgB,CAACY,MAAM,CAAC,SAACH,MAAM,QAAK,CAACX,YAAY,CAACW,MAAM,CAAEH,OAAO,CAAC,GAAC,CACpG,CACF,CACF,CAAC,CAAC,CAEK,0BAAsDL,YAAY,CAACY,OAAO,CAAlET,kBAAkB,uBAAlBA,kBAAkB,CAAEO,qBAAqB,uBAArBA,qBAAqB,CAAyB,iDACjF,cAAeV,aAAY,CAACa,OAAO"},"metadata":{},"sourceType":"module"}