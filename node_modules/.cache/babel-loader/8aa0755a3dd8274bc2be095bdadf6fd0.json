{"ast":null,"code":"import { logger } from '@sentry/utils';\n\n/** Deduplication filter */\nclass Dedupe {\n  constructor() {\n    Dedupe.prototype.__init.call(this);\n  }\n  /**\n   * @inheritDoc\n   */\n  static __initStatic() {\n    this.id = 'Dedupe';\n  }\n\n  /**\n   * @inheritDoc\n   */\n  __init() {\n    this.name = Dedupe.id;\n  }\n\n  /**\n   * @inheritDoc\n   */\n\n  /**\n   * @inheritDoc\n   */\n  setupOnce(addGlobalEventProcessor, getCurrentHub) {\n    const eventProcessor = currentEvent => {\n      const self = getCurrentHub().getIntegration(Dedupe);\n      if (self) {\n        // Juuust in case something goes wrong\n        try {\n          if (_shouldDropEvent(currentEvent, self._previousEvent)) {\n            (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.warn('Event dropped due to being a duplicate of previously captured event.');\n            return null;\n          }\n        } catch (_oO) {\n          return self._previousEvent = currentEvent;\n        }\n        return self._previousEvent = currentEvent;\n      }\n      return currentEvent;\n    };\n    eventProcessor.id = this.name;\n    addGlobalEventProcessor(eventProcessor);\n  }\n}\nDedupe.__initStatic();\n\n/** JSDoc */\nfunction _shouldDropEvent(currentEvent, previousEvent) {\n  if (!previousEvent) {\n    return false;\n  }\n  if (_isSameMessageEvent(currentEvent, previousEvent)) {\n    return true;\n  }\n  if (_isSameExceptionEvent(currentEvent, previousEvent)) {\n    return true;\n  }\n  return false;\n}\n\n/** JSDoc */\nfunction _isSameMessageEvent(currentEvent, previousEvent) {\n  const currentMessage = currentEvent.message;\n  const previousMessage = previousEvent.message;\n\n  // If neither event has a message property, they were both exceptions, so bail out\n  if (!currentMessage && !previousMessage) {\n    return false;\n  }\n\n  // If only one event has a stacktrace, but not the other one, they are not the same\n  if (currentMessage && !previousMessage || !currentMessage && previousMessage) {\n    return false;\n  }\n  if (currentMessage !== previousMessage) {\n    return false;\n  }\n  if (!_isSameFingerprint(currentEvent, previousEvent)) {\n    return false;\n  }\n  if (!_isSameStacktrace(currentEvent, previousEvent)) {\n    return false;\n  }\n  return true;\n}\n\n/** JSDoc */\nfunction _isSameExceptionEvent(currentEvent, previousEvent) {\n  const previousException = _getExceptionFromEvent(previousEvent);\n  const currentException = _getExceptionFromEvent(currentEvent);\n  if (!previousException || !currentException) {\n    return false;\n  }\n  if (previousException.type !== currentException.type || previousException.value !== currentException.value) {\n    return false;\n  }\n  if (!_isSameFingerprint(currentEvent, previousEvent)) {\n    return false;\n  }\n  if (!_isSameStacktrace(currentEvent, previousEvent)) {\n    return false;\n  }\n  return true;\n}\n\n/** JSDoc */\nfunction _isSameStacktrace(currentEvent, previousEvent) {\n  let currentFrames = _getFramesFromEvent(currentEvent);\n  let previousFrames = _getFramesFromEvent(previousEvent);\n\n  // If neither event has a stacktrace, they are assumed to be the same\n  if (!currentFrames && !previousFrames) {\n    return true;\n  }\n\n  // If only one event has a stacktrace, but not the other one, they are not the same\n  if (currentFrames && !previousFrames || !currentFrames && previousFrames) {\n    return false;\n  }\n  currentFrames = currentFrames;\n  previousFrames = previousFrames;\n\n  // If number of frames differ, they are not the same\n  if (previousFrames.length !== currentFrames.length) {\n    return false;\n  }\n\n  // Otherwise, compare the two\n  for (let i = 0; i < previousFrames.length; i++) {\n    const frameA = previousFrames[i];\n    const frameB = currentFrames[i];\n    if (frameA.filename !== frameB.filename || frameA.lineno !== frameB.lineno || frameA.colno !== frameB.colno || frameA.function !== frameB.function) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/** JSDoc */\nfunction _isSameFingerprint(currentEvent, previousEvent) {\n  let currentFingerprint = currentEvent.fingerprint;\n  let previousFingerprint = previousEvent.fingerprint;\n\n  // If neither event has a fingerprint, they are assumed to be the same\n  if (!currentFingerprint && !previousFingerprint) {\n    return true;\n  }\n\n  // If only one event has a fingerprint, but not the other one, they are not the same\n  if (currentFingerprint && !previousFingerprint || !currentFingerprint && previousFingerprint) {\n    return false;\n  }\n  currentFingerprint = currentFingerprint;\n  previousFingerprint = previousFingerprint;\n\n  // Otherwise, compare the two\n  try {\n    return !!(currentFingerprint.join('') === previousFingerprint.join(''));\n  } catch (_oO) {\n    return false;\n  }\n}\n\n/** JSDoc */\nfunction _getExceptionFromEvent(event) {\n  return event.exception && event.exception.values && event.exception.values[0];\n}\n\n/** JSDoc */\nfunction _getFramesFromEvent(event) {\n  const exception = event.exception;\n  if (exception) {\n    try {\n      // @ts-ignore Object could be undefined\n      return exception.values[0].stacktrace.frames;\n    } catch (_oO) {\n      return undefined;\n    }\n  }\n  return undefined;\n}\nexport { Dedupe };","map":{"version":3,"sources":["../../../../src/integrations/dedupe.ts"],"names":[],"mappings":"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","sourcesContent":["import { Event, EventProcessor, Exception, Hub, Integration, StackFrame } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\n/** Deduplication filter */\nexport class Dedupe implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Dedupe';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Dedupe.id;\n\n  /**\n   * @inheritDoc\n   */\n  private _previousEvent?: Event;\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(addGlobalEventProcessor: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    const eventProcessor: EventProcessor = currentEvent => {\n      const self = getCurrentHub().getIntegration(Dedupe);\n      if (self) {\n        // Juuust in case something goes wrong\n        try {\n          if (_shouldDropEvent(currentEvent, self._previousEvent)) {\n            __DEBUG_BUILD__ && logger.warn('Event dropped due to being a duplicate of previously captured event.');\n            return null;\n          }\n        } catch (_oO) {\n          return (self._previousEvent = currentEvent);\n        }\n\n        return (self._previousEvent = currentEvent);\n      }\n      return currentEvent;\n    };\n\n    eventProcessor.id = this.name;\n    addGlobalEventProcessor(eventProcessor);\n  }\n}\n\n/** JSDoc */\nfunction _shouldDropEvent(currentEvent: Event, previousEvent?: Event): boolean {\n  if (!previousEvent) {\n    return false;\n  }\n\n  if (_isSameMessageEvent(currentEvent, previousEvent)) {\n    return true;\n  }\n\n  if (_isSameExceptionEvent(currentEvent, previousEvent)) {\n    return true;\n  }\n\n  return false;\n}\n\n/** JSDoc */\nfunction _isSameMessageEvent(currentEvent: Event, previousEvent: Event): boolean {\n  const currentMessage = currentEvent.message;\n  const previousMessage = previousEvent.message;\n\n  // If neither event has a message property, they were both exceptions, so bail out\n  if (!currentMessage && !previousMessage) {\n    return false;\n  }\n\n  // If only one event has a stacktrace, but not the other one, they are not the same\n  if ((currentMessage && !previousMessage) || (!currentMessage && previousMessage)) {\n    return false;\n  }\n\n  if (currentMessage !== previousMessage) {\n    return false;\n  }\n\n  if (!_isSameFingerprint(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  if (!_isSameStacktrace(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  return true;\n}\n\n/** JSDoc */\nfunction _isSameExceptionEvent(currentEvent: Event, previousEvent: Event): boolean {\n  const previousException = _getExceptionFromEvent(previousEvent);\n  const currentException = _getExceptionFromEvent(currentEvent);\n\n  if (!previousException || !currentException) {\n    return false;\n  }\n\n  if (previousException.type !== currentException.type || previousException.value !== currentException.value) {\n    return false;\n  }\n\n  if (!_isSameFingerprint(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  if (!_isSameStacktrace(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  return true;\n}\n\n/** JSDoc */\nfunction _isSameStacktrace(currentEvent: Event, previousEvent: Event): boolean {\n  let currentFrames = _getFramesFromEvent(currentEvent);\n  let previousFrames = _getFramesFromEvent(previousEvent);\n\n  // If neither event has a stacktrace, they are assumed to be the same\n  if (!currentFrames && !previousFrames) {\n    return true;\n  }\n\n  // If only one event has a stacktrace, but not the other one, they are not the same\n  if ((currentFrames && !previousFrames) || (!currentFrames && previousFrames)) {\n    return false;\n  }\n\n  currentFrames = currentFrames as StackFrame[];\n  previousFrames = previousFrames as StackFrame[];\n\n  // If number of frames differ, they are not the same\n  if (previousFrames.length !== currentFrames.length) {\n    return false;\n  }\n\n  // Otherwise, compare the two\n  for (let i = 0; i < previousFrames.length; i++) {\n    const frameA = previousFrames[i];\n    const frameB = currentFrames[i];\n\n    if (\n      frameA.filename !== frameB.filename ||\n      frameA.lineno !== frameB.lineno ||\n      frameA.colno !== frameB.colno ||\n      frameA.function !== frameB.function\n    ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/** JSDoc */\nfunction _isSameFingerprint(currentEvent: Event, previousEvent: Event): boolean {\n  let currentFingerprint = currentEvent.fingerprint;\n  let previousFingerprint = previousEvent.fingerprint;\n\n  // If neither event has a fingerprint, they are assumed to be the same\n  if (!currentFingerprint && !previousFingerprint) {\n    return true;\n  }\n\n  // If only one event has a fingerprint, but not the other one, they are not the same\n  if ((currentFingerprint && !previousFingerprint) || (!currentFingerprint && previousFingerprint)) {\n    return false;\n  }\n\n  currentFingerprint = currentFingerprint as string[];\n  previousFingerprint = previousFingerprint as string[];\n\n  // Otherwise, compare the two\n  try {\n    return !!(currentFingerprint.join('') === previousFingerprint.join(''));\n  } catch (_oO) {\n    return false;\n  }\n}\n\n/** JSDoc */\nfunction _getExceptionFromEvent(event: Event): Exception | undefined {\n  return event.exception && event.exception.values && event.exception.values[0];\n}\n\n/** JSDoc */\nfunction _getFramesFromEvent(event: Event): StackFrame[] | undefined {\n  const exception = event.exception;\n\n  if (exception) {\n    try {\n      // @ts-ignore Object could be undefined\n      return exception.values[0].stacktrace.frames;\n    } catch (_oO) {\n      return undefined;\n    }\n  }\n  return undefined;\n}\n"]},"metadata":{},"sourceType":"module"}