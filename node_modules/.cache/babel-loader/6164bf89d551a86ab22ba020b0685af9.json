{"ast":null,"code":"\"use strict\";\n\nimport { getStatic } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n// These are load-balancer-based application IDs\nconst defaultApplicationIds = {\n  homestead: \"6004bcd10040261633ade990\",\n  ropsten: \"6004bd4d0040261633ade991\",\n  rinkeby: \"6004bda20040261633ade994\",\n  goerli: \"6004bd860040261633ade992\"\n};\nexport class PocketProvider extends UrlJsonRpcProvider {\n  constructor(network, apiKey) {\n    // We need a bit of creativity in the constructor because\n    // Pocket uses different default API keys based on the network\n    if (apiKey == null) {\n      const n = getStatic(new.target, \"getNetwork\")(network);\n      if (n) {\n        const applicationId = defaultApplicationIds[n.name];\n        if (applicationId) {\n          apiKey = {\n            applicationId: applicationId,\n            loadBalancer: true\n          };\n        }\n      }\n      // If there was any issue above, we don't know this network\n      if (apiKey == null) {\n        logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n          argument: \"network\",\n          value: network\n        });\n      }\n    }\n    super(network, apiKey);\n  }\n  static getApiKey(apiKey) {\n    // Most API Providers allow null to get the default configuration, but\n    // Pocket requires the network to decide the default provider, so we\n    // rely on hijacking the constructor to add a sensible default for us\n    if (apiKey == null) {\n      logger.throwArgumentError(\"PocketProvider.getApiKey does not support null apiKey\", \"apiKey\", apiKey);\n    }\n    const apiKeyObj = {\n      applicationId: null,\n      loadBalancer: false,\n      applicationSecretKey: null\n    };\n    // Parse applicationId and applicationSecretKey\n    if (typeof apiKey === \"string\") {\n      apiKeyObj.applicationId = apiKey;\n    } else if (apiKey.applicationSecretKey != null) {\n      logger.assertArgument(typeof apiKey.applicationId === \"string\", \"applicationSecretKey requires an applicationId\", \"applicationId\", apiKey.applicationId);\n      logger.assertArgument(typeof apiKey.applicationSecretKey === \"string\", \"invalid applicationSecretKey\", \"applicationSecretKey\", \"[REDACTED]\");\n      apiKeyObj.applicationId = apiKey.applicationId;\n      apiKeyObj.applicationSecretKey = apiKey.applicationSecretKey;\n      apiKeyObj.loadBalancer = !!apiKey.loadBalancer;\n    } else if (apiKey.applicationId) {\n      logger.assertArgument(typeof apiKey.applicationId === \"string\", \"apiKey.applicationId must be a string\", \"apiKey.applicationId\", apiKey.applicationId);\n      apiKeyObj.applicationId = apiKey.applicationId;\n      apiKeyObj.loadBalancer = !!apiKey.loadBalancer;\n    } else {\n      logger.throwArgumentError(\"unsupported PocketProvider apiKey\", \"apiKey\", apiKey);\n    }\n    return apiKeyObj;\n  }\n  static getUrl(network, apiKey) {\n    let host = null;\n    switch (network ? network.name : \"unknown\") {\n      case \"homestead\":\n        host = \"eth-mainnet.gateway.pokt.network\";\n        break;\n      case \"ropsten\":\n        host = \"eth-ropsten.gateway.pokt.network\";\n        break;\n      case \"rinkeby\":\n        host = \"eth-rinkeby.gateway.pokt.network\";\n        break;\n      case \"goerli\":\n        host = \"eth-goerli.gateway.pokt.network\";\n        break;\n      default:\n        logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n          argument: \"network\",\n          value: network\n        });\n    }\n    let url = null;\n    if (apiKey.loadBalancer) {\n      url = `https:/\\/${host}/v1/lb/${apiKey.applicationId}`;\n    } else {\n      url = `https:/\\/${host}/v1/${apiKey.applicationId}`;\n    }\n    const connection = {\n      url\n    };\n    // Initialize empty headers\n    connection.headers = {};\n    // Apply application secret key\n    if (apiKey.applicationSecretKey != null) {\n      connection.user = \"\";\n      connection.password = apiKey.applicationSecretKey;\n    }\n    return connection;\n  }\n  isCommunityResource() {\n    return this.applicationId === defaultApplicationIds[this.network.name];\n  }\n}","map":{"version":3,"sources":["../src.ts/pocket-provider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nimport { getStatic } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n// These are load-balancer-based application IDs\nconst defaultApplicationIds = {\n    homestead: \"6004bcd10040261633ade990\",\n    ropsten: \"6004bd4d0040261633ade991\",\n    rinkeby: \"6004bda20040261633ade994\",\n    goerli: \"6004bd860040261633ade992\",\n};\nexport class PocketProvider extends UrlJsonRpcProvider {\n    constructor(network, apiKey) {\n        // We need a bit of creativity in the constructor because\n        // Pocket uses different default API keys based on the network\n        if (apiKey == null) {\n            const n = getStatic(new.target, \"getNetwork\")(network);\n            if (n) {\n                const applicationId = defaultApplicationIds[n.name];\n                if (applicationId) {\n                    apiKey = {\n                        applicationId: applicationId,\n                        loadBalancer: true\n                    };\n                }\n            }\n            // If there was any issue above, we don't know this network\n            if (apiKey == null) {\n                logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"network\",\n                    value: network\n                });\n            }\n        }\n        super(network, apiKey);\n    }\n    static getApiKey(apiKey) {\n        // Most API Providers allow null to get the default configuration, but\n        // Pocket requires the network to decide the default provider, so we\n        // rely on hijacking the constructor to add a sensible default for us\n        if (apiKey == null) {\n            logger.throwArgumentError(\"PocketProvider.getApiKey does not support null apiKey\", \"apiKey\", apiKey);\n        }\n        const apiKeyObj = {\n            applicationId: null,\n            loadBalancer: false,\n            applicationSecretKey: null\n        };\n        // Parse applicationId and applicationSecretKey\n        if (typeof (apiKey) === \"string\") {\n            apiKeyObj.applicationId = apiKey;\n        }\n        else if (apiKey.applicationSecretKey != null) {\n            logger.assertArgument((typeof (apiKey.applicationId) === \"string\"), \"applicationSecretKey requires an applicationId\", \"applicationId\", apiKey.applicationId);\n            logger.assertArgument((typeof (apiKey.applicationSecretKey) === \"string\"), \"invalid applicationSecretKey\", \"applicationSecretKey\", \"[REDACTED]\");\n            apiKeyObj.applicationId = apiKey.applicationId;\n            apiKeyObj.applicationSecretKey = apiKey.applicationSecretKey;\n            apiKeyObj.loadBalancer = !!apiKey.loadBalancer;\n        }\n        else if (apiKey.applicationId) {\n            logger.assertArgument((typeof (apiKey.applicationId) === \"string\"), \"apiKey.applicationId must be a string\", \"apiKey.applicationId\", apiKey.applicationId);\n            apiKeyObj.applicationId = apiKey.applicationId;\n            apiKeyObj.loadBalancer = !!apiKey.loadBalancer;\n        }\n        else {\n            logger.throwArgumentError(\"unsupported PocketProvider apiKey\", \"apiKey\", apiKey);\n        }\n        return apiKeyObj;\n    }\n    static getUrl(network, apiKey) {\n        let host = null;\n        switch (network ? network.name : \"unknown\") {\n            case \"homestead\":\n                host = \"eth-mainnet.gateway.pokt.network\";\n                break;\n            case \"ropsten\":\n                host = \"eth-ropsten.gateway.pokt.network\";\n                break;\n            case \"rinkeby\":\n                host = \"eth-rinkeby.gateway.pokt.network\";\n                break;\n            case \"goerli\":\n                host = \"eth-goerli.gateway.pokt.network\";\n                break;\n            default:\n                logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"network\",\n                    value: network\n                });\n        }\n        let url = null;\n        if (apiKey.loadBalancer) {\n            url = `https:/\\/${host}/v1/lb/${apiKey.applicationId}`;\n        }\n        else {\n            url = `https:/\\/${host}/v1/${apiKey.applicationId}`;\n        }\n        const connection = { url };\n        // Initialize empty headers\n        connection.headers = {};\n        // Apply application secret key\n        if (apiKey.applicationSecretKey != null) {\n            connection.user = \"\";\n            connection.password = apiKey.applicationSecretKey;\n        }\n        return connection;\n    }\n    isCommunityResource() {\n        return (this.applicationId === defaultApplicationIds[this.network.name]);\n    }\n}\n//# sourceMappingURL=pocket-provider.js.map"]},"metadata":{},"sourceType":"module"}