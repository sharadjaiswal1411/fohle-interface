{"ast":null,"code":"import clsx from 'clsx';\nimport * as React from 'react';\nimport { animated } from 'react-spring';\nimport { atoms } from '../css/atoms';\nimport { sprinkles } from '../css/sprinkles.css';\nexport const Box = /*#__PURE__*/React.forwardRef(_c = (_ref, ref) => {\n  let {\n    as = 'div',\n    className,\n    ...props\n  } = _ref;\n  const atomProps = {};\n  const nativeProps = {};\n  for (const key in props) {\n    if (sprinkles.properties.has(key)) {\n      atomProps[key] = props[key];\n    } else {\n      nativeProps[key] = props[key];\n    }\n  }\n  const atomicClasses = atoms({\n    reset: typeof as === 'string' ? as : 'div',\n    ...atomProps\n  });\n  return /*#__PURE__*/React.createElement(as, {\n    className: clsx(atomicClasses, className),\n    ...nativeProps,\n    ref\n  });\n});\n\n// We get this error around the codebase: https://github.com/microsoft/TypeScript/issues/34933\n// so you see ts-ignore almost everywhere this component is used\n// since we are going to deprecate vanilla-extract, this will be `any` for now\n_c2 = Box;\nexport const AnimatedBox = animated(Box);\nBox.displayName = 'Box';\nvar _c, _c2;\n$RefreshReg$(_c, \"Box$React.forwardRef\");\n$RefreshReg$(_c2, \"Box\");","map":{"version":3,"names":["clsx","React","animated","atoms","sprinkles","Box","forwardRef","ref","as","className","props","atomProps","nativeProps","key","properties","has","atomicClasses","reset","createElement","AnimatedBox","displayName"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/nft/components/Box.ts"],"sourcesContent":["import clsx, { ClassValue } from 'clsx'\nimport * as React from 'react'\nimport { animated } from 'react-spring'\n\nimport { Atoms, atoms } from '../css/atoms'\nimport { sprinkles } from '../css/sprinkles.css'\n\ntype HTMLProperties<T = HTMLElement> = Omit<\n  React.AllHTMLAttributes<T>,\n  'as' | 'className' | 'color' | 'height' | 'width'\n>\n\ntype Props = Atoms &\n  HTMLProperties & {\n    as?: React.ElementType\n    className?: ClassValue\n  }\n\nexport const Box = React.forwardRef<HTMLElement, Props>(({ as = 'div', className, ...props }: Props, ref) => {\n  const atomProps: Record<string, unknown> = {}\n  const nativeProps: Record<string, unknown> = {}\n\n  for (const key in props) {\n    if (sprinkles.properties.has(key as keyof Omit<Atoms, 'reset'>)) {\n      atomProps[key] = props[key as keyof typeof props]\n    } else {\n      nativeProps[key] = props[key as keyof typeof props]\n    }\n  }\n\n  const atomicClasses = atoms({\n    reset: typeof as === 'string' ? (as as Atoms['reset']) : 'div',\n    ...atomProps,\n  })\n\n  return React.createElement(as, {\n    className: clsx(atomicClasses, className),\n    ...nativeProps,\n    ref,\n  })\n})\n\n// We get this error around the codebase: https://github.com/microsoft/TypeScript/issues/34933\n// so you see ts-ignore almost everywhere this component is used\n// since we are going to deprecate vanilla-extract, this will be `any` for now\nexport const AnimatedBox: any = animated(Box) as any\n\nexport type BoxProps = Parameters<typeof Box>[0]\n\nBox.displayName = 'Box'\n"],"mappings":"AAAA,OAAOA,IAAI,MAAsB,MAAM;AACvC,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAASC,QAAQ,QAAQ,cAAc;AAEvC,SAAgBC,KAAK,QAAQ,cAAc;AAC3C,SAASC,SAAS,QAAQ,sBAAsB;AAahD,OAAO,MAAMC,GAAG,gBAAGJ,KAAK,CAACK,UAAU,MAAqB,OAA6CC,GAAG,KAAK;EAAA,IAApD;IAAEC,EAAE,GAAG,KAAK;IAAEC,SAAS;IAAE,GAAGC;EAAa,CAAC;EACjG,MAAMC,SAAkC,GAAG,CAAC,CAAC;EAC7C,MAAMC,WAAoC,GAAG,CAAC,CAAC;EAE/C,KAAK,MAAMC,GAAG,IAAIH,KAAK,EAAE;IACvB,IAAIN,SAAS,CAACU,UAAU,CAACC,GAAG,CAACF,GAAG,CAA+B,EAAE;MAC/DF,SAAS,CAACE,GAAG,CAAC,GAAGH,KAAK,CAACG,GAAG,CAAuB;IACnD,CAAC,MAAM;MACLD,WAAW,CAACC,GAAG,CAAC,GAAGH,KAAK,CAACG,GAAG,CAAuB;IACrD;EACF;EAEA,MAAMG,aAAa,GAAGb,KAAK,CAAC;IAC1Bc,KAAK,EAAE,OAAOT,EAAE,KAAK,QAAQ,GAAIA,EAAE,GAAsB,KAAK;IAC9D,GAAGG;EACL,CAAC,CAAC;EAEF,oBAAOV,KAAK,CAACiB,aAAa,CAACV,EAAE,EAAE;IAC7BC,SAAS,EAAET,IAAI,CAACgB,aAAa,EAAEP,SAAS,CAAC;IACzC,GAAGG,WAAW;IACdL;EACF,CAAC,CAAC;AACJ,CAAC,CAAC;;AAEF;AACA;AACA;AAAA,MA1BaF,GAAG;AA2BhB,OAAO,MAAMc,WAAgB,GAAGjB,QAAQ,CAACG,GAAG,CAAQ;AAIpDA,GAAG,CAACe,WAAW,GAAG,KAAK;AAAA;AAAA;AAAA"},"metadata":{},"sourceType":"module"}