{"ast":null,"code":"/* Copied from Uniswap/v-3: https://github.com/Uniswap/v3-info/blob/master/src/utils/numbers.ts */import{DEFAULT_LOCALE}from'constants/locales';import numbro from'numbro';// Convert [CurrencyAmount] to number with necessary precision for price formatting.\nexport var currencyAmountToPreciseFloat=function currencyAmountToPreciseFloat(currencyAmount){if(!currencyAmount)return undefined;var floatForLargerNumbers=parseFloat(currencyAmount.toExact());if(floatForLargerNumbers<0.1){return parseFloat(currencyAmount.toSignificant(6));}return floatForLargerNumbers;};// Convert [Price] to number with necessary precision for price formatting.\nexport var priceToPreciseFloat=function priceToPreciseFloat(price){if(!price)return undefined;var floatForLargerNumbers=parseFloat(price.toFixed(9));if(floatForLargerNumbers<0.1){return parseFloat(price.toSignificant(6));}return floatForLargerNumbers;};/**\n * Returns a USD dollar or equivalent denominated numerical value formatted\n * in human readable string for use in template.\n *\n * Adheres to guidelines for prices and other numbers defined here:\n * https://www.notion.so/uniswaplabs/Number-standards-fbb9f533f10e4e22820722c2f66d23c0\n * @param num numerical value denominated in USD or USD equivalent\n * @param isPrice whether the amount represents a price or not\n * @param lessPreciseStablecoinValues whether or not we should show less precise values for\n * stablecoins (around 1$ in value always) for the sake of readability\n * @param digits number of digits after the decimal for non-price amounts\n * @param round whether or not to round up non-price amounts\n */export var formatDollar=function formatDollar(_ref){var num=_ref.num,_ref$isPrice=_ref.isPrice,isPrice=_ref$isPrice===void 0?false:_ref$isPrice,_ref$lessPreciseStabl=_ref.lessPreciseStablecoinValues,lessPreciseStablecoinValues=_ref$lessPreciseStabl===void 0?false:_ref$lessPreciseStabl,_ref$digits=_ref.digits,digits=_ref$digits===void 0?2:_ref$digits,_ref$round=_ref.round,round=_ref$round===void 0?true:_ref$round;// For USD dollar denominated prices.\nif(isPrice){if(num===0)return'$0.00';if(!num)return'-';if(num<0.000001){return\"$\".concat(num.toExponential(2));}if(num>=0.000001&&num<0.1||num>1000000){return\"$\".concat(Number(num).toPrecision(3));}// We only show 2 decimal places in explore table for stablecoin value ranges\n// for the sake of readability (as opposed to the usual 3 elsewhere).\nif(num>=0.1&&num<(lessPreciseStablecoinValues?0.9995:1.05)){return\"$\".concat(num.toFixed(3));}return\"$\".concat(Number(num.toFixed(2)).toLocaleString(DEFAULT_LOCALE,{minimumFractionDigits:2}));}// For volume dollar amounts, like market cap, total value locked, etc.\nelse{if(num===0)return'$0.00';if(!num)return'-';if(num<0.000001){return'$<0.000001';}if(num>=0.000001&&num<0.1){return\"$\".concat(Number(num).toPrecision(3));}if(num>=0.1&&num<1.05){return\"$\".concat(num.toFixed(3));}return numbro(num).formatCurrency({average:round,mantissa:num>1000?2:digits,abbreviations:{million:'M',billion:'B'}}).toUpperCase();}};/**\n * Returns a numerical amount of any token formatted in human readable string for use in template.\n *\n * For transaction review numbers, such as token quantities, NFT price (token-denominated),\n *  network fees, transaction history items. Adheres to guidelines defined here:\n * https://www.notion.so/uniswaplabs/Number-standards-fbb9f533f10e4e22820722c2f66d23c0\n * @param num numerical value denominated in any token\n * @param maxDigits the maximum number of digits that should be shown for the quantity\n */export var formatTransactionAmount=function formatTransactionAmount(num){var maxDigits=arguments.length>1&&arguments[1]!==undefined?arguments[1]:9;if(num===0)return'0.00';if(!num)return'';if(num<0.00001){return'<0.00001';}if(num>=0.00001&&num<1){return\"\".concat(Number(num.toFixed(5)).toLocaleString(DEFAULT_LOCALE,{minimumFractionDigits:2,maximumFractionDigits:5}));}if(num>=1&&num<10000){return\"\".concat(Number(num.toPrecision(6)).toLocaleString(DEFAULT_LOCALE,{minimumFractionDigits:2,maximumFractionDigits:6}));}if(num>=10000&&num<1000000){return\"\".concat(Number(num.toFixed(2)).toLocaleString(DEFAULT_LOCALE,{minimumFractionDigits:2}));}// For very large numbers, switch to scientific notation and show as much precision\n// as permissible by maxDigits param.\nif(num>=Math.pow(10,maxDigits-1)){return\"\".concat(num.toExponential(maxDigits-3));}return\"\".concat(Number(num.toFixed(2)).toLocaleString(DEFAULT_LOCALE,{minimumFractionDigits:2}));};","map":{"version":3,"names":["DEFAULT_LOCALE","numbro","currencyAmountToPreciseFloat","currencyAmount","undefined","floatForLargerNumbers","parseFloat","toExact","toSignificant","priceToPreciseFloat","price","toFixed","formatDollar","num","isPrice","lessPreciseStablecoinValues","digits","round","toExponential","Number","toPrecision","toLocaleString","minimumFractionDigits","formatCurrency","average","mantissa","abbreviations","million","billion","toUpperCase","formatTransactionAmount","maxDigits","maximumFractionDigits","Math","pow"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/utils/formatNumbers.ts"],"sourcesContent":["/* Copied from Uniswap/v-3: https://github.com/Uniswap/v3-info/blob/master/src/utils/numbers.ts */\nimport { Currency, CurrencyAmount, Price } from '@uniswap/sdk-core'\nimport { DEFAULT_LOCALE } from 'constants/locales'\nimport numbro from 'numbro'\n\n// Convert [CurrencyAmount] to number with necessary precision for price formatting.\nexport const currencyAmountToPreciseFloat = (currencyAmount: CurrencyAmount<Currency> | undefined) => {\n  if (!currencyAmount) return undefined\n  const floatForLargerNumbers = parseFloat(currencyAmount.toExact())\n  if (floatForLargerNumbers < 0.1) {\n    return parseFloat(currencyAmount.toSignificant(6))\n  }\n  return floatForLargerNumbers\n}\n\n// Convert [Price] to number with necessary precision for price formatting.\nexport const priceToPreciseFloat = (price: Price<Currency, Currency> | undefined) => {\n  if (!price) return undefined\n  const floatForLargerNumbers = parseFloat(price.toFixed(9))\n  if (floatForLargerNumbers < 0.1) {\n    return parseFloat(price.toSignificant(6))\n  }\n  return floatForLargerNumbers\n}\n\ninterface FormatDollarArgs {\n  num: number | undefined | null\n  isPrice?: boolean\n  lessPreciseStablecoinValues?: boolean\n  digits?: number\n  round?: boolean\n}\n\n/**\n * Returns a USD dollar or equivalent denominated numerical value formatted\n * in human readable string for use in template.\n *\n * Adheres to guidelines for prices and other numbers defined here:\n * https://www.notion.so/uniswaplabs/Number-standards-fbb9f533f10e4e22820722c2f66d23c0\n * @param num numerical value denominated in USD or USD equivalent\n * @param isPrice whether the amount represents a price or not\n * @param lessPreciseStablecoinValues whether or not we should show less precise values for\n * stablecoins (around 1$ in value always) for the sake of readability\n * @param digits number of digits after the decimal for non-price amounts\n * @param round whether or not to round up non-price amounts\n */\nexport const formatDollar = ({\n  num,\n  isPrice = false,\n  lessPreciseStablecoinValues = false,\n  digits = 2,\n  round = true,\n}: FormatDollarArgs): string => {\n  // For USD dollar denominated prices.\n  if (isPrice) {\n    if (num === 0) return '$0.00'\n    if (!num) return '-'\n    if (num < 0.000001) {\n      return `$${num.toExponential(2)}`\n    }\n    if ((num >= 0.000001 && num < 0.1) || num > 1000000) {\n      return `$${Number(num).toPrecision(3)}`\n    }\n    // We only show 2 decimal places in explore table for stablecoin value ranges\n    // for the sake of readability (as opposed to the usual 3 elsewhere).\n    if (num >= 0.1 && num < (lessPreciseStablecoinValues ? 0.9995 : 1.05)) {\n      return `$${num.toFixed(3)}`\n    }\n    return `$${Number(num.toFixed(2)).toLocaleString(DEFAULT_LOCALE, { minimumFractionDigits: 2 })}`\n  }\n  // For volume dollar amounts, like market cap, total value locked, etc.\n  else {\n    if (num === 0) return '$0.00'\n    if (!num) return '-'\n    if (num < 0.000001) {\n      return '$<0.000001'\n    }\n    if (num >= 0.000001 && num < 0.1) {\n      return `$${Number(num).toPrecision(3)}`\n    }\n    if (num >= 0.1 && num < 1.05) {\n      return `$${num.toFixed(3)}`\n    }\n\n    return numbro(num)\n      .formatCurrency({\n        average: round,\n        mantissa: num > 1000 ? 2 : digits,\n        abbreviations: {\n          million: 'M',\n          billion: 'B',\n        },\n      })\n      .toUpperCase()\n  }\n}\n\n/**\n * Returns a numerical amount of any token formatted in human readable string for use in template.\n *\n * For transaction review numbers, such as token quantities, NFT price (token-denominated),\n *  network fees, transaction history items. Adheres to guidelines defined here:\n * https://www.notion.so/uniswaplabs/Number-standards-fbb9f533f10e4e22820722c2f66d23c0\n * @param num numerical value denominated in any token\n * @param maxDigits the maximum number of digits that should be shown for the quantity\n */\nexport const formatTransactionAmount = (num: number | undefined | null, maxDigits = 9) => {\n  if (num === 0) return '0.00'\n  if (!num) return ''\n  if (num < 0.00001) {\n    return '<0.00001'\n  }\n  if (num >= 0.00001 && num < 1) {\n    return `${Number(num.toFixed(5)).toLocaleString(DEFAULT_LOCALE, {\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 5,\n    })}`\n  }\n  if (num >= 1 && num < 10000) {\n    return `${Number(num.toPrecision(6)).toLocaleString(DEFAULT_LOCALE, {\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 6,\n    })}`\n  }\n  if (num >= 10000 && num < 1000000) {\n    return `${Number(num.toFixed(2)).toLocaleString(DEFAULT_LOCALE, { minimumFractionDigits: 2 })}`\n  }\n  // For very large numbers, switch to scientific notation and show as much precision\n  // as permissible by maxDigits param.\n  if (num >= Math.pow(10, maxDigits - 1)) {\n    return `${num.toExponential(maxDigits - 3)}`\n  }\n  return `${Number(num.toFixed(2)).toLocaleString(DEFAULT_LOCALE, { minimumFractionDigits: 2 })}`\n}\n"],"mappings":"AAAA,kGAEA,OAASA,cAAc,KAAQ,mBAAmB,CAClD,MAAOC,OAAM,KAAM,QAAQ,CAE3B;AACA,MAAO,IAAMC,6BAA4B,CAAG,QAA/BA,6BAA4B,CAAIC,cAAoD,CAAK,CACpG,GAAI,CAACA,cAAc,CAAE,MAAOC,UAAS,CACrC,GAAMC,sBAAqB,CAAGC,UAAU,CAACH,cAAc,CAACI,OAAO,EAAE,CAAC,CAClE,GAAIF,qBAAqB,CAAG,GAAG,CAAE,CAC/B,MAAOC,WAAU,CAACH,cAAc,CAACK,aAAa,CAAC,CAAC,CAAC,CAAC,CACpD,CACA,MAAOH,sBAAqB,CAC9B,CAAC,CAED;AACA,MAAO,IAAMI,oBAAmB,CAAG,QAAtBA,oBAAmB,CAAIC,KAA4C,CAAK,CACnF,GAAI,CAACA,KAAK,CAAE,MAAON,UAAS,CAC5B,GAAMC,sBAAqB,CAAGC,UAAU,CAACI,KAAK,CAACC,OAAO,CAAC,CAAC,CAAC,CAAC,CAC1D,GAAIN,qBAAqB,CAAG,GAAG,CAAE,CAC/B,MAAOC,WAAU,CAACI,KAAK,CAACF,aAAa,CAAC,CAAC,CAAC,CAAC,CAC3C,CACA,MAAOH,sBAAqB,CAC9B,CAAC,CAUD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,IAAMO,aAAY,CAAG,QAAfA,aAAY,MAMO,IAL9BC,IAAG,MAAHA,GAAG,mBACHC,OAAO,CAAPA,OAAO,uBAAG,KAAK,yCACfC,2BAA2B,CAA3BA,2BAA2B,gCAAG,KAAK,wCACnCC,MAAM,CAANA,MAAM,sBAAG,CAAC,6BACVC,KAAK,CAALA,KAAK,qBAAG,IAAI,YAEZ;AACA,GAAIH,OAAO,CAAE,CACX,GAAID,GAAG,GAAK,CAAC,CAAE,MAAO,OAAO,CAC7B,GAAI,CAACA,GAAG,CAAE,MAAO,GAAG,CACpB,GAAIA,GAAG,CAAG,QAAQ,CAAE,CAClB,iBAAWA,GAAG,CAACK,aAAa,CAAC,CAAC,CAAC,EACjC,CACA,GAAKL,GAAG,EAAI,QAAQ,EAAIA,GAAG,CAAG,GAAG,EAAKA,GAAG,CAAG,OAAO,CAAE,CACnD,iBAAWM,MAAM,CAACN,GAAG,CAAC,CAACO,WAAW,CAAC,CAAC,CAAC,EACvC,CACA;AACA;AACA,GAAIP,GAAG,EAAI,GAAG,EAAIA,GAAG,EAAIE,2BAA2B,CAAG,MAAM,CAAG,IAAI,CAAC,CAAE,CACrE,iBAAWF,GAAG,CAACF,OAAO,CAAC,CAAC,CAAC,EAC3B,CACA,iBAAWQ,MAAM,CAACN,GAAG,CAACF,OAAO,CAAC,CAAC,CAAC,CAAC,CAACU,cAAc,CAACrB,cAAc,CAAE,CAAEsB,qBAAqB,CAAE,CAAE,CAAC,CAAC,EAChG,CACA;AAAA,IACK,CACH,GAAIT,GAAG,GAAK,CAAC,CAAE,MAAO,OAAO,CAC7B,GAAI,CAACA,GAAG,CAAE,MAAO,GAAG,CACpB,GAAIA,GAAG,CAAG,QAAQ,CAAE,CAClB,MAAO,YAAY,CACrB,CACA,GAAIA,GAAG,EAAI,QAAQ,EAAIA,GAAG,CAAG,GAAG,CAAE,CAChC,iBAAWM,MAAM,CAACN,GAAG,CAAC,CAACO,WAAW,CAAC,CAAC,CAAC,EACvC,CACA,GAAIP,GAAG,EAAI,GAAG,EAAIA,GAAG,CAAG,IAAI,CAAE,CAC5B,iBAAWA,GAAG,CAACF,OAAO,CAAC,CAAC,CAAC,EAC3B,CAEA,MAAOV,OAAM,CAACY,GAAG,CAAC,CACfU,cAAc,CAAC,CACdC,OAAO,CAAEP,KAAK,CACdQ,QAAQ,CAAEZ,GAAG,CAAG,IAAI,CAAG,CAAC,CAAGG,MAAM,CACjCU,aAAa,CAAE,CACbC,OAAO,CAAE,GAAG,CACZC,OAAO,CAAE,GACX,CACF,CAAC,CAAC,CACDC,WAAW,EAAE,CAClB,CACF,CAAC,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,IAAMC,wBAAuB,CAAG,QAA1BA,wBAAuB,CAAIjB,GAA8B,CAAoB,IAAlBkB,UAAS,2DAAG,CAAC,CACnF,GAAIlB,GAAG,GAAK,CAAC,CAAE,MAAO,MAAM,CAC5B,GAAI,CAACA,GAAG,CAAE,MAAO,EAAE,CACnB,GAAIA,GAAG,CAAG,OAAO,CAAE,CACjB,MAAO,UAAU,CACnB,CACA,GAAIA,GAAG,EAAI,OAAO,EAAIA,GAAG,CAAG,CAAC,CAAE,CAC7B,gBAAUM,MAAM,CAACN,GAAG,CAACF,OAAO,CAAC,CAAC,CAAC,CAAC,CAACU,cAAc,CAACrB,cAAc,CAAE,CAC9DsB,qBAAqB,CAAE,CAAC,CACxBU,qBAAqB,CAAE,CACzB,CAAC,CAAC,EACJ,CACA,GAAInB,GAAG,EAAI,CAAC,EAAIA,GAAG,CAAG,KAAK,CAAE,CAC3B,gBAAUM,MAAM,CAACN,GAAG,CAACO,WAAW,CAAC,CAAC,CAAC,CAAC,CAACC,cAAc,CAACrB,cAAc,CAAE,CAClEsB,qBAAqB,CAAE,CAAC,CACxBU,qBAAqB,CAAE,CACzB,CAAC,CAAC,EACJ,CACA,GAAInB,GAAG,EAAI,KAAK,EAAIA,GAAG,CAAG,OAAO,CAAE,CACjC,gBAAUM,MAAM,CAACN,GAAG,CAACF,OAAO,CAAC,CAAC,CAAC,CAAC,CAACU,cAAc,CAACrB,cAAc,CAAE,CAAEsB,qBAAqB,CAAE,CAAE,CAAC,CAAC,EAC/F,CACA;AACA;AACA,GAAIT,GAAG,EAAIoB,IAAI,CAACC,GAAG,CAAC,EAAE,CAAEH,SAAS,CAAG,CAAC,CAAC,CAAE,CACtC,gBAAUlB,GAAG,CAACK,aAAa,CAACa,SAAS,CAAG,CAAC,CAAC,EAC5C,CACA,gBAAUZ,MAAM,CAACN,GAAG,CAACF,OAAO,CAAC,CAAC,CAAC,CAAC,CAACU,cAAc,CAACrB,cAAc,CAAE,CAAEsB,qBAAqB,CAAE,CAAE,CAAC,CAAC,EAC/F,CAAC"},"metadata":{},"sourceType":"module"}