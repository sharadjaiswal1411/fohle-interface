{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.findGcd = exports.gcd = void 0;\nvar ethers_1 = require(\"ethers\");\nvar gcd = function gcd(a, b) {\n  var bnA = ethers_1.BigNumber.from(a);\n  var bnB = ethers_1.BigNumber.from(b);\n  if (bnA.eq(0)) {\n    return bnB;\n  }\n  return (0, exports.gcd)(bnB.mod(a), bnA);\n};\nexports.gcd = gcd;\nvar findGcd = function findGcd(elements) {\n  var result = ethers_1.BigNumber.from(elements[0]);\n  for (var i = 1; i < elements.length; i++) {\n    result = (0, exports.gcd)(elements[i], result);\n    if (result.eq(1)) {\n      return result;\n    }\n  }\n  return result;\n};\nexports.findGcd = findGcd;","map":{"version":3,"sources":["../../src/utils/gcd.ts"],"names":[],"mappings":";;;;;;AAAA,IAAA,QAAA,GAAA,OAAA,CAAA,QAAA,CAAA;AAEO,IAAM,GAAG,GAAG,SAAN,GAAG,CAAI,CAAe,EAAE,CAAe,EAAA;EAClD,IAAM,GAAG,GAAG,QAAA,CAAA,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;EAC7B,IAAM,GAAG,GAAG,QAAA,CAAA,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;EAE7B,IAAI,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE;IACb,OAAO,GAAG;EACX;EAED,OAAO,CAAA,CAAA,EAAA,OAAA,CAAA,GAAG,EAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC;AAC7B,CAAC;AATY,OAAA,CAAA,GAAG,GAAA,GAAA;AAWT,IAAM,OAAO,GAAG,SAAV,OAAO,CAAI,QAAwB,EAAA;EAC9C,IAAI,MAAM,GAAG,QAAA,CAAA,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;EAExC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IACxC,MAAM,GAAG,CAAA,CAAA,EAAA,OAAA,CAAA,GAAG,EAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC;IAEjC,IAAI,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE;MAChB,OAAO,MAAM;IACd;EACF;EAED,OAAO,MAAM;AACf,CAAC;AAZY,OAAA,CAAA,OAAO,GAAA,OAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.findGcd = exports.gcd = void 0;\nvar ethers_1 = require(\"ethers\");\nvar gcd = function (a, b) {\n    var bnA = ethers_1.BigNumber.from(a);\n    var bnB = ethers_1.BigNumber.from(b);\n    if (bnA.eq(0)) {\n        return bnB;\n    }\n    return (0, exports.gcd)(bnB.mod(a), bnA);\n};\nexports.gcd = gcd;\nvar findGcd = function (elements) {\n    var result = ethers_1.BigNumber.from(elements[0]);\n    for (var i = 1; i < elements.length; i++) {\n        result = (0, exports.gcd)(elements[i], result);\n        if (result.eq(1)) {\n            return result;\n        }\n    }\n    return result;\n};\nexports.findGcd = findGcd;\n//# sourceMappingURL=gcd.js.map"]},"metadata":{},"sourceType":"script"}