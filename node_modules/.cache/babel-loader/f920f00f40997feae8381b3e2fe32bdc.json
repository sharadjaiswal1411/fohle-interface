{"ast":null,"code":"import _defineProperty from\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";var _ETHERSCAN_PREFIXES;import{getAddress}from'@ethersproject/address';import{AddressZero}from'@ethersproject/constants';import{Contract}from'@ethersproject/contracts';import{ArbitrumNetworkInfo,CeloNetworkInfo,PolygonNetworkInfo,OptimismNetworkInfo}from'constants/networks';import{SupportedChainId}from'constants/chains';// returns the checksummed address if the address is valid, otherwise returns false\nexport function isAddress(value){try{// Alphabetical letters must be made lowercase for getAddress to work.\n// See documentation here: https://docs.ethers.io/v5/api/utils/address/\nreturn getAddress(value.toLowerCase());}catch(_unused){return false;}}var ETHERSCAN_PREFIXES=(_ETHERSCAN_PREFIXES={},_defineProperty(_ETHERSCAN_PREFIXES,SupportedChainId.MAINNET,''),_defineProperty(_ETHERSCAN_PREFIXES,SupportedChainId.ROPSTEN,'ropsten.'),_defineProperty(_ETHERSCAN_PREFIXES,SupportedChainId.RINKEBY,'rinkeby.'),_defineProperty(_ETHERSCAN_PREFIXES,SupportedChainId.GOERLI,'goerli.'),_defineProperty(_ETHERSCAN_PREFIXES,SupportedChainId.KOVAN,'kovan.'),_defineProperty(_ETHERSCAN_PREFIXES,SupportedChainId.OPTIMISM,'optimistic.'),_defineProperty(_ETHERSCAN_PREFIXES,SupportedChainId.OPTIMISTIC_KOVAN,'kovan-optimistic.'),_ETHERSCAN_PREFIXES);// shorten the checksummed version of the input address to have 0x + 4 characters at start and end\nexport function shortenAddress(address){var chars=arguments.length>1&&arguments[1]!==undefined?arguments[1]:4;var parsed=isAddress(address);if(!parsed){throw Error(\"Invalid 'address' parameter '\".concat(address,\"'.\"));}return\"\".concat(parsed.substring(0,chars+2),\"...\").concat(parsed.substring(42-chars));}export var currentTimestamp=function currentTimestamp(){return new Date().getTime();};// account is not optional\nfunction getSigner(provider,account){return provider.getSigner(account).connectUnchecked();}// account is optional\nfunction getProviderOrSigner(provider,account){return account?getSigner(provider,account):provider;}// account is optional\nexport function getContract(address,ABI,provider,account){if(!isAddress(address)||address===AddressZero){throw Error(\"Invalid 'address' parameter '\".concat(address,\"'.\"));}return new Contract(address,ABI,getProviderOrSigner(provider,account));}export function escapeRegExp(string){return string.replace(/[.*+?^${}()|[\\]\\\\]/g,'\\\\$&');// $& means the whole matched string\n}export function feeTierPercent(fee){return(fee/10000).toPrecision(1)+'%';}export function notEmpty(value){return value!==null&&value!==undefined;}export function getEtherscanLink(chainId,data,type,networkVersion){var prefix=networkVersion===PolygonNetworkInfo?'https://polygonscan.com/':networkVersion===CeloNetworkInfo?'https://explorer.celo.org':networkVersion===ArbitrumNetworkInfo?'https://arbiscan.io/':networkVersion===OptimismNetworkInfo?'https://optimistic.etherscan.io':\"https://\".concat(ETHERSCAN_PREFIXES[chainId]||ETHERSCAN_PREFIXES[1],\"etherscan.io\");if(networkVersion===OptimismNetworkInfo){switch(type){case'transaction':{return\"\".concat(prefix,\"/tx/\").concat(data);}case'token':{return\"\".concat(prefix,\"/address/\").concat(data);}case'block':{return\"https://optimistic.etherscan.io\";}case'address':default:{return\"\".concat(prefix,\"/address/\").concat(data);}}}if(networkVersion===ArbitrumNetworkInfo){switch(type){case'transaction':{return\"\".concat(prefix,\"/tx/\").concat(data);}case'token':{return\"\".concat(prefix,\"/address/\").concat(data);}case'block':{return'https://arbiscan.io/';}case'address':default:{return\"\".concat(prefix,\"/address/\").concat(data);}}}switch(type){case'transaction':{return\"\".concat(prefix,\"/tx/\").concat(data);}case'token':{return\"\".concat(prefix,\"/token/\").concat(data);}case'block':{return\"\".concat(prefix,\"/block/\").concat(data);}case'address':default:{return\"\".concat(prefix,\"/address/\").concat(data);}}}","map":{"version":3,"names":["getAddress","AddressZero","Contract","ArbitrumNetworkInfo","CeloNetworkInfo","PolygonNetworkInfo","OptimismNetworkInfo","SupportedChainId","isAddress","value","toLowerCase","ETHERSCAN_PREFIXES","MAINNET","ROPSTEN","RINKEBY","GOERLI","KOVAN","OPTIMISM","OPTIMISTIC_KOVAN","shortenAddress","address","chars","parsed","Error","substring","currentTimestamp","Date","getTime","getSigner","provider","account","connectUnchecked","getProviderOrSigner","getContract","ABI","escapeRegExp","string","replace","feeTierPercent","fee","toPrecision","notEmpty","undefined","getEtherscanLink","chainId","data","type","networkVersion","prefix"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/utils/index.ts"],"sourcesContent":["import { getAddress } from '@ethersproject/address'\nimport { AddressZero } from '@ethersproject/constants'\nimport { Contract } from '@ethersproject/contracts'\nimport type { JsonRpcProvider, JsonRpcSigner } from '@ethersproject/providers'\nimport { ArbitrumNetworkInfo, CeloNetworkInfo, NetworkInfo, PolygonNetworkInfo,OptimismNetworkInfo } from 'constants/networks'\nimport { SupportedChainId } from 'constants/chains'\n\n// returns the checksummed address if the address is valid, otherwise returns false\nexport function isAddress(value: any): string | false {\n  try {\n    // Alphabetical letters must be made lowercase for getAddress to work.\n    // See documentation here: https://docs.ethers.io/v5/api/utils/address/\n    return getAddress(value.toLowerCase())\n  } catch {\n    return false\n  }\n}\n\nconst ETHERSCAN_PREFIXES: { [chainId: number]: string } = {\n  [SupportedChainId.MAINNET]: '',\n  [SupportedChainId.ROPSTEN]: 'ropsten.',\n  [SupportedChainId.RINKEBY]: 'rinkeby.',\n  [SupportedChainId.GOERLI]: 'goerli.',\n  [SupportedChainId.KOVAN]: 'kovan.',\n  [SupportedChainId.OPTIMISM]: 'optimistic.',\n  [SupportedChainId.OPTIMISTIC_KOVAN]: 'kovan-optimistic.',\n}\n\n// shorten the checksummed version of the input address to have 0x + 4 characters at start and end\nexport function shortenAddress(address: string, chars = 4): string {\n  const parsed = isAddress(address)\n  if (!parsed) {\n    throw Error(`Invalid 'address' parameter '${address}'.`)\n  }\n  return `${parsed.substring(0, chars + 2)}...${parsed.substring(42 - chars)}`\n}\n\nexport const currentTimestamp = () => new Date().getTime()\n\n// account is not optional\nfunction getSigner(provider: JsonRpcProvider, account: string): JsonRpcSigner {\n  return provider.getSigner(account).connectUnchecked()\n}\n\n// account is optional\nfunction getProviderOrSigner(provider: JsonRpcProvider, account?: string): JsonRpcProvider | JsonRpcSigner {\n  return account ? getSigner(provider, account) : provider\n}\n\n// account is optional\nexport function getContract(address: string, ABI: any, provider: JsonRpcProvider, account?: string): Contract {\n  if (!isAddress(address) || address === AddressZero) {\n    throw Error(`Invalid 'address' parameter '${address}'.`)\n  }\n\n  return new Contract(address, ABI, getProviderOrSigner(provider, account) as any)\n}\n\nexport function escapeRegExp(string: string): string {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') // $& means the whole matched string\n}\n\nexport function feeTierPercent(fee: number): string {\n  return (fee / 10000).toPrecision(1) + '%'\n}\n\nexport function notEmpty<TValue>(value: TValue | null | undefined): value is TValue {\n  return value !== null && value !== undefined\n}\n\n\nexport function getEtherscanLink(\n  chainId: number,\n  data: string,\n  type: 'transaction' | 'token' | 'address' | 'block',\n  networkVersion: NetworkInfo\n): string {\n  const prefix =\n    networkVersion === PolygonNetworkInfo\n      ? 'https://polygonscan.com/'\n      : networkVersion === CeloNetworkInfo\n      ? 'https://explorer.celo.org'\n      : networkVersion === ArbitrumNetworkInfo\n      ? 'https://arbiscan.io/'\n      : networkVersion === OptimismNetworkInfo\n      ? 'https://optimistic.etherscan.io'\n      : `https://${ETHERSCAN_PREFIXES[chainId] || ETHERSCAN_PREFIXES[1]}etherscan.io`\n\n  if (networkVersion === OptimismNetworkInfo) {\n    switch (type) {\n      case 'transaction': {\n        return `${prefix}/tx/${data}`\n      }\n      case 'token': {\n        return `${prefix}/address/${data}`\n      }\n      case 'block': {\n        return `https://optimistic.etherscan.io`\n      }\n      case 'address':\n      default: {\n        return `${prefix}/address/${data}`\n      }\n    }\n  }\n\n  if (networkVersion === ArbitrumNetworkInfo) {\n    switch (type) {\n      case 'transaction': {\n        return `${prefix}/tx/${data}`\n      }\n      case 'token': {\n        return `${prefix}/address/${data}`\n      }\n      case 'block': {\n        return 'https://arbiscan.io/'\n      }\n      case 'address':\n      default: {\n        return `${prefix}/address/${data}`\n      }\n    }\n  }\n\n  switch (type) {\n    case 'transaction': {\n      return `${prefix}/tx/${data}`\n    }\n    case 'token': {\n      return `${prefix}/token/${data}`\n    }\n    case 'block': {\n      return `${prefix}/block/${data}`\n    }\n    case 'address':\n    default: {\n      return `${prefix}/address/${data}`\n    }\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}