{"ast":null,"code":"import{Connector}from'@web3-react/types';import{coinbaseWalletConnection,ConnectionType,gnosisSafeConnection,injectedConnection,networkConnection,walletConnectConnection}from'connection';export function getIsInjected(){return Boolean(window.ethereum);}export function getIsMetaMask(){var _window$ethereum$isMe,_window$ethereum;return(_window$ethereum$isMe=(_window$ethereum=window.ethereum)===null||_window$ethereum===void 0?void 0:_window$ethereum.isMetaMask)!==null&&_window$ethereum$isMe!==void 0?_window$ethereum$isMe:false;}export function getIsCoinbaseWallet(){var _window$ethereum$isCo,_window$ethereum2;return(_window$ethereum$isCo=(_window$ethereum2=window.ethereum)===null||_window$ethereum2===void 0?void 0:_window$ethereum2.isCoinbaseWallet)!==null&&_window$ethereum$isCo!==void 0?_window$ethereum$isCo:false;}var CONNECTIONS=[gnosisSafeConnection,injectedConnection,coinbaseWalletConnection,walletConnectConnection,networkConnection];export function getConnection(c){if(c instanceof Connector){var connection=CONNECTIONS.find(function(connection){return connection.connector===c;});if(!connection){throw Error('unsupported connector');}return connection;}else{switch(c){case ConnectionType.INJECTED:return injectedConnection;case ConnectionType.COINBASE_WALLET:return coinbaseWalletConnection;case ConnectionType.WALLET_CONNECT:return walletConnectConnection;case ConnectionType.NETWORK:return networkConnection;case ConnectionType.GNOSIS_SAFE:return gnosisSafeConnection;}}}export function getConnectionName(connectionType,isMetaMask){switch(connectionType){case ConnectionType.INJECTED:return isMetaMask?'MetaMask':'Browser Wallet';case ConnectionType.COINBASE_WALLET:return'Coinbase Wallet';case ConnectionType.WALLET_CONNECT:return'WalletConnect';case ConnectionType.NETWORK:return'Network';case ConnectionType.GNOSIS_SAFE:return'Gnosis Safe';}}","map":{"version":3,"names":["Connector","coinbaseWalletConnection","ConnectionType","gnosisSafeConnection","injectedConnection","networkConnection","walletConnectConnection","getIsInjected","Boolean","window","ethereum","getIsMetaMask","isMetaMask","getIsCoinbaseWallet","isCoinbaseWallet","CONNECTIONS","getConnection","c","connection","find","connector","Error","INJECTED","COINBASE_WALLET","WALLET_CONNECT","NETWORK","GNOSIS_SAFE","getConnectionName","connectionType"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/connection/utils.ts"],"sourcesContent":["import { Connector } from '@web3-react/types'\nimport {\n  coinbaseWalletConnection,\n  ConnectionType,\n  gnosisSafeConnection,\n  injectedConnection,\n  networkConnection,\n  walletConnectConnection,\n} from 'connection'\n\nexport function getIsInjected(): boolean {\n  return Boolean(window.ethereum)\n}\n\nexport function getIsMetaMask(): boolean {\n  return window.ethereum?.isMetaMask ?? false\n}\n\nexport function getIsCoinbaseWallet(): boolean {\n  return window.ethereum?.isCoinbaseWallet ?? false\n}\n\nconst CONNECTIONS = [\n  gnosisSafeConnection,\n  injectedConnection,\n  coinbaseWalletConnection,\n  walletConnectConnection,\n  networkConnection,\n]\nexport function getConnection(c: Connector | ConnectionType) {\n  if (c instanceof Connector) {\n    const connection = CONNECTIONS.find((connection) => connection.connector === c)\n    if (!connection) {\n      throw Error('unsupported connector')\n    }\n    return connection\n  } else {\n    switch (c) {\n      case ConnectionType.INJECTED:\n        return injectedConnection\n      case ConnectionType.COINBASE_WALLET:\n        return coinbaseWalletConnection\n      case ConnectionType.WALLET_CONNECT:\n        return walletConnectConnection\n      case ConnectionType.NETWORK:\n        return networkConnection\n      case ConnectionType.GNOSIS_SAFE:\n        return gnosisSafeConnection\n    }\n  }\n}\n\nexport function getConnectionName(connectionType: ConnectionType, isMetaMask?: boolean) {\n  switch (connectionType) {\n    case ConnectionType.INJECTED:\n      return isMetaMask ? 'MetaMask' : 'Browser Wallet'\n    case ConnectionType.COINBASE_WALLET:\n      return 'Coinbase Wallet'\n    case ConnectionType.WALLET_CONNECT:\n      return 'WalletConnect'\n    case ConnectionType.NETWORK:\n      return 'Network'\n    case ConnectionType.GNOSIS_SAFE:\n      return 'Gnosis Safe'\n  }\n}\n"],"mappings":"AAAA,OAASA,SAAS,KAAQ,mBAAmB,CAC7C,OACEC,wBAAwB,CACxBC,cAAc,CACdC,oBAAoB,CACpBC,kBAAkB,CAClBC,iBAAiB,CACjBC,uBAAuB,KAClB,YAAY,CAEnB,MAAO,SAASC,cAAa,EAAY,CACvC,MAAOC,QAAO,CAACC,MAAM,CAACC,QAAQ,CAAC,CACjC,CAEA,MAAO,SAASC,cAAa,EAAY,4CACvC,+CAAOF,MAAM,CAACC,QAAQ,2CAAf,iBAAiBE,UAAU,+DAAI,KAAK,CAC7C,CAEA,MAAO,SAASC,oBAAmB,EAAY,6CAC7C,gDAAOJ,MAAM,CAACC,QAAQ,4CAAf,kBAAiBI,gBAAgB,+DAAI,KAAK,CACnD,CAEA,GAAMC,YAAW,CAAG,CAClBZ,oBAAoB,CACpBC,kBAAkB,CAClBH,wBAAwB,CACxBK,uBAAuB,CACvBD,iBAAiB,CAClB,CACD,MAAO,SAASW,cAAa,CAACC,CAA6B,CAAE,CAC3D,GAAIA,CAAC,WAAYjB,UAAS,CAAE,CAC1B,GAAMkB,WAAU,CAAGH,WAAW,CAACI,IAAI,CAAC,SAACD,UAAU,QAAKA,WAAU,CAACE,SAAS,GAAKH,CAAC,GAAC,CAC/E,GAAI,CAACC,UAAU,CAAE,CACf,KAAMG,MAAK,CAAC,uBAAuB,CAAC,CACtC,CACA,MAAOH,WAAU,CACnB,CAAC,IAAM,CACL,OAAQD,CAAC,EACP,IAAKf,eAAc,CAACoB,QAAQ,CAC1B,MAAOlB,mBAAkB,CAC3B,IAAKF,eAAc,CAACqB,eAAe,CACjC,MAAOtB,yBAAwB,CACjC,IAAKC,eAAc,CAACsB,cAAc,CAChC,MAAOlB,wBAAuB,CAChC,IAAKJ,eAAc,CAACuB,OAAO,CACzB,MAAOpB,kBAAiB,CAC1B,IAAKH,eAAc,CAACwB,WAAW,CAC7B,MAAOvB,qBAAoB,EAEjC,CACF,CAEA,MAAO,SAASwB,kBAAiB,CAACC,cAA8B,CAAEhB,UAAoB,CAAE,CACtF,OAAQgB,cAAc,EACpB,IAAK1B,eAAc,CAACoB,QAAQ,CAC1B,MAAOV,WAAU,CAAG,UAAU,CAAG,gBAAgB,CACnD,IAAKV,eAAc,CAACqB,eAAe,CACjC,MAAO,iBAAiB,CAC1B,IAAKrB,eAAc,CAACsB,cAAc,CAChC,MAAO,eAAe,CACxB,IAAKtB,eAAc,CAACuB,OAAO,CACzB,MAAO,SAAS,CAClB,IAAKvB,eAAc,CAACwB,WAAW,CAC7B,MAAO,aAAa,EAE1B"},"metadata":{},"sourceType":"module"}