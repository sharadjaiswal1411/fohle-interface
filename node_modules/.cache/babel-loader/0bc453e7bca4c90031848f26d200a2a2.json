{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar color_1 = require(\"@vibrant/color\");\nvar converter_1 = require(\"@vibrant/color/lib/converter\");\nvar DefaultOpts = {\n  targetDarkLuma: 0.26,\n  maxDarkLuma: 0.45,\n  minLightLuma: 0.55,\n  targetLightLuma: 0.74,\n  minNormalLuma: 0.3,\n  targetNormalLuma: 0.5,\n  maxNormalLuma: 0.7,\n  targetMutesSaturation: 0.3,\n  maxMutesSaturation: 0.4,\n  targetVibrantSaturation: 1.0,\n  minVibrantSaturation: 0.35,\n  weightSaturation: 3,\n  weightLuma: 6.5,\n  weightPopulation: 0.5\n};\nfunction _findMaxPopulation(swatches) {\n  var p = 0;\n  swatches.forEach(function (s) {\n    p = Math.max(p, s.population);\n  });\n  return p;\n}\nfunction _isAlreadySelected(palette, s) {\n  return palette.Vibrant === s || palette.DarkVibrant === s || palette.LightVibrant === s || palette.Muted === s || palette.DarkMuted === s || palette.LightMuted === s;\n}\nfunction _createComparisonValue(saturation, targetSaturation, luma, targetLuma, population, maxPopulation, opts) {\n  function weightedMean() {\n    var values = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      values[_i] = arguments[_i];\n    }\n    var sum = 0;\n    var weightSum = 0;\n    for (var i = 0; i < values.length; i += 2) {\n      var value = values[i];\n      var weight = values[i + 1];\n      sum += value * weight;\n      weightSum += weight;\n    }\n    return sum / weightSum;\n  }\n  function invertDiff(value, targetValue) {\n    return 1 - Math.abs(value - targetValue);\n  }\n  return weightedMean(invertDiff(saturation, targetSaturation), opts.weightSaturation, invertDiff(luma, targetLuma), opts.weightLuma, population / maxPopulation, opts.weightPopulation);\n}\nfunction _findColorVariation(palette, swatches, maxPopulation, targetLuma, minLuma, maxLuma, targetSaturation, minSaturation, maxSaturation, opts) {\n  var max = null;\n  var maxValue = 0;\n  swatches.forEach(function (swatch) {\n    var _a = swatch.hsl,\n      s = _a[1],\n      l = _a[2];\n    if (s >= minSaturation && s <= maxSaturation && l >= minLuma && l <= maxLuma && !_isAlreadySelected(palette, swatch)) {\n      var value = _createComparisonValue(s, targetSaturation, l, targetLuma, swatch.population, maxPopulation, opts);\n      if (max === null || value > maxValue) {\n        max = swatch;\n        maxValue = value;\n      }\n    }\n  });\n  return max;\n}\nfunction _generateVariationColors(swatches, maxPopulation, opts) {\n  var palette = {\n    Vibrant: null,\n    DarkVibrant: null,\n    LightVibrant: null,\n    Muted: null,\n    DarkMuted: null,\n    LightMuted: null\n  };\n  // mVibrantSwatch = findColor(TARGET_NORMAL_LUMA, MIN_NORMAL_LUMA, MAX_NORMAL_LUMA,\n  //     TARGET_VIBRANT_SATURATION, MIN_VIBRANT_SATURATION, 1f)\n  palette.Vibrant = _findColorVariation(palette, swatches, maxPopulation, opts.targetNormalLuma, opts.minNormalLuma, opts.maxNormalLuma, opts.targetVibrantSaturation, opts.minVibrantSaturation, 1, opts);\n  // mLightVibrantSwatch = findColor(TARGET_LIGHT_LUMA, MIN_LIGHT_LUMA, 1f,\n  //     TARGET_VIBRANT_SATURATION, MIN_VIBRANT_SATURATION, 1f)\n  palette.LightVibrant = _findColorVariation(palette, swatches, maxPopulation, opts.targetLightLuma, opts.minLightLuma, 1, opts.targetVibrantSaturation, opts.minVibrantSaturation, 1, opts);\n  // mDarkVibrantSwatch = findColor(TARGET_DARK_LUMA, 0f, MAX_DARK_LUMA,\n  //     TARGET_VIBRANT_SATURATION, MIN_VIBRANT_SATURATION, 1f)\n  palette.DarkVibrant = _findColorVariation(palette, swatches, maxPopulation, opts.targetDarkLuma, 0, opts.maxDarkLuma, opts.targetVibrantSaturation, opts.minVibrantSaturation, 1, opts);\n  // mMutedSwatch = findColor(TARGET_NORMAL_LUMA, MIN_NORMAL_LUMA, MAX_NORMAL_LUMA,\n  //     TARGET_MUTED_SATURATION, 0f, MAX_MUTED_SATURATION)\n  palette.Muted = _findColorVariation(palette, swatches, maxPopulation, opts.targetNormalLuma, opts.minNormalLuma, opts.maxNormalLuma, opts.targetMutesSaturation, 0, opts.maxMutesSaturation, opts);\n  // mLightMutedColor = findColor(TARGET_LIGHT_LUMA, MIN_LIGHT_LUMA, 1f,\n  //     TARGET_MUTED_SATURATION, 0f, MAX_MUTED_SATURATION)\n  palette.LightMuted = _findColorVariation(palette, swatches, maxPopulation, opts.targetLightLuma, opts.minLightLuma, 1, opts.targetMutesSaturation, 0, opts.maxMutesSaturation, opts);\n  // mDarkMutedSwatch = findColor(TARGET_DARK_LUMA, 0f, MAX_DARK_LUMA,\n  //     TARGET_MUTED_SATURATION, 0f, MAX_MUTED_SATURATION)\n  palette.DarkMuted = _findColorVariation(palette, swatches, maxPopulation, opts.targetDarkLuma, 0, opts.maxDarkLuma, opts.targetMutesSaturation, 0, opts.maxMutesSaturation, opts);\n  return palette;\n}\nfunction _generateEmptySwatches(palette, maxPopulation, opts) {\n  if (!palette.Vibrant && !palette.DarkVibrant && !palette.LightVibrant) {\n    if (!palette.DarkVibrant && palette.DarkMuted) {\n      var _a = palette.DarkMuted.hsl,\n        h = _a[0],\n        s = _a[1],\n        l = _a[2];\n      l = opts.targetDarkLuma;\n      palette.DarkVibrant = new color_1.Swatch(converter_1.hslToRgb(h, s, l), 0);\n    }\n    if (!palette.LightVibrant && palette.LightMuted) {\n      var _b = palette.LightMuted.hsl,\n        h = _b[0],\n        s = _b[1],\n        l = _b[2];\n      l = opts.targetDarkLuma;\n      palette.DarkVibrant = new color_1.Swatch(converter_1.hslToRgb(h, s, l), 0);\n    }\n  }\n  if (!palette.Vibrant && palette.DarkVibrant) {\n    var _c = palette.DarkVibrant.hsl,\n      h = _c[0],\n      s = _c[1],\n      l = _c[2];\n    l = opts.targetNormalLuma;\n    palette.Vibrant = new color_1.Swatch(converter_1.hslToRgb(h, s, l), 0);\n  } else if (!palette.Vibrant && palette.LightVibrant) {\n    var _d = palette.LightVibrant.hsl,\n      h = _d[0],\n      s = _d[1],\n      l = _d[2];\n    l = opts.targetNormalLuma;\n    palette.Vibrant = new color_1.Swatch(converter_1.hslToRgb(h, s, l), 0);\n  }\n  if (!palette.DarkVibrant && palette.Vibrant) {\n    var _e = palette.Vibrant.hsl,\n      h = _e[0],\n      s = _e[1],\n      l = _e[2];\n    l = opts.targetDarkLuma;\n    palette.DarkVibrant = new color_1.Swatch(converter_1.hslToRgb(h, s, l), 0);\n  }\n  if (!palette.LightVibrant && palette.Vibrant) {\n    var _f = palette.Vibrant.hsl,\n      h = _f[0],\n      s = _f[1],\n      l = _f[2];\n    l = opts.targetLightLuma;\n    palette.LightVibrant = new color_1.Swatch(converter_1.hslToRgb(h, s, l), 0);\n  }\n  if (!palette.Muted && palette.Vibrant) {\n    var _g = palette.Vibrant.hsl,\n      h = _g[0],\n      s = _g[1],\n      l = _g[2];\n    l = opts.targetMutesSaturation;\n    palette.Muted = new color_1.Swatch(converter_1.hslToRgb(h, s, l), 0);\n  }\n  if (!palette.DarkMuted && palette.DarkVibrant) {\n    var _h = palette.DarkVibrant.hsl,\n      h = _h[0],\n      s = _h[1],\n      l = _h[2];\n    l = opts.targetMutesSaturation;\n    palette.DarkMuted = new color_1.Swatch(converter_1.hslToRgb(h, s, l), 0);\n  }\n  if (!palette.LightMuted && palette.LightVibrant) {\n    var _j = palette.LightVibrant.hsl,\n      h = _j[0],\n      s = _j[1],\n      l = _j[2];\n    l = opts.targetMutesSaturation;\n    palette.LightMuted = new color_1.Swatch(converter_1.hslToRgb(h, s, l), 0);\n  }\n}\nvar DefaultGenerator = function DefaultGenerator(swatches, opts) {\n  opts = Object.assign({}, DefaultOpts, opts);\n  var maxPopulation = _findMaxPopulation(swatches);\n  var palette = _generateVariationColors(swatches, maxPopulation, opts);\n  _generateEmptySwatches(palette, maxPopulation, opts);\n  return palette;\n};\nexports.default = DefaultGenerator;","map":{"version":3,"sources":["../../../../packages/vibrant-generator-default/src/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar color_1 = require(\"@vibrant/color\");\nvar converter_1 = require(\"@vibrant/color/lib/converter\");\nvar DefaultOpts = {\n    targetDarkLuma: 0.26,\n    maxDarkLuma: 0.45,\n    minLightLuma: 0.55,\n    targetLightLuma: 0.74,\n    minNormalLuma: 0.3,\n    targetNormalLuma: 0.5,\n    maxNormalLuma: 0.7,\n    targetMutesSaturation: 0.3,\n    maxMutesSaturation: 0.4,\n    targetVibrantSaturation: 1.0,\n    minVibrantSaturation: 0.35,\n    weightSaturation: 3,\n    weightLuma: 6.5,\n    weightPopulation: 0.5\n};\nfunction _findMaxPopulation(swatches) {\n    var p = 0;\n    swatches.forEach(function (s) {\n        p = Math.max(p, s.population);\n    });\n    return p;\n}\nfunction _isAlreadySelected(palette, s) {\n    return palette.Vibrant === s\n        || palette.DarkVibrant === s\n        || palette.LightVibrant === s\n        || palette.Muted === s\n        || palette.DarkMuted === s\n        || palette.LightMuted === s;\n}\nfunction _createComparisonValue(saturation, targetSaturation, luma, targetLuma, population, maxPopulation, opts) {\n    function weightedMean() {\n        var values = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            values[_i] = arguments[_i];\n        }\n        var sum = 0;\n        var weightSum = 0;\n        for (var i = 0; i < values.length; i += 2) {\n            var value = values[i];\n            var weight = values[i + 1];\n            sum += value * weight;\n            weightSum += weight;\n        }\n        return sum / weightSum;\n    }\n    function invertDiff(value, targetValue) {\n        return 1 - Math.abs(value - targetValue);\n    }\n    return weightedMean(invertDiff(saturation, targetSaturation), opts.weightSaturation, invertDiff(luma, targetLuma), opts.weightLuma, population / maxPopulation, opts.weightPopulation);\n}\nfunction _findColorVariation(palette, swatches, maxPopulation, targetLuma, minLuma, maxLuma, targetSaturation, minSaturation, maxSaturation, opts) {\n    var max = null;\n    var maxValue = 0;\n    swatches.forEach(function (swatch) {\n        var _a = swatch.hsl, s = _a[1], l = _a[2];\n        if (s >= minSaturation && s <= maxSaturation\n            && l >= minLuma && l <= maxLuma\n            && !_isAlreadySelected(palette, swatch)) {\n            var value = _createComparisonValue(s, targetSaturation, l, targetLuma, swatch.population, maxPopulation, opts);\n            if (max === null || value > maxValue) {\n                max = swatch;\n                maxValue = value;\n            }\n        }\n    });\n    return max;\n}\nfunction _generateVariationColors(swatches, maxPopulation, opts) {\n    var palette = {\n        Vibrant: null,\n        DarkVibrant: null,\n        LightVibrant: null,\n        Muted: null,\n        DarkMuted: null,\n        LightMuted: null\n    };\n    // mVibrantSwatch = findColor(TARGET_NORMAL_LUMA, MIN_NORMAL_LUMA, MAX_NORMAL_LUMA,\n    //     TARGET_VIBRANT_SATURATION, MIN_VIBRANT_SATURATION, 1f)\n    palette.Vibrant = _findColorVariation(palette, swatches, maxPopulation, opts.targetNormalLuma, opts.minNormalLuma, opts.maxNormalLuma, opts.targetVibrantSaturation, opts.minVibrantSaturation, 1, opts);\n    // mLightVibrantSwatch = findColor(TARGET_LIGHT_LUMA, MIN_LIGHT_LUMA, 1f,\n    //     TARGET_VIBRANT_SATURATION, MIN_VIBRANT_SATURATION, 1f)\n    palette.LightVibrant = _findColorVariation(palette, swatches, maxPopulation, opts.targetLightLuma, opts.minLightLuma, 1, opts.targetVibrantSaturation, opts.minVibrantSaturation, 1, opts);\n    // mDarkVibrantSwatch = findColor(TARGET_DARK_LUMA, 0f, MAX_DARK_LUMA,\n    //     TARGET_VIBRANT_SATURATION, MIN_VIBRANT_SATURATION, 1f)\n    palette.DarkVibrant = _findColorVariation(palette, swatches, maxPopulation, opts.targetDarkLuma, 0, opts.maxDarkLuma, opts.targetVibrantSaturation, opts.minVibrantSaturation, 1, opts);\n    // mMutedSwatch = findColor(TARGET_NORMAL_LUMA, MIN_NORMAL_LUMA, MAX_NORMAL_LUMA,\n    //     TARGET_MUTED_SATURATION, 0f, MAX_MUTED_SATURATION)\n    palette.Muted = _findColorVariation(palette, swatches, maxPopulation, opts.targetNormalLuma, opts.minNormalLuma, opts.maxNormalLuma, opts.targetMutesSaturation, 0, opts.maxMutesSaturation, opts);\n    // mLightMutedColor = findColor(TARGET_LIGHT_LUMA, MIN_LIGHT_LUMA, 1f,\n    //     TARGET_MUTED_SATURATION, 0f, MAX_MUTED_SATURATION)\n    palette.LightMuted = _findColorVariation(palette, swatches, maxPopulation, opts.targetLightLuma, opts.minLightLuma, 1, opts.targetMutesSaturation, 0, opts.maxMutesSaturation, opts);\n    // mDarkMutedSwatch = findColor(TARGET_DARK_LUMA, 0f, MAX_DARK_LUMA,\n    //     TARGET_MUTED_SATURATION, 0f, MAX_MUTED_SATURATION)\n    palette.DarkMuted = _findColorVariation(palette, swatches, maxPopulation, opts.targetDarkLuma, 0, opts.maxDarkLuma, opts.targetMutesSaturation, 0, opts.maxMutesSaturation, opts);\n    return palette;\n}\nfunction _generateEmptySwatches(palette, maxPopulation, opts) {\n    if (!palette.Vibrant && !palette.DarkVibrant && !palette.LightVibrant) {\n        if (!palette.DarkVibrant && palette.DarkMuted) {\n            var _a = palette.DarkMuted.hsl, h = _a[0], s = _a[1], l = _a[2];\n            l = opts.targetDarkLuma;\n            palette.DarkVibrant = new color_1.Swatch(converter_1.hslToRgb(h, s, l), 0);\n        }\n        if (!palette.LightVibrant && palette.LightMuted) {\n            var _b = palette.LightMuted.hsl, h = _b[0], s = _b[1], l = _b[2];\n            l = opts.targetDarkLuma;\n            palette.DarkVibrant = new color_1.Swatch(converter_1.hslToRgb(h, s, l), 0);\n        }\n    }\n    if (!palette.Vibrant && palette.DarkVibrant) {\n        var _c = palette.DarkVibrant.hsl, h = _c[0], s = _c[1], l = _c[2];\n        l = opts.targetNormalLuma;\n        palette.Vibrant = new color_1.Swatch(converter_1.hslToRgb(h, s, l), 0);\n    }\n    else if (!palette.Vibrant && palette.LightVibrant) {\n        var _d = palette.LightVibrant.hsl, h = _d[0], s = _d[1], l = _d[2];\n        l = opts.targetNormalLuma;\n        palette.Vibrant = new color_1.Swatch(converter_1.hslToRgb(h, s, l), 0);\n    }\n    if (!palette.DarkVibrant && palette.Vibrant) {\n        var _e = palette.Vibrant.hsl, h = _e[0], s = _e[1], l = _e[2];\n        l = opts.targetDarkLuma;\n        palette.DarkVibrant = new color_1.Swatch(converter_1.hslToRgb(h, s, l), 0);\n    }\n    if (!palette.LightVibrant && palette.Vibrant) {\n        var _f = palette.Vibrant.hsl, h = _f[0], s = _f[1], l = _f[2];\n        l = opts.targetLightLuma;\n        palette.LightVibrant = new color_1.Swatch(converter_1.hslToRgb(h, s, l), 0);\n    }\n    if (!palette.Muted && palette.Vibrant) {\n        var _g = palette.Vibrant.hsl, h = _g[0], s = _g[1], l = _g[2];\n        l = opts.targetMutesSaturation;\n        palette.Muted = new color_1.Swatch(converter_1.hslToRgb(h, s, l), 0);\n    }\n    if (!palette.DarkMuted && palette.DarkVibrant) {\n        var _h = palette.DarkVibrant.hsl, h = _h[0], s = _h[1], l = _h[2];\n        l = opts.targetMutesSaturation;\n        palette.DarkMuted = new color_1.Swatch(converter_1.hslToRgb(h, s, l), 0);\n    }\n    if (!palette.LightMuted && palette.LightVibrant) {\n        var _j = palette.LightVibrant.hsl, h = _j[0], s = _j[1], l = _j[2];\n        l = opts.targetMutesSaturation;\n        palette.LightMuted = new color_1.Swatch(converter_1.hslToRgb(h, s, l), 0);\n    }\n}\nvar DefaultGenerator = function (swatches, opts) {\n    opts = Object.assign({}, DefaultOpts, opts);\n    var maxPopulation = _findMaxPopulation(swatches);\n    var palette = _generateVariationColors(swatches, maxPopulation, opts);\n    _generateEmptySwatches(palette, maxPopulation, opts);\n    return palette;\n};\nexports.default = DefaultGenerator;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}