{"ast":null,"code":"var _ref,\n  _ref2,\n  _parseLocale2,\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { DEFAULT_LOCALE, SUPPORTED_LOCALES } from 'constants/locales';\nimport { useMemo } from 'react';\nimport store from 'state';\nimport { useUserLocale } from 'state/user/hooks';\nimport useParsedQueryString from './useParsedQueryString';\nimport { parsedQueryString } from './useParsedQueryString';\n\n/**\n * Given a locale string (e.g. from user agent), return the best match for corresponding SupportedLocale\n * @param maybeSupportedLocale the fuzzy locale identifier\n */\nfunction parseLocale(maybeSupportedLocale) {\n  if (typeof maybeSupportedLocale !== 'string') return undefined;\n  const lowerMaybeSupportedLocale = maybeSupportedLocale.toLowerCase();\n  return SUPPORTED_LOCALES.find(locale => locale.toLowerCase() === lowerMaybeSupportedLocale || locale.split('-')[0] === lowerMaybeSupportedLocale);\n}\n\n/**\n * Returns the supported locale read from the user agent (navigator)\n */\nexport function navigatorLocale() {\n  if (!navigator.language) return undefined;\n  const [language, region] = navigator.language.split('-');\n  if (region) {\n    var _parseLocale;\n    return (_parseLocale = parseLocale(`${language}-${region.toUpperCase()}`)) !== null && _parseLocale !== void 0 ? _parseLocale : parseLocale(language);\n  }\n  return parseLocale(language);\n}\nfunction storeLocale() {\n  var _store$getState$user$;\n  return (_store$getState$user$ = store.getState().user.userLocale) !== null && _store$getState$user$ !== void 0 ? _store$getState$user$ : undefined;\n}\nexport const initialLocale = (_ref = (_ref2 = (_parseLocale2 = parseLocale(parsedQueryString().lng)) !== null && _parseLocale2 !== void 0 ? _parseLocale2 : storeLocale()) !== null && _ref2 !== void 0 ? _ref2 : navigatorLocale()) !== null && _ref !== void 0 ? _ref : DEFAULT_LOCALE;\nfunction useUrlLocale() {\n  _s();\n  const parsed = useParsedQueryString();\n  return parseLocale(parsed.lng);\n}\n\n/**\n * Returns the currently active locale, from a combination of user agent, query string, and user settings stored in redux\n * Stores the query string locale in redux (if set) to persist across sessions\n */\n_s(useUrlLocale, \"MzBgORvAqJk0qNb8xJ4J0bE+Ge4=\", false, function () {\n  return [useParsedQueryString];\n});\nexport function useActiveLocale() {\n  _s2();\n  const urlLocale = useUrlLocale();\n  const userLocale = useUserLocale();\n  return useMemo(() => {\n    var _ref3, _ref4;\n    return (_ref3 = (_ref4 = urlLocale !== null && urlLocale !== void 0 ? urlLocale : userLocale) !== null && _ref4 !== void 0 ? _ref4 : navigatorLocale()) !== null && _ref3 !== void 0 ? _ref3 : DEFAULT_LOCALE;\n  }, [urlLocale, userLocale]);\n}\n_s2(useActiveLocale, \"CF/fsAADNqmTeWk1DqO9z1b7SVk=\", false, function () {\n  return [useUrlLocale, useUserLocale];\n});","map":{"version":3,"names":["DEFAULT_LOCALE","SUPPORTED_LOCALES","useMemo","store","useUserLocale","useParsedQueryString","parsedQueryString","parseLocale","maybeSupportedLocale","undefined","lowerMaybeSupportedLocale","toLowerCase","find","locale","split","navigatorLocale","navigator","language","region","toUpperCase","storeLocale","getState","user","userLocale","initialLocale","lng","useUrlLocale","parsed","useActiveLocale","urlLocale"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/hooks/useActiveLocale.ts"],"sourcesContent":["import { DEFAULT_LOCALE, SUPPORTED_LOCALES, SupportedLocale } from 'constants/locales'\nimport { useMemo } from 'react'\nimport store from 'state'\nimport { useUserLocale } from 'state/user/hooks'\n\nimport useParsedQueryString from './useParsedQueryString'\nimport { parsedQueryString } from './useParsedQueryString'\n\n/**\n * Given a locale string (e.g. from user agent), return the best match for corresponding SupportedLocale\n * @param maybeSupportedLocale the fuzzy locale identifier\n */\nfunction parseLocale(maybeSupportedLocale: unknown): SupportedLocale | undefined {\n  if (typeof maybeSupportedLocale !== 'string') return undefined\n  const lowerMaybeSupportedLocale = maybeSupportedLocale.toLowerCase()\n  return SUPPORTED_LOCALES.find(\n    (locale) => locale.toLowerCase() === lowerMaybeSupportedLocale || locale.split('-')[0] === lowerMaybeSupportedLocale\n  )\n}\n\n/**\n * Returns the supported locale read from the user agent (navigator)\n */\nexport function navigatorLocale(): SupportedLocale | undefined {\n  if (!navigator.language) return undefined\n\n  const [language, region] = navigator.language.split('-')\n\n  if (region) {\n    return parseLocale(`${language}-${region.toUpperCase()}`) ?? parseLocale(language)\n  }\n\n  return parseLocale(language)\n}\n\nfunction storeLocale(): SupportedLocale | undefined {\n  return store.getState().user.userLocale ?? undefined\n}\n\nexport const initialLocale =\n  parseLocale(parsedQueryString().lng) ?? storeLocale() ?? navigatorLocale() ?? DEFAULT_LOCALE\n\nfunction useUrlLocale() {\n  const parsed = useParsedQueryString()\n  return parseLocale(parsed.lng)\n}\n\n/**\n * Returns the currently active locale, from a combination of user agent, query string, and user settings stored in redux\n * Stores the query string locale in redux (if set) to persist across sessions\n */\nexport function useActiveLocale(): SupportedLocale {\n  const urlLocale = useUrlLocale()\n  const userLocale = useUserLocale()\n  return useMemo(() => urlLocale ?? userLocale ?? navigatorLocale() ?? DEFAULT_LOCALE, [urlLocale, userLocale])\n}\n"],"mappings":";;;;;AAAA,SAASA,cAAc,EAAEC,iBAAiB,QAAyB,mBAAmB;AACtF,SAASC,OAAO,QAAQ,OAAO;AAC/B,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,aAAa,QAAQ,kBAAkB;AAEhD,OAAOC,oBAAoB,MAAM,wBAAwB;AACzD,SAASC,iBAAiB,QAAQ,wBAAwB;;AAE1D;AACA;AACA;AACA;AACA,SAASC,WAAW,CAACC,oBAA6B,EAA+B;EAC/E,IAAI,OAAOA,oBAAoB,KAAK,QAAQ,EAAE,OAAOC,SAAS;EAC9D,MAAMC,yBAAyB,GAAGF,oBAAoB,CAACG,WAAW,EAAE;EACpE,OAAOV,iBAAiB,CAACW,IAAI,CAC1BC,MAAM,IAAKA,MAAM,CAACF,WAAW,EAAE,KAAKD,yBAAyB,IAAIG,MAAM,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAKJ,yBAAyB,CACrH;AACH;;AAEA;AACA;AACA;AACA,OAAO,SAASK,eAAe,GAAgC;EAC7D,IAAI,CAACC,SAAS,CAACC,QAAQ,EAAE,OAAOR,SAAS;EAEzC,MAAM,CAACQ,QAAQ,EAAEC,MAAM,CAAC,GAAGF,SAAS,CAACC,QAAQ,CAACH,KAAK,CAAC,GAAG,CAAC;EAExD,IAAII,MAAM,EAAE;IAAA;IACV,uBAAOX,WAAW,CAAE,GAAEU,QAAS,IAAGC,MAAM,CAACC,WAAW,EAAG,EAAC,CAAC,uDAAIZ,WAAW,CAACU,QAAQ,CAAC;EACpF;EAEA,OAAOV,WAAW,CAACU,QAAQ,CAAC;AAC9B;AAEA,SAASG,WAAW,GAAgC;EAAA;EAClD,gCAAOjB,KAAK,CAACkB,QAAQ,EAAE,CAACC,IAAI,CAACC,UAAU,yEAAId,SAAS;AACtD;AAEA,OAAO,MAAMe,aAAa,qCACxBjB,WAAW,CAACD,iBAAiB,EAAE,CAACmB,GAAG,CAAC,yDAAIL,WAAW,EAAE,yCAAIL,eAAe,EAAE,uCAAIf,cAAc;AAE9F,SAAS0B,YAAY,GAAG;EAAA;EACtB,MAAMC,MAAM,GAAGtB,oBAAoB,EAAE;EACrC,OAAOE,WAAW,CAACoB,MAAM,CAACF,GAAG,CAAC;AAChC;;AAEA;AACA;AACA;AACA;AAHA,GALSC,YAAY;EAAA,QACJrB,oBAAoB;AAAA;AAQrC,OAAO,SAASuB,eAAe,GAAoB;EAAA;EACjD,MAAMC,SAAS,GAAGH,YAAY,EAAE;EAChC,MAAMH,UAAU,GAAGnB,aAAa,EAAE;EAClC,OAAOF,OAAO,CAAC;IAAA;IAAA,yBAAM2B,SAAS,aAATA,SAAS,cAATA,SAAS,GAAIN,UAAU,yCAAIR,eAAe,EAAE,yCAAIf,cAAc;EAAA,GAAE,CAAC6B,SAAS,EAAEN,UAAU,CAAC,CAAC;AAC/G;AAAC,IAJeK,eAAe;EAAA,QACXF,YAAY,EACXtB,aAAa;AAAA"},"metadata":{},"sourceType":"module"}