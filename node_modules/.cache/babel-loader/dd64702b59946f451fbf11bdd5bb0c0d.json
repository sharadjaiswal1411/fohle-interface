{"ast":null,"code":"import { getOriginalFunction } from '@sentry/utils';\nlet originalFunctionToString;\n\n/** Patch toString calls to return proper name for wrapped functions */\nclass FunctionToString {\n  constructor() {\n    FunctionToString.prototype.__init.call(this);\n  }\n  /**\n   * @inheritDoc\n   */\n  static __initStatic() {\n    this.id = 'FunctionToString';\n  }\n\n  /**\n   * @inheritDoc\n   */\n  __init() {\n    this.name = FunctionToString.id;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setupOnce() {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    originalFunctionToString = Function.prototype.toString;\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Function.prototype.toString = function () {\n      const context = getOriginalFunction(this) || this;\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      return originalFunctionToString.apply(context, args);\n    };\n  }\n}\nFunctionToString.__initStatic();\nexport { FunctionToString };","map":{"version":3,"sources":["../../../src/integrations/functiontostring.ts"],"names":[],"mappings":";AAGA,IAAA,wBAAA;;AAEA;AACA,MAAA,gBAAA,CAAA;EAAA,WAAA,GAAA;IAAA,gBAAA,CAAA,SAAA,CAAA,MAAA,CAAA,IAAA,CAAA,IAAA,CAAA;EAAA;EACA;AACA;AACA;EACA,OAAA,YAAA,GAAA;IAAA,IAAA,CAAA,EAAA,GAAA,kBAAA;EAAA;;EAEA;AACA;AACA;EACA,MAAA,GAAA;IAAA,IAAA,CAAA,IAAA,GAAA,gBAAA,CAAA,EAAA;EAAA;;EAEA;AACA;AACA;EACA,SAAA,GAAA;IACA;IACA,wBAAA,GAAA,QAAA,CAAA,SAAA,CAAA,QAAA;;IAEA;IACA,QAAA,CAAA,SAAA,CAAA,QAAA,GAAA,YAAA;MACA,MAAA,OAAA,GAAA,mBAAA,CAAA,IAAA,CAAA,IAAA,IAAA;MAAA,kCADA,IAAA;QAAA,IAAA;MAAA;MAEA,OAAA,wBAAA,CAAA,KAAA,CAAA,OAAA,EAAA,IAAA,CAAA;IACA,CAAA;EACA;AACA;AAAA,gBAAA,CAAA,YAAA,EAAA","sourcesContent":["import { Integration, WrappedFunction } from '@sentry/types';\nimport { getOriginalFunction } from '@sentry/utils';\n\nlet originalFunctionToString: () => void;\n\n/** Patch toString calls to return proper name for wrapped functions */\nexport class FunctionToString implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'FunctionToString';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = FunctionToString.id;\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    originalFunctionToString = Function.prototype.toString;\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Function.prototype.toString = function (this: WrappedFunction, ...args: any[]): string {\n      const context = getOriginalFunction(this) || this;\n      return originalFunctionToString.apply(context, args);\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}