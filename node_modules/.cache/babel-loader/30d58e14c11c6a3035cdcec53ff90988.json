{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport { useMemo } from 'react';\nimport { useClients } from 'state/application/hooks';\nconst TOP_POOLS = gql`\n  query topPools {\n    pools(first: 50, orderBy: totalValueLockedUSD, orderDirection: desc, subgraphError: allow) {\n      id\n    }\n  }\n`;\n/**\n * Fetch top addresses by volume\n */\nexport function useTopPoolAddresses() {\n  _s();\n  const {\n    dataClient\n  } = useClients();\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(TOP_POOLS, {\n    client: dataClient,\n    fetchPolicy: 'cache-first'\n  });\n  const formattedData = useMemo(() => {\n    if (data) {\n      return data.pools.map(p => p.id);\n    } else {\n      return undefined;\n    }\n  }, [data]);\n  return {\n    loading,\n    error: Boolean(error),\n    addresses: formattedData\n  };\n}\n_s(useTopPoolAddresses, \"Z8FToDDLTU+mm8T4kvle3NuC37Y=\", false, function () {\n  return [useClients, useQuery];\n});","map":{"version":3,"names":["useQuery","gql","useMemo","useClients","TOP_POOLS","useTopPoolAddresses","dataClient","loading","error","data","client","fetchPolicy","formattedData","pools","map","p","id","undefined","Boolean","addresses"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/data/pools/topPools.ts"],"sourcesContent":["import { useQuery } from '@apollo/client'\nimport gql from 'graphql-tag'\nimport { useMemo } from 'react'\nimport { useClients } from 'state/application/hooks'\n\nconst TOP_POOLS = gql`\n  query topPools {\n    pools(first: 50, orderBy: totalValueLockedUSD, orderDirection: desc, subgraphError: allow) {\n      id\n    }\n  }\n`\n\ninterface TopPoolsResponse {\n  pools: {\n    id: string\n  }[]\n}\n\n/**\n * Fetch top addresses by volume\n */\nexport function useTopPoolAddresses(): {\n  loading: boolean\n  error: boolean\n  addresses: string[] | undefined\n} {\n  const { dataClient } = useClients()\n  const { loading, error, data } = useQuery<TopPoolsResponse>(TOP_POOLS, {\n    client: dataClient,\n    fetchPolicy: 'cache-first',\n  })\n\n  const formattedData = useMemo(() => {\n    if (data) {\n      return data.pools.map((p) => p.id)\n    } else {\n      return undefined\n    }\n  }, [data])\n\n  return {\n    loading,\n    error: Boolean(error),\n    addresses: formattedData,\n  }\n}\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,gBAAgB;AACzC,OAAOC,GAAG,MAAM,aAAa;AAC7B,SAASC,OAAO,QAAQ,OAAO;AAC/B,SAASC,UAAU,QAAQ,yBAAyB;AAEpD,MAAMC,SAAS,GAAGH,GAAI;AACtB;AACA;AACA;AACA;AACA;AACA,CAAC;AAQD;AACA;AACA;AACA,OAAO,SAASI,mBAAmB,GAIjC;EAAA;EACA,MAAM;IAAEC;EAAW,CAAC,GAAGH,UAAU,EAAE;EACnC,MAAM;IAAEI,OAAO;IAAEC,KAAK;IAAEC;EAAK,CAAC,GAAGT,QAAQ,CAAmBI,SAAS,EAAE;IACrEM,MAAM,EAAEJ,UAAU;IAClBK,WAAW,EAAE;EACf,CAAC,CAAC;EAEF,MAAMC,aAAa,GAAGV,OAAO,CAAC,MAAM;IAClC,IAAIO,IAAI,EAAE;MACR,OAAOA,IAAI,CAACI,KAAK,CAACC,GAAG,CAAEC,CAAC,IAAKA,CAAC,CAACC,EAAE,CAAC;IACpC,CAAC,MAAM;MACL,OAAOC,SAAS;IAClB;EACF,CAAC,EAAE,CAACR,IAAI,CAAC,CAAC;EAEV,OAAO;IACLF,OAAO;IACPC,KAAK,EAAEU,OAAO,CAACV,KAAK,CAAC;IACrBW,SAAS,EAAEP;EACb,CAAC;AACH;AAAC,GAxBeP,mBAAmB;EAAA,QAKVF,UAAU,EACAH,QAAQ;AAAA"},"metadata":{},"sourceType":"module"}