{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\nvar _asyncToGenerator = require(\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\nvar _classCallCheck = require(\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Eth = void 0;\nvar constants_1 = require(\"../eth/constants\");\nvar methods_1 = require(\"../communication/methods\");\nvar inputFormatters = {\n  defaultBlockParam: function defaultBlockParam() {\n    var arg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'latest';\n    return arg;\n  },\n  returnFullTxObjectParam: function returnFullTxObjectParam() {\n    var arg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    return arg;\n  },\n  blockNumberToHex: function blockNumberToHex(arg) {\n    return Number.isInteger(arg) ? \"0x\".concat(arg.toString(16)) : arg;\n  }\n};\nvar Eth = /*#__PURE__*/function () {\n  function Eth(communicator) {\n    var _this = this;\n    _classCallCheck(this, Eth);\n    this.communicator = communicator;\n    this.call = this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_call,\n      formatters: [null, inputFormatters.defaultBlockParam]\n    });\n    this.getBalance = this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_getBalance,\n      formatters: [null, inputFormatters.defaultBlockParam]\n    });\n    this.getCode = this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_getCode,\n      formatters: [null, inputFormatters.defaultBlockParam]\n    });\n    this.getStorageAt = this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_getStorageAt,\n      formatters: [null, inputFormatters.blockNumberToHex, inputFormatters.defaultBlockParam]\n    });\n    this.getPastLogs = this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_getLogs\n    });\n    this.getBlockByHash = this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_getBlockByHash,\n      formatters: [null, inputFormatters.returnFullTxObjectParam]\n    });\n    this.getBlockByNumber = this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_getBlockByNumber,\n      formatters: [inputFormatters.blockNumberToHex, inputFormatters.returnFullTxObjectParam]\n    });\n    this.getTransactionByHash = this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_getTransactionByHash\n    });\n    this.getTransactionReceipt = this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_getTransactionReceipt\n    });\n    this.getTransactionCount = this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_getTransactionCount,\n      formatters: [null, inputFormatters.defaultBlockParam]\n    });\n    this.getGasPrice = this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_gasPrice\n    });\n    this.getEstimateGas = function (transaction) {\n      return _this.buildRequest({\n        call: constants_1.RPC_CALLS.eth_estimateGas\n      })([transaction]);\n    };\n  }\n  _createClass(Eth, [{\n    key: \"buildRequest\",\n    value: function buildRequest(args) {\n      var _this2 = this;\n      var call = args.call,\n        formatters = args.formatters;\n      return /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(params) {\n          var payload, response;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  if (formatters && Array.isArray(params)) {\n                    formatters.forEach(function (formatter, i) {\n                      if (formatter) {\n                        params[i] = formatter(params[i]);\n                      }\n                    });\n                  }\n                  payload = {\n                    call: call,\n                    params: params || []\n                  };\n                  _context.next = 4;\n                  return _this2.communicator.send(methods_1.Methods.rpcCall, payload);\n                case 4:\n                  response = _context.sent;\n                  return _context.abrupt(\"return\", response.data);\n                case 6:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }();\n    }\n  }]);\n  return Eth;\n}();\nexports.Eth = Eth;","map":{"version":3,"sources":["../../../src/eth/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Eth = void 0;\nconst constants_1 = require(\"../eth/constants\");\nconst methods_1 = require(\"../communication/methods\");\nconst inputFormatters = {\n    defaultBlockParam: (arg = 'latest') => arg,\n    returnFullTxObjectParam: (arg = false) => arg,\n    blockNumberToHex: (arg) => Number.isInteger(arg) ? `0x${arg.toString(16)}` : arg,\n};\nclass Eth {\n    constructor(communicator) {\n        this.communicator = communicator;\n        this.call = this.buildRequest({\n            call: constants_1.RPC_CALLS.eth_call,\n            formatters: [null, inputFormatters.defaultBlockParam],\n        });\n        this.getBalance = this.buildRequest({\n            call: constants_1.RPC_CALLS.eth_getBalance,\n            formatters: [null, inputFormatters.defaultBlockParam],\n        });\n        this.getCode = this.buildRequest({\n            call: constants_1.RPC_CALLS.eth_getCode,\n            formatters: [null, inputFormatters.defaultBlockParam],\n        });\n        this.getStorageAt = this.buildRequest({\n            call: constants_1.RPC_CALLS.eth_getStorageAt,\n            formatters: [null, inputFormatters.blockNumberToHex, inputFormatters.defaultBlockParam],\n        });\n        this.getPastLogs = this.buildRequest({\n            call: constants_1.RPC_CALLS.eth_getLogs,\n        });\n        this.getBlockByHash = this.buildRequest({\n            call: constants_1.RPC_CALLS.eth_getBlockByHash,\n            formatters: [null, inputFormatters.returnFullTxObjectParam],\n        });\n        this.getBlockByNumber = this.buildRequest({\n            call: constants_1.RPC_CALLS.eth_getBlockByNumber,\n            formatters: [inputFormatters.blockNumberToHex, inputFormatters.returnFullTxObjectParam],\n        });\n        this.getTransactionByHash = this.buildRequest({\n            call: constants_1.RPC_CALLS.eth_getTransactionByHash,\n        });\n        this.getTransactionReceipt = this.buildRequest({\n            call: constants_1.RPC_CALLS.eth_getTransactionReceipt,\n        });\n        this.getTransactionCount = this.buildRequest({\n            call: constants_1.RPC_CALLS.eth_getTransactionCount,\n            formatters: [null, inputFormatters.defaultBlockParam],\n        });\n        this.getGasPrice = this.buildRequest({\n            call: constants_1.RPC_CALLS.eth_gasPrice,\n        });\n        this.getEstimateGas = (transaction) => this.buildRequest({\n            call: constants_1.RPC_CALLS.eth_estimateGas,\n        })([transaction]);\n    }\n    buildRequest(args) {\n        const { call, formatters } = args;\n        return async (params) => {\n            if (formatters && Array.isArray(params)) {\n                formatters.forEach((formatter, i) => {\n                    if (formatter) {\n                        params[i] = formatter(params[i]);\n                    }\n                });\n            }\n            const payload = {\n                call,\n                params: params || [],\n            };\n            const response = await this.communicator.send(methods_1.Methods.rpcCall, payload);\n            return response.data;\n        };\n    }\n}\nexports.Eth = Eth;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}