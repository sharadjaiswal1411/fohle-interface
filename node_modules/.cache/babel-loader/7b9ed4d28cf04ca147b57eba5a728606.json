{"ast":null,"code":"import _regeneratorRuntime from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _createClass from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A plugin, designed to be used with PrecacheController, to determine the\n * of assets that were updated (or not updated) during the install event.\n *\n * @private\n */\nvar PrecacheInstallReportPlugin = /*#__PURE__*/_createClass(function PrecacheInstallReportPlugin() {\n  var _this = this;\n  _classCallCheck(this, PrecacheInstallReportPlugin);\n  this.updatedURLs = [];\n  this.notUpdatedURLs = [];\n  this.handlerWillStart = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n      var request, state;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              request = _ref.request, state = _ref.state;\n              // TODO: `state` should never be undefined...\n              if (state) {\n                state.originalRequest = request;\n              }\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return function (_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  this.cachedResponseWillBeUsed = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref3) {\n      var event, state, cachedResponse, url;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              event = _ref3.event, state = _ref3.state, cachedResponse = _ref3.cachedResponse;\n              if (event.type === 'install') {\n                // TODO: `state` should never be undefined...\n                url = state.originalRequest.url;\n                if (cachedResponse) {\n                  _this.notUpdatedURLs.push(url);\n                } else {\n                  _this.updatedURLs.push(url);\n                }\n              }\n              return _context2.abrupt(\"return\", cachedResponse);\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    return function (_x2) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n});\nexport { PrecacheInstallReportPlugin };","map":{"version":3,"names":["PrecacheInstallReportPlugin","updatedURLs","notUpdatedURLs","handlerWillStart","request","state","originalRequest","cachedResponseWillBeUsed","event","cachedResponse","type","url","push"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/workbox-precaching/utils/PrecacheInstallReportPlugin.js"],"sourcesContent":["/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A plugin, designed to be used with PrecacheController, to determine the\n * of assets that were updated (or not updated) during the install event.\n *\n * @private\n */\nclass PrecacheInstallReportPlugin {\n    constructor() {\n        this.updatedURLs = [];\n        this.notUpdatedURLs = [];\n        this.handlerWillStart = async ({ request, state, }) => {\n            // TODO: `state` should never be undefined...\n            if (state) {\n                state.originalRequest = request;\n            }\n        };\n        this.cachedResponseWillBeUsed = async ({ event, state, cachedResponse, }) => {\n            if (event.type === 'install') {\n                // TODO: `state` should never be undefined...\n                const url = state.originalRequest.url;\n                if (cachedResponse) {\n                    this.notUpdatedURLs.push(url);\n                }\n                else {\n                    this.updatedURLs.push(url);\n                }\n            }\n            return cachedResponse;\n        };\n    }\n}\nexport { PrecacheInstallReportPlugin };\n"],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,gBAAgB;AACvB;AACA;AACA;AACA;AACA;AACA;AALA,IAMMA,2BAA2B,6BAC7B,uCAAc;EAAA;EAAA;EACV,IAAI,CAACC,WAAW,GAAG,EAAE;EACrB,IAAI,CAACC,cAAc,GAAG,EAAE;EACxB,IAAI,CAACC,gBAAgB;IAAA,qEAAG;MAAA;MAAA;QAAA;UAAA;YAAA;cAASC,OAAO,QAAPA,OAAO,EAAEC,KAAK,QAALA,KAAK;cAC3C;cACA,IAAIA,KAAK,EAAE;gBACPA,KAAK,CAACC,eAAe,GAAGF,OAAO;cACnC;YAAC;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CACJ;IAAA;MAAA;IAAA;EAAA;EACD,IAAI,CAACG,wBAAwB;IAAA,qEAAG;MAAA;MAAA;QAAA;UAAA;YAAA;cAASC,KAAK,SAALA,KAAK,EAAEH,KAAK,SAALA,KAAK,EAAEI,cAAc,SAAdA,cAAc;cACjE,IAAID,KAAK,CAACE,IAAI,KAAK,SAAS,EAAE;gBAC1B;gBACMC,GAAG,GAAGN,KAAK,CAACC,eAAe,CAACK,GAAG;gBACrC,IAAIF,cAAc,EAAE;kBAChB,KAAI,CAACP,cAAc,CAACU,IAAI,CAACD,GAAG,CAAC;gBACjC,CAAC,MACI;kBACD,KAAI,CAACV,WAAW,CAACW,IAAI,CAACD,GAAG,CAAC;gBAC9B;cACJ;cAAC,kCACMF,cAAc;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CACxB;IAAA;MAAA;IAAA;EAAA;AACL,CAAC;AAEL,SAAST,2BAA2B"},"metadata":{},"sourceType":"module"}