{"ast":null,"code":"import { CoinbaseWallet } from '@web3-react/coinbase-wallet';\nimport { initializeConnector } from '@web3-react/core';\nimport { GnosisSafe } from '@web3-react/gnosis-safe';\nimport { MetaMask } from '@web3-react/metamask';\nimport { Network } from '@web3-react/network';\nimport { WalletConnect } from '@web3-react/walletconnect';\nimport { SupportedChainId } from 'constants/chains';\nimport UNISWAP_LOGO_URL from \"../assets/svg/logo.svg\";\nimport { RPC_URLS } from '../constants/networks';\nimport { RPC_PROVIDERS } from '../constants/providers';\nexport let ConnectionType;\n(function (ConnectionType) {\n  ConnectionType[\"INJECTED\"] = \"INJECTED\";\n  ConnectionType[\"COINBASE_WALLET\"] = \"COINBASE_WALLET\";\n  ConnectionType[\"WALLET_CONNECT\"] = \"WALLET_CONNECT\";\n  ConnectionType[\"NETWORK\"] = \"NETWORK\";\n  ConnectionType[\"GNOSIS_SAFE\"] = \"GNOSIS_SAFE\";\n})(ConnectionType || (ConnectionType = {}));\nlet metaMaskErrorHandler;\nexport function setMetMaskErrorHandler(errorHandler) {\n  metaMaskErrorHandler = errorHandler;\n}\nfunction onError(error) {\n  console.debug(`web3-react error: ${error}`);\n}\nfunction onMetamaskError(error) {\n  var _metaMaskErrorHandler;\n  onError(error);\n  (_metaMaskErrorHandler = metaMaskErrorHandler) === null || _metaMaskErrorHandler === void 0 ? void 0 : _metaMaskErrorHandler(error);\n}\nconst [web3Network, web3NetworkHooks] = initializeConnector(actions => new Network({\n  actions,\n  urlMap: RPC_PROVIDERS,\n  defaultChainId: 137\n}));\nexport const networkConnection = {\n  connector: web3Network,\n  hooks: web3NetworkHooks,\n  type: ConnectionType.NETWORK\n};\nconst [web3Injected, web3InjectedHooks] = initializeConnector(actions => new MetaMask({\n  actions,\n  onError: onMetamaskError\n}));\nexport const injectedConnection = {\n  connector: web3Injected,\n  hooks: web3InjectedHooks,\n  type: ConnectionType.INJECTED\n};\nconst [web3GnosisSafe, web3GnosisSafeHooks] = initializeConnector(actions => new GnosisSafe({\n  actions\n}));\nexport const gnosisSafeConnection = {\n  connector: web3GnosisSafe,\n  hooks: web3GnosisSafeHooks,\n  type: ConnectionType.GNOSIS_SAFE\n};\nconst [web3WalletConnect, web3WalletConnectHooks] = initializeConnector(actions => {\n  // Avoid testing for the best URL by only passing a single URL per chain.\n  // Otherwise, WC will not initialize until all URLs have been tested (see getBestUrl in web3-react).\n  const RPC_URLS_WITHOUT_FALLBACKS = Object.entries(RPC_URLS).reduce((map, _ref) => {\n    let [chainId, urls] = _ref;\n    return {\n      ...map,\n      [chainId]: urls[0]\n    };\n  }, {});\n  return new WalletConnect({\n    actions,\n    options: {\n      rpc: RPC_URLS_WITHOUT_FALLBACKS,\n      qrcode: true\n    },\n    onError\n  });\n});\nexport const walletConnectConnection = {\n  connector: web3WalletConnect,\n  hooks: web3WalletConnectHooks,\n  type: ConnectionType.WALLET_CONNECT\n};\nconst [web3CoinbaseWallet, web3CoinbaseWalletHooks] = initializeConnector(actions => new CoinbaseWallet({\n  actions,\n  options: {\n    url: RPC_URLS[SupportedChainId.MAINNET][0],\n    appName: 'Uniswap',\n    appLogoUrl: UNISWAP_LOGO_URL,\n    reloadOnDisconnect: false\n  },\n  onError\n}));\nexport const coinbaseWalletConnection = {\n  connector: web3CoinbaseWallet,\n  hooks: web3CoinbaseWalletHooks,\n  type: ConnectionType.COINBASE_WALLET\n};","map":{"version":3,"names":["CoinbaseWallet","initializeConnector","GnosisSafe","MetaMask","Network","WalletConnect","SupportedChainId","RPC_URLS","RPC_PROVIDERS","ConnectionType","metaMaskErrorHandler","setMetMaskErrorHandler","errorHandler","onError","error","console","debug","onMetamaskError","web3Network","web3NetworkHooks","actions","urlMap","defaultChainId","networkConnection","connector","hooks","type","NETWORK","web3Injected","web3InjectedHooks","injectedConnection","INJECTED","web3GnosisSafe","web3GnosisSafeHooks","gnosisSafeConnection","GNOSIS_SAFE","web3WalletConnect","web3WalletConnectHooks","RPC_URLS_WITHOUT_FALLBACKS","Object","entries","reduce","map","chainId","urls","options","rpc","qrcode","walletConnectConnection","WALLET_CONNECT","web3CoinbaseWallet","web3CoinbaseWalletHooks","url","MAINNET","appName","appLogoUrl","UNISWAP_LOGO_URL","reloadOnDisconnect","coinbaseWalletConnection","COINBASE_WALLET"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/connection/index.ts"],"sourcesContent":["import { CoinbaseWallet } from '@web3-react/coinbase-wallet'\nimport { initializeConnector, Web3ReactHooks } from '@web3-react/core'\nimport { GnosisSafe } from '@web3-react/gnosis-safe'\nimport { MetaMask } from '@web3-react/metamask'\nimport { Network } from '@web3-react/network'\nimport { Connector } from '@web3-react/types'\nimport { WalletConnect } from '@web3-react/walletconnect'\nimport { SupportedChainId } from 'constants/chains'\n\nimport UNISWAP_LOGO_URL from '../assets/svg/logo.svg'\nimport { RPC_URLS } from '../constants/networks'\nimport { RPC_PROVIDERS } from '../constants/providers'\n\nexport enum ConnectionType {\n  INJECTED = 'INJECTED',\n  COINBASE_WALLET = 'COINBASE_WALLET',\n  WALLET_CONNECT = 'WALLET_CONNECT',\n  NETWORK = 'NETWORK',\n  GNOSIS_SAFE = 'GNOSIS_SAFE',\n}\n\nexport interface Connection {\n  connector: Connector\n  hooks: Web3ReactHooks\n  type: ConnectionType\n}\n\nlet metaMaskErrorHandler: (error: Error) => void | undefined\n\nexport function setMetMaskErrorHandler(errorHandler: (error: Error) => void) {\n  metaMaskErrorHandler = errorHandler\n}\n\nfunction onError(error: Error) {\n  console.debug(`web3-react error: ${error}`)\n}\n\nfunction onMetamaskError(error: Error) {\n  onError(error)\n  metaMaskErrorHandler?.(error)\n}\n\nconst [web3Network, web3NetworkHooks] = initializeConnector<Network>(\n  (actions) => new Network({ actions, urlMap: RPC_PROVIDERS, defaultChainId: 137 })\n)\nexport const networkConnection: Connection = {\n  connector: web3Network,\n  hooks: web3NetworkHooks,\n  type: ConnectionType.NETWORK,\n}\n\nconst [web3Injected, web3InjectedHooks] = initializeConnector<MetaMask>(\n  (actions) => new MetaMask({ actions, onError: onMetamaskError })\n)\nexport const injectedConnection: Connection = {\n  connector: web3Injected,\n  hooks: web3InjectedHooks,\n  type: ConnectionType.INJECTED,\n}\n\nconst [web3GnosisSafe, web3GnosisSafeHooks] = initializeConnector<GnosisSafe>((actions) => new GnosisSafe({ actions }))\nexport const gnosisSafeConnection: Connection = {\n  connector: web3GnosisSafe,\n  hooks: web3GnosisSafeHooks,\n  type: ConnectionType.GNOSIS_SAFE,\n}\n\nconst [web3WalletConnect, web3WalletConnectHooks] = initializeConnector<WalletConnect>((actions) => {\n  // Avoid testing for the best URL by only passing a single URL per chain.\n  // Otherwise, WC will not initialize until all URLs have been tested (see getBestUrl in web3-react).\n  const RPC_URLS_WITHOUT_FALLBACKS = Object.entries(RPC_URLS).reduce(\n    (map, [chainId, urls]) => ({\n      ...map,\n      [chainId]: urls[0],\n    }),\n    {}\n  )\n  return new WalletConnect({\n    actions,\n    options: {\n      rpc: RPC_URLS_WITHOUT_FALLBACKS,\n      qrcode: true,\n    },\n    onError,\n  })\n})\nexport const walletConnectConnection: Connection = {\n  connector: web3WalletConnect,\n  hooks: web3WalletConnectHooks,\n  type: ConnectionType.WALLET_CONNECT,\n}\n\nconst [web3CoinbaseWallet, web3CoinbaseWalletHooks] = initializeConnector<CoinbaseWallet>(\n  (actions) =>\n    new CoinbaseWallet({\n      actions,\n      options: {\n        url: RPC_URLS[SupportedChainId.MAINNET][0],\n        appName: 'Uniswap',\n        appLogoUrl: UNISWAP_LOGO_URL,\n        reloadOnDisconnect: false,\n      },\n      onError,\n    })\n)\nexport const coinbaseWalletConnection: Connection = {\n  connector: web3CoinbaseWallet,\n  hooks: web3CoinbaseWalletHooks,\n  type: ConnectionType.COINBASE_WALLET,\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}