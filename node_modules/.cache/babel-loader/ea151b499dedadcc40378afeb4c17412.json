{"ast":null,"code":"import { LogLevel, ServerZone } from '@amplitude/analytics-types';\nimport { AMPLITUDE_SERVER_URL, AMPLITUDE_BATCH_SERVER_URL, EU_AMPLITUDE_SERVER_URL, EU_AMPLITUDE_BATCH_SERVER_URL } from './constants';\nimport { Logger } from './logger';\nexport var getDefaultConfig = function () {\n  return {\n    flushMaxRetries: 12,\n    flushQueueSize: 200,\n    flushIntervalMillis: 10000,\n    logLevel: LogLevel.Warn,\n    loggerProvider: new Logger(),\n    optOut: false,\n    serverUrl: AMPLITUDE_SERVER_URL,\n    serverZone: ServerZone.US,\n    useBatch: false\n  };\n};\nvar Config = /** @class */function () {\n  function Config(options) {\n    var _a, _b, _c;\n    this._optOut = false;\n    var defaultConfig = getDefaultConfig();\n    this.apiKey = options.apiKey;\n    this.flushIntervalMillis = options.flushIntervalMillis || defaultConfig.flushIntervalMillis;\n    this.flushMaxRetries = options.flushMaxRetries || defaultConfig.flushMaxRetries;\n    this.flushQueueSize = options.flushQueueSize || defaultConfig.flushQueueSize;\n    this.loggerProvider = options.loggerProvider || defaultConfig.loggerProvider;\n    this.logLevel = (_a = options.logLevel) !== null && _a !== void 0 ? _a : defaultConfig.logLevel;\n    this.minIdLength = options.minIdLength;\n    this.plan = options.plan;\n    this.ingestionMetadata = options.ingestionMetadata;\n    this.optOut = (_b = options.optOut) !== null && _b !== void 0 ? _b : defaultConfig.optOut;\n    this.serverUrl = options.serverUrl;\n    this.serverZone = options.serverZone || defaultConfig.serverZone;\n    this.storageProvider = options.storageProvider;\n    this.transportProvider = options.transportProvider;\n    this.useBatch = (_c = options.useBatch) !== null && _c !== void 0 ? _c : defaultConfig.useBatch;\n    this.loggerProvider.enable(this.logLevel);\n    var serverConfig = createServerConfig(options.serverUrl, options.serverZone, options.useBatch);\n    this.serverZone = serverConfig.serverZone;\n    this.serverUrl = serverConfig.serverUrl;\n  }\n  Object.defineProperty(Config.prototype, \"optOut\", {\n    get: function () {\n      return this._optOut;\n    },\n    set: function (optOut) {\n      this._optOut = optOut;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return Config;\n}();\nexport { Config };\nexport var getServerUrl = function (serverZone, useBatch) {\n  if (serverZone === ServerZone.EU) {\n    return useBatch ? EU_AMPLITUDE_BATCH_SERVER_URL : EU_AMPLITUDE_SERVER_URL;\n  }\n  return useBatch ? AMPLITUDE_BATCH_SERVER_URL : AMPLITUDE_SERVER_URL;\n};\nexport var createServerConfig = function (serverUrl, serverZone, useBatch) {\n  if (serverUrl === void 0) {\n    serverUrl = '';\n  }\n  if (serverZone === void 0) {\n    serverZone = getDefaultConfig().serverZone;\n  }\n  if (useBatch === void 0) {\n    useBatch = getDefaultConfig().useBatch;\n  }\n  if (serverUrl) {\n    return {\n      serverUrl: serverUrl,\n      serverZone: undefined\n    };\n  }\n  var _serverZone = [ServerZone.US, ServerZone.EU].includes(serverZone) ? serverZone : getDefaultConfig().serverZone;\n  return {\n    serverZone: _serverZone,\n    serverUrl: getServerUrl(_serverZone, useBatch)\n  };\n};","map":{"version":3,"sources":["../../src/config.ts"],"names":[],"mappings":"AAAA,SAKE,QAAQ,EAKR,UAAU,QACL,4BAA4B;AACnC,SACE,oBAAoB,EACpB,0BAA0B,EAC1B,uBAAuB,EACvB,6BAA6B,QACxB,aAAa;AAEpB,SAAS,MAAM,QAAQ,UAAU;AAEjC,OAAO,IAAM,gBAAgB,GAAG,YAAA;EAAM,OAAC;IACrC,eAAe,EAAE,EAAE;IACnB,cAAc,EAAE,GAAG;IACnB,mBAAmB,EAAE,KAAK;IAC1B,QAAQ,EAAE,QAAQ,CAAC,IAAI;IACvB,cAAc,EAAE,IAAI,MAAM,EAAE;IAC5B,MAAM,EAAE,KAAK;IACb,SAAS,EAAE,oBAAoB;IAC/B,UAAU,EAAE,UAAU,CAAC,EAAE;IACzB,QAAQ,EAAE;GACX;AAVqC,CAUpC;AAEF,IAAA,MAAA,GAAA,aAAA,YAAA;EAwBE,SAAA,MAAA,CAAY,OAA6B,EAAA;;IARjC,IAAA,CAAA,OAAO,GAAG,KAAK;IASrB,IAAM,aAAa,GAAG,gBAAgB,EAAE;IACxC,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM;IAC5B,IAAI,CAAC,mBAAmB,GAAG,OAAO,CAAC,mBAAmB,IAAI,aAAa,CAAC,mBAAmB;IAC3F,IAAI,CAAC,eAAe,GAAG,OAAO,CAAC,eAAe,IAAI,aAAa,CAAC,eAAe;IAC/E,IAAI,CAAC,cAAc,GAAG,OAAO,CAAC,cAAc,IAAI,aAAa,CAAC,cAAc;IAC5E,IAAI,CAAC,cAAc,GAAG,OAAO,CAAC,cAAc,IAAI,aAAa,CAAC,cAAc;IAC5E,IAAI,CAAC,QAAQ,GAAG,CAAA,EAAA,GAAA,OAAO,CAAC,QAAQ,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,aAAa,CAAC,QAAQ;IAC1D,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW;IACtC,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI;IACxB,IAAI,CAAC,iBAAiB,GAAG,OAAO,CAAC,iBAAiB;IAClD,IAAI,CAAC,MAAM,GAAG,CAAA,EAAA,GAAA,OAAO,CAAC,MAAM,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,aAAa,CAAC,MAAM;IACpD,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS;IAClC,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,IAAI,aAAa,CAAC,UAAU;IAChE,IAAI,CAAC,eAAe,GAAG,OAAO,CAAC,eAAe;IAC9C,IAAI,CAAC,iBAAiB,GAAG,OAAO,CAAC,iBAAiB;IAClD,IAAI,CAAC,QAAQ,GAAG,CAAA,EAAA,GAAA,OAAO,CAAC,QAAQ,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAI,aAAa,CAAC,QAAQ;IAC1D,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;IAEzC,IAAM,YAAY,GAAG,kBAAkB,CAAC,OAAO,CAAC,SAAS,EAAE,OAAO,CAAC,UAAU,EAAE,OAAO,CAAC,QAAQ,CAAC;IAChG,IAAI,CAAC,UAAU,GAAG,YAAY,CAAC,UAAU;IACzC,IAAI,CAAC,SAAS,GAAG,YAAY,CAAC,SAAS;EACzC;EA7BA,MAAA,CAAA,cAAA,CAAI,MAAA,CAAA,SAAA,EAAA,QAAM,EAAA;SAAV,YAAA;MACE,OAAO,IAAI,CAAC,OAAO;IACrB,CAAC;SACD,UAAW,MAAe,EAAA;MACxB,IAAI,CAAC,OAAO,GAAG,MAAM;IACvB,CAAC;;;IAHA;EA4BH,OAAA,MAAC;AAAD,CAAC,EAAA;;AAED,OAAO,IAAM,YAAY,GAAG,UAAC,UAAsB,EAAE,QAAiB,EAAA;EACpE,IAAI,UAAU,KAAK,UAAU,CAAC,EAAE,EAAE;IAChC,OAAO,QAAQ,GAAG,6BAA6B,GAAG,uBAAuB;EAC1E;EACD,OAAO,QAAQ,GAAG,0BAA0B,GAAG,oBAAoB;AACrE,CAAC;AAED,OAAO,IAAM,kBAAkB,GAAG,UAChC,SAAc,EACd,UAAsD,EACtD,QAA+C,EAAA;EAF/C,IAAA,SAAA,KAAA,KAAA,CAAA,EAAA;IAAA,SAAA,GAAA,EAAc;EAAA;EACd,IAAA,UAAA,KAAA,KAAA,CAAA,EAAA;IAAA,UAAA,GAAyB,gBAAgB,EAAE,CAAC,UAAU;EAAA;EACtD,IAAA,QAAA,KAAA,KAAA,CAAA,EAAA;IAAA,QAAA,GAAoB,gBAAgB,EAAE,CAAC,QAAQ;EAAA;EAE/C,IAAI,SAAS,EAAE;IACb,OAAO;MAAE,SAAS,EAAA,SAAA;MAAE,UAAU,EAAE;IAAS,CAAE;EAC5C;EACD,IAAM,WAAW,GAAG,CAAC,UAAU,CAAC,EAAE,EAAE,UAAU,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC,GAAG,UAAU,GAAG,gBAAgB,EAAE,CAAC,UAAU;EACpH,OAAO;IACL,UAAU,EAAE,WAAW;IACvB,SAAS,EAAE,YAAY,CAAC,WAAW,EAAE,QAAQ;GAC9C;AACH,CAAC","sourcesContent":["import {\n  Event,\n  Config as IConfig,\n  Logger as ILogger,\n  InitOptions,\n  LogLevel,\n  Storage,\n  Transport,\n  Plan,\n  IngestionMetadata,\n  ServerZone,\n} from '@amplitude/analytics-types';\nimport {\n  AMPLITUDE_SERVER_URL,\n  AMPLITUDE_BATCH_SERVER_URL,\n  EU_AMPLITUDE_SERVER_URL,\n  EU_AMPLITUDE_BATCH_SERVER_URL,\n} from './constants';\n\nimport { Logger } from './logger';\n\nexport const getDefaultConfig = () => ({\n  flushMaxRetries: 12,\n  flushQueueSize: 200,\n  flushIntervalMillis: 10000,\n  logLevel: LogLevel.Warn,\n  loggerProvider: new Logger(),\n  optOut: false,\n  serverUrl: AMPLITUDE_SERVER_URL,\n  serverZone: ServerZone.US,\n  useBatch: false,\n});\n\nexport class Config implements IConfig {\n  apiKey: string;\n  flushIntervalMillis: number;\n  flushMaxRetries: number;\n  flushQueueSize: number;\n  loggerProvider: ILogger;\n  logLevel: LogLevel;\n  minIdLength?: number;\n  plan?: Plan;\n  ingestionMetadata?: IngestionMetadata;\n  serverUrl: string | undefined;\n  serverZone?: ServerZone;\n  transportProvider: Transport;\n  storageProvider?: Storage<Event[]>;\n  useBatch: boolean;\n\n  private _optOut = false;\n  get optOut() {\n    return this._optOut;\n  }\n  set optOut(optOut: boolean) {\n    this._optOut = optOut;\n  }\n\n  constructor(options: InitOptions<IConfig>) {\n    const defaultConfig = getDefaultConfig();\n    this.apiKey = options.apiKey;\n    this.flushIntervalMillis = options.flushIntervalMillis || defaultConfig.flushIntervalMillis;\n    this.flushMaxRetries = options.flushMaxRetries || defaultConfig.flushMaxRetries;\n    this.flushQueueSize = options.flushQueueSize || defaultConfig.flushQueueSize;\n    this.loggerProvider = options.loggerProvider || defaultConfig.loggerProvider;\n    this.logLevel = options.logLevel ?? defaultConfig.logLevel;\n    this.minIdLength = options.minIdLength;\n    this.plan = options.plan;\n    this.ingestionMetadata = options.ingestionMetadata;\n    this.optOut = options.optOut ?? defaultConfig.optOut;\n    this.serverUrl = options.serverUrl;\n    this.serverZone = options.serverZone || defaultConfig.serverZone;\n    this.storageProvider = options.storageProvider;\n    this.transportProvider = options.transportProvider;\n    this.useBatch = options.useBatch ?? defaultConfig.useBatch;\n    this.loggerProvider.enable(this.logLevel);\n\n    const serverConfig = createServerConfig(options.serverUrl, options.serverZone, options.useBatch);\n    this.serverZone = serverConfig.serverZone;\n    this.serverUrl = serverConfig.serverUrl;\n  }\n}\n\nexport const getServerUrl = (serverZone: ServerZone, useBatch: boolean) => {\n  if (serverZone === ServerZone.EU) {\n    return useBatch ? EU_AMPLITUDE_BATCH_SERVER_URL : EU_AMPLITUDE_SERVER_URL;\n  }\n  return useBatch ? AMPLITUDE_BATCH_SERVER_URL : AMPLITUDE_SERVER_URL;\n};\n\nexport const createServerConfig = (\n  serverUrl = '',\n  serverZone: ServerZone = getDefaultConfig().serverZone,\n  useBatch: boolean = getDefaultConfig().useBatch,\n) => {\n  if (serverUrl) {\n    return { serverUrl, serverZone: undefined };\n  }\n  const _serverZone = [ServerZone.US, ServerZone.EU].includes(serverZone) ? serverZone : getDefaultConfig().serverZone;\n  return {\n    serverZone: _serverZone,\n    serverUrl: getServerUrl(_serverZone, useBatch),\n  };\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}