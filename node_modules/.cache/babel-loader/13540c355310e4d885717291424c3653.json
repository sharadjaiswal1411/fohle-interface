{"ast":null,"code":"import { BigNumber } from '@ethersproject/bignumber';\nimport { JsonRpcProvider } from '@ethersproject/providers';\nimport DEFAULT_TOKEN_LIST from '@uniswap/default-token-list';\nimport { Protocol, SwapRouter } from '@uniswap/router-sdk';\nimport { Fraction, TradeType } from '@uniswap/sdk-core';\nimport { Pool, Position, SqrtPriceMath, TickMath } from '@uniswap/v3-sdk';\nimport retry from 'async-retry';\nimport JSBI from 'jsbi';\nimport _ from 'lodash';\nimport NodeCache from 'node-cache';\nimport { CachingGasStationProvider, CachingTokenProviderWithFallback, CachingV2PoolProvider, CachingV2SubgraphProvider, CachingV3PoolProvider, CachingV3SubgraphProvider, EIP1559GasPriceProvider, ETHGasStationInfoProvider, LegacyGasPriceProvider, NodeJSCache, OnChainGasPriceProvider, OnChainQuoteProvider, StaticV2SubgraphProvider, StaticV3SubgraphProvider, SwapRouterProvider, UniswapMulticallProvider, URISubgraphProvider, V2QuoteProvider, V2SubgraphProviderWithFallBacks, V3SubgraphProviderWithFallBacks } from '../../providers';\nimport { CachingTokenListProvider } from '../../providers/caching-token-list-provider';\nimport { TokenProvider } from '../../providers/token-provider';\nimport { TokenValidationResult, TokenValidatorProvider } from '../../providers/token-validator-provider';\nimport { V2PoolProvider } from '../../providers/v2/pool-provider';\nimport { ArbitrumGasDataProvider, OptimismGasDataProvider } from '../../providers/v3/gas-data-provider';\nimport { V3PoolProvider } from '../../providers/v3/pool-provider';\nimport { ChainId, ID_TO_CHAIN_ID, ID_TO_NETWORK_NAME, V2_SUPPORTED } from '../../util/chains';\nimport { log } from '../../util/log';\nimport { buildSwapMethodParameters, buildTrade } from '../../util/methodParameters';\nimport { metric, MetricLoggerUnit } from '../../util/metric';\nimport { poolToString, routeToString } from '../../util/routes';\nimport { UNSUPPORTED_TOKENS } from '../../util/unsupported-tokens';\nimport { SwapToRatioStatus } from '../router';\nimport { DEFAULT_ROUTING_CONFIG_BY_CHAIN, ETH_GAS_STATION_API_URL } from './config';\nimport { MixedRouteWithValidQuote, V2RouteWithValidQuote, V3RouteWithValidQuote } from './entities/route-with-valid-quote';\nimport { getBestSwapRoute } from './functions/best-swap-route';\nimport { calculateRatioAmountIn } from './functions/calculate-ratio-amount-in';\nimport { computeAllMixedRoutes, computeAllV2Routes, computeAllV3Routes } from './functions/compute-all-routes';\nimport { getMixedRouteCandidatePools, getV2CandidatePools, getV3CandidatePools } from './functions/get-candidate-pools';\nimport { MixedRouteHeuristicGasModelFactory } from './gas-models/mixedRoute/mixed-route-heuristic-gas-model';\nimport { V2HeuristicGasModelFactory } from './gas-models/v2/v2-heuristic-gas-model';\nimport { V3HeuristicGasModelFactory } from '.';\nexport class AlphaRouter {\n  constructor(_ref) {\n    let {\n      chainId,\n      provider,\n      multicall2Provider,\n      v3PoolProvider,\n      onChainQuoteProvider,\n      v2PoolProvider,\n      v2QuoteProvider,\n      v2SubgraphProvider,\n      tokenProvider,\n      blockedTokenListProvider,\n      v3SubgraphProvider,\n      gasPriceProvider,\n      v3GasModelFactory,\n      v2GasModelFactory,\n      mixedRouteGasModelFactory,\n      swapRouterProvider,\n      optimismGasDataProvider,\n      tokenValidatorProvider,\n      arbitrumGasDataProvider,\n      simulator\n    } = _ref;\n    this.chainId = chainId;\n    this.provider = provider;\n    this.multicall2Provider = multicall2Provider !== null && multicall2Provider !== void 0 ? multicall2Provider : new UniswapMulticallProvider(chainId, provider, 375000);\n    this.v3PoolProvider = v3PoolProvider !== null && v3PoolProvider !== void 0 ? v3PoolProvider : new CachingV3PoolProvider(this.chainId, new V3PoolProvider(ID_TO_CHAIN_ID(chainId), this.multicall2Provider), new NodeJSCache(new NodeCache({\n      stdTTL: 360,\n      useClones: false\n    })));\n    this.simulator = simulator;\n    if (onChainQuoteProvider) {\n      this.onChainQuoteProvider = onChainQuoteProvider;\n    } else {\n      switch (chainId) {\n        case ChainId.OPTIMISM:\n        case ChainId.OPTIMISTIC_KOVAN:\n          this.onChainQuoteProvider = new OnChainQuoteProvider(chainId, provider, this.multicall2Provider, {\n            retries: 2,\n            minTimeout: 100,\n            maxTimeout: 1000\n          }, {\n            multicallChunk: 110,\n            gasLimitPerCall: 1200000,\n            quoteMinSuccessRate: 0.1\n          }, {\n            gasLimitOverride: 3000000,\n            multicallChunk: 45\n          }, {\n            gasLimitOverride: 3000000,\n            multicallChunk: 45\n          }, {\n            baseBlockOffset: -10,\n            rollback: {\n              enabled: true,\n              attemptsBeforeRollback: 1,\n              rollbackBlockOffset: -10\n            }\n          });\n          break;\n        case ChainId.ARBITRUM_ONE:\n        case ChainId.ARBITRUM_RINKEBY:\n          this.onChainQuoteProvider = new OnChainQuoteProvider(chainId, provider, this.multicall2Provider, {\n            retries: 2,\n            minTimeout: 100,\n            maxTimeout: 1000\n          }, {\n            multicallChunk: 10,\n            gasLimitPerCall: 12000000,\n            quoteMinSuccessRate: 0.1\n          }, {\n            gasLimitOverride: 30000000,\n            multicallChunk: 6\n          }, {\n            gasLimitOverride: 30000000,\n            multicallChunk: 6\n          });\n          break;\n        case ChainId.CELO:\n        case ChainId.CELO_ALFAJORES:\n          this.onChainQuoteProvider = new OnChainQuoteProvider(chainId, provider, this.multicall2Provider, {\n            retries: 2,\n            minTimeout: 100,\n            maxTimeout: 1000\n          }, {\n            multicallChunk: 10,\n            gasLimitPerCall: 5000000,\n            quoteMinSuccessRate: 0.1\n          }, {\n            gasLimitOverride: 5000000,\n            multicallChunk: 5\n          }, {\n            gasLimitOverride: 6250000,\n            multicallChunk: 4\n          });\n          break;\n        default:\n          this.onChainQuoteProvider = new OnChainQuoteProvider(chainId, provider, this.multicall2Provider, {\n            retries: 2,\n            minTimeout: 100,\n            maxTimeout: 1000\n          }, {\n            multicallChunk: 210,\n            gasLimitPerCall: 705000,\n            quoteMinSuccessRate: 0.15\n          }, {\n            gasLimitOverride: 2000000,\n            multicallChunk: 70\n          });\n          break;\n      }\n    }\n    this.v2PoolProvider = v2PoolProvider !== null && v2PoolProvider !== void 0 ? v2PoolProvider : new CachingV2PoolProvider(chainId, new V2PoolProvider(chainId, this.multicall2Provider), new NodeJSCache(new NodeCache({\n      stdTTL: 60,\n      useClones: false\n    })));\n    this.v2QuoteProvider = v2QuoteProvider !== null && v2QuoteProvider !== void 0 ? v2QuoteProvider : new V2QuoteProvider();\n    this.blockedTokenListProvider = blockedTokenListProvider !== null && blockedTokenListProvider !== void 0 ? blockedTokenListProvider : new CachingTokenListProvider(chainId, UNSUPPORTED_TOKENS, new NodeJSCache(new NodeCache({\n      stdTTL: 3600,\n      useClones: false\n    })));\n    this.tokenProvider = tokenProvider !== null && tokenProvider !== void 0 ? tokenProvider : new CachingTokenProviderWithFallback(chainId, new NodeJSCache(new NodeCache({\n      stdTTL: 3600,\n      useClones: false\n    })), new CachingTokenListProvider(chainId, DEFAULT_TOKEN_LIST, new NodeJSCache(new NodeCache({\n      stdTTL: 3600,\n      useClones: false\n    }))), new TokenProvider(chainId, this.multicall2Provider));\n    const chainName = ID_TO_NETWORK_NAME(chainId);\n    // ipfs urls in the following format: `https://cloudflare-ipfs.com/ipns/api.uniswap.org/v1/pools/${protocol}/${chainName}.json`;\n    if (v2SubgraphProvider) {\n      this.v2SubgraphProvider = v2SubgraphProvider;\n    } else {\n      this.v2SubgraphProvider = new V2SubgraphProviderWithFallBacks([new CachingV2SubgraphProvider(chainId, new URISubgraphProvider(chainId, `https://cloudflare-ipfs.com/ipns/api.uniswap.org/v1/pools/v2/${chainName}.json`, undefined, 0), new NodeJSCache(new NodeCache({\n        stdTTL: 300,\n        useClones: false\n      }))), new StaticV2SubgraphProvider(chainId)]);\n    }\n    if (v3SubgraphProvider) {\n      this.v3SubgraphProvider = v3SubgraphProvider;\n    } else {\n      this.v3SubgraphProvider = new V3SubgraphProviderWithFallBacks([new CachingV3SubgraphProvider(chainId, new URISubgraphProvider(chainId, `https://cloudflare-ipfs.com/ipns/api.uniswap.org/v1/pools/v3/${chainName}.json`, undefined, 0), new NodeJSCache(new NodeCache({\n        stdTTL: 300,\n        useClones: false\n      }))), new StaticV3SubgraphProvider(chainId, this.v3PoolProvider)]);\n    }\n    this.gasPriceProvider = gasPriceProvider !== null && gasPriceProvider !== void 0 ? gasPriceProvider : new CachingGasStationProvider(chainId, this.provider instanceof JsonRpcProvider ? new OnChainGasPriceProvider(chainId, new EIP1559GasPriceProvider(this.provider), new LegacyGasPriceProvider(this.provider)) : new ETHGasStationInfoProvider(ETH_GAS_STATION_API_URL), new NodeJSCache(new NodeCache({\n      stdTTL: 15,\n      useClones: false\n    })));\n    this.v3GasModelFactory = v3GasModelFactory !== null && v3GasModelFactory !== void 0 ? v3GasModelFactory : new V3HeuristicGasModelFactory();\n    this.v2GasModelFactory = v2GasModelFactory !== null && v2GasModelFactory !== void 0 ? v2GasModelFactory : new V2HeuristicGasModelFactory();\n    this.mixedRouteGasModelFactory = mixedRouteGasModelFactory !== null && mixedRouteGasModelFactory !== void 0 ? mixedRouteGasModelFactory : new MixedRouteHeuristicGasModelFactory();\n    this.swapRouterProvider = swapRouterProvider !== null && swapRouterProvider !== void 0 ? swapRouterProvider : new SwapRouterProvider(this.multicall2Provider);\n    if (chainId == ChainId.OPTIMISM || chainId == ChainId.OPTIMISTIC_KOVAN) {\n      this.l2GasDataProvider = optimismGasDataProvider !== null && optimismGasDataProvider !== void 0 ? optimismGasDataProvider : new OptimismGasDataProvider(chainId, this.multicall2Provider);\n    }\n    if (chainId == ChainId.ARBITRUM_ONE || chainId == ChainId.ARBITRUM_RINKEBY) {\n      this.l2GasDataProvider = arbitrumGasDataProvider !== null && arbitrumGasDataProvider !== void 0 ? arbitrumGasDataProvider : new ArbitrumGasDataProvider(chainId, this.provider);\n    }\n    if (tokenValidatorProvider) {\n      this.tokenValidatorProvider = tokenValidatorProvider;\n    } else if (this.chainId == ChainId.MAINNET) {\n      this.tokenValidatorProvider = new TokenValidatorProvider(this.chainId, this.multicall2Provider, new NodeJSCache(new NodeCache({\n        stdTTL: 30000,\n        useClones: false\n      })));\n    }\n  }\n  async routeToRatio(token0Balance, token1Balance, position, swapAndAddConfig, swapAndAddOptions) {\n    let routingConfig = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : DEFAULT_ROUTING_CONFIG_BY_CHAIN(this.chainId);\n    if (token1Balance.currency.wrapped.sortsBefore(token0Balance.currency.wrapped)) {\n      [token0Balance, token1Balance] = [token1Balance, token0Balance];\n    }\n    let preSwapOptimalRatio = this.calculateOptimalRatio(position, position.pool.sqrtRatioX96, true);\n    // set up parameters according to which token will be swapped\n    let zeroForOne;\n    if (position.pool.tickCurrent > position.tickUpper) {\n      zeroForOne = true;\n    } else if (position.pool.tickCurrent < position.tickLower) {\n      zeroForOne = false;\n    } else {\n      zeroForOne = new Fraction(token0Balance.quotient, token1Balance.quotient).greaterThan(preSwapOptimalRatio);\n      if (!zeroForOne) preSwapOptimalRatio = preSwapOptimalRatio.invert();\n    }\n    const [inputBalance, outputBalance] = zeroForOne ? [token0Balance, token1Balance] : [token1Balance, token0Balance];\n    let optimalRatio = preSwapOptimalRatio;\n    let postSwapTargetPool = position.pool;\n    let exchangeRate = zeroForOne ? position.pool.token0Price : position.pool.token1Price;\n    let swap = null;\n    let ratioAchieved = false;\n    let n = 0;\n    // iterate until we find a swap with a sufficient ratio or return null\n    while (!ratioAchieved) {\n      n++;\n      if (n > swapAndAddConfig.maxIterations) {\n        log.info('max iterations exceeded');\n        return {\n          status: SwapToRatioStatus.NO_ROUTE_FOUND,\n          error: 'max iterations exceeded'\n        };\n      }\n      const amountToSwap = calculateRatioAmountIn(optimalRatio, exchangeRate, inputBalance, outputBalance);\n      if (amountToSwap.equalTo(0)) {\n        log.info(`no swap needed: amountToSwap = 0`);\n        return {\n          status: SwapToRatioStatus.NO_SWAP_NEEDED\n        };\n      }\n      swap = await this.route(amountToSwap, outputBalance.currency, TradeType.EXACT_INPUT, undefined, {\n        ...DEFAULT_ROUTING_CONFIG_BY_CHAIN(this.chainId),\n        ...routingConfig,\n        /// @dev We do not want to query for mixedRoutes for routeToRatio as they are not supported\n        /// [Protocol.V3, Protocol.V2] will make sure we only query for V3 and V2\n        protocols: [Protocol.V3, Protocol.V2]\n      });\n      if (!swap) {\n        log.info('no route found from this.route()');\n        return {\n          status: SwapToRatioStatus.NO_ROUTE_FOUND,\n          error: 'no route found'\n        };\n      }\n      const inputBalanceUpdated = inputBalance.subtract(swap.trade.inputAmount);\n      const outputBalanceUpdated = outputBalance.add(swap.trade.outputAmount);\n      const newRatio = inputBalanceUpdated.divide(outputBalanceUpdated);\n      let targetPoolPriceUpdate;\n      swap.route.forEach(route => {\n        if (route.protocol == Protocol.V3) {\n          const v3Route = route;\n          v3Route.route.pools.forEach((pool, i) => {\n            if (pool.token0.equals(position.pool.token0) && pool.token1.equals(position.pool.token1) && pool.fee == position.pool.fee) {\n              targetPoolPriceUpdate = JSBI.BigInt(v3Route.sqrtPriceX96AfterList[i].toString());\n              optimalRatio = this.calculateOptimalRatio(position, JSBI.BigInt(targetPoolPriceUpdate.toString()), zeroForOne);\n            }\n          });\n        }\n      });\n      if (!targetPoolPriceUpdate) {\n        optimalRatio = preSwapOptimalRatio;\n      }\n      ratioAchieved = newRatio.equalTo(optimalRatio) || this.absoluteValue(newRatio.asFraction.divide(optimalRatio).subtract(1)).lessThan(swapAndAddConfig.ratioErrorTolerance);\n      if (ratioAchieved && targetPoolPriceUpdate) {\n        postSwapTargetPool = new Pool(position.pool.token0, position.pool.token1, position.pool.fee, targetPoolPriceUpdate, position.pool.liquidity, TickMath.getTickAtSqrtRatio(targetPoolPriceUpdate), position.pool.tickDataProvider);\n      }\n      exchangeRate = swap.trade.outputAmount.divide(swap.trade.inputAmount);\n      log.info({\n        exchangeRate: exchangeRate.asFraction.toFixed(18),\n        optimalRatio: optimalRatio.asFraction.toFixed(18),\n        newRatio: newRatio.asFraction.toFixed(18),\n        inputBalanceUpdated: inputBalanceUpdated.asFraction.toFixed(18),\n        outputBalanceUpdated: outputBalanceUpdated.asFraction.toFixed(18),\n        ratioErrorTolerance: swapAndAddConfig.ratioErrorTolerance.toFixed(18),\n        iterationN: n.toString()\n      }, 'QuoteToRatio Iteration Parameters');\n      if (exchangeRate.equalTo(0)) {\n        log.info('exchangeRate to 0');\n        return {\n          status: SwapToRatioStatus.NO_ROUTE_FOUND,\n          error: 'insufficient liquidity to swap to optimal ratio'\n        };\n      }\n    }\n    if (!swap) {\n      return {\n        status: SwapToRatioStatus.NO_ROUTE_FOUND,\n        error: 'no route found'\n      };\n    }\n    let methodParameters;\n    if (swapAndAddOptions) {\n      methodParameters = await this.buildSwapAndAddMethodParameters(swap.trade, swapAndAddOptions, {\n        initialBalanceTokenIn: inputBalance,\n        initialBalanceTokenOut: outputBalance,\n        preLiquidityPosition: position\n      });\n    }\n    return {\n      status: SwapToRatioStatus.SUCCESS,\n      result: {\n        ...swap,\n        methodParameters,\n        optimalRatio,\n        postSwapTargetPool\n      }\n    };\n  }\n  /**\n   * @inheritdoc IRouter\n   */\n  async route(amount, quoteCurrency, tradeType, swapConfig) {\n    let partialRoutingConfig = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n    var _a;\n    metric.putMetric(`QuoteRequestedForChain${this.chainId}`, 1, MetricLoggerUnit.Count);\n    // Get a block number to specify in all our calls. Ensures data we fetch from chain is\n    // from the same block.\n    const blockNumber = (_a = partialRoutingConfig.blockNumber) !== null && _a !== void 0 ? _a : this.getBlockNumberPromise();\n    const routingConfig = _.merge({}, DEFAULT_ROUTING_CONFIG_BY_CHAIN(this.chainId), partialRoutingConfig, {\n      blockNumber\n    });\n    const {\n      protocols\n    } = routingConfig;\n    const currencyIn = tradeType == TradeType.EXACT_INPUT ? amount.currency : quoteCurrency;\n    const currencyOut = tradeType == TradeType.EXACT_INPUT ? quoteCurrency : amount.currency;\n    const tokenIn = currencyIn.wrapped;\n    const tokenOut = currencyOut.wrapped;\n    // Generate our distribution of amounts, i.e. fractions of the input amount.\n    // We will get quotes for fractions of the input amount for different routes, then\n    // combine to generate split routes.\n    const [percents, amounts] = this.getAmountDistribution(amount, routingConfig);\n    // Get an estimate of the gas price to use when estimating gas cost of different routes.\n    const beforeGas = Date.now();\n    const {\n      gasPriceWei\n    } = await this.gasPriceProvider.getGasPrice();\n    metric.putMetric('GasPriceLoad', Date.now() - beforeGas, MetricLoggerUnit.Milliseconds);\n    const quoteToken = quoteCurrency.wrapped;\n    const quotePromises = [];\n    const protocolsSet = new Set(protocols !== null && protocols !== void 0 ? protocols : []);\n    const [v3gasModel, mixedRouteGasModel] = await Promise.all([this.v3GasModelFactory.buildGasModel({\n      chainId: this.chainId,\n      gasPriceWei,\n      v3poolProvider: this.v3PoolProvider,\n      token: quoteToken,\n      v2poolProvider: this.v2PoolProvider,\n      l2GasDataProvider: this.l2GasDataProvider\n    }), this.mixedRouteGasModelFactory.buildGasModel({\n      chainId: this.chainId,\n      gasPriceWei,\n      v3poolProvider: this.v3PoolProvider,\n      token: quoteToken,\n      v2poolProvider: this.v2PoolProvider\n    })]);\n    if ((protocolsSet.size == 0 || protocolsSet.has(Protocol.V2) && protocolsSet.has(Protocol.V3)) && V2_SUPPORTED.includes(this.chainId)) {\n      log.info({\n        protocols,\n        tradeType\n      }, 'Routing across all protocols');\n      quotePromises.push(this.getV3Quotes(tokenIn, tokenOut, amounts, percents, quoteToken, v3gasModel, tradeType, routingConfig));\n      quotePromises.push(this.getV2Quotes(tokenIn, tokenOut, amounts, percents, quoteToken, gasPriceWei, tradeType, routingConfig));\n      /// @dev only add mixedRoutes in the case where no protocols were specified, and if TradeType is correct\n      if (tradeType === TradeType.EXACT_INPUT && (this.chainId === ChainId.MAINNET || this.chainId === ChainId.GÖRLI) && (\n      /// The cases where protocols = [] and protocols = [V2, V3, MIXED]\n      protocolsSet.size == 0 || protocolsSet.has(Protocol.MIXED))) {\n        log.info({\n          protocols,\n          swapType: tradeType\n        }, 'Routing across MixedRoutes');\n        quotePromises.push(this.getMixedRouteQuotes(tokenIn, tokenOut, amounts, percents, quoteToken, mixedRouteGasModel, tradeType, routingConfig));\n      }\n    } else {\n      if (protocolsSet.has(Protocol.V3) || protocolsSet.size == 0 && !V2_SUPPORTED.includes(this.chainId)) {\n        log.info({\n          protocols,\n          swapType: tradeType\n        }, 'Routing across V3');\n        quotePromises.push(this.getV3Quotes(tokenIn, tokenOut, amounts, percents, quoteToken, v3gasModel, tradeType, routingConfig));\n      }\n      if (protocolsSet.has(Protocol.V2)) {\n        log.info({\n          protocols,\n          swapType: tradeType\n        }, 'Routing across V2');\n        quotePromises.push(this.getV2Quotes(tokenIn, tokenOut, amounts, percents, quoteToken, gasPriceWei, tradeType, routingConfig));\n      }\n      /// If protocolsSet is not empty, and we specify mixedRoutes, consider them if the chain has v2 liq\n      /// and tradeType === EXACT_INPUT\n      if (protocolsSet.has(Protocol.MIXED) && (this.chainId === ChainId.MAINNET || this.chainId === ChainId.GÖRLI) && tradeType == TradeType.EXACT_INPUT) {\n        log.info({\n          protocols,\n          swapType: tradeType\n        }, 'Routing across MixedRoutes');\n        quotePromises.push(this.getMixedRouteQuotes(tokenIn, tokenOut, amounts, percents, quoteToken, mixedRouteGasModel, tradeType, routingConfig));\n      }\n    }\n    const routesWithValidQuotesByProtocol = await Promise.all(quotePromises);\n    let allRoutesWithValidQuotes = [];\n    let allCandidatePools = [];\n    for (const {\n      routesWithValidQuotes,\n      candidatePools\n    } of routesWithValidQuotesByProtocol) {\n      allRoutesWithValidQuotes = [...allRoutesWithValidQuotes, ...routesWithValidQuotes];\n      allCandidatePools = [...allCandidatePools, candidatePools];\n    }\n    if (allRoutesWithValidQuotes.length == 0) {\n      log.info({\n        allRoutesWithValidQuotes\n      }, 'Received no valid quotes');\n      return null;\n    }\n    // Given all the quotes for all the amounts for all the routes, find the best combination.\n    const beforeBestSwap = Date.now();\n    const swapRouteRaw = await getBestSwapRoute(amount, percents, allRoutesWithValidQuotes, tradeType, this.chainId, routingConfig, v3gasModel);\n    if (!swapRouteRaw) {\n      return null;\n    }\n    const {\n      quote,\n      quoteGasAdjusted,\n      estimatedGasUsed,\n      routes: routeAmounts,\n      estimatedGasUsedQuoteToken,\n      estimatedGasUsedUSD\n    } = swapRouteRaw;\n    // Build Trade object that represents the optimal swap.\n    const trade = buildTrade(currencyIn, currencyOut, tradeType, routeAmounts);\n    let methodParameters;\n    // If user provided recipient, deadline etc. we also generate the calldata required to execute\n    // the swap and return it too.\n    if (swapConfig) {\n      methodParameters = buildSwapMethodParameters(trade, swapConfig);\n    }\n    metric.putMetric('FindBestSwapRoute', Date.now() - beforeBestSwap, MetricLoggerUnit.Milliseconds);\n    metric.putMetric(`QuoteFoundForChain${this.chainId}`, 1, MetricLoggerUnit.Count);\n    this.emitPoolSelectionMetrics(swapRouteRaw, allCandidatePools);\n    const swapRoute = {\n      quote,\n      quoteGasAdjusted,\n      estimatedGasUsed,\n      estimatedGasUsedQuoteToken,\n      estimatedGasUsedUSD,\n      gasPriceWei,\n      route: routeAmounts,\n      trade,\n      methodParameters,\n      blockNumber: BigNumber.from(await blockNumber)\n    };\n    if (swapConfig && swapConfig.simulate && methodParameters && methodParameters.calldata) {\n      if (!this.simulator) {\n        throw new Error('Simulator not initialized!');\n      }\n      const beforeSimulate = Date.now();\n      const swapRouteWithSimulation = await this.simulator.simulateTransaction(swapConfig.simulate.fromAddress, swapRoute, this.l2GasDataProvider ? await this.l2GasDataProvider.getGasData() : undefined);\n      metric.putMetric('SimulateTransaction', Date.now() - beforeSimulate, MetricLoggerUnit.Milliseconds);\n      return swapRouteWithSimulation;\n    }\n    return swapRoute;\n  }\n  async applyTokenValidatorToPools(pools, isInvalidFn) {\n    if (!this.tokenValidatorProvider) {\n      return pools;\n    }\n    log.info(`Running token validator on ${pools.length} pools`);\n    const tokens = _.flatMap(pools, pool => [pool.token0, pool.token1]);\n    const tokenValidationResults = await this.tokenValidatorProvider.validateTokens(tokens);\n    const poolsFiltered = _.filter(pools, pool => {\n      const token0Validation = tokenValidationResults.getValidationByToken(pool.token0);\n      const token1Validation = tokenValidationResults.getValidationByToken(pool.token1);\n      const token0Invalid = isInvalidFn(pool.token0, token0Validation);\n      const token1Invalid = isInvalidFn(pool.token1, token1Validation);\n      if (token0Invalid || token1Invalid) {\n        log.info(`Dropping pool ${poolToString(pool)} because token is invalid. ${pool.token0.symbol}: ${token0Validation}, ${pool.token1.symbol}: ${token1Validation}`);\n      }\n      return !token0Invalid && !token1Invalid;\n    });\n    return poolsFiltered;\n  }\n  async getV3Quotes(tokenIn, tokenOut, amounts, percents, quoteToken, gasModel, swapType, routingConfig) {\n    log.info('Starting to get V3 quotes');\n    // Fetch all the pools that we will consider routing via. There are thousands\n    // of pools, so we filter them to a set of candidate pools that we expect will\n    // result in good prices.\n    const {\n      poolAccessor,\n      candidatePools\n    } = await getV3CandidatePools({\n      tokenIn,\n      tokenOut,\n      tokenProvider: this.tokenProvider,\n      blockedTokenListProvider: this.blockedTokenListProvider,\n      poolProvider: this.v3PoolProvider,\n      routeType: swapType,\n      subgraphProvider: this.v3SubgraphProvider,\n      routingConfig,\n      chainId: this.chainId\n    });\n    const poolsRaw = poolAccessor.getAllPools();\n    // Drop any pools that contain fee on transfer tokens (not supported by v3) or have issues with being transferred.\n    const pools = await this.applyTokenValidatorToPools(poolsRaw, (token, tokenValidation) => {\n      // If there is no available validation result we assume the token is fine.\n      if (!tokenValidation) {\n        return false;\n      }\n      // Only filters out *intermediate* pools that involve tokens that we detect\n      // cant be transferred. This prevents us trying to route through tokens that may\n      // not be transferrable, but allows users to still swap those tokens if they\n      // specify.\n      //\n      if (tokenValidation == TokenValidationResult.STF && (token.equals(tokenIn) || token.equals(tokenOut))) {\n        return false;\n      }\n      return tokenValidation == TokenValidationResult.FOT || tokenValidation == TokenValidationResult.STF;\n    });\n    // Given all our candidate pools, compute all the possible ways to route from tokenIn to tokenOut.\n    const {\n      maxSwapsPerPath\n    } = routingConfig;\n    const routes = computeAllV3Routes(tokenIn, tokenOut, pools, maxSwapsPerPath);\n    if (routes.length == 0) {\n      return {\n        routesWithValidQuotes: [],\n        candidatePools\n      };\n    }\n    // For all our routes, and all the fractional amounts, fetch quotes on-chain.\n    const quoteFn = swapType == TradeType.EXACT_INPUT ? this.onChainQuoteProvider.getQuotesManyExactIn.bind(this.onChainQuoteProvider) : this.onChainQuoteProvider.getQuotesManyExactOut.bind(this.onChainQuoteProvider);\n    const beforeQuotes = Date.now();\n    log.info(`Getting quotes for V3 for ${routes.length} routes with ${amounts.length} amounts per route.`);\n    const {\n      routesWithQuotes\n    } = await quoteFn(amounts, routes, {\n      blockNumber: routingConfig.blockNumber\n    });\n    metric.putMetric('V3QuotesLoad', Date.now() - beforeQuotes, MetricLoggerUnit.Milliseconds);\n    metric.putMetric('V3QuotesFetched', _(routesWithQuotes).map(_ref2 => {\n      let [, quotes] = _ref2;\n      return quotes.length;\n    }).sum(), MetricLoggerUnit.Count);\n    const routesWithValidQuotes = [];\n    for (const routeWithQuote of routesWithQuotes) {\n      const [route, quotes] = routeWithQuote;\n      for (let i = 0; i < quotes.length; i++) {\n        const percent = percents[i];\n        const amountQuote = quotes[i];\n        const {\n          quote,\n          amount,\n          sqrtPriceX96AfterList,\n          initializedTicksCrossedList,\n          gasEstimate\n        } = amountQuote;\n        if (!quote || !sqrtPriceX96AfterList || !initializedTicksCrossedList || !gasEstimate) {\n          log.debug({\n            route: routeToString(route),\n            amountQuote\n          }, 'Dropping a null V3 quote for route.');\n          continue;\n        }\n        const routeWithValidQuote = new V3RouteWithValidQuote({\n          route,\n          rawQuote: quote,\n          amount,\n          percent,\n          sqrtPriceX96AfterList,\n          initializedTicksCrossedList,\n          quoterGasEstimate: gasEstimate,\n          gasModel,\n          quoteToken,\n          tradeType: swapType,\n          v3PoolProvider: this.v3PoolProvider\n        });\n        routesWithValidQuotes.push(routeWithValidQuote);\n      }\n    }\n    return {\n      routesWithValidQuotes,\n      candidatePools\n    };\n  }\n  async getV2Quotes(tokenIn, tokenOut, amounts, percents, quoteToken, gasPriceWei, swapType, routingConfig) {\n    log.info('Starting to get V2 quotes');\n    // Fetch all the pools that we will consider routing via. There are thousands\n    // of pools, so we filter them to a set of candidate pools that we expect will\n    // result in good prices.\n    const {\n      poolAccessor,\n      candidatePools\n    } = await getV2CandidatePools({\n      tokenIn,\n      tokenOut,\n      tokenProvider: this.tokenProvider,\n      blockedTokenListProvider: this.blockedTokenListProvider,\n      poolProvider: this.v2PoolProvider,\n      routeType: swapType,\n      subgraphProvider: this.v2SubgraphProvider,\n      routingConfig,\n      chainId: this.chainId\n    });\n    const poolsRaw = poolAccessor.getAllPools();\n    // Drop any pools that contain tokens that can not be transferred according to the token validator.\n    const pools = await this.applyTokenValidatorToPools(poolsRaw, (token, tokenValidation) => {\n      // If there is no available validation result we assume the token is fine.\n      if (!tokenValidation) {\n        return false;\n      }\n      // Only filters out *intermediate* pools that involve tokens that we detect\n      // cant be transferred. This prevents us trying to route through tokens that may\n      // not be transferrable, but allows users to still swap those tokens if they\n      // specify.\n      if (tokenValidation == TokenValidationResult.STF && (token.equals(tokenIn) || token.equals(tokenOut))) {\n        return false;\n      }\n      return tokenValidation == TokenValidationResult.STF;\n    });\n    // Given all our candidate pools, compute all the possible ways to route from tokenIn to tokenOut.\n    const {\n      maxSwapsPerPath\n    } = routingConfig;\n    const routes = computeAllV2Routes(tokenIn, tokenOut, pools, maxSwapsPerPath);\n    if (routes.length == 0) {\n      return {\n        routesWithValidQuotes: [],\n        candidatePools\n      };\n    }\n    // For all our routes, and all the fractional amounts, fetch quotes on-chain.\n    const quoteFn = swapType == TradeType.EXACT_INPUT ? this.v2QuoteProvider.getQuotesManyExactIn.bind(this.v2QuoteProvider) : this.v2QuoteProvider.getQuotesManyExactOut.bind(this.v2QuoteProvider);\n    const beforeQuotes = Date.now();\n    log.info(`Getting quotes for V2 for ${routes.length} routes with ${amounts.length} amounts per route.`);\n    const {\n      routesWithQuotes\n    } = await quoteFn(amounts, routes);\n    const V2gasModel = await this.v2GasModelFactory.buildGasModel({\n      chainId: this.chainId,\n      gasPriceWei,\n      poolProvider: this.v2PoolProvider,\n      token: quoteToken\n    });\n    metric.putMetric('V2QuotesLoad', Date.now() - beforeQuotes, MetricLoggerUnit.Milliseconds);\n    metric.putMetric('V2QuotesFetched', _(routesWithQuotes).map(_ref3 => {\n      let [, quotes] = _ref3;\n      return quotes.length;\n    }).sum(), MetricLoggerUnit.Count);\n    const routesWithValidQuotes = [];\n    for (const routeWithQuote of routesWithQuotes) {\n      const [route, quotes] = routeWithQuote;\n      for (let i = 0; i < quotes.length; i++) {\n        const percent = percents[i];\n        const amountQuote = quotes[i];\n        const {\n          quote,\n          amount\n        } = amountQuote;\n        if (!quote) {\n          log.debug({\n            route: routeToString(route),\n            amountQuote\n          }, 'Dropping a null V2 quote for route.');\n          continue;\n        }\n        const routeWithValidQuote = new V2RouteWithValidQuote({\n          route,\n          rawQuote: quote,\n          amount,\n          percent,\n          gasModel: V2gasModel,\n          quoteToken,\n          tradeType: swapType,\n          v2PoolProvider: this.v2PoolProvider\n        });\n        routesWithValidQuotes.push(routeWithValidQuote);\n      }\n    }\n    return {\n      routesWithValidQuotes,\n      candidatePools\n    };\n  }\n  async getMixedRouteQuotes(tokenIn, tokenOut, amounts, percents, quoteToken, mixedRouteGasModel, swapType, routingConfig) {\n    log.info('Starting to get mixed quotes');\n    if (swapType != TradeType.EXACT_INPUT) {\n      throw new Error('Mixed route quotes are not supported for EXACT_OUTPUT');\n    }\n    const {\n      V2poolAccessor,\n      V3poolAccessor,\n      candidatePools: mixedRouteCandidatePools\n    } = await getMixedRouteCandidatePools({\n      tokenIn,\n      tokenOut,\n      tokenProvider: this.tokenProvider,\n      blockedTokenListProvider: this.blockedTokenListProvider,\n      v3poolProvider: this.v3PoolProvider,\n      v2poolProvider: this.v2PoolProvider,\n      routeType: swapType,\n      v3subgraphProvider: this.v3SubgraphProvider,\n      v2subgraphProvider: this.v2SubgraphProvider,\n      routingConfig,\n      chainId: this.chainId\n    });\n    const V3poolsRaw = V3poolAccessor.getAllPools();\n    const V2poolsRaw = V2poolAccessor.getAllPools();\n    const poolsRaw = [...V3poolsRaw, ...V2poolsRaw];\n    const candidatePools = mixedRouteCandidatePools;\n    // Drop any pools that contain fee on transfer tokens (not supported by v3) or have issues with being transferred.\n    const pools = await this.applyTokenValidatorToPools(poolsRaw, (token, tokenValidation) => {\n      // If there is no available validation result we assume the token is fine.\n      if (!tokenValidation) {\n        return false;\n      }\n      // Only filters out *intermediate* pools that involve tokens that we detect\n      // cant be transferred. This prevents us trying to route through tokens that may\n      // not be transferrable, but allows users to still swap those tokens if they\n      // specify.\n      //\n      if (tokenValidation == TokenValidationResult.STF && (token.equals(tokenIn) || token.equals(tokenOut))) {\n        return false;\n      }\n      return tokenValidation == TokenValidationResult.FOT || tokenValidation == TokenValidationResult.STF;\n    });\n    const {\n      maxSwapsPerPath\n    } = routingConfig;\n    const routes = computeAllMixedRoutes(tokenIn, tokenOut, pools, maxSwapsPerPath);\n    if (routes.length == 0) {\n      return {\n        routesWithValidQuotes: [],\n        candidatePools\n      };\n    }\n    // For all our routes, and all the fractional amounts, fetch quotes on-chain.\n    const quoteFn = this.onChainQuoteProvider.getQuotesManyExactIn.bind(this.onChainQuoteProvider);\n    const beforeQuotes = Date.now();\n    log.info(`Getting quotes for mixed for ${routes.length} routes with ${amounts.length} amounts per route.`);\n    const {\n      routesWithQuotes\n    } = await quoteFn(amounts, routes, {\n      blockNumber: routingConfig.blockNumber\n    });\n    metric.putMetric('MixedQuotesLoad', Date.now() - beforeQuotes, MetricLoggerUnit.Milliseconds);\n    metric.putMetric('MixedQuotesFetched', _(routesWithQuotes).map(_ref4 => {\n      let [, quotes] = _ref4;\n      return quotes.length;\n    }).sum(), MetricLoggerUnit.Count);\n    const routesWithValidQuotes = [];\n    for (const routeWithQuote of routesWithQuotes) {\n      const [route, quotes] = routeWithQuote;\n      for (let i = 0; i < quotes.length; i++) {\n        const percent = percents[i];\n        const amountQuote = quotes[i];\n        const {\n          quote,\n          amount,\n          sqrtPriceX96AfterList,\n          initializedTicksCrossedList,\n          gasEstimate\n        } = amountQuote;\n        if (!quote || !sqrtPriceX96AfterList || !initializedTicksCrossedList || !gasEstimate) {\n          log.debug({\n            route: routeToString(route),\n            amountQuote\n          }, 'Dropping a null mixed quote for route.');\n          continue;\n        }\n        const routeWithValidQuote = new MixedRouteWithValidQuote({\n          route,\n          rawQuote: quote,\n          amount,\n          percent,\n          sqrtPriceX96AfterList,\n          initializedTicksCrossedList,\n          quoterGasEstimate: gasEstimate,\n          mixedRouteGasModel,\n          quoteToken,\n          tradeType: swapType,\n          v3PoolProvider: this.v3PoolProvider,\n          v2PoolProvider: this.v2PoolProvider\n        });\n        routesWithValidQuotes.push(routeWithValidQuote);\n      }\n    }\n    return {\n      routesWithValidQuotes,\n      candidatePools\n    };\n  }\n  // Note multiplications here can result in a loss of precision in the amounts (e.g. taking 50% of 101)\n  // This is reconcilled at the end of the algorithm by adding any lost precision to one of\n  // the splits in the route.\n  getAmountDistribution(amount, routingConfig) {\n    const {\n      distributionPercent\n    } = routingConfig;\n    const percents = [];\n    const amounts = [];\n    for (let i = 1; i <= 100 / distributionPercent; i++) {\n      percents.push(i * distributionPercent);\n      amounts.push(amount.multiply(new Fraction(i * distributionPercent, 100)));\n    }\n    return [percents, amounts];\n  }\n  async buildSwapAndAddMethodParameters(trade, swapAndAddOptions, swapAndAddParameters) {\n    const {\n      swapOptions: {\n        recipient,\n        slippageTolerance,\n        deadline,\n        inputTokenPermit\n      },\n      addLiquidityOptions: addLiquidityConfig\n    } = swapAndAddOptions;\n    const preLiquidityPosition = swapAndAddParameters.preLiquidityPosition;\n    const finalBalanceTokenIn = swapAndAddParameters.initialBalanceTokenIn.subtract(trade.inputAmount);\n    const finalBalanceTokenOut = swapAndAddParameters.initialBalanceTokenOut.add(trade.outputAmount);\n    const approvalTypes = await this.swapRouterProvider.getApprovalType(finalBalanceTokenIn, finalBalanceTokenOut);\n    const zeroForOne = finalBalanceTokenIn.currency.wrapped.sortsBefore(finalBalanceTokenOut.currency.wrapped);\n    return SwapRouter.swapAndAddCallParameters(trade, {\n      recipient,\n      slippageTolerance,\n      deadlineOrPreviousBlockhash: deadline,\n      inputTokenPermit\n    }, Position.fromAmounts({\n      pool: preLiquidityPosition.pool,\n      tickLower: preLiquidityPosition.tickLower,\n      tickUpper: preLiquidityPosition.tickUpper,\n      amount0: zeroForOne ? finalBalanceTokenIn.quotient.toString() : finalBalanceTokenOut.quotient.toString(),\n      amount1: zeroForOne ? finalBalanceTokenOut.quotient.toString() : finalBalanceTokenIn.quotient.toString(),\n      useFullPrecision: false\n    }), addLiquidityConfig, approvalTypes.approvalTokenIn, approvalTypes.approvalTokenOut);\n  }\n  emitPoolSelectionMetrics(swapRouteRaw, allPoolsBySelection) {\n    const poolAddressesUsed = new Set();\n    const {\n      routes: routeAmounts\n    } = swapRouteRaw;\n    _(routeAmounts).flatMap(routeAmount => {\n      const {\n        poolAddresses\n      } = routeAmount;\n      return poolAddresses;\n    }).forEach(address => {\n      poolAddressesUsed.add(address.toLowerCase());\n    });\n    for (const poolsBySelection of allPoolsBySelection) {\n      const {\n        protocol\n      } = poolsBySelection;\n      _.forIn(poolsBySelection.selections, (pools, topNSelection) => {\n        const topNUsed = _.findLastIndex(pools, pool => poolAddressesUsed.has(pool.id.toLowerCase())) + 1;\n        metric.putMetric(_.capitalize(`${protocol}${topNSelection}`), topNUsed, MetricLoggerUnit.Count);\n      });\n    }\n    let hasV3Route = false;\n    let hasV2Route = false;\n    let hasMixedRoute = false;\n    for (const routeAmount of routeAmounts) {\n      if (routeAmount.protocol == Protocol.V3) {\n        hasV3Route = true;\n      }\n      if (routeAmount.protocol == Protocol.V2) {\n        hasV2Route = true;\n      }\n      if (routeAmount.protocol == Protocol.MIXED) {\n        hasMixedRoute = true;\n      }\n    }\n    if (hasMixedRoute && (hasV3Route || hasV2Route)) {\n      if (hasV3Route && hasV2Route) {\n        metric.putMetric(`MixedAndV3AndV2SplitRoute`, 1, MetricLoggerUnit.Count);\n        metric.putMetric(`MixedAndV3AndV2SplitRouteForChain${this.chainId}`, 1, MetricLoggerUnit.Count);\n      } else if (hasV3Route) {\n        metric.putMetric(`MixedAndV3SplitRoute`, 1, MetricLoggerUnit.Count);\n        metric.putMetric(`MixedAndV3SplitRouteForChain${this.chainId}`, 1, MetricLoggerUnit.Count);\n      } else if (hasV2Route) {\n        metric.putMetric(`MixedAndV2SplitRoute`, 1, MetricLoggerUnit.Count);\n        metric.putMetric(`MixedAndV2SplitRouteForChain${this.chainId}`, 1, MetricLoggerUnit.Count);\n      }\n    } else if (hasV3Route && hasV2Route) {\n      metric.putMetric(`V3AndV2SplitRoute`, 1, MetricLoggerUnit.Count);\n      metric.putMetric(`V3AndV2SplitRouteForChain${this.chainId}`, 1, MetricLoggerUnit.Count);\n    } else if (hasMixedRoute) {\n      if (routeAmounts.length > 1) {\n        metric.putMetric(`MixedSplitRoute`, 1, MetricLoggerUnit.Count);\n        metric.putMetric(`MixedSplitRouteForChain${this.chainId}`, 1, MetricLoggerUnit.Count);\n      } else {\n        metric.putMetric(`MixedRoute`, 1, MetricLoggerUnit.Count);\n        metric.putMetric(`MixedRouteForChain${this.chainId}`, 1, MetricLoggerUnit.Count);\n      }\n    } else if (hasV3Route) {\n      if (routeAmounts.length > 1) {\n        metric.putMetric(`V3SplitRoute`, 1, MetricLoggerUnit.Count);\n        metric.putMetric(`V3SplitRouteForChain${this.chainId}`, 1, MetricLoggerUnit.Count);\n      } else {\n        metric.putMetric(`V3Route`, 1, MetricLoggerUnit.Count);\n        metric.putMetric(`V3RouteForChain${this.chainId}`, 1, MetricLoggerUnit.Count);\n      }\n    } else if (hasV2Route) {\n      if (routeAmounts.length > 1) {\n        metric.putMetric(`V2SplitRoute`, 1, MetricLoggerUnit.Count);\n        metric.putMetric(`V2SplitRouteForChain${this.chainId}`, 1, MetricLoggerUnit.Count);\n      } else {\n        metric.putMetric(`V2Route`, 1, MetricLoggerUnit.Count);\n        metric.putMetric(`V2RouteForChain${this.chainId}`, 1, MetricLoggerUnit.Count);\n      }\n    }\n  }\n  calculateOptimalRatio(position, sqrtRatioX96, zeroForOne) {\n    const upperSqrtRatioX96 = TickMath.getSqrtRatioAtTick(position.tickUpper);\n    const lowerSqrtRatioX96 = TickMath.getSqrtRatioAtTick(position.tickLower);\n    // returns Fraction(0, 1) for any out of range position regardless of zeroForOne. Implication: function\n    // cannot be used to determine the trading direction of out of range positions.\n    if (JSBI.greaterThan(sqrtRatioX96, upperSqrtRatioX96) || JSBI.lessThan(sqrtRatioX96, lowerSqrtRatioX96)) {\n      return new Fraction(0, 1);\n    }\n    const precision = JSBI.BigInt('1' + '0'.repeat(18));\n    let optimalRatio = new Fraction(SqrtPriceMath.getAmount0Delta(sqrtRatioX96, upperSqrtRatioX96, precision, true), SqrtPriceMath.getAmount1Delta(sqrtRatioX96, lowerSqrtRatioX96, precision, true));\n    if (!zeroForOne) optimalRatio = optimalRatio.invert();\n    return optimalRatio;\n  }\n  absoluteValue(fraction) {\n    const numeratorAbs = JSBI.lessThan(fraction.numerator, JSBI.BigInt(0)) ? JSBI.unaryMinus(fraction.numerator) : fraction.numerator;\n    const denominatorAbs = JSBI.lessThan(fraction.denominator, JSBI.BigInt(0)) ? JSBI.unaryMinus(fraction.denominator) : fraction.denominator;\n    return new Fraction(numeratorAbs, denominatorAbs);\n  }\n  getBlockNumberPromise() {\n    return retry(async (_b, attempt) => {\n      if (attempt > 1) {\n        log.info(`Get block number attempt ${attempt}`);\n      }\n      return this.provider.getBlockNumber();\n    }, {\n      retries: 2,\n      minTimeout: 100,\n      maxTimeout: 1000\n    });\n  }\n}","map":{"version":3,"sources":["../../../../src/routers/alpha-router/alpha-router.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { BigNumber } from '@ethersproject/bignumber';\nimport { JsonRpcProvider } from '@ethersproject/providers';\nimport DEFAULT_TOKEN_LIST from '@uniswap/default-token-list';\nimport { Protocol, SwapRouter } from '@uniswap/router-sdk';\nimport { Fraction, TradeType } from '@uniswap/sdk-core';\nimport { Pool, Position, SqrtPriceMath, TickMath, } from '@uniswap/v3-sdk';\nimport retry from 'async-retry';\nimport JSBI from 'jsbi';\nimport _ from 'lodash';\nimport NodeCache from 'node-cache';\nimport { CachingGasStationProvider, CachingTokenProviderWithFallback, CachingV2PoolProvider, CachingV2SubgraphProvider, CachingV3PoolProvider, CachingV3SubgraphProvider, EIP1559GasPriceProvider, ETHGasStationInfoProvider, LegacyGasPriceProvider, NodeJSCache, OnChainGasPriceProvider, OnChainQuoteProvider, StaticV2SubgraphProvider, StaticV3SubgraphProvider, SwapRouterProvider, UniswapMulticallProvider, URISubgraphProvider, V2QuoteProvider, V2SubgraphProviderWithFallBacks, V3SubgraphProviderWithFallBacks, } from '../../providers';\nimport { CachingTokenListProvider, } from '../../providers/caching-token-list-provider';\nimport { TokenProvider } from '../../providers/token-provider';\nimport { TokenValidationResult, TokenValidatorProvider, } from '../../providers/token-validator-provider';\nimport { V2PoolProvider, } from '../../providers/v2/pool-provider';\nimport { ArbitrumGasDataProvider, OptimismGasDataProvider, } from '../../providers/v3/gas-data-provider';\nimport { V3PoolProvider, } from '../../providers/v3/pool-provider';\nimport { ChainId, ID_TO_CHAIN_ID, ID_TO_NETWORK_NAME, V2_SUPPORTED, } from '../../util/chains';\nimport { log } from '../../util/log';\nimport { buildSwapMethodParameters, buildTrade, } from '../../util/methodParameters';\nimport { metric, MetricLoggerUnit } from '../../util/metric';\nimport { poolToString, routeToString } from '../../util/routes';\nimport { UNSUPPORTED_TOKENS } from '../../util/unsupported-tokens';\nimport { SwapToRatioStatus, } from '../router';\nimport { DEFAULT_ROUTING_CONFIG_BY_CHAIN, ETH_GAS_STATION_API_URL, } from './config';\nimport { MixedRouteWithValidQuote, V2RouteWithValidQuote, V3RouteWithValidQuote, } from './entities/route-with-valid-quote';\nimport { getBestSwapRoute } from './functions/best-swap-route';\nimport { calculateRatioAmountIn } from './functions/calculate-ratio-amount-in';\nimport { computeAllMixedRoutes, computeAllV2Routes, computeAllV3Routes, } from './functions/compute-all-routes';\nimport { getMixedRouteCandidatePools, getV2CandidatePools, getV3CandidatePools, } from './functions/get-candidate-pools';\nimport { MixedRouteHeuristicGasModelFactory } from './gas-models/mixedRoute/mixed-route-heuristic-gas-model';\nimport { V2HeuristicGasModelFactory } from './gas-models/v2/v2-heuristic-gas-model';\nimport { V3HeuristicGasModelFactory } from '.';\nexport class AlphaRouter {\n    constructor({ chainId, provider, multicall2Provider, v3PoolProvider, onChainQuoteProvider, v2PoolProvider, v2QuoteProvider, v2SubgraphProvider, tokenProvider, blockedTokenListProvider, v3SubgraphProvider, gasPriceProvider, v3GasModelFactory, v2GasModelFactory, mixedRouteGasModelFactory, swapRouterProvider, optimismGasDataProvider, tokenValidatorProvider, arbitrumGasDataProvider, simulator, }) {\n        this.chainId = chainId;\n        this.provider = provider;\n        this.multicall2Provider =\n            multicall2Provider !== null && multicall2Provider !== void 0 ? multicall2Provider : new UniswapMulticallProvider(chainId, provider, 375000);\n        this.v3PoolProvider =\n            v3PoolProvider !== null && v3PoolProvider !== void 0 ? v3PoolProvider : new CachingV3PoolProvider(this.chainId, new V3PoolProvider(ID_TO_CHAIN_ID(chainId), this.multicall2Provider), new NodeJSCache(new NodeCache({ stdTTL: 360, useClones: false })));\n        this.simulator = simulator;\n        if (onChainQuoteProvider) {\n            this.onChainQuoteProvider = onChainQuoteProvider;\n        }\n        else {\n            switch (chainId) {\n                case ChainId.OPTIMISM:\n                case ChainId.OPTIMISTIC_KOVAN:\n                    this.onChainQuoteProvider = new OnChainQuoteProvider(chainId, provider, this.multicall2Provider, {\n                        retries: 2,\n                        minTimeout: 100,\n                        maxTimeout: 1000,\n                    }, {\n                        multicallChunk: 110,\n                        gasLimitPerCall: 1200000,\n                        quoteMinSuccessRate: 0.1,\n                    }, {\n                        gasLimitOverride: 3000000,\n                        multicallChunk: 45,\n                    }, {\n                        gasLimitOverride: 3000000,\n                        multicallChunk: 45,\n                    }, {\n                        baseBlockOffset: -10,\n                        rollback: {\n                            enabled: true,\n                            attemptsBeforeRollback: 1,\n                            rollbackBlockOffset: -10,\n                        },\n                    });\n                    break;\n                case ChainId.ARBITRUM_ONE:\n                case ChainId.ARBITRUM_RINKEBY:\n                    this.onChainQuoteProvider = new OnChainQuoteProvider(chainId, provider, this.multicall2Provider, {\n                        retries: 2,\n                        minTimeout: 100,\n                        maxTimeout: 1000,\n                    }, {\n                        multicallChunk: 10,\n                        gasLimitPerCall: 12000000,\n                        quoteMinSuccessRate: 0.1,\n                    }, {\n                        gasLimitOverride: 30000000,\n                        multicallChunk: 6,\n                    }, {\n                        gasLimitOverride: 30000000,\n                        multicallChunk: 6,\n                    });\n                    break;\n                case ChainId.CELO:\n                case ChainId.CELO_ALFAJORES:\n                    this.onChainQuoteProvider = new OnChainQuoteProvider(chainId, provider, this.multicall2Provider, {\n                        retries: 2,\n                        minTimeout: 100,\n                        maxTimeout: 1000,\n                    }, {\n                        multicallChunk: 10,\n                        gasLimitPerCall: 5000000,\n                        quoteMinSuccessRate: 0.1,\n                    }, {\n                        gasLimitOverride: 5000000,\n                        multicallChunk: 5,\n                    }, {\n                        gasLimitOverride: 6250000,\n                        multicallChunk: 4,\n                    });\n                    break;\n                default:\n                    this.onChainQuoteProvider = new OnChainQuoteProvider(chainId, provider, this.multicall2Provider, {\n                        retries: 2,\n                        minTimeout: 100,\n                        maxTimeout: 1000,\n                    }, {\n                        multicallChunk: 210,\n                        gasLimitPerCall: 705000,\n                        quoteMinSuccessRate: 0.15,\n                    }, {\n                        gasLimitOverride: 2000000,\n                        multicallChunk: 70,\n                    });\n                    break;\n            }\n        }\n        this.v2PoolProvider =\n            v2PoolProvider !== null && v2PoolProvider !== void 0 ? v2PoolProvider : new CachingV2PoolProvider(chainId, new V2PoolProvider(chainId, this.multicall2Provider), new NodeJSCache(new NodeCache({ stdTTL: 60, useClones: false })));\n        this.v2QuoteProvider = v2QuoteProvider !== null && v2QuoteProvider !== void 0 ? v2QuoteProvider : new V2QuoteProvider();\n        this.blockedTokenListProvider =\n            blockedTokenListProvider !== null && blockedTokenListProvider !== void 0 ? blockedTokenListProvider : new CachingTokenListProvider(chainId, UNSUPPORTED_TOKENS, new NodeJSCache(new NodeCache({ stdTTL: 3600, useClones: false })));\n        this.tokenProvider =\n            tokenProvider !== null && tokenProvider !== void 0 ? tokenProvider : new CachingTokenProviderWithFallback(chainId, new NodeJSCache(new NodeCache({ stdTTL: 3600, useClones: false })), new CachingTokenListProvider(chainId, DEFAULT_TOKEN_LIST, new NodeJSCache(new NodeCache({ stdTTL: 3600, useClones: false }))), new TokenProvider(chainId, this.multicall2Provider));\n        const chainName = ID_TO_NETWORK_NAME(chainId);\n        // ipfs urls in the following format: `https://cloudflare-ipfs.com/ipns/api.uniswap.org/v1/pools/${protocol}/${chainName}.json`;\n        if (v2SubgraphProvider) {\n            this.v2SubgraphProvider = v2SubgraphProvider;\n        }\n        else {\n            this.v2SubgraphProvider = new V2SubgraphProviderWithFallBacks([\n                new CachingV2SubgraphProvider(chainId, new URISubgraphProvider(chainId, `https://cloudflare-ipfs.com/ipns/api.uniswap.org/v1/pools/v2/${chainName}.json`, undefined, 0), new NodeJSCache(new NodeCache({ stdTTL: 300, useClones: false }))),\n                new StaticV2SubgraphProvider(chainId),\n            ]);\n        }\n        if (v3SubgraphProvider) {\n            this.v3SubgraphProvider = v3SubgraphProvider;\n        }\n        else {\n            this.v3SubgraphProvider = new V3SubgraphProviderWithFallBacks([\n                new CachingV3SubgraphProvider(chainId, new URISubgraphProvider(chainId, `https://cloudflare-ipfs.com/ipns/api.uniswap.org/v1/pools/v3/${chainName}.json`, undefined, 0), new NodeJSCache(new NodeCache({ stdTTL: 300, useClones: false }))),\n                new StaticV3SubgraphProvider(chainId, this.v3PoolProvider),\n            ]);\n        }\n        this.gasPriceProvider =\n            gasPriceProvider !== null && gasPriceProvider !== void 0 ? gasPriceProvider : new CachingGasStationProvider(chainId, this.provider instanceof JsonRpcProvider\n                ? new OnChainGasPriceProvider(chainId, new EIP1559GasPriceProvider(this.provider), new LegacyGasPriceProvider(this.provider))\n                : new ETHGasStationInfoProvider(ETH_GAS_STATION_API_URL), new NodeJSCache(new NodeCache({ stdTTL: 15, useClones: false })));\n        this.v3GasModelFactory =\n            v3GasModelFactory !== null && v3GasModelFactory !== void 0 ? v3GasModelFactory : new V3HeuristicGasModelFactory();\n        this.v2GasModelFactory =\n            v2GasModelFactory !== null && v2GasModelFactory !== void 0 ? v2GasModelFactory : new V2HeuristicGasModelFactory();\n        this.mixedRouteGasModelFactory =\n            mixedRouteGasModelFactory !== null && mixedRouteGasModelFactory !== void 0 ? mixedRouteGasModelFactory : new MixedRouteHeuristicGasModelFactory();\n        this.swapRouterProvider =\n            swapRouterProvider !== null && swapRouterProvider !== void 0 ? swapRouterProvider : new SwapRouterProvider(this.multicall2Provider);\n        if (chainId == ChainId.OPTIMISM || chainId == ChainId.OPTIMISTIC_KOVAN) {\n            this.l2GasDataProvider =\n                optimismGasDataProvider !== null && optimismGasDataProvider !== void 0 ? optimismGasDataProvider : new OptimismGasDataProvider(chainId, this.multicall2Provider);\n        }\n        if (chainId == ChainId.ARBITRUM_ONE ||\n            chainId == ChainId.ARBITRUM_RINKEBY) {\n            this.l2GasDataProvider =\n                arbitrumGasDataProvider !== null && arbitrumGasDataProvider !== void 0 ? arbitrumGasDataProvider : new ArbitrumGasDataProvider(chainId, this.provider);\n        }\n        if (tokenValidatorProvider) {\n            this.tokenValidatorProvider = tokenValidatorProvider;\n        }\n        else if (this.chainId == ChainId.MAINNET) {\n            this.tokenValidatorProvider = new TokenValidatorProvider(this.chainId, this.multicall2Provider, new NodeJSCache(new NodeCache({ stdTTL: 30000, useClones: false })));\n        }\n    }\n    async routeToRatio(token0Balance, token1Balance, position, swapAndAddConfig, swapAndAddOptions, routingConfig = DEFAULT_ROUTING_CONFIG_BY_CHAIN(this.chainId)) {\n        if (token1Balance.currency.wrapped.sortsBefore(token0Balance.currency.wrapped)) {\n            [token0Balance, token1Balance] = [token1Balance, token0Balance];\n        }\n        let preSwapOptimalRatio = this.calculateOptimalRatio(position, position.pool.sqrtRatioX96, true);\n        // set up parameters according to which token will be swapped\n        let zeroForOne;\n        if (position.pool.tickCurrent > position.tickUpper) {\n            zeroForOne = true;\n        }\n        else if (position.pool.tickCurrent < position.tickLower) {\n            zeroForOne = false;\n        }\n        else {\n            zeroForOne = new Fraction(token0Balance.quotient, token1Balance.quotient).greaterThan(preSwapOptimalRatio);\n            if (!zeroForOne)\n                preSwapOptimalRatio = preSwapOptimalRatio.invert();\n        }\n        const [inputBalance, outputBalance] = zeroForOne\n            ? [token0Balance, token1Balance]\n            : [token1Balance, token0Balance];\n        let optimalRatio = preSwapOptimalRatio;\n        let postSwapTargetPool = position.pool;\n        let exchangeRate = zeroForOne\n            ? position.pool.token0Price\n            : position.pool.token1Price;\n        let swap = null;\n        let ratioAchieved = false;\n        let n = 0;\n        // iterate until we find a swap with a sufficient ratio or return null\n        while (!ratioAchieved) {\n            n++;\n            if (n > swapAndAddConfig.maxIterations) {\n                log.info('max iterations exceeded');\n                return {\n                    status: SwapToRatioStatus.NO_ROUTE_FOUND,\n                    error: 'max iterations exceeded',\n                };\n            }\n            const amountToSwap = calculateRatioAmountIn(optimalRatio, exchangeRate, inputBalance, outputBalance);\n            if (amountToSwap.equalTo(0)) {\n                log.info(`no swap needed: amountToSwap = 0`);\n                return {\n                    status: SwapToRatioStatus.NO_SWAP_NEEDED,\n                };\n            }\n            swap = await this.route(amountToSwap, outputBalance.currency, TradeType.EXACT_INPUT, undefined, {\n                ...DEFAULT_ROUTING_CONFIG_BY_CHAIN(this.chainId),\n                ...routingConfig,\n                /// @dev We do not want to query for mixedRoutes for routeToRatio as they are not supported\n                /// [Protocol.V3, Protocol.V2] will make sure we only query for V3 and V2\n                protocols: [Protocol.V3, Protocol.V2],\n            });\n            if (!swap) {\n                log.info('no route found from this.route()');\n                return {\n                    status: SwapToRatioStatus.NO_ROUTE_FOUND,\n                    error: 'no route found',\n                };\n            }\n            const inputBalanceUpdated = inputBalance.subtract(swap.trade.inputAmount);\n            const outputBalanceUpdated = outputBalance.add(swap.trade.outputAmount);\n            const newRatio = inputBalanceUpdated.divide(outputBalanceUpdated);\n            let targetPoolPriceUpdate;\n            swap.route.forEach((route) => {\n                if (route.protocol == Protocol.V3) {\n                    const v3Route = route;\n                    v3Route.route.pools.forEach((pool, i) => {\n                        if (pool.token0.equals(position.pool.token0) &&\n                            pool.token1.equals(position.pool.token1) &&\n                            pool.fee == position.pool.fee) {\n                            targetPoolPriceUpdate = JSBI.BigInt(v3Route.sqrtPriceX96AfterList[i].toString());\n                            optimalRatio = this.calculateOptimalRatio(position, JSBI.BigInt(targetPoolPriceUpdate.toString()), zeroForOne);\n                        }\n                    });\n                }\n            });\n            if (!targetPoolPriceUpdate) {\n                optimalRatio = preSwapOptimalRatio;\n            }\n            ratioAchieved =\n                newRatio.equalTo(optimalRatio) ||\n                    this.absoluteValue(newRatio.asFraction.divide(optimalRatio).subtract(1)).lessThan(swapAndAddConfig.ratioErrorTolerance);\n            if (ratioAchieved && targetPoolPriceUpdate) {\n                postSwapTargetPool = new Pool(position.pool.token0, position.pool.token1, position.pool.fee, targetPoolPriceUpdate, position.pool.liquidity, TickMath.getTickAtSqrtRatio(targetPoolPriceUpdate), position.pool.tickDataProvider);\n            }\n            exchangeRate = swap.trade.outputAmount.divide(swap.trade.inputAmount);\n            log.info({\n                exchangeRate: exchangeRate.asFraction.toFixed(18),\n                optimalRatio: optimalRatio.asFraction.toFixed(18),\n                newRatio: newRatio.asFraction.toFixed(18),\n                inputBalanceUpdated: inputBalanceUpdated.asFraction.toFixed(18),\n                outputBalanceUpdated: outputBalanceUpdated.asFraction.toFixed(18),\n                ratioErrorTolerance: swapAndAddConfig.ratioErrorTolerance.toFixed(18),\n                iterationN: n.toString(),\n            }, 'QuoteToRatio Iteration Parameters');\n            if (exchangeRate.equalTo(0)) {\n                log.info('exchangeRate to 0');\n                return {\n                    status: SwapToRatioStatus.NO_ROUTE_FOUND,\n                    error: 'insufficient liquidity to swap to optimal ratio',\n                };\n            }\n        }\n        if (!swap) {\n            return {\n                status: SwapToRatioStatus.NO_ROUTE_FOUND,\n                error: 'no route found',\n            };\n        }\n        let methodParameters;\n        if (swapAndAddOptions) {\n            methodParameters = await this.buildSwapAndAddMethodParameters(swap.trade, swapAndAddOptions, {\n                initialBalanceTokenIn: inputBalance,\n                initialBalanceTokenOut: outputBalance,\n                preLiquidityPosition: position,\n            });\n        }\n        return {\n            status: SwapToRatioStatus.SUCCESS,\n            result: { ...swap, methodParameters, optimalRatio, postSwapTargetPool },\n        };\n    }\n    /**\n     * @inheritdoc IRouter\n     */\n    async route(amount, quoteCurrency, tradeType, swapConfig, partialRoutingConfig = {}) {\n        var _a;\n        metric.putMetric(`QuoteRequestedForChain${this.chainId}`, 1, MetricLoggerUnit.Count);\n        // Get a block number to specify in all our calls. Ensures data we fetch from chain is\n        // from the same block.\n        const blockNumber = (_a = partialRoutingConfig.blockNumber) !== null && _a !== void 0 ? _a : this.getBlockNumberPromise();\n        const routingConfig = _.merge({}, DEFAULT_ROUTING_CONFIG_BY_CHAIN(this.chainId), partialRoutingConfig, { blockNumber });\n        const { protocols } = routingConfig;\n        const currencyIn = tradeType == TradeType.EXACT_INPUT ? amount.currency : quoteCurrency;\n        const currencyOut = tradeType == TradeType.EXACT_INPUT ? quoteCurrency : amount.currency;\n        const tokenIn = currencyIn.wrapped;\n        const tokenOut = currencyOut.wrapped;\n        // Generate our distribution of amounts, i.e. fractions of the input amount.\n        // We will get quotes for fractions of the input amount for different routes, then\n        // combine to generate split routes.\n        const [percents, amounts] = this.getAmountDistribution(amount, routingConfig);\n        // Get an estimate of the gas price to use when estimating gas cost of different routes.\n        const beforeGas = Date.now();\n        const { gasPriceWei } = await this.gasPriceProvider.getGasPrice();\n        metric.putMetric('GasPriceLoad', Date.now() - beforeGas, MetricLoggerUnit.Milliseconds);\n        const quoteToken = quoteCurrency.wrapped;\n        const quotePromises = [];\n        const protocolsSet = new Set(protocols !== null && protocols !== void 0 ? protocols : []);\n        const [v3gasModel, mixedRouteGasModel] = await Promise.all([\n            this.v3GasModelFactory.buildGasModel({\n                chainId: this.chainId,\n                gasPriceWei,\n                v3poolProvider: this.v3PoolProvider,\n                token: quoteToken,\n                v2poolProvider: this.v2PoolProvider,\n                l2GasDataProvider: this.l2GasDataProvider,\n            }),\n            this.mixedRouteGasModelFactory.buildGasModel({\n                chainId: this.chainId,\n                gasPriceWei,\n                v3poolProvider: this.v3PoolProvider,\n                token: quoteToken,\n                v2poolProvider: this.v2PoolProvider,\n            }),\n        ]);\n        if ((protocolsSet.size == 0 ||\n            (protocolsSet.has(Protocol.V2) && protocolsSet.has(Protocol.V3))) &&\n            V2_SUPPORTED.includes(this.chainId)) {\n            log.info({ protocols, tradeType }, 'Routing across all protocols');\n            quotePromises.push(this.getV3Quotes(tokenIn, tokenOut, amounts, percents, quoteToken, v3gasModel, tradeType, routingConfig));\n            quotePromises.push(this.getV2Quotes(tokenIn, tokenOut, amounts, percents, quoteToken, gasPriceWei, tradeType, routingConfig));\n            /// @dev only add mixedRoutes in the case where no protocols were specified, and if TradeType is correct\n            if (tradeType === TradeType.EXACT_INPUT &&\n                (this.chainId === ChainId.MAINNET || this.chainId === ChainId.GÖRLI) &&\n                /// The cases where protocols = [] and protocols = [V2, V3, MIXED]\n                (protocolsSet.size == 0 || protocolsSet.has(Protocol.MIXED))) {\n                log.info({ protocols, swapType: tradeType }, 'Routing across MixedRoutes');\n                quotePromises.push(this.getMixedRouteQuotes(tokenIn, tokenOut, amounts, percents, quoteToken, mixedRouteGasModel, tradeType, routingConfig));\n            }\n        }\n        else {\n            if (protocolsSet.has(Protocol.V3) ||\n                (protocolsSet.size == 0 && !V2_SUPPORTED.includes(this.chainId))) {\n                log.info({ protocols, swapType: tradeType }, 'Routing across V3');\n                quotePromises.push(this.getV3Quotes(tokenIn, tokenOut, amounts, percents, quoteToken, v3gasModel, tradeType, routingConfig));\n            }\n            if (protocolsSet.has(Protocol.V2)) {\n                log.info({ protocols, swapType: tradeType }, 'Routing across V2');\n                quotePromises.push(this.getV2Quotes(tokenIn, tokenOut, amounts, percents, quoteToken, gasPriceWei, tradeType, routingConfig));\n            }\n            /// If protocolsSet is not empty, and we specify mixedRoutes, consider them if the chain has v2 liq\n            /// and tradeType === EXACT_INPUT\n            if (protocolsSet.has(Protocol.MIXED) &&\n                (this.chainId === ChainId.MAINNET || this.chainId === ChainId.GÖRLI) &&\n                tradeType == TradeType.EXACT_INPUT) {\n                log.info({ protocols, swapType: tradeType }, 'Routing across MixedRoutes');\n                quotePromises.push(this.getMixedRouteQuotes(tokenIn, tokenOut, amounts, percents, quoteToken, mixedRouteGasModel, tradeType, routingConfig));\n            }\n        }\n        const routesWithValidQuotesByProtocol = await Promise.all(quotePromises);\n        let allRoutesWithValidQuotes = [];\n        let allCandidatePools = [];\n        for (const { routesWithValidQuotes, candidatePools, } of routesWithValidQuotesByProtocol) {\n            allRoutesWithValidQuotes = [\n                ...allRoutesWithValidQuotes,\n                ...routesWithValidQuotes,\n            ];\n            allCandidatePools = [...allCandidatePools, candidatePools];\n        }\n        if (allRoutesWithValidQuotes.length == 0) {\n            log.info({ allRoutesWithValidQuotes }, 'Received no valid quotes');\n            return null;\n        }\n        // Given all the quotes for all the amounts for all the routes, find the best combination.\n        const beforeBestSwap = Date.now();\n        const swapRouteRaw = await getBestSwapRoute(amount, percents, allRoutesWithValidQuotes, tradeType, this.chainId, routingConfig, v3gasModel);\n        if (!swapRouteRaw) {\n            return null;\n        }\n        const { quote, quoteGasAdjusted, estimatedGasUsed, routes: routeAmounts, estimatedGasUsedQuoteToken, estimatedGasUsedUSD, } = swapRouteRaw;\n        // Build Trade object that represents the optimal swap.\n        const trade = buildTrade(currencyIn, currencyOut, tradeType, routeAmounts);\n        let methodParameters;\n        // If user provided recipient, deadline etc. we also generate the calldata required to execute\n        // the swap and return it too.\n        if (swapConfig) {\n            methodParameters = buildSwapMethodParameters(trade, swapConfig);\n        }\n        metric.putMetric('FindBestSwapRoute', Date.now() - beforeBestSwap, MetricLoggerUnit.Milliseconds);\n        metric.putMetric(`QuoteFoundForChain${this.chainId}`, 1, MetricLoggerUnit.Count);\n        this.emitPoolSelectionMetrics(swapRouteRaw, allCandidatePools);\n        const swapRoute = {\n            quote,\n            quoteGasAdjusted,\n            estimatedGasUsed,\n            estimatedGasUsedQuoteToken,\n            estimatedGasUsedUSD,\n            gasPriceWei,\n            route: routeAmounts,\n            trade,\n            methodParameters,\n            blockNumber: BigNumber.from(await blockNumber),\n        };\n        if (swapConfig &&\n            swapConfig.simulate &&\n            methodParameters &&\n            methodParameters.calldata) {\n            if (!this.simulator) {\n                throw new Error('Simulator not initialized!');\n            }\n            const beforeSimulate = Date.now();\n            const swapRouteWithSimulation = await this.simulator.simulateTransaction(swapConfig.simulate.fromAddress, swapRoute, this.l2GasDataProvider\n                ? await this.l2GasDataProvider.getGasData()\n                : undefined);\n            metric.putMetric('SimulateTransaction', Date.now() - beforeSimulate, MetricLoggerUnit.Milliseconds);\n            return swapRouteWithSimulation;\n        }\n        return swapRoute;\n    }\n    async applyTokenValidatorToPools(pools, isInvalidFn) {\n        if (!this.tokenValidatorProvider) {\n            return pools;\n        }\n        log.info(`Running token validator on ${pools.length} pools`);\n        const tokens = _.flatMap(pools, (pool) => [pool.token0, pool.token1]);\n        const tokenValidationResults = await this.tokenValidatorProvider.validateTokens(tokens);\n        const poolsFiltered = _.filter(pools, (pool) => {\n            const token0Validation = tokenValidationResults.getValidationByToken(pool.token0);\n            const token1Validation = tokenValidationResults.getValidationByToken(pool.token1);\n            const token0Invalid = isInvalidFn(pool.token0, token0Validation);\n            const token1Invalid = isInvalidFn(pool.token1, token1Validation);\n            if (token0Invalid || token1Invalid) {\n                log.info(`Dropping pool ${poolToString(pool)} because token is invalid. ${pool.token0.symbol}: ${token0Validation}, ${pool.token1.symbol}: ${token1Validation}`);\n            }\n            return !token0Invalid && !token1Invalid;\n        });\n        return poolsFiltered;\n    }\n    async getV3Quotes(tokenIn, tokenOut, amounts, percents, quoteToken, gasModel, swapType, routingConfig) {\n        log.info('Starting to get V3 quotes');\n        // Fetch all the pools that we will consider routing via. There are thousands\n        // of pools, so we filter them to a set of candidate pools that we expect will\n        // result in good prices.\n        const { poolAccessor, candidatePools } = await getV3CandidatePools({\n            tokenIn,\n            tokenOut,\n            tokenProvider: this.tokenProvider,\n            blockedTokenListProvider: this.blockedTokenListProvider,\n            poolProvider: this.v3PoolProvider,\n            routeType: swapType,\n            subgraphProvider: this.v3SubgraphProvider,\n            routingConfig,\n            chainId: this.chainId,\n        });\n        const poolsRaw = poolAccessor.getAllPools();\n        // Drop any pools that contain fee on transfer tokens (not supported by v3) or have issues with being transferred.\n        const pools = await this.applyTokenValidatorToPools(poolsRaw, (token, tokenValidation) => {\n            // If there is no available validation result we assume the token is fine.\n            if (!tokenValidation) {\n                return false;\n            }\n            // Only filters out *intermediate* pools that involve tokens that we detect\n            // cant be transferred. This prevents us trying to route through tokens that may\n            // not be transferrable, but allows users to still swap those tokens if they\n            // specify.\n            //\n            if (tokenValidation == TokenValidationResult.STF &&\n                (token.equals(tokenIn) || token.equals(tokenOut))) {\n                return false;\n            }\n            return (tokenValidation == TokenValidationResult.FOT ||\n                tokenValidation == TokenValidationResult.STF);\n        });\n        // Given all our candidate pools, compute all the possible ways to route from tokenIn to tokenOut.\n        const { maxSwapsPerPath } = routingConfig;\n        const routes = computeAllV3Routes(tokenIn, tokenOut, pools, maxSwapsPerPath);\n        if (routes.length == 0) {\n            return { routesWithValidQuotes: [], candidatePools };\n        }\n        // For all our routes, and all the fractional amounts, fetch quotes on-chain.\n        const quoteFn = swapType == TradeType.EXACT_INPUT\n            ? this.onChainQuoteProvider.getQuotesManyExactIn.bind(this.onChainQuoteProvider)\n            : this.onChainQuoteProvider.getQuotesManyExactOut.bind(this.onChainQuoteProvider);\n        const beforeQuotes = Date.now();\n        log.info(`Getting quotes for V3 for ${routes.length} routes with ${amounts.length} amounts per route.`);\n        const { routesWithQuotes } = await quoteFn(amounts, routes, {\n            blockNumber: routingConfig.blockNumber,\n        });\n        metric.putMetric('V3QuotesLoad', Date.now() - beforeQuotes, MetricLoggerUnit.Milliseconds);\n        metric.putMetric('V3QuotesFetched', _(routesWithQuotes)\n            .map(([, quotes]) => quotes.length)\n            .sum(), MetricLoggerUnit.Count);\n        const routesWithValidQuotes = [];\n        for (const routeWithQuote of routesWithQuotes) {\n            const [route, quotes] = routeWithQuote;\n            for (let i = 0; i < quotes.length; i++) {\n                const percent = percents[i];\n                const amountQuote = quotes[i];\n                const { quote, amount, sqrtPriceX96AfterList, initializedTicksCrossedList, gasEstimate, } = amountQuote;\n                if (!quote ||\n                    !sqrtPriceX96AfterList ||\n                    !initializedTicksCrossedList ||\n                    !gasEstimate) {\n                    log.debug({\n                        route: routeToString(route),\n                        amountQuote,\n                    }, 'Dropping a null V3 quote for route.');\n                    continue;\n                }\n                const routeWithValidQuote = new V3RouteWithValidQuote({\n                    route,\n                    rawQuote: quote,\n                    amount,\n                    percent,\n                    sqrtPriceX96AfterList,\n                    initializedTicksCrossedList,\n                    quoterGasEstimate: gasEstimate,\n                    gasModel,\n                    quoteToken,\n                    tradeType: swapType,\n                    v3PoolProvider: this.v3PoolProvider,\n                });\n                routesWithValidQuotes.push(routeWithValidQuote);\n            }\n        }\n        return { routesWithValidQuotes, candidatePools };\n    }\n    async getV2Quotes(tokenIn, tokenOut, amounts, percents, quoteToken, gasPriceWei, swapType, routingConfig) {\n        log.info('Starting to get V2 quotes');\n        // Fetch all the pools that we will consider routing via. There are thousands\n        // of pools, so we filter them to a set of candidate pools that we expect will\n        // result in good prices.\n        const { poolAccessor, candidatePools } = await getV2CandidatePools({\n            tokenIn,\n            tokenOut,\n            tokenProvider: this.tokenProvider,\n            blockedTokenListProvider: this.blockedTokenListProvider,\n            poolProvider: this.v2PoolProvider,\n            routeType: swapType,\n            subgraphProvider: this.v2SubgraphProvider,\n            routingConfig,\n            chainId: this.chainId,\n        });\n        const poolsRaw = poolAccessor.getAllPools();\n        // Drop any pools that contain tokens that can not be transferred according to the token validator.\n        const pools = await this.applyTokenValidatorToPools(poolsRaw, (token, tokenValidation) => {\n            // If there is no available validation result we assume the token is fine.\n            if (!tokenValidation) {\n                return false;\n            }\n            // Only filters out *intermediate* pools that involve tokens that we detect\n            // cant be transferred. This prevents us trying to route through tokens that may\n            // not be transferrable, but allows users to still swap those tokens if they\n            // specify.\n            if (tokenValidation == TokenValidationResult.STF &&\n                (token.equals(tokenIn) || token.equals(tokenOut))) {\n                return false;\n            }\n            return tokenValidation == TokenValidationResult.STF;\n        });\n        // Given all our candidate pools, compute all the possible ways to route from tokenIn to tokenOut.\n        const { maxSwapsPerPath } = routingConfig;\n        const routes = computeAllV2Routes(tokenIn, tokenOut, pools, maxSwapsPerPath);\n        if (routes.length == 0) {\n            return { routesWithValidQuotes: [], candidatePools };\n        }\n        // For all our routes, and all the fractional amounts, fetch quotes on-chain.\n        const quoteFn = swapType == TradeType.EXACT_INPUT\n            ? this.v2QuoteProvider.getQuotesManyExactIn.bind(this.v2QuoteProvider)\n            : this.v2QuoteProvider.getQuotesManyExactOut.bind(this.v2QuoteProvider);\n        const beforeQuotes = Date.now();\n        log.info(`Getting quotes for V2 for ${routes.length} routes with ${amounts.length} amounts per route.`);\n        const { routesWithQuotes } = await quoteFn(amounts, routes);\n        const V2gasModel = await this.v2GasModelFactory.buildGasModel({\n            chainId: this.chainId,\n            gasPriceWei,\n            poolProvider: this.v2PoolProvider,\n            token: quoteToken,\n        });\n        metric.putMetric('V2QuotesLoad', Date.now() - beforeQuotes, MetricLoggerUnit.Milliseconds);\n        metric.putMetric('V2QuotesFetched', _(routesWithQuotes)\n            .map(([, quotes]) => quotes.length)\n            .sum(), MetricLoggerUnit.Count);\n        const routesWithValidQuotes = [];\n        for (const routeWithQuote of routesWithQuotes) {\n            const [route, quotes] = routeWithQuote;\n            for (let i = 0; i < quotes.length; i++) {\n                const percent = percents[i];\n                const amountQuote = quotes[i];\n                const { quote, amount } = amountQuote;\n                if (!quote) {\n                    log.debug({\n                        route: routeToString(route),\n                        amountQuote,\n                    }, 'Dropping a null V2 quote for route.');\n                    continue;\n                }\n                const routeWithValidQuote = new V2RouteWithValidQuote({\n                    route,\n                    rawQuote: quote,\n                    amount,\n                    percent,\n                    gasModel: V2gasModel,\n                    quoteToken,\n                    tradeType: swapType,\n                    v2PoolProvider: this.v2PoolProvider,\n                });\n                routesWithValidQuotes.push(routeWithValidQuote);\n            }\n        }\n        return { routesWithValidQuotes, candidatePools };\n    }\n    async getMixedRouteQuotes(tokenIn, tokenOut, amounts, percents, quoteToken, mixedRouteGasModel, swapType, routingConfig) {\n        log.info('Starting to get mixed quotes');\n        if (swapType != TradeType.EXACT_INPUT) {\n            throw new Error('Mixed route quotes are not supported for EXACT_OUTPUT');\n        }\n        const { V2poolAccessor, V3poolAccessor, candidatePools: mixedRouteCandidatePools, } = await getMixedRouteCandidatePools({\n            tokenIn,\n            tokenOut,\n            tokenProvider: this.tokenProvider,\n            blockedTokenListProvider: this.blockedTokenListProvider,\n            v3poolProvider: this.v3PoolProvider,\n            v2poolProvider: this.v2PoolProvider,\n            routeType: swapType,\n            v3subgraphProvider: this.v3SubgraphProvider,\n            v2subgraphProvider: this.v2SubgraphProvider,\n            routingConfig,\n            chainId: this.chainId,\n        });\n        const V3poolsRaw = V3poolAccessor.getAllPools();\n        const V2poolsRaw = V2poolAccessor.getAllPools();\n        const poolsRaw = [...V3poolsRaw, ...V2poolsRaw];\n        const candidatePools = mixedRouteCandidatePools;\n        // Drop any pools that contain fee on transfer tokens (not supported by v3) or have issues with being transferred.\n        const pools = await this.applyTokenValidatorToPools(poolsRaw, (token, tokenValidation) => {\n            // If there is no available validation result we assume the token is fine.\n            if (!tokenValidation) {\n                return false;\n            }\n            // Only filters out *intermediate* pools that involve tokens that we detect\n            // cant be transferred. This prevents us trying to route through tokens that may\n            // not be transferrable, but allows users to still swap those tokens if they\n            // specify.\n            //\n            if (tokenValidation == TokenValidationResult.STF &&\n                (token.equals(tokenIn) || token.equals(tokenOut))) {\n                return false;\n            }\n            return (tokenValidation == TokenValidationResult.FOT ||\n                tokenValidation == TokenValidationResult.STF);\n        });\n        const { maxSwapsPerPath } = routingConfig;\n        const routes = computeAllMixedRoutes(tokenIn, tokenOut, pools, maxSwapsPerPath);\n        if (routes.length == 0) {\n            return { routesWithValidQuotes: [], candidatePools };\n        }\n        // For all our routes, and all the fractional amounts, fetch quotes on-chain.\n        const quoteFn = this.onChainQuoteProvider.getQuotesManyExactIn.bind(this.onChainQuoteProvider);\n        const beforeQuotes = Date.now();\n        log.info(`Getting quotes for mixed for ${routes.length} routes with ${amounts.length} amounts per route.`);\n        const { routesWithQuotes } = await quoteFn(amounts, routes, {\n            blockNumber: routingConfig.blockNumber,\n        });\n        metric.putMetric('MixedQuotesLoad', Date.now() - beforeQuotes, MetricLoggerUnit.Milliseconds);\n        metric.putMetric('MixedQuotesFetched', _(routesWithQuotes)\n            .map(([, quotes]) => quotes.length)\n            .sum(), MetricLoggerUnit.Count);\n        const routesWithValidQuotes = [];\n        for (const routeWithQuote of routesWithQuotes) {\n            const [route, quotes] = routeWithQuote;\n            for (let i = 0; i < quotes.length; i++) {\n                const percent = percents[i];\n                const amountQuote = quotes[i];\n                const { quote, amount, sqrtPriceX96AfterList, initializedTicksCrossedList, gasEstimate, } = amountQuote;\n                if (!quote ||\n                    !sqrtPriceX96AfterList ||\n                    !initializedTicksCrossedList ||\n                    !gasEstimate) {\n                    log.debug({\n                        route: routeToString(route),\n                        amountQuote,\n                    }, 'Dropping a null mixed quote for route.');\n                    continue;\n                }\n                const routeWithValidQuote = new MixedRouteWithValidQuote({\n                    route,\n                    rawQuote: quote,\n                    amount,\n                    percent,\n                    sqrtPriceX96AfterList,\n                    initializedTicksCrossedList,\n                    quoterGasEstimate: gasEstimate,\n                    mixedRouteGasModel,\n                    quoteToken,\n                    tradeType: swapType,\n                    v3PoolProvider: this.v3PoolProvider,\n                    v2PoolProvider: this.v2PoolProvider,\n                });\n                routesWithValidQuotes.push(routeWithValidQuote);\n            }\n        }\n        return { routesWithValidQuotes, candidatePools };\n    }\n    // Note multiplications here can result in a loss of precision in the amounts (e.g. taking 50% of 101)\n    // This is reconcilled at the end of the algorithm by adding any lost precision to one of\n    // the splits in the route.\n    getAmountDistribution(amount, routingConfig) {\n        const { distributionPercent } = routingConfig;\n        const percents = [];\n        const amounts = [];\n        for (let i = 1; i <= 100 / distributionPercent; i++) {\n            percents.push(i * distributionPercent);\n            amounts.push(amount.multiply(new Fraction(i * distributionPercent, 100)));\n        }\n        return [percents, amounts];\n    }\n    async buildSwapAndAddMethodParameters(trade, swapAndAddOptions, swapAndAddParameters) {\n        const { swapOptions: { recipient, slippageTolerance, deadline, inputTokenPermit }, addLiquidityOptions: addLiquidityConfig, } = swapAndAddOptions;\n        const preLiquidityPosition = swapAndAddParameters.preLiquidityPosition;\n        const finalBalanceTokenIn = swapAndAddParameters.initialBalanceTokenIn.subtract(trade.inputAmount);\n        const finalBalanceTokenOut = swapAndAddParameters.initialBalanceTokenOut.add(trade.outputAmount);\n        const approvalTypes = await this.swapRouterProvider.getApprovalType(finalBalanceTokenIn, finalBalanceTokenOut);\n        const zeroForOne = finalBalanceTokenIn.currency.wrapped.sortsBefore(finalBalanceTokenOut.currency.wrapped);\n        return SwapRouter.swapAndAddCallParameters(trade, {\n            recipient,\n            slippageTolerance,\n            deadlineOrPreviousBlockhash: deadline,\n            inputTokenPermit,\n        }, Position.fromAmounts({\n            pool: preLiquidityPosition.pool,\n            tickLower: preLiquidityPosition.tickLower,\n            tickUpper: preLiquidityPosition.tickUpper,\n            amount0: zeroForOne\n                ? finalBalanceTokenIn.quotient.toString()\n                : finalBalanceTokenOut.quotient.toString(),\n            amount1: zeroForOne\n                ? finalBalanceTokenOut.quotient.toString()\n                : finalBalanceTokenIn.quotient.toString(),\n            useFullPrecision: false,\n        }), addLiquidityConfig, approvalTypes.approvalTokenIn, approvalTypes.approvalTokenOut);\n    }\n    emitPoolSelectionMetrics(swapRouteRaw, allPoolsBySelection) {\n        const poolAddressesUsed = new Set();\n        const { routes: routeAmounts } = swapRouteRaw;\n        _(routeAmounts)\n            .flatMap((routeAmount) => {\n            const { poolAddresses } = routeAmount;\n            return poolAddresses;\n        })\n            .forEach((address) => {\n            poolAddressesUsed.add(address.toLowerCase());\n        });\n        for (const poolsBySelection of allPoolsBySelection) {\n            const { protocol } = poolsBySelection;\n            _.forIn(poolsBySelection.selections, (pools, topNSelection) => {\n                const topNUsed = _.findLastIndex(pools, (pool) => poolAddressesUsed.has(pool.id.toLowerCase())) + 1;\n                metric.putMetric(_.capitalize(`${protocol}${topNSelection}`), topNUsed, MetricLoggerUnit.Count);\n            });\n        }\n        let hasV3Route = false;\n        let hasV2Route = false;\n        let hasMixedRoute = false;\n        for (const routeAmount of routeAmounts) {\n            if (routeAmount.protocol == Protocol.V3) {\n                hasV3Route = true;\n            }\n            if (routeAmount.protocol == Protocol.V2) {\n                hasV2Route = true;\n            }\n            if (routeAmount.protocol == Protocol.MIXED) {\n                hasMixedRoute = true;\n            }\n        }\n        if (hasMixedRoute && (hasV3Route || hasV2Route)) {\n            if (hasV3Route && hasV2Route) {\n                metric.putMetric(`MixedAndV3AndV2SplitRoute`, 1, MetricLoggerUnit.Count);\n                metric.putMetric(`MixedAndV3AndV2SplitRouteForChain${this.chainId}`, 1, MetricLoggerUnit.Count);\n            }\n            else if (hasV3Route) {\n                metric.putMetric(`MixedAndV3SplitRoute`, 1, MetricLoggerUnit.Count);\n                metric.putMetric(`MixedAndV3SplitRouteForChain${this.chainId}`, 1, MetricLoggerUnit.Count);\n            }\n            else if (hasV2Route) {\n                metric.putMetric(`MixedAndV2SplitRoute`, 1, MetricLoggerUnit.Count);\n                metric.putMetric(`MixedAndV2SplitRouteForChain${this.chainId}`, 1, MetricLoggerUnit.Count);\n            }\n        }\n        else if (hasV3Route && hasV2Route) {\n            metric.putMetric(`V3AndV2SplitRoute`, 1, MetricLoggerUnit.Count);\n            metric.putMetric(`V3AndV2SplitRouteForChain${this.chainId}`, 1, MetricLoggerUnit.Count);\n        }\n        else if (hasMixedRoute) {\n            if (routeAmounts.length > 1) {\n                metric.putMetric(`MixedSplitRoute`, 1, MetricLoggerUnit.Count);\n                metric.putMetric(`MixedSplitRouteForChain${this.chainId}`, 1, MetricLoggerUnit.Count);\n            }\n            else {\n                metric.putMetric(`MixedRoute`, 1, MetricLoggerUnit.Count);\n                metric.putMetric(`MixedRouteForChain${this.chainId}`, 1, MetricLoggerUnit.Count);\n            }\n        }\n        else if (hasV3Route) {\n            if (routeAmounts.length > 1) {\n                metric.putMetric(`V3SplitRoute`, 1, MetricLoggerUnit.Count);\n                metric.putMetric(`V3SplitRouteForChain${this.chainId}`, 1, MetricLoggerUnit.Count);\n            }\n            else {\n                metric.putMetric(`V3Route`, 1, MetricLoggerUnit.Count);\n                metric.putMetric(`V3RouteForChain${this.chainId}`, 1, MetricLoggerUnit.Count);\n            }\n        }\n        else if (hasV2Route) {\n            if (routeAmounts.length > 1) {\n                metric.putMetric(`V2SplitRoute`, 1, MetricLoggerUnit.Count);\n                metric.putMetric(`V2SplitRouteForChain${this.chainId}`, 1, MetricLoggerUnit.Count);\n            }\n            else {\n                metric.putMetric(`V2Route`, 1, MetricLoggerUnit.Count);\n                metric.putMetric(`V2RouteForChain${this.chainId}`, 1, MetricLoggerUnit.Count);\n            }\n        }\n    }\n    calculateOptimalRatio(position, sqrtRatioX96, zeroForOne) {\n        const upperSqrtRatioX96 = TickMath.getSqrtRatioAtTick(position.tickUpper);\n        const lowerSqrtRatioX96 = TickMath.getSqrtRatioAtTick(position.tickLower);\n        // returns Fraction(0, 1) for any out of range position regardless of zeroForOne. Implication: function\n        // cannot be used to determine the trading direction of out of range positions.\n        if (JSBI.greaterThan(sqrtRatioX96, upperSqrtRatioX96) ||\n            JSBI.lessThan(sqrtRatioX96, lowerSqrtRatioX96)) {\n            return new Fraction(0, 1);\n        }\n        const precision = JSBI.BigInt('1' + '0'.repeat(18));\n        let optimalRatio = new Fraction(SqrtPriceMath.getAmount0Delta(sqrtRatioX96, upperSqrtRatioX96, precision, true), SqrtPriceMath.getAmount1Delta(sqrtRatioX96, lowerSqrtRatioX96, precision, true));\n        if (!zeroForOne)\n            optimalRatio = optimalRatio.invert();\n        return optimalRatio;\n    }\n    absoluteValue(fraction) {\n        const numeratorAbs = JSBI.lessThan(fraction.numerator, JSBI.BigInt(0))\n            ? JSBI.unaryMinus(fraction.numerator)\n            : fraction.numerator;\n        const denominatorAbs = JSBI.lessThan(fraction.denominator, JSBI.BigInt(0))\n            ? JSBI.unaryMinus(fraction.denominator)\n            : fraction.denominator;\n        return new Fraction(numeratorAbs, denominatorAbs);\n    }\n    getBlockNumberPromise() {\n        return retry(async (_b, attempt) => {\n            if (attempt > 1) {\n                log.info(`Get block number attempt ${attempt}`);\n            }\n            return this.provider.getBlockNumber();\n        }, {\n            retries: 2,\n            minTimeout: 100,\n            maxTimeout: 1000,\n        });\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxwaGEtcm91dGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3JvdXRlcnMvYWxwaGEtcm91dGVyL2FscGhhLXJvdXRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDckQsT0FBTyxFQUFnQixlQUFlLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUN6RSxPQUFPLGtCQUFrQixNQUFNLDZCQUE2QixDQUFDO0FBQzdELE9BQU8sRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFTLE1BQU0scUJBQXFCLENBQUM7QUFDbEUsT0FBTyxFQUFZLFFBQVEsRUFBUyxTQUFTLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUd6RSxPQUFPLEVBRUwsSUFBSSxFQUNKLFFBQVEsRUFDUixhQUFhLEVBQ2IsUUFBUSxHQUNULE1BQU0saUJBQWlCLENBQUM7QUFDekIsT0FBTyxLQUFLLE1BQU0sYUFBYSxDQUFDO0FBQ2hDLE9BQU8sSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUN4QixPQUFPLENBQUMsTUFBTSxRQUFRLENBQUM7QUFDdkIsT0FBTyxTQUFTLE1BQU0sWUFBWSxDQUFDO0FBRW5DLE9BQU8sRUFDTCx5QkFBeUIsRUFDekIsZ0NBQWdDLEVBQ2hDLHFCQUFxQixFQUNyQix5QkFBeUIsRUFDekIscUJBQXFCLEVBQ3JCLHlCQUF5QixFQUN6Qix1QkFBdUIsRUFDdkIseUJBQXlCLEVBTXpCLHNCQUFzQixFQUN0QixXQUFXLEVBQ1gsdUJBQXVCLEVBQ3ZCLG9CQUFvQixFQUNwQix3QkFBd0IsRUFDeEIsd0JBQXdCLEVBQ3hCLGtCQUFrQixFQUNsQix3QkFBd0IsRUFDeEIsbUJBQW1CLEVBQ25CLGVBQWUsRUFDZiwrQkFBK0IsRUFDL0IsK0JBQStCLEdBQ2hDLE1BQU0saUJBQWlCLENBQUM7QUFDekIsT0FBTyxFQUNMLHdCQUF3QixHQUV6QixNQUFNLDZDQUE2QyxDQUFD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"]},"metadata":{},"sourceType":"module"}