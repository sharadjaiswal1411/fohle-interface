{"ast":null,"code":"export var IdentifyOperation;\n(function (IdentifyOperation) {\n  // Base Operations to set values\n  IdentifyOperation[\"SET\"] = \"$set\";\n  IdentifyOperation[\"SET_ONCE\"] = \"$setOnce\";\n  // Operations around modifying existing values\n  IdentifyOperation[\"ADD\"] = \"$add\";\n  IdentifyOperation[\"APPEND\"] = \"$append\";\n  IdentifyOperation[\"PREPEND\"] = \"$prepend\";\n  IdentifyOperation[\"REMOVE\"] = \"$remove\";\n  // Operations around appending values *if* they aren't present\n  IdentifyOperation[\"PREINSERT\"] = \"$preInsert\";\n  IdentifyOperation[\"POSTINSERT\"] = \"$postInsert\";\n  // Operations around removing properties/values\n  IdentifyOperation[\"UNSET\"] = \"$unset\";\n  IdentifyOperation[\"CLEAR_ALL\"] = \"$clearAll\";\n})(IdentifyOperation || (IdentifyOperation = {}));\nexport var RevenueProperty;\n(function (RevenueProperty) {\n  RevenueProperty[\"REVENUE_PRODUCT_ID\"] = \"$productId\";\n  RevenueProperty[\"REVENUE_QUANTITY\"] = \"$quantity\";\n  RevenueProperty[\"REVENUE_PRICE\"] = \"$price\";\n  RevenueProperty[\"REVENUE_TYPE\"] = \"$revenueType\";\n  RevenueProperty[\"REVENUE\"] = \"$revenue\";\n})(RevenueProperty || (RevenueProperty = {}));\n/**\n * Strings that have special meaning when used as an event's type\n * and have different specifications.\n */\nexport var SpecialEventType;\n(function (SpecialEventType) {\n  SpecialEventType[\"IDENTIFY\"] = \"$identify\";\n  SpecialEventType[\"GROUP_IDENTIFY\"] = \"$groupidentify\";\n  SpecialEventType[\"REVENUE\"] = \"revenue_amount\";\n})(SpecialEventType || (SpecialEventType = {}));","map":{"version":3,"sources":["../../src/event.ts"],"names":[],"mappings":"AAgBA,OAAA,IAAY,iBAkBX;AAlBD,CAAA,UAAY,iBAAiB,EAAA;EAC3B;EACA,iBAAA,CAAA,KAAA,CAAA,GAAA,MAAY;EACZ,iBAAA,CAAA,UAAA,CAAA,GAAA,UAAqB;EAErB;EACA,iBAAA,CAAA,KAAA,CAAA,GAAA,MAAY;EACZ,iBAAA,CAAA,QAAA,CAAA,GAAA,SAAkB;EAClB,iBAAA,CAAA,SAAA,CAAA,GAAA,UAAoB;EACpB,iBAAA,CAAA,QAAA,CAAA,GAAA,SAAkB;EAElB;EACA,iBAAA,CAAA,WAAA,CAAA,GAAA,YAAwB;EACxB,iBAAA,CAAA,YAAA,CAAA,GAAA,aAA0B;EAE1B;EACA,iBAAA,CAAA,OAAA,CAAA,GAAA,QAAgB;EAChB,iBAAA,CAAA,WAAA,CAAA,GAAA,WAAuB;AACzB,CAAC,EAlBW,iBAAiB,KAAjB,iBAAiB,GAAA,CAAA,CAAA,CAAA,CAAA;AA4D7B,OAAA,IAAY,eAMX;AAND,CAAA,UAAY,eAAe,EAAA;EACzB,eAAA,CAAA,oBAAA,CAAA,GAAA,YAAiC;EACjC,eAAA,CAAA,kBAAA,CAAA,GAAA,WAA8B;EAC9B,eAAA,CAAA,eAAA,CAAA,GAAA,QAAwB;EACxB,eAAA,CAAA,cAAA,CAAA,GAAA,cAA6B;EAC7B,eAAA,CAAA,SAAA,CAAA,GAAA,UAAoB;AACtB,CAAC,EANW,eAAe,KAAf,eAAe,GAAA,CAAA,CAAA,CAAA,CAAA;AAiB3B;;;AAGG;AACH,OAAA,IAAY,gBAIX;AAJD,CAAA,UAAY,gBAAgB,EAAA;EAC1B,gBAAA,CAAA,UAAA,CAAA,GAAA,WAAsB;EACtB,gBAAA,CAAA,gBAAA,CAAA,GAAA,gBAAiC;EACjC,gBAAA,CAAA,SAAA,CAAA,GAAA,gBAA0B;AAC5B,CAAC,EAJW,gBAAgB,KAAhB,gBAAgB,GAAA,CAAA,CAAA,CAAA,CAAA","sourcesContent":["import { BaseEvent } from './base-event';\n\nexport interface Identify {\n  getUserProperties(): IdentifyUserProperties;\n  set(property: string, value: ValidPropertyType): Identify;\n  setOnce(property: string, value: ValidPropertyType): Identify;\n  append(property: string, value: ValidPropertyType): Identify;\n  prepend(property: string, value: ValidPropertyType): Identify;\n  postInsert(property: string, value: ValidPropertyType): Identify;\n  preInsert(property: string, value: ValidPropertyType): Identify;\n  remove(property: string, value: ValidPropertyType): Identify;\n  add(property: string, value: number): Identify;\n  unset(property: string): Identify;\n  clearAll(): Identify;\n}\n\nexport enum IdentifyOperation {\n  // Base Operations to set values\n  SET = '$set',\n  SET_ONCE = '$setOnce',\n\n  // Operations around modifying existing values\n  ADD = '$add',\n  APPEND = '$append',\n  PREPEND = '$prepend',\n  REMOVE = '$remove',\n\n  // Operations around appending values *if* they aren't present\n  PREINSERT = '$preInsert',\n  POSTINSERT = '$postInsert',\n\n  // Operations around removing properties/values\n  UNSET = '$unset',\n  CLEAR_ALL = '$clearAll',\n}\n\nexport type ValidPropertyType =\n  | number\n  | string\n  | boolean\n  | Array<string | number>\n  | { [key: string]: ValidPropertyType };\n\ninterface BaseOperationConfig {\n  [key: string]: ValidPropertyType;\n}\n\nexport interface IdentifyUserProperties {\n  // Add operations can only take numbers\n  [IdentifyOperation.ADD]?: { [key: string]: number };\n\n  // This reads the keys of the passed object, but the values are not used\n  [IdentifyOperation.UNSET]?: BaseOperationConfig;\n  // This option does not read the key as it unsets all user properties\n  [IdentifyOperation.CLEAR_ALL]?: any;\n\n  // These operations can take numbers, strings, or arrays of both.\n  [IdentifyOperation.SET]?: BaseOperationConfig;\n  [IdentifyOperation.SET_ONCE]?: BaseOperationConfig;\n  [IdentifyOperation.APPEND]?: BaseOperationConfig;\n  [IdentifyOperation.PREPEND]?: BaseOperationConfig;\n  [IdentifyOperation.POSTINSERT]?: BaseOperationConfig;\n  [IdentifyOperation.PREINSERT]?: BaseOperationConfig;\n  [IdentifyOperation.REMOVE]?: BaseOperationConfig;\n}\n\nexport interface Revenue {\n  getEventProperties(): RevenueEventProperties;\n  setProductId(productId: string): Revenue;\n  setQuantity(quantity: number): Revenue;\n  setPrice(price: number): Revenue;\n  setRevenueType(revenueType: string): Revenue;\n  setEventProperties(properties: { [key: string]: any }): Revenue;\n  setRevenue(revenue: number): Revenue;\n}\n\nexport enum RevenueProperty {\n  REVENUE_PRODUCT_ID = '$productId',\n  REVENUE_QUANTITY = '$quantity',\n  REVENUE_PRICE = '$price',\n  REVENUE_TYPE = '$revenueType',\n  REVENUE = '$revenue',\n}\n\nexport interface RevenueEventProperties {\n  [RevenueProperty.REVENUE_PRODUCT_ID]?: string;\n  [RevenueProperty.REVENUE_QUANTITY]?: number;\n  [RevenueProperty.REVENUE_PRICE]?: number;\n  [RevenueProperty.REVENUE_TYPE]?: string;\n  [RevenueProperty.REVENUE_TYPE]?: string;\n  [RevenueProperty.REVENUE]?: number;\n}\n\n/**\n * Strings that have special meaning when used as an event's type\n * and have different specifications.\n */\nexport enum SpecialEventType {\n  IDENTIFY = '$identify',\n  GROUP_IDENTIFY = '$groupidentify',\n  REVENUE = 'revenue_amount',\n}\n\nexport interface TrackEvent extends BaseEvent {\n  event_type: Exclude<string, SpecialEventType>;\n}\n\nexport interface IdentifyEvent extends BaseEvent {\n  event_type: SpecialEventType.IDENTIFY;\n  user_properties:\n    | IdentifyUserProperties\n    | {\n        [key in Exclude<string, IdentifyOperation>]: any;\n      };\n}\n\nexport interface GroupIdentifyEvent extends BaseEvent {\n  event_type: SpecialEventType.GROUP_IDENTIFY;\n  group_properties:\n    | IdentifyUserProperties\n    | {\n        [key in Exclude<string, IdentifyOperation>]: any;\n      };\n}\n\nexport interface RevenueEvent extends BaseEvent {\n  event_type: SpecialEventType.REVENUE;\n  event_properties:\n    | RevenueEventProperties\n    | {\n        [key: string]: any;\n      };\n}\n\nexport type Event = TrackEvent | IdentifyEvent | GroupIdentifyEvent | RevenueEvent;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}