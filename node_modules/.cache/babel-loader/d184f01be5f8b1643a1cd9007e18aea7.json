{"ast":null,"code":"import { getCurrentHub, addGlobalEventProcessor } from '@sentry/core';\nimport { isInstanceOf } from '@sentry/utils';\nimport { exceptionFromError } from '../eventbuilder.js';\nconst DEFAULT_KEY = 'cause';\nconst DEFAULT_LIMIT = 5;\n\n/** Adds SDK info to an event. */\nclass LinkedErrors {\n  /**\n   * @inheritDoc\n   */\n  static __initStatic() {\n    this.id = 'LinkedErrors';\n  }\n\n  /**\n   * @inheritDoc\n   */\n  __init() {\n    this.name = LinkedErrors.id;\n  }\n\n  /**\n   * @inheritDoc\n   */\n\n  /**\n   * @inheritDoc\n   */\n\n  /**\n   * @inheritDoc\n   */\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    ;\n    LinkedErrors.prototype.__init.call(this);\n    this._key = options.key || DEFAULT_KEY;\n    this._limit = options.limit || DEFAULT_LIMIT;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setupOnce() {\n    const client = getCurrentHub().getClient();\n    if (!client) {\n      return;\n    }\n    addGlobalEventProcessor((event, hint) => {\n      const self = getCurrentHub().getIntegration(LinkedErrors);\n      return self ? _handler(client.getOptions().stackParser, self._key, self._limit, event, hint) : event;\n    });\n  }\n}\nLinkedErrors.__initStatic();\n\n/**\n * @inheritDoc\n */\nfunction _handler(parser, key, limit, event, hint) {\n  if (!event.exception || !event.exception.values || !hint || !isInstanceOf(hint.originalException, Error)) {\n    return event;\n  }\n  const linkedErrors = _walkErrorTree(parser, limit, hint.originalException, key);\n  event.exception.values = [...linkedErrors, ...event.exception.values];\n  return event;\n}\n\n/**\n * JSDOC\n */\nfunction _walkErrorTree(parser, limit, error, key) {\n  let stack = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n  if (!isInstanceOf(error[key], Error) || stack.length + 1 >= limit) {\n    return stack;\n  }\n  const exception = exceptionFromError(parser, error[key]);\n  return _walkErrorTree(parser, limit, error[key], key, [exception, ...stack]);\n}\nexport { LinkedErrors, _handler, _walkErrorTree };","map":{"version":3,"sources":["../../../../src/integrations/linkederrors.ts"],"names":[],"mappings":";;;AAOA,MAAA,WAAA,GAAA,OAAA;AACA,MAAA,aAAA,GAAA,CAAA;;AAOA;AACA,MAAA,YAAA,CAAA;EACA;AACA;AACA;EACA,OAAA,YAAA,GAAA;IAAA,IAAA,CAAA,EAAA,GAAA,cAAA;EAAA;;EAEA;AACA;AACA;EACA,MAAA,GAAA;IAAA,IAAA,CAAA,IAAA,GAAA,YAAA,CAAA,EAAA;EAAA;;EAEA;AACA;AACA;;EAGA;AACA;AACA;;EAGA;AACA;AACA;EACA,WAAA,GAAA;IAAA,IAAA,OAAA,uEAAA,CAAA,CAAA;IAAA;IAAA,YAAA,CAAA,SAAA,CAAA,MAAA,CAAA,IAAA,CAAA,IAAA,CAAA;IACA,IAAA,CAAA,IAAA,GAAA,OAAA,CAAA,GAAA,IAAA,WAAA;IACA,IAAA,CAAA,MAAA,GAAA,OAAA,CAAA,KAAA,IAAA,aAAA;EACA;;EAEA;AACA;AACA;EACA,SAAA,GAAA;IACA,MAAA,MAAA,GAAA,aAAA,EAAA,CAAA,SAAA,EAAA;IACA,IAAA,CAAA,MAAA,EAAA;MACA;IACA;IACA,uBAAA,CAAA,CAAA,KAAA,EAAA,IAAA,KAAA;MACA,MAAA,IAAA,GAAA,aAAA,EAAA,CAAA,cAAA,CAAA,YAAA,CAAA;MACA,OAAA,IAAA,GAAA,QAAA,CAAA,MAAA,CAAA,UAAA,EAAA,CAAA,WAAA,EAAA,IAAA,CAAA,IAAA,EAAA,IAAA,CAAA,MAAA,EAAA,KAAA,EAAA,IAAA,CAAA,GAAA,KAAA;IACA,CAAA,CAAA;EACA;AACA;AAAA,YAAA,CAAA,YAAA,EAAA;;AAEA;AACA;AACA;AACA,SAAA,QAAA,CACA,MAAA,EACA,GAAA,EACA,KAAA,EACA,KAAA,EACA,IAAA,EACA;EACA,IAAA,CAAA,KAAA,CAAA,SAAA,IAAA,CAAA,KAAA,CAAA,SAAA,CAAA,MAAA,IAAA,CAAA,IAAA,IAAA,CAAA,YAAA,CAAA,IAAA,CAAA,iBAAA,EAAA,KAAA,CAAA,EAAA;IACA,OAAA,KAAA;EACA;EACA,MAAA,YAAA,GAAA,cAAA,CAAA,MAAA,EAAA,KAAA,EAAA,IAAA,CAAA,iBAAA,EAAA,GAAA,CAAA;EACA,KAAA,CAAA,SAAA,CAAA,MAAA,GAAA,CAAA,GAAA,YAAA,EAAA,GAAA,KAAA,CAAA,SAAA,CAAA,MAAA,CAAA;EACA,OAAA,KAAA;AACA;;AAEA;AACA;AACA;AACA,SAAA,cAAA,CACA,MAAA,EACA,KAAA,EACA,KAAA,EACA,GAAA,EAEA;EAAA,IADA,KAAA,uEAAA,EAAA;EAEA,IAAA,CAAA,YAAA,CAAA,KAAA,CAAA,GAAA,CAAA,EAAA,KAAA,CAAA,IAAA,KAAA,CAAA,MAAA,GAAA,CAAA,IAAA,KAAA,EAAA;IACA,OAAA,KAAA;EACA;EACA,MAAA,SAAA,GAAA,kBAAA,CAAA,MAAA,EAAA,KAAA,CAAA,GAAA,CAAA,CAAA;EACA,OAAA,cAAA,CAAA,MAAA,EAAA,KAAA,EAAA,KAAA,CAAA,GAAA,CAAA,EAAA,GAAA,EAAA,CAAA,SAAA,EAAA,GAAA,KAAA,CAAA,CAAA;AACA","sourcesContent":["import { addGlobalEventProcessor, getCurrentHub } from '@sentry/core';\nimport { Event, EventHint, Exception, ExtendedError, Integration, StackParser } from '@sentry/types';\nimport { isInstanceOf } from '@sentry/utils';\n\nimport { BrowserClient } from '../client';\nimport { exceptionFromError } from '../eventbuilder';\n\nconst DEFAULT_KEY = 'cause';\nconst DEFAULT_LIMIT = 5;\n\ninterface LinkedErrorsOptions {\n  key: string;\n  limit: number;\n}\n\n/** Adds SDK info to an event. */\nexport class LinkedErrors implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'LinkedErrors';\n\n  /**\n   * @inheritDoc\n   */\n  public readonly name: string = LinkedErrors.id;\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _key: LinkedErrorsOptions['key'];\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _limit: LinkedErrorsOptions['limit'];\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options: Partial<LinkedErrorsOptions> = {}) {\n    this._key = options.key || DEFAULT_KEY;\n    this._limit = options.limit || DEFAULT_LIMIT;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    const client = getCurrentHub().getClient<BrowserClient>();\n    if (!client) {\n      return;\n    }\n    addGlobalEventProcessor((event: Event, hint?: EventHint) => {\n      const self = getCurrentHub().getIntegration(LinkedErrors);\n      return self ? _handler(client.getOptions().stackParser, self._key, self._limit, event, hint) : event;\n    });\n  }\n}\n\n/**\n * @inheritDoc\n */\nexport function _handler(\n  parser: StackParser,\n  key: string,\n  limit: number,\n  event: Event,\n  hint?: EventHint,\n): Event | null {\n  if (!event.exception || !event.exception.values || !hint || !isInstanceOf(hint.originalException, Error)) {\n    return event;\n  }\n  const linkedErrors = _walkErrorTree(parser, limit, hint.originalException as ExtendedError, key);\n  event.exception.values = [...linkedErrors, ...event.exception.values];\n  return event;\n}\n\n/**\n * JSDOC\n */\nexport function _walkErrorTree(\n  parser: StackParser,\n  limit: number,\n  error: ExtendedError,\n  key: string,\n  stack: Exception[] = [],\n): Exception[] {\n  if (!isInstanceOf(error[key], Error) || stack.length + 1 >= limit) {\n    return stack;\n  }\n  const exception = exceptionFromError(parser, error[key]);\n  return _walkErrorTree(parser, limit, error[key], key, [exception, ...stack]);\n}\n"]},"metadata":{},"sourceType":"module"}