{"ast":null,"code":"var _jsxFileName = \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/components/swap/SwapModalFooter.tsx\",\n  _s = $RefreshSig$();\nimport { Trans } from \"@lingui/react\";\nimport { TraceEvent } from '@uniswap/analytics';\nimport { BrowserEvent, ElementName, EventName } from '@uniswap/analytics-events';\nimport useTransactionDeadline from 'hooks/useTransactionDeadline';\nimport { formatPercentInBasisPointsNumber, formatPercentNumber, formatToDecimal, getDurationFromDateMilliseconds, getDurationUntilTimestampSeconds, getTokenAddress } from 'lib/utils/analytics';\nimport { Text } from 'rebass';\nimport { useClientSideRouter, useUserSlippageTolerance } from 'state/user/hooks';\nimport { computeRealizedPriceImpact } from 'utils/prices';\nimport { ButtonError } from '../Button';\nimport { AutoRow } from '../Row';\nimport { SwapCallbackError } from './styleds';\nimport { getTokenPath } from './SwapRoute';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst formatRoutesEventProperties = routes => {\n  const routesEventProperties = {\n    routes_percentages: [],\n    routes_protocols: []\n  };\n  routes.forEach((route, index) => {\n    routesEventProperties['routes_percentages'].push(formatPercentNumber(route.percent));\n    routesEventProperties['routes_protocols'].push(route.protocol);\n    routesEventProperties[`route_${index}_input_currency_symbols`] = route.path.map(pathStep => {\n      var _pathStep$0$symbol;\n      return (_pathStep$0$symbol = pathStep[0].symbol) !== null && _pathStep$0$symbol !== void 0 ? _pathStep$0$symbol : '';\n    });\n    routesEventProperties[`route_${index}_output_currency_symbols`] = route.path.map(pathStep => {\n      var _pathStep$1$symbol;\n      return (_pathStep$1$symbol = pathStep[1].symbol) !== null && _pathStep$1$symbol !== void 0 ? _pathStep$1$symbol : '';\n    });\n    routesEventProperties[`route_${index}_input_currency_addresses`] = route.path.map(pathStep => getTokenAddress(pathStep[0]));\n    routesEventProperties[`route_${index}_output_currency_addresses`] = route.path.map(pathStep => getTokenAddress(pathStep[1]));\n    routesEventProperties[`route_${index}_fee_amounts_hundredths_of_bps`] = route.path.map(pathStep => pathStep[2]);\n  });\n  return routesEventProperties;\n};\nconst formatAnalyticsEventProperties = _ref => {\n  let {\n    trade,\n    hash,\n    allowedSlippage,\n    transactionDeadlineSecondsSinceEpoch,\n    isAutoSlippage,\n    isAutoRouterApi,\n    swapQuoteReceivedDate,\n    routes,\n    fiatValueInput,\n    fiatValueOutput\n  } = _ref;\n  return {\n    estimated_network_fee_usd: trade.gasUseEstimateUSD ? formatToDecimal(trade.gasUseEstimateUSD, 2) : undefined,\n    transaction_hash: hash,\n    transaction_deadline_seconds: getDurationUntilTimestampSeconds(transactionDeadlineSecondsSinceEpoch),\n    token_in_address: getTokenAddress(trade.inputAmount.currency),\n    token_out_address: getTokenAddress(trade.outputAmount.currency),\n    token_in_symbol: trade.inputAmount.currency.symbol,\n    token_out_symbol: trade.outputAmount.currency.symbol,\n    token_in_amount: formatToDecimal(trade.inputAmount, trade.inputAmount.currency.decimals),\n    token_out_amount: formatToDecimal(trade.outputAmount, trade.outputAmount.currency.decimals),\n    token_in_amount_usd: fiatValueInput ? parseFloat(fiatValueInput.toFixed(2)) : undefined,\n    token_out_amount_usd: fiatValueOutput ? parseFloat(fiatValueOutput.toFixed(2)) : undefined,\n    price_impact_basis_points: formatPercentInBasisPointsNumber(computeRealizedPriceImpact(trade)),\n    allowed_slippage_basis_points: formatPercentInBasisPointsNumber(allowedSlippage),\n    is_auto_router_api: isAutoRouterApi,\n    is_auto_slippage: isAutoSlippage,\n    chain_id: trade.inputAmount.currency.chainId === trade.outputAmount.currency.chainId ? trade.inputAmount.currency.chainId : undefined,\n    duration_from_first_quote_to_swap_submission_milliseconds: swapQuoteReceivedDate ? getDurationFromDateMilliseconds(swapQuoteReceivedDate) : undefined,\n    swap_quote_block_number: trade.blockNumber,\n    ...formatRoutesEventProperties(routes)\n  };\n};\nexport default function SwapModalFooter(_ref2) {\n  _s();\n  var _useTransactionDeadli;\n  let {\n    trade,\n    allowedSlippage,\n    hash,\n    onConfirm,\n    swapErrorMessage,\n    disabledConfirm,\n    swapQuoteReceivedDate,\n    fiatValueInput,\n    fiatValueOutput\n  } = _ref2;\n  const transactionDeadlineSecondsSinceEpoch = (_useTransactionDeadli = useTransactionDeadline()) === null || _useTransactionDeadli === void 0 ? void 0 : _useTransactionDeadli.toNumber(); // in seconds since epoch\n  const isAutoSlippage = useUserSlippageTolerance()[0] === 'auto';\n  const [clientSideRouter] = useClientSideRouter();\n  const routes = getTokenPath(trade);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(AutoRow, {\n      children: [/*#__PURE__*/_jsxDEV(TraceEvent, {\n        events: [BrowserEvent.onClick],\n        element: ElementName.CONFIRM_SWAP_BUTTON,\n        name: EventName.SWAP_SUBMITTED_BUTTON_CLICKED,\n        properties: formatAnalyticsEventProperties({\n          trade,\n          hash,\n          allowedSlippage,\n          transactionDeadlineSecondsSinceEpoch,\n          isAutoSlippage,\n          isAutoRouterApi: !clientSideRouter,\n          swapQuoteReceivedDate,\n          routes,\n          fiatValueInput,\n          fiatValueOutput\n        }),\n        children: /*#__PURE__*/_jsxDEV(ButtonError, {\n          onClick: onConfirm,\n          disabled: disabledConfirm,\n          style: {\n            margin: '10px 0 0 0'\n          },\n          id: ElementName.CONFIRM_SWAP_BUTTON,\n          children: /*#__PURE__*/_jsxDEV(Text, {\n            fontSize: 20,\n            fontWeight: 500,\n            children: /*#__PURE__*/_jsxDEV(Trans, {\n              id: \"Confirm Swap\"\n            }, void 0, false, void 0, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), swapErrorMessage ? /*#__PURE__*/_jsxDEV(SwapCallbackError, {\n        error: swapErrorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 29\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(SwapModalFooter, \"dZXpxunqLMoaNdP1yKay3773GOw=\", false, function () {\n  return [useTransactionDeadline, useUserSlippageTolerance, useClientSideRouter];\n});\n_c = SwapModalFooter;\nvar _c;\n$RefreshReg$(_c, \"SwapModalFooter\");","map":{"version":3,"names":["TraceEvent","BrowserEvent","ElementName","EventName","useTransactionDeadline","formatPercentInBasisPointsNumber","formatPercentNumber","formatToDecimal","getDurationFromDateMilliseconds","getDurationUntilTimestampSeconds","getTokenAddress","Text","useClientSideRouter","useUserSlippageTolerance","computeRealizedPriceImpact","ButtonError","AutoRow","SwapCallbackError","getTokenPath","formatRoutesEventProperties","routes","routesEventProperties","routes_percentages","routes_protocols","forEach","route","index","push","percent","protocol","path","map","pathStep","symbol","formatAnalyticsEventProperties","trade","hash","allowedSlippage","transactionDeadlineSecondsSinceEpoch","isAutoSlippage","isAutoRouterApi","swapQuoteReceivedDate","fiatValueInput","fiatValueOutput","estimated_network_fee_usd","gasUseEstimateUSD","undefined","transaction_hash","transaction_deadline_seconds","token_in_address","inputAmount","currency","token_out_address","outputAmount","token_in_symbol","token_out_symbol","token_in_amount","decimals","token_out_amount","token_in_amount_usd","parseFloat","toFixed","token_out_amount_usd","price_impact_basis_points","allowed_slippage_basis_points","is_auto_router_api","is_auto_slippage","chain_id","chainId","duration_from_first_quote_to_swap_submission_milliseconds","swap_quote_block_number","blockNumber","SwapModalFooter","onConfirm","swapErrorMessage","disabledConfirm","toNumber","clientSideRouter","onClick","CONFIRM_SWAP_BUTTON","SWAP_SUBMITTED_BUTTON_CLICKED","margin"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/components/swap/SwapModalFooter.tsx"],"sourcesContent":["import { Trans } from '@lingui/macro'\nimport { TraceEvent } from '@uniswap/analytics'\nimport { BrowserEvent, ElementName, EventName } from '@uniswap/analytics-events'\nimport { Currency, CurrencyAmount, Percent, Token, TradeType } from '@uniswap/sdk-core'\nimport useTransactionDeadline from 'hooks/useTransactionDeadline'\nimport {\n  formatPercentInBasisPointsNumber,\n  formatPercentNumber,\n  formatToDecimal,\n  getDurationFromDateMilliseconds,\n  getDurationUntilTimestampSeconds,\n  getTokenAddress,\n} from 'lib/utils/analytics'\nimport { ReactNode } from 'react'\nimport { Text } from 'rebass'\nimport { InterfaceTrade } from 'state/routing/types'\nimport { useClientSideRouter, useUserSlippageTolerance } from 'state/user/hooks'\nimport { computeRealizedPriceImpact } from 'utils/prices'\n\nimport { ButtonError } from '../Button'\nimport { AutoRow } from '../Row'\nimport { SwapCallbackError } from './styleds'\nimport { getTokenPath, RoutingDiagramEntry } from './SwapRoute'\n\ninterface AnalyticsEventProps {\n  trade: InterfaceTrade<Currency, Currency, TradeType>\n  hash: string | undefined\n  allowedSlippage: Percent\n  transactionDeadlineSecondsSinceEpoch: number | undefined\n  isAutoSlippage: boolean\n  isAutoRouterApi: boolean\n  swapQuoteReceivedDate: Date | undefined\n  routes: RoutingDiagramEntry[]\n  fiatValueInput?: CurrencyAmount<Token> | null\n  fiatValueOutput?: CurrencyAmount<Token> | null\n}\n\nconst formatRoutesEventProperties = (routes: RoutingDiagramEntry[]) => {\n  const routesEventProperties: Record<string, any[]> = {\n    routes_percentages: [],\n    routes_protocols: [],\n  }\n\n  routes.forEach((route, index) => {\n    routesEventProperties['routes_percentages'].push(formatPercentNumber(route.percent))\n    routesEventProperties['routes_protocols'].push(route.protocol)\n    routesEventProperties[`route_${index}_input_currency_symbols`] = route.path.map(\n      (pathStep) => pathStep[0].symbol ?? ''\n    )\n    routesEventProperties[`route_${index}_output_currency_symbols`] = route.path.map(\n      (pathStep) => pathStep[1].symbol ?? ''\n    )\n    routesEventProperties[`route_${index}_input_currency_addresses`] = route.path.map((pathStep) =>\n      getTokenAddress(pathStep[0])\n    )\n    routesEventProperties[`route_${index}_output_currency_addresses`] = route.path.map((pathStep) =>\n      getTokenAddress(pathStep[1])\n    )\n    routesEventProperties[`route_${index}_fee_amounts_hundredths_of_bps`] = route.path.map((pathStep) => pathStep[2])\n  })\n\n  return routesEventProperties\n}\n\nconst formatAnalyticsEventProperties = ({\n  trade,\n  hash,\n  allowedSlippage,\n  transactionDeadlineSecondsSinceEpoch,\n  isAutoSlippage,\n  isAutoRouterApi,\n  swapQuoteReceivedDate,\n  routes,\n  fiatValueInput,\n  fiatValueOutput,\n}: AnalyticsEventProps) => ({\n  estimated_network_fee_usd: trade.gasUseEstimateUSD ? formatToDecimal(trade.gasUseEstimateUSD, 2) : undefined,\n  transaction_hash: hash,\n  transaction_deadline_seconds: getDurationUntilTimestampSeconds(transactionDeadlineSecondsSinceEpoch),\n  token_in_address: getTokenAddress(trade.inputAmount.currency),\n  token_out_address: getTokenAddress(trade.outputAmount.currency),\n  token_in_symbol: trade.inputAmount.currency.symbol,\n  token_out_symbol: trade.outputAmount.currency.symbol,\n  token_in_amount: formatToDecimal(trade.inputAmount, trade.inputAmount.currency.decimals),\n  token_out_amount: formatToDecimal(trade.outputAmount, trade.outputAmount.currency.decimals),\n  token_in_amount_usd: fiatValueInput ? parseFloat(fiatValueInput.toFixed(2)) : undefined,\n  token_out_amount_usd: fiatValueOutput ? parseFloat(fiatValueOutput.toFixed(2)) : undefined,\n  price_impact_basis_points: formatPercentInBasisPointsNumber(computeRealizedPriceImpact(trade)),\n  allowed_slippage_basis_points: formatPercentInBasisPointsNumber(allowedSlippage),\n  is_auto_router_api: isAutoRouterApi,\n  is_auto_slippage: isAutoSlippage,\n  chain_id:\n    trade.inputAmount.currency.chainId === trade.outputAmount.currency.chainId\n      ? trade.inputAmount.currency.chainId\n      : undefined,\n  duration_from_first_quote_to_swap_submission_milliseconds: swapQuoteReceivedDate\n    ? getDurationFromDateMilliseconds(swapQuoteReceivedDate)\n    : undefined,\n  swap_quote_block_number: trade.blockNumber,\n  ...formatRoutesEventProperties(routes),\n})\n\nexport default function SwapModalFooter({\n  trade,\n  allowedSlippage,\n  hash,\n  onConfirm,\n  swapErrorMessage,\n  disabledConfirm,\n  swapQuoteReceivedDate,\n  fiatValueInput,\n  fiatValueOutput,\n}: {\n  trade: InterfaceTrade<Currency, Currency, TradeType>\n  hash: string | undefined\n  allowedSlippage: Percent\n  onConfirm: () => void\n  swapErrorMessage: ReactNode | undefined\n  disabledConfirm: boolean\n  swapQuoteReceivedDate: Date | undefined\n  fiatValueInput?: CurrencyAmount<Token> | null\n  fiatValueOutput?: CurrencyAmount<Token> | null\n}) {\n  const transactionDeadlineSecondsSinceEpoch = useTransactionDeadline()?.toNumber() // in seconds since epoch\n  const isAutoSlippage = useUserSlippageTolerance()[0] === 'auto'\n  const [clientSideRouter] = useClientSideRouter()\n  const routes = getTokenPath(trade)\n\n  return (\n    <>\n      <AutoRow>\n        <TraceEvent\n          events={[BrowserEvent.onClick]}\n          element={ElementName.CONFIRM_SWAP_BUTTON}\n          name={EventName.SWAP_SUBMITTED_BUTTON_CLICKED}\n          properties={formatAnalyticsEventProperties({\n            trade,\n            hash,\n            allowedSlippage,\n            transactionDeadlineSecondsSinceEpoch,\n            isAutoSlippage,\n            isAutoRouterApi: !clientSideRouter,\n            swapQuoteReceivedDate,\n            routes,\n            fiatValueInput,\n            fiatValueOutput,\n          })}\n        >\n          <ButtonError\n            onClick={onConfirm}\n            disabled={disabledConfirm}\n            style={{ margin: '10px 0 0 0' }}\n            id={ElementName.CONFIRM_SWAP_BUTTON}\n          >\n            <Text fontSize={20} fontWeight={500}>\n              <Trans>Confirm Swap</Trans>\n            </Text>\n          </ButtonError>\n        </TraceEvent>\n\n        {swapErrorMessage ? <SwapCallbackError error={swapErrorMessage} /> : null}\n      </AutoRow>\n    </>\n  )\n}\n"],"mappings":";;;AACA,SAASA,UAAU,QAAQ,oBAAoB;AAC/C,SAASC,YAAY,EAAEC,WAAW,EAAEC,SAAS,QAAQ,2BAA2B;AAEhF,OAAOC,sBAAsB,MAAM,8BAA8B;AACjE,SACEC,gCAAgC,EAChCC,mBAAmB,EACnBC,eAAe,EACfC,+BAA+B,EAC/BC,gCAAgC,EAChCC,eAAe,QACV,qBAAqB;AAE5B,SAASC,IAAI,QAAQ,QAAQ;AAE7B,SAASC,mBAAmB,EAAEC,wBAAwB,QAAQ,kBAAkB;AAChF,SAASC,0BAA0B,QAAQ,cAAc;AAEzD,SAASC,WAAW,QAAQ,WAAW;AACvC,SAASC,OAAO,QAAQ,QAAQ;AAChC,SAASC,iBAAiB,QAAQ,WAAW;AAC7C,SAASC,YAAY,QAA6B,aAAa;AAAA;AAAA;AAe/D,MAAMC,2BAA2B,GAAIC,MAA6B,IAAK;EACrE,MAAMC,qBAA4C,GAAG;IACnDC,kBAAkB,EAAE,EAAE;IACtBC,gBAAgB,EAAE;EACpB,CAAC;EAEDH,MAAM,CAACI,OAAO,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAK;IAC/BL,qBAAqB,CAAC,oBAAoB,CAAC,CAACM,IAAI,CAACrB,mBAAmB,CAACmB,KAAK,CAACG,OAAO,CAAC,CAAC;IACpFP,qBAAqB,CAAC,kBAAkB,CAAC,CAACM,IAAI,CAACF,KAAK,CAACI,QAAQ,CAAC;IAC9DR,qBAAqB,CAAE,SAAQK,KAAM,yBAAwB,CAAC,GAAGD,KAAK,CAACK,IAAI,CAACC,GAAG,CAC5EC,QAAQ;MAAA;MAAA,6BAAKA,QAAQ,CAAC,CAAC,CAAC,CAACC,MAAM,mEAAI,EAAE;IAAA,EACvC;IACDZ,qBAAqB,CAAE,SAAQK,KAAM,0BAAyB,CAAC,GAAGD,KAAK,CAACK,IAAI,CAACC,GAAG,CAC7EC,QAAQ;MAAA;MAAA,6BAAKA,QAAQ,CAAC,CAAC,CAAC,CAACC,MAAM,mEAAI,EAAE;IAAA,EACvC;IACDZ,qBAAqB,CAAE,SAAQK,KAAM,2BAA0B,CAAC,GAAGD,KAAK,CAACK,IAAI,CAACC,GAAG,CAAEC,QAAQ,IACzFtB,eAAe,CAACsB,QAAQ,CAAC,CAAC,CAAC,CAAC,CAC7B;IACDX,qBAAqB,CAAE,SAAQK,KAAM,4BAA2B,CAAC,GAAGD,KAAK,CAACK,IAAI,CAACC,GAAG,CAAEC,QAAQ,IAC1FtB,eAAe,CAACsB,QAAQ,CAAC,CAAC,CAAC,CAAC,CAC7B;IACDX,qBAAqB,CAAE,SAAQK,KAAM,gCAA+B,CAAC,GAAGD,KAAK,CAACK,IAAI,CAACC,GAAG,CAAEC,QAAQ,IAAKA,QAAQ,CAAC,CAAC,CAAC,CAAC;EACnH,CAAC,CAAC;EAEF,OAAOX,qBAAqB;AAC9B,CAAC;AAED,MAAMa,8BAA8B,GAAG;EAAA,IAAC;IACtCC,KAAK;IACLC,IAAI;IACJC,eAAe;IACfC,oCAAoC;IACpCC,cAAc;IACdC,eAAe;IACfC,qBAAqB;IACrBrB,MAAM;IACNsB,cAAc;IACdC;EACmB,CAAC;EAAA,OAAM;IAC1BC,yBAAyB,EAAET,KAAK,CAACU,iBAAiB,GAAGtC,eAAe,CAAC4B,KAAK,CAACU,iBAAiB,EAAE,CAAC,CAAC,GAAGC,SAAS;IAC5GC,gBAAgB,EAAEX,IAAI;IACtBY,4BAA4B,EAAEvC,gCAAgC,CAAC6B,oCAAoC,CAAC;IACpGW,gBAAgB,EAAEvC,eAAe,CAACyB,KAAK,CAACe,WAAW,CAACC,QAAQ,CAAC;IAC7DC,iBAAiB,EAAE1C,eAAe,CAACyB,KAAK,CAACkB,YAAY,CAACF,QAAQ,CAAC;IAC/DG,eAAe,EAAEnB,KAAK,CAACe,WAAW,CAACC,QAAQ,CAAClB,MAAM;IAClDsB,gBAAgB,EAAEpB,KAAK,CAACkB,YAAY,CAACF,QAAQ,CAAClB,MAAM;IACpDuB,eAAe,EAAEjD,eAAe,CAAC4B,KAAK,CAACe,WAAW,EAAEf,KAAK,CAACe,WAAW,CAACC,QAAQ,CAACM,QAAQ,CAAC;IACxFC,gBAAgB,EAAEnD,eAAe,CAAC4B,KAAK,CAACkB,YAAY,EAAElB,KAAK,CAACkB,YAAY,CAACF,QAAQ,CAACM,QAAQ,CAAC;IAC3FE,mBAAmB,EAAEjB,cAAc,GAAGkB,UAAU,CAAClB,cAAc,CAACmB,OAAO,CAAC,CAAC,CAAC,CAAC,GAAGf,SAAS;IACvFgB,oBAAoB,EAAEnB,eAAe,GAAGiB,UAAU,CAACjB,eAAe,CAACkB,OAAO,CAAC,CAAC,CAAC,CAAC,GAAGf,SAAS;IAC1FiB,yBAAyB,EAAE1D,gCAAgC,CAACS,0BAA0B,CAACqB,KAAK,CAAC,CAAC;IAC9F6B,6BAA6B,EAAE3D,gCAAgC,CAACgC,eAAe,CAAC;IAChF4B,kBAAkB,EAAEzB,eAAe;IACnC0B,gBAAgB,EAAE3B,cAAc;IAChC4B,QAAQ,EACNhC,KAAK,CAACe,WAAW,CAACC,QAAQ,CAACiB,OAAO,KAAKjC,KAAK,CAACkB,YAAY,CAACF,QAAQ,CAACiB,OAAO,GACtEjC,KAAK,CAACe,WAAW,CAACC,QAAQ,CAACiB,OAAO,GAClCtB,SAAS;IACfuB,yDAAyD,EAAE5B,qBAAqB,GAC5EjC,+BAA+B,CAACiC,qBAAqB,CAAC,GACtDK,SAAS;IACbwB,uBAAuB,EAAEnC,KAAK,CAACoC,WAAW;IAC1C,GAAGpD,2BAA2B,CAACC,MAAM;EACvC,CAAC;AAAA,CAAC;AAEF,eAAe,SAASoD,eAAe,QAoBpC;EAAA;EAAA;EAAA,IApBqC;IACtCrC,KAAK;IACLE,eAAe;IACfD,IAAI;IACJqC,SAAS;IACTC,gBAAgB;IAChBC,eAAe;IACflC,qBAAqB;IACrBC,cAAc;IACdC;EAWF,CAAC;EACC,MAAML,oCAAoC,4BAAGlC,sBAAsB,EAAE,0DAAxB,sBAA0BwE,QAAQ,EAAE,EAAC;EAClF,MAAMrC,cAAc,GAAG1B,wBAAwB,EAAE,CAAC,CAAC,CAAC,KAAK,MAAM;EAC/D,MAAM,CAACgE,gBAAgB,CAAC,GAAGjE,mBAAmB,EAAE;EAChD,MAAMQ,MAAM,GAAGF,YAAY,CAACiB,KAAK,CAAC;EAElC,oBACE;IAAA,uBACE,QAAC,OAAO;MAAA,wBACN,QAAC,UAAU;QACT,MAAM,EAAE,CAAClC,YAAY,CAAC6E,OAAO,CAAE;QAC/B,OAAO,EAAE5E,WAAW,CAAC6E,mBAAoB;QACzC,IAAI,EAAE5E,SAAS,CAAC6E,6BAA8B;QAC9C,UAAU,EAAE9C,8BAA8B,CAAC;UACzCC,KAAK;UACLC,IAAI;UACJC,eAAe;UACfC,oCAAoC;UACpCC,cAAc;UACdC,eAAe,EAAE,CAACqC,gBAAgB;UAClCpC,qBAAqB;UACrBrB,MAAM;UACNsB,cAAc;UACdC;QACF,CAAC,CAAE;QAAA,uBAEH,QAAC,WAAW;UACV,OAAO,EAAE8B,SAAU;UACnB,QAAQ,EAAEE,eAAgB;UAC1B,KAAK,EAAE;YAAEM,MAAM,EAAE;UAAa,CAAE;UAChC,EAAE,EAAE/E,WAAW,CAAC6E,mBAAoB;UAAA,uBAEpC,QAAC,IAAI;YAAC,QAAQ,EAAE,EAAG;YAAC,UAAU,EAAE,GAAI;YAAA,uBAClC;cAAA;YAAA;UAA2B;YAAA;YAAA;YAAA;UAAA;QACtB;UAAA;UAAA;UAAA;QAAA;MACK;QAAA;QAAA;QAAA;MAAA,QACH,EAEZL,gBAAgB,gBAAG,QAAC,iBAAiB;QAAC,KAAK,EAAEA;MAAiB;QAAA;QAAA;QAAA;MAAA,QAAG,GAAG,IAAI;IAAA;MAAA;MAAA;MAAA;IAAA;EACjE,iBACT;AAEP;AAAC,GA9DuBF,eAAe;EAAA,QAqBQpE,sBAAsB,EAC5CS,wBAAwB,EACpBD,mBAAmB;AAAA;AAAA,KAvBxB4D,eAAe;AAAA;AAAA"},"metadata":{},"sourceType":"module"}