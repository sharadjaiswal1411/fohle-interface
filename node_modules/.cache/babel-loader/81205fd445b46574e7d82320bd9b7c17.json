{"ast":null,"code":"import{isAddress}from'@ethersproject/address';/**\n * Shortens an Ethereum address by N characters\n * @param address blockchain address\n * @param charsStart amount of character to shorten (from both ends / in the beginning)\n * @param charsEnd amount of characters to shorten in the end\n * @returns formatted string\n */export function shortenAddress(address){var charsStart=arguments.length>1&&arguments[1]!==undefined?arguments[1]:4;var charsEnd=arguments.length>2?arguments[2]:undefined;var parsed=isAddress(address);if(!parsed)throw Error(\"Invalid 'address' parameter '\".concat(address,\"'.\"));return\"\".concat(address.substring(0,charsStart+2),\"...\").concat(address.substring(42-(charsEnd||charsStart)));}","map":{"version":3,"names":["isAddress","shortenAddress","address","charsStart","charsEnd","parsed","Error","substring"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/nft/utils/address.ts"],"sourcesContent":["import { isAddress } from '@ethersproject/address'\n\n/**\n * Shortens an Ethereum address by N characters\n * @param address blockchain address\n * @param charsStart amount of character to shorten (from both ends / in the beginning)\n * @param charsEnd amount of characters to shorten in the end\n * @returns formatted string\n */\nexport function shortenAddress(address: string, charsStart = 4, charsEnd?: number): string {\n  const parsed = isAddress(address)\n  if (!parsed) throw Error(`Invalid 'address' parameter '${address}'.`)\n\n  return `${address.substring(0, charsStart + 2)}...${address.substring(42 - (charsEnd || charsStart))}`\n}\n"],"mappings":"AAAA,OAASA,SAAS,KAAQ,wBAAwB,CAElD;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAASC,eAAc,CAACC,OAAe,CAA6C,IAA3CC,WAAU,2DAAG,CAAC,IAAEC,SAAiB,2CAC/E,GAAMC,OAAM,CAAGL,SAAS,CAACE,OAAO,CAAC,CACjC,GAAI,CAACG,MAAM,CAAE,KAAMC,MAAK,wCAAiCJ,OAAO,OAAK,CAErE,gBAAUA,OAAO,CAACK,SAAS,CAAC,CAAC,CAAEJ,UAAU,CAAG,CAAC,CAAC,eAAMD,OAAO,CAACK,SAAS,CAAC,EAAE,EAAIH,QAAQ,EAAID,UAAU,CAAC,CAAC,EACtG"},"metadata":{},"sourceType":"module"}