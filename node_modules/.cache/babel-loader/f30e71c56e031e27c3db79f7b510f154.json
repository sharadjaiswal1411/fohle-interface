{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.extendErrors = exports.resetErrorsCount = exports.reportExtraError = exports.reportError = exports.keyword$DataError = exports.keywordError = void 0;\nconst codegen_1 = require(\"./codegen\");\nconst util_1 = require(\"./util\");\nconst names_1 = require(\"./names\");\nexports.keywordError = {\n  message: _ref => {\n    let {\n      keyword\n    } = _ref;\n    return (0, codegen_1.str)`must pass \"${keyword}\" keyword validation`;\n  }\n};\nexports.keyword$DataError = {\n  message: _ref2 => {\n    let {\n      keyword,\n      schemaType\n    } = _ref2;\n    return schemaType ? (0, codegen_1.str)`\"${keyword}\" keyword must be ${schemaType} ($data)` : (0, codegen_1.str)`\"${keyword}\" keyword is invalid ($data)`;\n  }\n};\nfunction reportError(cxt) {\n  let error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : exports.keywordError;\n  let errorPaths = arguments.length > 2 ? arguments[2] : undefined;\n  let overrideAllErrors = arguments.length > 3 ? arguments[3] : undefined;\n  const {\n    it\n  } = cxt;\n  const {\n    gen,\n    compositeRule,\n    allErrors\n  } = it;\n  const errObj = errorObjectCode(cxt, error, errorPaths);\n  if (overrideAllErrors !== null && overrideAllErrors !== void 0 ? overrideAllErrors : compositeRule || allErrors) {\n    addError(gen, errObj);\n  } else {\n    returnErrors(it, (0, codegen_1._)`[${errObj}]`);\n  }\n}\nexports.reportError = reportError;\nfunction reportExtraError(cxt) {\n  let error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : exports.keywordError;\n  let errorPaths = arguments.length > 2 ? arguments[2] : undefined;\n  const {\n    it\n  } = cxt;\n  const {\n    gen,\n    compositeRule,\n    allErrors\n  } = it;\n  const errObj = errorObjectCode(cxt, error, errorPaths);\n  addError(gen, errObj);\n  if (!(compositeRule || allErrors)) {\n    returnErrors(it, names_1.default.vErrors);\n  }\n}\nexports.reportExtraError = reportExtraError;\nfunction resetErrorsCount(gen, errsCount) {\n  gen.assign(names_1.default.errors, errsCount);\n  gen.if((0, codegen_1._)`${names_1.default.vErrors} !== null`, () => gen.if(errsCount, () => gen.assign((0, codegen_1._)`${names_1.default.vErrors}.length`, errsCount), () => gen.assign(names_1.default.vErrors, null)));\n}\nexports.resetErrorsCount = resetErrorsCount;\nfunction extendErrors(_ref3) {\n  let {\n    gen,\n    keyword,\n    schemaValue,\n    data,\n    errsCount,\n    it\n  } = _ref3;\n  /* istanbul ignore if */\n  if (errsCount === undefined) throw new Error(\"ajv implementation error\");\n  const err = gen.name(\"err\");\n  gen.forRange(\"i\", errsCount, names_1.default.errors, i => {\n    gen.const(err, (0, codegen_1._)`${names_1.default.vErrors}[${i}]`);\n    gen.if((0, codegen_1._)`${err}.instancePath === undefined`, () => gen.assign((0, codegen_1._)`${err}.instancePath`, (0, codegen_1.strConcat)(names_1.default.instancePath, it.errorPath)));\n    gen.assign((0, codegen_1._)`${err}.schemaPath`, (0, codegen_1.str)`${it.errSchemaPath}/${keyword}`);\n    if (it.opts.verbose) {\n      gen.assign((0, codegen_1._)`${err}.schema`, schemaValue);\n      gen.assign((0, codegen_1._)`${err}.data`, data);\n    }\n  });\n}\nexports.extendErrors = extendErrors;\nfunction addError(gen, errObj) {\n  const err = gen.const(\"err\", errObj);\n  gen.if((0, codegen_1._)`${names_1.default.vErrors} === null`, () => gen.assign(names_1.default.vErrors, (0, codegen_1._)`[${err}]`), (0, codegen_1._)`${names_1.default.vErrors}.push(${err})`);\n  gen.code((0, codegen_1._)`${names_1.default.errors}++`);\n}\nfunction returnErrors(it, errs) {\n  const {\n    gen,\n    validateName,\n    schemaEnv\n  } = it;\n  if (schemaEnv.$async) {\n    gen.throw((0, codegen_1._)`new ${it.ValidationError}(${errs})`);\n  } else {\n    gen.assign((0, codegen_1._)`${validateName}.errors`, errs);\n    gen.return(false);\n  }\n}\nconst E = {\n  keyword: new codegen_1.Name(\"keyword\"),\n  schemaPath: new codegen_1.Name(\"schemaPath\"),\n  params: new codegen_1.Name(\"params\"),\n  propertyName: new codegen_1.Name(\"propertyName\"),\n  message: new codegen_1.Name(\"message\"),\n  schema: new codegen_1.Name(\"schema\"),\n  parentSchema: new codegen_1.Name(\"parentSchema\")\n};\nfunction errorObjectCode(cxt, error, errorPaths) {\n  const {\n    createErrors\n  } = cxt.it;\n  if (createErrors === false) return (0, codegen_1._)`{}`;\n  return errorObject(cxt, error, errorPaths);\n}\nfunction errorObject(cxt, error) {\n  let errorPaths = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const {\n    gen,\n    it\n  } = cxt;\n  const keyValues = [errorInstancePath(it, errorPaths), errorSchemaPath(cxt, errorPaths)];\n  extraErrorProps(cxt, error, keyValues);\n  return gen.object(...keyValues);\n}\nfunction errorInstancePath(_ref4, _ref5) {\n  let {\n    errorPath\n  } = _ref4;\n  let {\n    instancePath\n  } = _ref5;\n  const instPath = instancePath ? (0, codegen_1.str)`${errorPath}${(0, util_1.getErrorPath)(instancePath, util_1.Type.Str)}` : errorPath;\n  return [names_1.default.instancePath, (0, codegen_1.strConcat)(names_1.default.instancePath, instPath)];\n}\nfunction errorSchemaPath(_ref6, _ref7) {\n  let {\n    keyword,\n    it: {\n      errSchemaPath\n    }\n  } = _ref6;\n  let {\n    schemaPath,\n    parentSchema\n  } = _ref7;\n  let schPath = parentSchema ? errSchemaPath : (0, codegen_1.str)`${errSchemaPath}/${keyword}`;\n  if (schemaPath) {\n    schPath = (0, codegen_1.str)`${schPath}${(0, util_1.getErrorPath)(schemaPath, util_1.Type.Str)}`;\n  }\n  return [E.schemaPath, schPath];\n}\nfunction extraErrorProps(cxt, _ref8, keyValues) {\n  let {\n    params,\n    message\n  } = _ref8;\n  const {\n    keyword,\n    data,\n    schemaValue,\n    it\n  } = cxt;\n  const {\n    opts,\n    propertyName,\n    topSchemaRef,\n    schemaPath\n  } = it;\n  keyValues.push([E.keyword, keyword], [E.params, typeof params == \"function\" ? params(cxt) : params || (0, codegen_1._)`{}`]);\n  if (opts.messages) {\n    keyValues.push([E.message, typeof message == \"function\" ? message(cxt) : message]);\n  }\n  if (opts.verbose) {\n    keyValues.push([E.schema, schemaValue], [E.parentSchema, (0, codegen_1._)`${topSchemaRef}${schemaPath}`], [names_1.default.data, data]);\n  }\n  if (propertyName) keyValues.push([E.propertyName, propertyName]);\n}","map":{"version":3,"sources":["../../lib/compile/errors.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.extendErrors = exports.resetErrorsCount = exports.reportExtraError = exports.reportError = exports.keyword$DataError = exports.keywordError = void 0;\nconst codegen_1 = require(\"./codegen\");\nconst util_1 = require(\"./util\");\nconst names_1 = require(\"./names\");\nexports.keywordError = {\n    message: ({ keyword }) => (0, codegen_1.str) `must pass \"${keyword}\" keyword validation`,\n};\nexports.keyword$DataError = {\n    message: ({ keyword, schemaType }) => schemaType\n        ? (0, codegen_1.str) `\"${keyword}\" keyword must be ${schemaType} ($data)`\n        : (0, codegen_1.str) `\"${keyword}\" keyword is invalid ($data)`,\n};\nfunction reportError(cxt, error = exports.keywordError, errorPaths, overrideAllErrors) {\n    const { it } = cxt;\n    const { gen, compositeRule, allErrors } = it;\n    const errObj = errorObjectCode(cxt, error, errorPaths);\n    if (overrideAllErrors !== null && overrideAllErrors !== void 0 ? overrideAllErrors : (compositeRule || allErrors)) {\n        addError(gen, errObj);\n    }\n    else {\n        returnErrors(it, (0, codegen_1._) `[${errObj}]`);\n    }\n}\nexports.reportError = reportError;\nfunction reportExtraError(cxt, error = exports.keywordError, errorPaths) {\n    const { it } = cxt;\n    const { gen, compositeRule, allErrors } = it;\n    const errObj = errorObjectCode(cxt, error, errorPaths);\n    addError(gen, errObj);\n    if (!(compositeRule || allErrors)) {\n        returnErrors(it, names_1.default.vErrors);\n    }\n}\nexports.reportExtraError = reportExtraError;\nfunction resetErrorsCount(gen, errsCount) {\n    gen.assign(names_1.default.errors, errsCount);\n    gen.if((0, codegen_1._) `${names_1.default.vErrors} !== null`, () => gen.if(errsCount, () => gen.assign((0, codegen_1._) `${names_1.default.vErrors}.length`, errsCount), () => gen.assign(names_1.default.vErrors, null)));\n}\nexports.resetErrorsCount = resetErrorsCount;\nfunction extendErrors({ gen, keyword, schemaValue, data, errsCount, it, }) {\n    /* istanbul ignore if */\n    if (errsCount === undefined)\n        throw new Error(\"ajv implementation error\");\n    const err = gen.name(\"err\");\n    gen.forRange(\"i\", errsCount, names_1.default.errors, (i) => {\n        gen.const(err, (0, codegen_1._) `${names_1.default.vErrors}[${i}]`);\n        gen.if((0, codegen_1._) `${err}.instancePath === undefined`, () => gen.assign((0, codegen_1._) `${err}.instancePath`, (0, codegen_1.strConcat)(names_1.default.instancePath, it.errorPath)));\n        gen.assign((0, codegen_1._) `${err}.schemaPath`, (0, codegen_1.str) `${it.errSchemaPath}/${keyword}`);\n        if (it.opts.verbose) {\n            gen.assign((0, codegen_1._) `${err}.schema`, schemaValue);\n            gen.assign((0, codegen_1._) `${err}.data`, data);\n        }\n    });\n}\nexports.extendErrors = extendErrors;\nfunction addError(gen, errObj) {\n    const err = gen.const(\"err\", errObj);\n    gen.if((0, codegen_1._) `${names_1.default.vErrors} === null`, () => gen.assign(names_1.default.vErrors, (0, codegen_1._) `[${err}]`), (0, codegen_1._) `${names_1.default.vErrors}.push(${err})`);\n    gen.code((0, codegen_1._) `${names_1.default.errors}++`);\n}\nfunction returnErrors(it, errs) {\n    const { gen, validateName, schemaEnv } = it;\n    if (schemaEnv.$async) {\n        gen.throw((0, codegen_1._) `new ${it.ValidationError}(${errs})`);\n    }\n    else {\n        gen.assign((0, codegen_1._) `${validateName}.errors`, errs);\n        gen.return(false);\n    }\n}\nconst E = {\n    keyword: new codegen_1.Name(\"keyword\"),\n    schemaPath: new codegen_1.Name(\"schemaPath\"),\n    params: new codegen_1.Name(\"params\"),\n    propertyName: new codegen_1.Name(\"propertyName\"),\n    message: new codegen_1.Name(\"message\"),\n    schema: new codegen_1.Name(\"schema\"),\n    parentSchema: new codegen_1.Name(\"parentSchema\"),\n};\nfunction errorObjectCode(cxt, error, errorPaths) {\n    const { createErrors } = cxt.it;\n    if (createErrors === false)\n        return (0, codegen_1._) `{}`;\n    return errorObject(cxt, error, errorPaths);\n}\nfunction errorObject(cxt, error, errorPaths = {}) {\n    const { gen, it } = cxt;\n    const keyValues = [\n        errorInstancePath(it, errorPaths),\n        errorSchemaPath(cxt, errorPaths),\n    ];\n    extraErrorProps(cxt, error, keyValues);\n    return gen.object(...keyValues);\n}\nfunction errorInstancePath({ errorPath }, { instancePath }) {\n    const instPath = instancePath\n        ? (0, codegen_1.str) `${errorPath}${(0, util_1.getErrorPath)(instancePath, util_1.Type.Str)}`\n        : errorPath;\n    return [names_1.default.instancePath, (0, codegen_1.strConcat)(names_1.default.instancePath, instPath)];\n}\nfunction errorSchemaPath({ keyword, it: { errSchemaPath } }, { schemaPath, parentSchema }) {\n    let schPath = parentSchema ? errSchemaPath : (0, codegen_1.str) `${errSchemaPath}/${keyword}`;\n    if (schemaPath) {\n        schPath = (0, codegen_1.str) `${schPath}${(0, util_1.getErrorPath)(schemaPath, util_1.Type.Str)}`;\n    }\n    return [E.schemaPath, schPath];\n}\nfunction extraErrorProps(cxt, { params, message }, keyValues) {\n    const { keyword, data, schemaValue, it } = cxt;\n    const { opts, propertyName, topSchemaRef, schemaPath } = it;\n    keyValues.push([E.keyword, keyword], [E.params, typeof params == \"function\" ? params(cxt) : params || (0, codegen_1._) `{}`]);\n    if (opts.messages) {\n        keyValues.push([E.message, typeof message == \"function\" ? message(cxt) : message]);\n    }\n    if (opts.verbose) {\n        keyValues.push([E.schema, schemaValue], [E.parentSchema, (0, codegen_1._) `${topSchemaRef}${schemaPath}`], [names_1.default.data, data]);\n    }\n    if (propertyName)\n        keyValues.push([E.propertyName, propertyName]);\n}\n//# sourceMappingURL=errors.js.map"]},"metadata":{},"sourceType":"script"}