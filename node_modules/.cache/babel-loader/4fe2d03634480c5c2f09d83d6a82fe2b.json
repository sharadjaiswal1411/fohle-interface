{"ast":null,"code":"import _slicedToArray from\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{Interface}from'@ethersproject/abi';import{CurrencyAmount}from'@uniswap/sdk-core';import{useWeb3React}from'@web3-react/core';import ERC20ABI from'abis/erc20.json';import JSBI from'jsbi';import{useMultipleContractSingleData,useSingleContractMultipleData}from'lib/hooks/multicall';import{useMemo}from'react';import{nativeOnChain}from'../../constants/tokens';import{useInterfaceMulticall}from'../../hooks/useContract';import{isAddress}from'../../utils';/**\n * Returns a map of the given addresses to their eventually consistent ETH balances.\n */export function useNativeCurrencyBalances(uncheckedAddresses){var _useWeb3React=useWeb3React(),chainId=_useWeb3React.chainId;var multicallContract=useInterfaceMulticall();var validAddressInputs=useMemo(function(){return uncheckedAddresses?uncheckedAddresses.map(isAddress).filter(function(a){return a!==false;}).sort().map(function(addr){return[addr];}):[];},[uncheckedAddresses]);var results=useSingleContractMultipleData(multicallContract,'getEthBalance',validAddressInputs);return useMemo(function(){return validAddressInputs.reduce(function(memo,_ref,i){var _results$i,_results$i$result;var _ref2=_slicedToArray(_ref,1),address=_ref2[0];var value=results===null||results===void 0?void 0:(_results$i=results[i])===null||_results$i===void 0?void 0:(_results$i$result=_results$i.result)===null||_results$i$result===void 0?void 0:_results$i$result[0];if(value&&chainId)memo[address]=CurrencyAmount.fromRawAmount(nativeOnChain(chainId),JSBI.BigInt(value.toString()));return memo;},{});},[validAddressInputs,chainId,results]);}var ERC20Interface=new Interface(ERC20ABI);var tokenBalancesGasRequirement={gasRequired:185000};/**\n * Returns a map of token addresses to their eventually consistent token balances for a single account.\n */export function useTokenBalancesWithLoadingIndicator(address,tokens){var _useWeb3React2=useWeb3React(),chainId=_useWeb3React2.chainId;// we cannot fetch balances cross-chain\nvar validatedTokens=useMemo(function(){var _tokens$filter;return(_tokens$filter=tokens===null||tokens===void 0?void 0:tokens.filter(function(t){return isAddress(t===null||t===void 0?void 0:t.address)!==false&&(t===null||t===void 0?void 0:t.chainId)===chainId;}))!==null&&_tokens$filter!==void 0?_tokens$filter:[];},[chainId,tokens]);var validatedTokenAddresses=useMemo(function(){return validatedTokens.map(function(vt){return vt.address;});},[validatedTokens]);var balances=useMultipleContractSingleData(validatedTokenAddresses,ERC20Interface,'balanceOf',useMemo(function(){return[address];},[address]),tokenBalancesGasRequirement);var anyLoading=useMemo(function(){return balances.some(function(callState){return callState.loading;});},[balances]);return useMemo(function(){return[address&&validatedTokens.length>0?validatedTokens.reduce(function(memo,token,i){var _balances$i,_balances$i$result;var value=balances===null||balances===void 0?void 0:(_balances$i=balances[i])===null||_balances$i===void 0?void 0:(_balances$i$result=_balances$i.result)===null||_balances$i$result===void 0?void 0:_balances$i$result[0];var amount=value?JSBI.BigInt(value.toString()):undefined;if(amount){memo[token.address]=CurrencyAmount.fromRawAmount(token,amount);}return memo;},{}):{},anyLoading];},[address,validatedTokens,anyLoading,balances]);}export function useTokenBalances(address,tokens){return useTokenBalancesWithLoadingIndicator(address,tokens)[0];}// get the balance for a single token/account combo\nexport function useTokenBalance(account,token){var tokenBalances=useTokenBalances(account,useMemo(function(){return[token];},[token]));if(!token)return undefined;return tokenBalances[token.address];}export function useCurrencyBalances(account,currencies){var tokens=useMemo(function(){var _currencies$filter;return(_currencies$filter=currencies===null||currencies===void 0?void 0:currencies.filter(function(currency){var _currency$isToken;return(_currency$isToken=currency===null||currency===void 0?void 0:currency.isToken)!==null&&_currency$isToken!==void 0?_currency$isToken:false;}))!==null&&_currencies$filter!==void 0?_currencies$filter:[];},[currencies]);var _useWeb3React3=useWeb3React(),chainId=_useWeb3React3.chainId;var tokenBalances=useTokenBalances(account,tokens);var containsETH=useMemo(function(){var _currencies$some;return(_currencies$some=currencies===null||currencies===void 0?void 0:currencies.some(function(currency){return currency===null||currency===void 0?void 0:currency.isNative;}))!==null&&_currencies$some!==void 0?_currencies$some:false;},[currencies]);var ethBalance=useNativeCurrencyBalances(useMemo(function(){return containsETH?[account]:[];},[containsETH,account]));return useMemo(function(){var _currencies$map;return(_currencies$map=currencies===null||currencies===void 0?void 0:currencies.map(function(currency){if(!account||!currency||currency.chainId!==chainId)return undefined;if(currency.isToken)return tokenBalances[currency.address];if(currency.isNative)return ethBalance[account];return undefined;}))!==null&&_currencies$map!==void 0?_currencies$map:[];},[account,chainId,currencies,ethBalance,tokenBalances]);}export default function useCurrencyBalance(account,currency){return useCurrencyBalances(account,useMemo(function(){return[currency];},[currency]))[0];}export function useCurrencyBalanceString(account){var _useNativeCurrencyBal,_useNativeCurrencyBal2,_useNativeCurrencyBal3;return(_useNativeCurrencyBal=(_useNativeCurrencyBal2=useNativeCurrencyBalances(account?[account]:[]))===null||_useNativeCurrencyBal2===void 0?void 0:(_useNativeCurrencyBal3=_useNativeCurrencyBal2[account!==null&&account!==void 0?account:''])===null||_useNativeCurrencyBal3===void 0?void 0:_useNativeCurrencyBal3.toSignificant(3))!==null&&_useNativeCurrencyBal!==void 0?_useNativeCurrencyBal:'';}","map":{"version":3,"names":["Interface","CurrencyAmount","useWeb3React","ERC20ABI","JSBI","useMultipleContractSingleData","useSingleContractMultipleData","useMemo","nativeOnChain","useInterfaceMulticall","isAddress","useNativeCurrencyBalances","uncheckedAddresses","chainId","multicallContract","validAddressInputs","map","filter","a","sort","addr","results","reduce","memo","i","address","value","result","fromRawAmount","BigInt","toString","ERC20Interface","tokenBalancesGasRequirement","gasRequired","useTokenBalancesWithLoadingIndicator","tokens","validatedTokens","t","validatedTokenAddresses","vt","balances","anyLoading","some","callState","loading","length","token","amount","undefined","useTokenBalances","useTokenBalance","account","tokenBalances","useCurrencyBalances","currencies","currency","isToken","containsETH","isNative","ethBalance","useCurrencyBalance","useCurrencyBalanceString","toSignificant"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/lib/hooks/useCurrencyBalance.ts"],"sourcesContent":["import { Interface } from '@ethersproject/abi'\nimport { Currency, CurrencyAmount, Token } from '@uniswap/sdk-core'\nimport { useWeb3React } from '@web3-react/core'\nimport ERC20ABI from 'abis/erc20.json'\nimport { Erc20Interface } from 'abis/types/Erc20'\nimport JSBI from 'jsbi'\nimport { useMultipleContractSingleData, useSingleContractMultipleData } from 'lib/hooks/multicall'\nimport { useMemo } from 'react'\n\nimport { nativeOnChain } from '../../constants/tokens'\nimport { useInterfaceMulticall } from '../../hooks/useContract'\nimport { isAddress } from '../../utils'\n\n/**\n * Returns a map of the given addresses to their eventually consistent ETH balances.\n */\nexport function useNativeCurrencyBalances(uncheckedAddresses?: (string | undefined)[]): {\n  [address: string]: CurrencyAmount<Currency> | undefined\n} {\n  const { chainId } = useWeb3React()\n  const multicallContract = useInterfaceMulticall()\n\n  const validAddressInputs: [string][] = useMemo(\n    () =>\n      uncheckedAddresses\n        ? uncheckedAddresses\n            .map(isAddress)\n            .filter((a): a is string => a !== false)\n            .sort()\n            .map((addr) => [addr])\n        : [],\n    [uncheckedAddresses]\n  )\n\n  const results = useSingleContractMultipleData(multicallContract, 'getEthBalance', validAddressInputs)\n\n  return useMemo(\n    () =>\n      validAddressInputs.reduce<{ [address: string]: CurrencyAmount<Currency> }>((memo, [address], i) => {\n        const value = results?.[i]?.result?.[0]\n        if (value && chainId)\n          memo[address] = CurrencyAmount.fromRawAmount(nativeOnChain(chainId), JSBI.BigInt(value.toString()))\n        return memo\n      }, {}),\n    [validAddressInputs, chainId, results]\n  )\n}\n\nconst ERC20Interface = new Interface(ERC20ABI) as Erc20Interface\nconst tokenBalancesGasRequirement = { gasRequired: 185_000 }\n\n/**\n * Returns a map of token addresses to their eventually consistent token balances for a single account.\n */\nexport function useTokenBalancesWithLoadingIndicator(\n  address?: string,\n  tokens?: (Token | undefined)[]\n): [{ [tokenAddress: string]: CurrencyAmount<Token> | undefined }, boolean] {\n  const { chainId } = useWeb3React() // we cannot fetch balances cross-chain\n  const validatedTokens: Token[] = useMemo(\n    () => tokens?.filter((t?: Token): t is Token => isAddress(t?.address) !== false && t?.chainId === chainId) ?? [],\n    [chainId, tokens]\n  )\n  const validatedTokenAddresses = useMemo(() => validatedTokens.map((vt) => vt.address), [validatedTokens])\n\n  const balances = useMultipleContractSingleData(\n    validatedTokenAddresses,\n    ERC20Interface,\n    'balanceOf',\n    useMemo(() => [address], [address]),\n    tokenBalancesGasRequirement\n  )\n\n  const anyLoading: boolean = useMemo(() => balances.some((callState) => callState.loading), [balances])\n\n  return useMemo(\n    () => [\n      address && validatedTokens.length > 0\n        ? validatedTokens.reduce<{ [tokenAddress: string]: CurrencyAmount<Token> | undefined }>((memo, token, i) => {\n            const value = balances?.[i]?.result?.[0]\n            const amount = value ? JSBI.BigInt(value.toString()) : undefined\n            if (amount) {\n              memo[token.address] = CurrencyAmount.fromRawAmount(token, amount)\n            }\n            return memo\n          }, {})\n        : {},\n      anyLoading,\n    ],\n    [address, validatedTokens, anyLoading, balances]\n  )\n}\n\nexport function useTokenBalances(\n  address?: string,\n  tokens?: (Token | undefined)[]\n): { [tokenAddress: string]: CurrencyAmount<Token> | undefined } {\n  return useTokenBalancesWithLoadingIndicator(address, tokens)[0]\n}\n\n// get the balance for a single token/account combo\nexport function useTokenBalance(account?: string, token?: Token): CurrencyAmount<Token> | undefined {\n  const tokenBalances = useTokenBalances(\n    account,\n    useMemo(() => [token], [token])\n  )\n  if (!token) return undefined\n  return tokenBalances[token.address]\n}\n\nexport function useCurrencyBalances(\n  account?: string,\n  currencies?: (Currency | undefined)[]\n): (CurrencyAmount<Currency> | undefined)[] {\n  const tokens = useMemo(\n    () => currencies?.filter((currency): currency is Token => currency?.isToken ?? false) ?? [],\n    [currencies]\n  )\n\n  const { chainId } = useWeb3React()\n  const tokenBalances = useTokenBalances(account, tokens)\n  const containsETH: boolean = useMemo(() => currencies?.some((currency) => currency?.isNative) ?? false, [currencies])\n  const ethBalance = useNativeCurrencyBalances(useMemo(() => (containsETH ? [account] : []), [containsETH, account]))\n\n  return useMemo(\n    () =>\n      currencies?.map((currency) => {\n        if (!account || !currency || currency.chainId !== chainId) return undefined\n        if (currency.isToken) return tokenBalances[currency.address]\n        if (currency.isNative) return ethBalance[account]\n        return undefined\n      }) ?? [],\n    [account, chainId, currencies, ethBalance, tokenBalances]\n  )\n}\n\nexport default function useCurrencyBalance(\n  account?: string,\n  currency?: Currency\n): CurrencyAmount<Currency> | undefined {\n  return useCurrencyBalances(\n    account,\n    useMemo(() => [currency], [currency])\n  )[0]\n}\n\nexport function useCurrencyBalanceString(account: string): string {\n  return useNativeCurrencyBalances(account ? [account] : [])?.[account ?? '']?.toSignificant(3) ?? ''\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}