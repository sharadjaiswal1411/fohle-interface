{"ast":null,"code":"import { Protocol } from '@uniswap/router-sdk';\nimport { TradeType } from '@uniswap/sdk-core';\nimport { Pool } from '@uniswap/v3-sdk';\nimport _ from 'lodash';\nimport { CurrencyAmount } from '../../../util/amounts';\nimport { routeToString } from '../../../util/routes';\n/**\n * Represents a quote for swapping on a V2 only route. Contains all information\n * such as the route used, the amount specified by the user, the type of quote\n * (exact in or exact out), the quote itself, and gas estimates.\n *\n * @export\n * @class V2RouteWithValidQuote\n */\nexport class V2RouteWithValidQuote {\n  constructor(_ref) {\n    let {\n      amount,\n      rawQuote,\n      percent,\n      route,\n      gasModel,\n      quoteToken,\n      tradeType,\n      v2PoolProvider\n    } = _ref;\n    this.protocol = Protocol.V2;\n    this.amount = amount;\n    this.rawQuote = rawQuote;\n    this.quote = CurrencyAmount.fromRawAmount(quoteToken, rawQuote.toString());\n    this.percent = percent;\n    this.route = route;\n    this.gasModel = gasModel;\n    this.quoteToken = quoteToken;\n    this.tradeType = tradeType;\n    const {\n      gasEstimate,\n      gasCostInToken,\n      gasCostInUSD\n    } = this.gasModel.estimateGasCost(this);\n    this.gasCostInToken = gasCostInToken;\n    this.gasCostInUSD = gasCostInUSD;\n    this.gasEstimate = gasEstimate;\n    // If its exact out, we need to request *more* of the input token to account for the gas.\n    if (this.tradeType == TradeType.EXACT_INPUT) {\n      const quoteGasAdjusted = this.quote.subtract(gasCostInToken);\n      this.quoteAdjustedForGas = quoteGasAdjusted;\n    } else {\n      const quoteGasAdjusted = this.quote.add(gasCostInToken);\n      this.quoteAdjustedForGas = quoteGasAdjusted;\n    }\n    this.poolAddresses = _.map(route.pairs, p => v2PoolProvider.getPoolAddress(p.token0, p.token1).poolAddress);\n    this.tokenPath = this.route.path;\n  }\n  toString() {\n    return `${this.percent.toFixed(2)}% QuoteGasAdj[${this.quoteAdjustedForGas.toExact()}] Quote[${this.quote.toExact()}] Gas[${this.gasEstimate.toString()}] = ${routeToString(this.route)}`;\n  }\n}\n/**\n * Represents a quote for swapping on a V3 only route. Contains all information\n * such as the route used, the amount specified by the user, the type of quote\n * (exact in or exact out), the quote itself, and gas estimates.\n *\n * @export\n * @class V3RouteWithValidQuote\n */\nexport class V3RouteWithValidQuote {\n  constructor(_ref2) {\n    let {\n      amount,\n      rawQuote,\n      sqrtPriceX96AfterList,\n      initializedTicksCrossedList,\n      quoterGasEstimate,\n      percent,\n      route,\n      gasModel,\n      quoteToken,\n      tradeType,\n      v3PoolProvider\n    } = _ref2;\n    this.protocol = Protocol.V3;\n    this.amount = amount;\n    this.rawQuote = rawQuote;\n    this.sqrtPriceX96AfterList = sqrtPriceX96AfterList;\n    this.initializedTicksCrossedList = initializedTicksCrossedList;\n    this.quoterGasEstimate = quoterGasEstimate;\n    this.quote = CurrencyAmount.fromRawAmount(quoteToken, rawQuote.toString());\n    this.percent = percent;\n    this.route = route;\n    this.gasModel = gasModel;\n    this.quoteToken = quoteToken;\n    this.tradeType = tradeType;\n    const {\n      gasEstimate,\n      gasCostInToken,\n      gasCostInUSD\n    } = this.gasModel.estimateGasCost(this);\n    this.gasCostInToken = gasCostInToken;\n    this.gasCostInUSD = gasCostInUSD;\n    this.gasEstimate = gasEstimate;\n    // If its exact out, we need to request *more* of the input token to account for the gas.\n    if (this.tradeType == TradeType.EXACT_INPUT) {\n      const quoteGasAdjusted = this.quote.subtract(gasCostInToken);\n      this.quoteAdjustedForGas = quoteGasAdjusted;\n    } else {\n      const quoteGasAdjusted = this.quote.add(gasCostInToken);\n      this.quoteAdjustedForGas = quoteGasAdjusted;\n    }\n    this.poolAddresses = _.map(route.pools, p => v3PoolProvider.getPoolAddress(p.token0, p.token1, p.fee).poolAddress);\n    this.tokenPath = this.route.tokenPath;\n  }\n  toString() {\n    return `${this.percent.toFixed(2)}% QuoteGasAdj[${this.quoteAdjustedForGas.toExact()}] Quote[${this.quote.toExact()}] Gas[${this.gasEstimate.toString()}] = ${routeToString(this.route)}`;\n  }\n}\n/**\n * Represents a quote for swapping on a Mixed Route. Contains all information\n * such as the route used, the amount specified by the user, the type of quote\n * (exact in or exact out), the quote itself, and gas estimates.\n *\n * @export\n * @class MixedRouteWithValidQuote\n */\nexport class MixedRouteWithValidQuote {\n  constructor(_ref3) {\n    let {\n      amount,\n      rawQuote,\n      sqrtPriceX96AfterList,\n      initializedTicksCrossedList,\n      quoterGasEstimate,\n      percent,\n      route,\n      mixedRouteGasModel,\n      quoteToken,\n      tradeType,\n      v3PoolProvider,\n      v2PoolProvider\n    } = _ref3;\n    this.protocol = Protocol.MIXED;\n    this.amount = amount;\n    this.rawQuote = rawQuote;\n    this.sqrtPriceX96AfterList = sqrtPriceX96AfterList;\n    this.initializedTicksCrossedList = initializedTicksCrossedList;\n    this.quoterGasEstimate = quoterGasEstimate;\n    this.quote = CurrencyAmount.fromRawAmount(quoteToken, rawQuote.toString());\n    this.percent = percent;\n    this.route = route;\n    this.gasModel = mixedRouteGasModel;\n    this.quoteToken = quoteToken;\n    this.tradeType = tradeType;\n    const {\n      gasEstimate,\n      gasCostInToken,\n      gasCostInUSD\n    } = this.gasModel.estimateGasCost(this);\n    this.gasCostInToken = gasCostInToken;\n    this.gasCostInUSD = gasCostInUSD;\n    this.gasEstimate = gasEstimate;\n    // If its exact out, we need to request *more* of the input token to account for the gas.\n    if (this.tradeType == TradeType.EXACT_INPUT) {\n      const quoteGasAdjusted = this.quote.subtract(gasCostInToken);\n      this.quoteAdjustedForGas = quoteGasAdjusted;\n    } else {\n      const quoteGasAdjusted = this.quote.add(gasCostInToken);\n      this.quoteAdjustedForGas = quoteGasAdjusted;\n    }\n    this.poolAddresses = _.map(route.pools, p => {\n      return p instanceof Pool ? v3PoolProvider.getPoolAddress(p.token0, p.token1, p.fee).poolAddress : v2PoolProvider.getPoolAddress(p.token0, p.token1).poolAddress;\n    });\n    this.tokenPath = this.route.path;\n  }\n  toString() {\n    return `${this.percent.toFixed(2)}% QuoteGasAdj[${this.quoteAdjustedForGas.toExact()}] Quote[${this.quote.toExact()}] Gas[${this.gasEstimate.toString()}] = ${routeToString(this.route)}`;\n  }\n}","map":{"version":3,"sources":["../../../../../src/routers/alpha-router/entities/route-with-valid-quote.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Protocol } from '@uniswap/router-sdk';\nimport { TradeType } from '@uniswap/sdk-core';\nimport { Pool } from '@uniswap/v3-sdk';\nimport _ from 'lodash';\nimport { CurrencyAmount } from '../../../util/amounts';\nimport { routeToString } from '../../../util/routes';\n/**\n * Represents a quote for swapping on a V2 only route. Contains all information\n * such as the route used, the amount specified by the user, the type of quote\n * (exact in or exact out), the quote itself, and gas estimates.\n *\n * @export\n * @class V2RouteWithValidQuote\n */\nexport class V2RouteWithValidQuote {\n    constructor({ amount, rawQuote, percent, route, gasModel, quoteToken, tradeType, v2PoolProvider, }) {\n        this.protocol = Protocol.V2;\n        this.amount = amount;\n        this.rawQuote = rawQuote;\n        this.quote = CurrencyAmount.fromRawAmount(quoteToken, rawQuote.toString());\n        this.percent = percent;\n        this.route = route;\n        this.gasModel = gasModel;\n        this.quoteToken = quoteToken;\n        this.tradeType = tradeType;\n        const { gasEstimate, gasCostInToken, gasCostInUSD } = this.gasModel.estimateGasCost(this);\n        this.gasCostInToken = gasCostInToken;\n        this.gasCostInUSD = gasCostInUSD;\n        this.gasEstimate = gasEstimate;\n        // If its exact out, we need to request *more* of the input token to account for the gas.\n        if (this.tradeType == TradeType.EXACT_INPUT) {\n            const quoteGasAdjusted = this.quote.subtract(gasCostInToken);\n            this.quoteAdjustedForGas = quoteGasAdjusted;\n        }\n        else {\n            const quoteGasAdjusted = this.quote.add(gasCostInToken);\n            this.quoteAdjustedForGas = quoteGasAdjusted;\n        }\n        this.poolAddresses = _.map(route.pairs, (p) => v2PoolProvider.getPoolAddress(p.token0, p.token1).poolAddress);\n        this.tokenPath = this.route.path;\n    }\n    toString() {\n        return `${this.percent.toFixed(2)}% QuoteGasAdj[${this.quoteAdjustedForGas.toExact()}] Quote[${this.quote.toExact()}] Gas[${this.gasEstimate.toString()}] = ${routeToString(this.route)}`;\n    }\n}\n/**\n * Represents a quote for swapping on a V3 only route. Contains all information\n * such as the route used, the amount specified by the user, the type of quote\n * (exact in or exact out), the quote itself, and gas estimates.\n *\n * @export\n * @class V3RouteWithValidQuote\n */\nexport class V3RouteWithValidQuote {\n    constructor({ amount, rawQuote, sqrtPriceX96AfterList, initializedTicksCrossedList, quoterGasEstimate, percent, route, gasModel, quoteToken, tradeType, v3PoolProvider, }) {\n        this.protocol = Protocol.V3;\n        this.amount = amount;\n        this.rawQuote = rawQuote;\n        this.sqrtPriceX96AfterList = sqrtPriceX96AfterList;\n        this.initializedTicksCrossedList = initializedTicksCrossedList;\n        this.quoterGasEstimate = quoterGasEstimate;\n        this.quote = CurrencyAmount.fromRawAmount(quoteToken, rawQuote.toString());\n        this.percent = percent;\n        this.route = route;\n        this.gasModel = gasModel;\n        this.quoteToken = quoteToken;\n        this.tradeType = tradeType;\n        const { gasEstimate, gasCostInToken, gasCostInUSD } = this.gasModel.estimateGasCost(this);\n        this.gasCostInToken = gasCostInToken;\n        this.gasCostInUSD = gasCostInUSD;\n        this.gasEstimate = gasEstimate;\n        // If its exact out, we need to request *more* of the input token to account for the gas.\n        if (this.tradeType == TradeType.EXACT_INPUT) {\n            const quoteGasAdjusted = this.quote.subtract(gasCostInToken);\n            this.quoteAdjustedForGas = quoteGasAdjusted;\n        }\n        else {\n            const quoteGasAdjusted = this.quote.add(gasCostInToken);\n            this.quoteAdjustedForGas = quoteGasAdjusted;\n        }\n        this.poolAddresses = _.map(route.pools, (p) => v3PoolProvider.getPoolAddress(p.token0, p.token1, p.fee).poolAddress);\n        this.tokenPath = this.route.tokenPath;\n    }\n    toString() {\n        return `${this.percent.toFixed(2)}% QuoteGasAdj[${this.quoteAdjustedForGas.toExact()}] Quote[${this.quote.toExact()}] Gas[${this.gasEstimate.toString()}] = ${routeToString(this.route)}`;\n    }\n}\n/**\n * Represents a quote for swapping on a Mixed Route. Contains all information\n * such as the route used, the amount specified by the user, the type of quote\n * (exact in or exact out), the quote itself, and gas estimates.\n *\n * @export\n * @class MixedRouteWithValidQuote\n */\nexport class MixedRouteWithValidQuote {\n    constructor({ amount, rawQuote, sqrtPriceX96AfterList, initializedTicksCrossedList, quoterGasEstimate, percent, route, mixedRouteGasModel, quoteToken, tradeType, v3PoolProvider, v2PoolProvider, }) {\n        this.protocol = Protocol.MIXED;\n        this.amount = amount;\n        this.rawQuote = rawQuote;\n        this.sqrtPriceX96AfterList = sqrtPriceX96AfterList;\n        this.initializedTicksCrossedList = initializedTicksCrossedList;\n        this.quoterGasEstimate = quoterGasEstimate;\n        this.quote = CurrencyAmount.fromRawAmount(quoteToken, rawQuote.toString());\n        this.percent = percent;\n        this.route = route;\n        this.gasModel = mixedRouteGasModel;\n        this.quoteToken = quoteToken;\n        this.tradeType = tradeType;\n        const { gasEstimate, gasCostInToken, gasCostInUSD } = this.gasModel.estimateGasCost(this);\n        this.gasCostInToken = gasCostInToken;\n        this.gasCostInUSD = gasCostInUSD;\n        this.gasEstimate = gasEstimate;\n        // If its exact out, we need to request *more* of the input token to account for the gas.\n        if (this.tradeType == TradeType.EXACT_INPUT) {\n            const quoteGasAdjusted = this.quote.subtract(gasCostInToken);\n            this.quoteAdjustedForGas = quoteGasAdjusted;\n        }\n        else {\n            const quoteGasAdjusted = this.quote.add(gasCostInToken);\n            this.quoteAdjustedForGas = quoteGasAdjusted;\n        }\n        this.poolAddresses = _.map(route.pools, (p) => {\n            return p instanceof Pool\n                ? v3PoolProvider.getPoolAddress(p.token0, p.token1, p.fee).poolAddress\n                : v2PoolProvider.getPoolAddress(p.token0, p.token1).poolAddress;\n        });\n        this.tokenPath = this.route.path;\n    }\n    toString() {\n        return `${this.percent.toFixed(2)}% QuoteGasAdj[${this.quoteAdjustedForGas.toExact()}] Quote[${this.quote.toExact()}] Gas[${this.gasEstimate.toString()}] = ${routeToString(this.route)}`;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGUtd2l0aC12YWxpZC1xdW90ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9yb3V0ZXJzL2FscGhhLXJvdXRlci9lbnRpdGllcy9yb3V0ZS13aXRoLXZhbGlkLXF1b3RlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUMvQyxPQUFPLEVBQVMsU0FBUyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDckQsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3ZDLE9BQU8sQ0FBQyxNQUFNLFFBQVEsQ0FBQztBQUl2QixPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDdkQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBMERyRDs7Ozs7OztHQU9HO0FBQ0gsTUFBTSxPQUFPLHFCQUFxQjtJQTBCaEMsWUFBWSxFQUNWLE1BQU0sRUFDTixRQUFRLEVBQ1IsT0FBTyxFQUNQLEtBQUssRUFDTCxRQUFRLEVBQ1IsVUFBVSxFQUNWLFNBQVMsRUFDVCxjQUFjLEdBQ2M7UUFsQ2QsYUFBUSxHQUFHLFFBQVEsQ0FBQyxFQUFFLENBQUM7UUFtQ3JDLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxLQUFLLEdBQUcsY0FBYyxDQUFDLGFBQWEsQ0FBQyxVQUFVLEVBQUUsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFDM0UsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7UUFDdkIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7UUFDekIsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7UUFD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"]},"metadata":{},"sourceType":"module"}