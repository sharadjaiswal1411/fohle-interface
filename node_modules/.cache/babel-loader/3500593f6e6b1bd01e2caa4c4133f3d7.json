{"ast":null,"code":"import { ApolloClient, ApolloLink, concat, HttpLink, InMemoryCache } from '@apollo/client';\nimport { SupportedChainId } from 'constants/chains';\nimport store from '../../state/index';\nconst CHAIN_SUBGRAPH_URL = {\n  [SupportedChainId.MAINNET]: 'https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v3',\n  [SupportedChainId.RINKEBY]: 'https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v3',\n  [SupportedChainId.ARBITRUM_ONE]: 'https://api.thegraph.com/subgraphs/name/ianlapham/arbitrum-minimal',\n  [SupportedChainId.OPTIMISM]: 'https://api.thegraph.com/subgraphs/name/ianlapham/optimism-post-regenesis',\n  [SupportedChainId.POLYGON]: 'https://api.thegraph.com/subgraphs/name/ianlapham/uniswap-v3-polygon',\n  [SupportedChainId.CELO]: 'https://api.thegraph.com/subgraphs/name/jesse-sawa/uniswap-celo'\n};\nconst httpLink = new HttpLink({\n  uri: CHAIN_SUBGRAPH_URL[SupportedChainId.MAINNET]\n});\n\n// This middleware will allow us to dynamically update the uri for the requests based off chainId\n// For more information: https://www.apollographql.com/docs/react/networking/advanced-http-networking/\nconst authMiddleware = new ApolloLink((operation, forward) => {\n  // add the authorization to the headers\n  const chainId = store.getState().application.chainId;\n  operation.setContext(() => ({\n    uri: chainId && CHAIN_SUBGRAPH_URL[chainId] ? CHAIN_SUBGRAPH_URL[chainId] : CHAIN_SUBGRAPH_URL[SupportedChainId.MAINNET]\n  }));\n  return forward(operation);\n});\nexport const apolloClient = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: concat(authMiddleware, httpLink)\n});","map":{"version":3,"names":["ApolloClient","ApolloLink","concat","HttpLink","InMemoryCache","SupportedChainId","store","CHAIN_SUBGRAPH_URL","MAINNET","RINKEBY","ARBITRUM_ONE","OPTIMISM","POLYGON","CELO","httpLink","uri","authMiddleware","operation","forward","chainId","getState","application","setContext","apolloClient","cache","link"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/graphql/thegraph/apollo.ts"],"sourcesContent":["import { ApolloClient, ApolloLink, concat, HttpLink, InMemoryCache } from '@apollo/client'\nimport { SupportedChainId } from 'constants/chains'\n\nimport store, { AppState } from '../../state/index'\n\nconst CHAIN_SUBGRAPH_URL: Record<number, string> = {\n  [SupportedChainId.MAINNET]: 'https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v3',\n  [SupportedChainId.RINKEBY]: 'https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v3',\n\n  [SupportedChainId.ARBITRUM_ONE]: 'https://api.thegraph.com/subgraphs/name/ianlapham/arbitrum-minimal',\n\n  [SupportedChainId.OPTIMISM]: 'https://api.thegraph.com/subgraphs/name/ianlapham/optimism-post-regenesis',\n\n  [SupportedChainId.POLYGON]: 'https://api.thegraph.com/subgraphs/name/ianlapham/uniswap-v3-polygon',\n\n  [SupportedChainId.CELO]: 'https://api.thegraph.com/subgraphs/name/jesse-sawa/uniswap-celo',\n}\n\nconst httpLink = new HttpLink({ uri: CHAIN_SUBGRAPH_URL[SupportedChainId.MAINNET] })\n\n// This middleware will allow us to dynamically update the uri for the requests based off chainId\n// For more information: https://www.apollographql.com/docs/react/networking/advanced-http-networking/\nconst authMiddleware = new ApolloLink((operation, forward) => {\n  // add the authorization to the headers\n  const chainId = (store.getState() as AppState).application.chainId\n\n  operation.setContext(() => ({\n    uri:\n      chainId && CHAIN_SUBGRAPH_URL[chainId]\n        ? CHAIN_SUBGRAPH_URL[chainId]\n        : CHAIN_SUBGRAPH_URL[SupportedChainId.MAINNET],\n  }))\n\n  return forward(operation)\n})\n\nexport const apolloClient = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: concat(authMiddleware, httpLink),\n})\n"],"mappings":"AAAA,SAASA,YAAY,EAAEC,UAAU,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,aAAa,QAAQ,gBAAgB;AAC1F,SAASC,gBAAgB,QAAQ,kBAAkB;AAEnD,OAAOC,KAAK,MAAoB,mBAAmB;AAEnD,MAAMC,kBAA0C,GAAG;EACjD,CAACF,gBAAgB,CAACG,OAAO,GAAG,4DAA4D;EACxF,CAACH,gBAAgB,CAACI,OAAO,GAAG,4DAA4D;EAExF,CAACJ,gBAAgB,CAACK,YAAY,GAAG,oEAAoE;EAErG,CAACL,gBAAgB,CAACM,QAAQ,GAAG,2EAA2E;EAExG,CAACN,gBAAgB,CAACO,OAAO,GAAG,sEAAsE;EAElG,CAACP,gBAAgB,CAACQ,IAAI,GAAG;AAC3B,CAAC;AAED,MAAMC,QAAQ,GAAG,IAAIX,QAAQ,CAAC;EAAEY,GAAG,EAAER,kBAAkB,CAACF,gBAAgB,CAACG,OAAO;AAAE,CAAC,CAAC;;AAEpF;AACA;AACA,MAAMQ,cAAc,GAAG,IAAIf,UAAU,CAAC,CAACgB,SAAS,EAAEC,OAAO,KAAK;EAC5D;EACA,MAAMC,OAAO,GAAIb,KAAK,CAACc,QAAQ,EAAE,CAAcC,WAAW,CAACF,OAAO;EAElEF,SAAS,CAACK,UAAU,CAAC,OAAO;IAC1BP,GAAG,EACDI,OAAO,IAAIZ,kBAAkB,CAACY,OAAO,CAAC,GAClCZ,kBAAkB,CAACY,OAAO,CAAC,GAC3BZ,kBAAkB,CAACF,gBAAgB,CAACG,OAAO;EACnD,CAAC,CAAC,CAAC;EAEH,OAAOU,OAAO,CAACD,SAAS,CAAC;AAC3B,CAAC,CAAC;AAEF,OAAO,MAAMM,YAAY,GAAG,IAAIvB,YAAY,CAAC;EAC3CwB,KAAK,EAAE,IAAIpB,aAAa,EAAE;EAC1BqB,IAAI,EAAEvB,MAAM,CAACc,cAAc,EAAEF,QAAQ;AACvC,CAAC,CAAC"},"metadata":{},"sourceType":"module"}