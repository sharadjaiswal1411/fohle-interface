{"ast":null,"code":"// Slightly modified (no IE8 support, ES6) and transcribed to TypeScript\n// https://raw.githubusercontent.com/calvinmetcalf/rollup-plugin-node-builtins/master/src/es6/path.js\n\n/** JSDoc */\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      // eslint-disable-next-line no-plusplus\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      // eslint-disable-next-line no-plusplus\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    // eslint-disable-next-line no-plusplus\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n  return parts;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nvar splitPathRe = /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^/]+?|)(\\.[^./]*|))(?:[/]*)$/;\n/** JSDoc */\nfunction splitPath(filename) {\n  var parts = splitPathRe.exec(filename);\n  return parts ? parts.slice(1) : [];\n}\n\n// path.resolve([from ...], to)\n// posix version\n/** JSDoc */\nfunction resolve() {\n  var resolvedPath = '';\n  var resolvedAbsolute = false;\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = i >= 0 ? i < 0 || arguments.length <= i ? undefined : arguments[i] : '/';\n\n    // Skip empty entries\n    if (!path) {\n      continue;\n    }\n    resolvedPath = \"\".concat(path, \"/\").concat(resolvedPath);\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(resolvedPath.split('/').filter(function (p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n  return (resolvedAbsolute ? '/' : '') + resolvedPath || '.';\n}\n\n/** JSDoc */\nfunction trim(arr) {\n  var start = 0;\n  for (; start < arr.length; start++) {\n    if (arr[start] !== '') {\n      break;\n    }\n  }\n  var end = arr.length - 1;\n  for (; end >= 0; end--) {\n    if (arr[end] !== '') {\n      break;\n    }\n  }\n  if (start > end) {\n    return [];\n  }\n  return arr.slice(start, end - start + 1);\n}\n\n// path.relative(from, to)\n// posix version\n/** JSDoc */\nfunction relative(from, to) {\n  /* eslint-disable no-param-reassign */\n  from = resolve(from).substr(1);\n  to = resolve(to).substr(1);\n  /* eslint-enable no-param-reassign */\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n  var outputParts = [];\n  for (var _i = samePartsLength; _i < fromParts.length; _i++) {\n    outputParts.push('..');\n  }\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n  return outputParts.join('/');\n}\n\n// path.normalize(path)\n// posix version\n/** JSDoc */\nfunction normalizePath(path) {\n  var isPathAbsolute = isAbsolute(path);\n  var trailingSlash = path.substr(-1) === '/';\n\n  // Normalize the path\n  var normalizedPath = normalizeArray(path.split('/').filter(function (p) {\n    return !!p;\n  }), !isPathAbsolute).join('/');\n  if (!normalizedPath && !isPathAbsolute) {\n    normalizedPath = '.';\n  }\n  if (normalizedPath && trailingSlash) {\n    normalizedPath += '/';\n  }\n  return (isPathAbsolute ? '/' : '') + normalizedPath;\n}\n\n// posix version\n/** JSDoc */\nfunction isAbsolute(path) {\n  return path.charAt(0) === '/';\n}\n\n// posix version\n/** JSDoc */\nfunction join() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  return normalizePath(args.join('/'));\n}\n\n/** JSDoc */\nfunction dirname(path) {\n  var result = splitPath(path);\n  var root = result[0];\n  var dir = result[1];\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.substr(0, dir.length - 1);\n  }\n  return root + dir;\n}\n\n/** JSDoc */\nfunction basename(path, ext) {\n  var f = splitPath(path)[2];\n  if (ext && f.substr(ext.length * -1) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n}\nexport { basename, dirname, isAbsolute, join, normalizePath, relative, resolve };","map":{"version":3,"sources":["../../src/path.ts"],"names":[],"mappings":"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","sourcesContent":["// Slightly modified (no IE8 support, ES6) and transcribed to TypeScript\n// https://raw.githubusercontent.com/calvinmetcalf/rollup-plugin-node-builtins/master/src/es6/path.js\n\n/** JSDoc */\nfunction normalizeArray(parts: string[], allowAboveRoot?: boolean): string[] {\n  // if the path tries to go above the root, `up` ends up > 0\n  let up = 0;\n  for (let i = parts.length - 1; i >= 0; i--) {\n    const last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      // eslint-disable-next-line no-plusplus\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      // eslint-disable-next-line no-plusplus\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    // eslint-disable-next-line no-plusplus\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nconst splitPathRe = /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^/]+?|)(\\.[^./]*|))(?:[/]*)$/;\n/** JSDoc */\nfunction splitPath(filename: string): string[] {\n  const parts = splitPathRe.exec(filename);\n  return parts ? parts.slice(1) : [];\n}\n\n// path.resolve([from ...], to)\n// posix version\n/** JSDoc */\nexport function resolve(...args: string[]): string {\n  let resolvedPath = '';\n  let resolvedAbsolute = false;\n\n  for (let i = args.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    const path = i >= 0 ? args[i] : '/';\n\n    // Skip empty entries\n    if (!path) {\n      continue;\n    }\n\n    resolvedPath = `${path}/${resolvedPath}`;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(\n    resolvedPath.split('/').filter(p => !!p),\n    !resolvedAbsolute,\n  ).join('/');\n\n  return (resolvedAbsolute ? '/' : '') + resolvedPath || '.';\n}\n\n/** JSDoc */\nfunction trim(arr: string[]): string[] {\n  let start = 0;\n  for (; start < arr.length; start++) {\n    if (arr[start] !== '') {\n      break;\n    }\n  }\n\n  let end = arr.length - 1;\n  for (; end >= 0; end--) {\n    if (arr[end] !== '') {\n      break;\n    }\n  }\n\n  if (start > end) {\n    return [];\n  }\n  return arr.slice(start, end - start + 1);\n}\n\n// path.relative(from, to)\n// posix version\n/** JSDoc */\nexport function relative(from: string, to: string): string {\n  /* eslint-disable no-param-reassign */\n  from = resolve(from).substr(1);\n  to = resolve(to).substr(1);\n  /* eslint-enable no-param-reassign */\n\n  const fromParts = trim(from.split('/'));\n  const toParts = trim(to.split('/'));\n\n  const length = Math.min(fromParts.length, toParts.length);\n  let samePartsLength = length;\n  for (let i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  let outputParts = [];\n  for (let i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n}\n\n// path.normalize(path)\n// posix version\n/** JSDoc */\nexport function normalizePath(path: string): string {\n  const isPathAbsolute = isAbsolute(path);\n  const trailingSlash = path.substr(-1) === '/';\n\n  // Normalize the path\n  let normalizedPath = normalizeArray(\n    path.split('/').filter(p => !!p),\n    !isPathAbsolute,\n  ).join('/');\n\n  if (!normalizedPath && !isPathAbsolute) {\n    normalizedPath = '.';\n  }\n  if (normalizedPath && trailingSlash) {\n    normalizedPath += '/';\n  }\n\n  return (isPathAbsolute ? '/' : '') + normalizedPath;\n}\n\n// posix version\n/** JSDoc */\nexport function isAbsolute(path: string): boolean {\n  return path.charAt(0) === '/';\n}\n\n// posix version\n/** JSDoc */\nexport function join(...args: string[]): string {\n  return normalizePath(args.join('/'));\n}\n\n/** JSDoc */\nexport function dirname(path: string): string {\n  const result = splitPath(path);\n  const root = result[0];\n  let dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.substr(0, dir.length - 1);\n  }\n\n  return root + dir;\n}\n\n/** JSDoc */\nexport function basename(path: string, ext?: string): string {\n  let f = splitPath(path)[2];\n  if (ext && f.substr(ext.length * -1) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n}\n"]},"metadata":{},"sourceType":"module"}