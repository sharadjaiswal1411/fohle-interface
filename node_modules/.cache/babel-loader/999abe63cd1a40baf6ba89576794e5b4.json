{"ast":null,"code":"import CID from'cids';import{getNameFromData,rmPrefix}from'multicodec';import{decode,toB58String}from'multihashes';export function hexToUint8Array(hex){hex=hex.startsWith('0x')?hex.substr(2):hex;if(hex.length%2!==0)throw new Error('hex must have length that is multiple of 2');var arr=new Uint8Array(hex.length/2);for(var i=0;i<arr.length;i++){arr[i]=parseInt(hex.substr(i*2,2),16);}return arr;}var UTF_8_DECODER=new TextDecoder('utf-8');/**\n * Returns the URI representation of the content hash for supported codecs\n * @param contenthash to decode\n */export default function contenthashToUri(contenthash){var data=hexToUint8Array(contenthash);var codec=getNameFromData(data);switch(codec){case'ipfs-ns':{var unprefixedData=rmPrefix(data);var cid=new CID(unprefixedData);return\"ipfs://\".concat(toB58String(cid.multihash));}case'ipns-ns':{var _unprefixedData=rmPrefix(data);var _cid=new CID(_unprefixedData);var multihash=decode(_cid.multihash);if(multihash.name==='identity'){return\"ipns://\".concat(UTF_8_DECODER.decode(multihash.digest).trim());}else{return\"ipns://\".concat(toB58String(_cid.multihash));}}default:throw new Error(\"Unrecognized codec: \".concat(codec));}}","map":{"version":3,"names":["CID","getNameFromData","rmPrefix","decode","toB58String","hexToUint8Array","hex","startsWith","substr","length","Error","arr","Uint8Array","i","parseInt","UTF_8_DECODER","TextDecoder","contenthashToUri","contenthash","data","codec","unprefixedData","cid","multihash","name","digest","trim"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/lib/utils/contenthashToUri.ts"],"sourcesContent":["import CID from 'cids'\nimport { getNameFromData, rmPrefix } from 'multicodec'\nimport { decode, toB58String } from 'multihashes'\n\nexport function hexToUint8Array(hex: string): Uint8Array {\n  hex = hex.startsWith('0x') ? hex.substr(2) : hex\n  if (hex.length % 2 !== 0) throw new Error('hex must have length that is multiple of 2')\n  const arr = new Uint8Array(hex.length / 2)\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = parseInt(hex.substr(i * 2, 2), 16)\n  }\n  return arr\n}\n\nconst UTF_8_DECODER = new TextDecoder('utf-8')\n\n/**\n * Returns the URI representation of the content hash for supported codecs\n * @param contenthash to decode\n */\nexport default function contenthashToUri(contenthash: string): string {\n  const data = hexToUint8Array(contenthash)\n  const codec = getNameFromData(data)\n  switch (codec) {\n    case 'ipfs-ns': {\n      const unprefixedData = rmPrefix(data)\n      const cid = new CID(unprefixedData)\n      return `ipfs://${toB58String(cid.multihash)}`\n    }\n    case 'ipns-ns': {\n      const unprefixedData = rmPrefix(data)\n      const cid = new CID(unprefixedData)\n      const multihash = decode(cid.multihash)\n      if (multihash.name === 'identity') {\n        return `ipns://${UTF_8_DECODER.decode(multihash.digest).trim()}`\n      } else {\n        return `ipns://${toB58String(cid.multihash)}`\n      }\n    }\n    default:\n      throw new Error(`Unrecognized codec: ${codec}`)\n  }\n}\n"],"mappings":"AAAA,MAAOA,IAAG,KAAM,MAAM,CACtB,OAASC,eAAe,CAAEC,QAAQ,KAAQ,YAAY,CACtD,OAASC,MAAM,CAAEC,WAAW,KAAQ,aAAa,CAEjD,MAAO,SAASC,gBAAe,CAACC,GAAW,CAAc,CACvDA,GAAG,CAAGA,GAAG,CAACC,UAAU,CAAC,IAAI,CAAC,CAAGD,GAAG,CAACE,MAAM,CAAC,CAAC,CAAC,CAAGF,GAAG,CAChD,GAAIA,GAAG,CAACG,MAAM,CAAG,CAAC,GAAK,CAAC,CAAE,KAAM,IAAIC,MAAK,CAAC,4CAA4C,CAAC,CACvF,GAAMC,IAAG,CAAG,GAAIC,WAAU,CAACN,GAAG,CAACG,MAAM,CAAG,CAAC,CAAC,CAC1C,IAAK,GAAII,EAAC,CAAG,CAAC,CAAEA,CAAC,CAAGF,GAAG,CAACF,MAAM,CAAEI,CAAC,EAAE,CAAE,CACnCF,GAAG,CAACE,CAAC,CAAC,CAAGC,QAAQ,CAACR,GAAG,CAACE,MAAM,CAACK,CAAC,CAAG,CAAC,CAAE,CAAC,CAAC,CAAE,EAAE,CAAC,CAC7C,CACA,MAAOF,IAAG,CACZ,CAEA,GAAMI,cAAa,CAAG,GAAIC,YAAW,CAAC,OAAO,CAAC,CAE9C;AACA;AACA;AACA,GACA,cAAe,SAASC,iBAAgB,CAACC,WAAmB,CAAU,CACpE,GAAMC,KAAI,CAAGd,eAAe,CAACa,WAAW,CAAC,CACzC,GAAME,MAAK,CAAGnB,eAAe,CAACkB,IAAI,CAAC,CACnC,OAAQC,KAAK,EACX,IAAK,SAAS,CAAE,CACd,GAAMC,eAAc,CAAGnB,QAAQ,CAACiB,IAAI,CAAC,CACrC,GAAMG,IAAG,CAAG,GAAItB,IAAG,CAACqB,cAAc,CAAC,CACnC,uBAAiBjB,WAAW,CAACkB,GAAG,CAACC,SAAS,CAAC,EAC7C,CACA,IAAK,SAAS,CAAE,CACd,GAAMF,gBAAc,CAAGnB,QAAQ,CAACiB,IAAI,CAAC,CACrC,GAAMG,KAAG,CAAG,GAAItB,IAAG,CAACqB,eAAc,CAAC,CACnC,GAAME,UAAS,CAAGpB,MAAM,CAACmB,IAAG,CAACC,SAAS,CAAC,CACvC,GAAIA,SAAS,CAACC,IAAI,GAAK,UAAU,CAAE,CACjC,uBAAiBT,aAAa,CAACZ,MAAM,CAACoB,SAAS,CAACE,MAAM,CAAC,CAACC,IAAI,EAAE,EAChE,CAAC,IAAM,CACL,uBAAiBtB,WAAW,CAACkB,IAAG,CAACC,SAAS,CAAC,EAC7C,CACF,CACA,QACE,KAAM,IAAIb,MAAK,+BAAwBU,KAAK,EAAG,EAErD"},"metadata":{},"sourceType":"module"}