{"ast":null,"code":"import _regeneratorRuntime from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { parsePersonalSign, parseTransactionData, convertArrayBufferToHex, convertHexToArrayBuffer, getClientMeta, payloadId, uuid, formatRpcError, parseWalletConnectUri, convertNumberToHex, isJsonRpcResponseSuccess, isJsonRpcResponseError, isSilentPayload, getLocal, signingMethods, mobileLinkChoiceKey, isMobile, removeLocal } from \"@walletconnect/utils\";\nimport SocketTransport from \"@walletconnect/socket-transport\";\nimport { ERROR_SESSION_CONNECTED, ERROR_SESSION_DISCONNECTED, ERROR_SESSION_REJECTED, ERROR_MISSING_JSON_RPC, ERROR_MISSING_RESULT, ERROR_MISSING_ERROR, ERROR_MISSING_METHOD, ERROR_MISSING_ID, ERROR_INVALID_RESPONSE, ERROR_INVALID_URI, ERROR_MISSING_REQUIRED, ERROR_QRCODE_MODAL_NOT_PROVIDED, ERROR_QRCODE_MODAL_USER_CLOSED } from \"./errors\";\nimport EventManager from \"./events\";\nimport SessionStorage from \"./storage\";\nimport { getBridgeUrl } from \"./url\";\nvar Connector = /*#__PURE__*/function () {\n  function Connector(opts) {\n    _classCallCheck(this, Connector);\n    this.protocol = \"wc\";\n    this.version = 1;\n    this._bridge = \"\";\n    this._key = null;\n    this._clientId = \"\";\n    this._clientMeta = null;\n    this._peerId = \"\";\n    this._peerMeta = null;\n    this._handshakeId = 0;\n    this._handshakeTopic = \"\";\n    this._connected = false;\n    this._accounts = [];\n    this._chainId = 0;\n    this._networkId = 0;\n    this._rpcUrl = \"\";\n    this._eventManager = new EventManager();\n    this._clientMeta = getClientMeta() || opts.connectorOpts.clientMeta || null;\n    this._cryptoLib = opts.cryptoLib;\n    this._sessionStorage = opts.sessionStorage || new SessionStorage(opts.connectorOpts.storageId);\n    this._qrcodeModal = opts.connectorOpts.qrcodeModal;\n    this._qrcodeModalOptions = opts.connectorOpts.qrcodeModalOptions;\n    this._signingMethods = [].concat(_toConsumableArray(signingMethods), _toConsumableArray(opts.connectorOpts.signingMethods || []));\n    if (!opts.connectorOpts.bridge && !opts.connectorOpts.uri && !opts.connectorOpts.session) {\n      throw new Error(ERROR_MISSING_REQUIRED);\n    }\n    if (opts.connectorOpts.bridge) {\n      this.bridge = getBridgeUrl(opts.connectorOpts.bridge);\n    }\n    if (opts.connectorOpts.uri) {\n      this.uri = opts.connectorOpts.uri;\n    }\n    var session = opts.connectorOpts.session || this._getStorageSession();\n    if (session) {\n      this.session = session;\n    }\n    if (this.handshakeId) {\n      this._subscribeToSessionResponse(this.handshakeId, \"Session request rejected\");\n    }\n    this._transport = opts.transport || new SocketTransport({\n      protocol: this.protocol,\n      version: this.version,\n      url: this.bridge,\n      subscriptions: [this.clientId]\n    });\n    this._subscribeToInternalEvents();\n    this._initTransport();\n    if (opts.connectorOpts.uri) {\n      this._subscribeToSessionRequest();\n    }\n    if (opts.pushServerOpts) {\n      this._registerPushServer(opts.pushServerOpts);\n    }\n  }\n  _createClass(Connector, [{\n    key: \"bridge\",\n    get: function get() {\n      return this._bridge;\n    },\n    set: function set(value) {\n      if (!value) {\n        return;\n      }\n      this._bridge = value;\n    }\n  }, {\n    key: \"key\",\n    get: function get() {\n      if (this._key) {\n        var key = convertArrayBufferToHex(this._key, true);\n        return key;\n      }\n      return \"\";\n    },\n    set: function set(value) {\n      if (!value) {\n        return;\n      }\n      var key = convertHexToArrayBuffer(value);\n      this._key = key;\n    }\n  }, {\n    key: \"clientId\",\n    get: function get() {\n      var clientId = this._clientId;\n      if (!clientId) {\n        clientId = this._clientId = uuid();\n      }\n      return this._clientId;\n    },\n    set: function set(value) {\n      if (!value) {\n        return;\n      }\n      this._clientId = value;\n    }\n  }, {\n    key: \"peerId\",\n    get: function get() {\n      return this._peerId;\n    },\n    set: function set(value) {\n      if (!value) {\n        return;\n      }\n      this._peerId = value;\n    }\n  }, {\n    key: \"clientMeta\",\n    get: function get() {\n      var clientMeta = this._clientMeta;\n      if (!clientMeta) {\n        clientMeta = this._clientMeta = getClientMeta();\n      }\n      return clientMeta;\n    },\n    set: function set(value) {}\n  }, {\n    key: \"peerMeta\",\n    get: function get() {\n      var peerMeta = this._peerMeta;\n      return peerMeta;\n    },\n    set: function set(value) {\n      this._peerMeta = value;\n    }\n  }, {\n    key: \"handshakeTopic\",\n    get: function get() {\n      return this._handshakeTopic;\n    },\n    set: function set(value) {\n      if (!value) {\n        return;\n      }\n      this._handshakeTopic = value;\n    }\n  }, {\n    key: \"handshakeId\",\n    get: function get() {\n      return this._handshakeId;\n    },\n    set: function set(value) {\n      if (!value) {\n        return;\n      }\n      this._handshakeId = value;\n    }\n  }, {\n    key: \"uri\",\n    get: function get() {\n      var _uri = this._formatUri();\n      return _uri;\n    },\n    set: function set(value) {\n      if (!value) {\n        return;\n      }\n      var _this$_parseUri = this._parseUri(value),\n        handshakeTopic = _this$_parseUri.handshakeTopic,\n        bridge = _this$_parseUri.bridge,\n        key = _this$_parseUri.key;\n      this.handshakeTopic = handshakeTopic;\n      this.bridge = bridge;\n      this.key = key;\n    }\n  }, {\n    key: \"chainId\",\n    get: function get() {\n      var chainId = this._chainId;\n      return chainId;\n    },\n    set: function set(value) {\n      this._chainId = value;\n    }\n  }, {\n    key: \"networkId\",\n    get: function get() {\n      var networkId = this._networkId;\n      return networkId;\n    },\n    set: function set(value) {\n      this._networkId = value;\n    }\n  }, {\n    key: \"accounts\",\n    get: function get() {\n      var accounts = this._accounts;\n      return accounts;\n    },\n    set: function set(value) {\n      this._accounts = value;\n    }\n  }, {\n    key: \"rpcUrl\",\n    get: function get() {\n      var rpcUrl = this._rpcUrl;\n      return rpcUrl;\n    },\n    set: function set(value) {\n      this._rpcUrl = value;\n    }\n  }, {\n    key: \"connected\",\n    get: function get() {\n      return this._connected;\n    },\n    set: function set(value) {}\n  }, {\n    key: \"pending\",\n    get: function get() {\n      return !!this._handshakeTopic;\n    },\n    set: function set(value) {}\n  }, {\n    key: \"session\",\n    get: function get() {\n      return {\n        connected: this.connected,\n        accounts: this.accounts,\n        chainId: this.chainId,\n        bridge: this.bridge,\n        key: this.key,\n        clientId: this.clientId,\n        clientMeta: this.clientMeta,\n        peerId: this.peerId,\n        peerMeta: this.peerMeta,\n        handshakeId: this.handshakeId,\n        handshakeTopic: this.handshakeTopic\n      };\n    },\n    set: function set(value) {\n      if (!value) {\n        return;\n      }\n      this._connected = value.connected;\n      this.accounts = value.accounts;\n      this.chainId = value.chainId;\n      this.bridge = value.bridge;\n      this.key = value.key;\n      this.clientId = value.clientId;\n      this.clientMeta = value.clientMeta;\n      this.peerId = value.peerId;\n      this.peerMeta = value.peerMeta;\n      this.handshakeId = value.handshakeId;\n      this.handshakeTopic = value.handshakeTopic;\n    }\n  }, {\n    key: \"on\",\n    value: function on(event, callback) {\n      var eventEmitter = {\n        event: event,\n        callback: callback\n      };\n      this._eventManager.subscribe(eventEmitter);\n    }\n  }, {\n    key: \"off\",\n    value: function off(event) {\n      this._eventManager.unsubscribe(event);\n    }\n  }, {\n    key: \"createInstantRequest\",\n    value: function () {\n      var _createInstantRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(instantRequest) {\n        var _this = this;\n        var request, endInstantRequest, result;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this._generateKey();\n              case 2:\n                this._key = _context.sent;\n                request = this._formatRequest({\n                  method: \"wc_instantRequest\",\n                  params: [{\n                    peerId: this.clientId,\n                    peerMeta: this.clientMeta,\n                    request: this._formatRequest(instantRequest)\n                  }]\n                });\n                this.handshakeId = request.id;\n                this.handshakeTopic = uuid();\n                this._eventManager.trigger({\n                  event: \"display_uri\",\n                  params: [this.uri]\n                });\n                this.on(\"modal_closed\", function () {\n                  throw new Error(ERROR_QRCODE_MODAL_USER_CLOSED);\n                });\n                endInstantRequest = function endInstantRequest() {\n                  _this.killSession();\n                };\n                _context.prev = 9;\n                _context.next = 12;\n                return this._sendCallRequest(request);\n              case 12:\n                result = _context.sent;\n                if (result) {\n                  endInstantRequest();\n                }\n                return _context.abrupt(\"return\", result);\n              case 17:\n                _context.prev = 17;\n                _context.t0 = _context[\"catch\"](9);\n                endInstantRequest();\n                throw _context.t0;\n              case 21:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[9, 17]]);\n      }));\n      function createInstantRequest(_x) {\n        return _createInstantRequest.apply(this, arguments);\n      }\n      return createInstantRequest;\n    }()\n  }, {\n    key: \"connect\",\n    value: function () {\n      var _connect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(opts) {\n        var _this2 = this;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (this._qrcodeModal) {\n                  _context3.next = 2;\n                  break;\n                }\n                throw new Error(ERROR_QRCODE_MODAL_NOT_PROVIDED);\n              case 2:\n                if (!this.connected) {\n                  _context3.next = 4;\n                  break;\n                }\n                return _context3.abrupt(\"return\", {\n                  chainId: this.chainId,\n                  accounts: this.accounts\n                });\n              case 4:\n                _context3.next = 6;\n                return this.createSession(opts);\n              case 6:\n                return _context3.abrupt(\"return\", new Promise( /*#__PURE__*/function () {\n                  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(resolve, reject) {\n                    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                      while (1) {\n                        switch (_context2.prev = _context2.next) {\n                          case 0:\n                            _this2.on(\"modal_closed\", function () {\n                              return reject(new Error(ERROR_QRCODE_MODAL_USER_CLOSED));\n                            });\n                            _this2.on(\"connect\", function (error, payload) {\n                              if (error) {\n                                return reject(error);\n                              }\n                              resolve(payload.params[0]);\n                            });\n                          case 2:\n                          case \"end\":\n                            return _context2.stop();\n                        }\n                      }\n                    }, _callee2);\n                  }));\n                  return function (_x3, _x4) {\n                    return _ref.apply(this, arguments);\n                  };\n                }()));\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function connect(_x2) {\n        return _connect.apply(this, arguments);\n      }\n      return connect;\n    }()\n  }, {\n    key: \"createSession\",\n    value: function () {\n      var _createSession = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(opts) {\n        var request;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (!this._connected) {\n                  _context4.next = 2;\n                  break;\n                }\n                throw new Error(ERROR_SESSION_CONNECTED);\n              case 2:\n                if (!this.pending) {\n                  _context4.next = 4;\n                  break;\n                }\n                return _context4.abrupt(\"return\");\n              case 4:\n                _context4.next = 6;\n                return this._generateKey();\n              case 6:\n                this._key = _context4.sent;\n                request = this._formatRequest({\n                  method: \"wc_sessionRequest\",\n                  params: [{\n                    peerId: this.clientId,\n                    peerMeta: this.clientMeta,\n                    chainId: opts && opts.chainId ? opts.chainId : null\n                  }]\n                });\n                this.handshakeId = request.id;\n                this.handshakeTopic = uuid();\n                this._sendSessionRequest(request, \"Session update rejected\", {\n                  topic: this.handshakeTopic\n                });\n                this._eventManager.trigger({\n                  event: \"display_uri\",\n                  params: [this.uri]\n                });\n              case 12:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n      function createSession(_x5) {\n        return _createSession.apply(this, arguments);\n      }\n      return createSession;\n    }()\n  }, {\n    key: \"approveSession\",\n    value: function approveSession(sessionStatus) {\n      if (this._connected) {\n        throw new Error(ERROR_SESSION_CONNECTED);\n      }\n      this.chainId = sessionStatus.chainId;\n      this.accounts = sessionStatus.accounts;\n      this.networkId = sessionStatus.networkId || 0;\n      this.rpcUrl = sessionStatus.rpcUrl || \"\";\n      var sessionParams = {\n        approved: true,\n        chainId: this.chainId,\n        networkId: this.networkId,\n        accounts: this.accounts,\n        rpcUrl: this.rpcUrl,\n        peerId: this.clientId,\n        peerMeta: this.clientMeta\n      };\n      var response = {\n        id: this.handshakeId,\n        jsonrpc: \"2.0\",\n        result: sessionParams\n      };\n      this._sendResponse(response);\n      this._connected = true;\n      this._setStorageSession();\n      this._eventManager.trigger({\n        event: \"connect\",\n        params: [{\n          peerId: this.peerId,\n          peerMeta: this.peerMeta,\n          chainId: this.chainId,\n          accounts: this.accounts\n        }]\n      });\n    }\n  }, {\n    key: \"rejectSession\",\n    value: function rejectSession(sessionError) {\n      if (this._connected) {\n        throw new Error(ERROR_SESSION_CONNECTED);\n      }\n      var message = sessionError && sessionError.message ? sessionError.message : ERROR_SESSION_REJECTED;\n      var response = this._formatResponse({\n        id: this.handshakeId,\n        error: {\n          message: message\n        }\n      });\n      this._sendResponse(response);\n      this._connected = false;\n      this._eventManager.trigger({\n        event: \"disconnect\",\n        params: [{\n          message: message\n        }]\n      });\n      this._removeStorageSession();\n    }\n  }, {\n    key: \"updateSession\",\n    value: function updateSession(sessionStatus) {\n      if (!this._connected) {\n        throw new Error(ERROR_SESSION_DISCONNECTED);\n      }\n      this.chainId = sessionStatus.chainId;\n      this.accounts = sessionStatus.accounts;\n      this.networkId = sessionStatus.networkId || 0;\n      this.rpcUrl = sessionStatus.rpcUrl || \"\";\n      var sessionParams = {\n        approved: true,\n        chainId: this.chainId,\n        networkId: this.networkId,\n        accounts: this.accounts,\n        rpcUrl: this.rpcUrl\n      };\n      var request = this._formatRequest({\n        method: \"wc_sessionUpdate\",\n        params: [sessionParams]\n      });\n      this._sendSessionRequest(request, \"Session update rejected\");\n      this._eventManager.trigger({\n        event: \"session_update\",\n        params: [{\n          chainId: this.chainId,\n          accounts: this.accounts\n        }]\n      });\n      this._manageStorageSession();\n    }\n  }, {\n    key: \"killSession\",\n    value: function () {\n      var _killSession = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(sessionError) {\n        var message, sessionParams, request;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                message = sessionError ? sessionError.message : \"Session Disconnected\";\n                sessionParams = {\n                  approved: false,\n                  chainId: null,\n                  networkId: null,\n                  accounts: null\n                };\n                request = this._formatRequest({\n                  method: \"wc_sessionUpdate\",\n                  params: [sessionParams]\n                });\n                _context5.next = 5;\n                return this._sendRequest(request);\n              case 5:\n                this._handleSessionDisconnect(message);\n              case 6:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n      function killSession(_x6) {\n        return _killSession.apply(this, arguments);\n      }\n      return killSession;\n    }()\n  }, {\n    key: \"sendTransaction\",\n    value: function () {\n      var _sendTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(tx) {\n        var parsedTx, request, result;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                if (this._connected) {\n                  _context6.next = 2;\n                  break;\n                }\n                throw new Error(ERROR_SESSION_DISCONNECTED);\n              case 2:\n                parsedTx = parseTransactionData(tx);\n                request = this._formatRequest({\n                  method: \"eth_sendTransaction\",\n                  params: [parsedTx]\n                });\n                _context6.next = 6;\n                return this._sendCallRequest(request);\n              case 6:\n                result = _context6.sent;\n                return _context6.abrupt(\"return\", result);\n              case 8:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n      function sendTransaction(_x7) {\n        return _sendTransaction.apply(this, arguments);\n      }\n      return sendTransaction;\n    }()\n  }, {\n    key: \"signTransaction\",\n    value: function () {\n      var _signTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(tx) {\n        var parsedTx, request, result;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                if (this._connected) {\n                  _context7.next = 2;\n                  break;\n                }\n                throw new Error(ERROR_SESSION_DISCONNECTED);\n              case 2:\n                parsedTx = parseTransactionData(tx);\n                request = this._formatRequest({\n                  method: \"eth_signTransaction\",\n                  params: [parsedTx]\n                });\n                _context7.next = 6;\n                return this._sendCallRequest(request);\n              case 6:\n                result = _context7.sent;\n                return _context7.abrupt(\"return\", result);\n              case 8:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n      function signTransaction(_x8) {\n        return _signTransaction.apply(this, arguments);\n      }\n      return signTransaction;\n    }()\n  }, {\n    key: \"signMessage\",\n    value: function () {\n      var _signMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(params) {\n        var request, result;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                if (this._connected) {\n                  _context8.next = 2;\n                  break;\n                }\n                throw new Error(ERROR_SESSION_DISCONNECTED);\n              case 2:\n                request = this._formatRequest({\n                  method: \"eth_sign\",\n                  params: params\n                });\n                _context8.next = 5;\n                return this._sendCallRequest(request);\n              case 5:\n                result = _context8.sent;\n                return _context8.abrupt(\"return\", result);\n              case 7:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n      function signMessage(_x9) {\n        return _signMessage.apply(this, arguments);\n      }\n      return signMessage;\n    }()\n  }, {\n    key: \"signPersonalMessage\",\n    value: function () {\n      var _signPersonalMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(params) {\n        var request, result;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                if (this._connected) {\n                  _context9.next = 2;\n                  break;\n                }\n                throw new Error(ERROR_SESSION_DISCONNECTED);\n              case 2:\n                params = parsePersonalSign(params);\n                request = this._formatRequest({\n                  method: \"personal_sign\",\n                  params: params\n                });\n                _context9.next = 6;\n                return this._sendCallRequest(request);\n              case 6:\n                result = _context9.sent;\n                return _context9.abrupt(\"return\", result);\n              case 8:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n      function signPersonalMessage(_x10) {\n        return _signPersonalMessage.apply(this, arguments);\n      }\n      return signPersonalMessage;\n    }()\n  }, {\n    key: \"signTypedData\",\n    value: function () {\n      var _signTypedData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(params) {\n        var request, result;\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                if (this._connected) {\n                  _context10.next = 2;\n                  break;\n                }\n                throw new Error(ERROR_SESSION_DISCONNECTED);\n              case 2:\n                request = this._formatRequest({\n                  method: \"eth_signTypedData\",\n                  params: params\n                });\n                _context10.next = 5;\n                return this._sendCallRequest(request);\n              case 5:\n                result = _context10.sent;\n                return _context10.abrupt(\"return\", result);\n              case 7:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n      function signTypedData(_x11) {\n        return _signTypedData.apply(this, arguments);\n      }\n      return signTypedData;\n    }()\n  }, {\n    key: \"updateChain\",\n    value: function () {\n      var _updateChain = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(chainParams) {\n        var request, result;\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                if (this._connected) {\n                  _context11.next = 2;\n                  break;\n                }\n                throw new Error(\"Session currently disconnected\");\n              case 2:\n                request = this._formatRequest({\n                  method: \"wallet_updateChain\",\n                  params: [chainParams]\n                });\n                _context11.next = 5;\n                return this._sendCallRequest(request);\n              case 5:\n                result = _context11.sent;\n                return _context11.abrupt(\"return\", result);\n              case 7:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n      function updateChain(_x12) {\n        return _updateChain.apply(this, arguments);\n      }\n      return updateChain;\n    }()\n  }, {\n    key: \"unsafeSend\",\n    value: function unsafeSend(request, options) {\n      var _this3 = this;\n      this._sendRequest(request, options);\n      this._eventManager.trigger({\n        event: \"call_request_sent\",\n        params: [{\n          request: request,\n          options: options\n        }]\n      });\n      return new Promise(function (resolve, reject) {\n        _this3._subscribeToResponse(request.id, function (error, payload) {\n          if (error) {\n            reject(error);\n            return;\n          }\n          if (!payload) {\n            throw new Error(ERROR_MISSING_JSON_RPC);\n          }\n          resolve(payload);\n        });\n      });\n    }\n  }, {\n    key: \"sendCustomRequest\",\n    value: function () {\n      var _sendCustomRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(request, options) {\n        var formattedRequest, result;\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                if (this._connected) {\n                  _context12.next = 2;\n                  break;\n                }\n                throw new Error(ERROR_SESSION_DISCONNECTED);\n              case 2:\n                _context12.t0 = request.method;\n                _context12.next = _context12.t0 === \"eth_accounts\" ? 5 : _context12.t0 === \"eth_chainId\" ? 6 : _context12.t0 === \"eth_sendTransaction\" ? 7 : _context12.t0 === \"eth_signTransaction\" ? 7 : _context12.t0 === \"personal_sign\" ? 9 : 11;\n                break;\n              case 5:\n                return _context12.abrupt(\"return\", this.accounts);\n              case 6:\n                return _context12.abrupt(\"return\", convertNumberToHex(this.chainId));\n              case 7:\n                if (request.params) {\n                  request.params[0] = parseTransactionData(request.params[0]);\n                }\n                return _context12.abrupt(\"break\", 12);\n              case 9:\n                if (request.params) {\n                  request.params = parsePersonalSign(request.params);\n                }\n                return _context12.abrupt(\"break\", 12);\n              case 11:\n                return _context12.abrupt(\"break\", 12);\n              case 12:\n                formattedRequest = this._formatRequest(request);\n                _context12.next = 15;\n                return this._sendCallRequest(formattedRequest, options);\n              case 15:\n                result = _context12.sent;\n                return _context12.abrupt(\"return\", result);\n              case 17:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n      function sendCustomRequest(_x13, _x14) {\n        return _sendCustomRequest.apply(this, arguments);\n      }\n      return sendCustomRequest;\n    }()\n  }, {\n    key: \"approveRequest\",\n    value: function approveRequest(response) {\n      if (isJsonRpcResponseSuccess(response)) {\n        var formattedResponse = this._formatResponse(response);\n        this._sendResponse(formattedResponse);\n      } else {\n        throw new Error(ERROR_MISSING_RESULT);\n      }\n    }\n  }, {\n    key: \"rejectRequest\",\n    value: function rejectRequest(response) {\n      if (isJsonRpcResponseError(response)) {\n        var formattedResponse = this._formatResponse(response);\n        this._sendResponse(formattedResponse);\n      } else {\n        throw new Error(ERROR_MISSING_ERROR);\n      }\n    }\n  }, {\n    key: \"transportClose\",\n    value: function transportClose() {\n      this._transport.close();\n    }\n  }, {\n    key: \"_sendRequest\",\n    value: function () {\n      var _sendRequest2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(request, options) {\n        var callRequest, encryptionPayload, topic, payload, silent;\n        return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                callRequest = this._formatRequest(request);\n                _context13.next = 3;\n                return this._encrypt(callRequest);\n              case 3:\n                encryptionPayload = _context13.sent;\n                topic = typeof (options === null || options === void 0 ? void 0 : options.topic) !== \"undefined\" ? options.topic : this.peerId;\n                payload = JSON.stringify(encryptionPayload);\n                silent = typeof (options === null || options === void 0 ? void 0 : options.forcePushNotification) !== \"undefined\" ? !options.forcePushNotification : isSilentPayload(callRequest);\n                this._transport.send(payload, topic, silent);\n              case 8:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n      function _sendRequest(_x15, _x16) {\n        return _sendRequest2.apply(this, arguments);\n      }\n      return _sendRequest;\n    }()\n  }, {\n    key: \"_sendResponse\",\n    value: function () {\n      var _sendResponse2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(response) {\n        var encryptionPayload, topic, payload, silent;\n        return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                _context14.next = 2;\n                return this._encrypt(response);\n              case 2:\n                encryptionPayload = _context14.sent;\n                topic = this.peerId;\n                payload = JSON.stringify(encryptionPayload);\n                silent = true;\n                this._transport.send(payload, topic, silent);\n              case 7:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n      function _sendResponse(_x17) {\n        return _sendResponse2.apply(this, arguments);\n      }\n      return _sendResponse;\n    }()\n  }, {\n    key: \"_sendSessionRequest\",\n    value: function () {\n      var _sendSessionRequest2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(request, errorMsg, options) {\n        return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                this._sendRequest(request, options);\n                this._subscribeToSessionResponse(request.id, errorMsg);\n              case 2:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n      function _sendSessionRequest(_x18, _x19, _x20) {\n        return _sendSessionRequest2.apply(this, arguments);\n      }\n      return _sendSessionRequest;\n    }()\n  }, {\n    key: \"_sendCallRequest\",\n    value: function _sendCallRequest(request, options) {\n      this._sendRequest(request, options);\n      this._eventManager.trigger({\n        event: \"call_request_sent\",\n        params: [{\n          request: request,\n          options: options\n        }]\n      });\n      return this._subscribeToCallResponse(request.id);\n    }\n  }, {\n    key: \"_formatRequest\",\n    value: function _formatRequest(request) {\n      if (typeof request.method === \"undefined\") {\n        throw new Error(ERROR_MISSING_METHOD);\n      }\n      var formattedRequest = {\n        id: typeof request.id === \"undefined\" ? payloadId() : request.id,\n        jsonrpc: \"2.0\",\n        method: request.method,\n        params: typeof request.params === \"undefined\" ? [] : request.params\n      };\n      return formattedRequest;\n    }\n  }, {\n    key: \"_formatResponse\",\n    value: function _formatResponse(response) {\n      if (typeof response.id === \"undefined\") {\n        throw new Error(ERROR_MISSING_ID);\n      }\n      var baseResponse = {\n        id: response.id,\n        jsonrpc: \"2.0\"\n      };\n      if (isJsonRpcResponseError(response)) {\n        var error = formatRpcError(response.error);\n        var errorResponse = Object.assign(Object.assign(Object.assign({}, baseResponse), response), {\n          error: error\n        });\n        return errorResponse;\n      } else if (isJsonRpcResponseSuccess(response)) {\n        var successResponse = Object.assign(Object.assign({}, baseResponse), response);\n        return successResponse;\n      }\n      throw new Error(ERROR_INVALID_RESPONSE);\n    }\n  }, {\n    key: \"_handleSessionDisconnect\",\n    value: function _handleSessionDisconnect(errorMsg) {\n      var message = errorMsg || \"Session Disconnected\";\n      if (!this._connected) {\n        if (this._qrcodeModal) {\n          this._qrcodeModal.close();\n        }\n        removeLocal(mobileLinkChoiceKey);\n      }\n      if (this._connected) {\n        this._connected = false;\n      }\n      if (this._handshakeId) {\n        this._handshakeId = 0;\n      }\n      if (this._handshakeTopic) {\n        this._handshakeTopic = \"\";\n      }\n      if (this._peerId) {\n        this._peerId = \"\";\n      }\n      this._eventManager.trigger({\n        event: \"disconnect\",\n        params: [{\n          message: message\n        }]\n      });\n      this._removeStorageSession();\n      this.transportClose();\n    }\n  }, {\n    key: \"_handleSessionResponse\",\n    value: function _handleSessionResponse(errorMsg, sessionParams) {\n      if (sessionParams) {\n        if (sessionParams.approved) {\n          if (!this._connected) {\n            this._connected = true;\n            if (sessionParams.chainId) {\n              this.chainId = sessionParams.chainId;\n            }\n            if (sessionParams.accounts) {\n              this.accounts = sessionParams.accounts;\n            }\n            if (sessionParams.peerId && !this.peerId) {\n              this.peerId = sessionParams.peerId;\n            }\n            if (sessionParams.peerMeta && !this.peerMeta) {\n              this.peerMeta = sessionParams.peerMeta;\n            }\n            this._eventManager.trigger({\n              event: \"connect\",\n              params: [{\n                peerId: this.peerId,\n                peerMeta: this.peerMeta,\n                chainId: this.chainId,\n                accounts: this.accounts\n              }]\n            });\n          } else {\n            if (sessionParams.chainId) {\n              this.chainId = sessionParams.chainId;\n            }\n            if (sessionParams.accounts) {\n              this.accounts = sessionParams.accounts;\n            }\n            this._eventManager.trigger({\n              event: \"session_update\",\n              params: [{\n                chainId: this.chainId,\n                accounts: this.accounts\n              }]\n            });\n          }\n          this._manageStorageSession();\n        } else {\n          this._handleSessionDisconnect(errorMsg);\n        }\n      } else {\n        this._handleSessionDisconnect(errorMsg);\n      }\n    }\n  }, {\n    key: \"_handleIncomingMessages\",\n    value: function () {\n      var _handleIncomingMessages2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(socketMessage) {\n        var activeTopics, encryptionPayload, payload;\n        return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                activeTopics = [this.clientId, this.handshakeTopic];\n                if (activeTopics.includes(socketMessage.topic)) {\n                  _context16.next = 3;\n                  break;\n                }\n                return _context16.abrupt(\"return\");\n              case 3:\n                _context16.prev = 3;\n                encryptionPayload = JSON.parse(socketMessage.payload);\n                _context16.next = 10;\n                break;\n              case 7:\n                _context16.prev = 7;\n                _context16.t0 = _context16[\"catch\"](3);\n                return _context16.abrupt(\"return\");\n              case 10:\n                _context16.next = 12;\n                return this._decrypt(encryptionPayload);\n              case 12:\n                payload = _context16.sent;\n                if (payload) {\n                  this._eventManager.trigger(payload);\n                }\n              case 14:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this, [[3, 7]]);\n      }));\n      function _handleIncomingMessages(_x21) {\n        return _handleIncomingMessages2.apply(this, arguments);\n      }\n      return _handleIncomingMessages;\n    }()\n  }, {\n    key: \"_subscribeToSessionRequest\",\n    value: function _subscribeToSessionRequest() {\n      this._transport.subscribe(this.handshakeTopic);\n    }\n  }, {\n    key: \"_subscribeToResponse\",\n    value: function _subscribeToResponse(id, callback) {\n      this.on(\"response:\".concat(id), callback);\n    }\n  }, {\n    key: \"_subscribeToSessionResponse\",\n    value: function _subscribeToSessionResponse(id, errorMsg) {\n      var _this4 = this;\n      this._subscribeToResponse(id, function (error, payload) {\n        if (error) {\n          _this4._handleSessionResponse(error.message);\n          return;\n        }\n        if (isJsonRpcResponseSuccess(payload)) {\n          _this4._handleSessionResponse(errorMsg, payload.result);\n        } else if (payload.error && payload.error.message) {\n          _this4._handleSessionResponse(payload.error.message);\n        } else {\n          _this4._handleSessionResponse(errorMsg);\n        }\n      });\n    }\n  }, {\n    key: \"_subscribeToCallResponse\",\n    value: function _subscribeToCallResponse(id) {\n      var _this5 = this;\n      return new Promise(function (resolve, reject) {\n        _this5._subscribeToResponse(id, function (error, payload) {\n          if (error) {\n            reject(error);\n            return;\n          }\n          if (isJsonRpcResponseSuccess(payload)) {\n            resolve(payload.result);\n          } else if (payload.error && payload.error.message) {\n            reject(payload.error);\n          } else {\n            reject(new Error(ERROR_INVALID_RESPONSE));\n          }\n        });\n      });\n    }\n  }, {\n    key: \"_subscribeToInternalEvents\",\n    value: function _subscribeToInternalEvents() {\n      var _this6 = this;\n      this.on(\"display_uri\", function () {\n        if (_this6._qrcodeModal) {\n          _this6._qrcodeModal.open(_this6.uri, function () {\n            _this6._eventManager.trigger({\n              event: \"modal_closed\",\n              params: []\n            });\n          }, _this6._qrcodeModalOptions);\n        }\n      });\n      this.on(\"connect\", function () {\n        if (_this6._qrcodeModal) {\n          _this6._qrcodeModal.close();\n        }\n      });\n      this.on(\"call_request_sent\", function (error, payload) {\n        var request = payload.params[0].request;\n        if (isMobile() && _this6._signingMethods.includes(request.method)) {\n          var mobileLinkUrl = getLocal(mobileLinkChoiceKey);\n          if (mobileLinkUrl) {\n            window.location.href = mobileLinkUrl.href;\n          }\n        }\n      });\n      this.on(\"wc_sessionRequest\", function (error, payload) {\n        if (error) {\n          _this6._eventManager.trigger({\n            event: \"error\",\n            params: [{\n              code: \"SESSION_REQUEST_ERROR\",\n              message: error.toString()\n            }]\n          });\n        }\n        _this6.handshakeId = payload.id;\n        _this6.peerId = payload.params[0].peerId;\n        _this6.peerMeta = payload.params[0].peerMeta;\n        var internalPayload = Object.assign(Object.assign({}, payload), {\n          method: \"session_request\"\n        });\n        _this6._eventManager.trigger(internalPayload);\n      });\n      this.on(\"wc_sessionUpdate\", function (error, payload) {\n        if (error) {\n          _this6._handleSessionResponse(error.message);\n        }\n        _this6._handleSessionResponse(\"Session disconnected\", payload.params[0]);\n      });\n    }\n  }, {\n    key: \"_initTransport\",\n    value: function _initTransport() {\n      var _this7 = this;\n      this._transport.on(\"message\", function (socketMessage) {\n        return _this7._handleIncomingMessages(socketMessage);\n      });\n      this._transport.on(\"open\", function () {\n        return _this7._eventManager.trigger({\n          event: \"transport_open\",\n          params: []\n        });\n      });\n      this._transport.on(\"close\", function () {\n        return _this7._eventManager.trigger({\n          event: \"transport_close\",\n          params: []\n        });\n      });\n      this._transport.on(\"error\", function () {\n        return _this7._eventManager.trigger({\n          event: \"transport_error\",\n          params: [\"Websocket connection failed\"]\n        });\n      });\n      this._transport.open();\n    }\n  }, {\n    key: \"_formatUri\",\n    value: function _formatUri() {\n      var protocol = this.protocol;\n      var handshakeTopic = this.handshakeTopic;\n      var version = this.version;\n      var bridge = encodeURIComponent(this.bridge);\n      var key = this.key;\n      var uri = \"\".concat(protocol, \":\").concat(handshakeTopic, \"@\").concat(version, \"?bridge=\").concat(bridge, \"&key=\").concat(key);\n      return uri;\n    }\n  }, {\n    key: \"_parseUri\",\n    value: function _parseUri(uri) {\n      var result = parseWalletConnectUri(uri);\n      if (result.protocol === this.protocol) {\n        if (!result.handshakeTopic) {\n          throw Error(\"Invalid or missing handshakeTopic parameter value\");\n        }\n        var handshakeTopic = result.handshakeTopic;\n        if (!result.bridge) {\n          throw Error(\"Invalid or missing bridge url parameter value\");\n        }\n        var bridge = decodeURIComponent(result.bridge);\n        if (!result.key) {\n          throw Error(\"Invalid or missing key parameter value\");\n        }\n        var key = result.key;\n        return {\n          handshakeTopic: handshakeTopic,\n          bridge: bridge,\n          key: key\n        };\n      } else {\n        throw new Error(ERROR_INVALID_URI);\n      }\n    }\n  }, {\n    key: \"_generateKey\",\n    value: function () {\n      var _generateKey2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17() {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                if (!this._cryptoLib) {\n                  _context17.next = 5;\n                  break;\n                }\n                _context17.next = 3;\n                return this._cryptoLib.generateKey();\n              case 3:\n                result = _context17.sent;\n                return _context17.abrupt(\"return\", result);\n              case 5:\n                return _context17.abrupt(\"return\", null);\n              case 6:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n      function _generateKey() {\n        return _generateKey2.apply(this, arguments);\n      }\n      return _generateKey;\n    }()\n  }, {\n    key: \"_encrypt\",\n    value: function () {\n      var _encrypt2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18(data) {\n        var key, result;\n        return _regeneratorRuntime.wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                key = this._key;\n                if (!(this._cryptoLib && key)) {\n                  _context18.next = 6;\n                  break;\n                }\n                _context18.next = 4;\n                return this._cryptoLib.encrypt(data, key);\n              case 4:\n                result = _context18.sent;\n                return _context18.abrupt(\"return\", result);\n              case 6:\n                return _context18.abrupt(\"return\", null);\n              case 7:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n      function _encrypt(_x22) {\n        return _encrypt2.apply(this, arguments);\n      }\n      return _encrypt;\n    }()\n  }, {\n    key: \"_decrypt\",\n    value: function () {\n      var _decrypt2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee19(payload) {\n        var key, result;\n        return _regeneratorRuntime.wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                key = this._key;\n                if (!(this._cryptoLib && key)) {\n                  _context19.next = 6;\n                  break;\n                }\n                _context19.next = 4;\n                return this._cryptoLib.decrypt(payload, key);\n              case 4:\n                result = _context19.sent;\n                return _context19.abrupt(\"return\", result);\n              case 6:\n                return _context19.abrupt(\"return\", null);\n              case 7:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19, this);\n      }));\n      function _decrypt(_x23) {\n        return _decrypt2.apply(this, arguments);\n      }\n      return _decrypt;\n    }()\n  }, {\n    key: \"_getStorageSession\",\n    value: function _getStorageSession() {\n      var result = null;\n      if (this._sessionStorage) {\n        result = this._sessionStorage.getSession();\n      }\n      return result;\n    }\n  }, {\n    key: \"_setStorageSession\",\n    value: function _setStorageSession() {\n      if (this._sessionStorage) {\n        this._sessionStorage.setSession(this.session);\n      }\n    }\n  }, {\n    key: \"_removeStorageSession\",\n    value: function _removeStorageSession() {\n      if (this._sessionStorage) {\n        this._sessionStorage.removeSession();\n      }\n    }\n  }, {\n    key: \"_manageStorageSession\",\n    value: function _manageStorageSession() {\n      if (this._connected) {\n        this._setStorageSession();\n      } else {\n        this._removeStorageSession();\n      }\n    }\n  }, {\n    key: \"_registerPushServer\",\n    value: function _registerPushServer(pushServerOpts) {\n      if (!pushServerOpts.url || typeof pushServerOpts.url !== \"string\") {\n        throw Error(\"Invalid or missing pushServerOpts.url parameter value\");\n      }\n      if (!pushServerOpts.type || typeof pushServerOpts.type !== \"string\") {\n        throw Error(\"Invalid or missing pushServerOpts.type parameter value\");\n      }\n      if (!pushServerOpts.token || typeof pushServerOpts.token !== \"string\") {\n        throw Error(\"Invalid or missing pushServerOpts.token parameter value\");\n      }\n      var pushSubscription = {\n        bridge: this.bridge,\n        topic: this.clientId,\n        type: pushServerOpts.type,\n        token: pushServerOpts.token,\n        peerName: \"\",\n        language: pushServerOpts.language || \"\"\n      };\n      this.on(\"connect\", /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee20(error, payload) {\n          var peerName, response, json;\n          return _regeneratorRuntime.wrap(function _callee20$(_context20) {\n            while (1) {\n              switch (_context20.prev = _context20.next) {\n                case 0:\n                  if (!error) {\n                    _context20.next = 2;\n                    break;\n                  }\n                  throw error;\n                case 2:\n                  if (pushServerOpts.peerMeta) {\n                    peerName = payload.params[0].peerMeta.name;\n                    pushSubscription.peerName = peerName;\n                  }\n                  _context20.prev = 3;\n                  _context20.next = 6;\n                  return fetch(\"\".concat(pushServerOpts.url, \"/new\"), {\n                    method: \"POST\",\n                    headers: {\n                      Accept: \"application/json\",\n                      \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify(pushSubscription)\n                  });\n                case 6:\n                  response = _context20.sent;\n                  _context20.next = 9;\n                  return response.json();\n                case 9:\n                  json = _context20.sent;\n                  if (json.success) {\n                    _context20.next = 12;\n                    break;\n                  }\n                  throw Error(\"Failed to register in Push Server\");\n                case 12:\n                  _context20.next = 17;\n                  break;\n                case 14:\n                  _context20.prev = 14;\n                  _context20.t0 = _context20[\"catch\"](3);\n                  throw Error(\"Failed to register in Push Server\");\n                case 17:\n                case \"end\":\n                  return _context20.stop();\n              }\n            }\n          }, _callee20, null, [[3, 14]]);\n        }));\n        return function (_x24, _x25) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    }\n  }]);\n  return Connector;\n}();\nexport default Connector;","map":{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { parsePersonalSign, parseTransactionData, convertArrayBufferToHex, convertHexToArrayBuffer, getClientMeta, payloadId, uuid, formatRpcError, parseWalletConnectUri, convertNumberToHex, isJsonRpcResponseSuccess, isJsonRpcResponseError, isSilentPayload, getLocal, signingMethods, mobileLinkChoiceKey, isMobile, removeLocal, } from \"@walletconnect/utils\";\nimport SocketTransport from \"@walletconnect/socket-transport\";\nimport { ERROR_SESSION_CONNECTED, ERROR_SESSION_DISCONNECTED, ERROR_SESSION_REJECTED, ERROR_MISSING_JSON_RPC, ERROR_MISSING_RESULT, ERROR_MISSING_ERROR, ERROR_MISSING_METHOD, ERROR_MISSING_ID, ERROR_INVALID_RESPONSE, ERROR_INVALID_URI, ERROR_MISSING_REQUIRED, ERROR_QRCODE_MODAL_NOT_PROVIDED, ERROR_QRCODE_MODAL_USER_CLOSED, } from \"./errors\";\nimport EventManager from \"./events\";\nimport SessionStorage from \"./storage\";\nimport { getBridgeUrl } from \"./url\";\nclass Connector {\n    constructor(opts) {\n        this.protocol = \"wc\";\n        this.version = 1;\n        this._bridge = \"\";\n        this._key = null;\n        this._clientId = \"\";\n        this._clientMeta = null;\n        this._peerId = \"\";\n        this._peerMeta = null;\n        this._handshakeId = 0;\n        this._handshakeTopic = \"\";\n        this._connected = false;\n        this._accounts = [];\n        this._chainId = 0;\n        this._networkId = 0;\n        this._rpcUrl = \"\";\n        this._eventManager = new EventManager();\n        this._clientMeta = getClientMeta() || opts.connectorOpts.clientMeta || null;\n        this._cryptoLib = opts.cryptoLib;\n        this._sessionStorage = opts.sessionStorage || new SessionStorage(opts.connectorOpts.storageId);\n        this._qrcodeModal = opts.connectorOpts.qrcodeModal;\n        this._qrcodeModalOptions = opts.connectorOpts.qrcodeModalOptions;\n        this._signingMethods = [...signingMethods, ...(opts.connectorOpts.signingMethods || [])];\n        if (!opts.connectorOpts.bridge && !opts.connectorOpts.uri && !opts.connectorOpts.session) {\n            throw new Error(ERROR_MISSING_REQUIRED);\n        }\n        if (opts.connectorOpts.bridge) {\n            this.bridge = getBridgeUrl(opts.connectorOpts.bridge);\n        }\n        if (opts.connectorOpts.uri) {\n            this.uri = opts.connectorOpts.uri;\n        }\n        const session = opts.connectorOpts.session || this._getStorageSession();\n        if (session) {\n            this.session = session;\n        }\n        if (this.handshakeId) {\n            this._subscribeToSessionResponse(this.handshakeId, \"Session request rejected\");\n        }\n        this._transport =\n            opts.transport ||\n                new SocketTransport({\n                    protocol: this.protocol,\n                    version: this.version,\n                    url: this.bridge,\n                    subscriptions: [this.clientId],\n                });\n        this._subscribeToInternalEvents();\n        this._initTransport();\n        if (opts.connectorOpts.uri) {\n            this._subscribeToSessionRequest();\n        }\n        if (opts.pushServerOpts) {\n            this._registerPushServer(opts.pushServerOpts);\n        }\n    }\n    set bridge(value) {\n        if (!value) {\n            return;\n        }\n        this._bridge = value;\n    }\n    get bridge() {\n        return this._bridge;\n    }\n    set key(value) {\n        if (!value) {\n            return;\n        }\n        const key = convertHexToArrayBuffer(value);\n        this._key = key;\n    }\n    get key() {\n        if (this._key) {\n            const key = convertArrayBufferToHex(this._key, true);\n            return key;\n        }\n        return \"\";\n    }\n    set clientId(value) {\n        if (!value) {\n            return;\n        }\n        this._clientId = value;\n    }\n    get clientId() {\n        let clientId = this._clientId;\n        if (!clientId) {\n            clientId = this._clientId = uuid();\n        }\n        return this._clientId;\n    }\n    set peerId(value) {\n        if (!value) {\n            return;\n        }\n        this._peerId = value;\n    }\n    get peerId() {\n        return this._peerId;\n    }\n    set clientMeta(value) {\n    }\n    get clientMeta() {\n        let clientMeta = this._clientMeta;\n        if (!clientMeta) {\n            clientMeta = this._clientMeta = getClientMeta();\n        }\n        return clientMeta;\n    }\n    set peerMeta(value) {\n        this._peerMeta = value;\n    }\n    get peerMeta() {\n        const peerMeta = this._peerMeta;\n        return peerMeta;\n    }\n    set handshakeTopic(value) {\n        if (!value) {\n            return;\n        }\n        this._handshakeTopic = value;\n    }\n    get handshakeTopic() {\n        return this._handshakeTopic;\n    }\n    set handshakeId(value) {\n        if (!value) {\n            return;\n        }\n        this._handshakeId = value;\n    }\n    get handshakeId() {\n        return this._handshakeId;\n    }\n    get uri() {\n        const _uri = this._formatUri();\n        return _uri;\n    }\n    set uri(value) {\n        if (!value) {\n            return;\n        }\n        const { handshakeTopic, bridge, key } = this._parseUri(value);\n        this.handshakeTopic = handshakeTopic;\n        this.bridge = bridge;\n        this.key = key;\n    }\n    set chainId(value) {\n        this._chainId = value;\n    }\n    get chainId() {\n        const chainId = this._chainId;\n        return chainId;\n    }\n    set networkId(value) {\n        this._networkId = value;\n    }\n    get networkId() {\n        const networkId = this._networkId;\n        return networkId;\n    }\n    set accounts(value) {\n        this._accounts = value;\n    }\n    get accounts() {\n        const accounts = this._accounts;\n        return accounts;\n    }\n    set rpcUrl(value) {\n        this._rpcUrl = value;\n    }\n    get rpcUrl() {\n        const rpcUrl = this._rpcUrl;\n        return rpcUrl;\n    }\n    set connected(value) {\n    }\n    get connected() {\n        return this._connected;\n    }\n    set pending(value) {\n    }\n    get pending() {\n        return !!this._handshakeTopic;\n    }\n    get session() {\n        return {\n            connected: this.connected,\n            accounts: this.accounts,\n            chainId: this.chainId,\n            bridge: this.bridge,\n            key: this.key,\n            clientId: this.clientId,\n            clientMeta: this.clientMeta,\n            peerId: this.peerId,\n            peerMeta: this.peerMeta,\n            handshakeId: this.handshakeId,\n            handshakeTopic: this.handshakeTopic,\n        };\n    }\n    set session(value) {\n        if (!value) {\n            return;\n        }\n        this._connected = value.connected;\n        this.accounts = value.accounts;\n        this.chainId = value.chainId;\n        this.bridge = value.bridge;\n        this.key = value.key;\n        this.clientId = value.clientId;\n        this.clientMeta = value.clientMeta;\n        this.peerId = value.peerId;\n        this.peerMeta = value.peerMeta;\n        this.handshakeId = value.handshakeId;\n        this.handshakeTopic = value.handshakeTopic;\n    }\n    on(event, callback) {\n        const eventEmitter = {\n            event,\n            callback,\n        };\n        this._eventManager.subscribe(eventEmitter);\n    }\n    off(event) {\n        this._eventManager.unsubscribe(event);\n    }\n    async createInstantRequest(instantRequest) {\n        this._key = await this._generateKey();\n        const request = this._formatRequest({\n            method: \"wc_instantRequest\",\n            params: [\n                {\n                    peerId: this.clientId,\n                    peerMeta: this.clientMeta,\n                    request: this._formatRequest(instantRequest),\n                },\n            ],\n        });\n        this.handshakeId = request.id;\n        this.handshakeTopic = uuid();\n        this._eventManager.trigger({\n            event: \"display_uri\",\n            params: [this.uri],\n        });\n        this.on(\"modal_closed\", () => {\n            throw new Error(ERROR_QRCODE_MODAL_USER_CLOSED);\n        });\n        const endInstantRequest = () => {\n            this.killSession();\n        };\n        try {\n            const result = await this._sendCallRequest(request);\n            if (result) {\n                endInstantRequest();\n            }\n            return result;\n        }\n        catch (error) {\n            endInstantRequest();\n            throw error;\n        }\n    }\n    async connect(opts) {\n        if (!this._qrcodeModal) {\n            throw new Error(ERROR_QRCODE_MODAL_NOT_PROVIDED);\n        }\n        if (this.connected) {\n            return {\n                chainId: this.chainId,\n                accounts: this.accounts,\n            };\n        }\n        await this.createSession(opts);\n        return new Promise(async (resolve, reject) => {\n            this.on(\"modal_closed\", () => reject(new Error(ERROR_QRCODE_MODAL_USER_CLOSED)));\n            this.on(\"connect\", (error, payload) => {\n                if (error) {\n                    return reject(error);\n                }\n                resolve(payload.params[0]);\n            });\n        });\n    }\n    async createSession(opts) {\n        if (this._connected) {\n            throw new Error(ERROR_SESSION_CONNECTED);\n        }\n        if (this.pending) {\n            return;\n        }\n        this._key = await this._generateKey();\n        const request = this._formatRequest({\n            method: \"wc_sessionRequest\",\n            params: [\n                {\n                    peerId: this.clientId,\n                    peerMeta: this.clientMeta,\n                    chainId: opts && opts.chainId ? opts.chainId : null,\n                },\n            ],\n        });\n        this.handshakeId = request.id;\n        this.handshakeTopic = uuid();\n        this._sendSessionRequest(request, \"Session update rejected\", {\n            topic: this.handshakeTopic,\n        });\n        this._eventManager.trigger({\n            event: \"display_uri\",\n            params: [this.uri],\n        });\n    }\n    approveSession(sessionStatus) {\n        if (this._connected) {\n            throw new Error(ERROR_SESSION_CONNECTED);\n        }\n        this.chainId = sessionStatus.chainId;\n        this.accounts = sessionStatus.accounts;\n        this.networkId = sessionStatus.networkId || 0;\n        this.rpcUrl = sessionStatus.rpcUrl || \"\";\n        const sessionParams = {\n            approved: true,\n            chainId: this.chainId,\n            networkId: this.networkId,\n            accounts: this.accounts,\n            rpcUrl: this.rpcUrl,\n            peerId: this.clientId,\n            peerMeta: this.clientMeta,\n        };\n        const response = {\n            id: this.handshakeId,\n            jsonrpc: \"2.0\",\n            result: sessionParams,\n        };\n        this._sendResponse(response);\n        this._connected = true;\n        this._setStorageSession();\n        this._eventManager.trigger({\n            event: \"connect\",\n            params: [\n                {\n                    peerId: this.peerId,\n                    peerMeta: this.peerMeta,\n                    chainId: this.chainId,\n                    accounts: this.accounts,\n                },\n            ],\n        });\n    }\n    rejectSession(sessionError) {\n        if (this._connected) {\n            throw new Error(ERROR_SESSION_CONNECTED);\n        }\n        const message = sessionError && sessionError.message ? sessionError.message : ERROR_SESSION_REJECTED;\n        const response = this._formatResponse({\n            id: this.handshakeId,\n            error: { message },\n        });\n        this._sendResponse(response);\n        this._connected = false;\n        this._eventManager.trigger({\n            event: \"disconnect\",\n            params: [{ message }],\n        });\n        this._removeStorageSession();\n    }\n    updateSession(sessionStatus) {\n        if (!this._connected) {\n            throw new Error(ERROR_SESSION_DISCONNECTED);\n        }\n        this.chainId = sessionStatus.chainId;\n        this.accounts = sessionStatus.accounts;\n        this.networkId = sessionStatus.networkId || 0;\n        this.rpcUrl = sessionStatus.rpcUrl || \"\";\n        const sessionParams = {\n            approved: true,\n            chainId: this.chainId,\n            networkId: this.networkId,\n            accounts: this.accounts,\n            rpcUrl: this.rpcUrl,\n        };\n        const request = this._formatRequest({\n            method: \"wc_sessionUpdate\",\n            params: [sessionParams],\n        });\n        this._sendSessionRequest(request, \"Session update rejected\");\n        this._eventManager.trigger({\n            event: \"session_update\",\n            params: [\n                {\n                    chainId: this.chainId,\n                    accounts: this.accounts,\n                },\n            ],\n        });\n        this._manageStorageSession();\n    }\n    async killSession(sessionError) {\n        const message = sessionError ? sessionError.message : \"Session Disconnected\";\n        const sessionParams = {\n            approved: false,\n            chainId: null,\n            networkId: null,\n            accounts: null,\n        };\n        const request = this._formatRequest({\n            method: \"wc_sessionUpdate\",\n            params: [sessionParams],\n        });\n        await this._sendRequest(request);\n        this._handleSessionDisconnect(message);\n    }\n    async sendTransaction(tx) {\n        if (!this._connected) {\n            throw new Error(ERROR_SESSION_DISCONNECTED);\n        }\n        const parsedTx = parseTransactionData(tx);\n        const request = this._formatRequest({\n            method: \"eth_sendTransaction\",\n            params: [parsedTx],\n        });\n        const result = await this._sendCallRequest(request);\n        return result;\n    }\n    async signTransaction(tx) {\n        if (!this._connected) {\n            throw new Error(ERROR_SESSION_DISCONNECTED);\n        }\n        const parsedTx = parseTransactionData(tx);\n        const request = this._formatRequest({\n            method: \"eth_signTransaction\",\n            params: [parsedTx],\n        });\n        const result = await this._sendCallRequest(request);\n        return result;\n    }\n    async signMessage(params) {\n        if (!this._connected) {\n            throw new Error(ERROR_SESSION_DISCONNECTED);\n        }\n        const request = this._formatRequest({\n            method: \"eth_sign\",\n            params,\n        });\n        const result = await this._sendCallRequest(request);\n        return result;\n    }\n    async signPersonalMessage(params) {\n        if (!this._connected) {\n            throw new Error(ERROR_SESSION_DISCONNECTED);\n        }\n        params = parsePersonalSign(params);\n        const request = this._formatRequest({\n            method: \"personal_sign\",\n            params,\n        });\n        const result = await this._sendCallRequest(request);\n        return result;\n    }\n    async signTypedData(params) {\n        if (!this._connected) {\n            throw new Error(ERROR_SESSION_DISCONNECTED);\n        }\n        const request = this._formatRequest({\n            method: \"eth_signTypedData\",\n            params,\n        });\n        const result = await this._sendCallRequest(request);\n        return result;\n    }\n    async updateChain(chainParams) {\n        if (!this._connected) {\n            throw new Error(\"Session currently disconnected\");\n        }\n        const request = this._formatRequest({\n            method: \"wallet_updateChain\",\n            params: [chainParams],\n        });\n        const result = await this._sendCallRequest(request);\n        return result;\n    }\n    unsafeSend(request, options) {\n        this._sendRequest(request, options);\n        this._eventManager.trigger({\n            event: \"call_request_sent\",\n            params: [{ request, options }],\n        });\n        return new Promise((resolve, reject) => {\n            this._subscribeToResponse(request.id, (error, payload) => {\n                if (error) {\n                    reject(error);\n                    return;\n                }\n                if (!payload) {\n                    throw new Error(ERROR_MISSING_JSON_RPC);\n                }\n                resolve(payload);\n            });\n        });\n    }\n    async sendCustomRequest(request, options) {\n        if (!this._connected) {\n            throw new Error(ERROR_SESSION_DISCONNECTED);\n        }\n        switch (request.method) {\n            case \"eth_accounts\":\n                return this.accounts;\n            case \"eth_chainId\":\n                return convertNumberToHex(this.chainId);\n            case \"eth_sendTransaction\":\n            case \"eth_signTransaction\":\n                if (request.params) {\n                    request.params[0] = parseTransactionData(request.params[0]);\n                }\n                break;\n            case \"personal_sign\":\n                if (request.params) {\n                    request.params = parsePersonalSign(request.params);\n                }\n                break;\n            default:\n                break;\n        }\n        const formattedRequest = this._formatRequest(request);\n        const result = await this._sendCallRequest(formattedRequest, options);\n        return result;\n    }\n    approveRequest(response) {\n        if (isJsonRpcResponseSuccess(response)) {\n            const formattedResponse = this._formatResponse(response);\n            this._sendResponse(formattedResponse);\n        }\n        else {\n            throw new Error(ERROR_MISSING_RESULT);\n        }\n    }\n    rejectRequest(response) {\n        if (isJsonRpcResponseError(response)) {\n            const formattedResponse = this._formatResponse(response);\n            this._sendResponse(formattedResponse);\n        }\n        else {\n            throw new Error(ERROR_MISSING_ERROR);\n        }\n    }\n    transportClose() {\n        this._transport.close();\n    }\n    async _sendRequest(request, options) {\n        const callRequest = this._formatRequest(request);\n        const encryptionPayload = await this._encrypt(callRequest);\n        const topic = typeof (options === null || options === void 0 ? void 0 : options.topic) !== \"undefined\" ? options.topic : this.peerId;\n        const payload = JSON.stringify(encryptionPayload);\n        const silent = typeof (options === null || options === void 0 ? void 0 : options.forcePushNotification) !== \"undefined\"\n            ? !options.forcePushNotification\n            : isSilentPayload(callRequest);\n        this._transport.send(payload, topic, silent);\n    }\n    async _sendResponse(response) {\n        const encryptionPayload = await this._encrypt(response);\n        const topic = this.peerId;\n        const payload = JSON.stringify(encryptionPayload);\n        const silent = true;\n        this._transport.send(payload, topic, silent);\n    }\n    async _sendSessionRequest(request, errorMsg, options) {\n        this._sendRequest(request, options);\n        this._subscribeToSessionResponse(request.id, errorMsg);\n    }\n    _sendCallRequest(request, options) {\n        this._sendRequest(request, options);\n        this._eventManager.trigger({\n            event: \"call_request_sent\",\n            params: [{ request, options }],\n        });\n        return this._subscribeToCallResponse(request.id);\n    }\n    _formatRequest(request) {\n        if (typeof request.method === \"undefined\") {\n            throw new Error(ERROR_MISSING_METHOD);\n        }\n        const formattedRequest = {\n            id: typeof request.id === \"undefined\" ? payloadId() : request.id,\n            jsonrpc: \"2.0\",\n            method: request.method,\n            params: typeof request.params === \"undefined\" ? [] : request.params,\n        };\n        return formattedRequest;\n    }\n    _formatResponse(response) {\n        if (typeof response.id === \"undefined\") {\n            throw new Error(ERROR_MISSING_ID);\n        }\n        const baseResponse = { id: response.id, jsonrpc: \"2.0\" };\n        if (isJsonRpcResponseError(response)) {\n            const error = formatRpcError(response.error);\n            const errorResponse = Object.assign(Object.assign(Object.assign({}, baseResponse), response), { error });\n            return errorResponse;\n        }\n        else if (isJsonRpcResponseSuccess(response)) {\n            const successResponse = Object.assign(Object.assign({}, baseResponse), response);\n            return successResponse;\n        }\n        throw new Error(ERROR_INVALID_RESPONSE);\n    }\n    _handleSessionDisconnect(errorMsg) {\n        const message = errorMsg || \"Session Disconnected\";\n        if (!this._connected) {\n            if (this._qrcodeModal) {\n                this._qrcodeModal.close();\n            }\n            removeLocal(mobileLinkChoiceKey);\n        }\n        if (this._connected) {\n            this._connected = false;\n        }\n        if (this._handshakeId) {\n            this._handshakeId = 0;\n        }\n        if (this._handshakeTopic) {\n            this._handshakeTopic = \"\";\n        }\n        if (this._peerId) {\n            this._peerId = \"\";\n        }\n        this._eventManager.trigger({\n            event: \"disconnect\",\n            params: [{ message }],\n        });\n        this._removeStorageSession();\n        this.transportClose();\n    }\n    _handleSessionResponse(errorMsg, sessionParams) {\n        if (sessionParams) {\n            if (sessionParams.approved) {\n                if (!this._connected) {\n                    this._connected = true;\n                    if (sessionParams.chainId) {\n                        this.chainId = sessionParams.chainId;\n                    }\n                    if (sessionParams.accounts) {\n                        this.accounts = sessionParams.accounts;\n                    }\n                    if (sessionParams.peerId && !this.peerId) {\n                        this.peerId = sessionParams.peerId;\n                    }\n                    if (sessionParams.peerMeta && !this.peerMeta) {\n                        this.peerMeta = sessionParams.peerMeta;\n                    }\n                    this._eventManager.trigger({\n                        event: \"connect\",\n                        params: [\n                            {\n                                peerId: this.peerId,\n                                peerMeta: this.peerMeta,\n                                chainId: this.chainId,\n                                accounts: this.accounts,\n                            },\n                        ],\n                    });\n                }\n                else {\n                    if (sessionParams.chainId) {\n                        this.chainId = sessionParams.chainId;\n                    }\n                    if (sessionParams.accounts) {\n                        this.accounts = sessionParams.accounts;\n                    }\n                    this._eventManager.trigger({\n                        event: \"session_update\",\n                        params: [\n                            {\n                                chainId: this.chainId,\n                                accounts: this.accounts,\n                            },\n                        ],\n                    });\n                }\n                this._manageStorageSession();\n            }\n            else {\n                this._handleSessionDisconnect(errorMsg);\n            }\n        }\n        else {\n            this._handleSessionDisconnect(errorMsg);\n        }\n    }\n    async _handleIncomingMessages(socketMessage) {\n        const activeTopics = [this.clientId, this.handshakeTopic];\n        if (!activeTopics.includes(socketMessage.topic)) {\n            return;\n        }\n        let encryptionPayload;\n        try {\n            encryptionPayload = JSON.parse(socketMessage.payload);\n        }\n        catch (error) {\n            return;\n        }\n        const payload = await this._decrypt(encryptionPayload);\n        if (payload) {\n            this._eventManager.trigger(payload);\n        }\n    }\n    _subscribeToSessionRequest() {\n        this._transport.subscribe(this.handshakeTopic);\n    }\n    _subscribeToResponse(id, callback) {\n        this.on(`response:${id}`, callback);\n    }\n    _subscribeToSessionResponse(id, errorMsg) {\n        this._subscribeToResponse(id, (error, payload) => {\n            if (error) {\n                this._handleSessionResponse(error.message);\n                return;\n            }\n            if (isJsonRpcResponseSuccess(payload)) {\n                this._handleSessionResponse(errorMsg, payload.result);\n            }\n            else if (payload.error && payload.error.message) {\n                this._handleSessionResponse(payload.error.message);\n            }\n            else {\n                this._handleSessionResponse(errorMsg);\n            }\n        });\n    }\n    _subscribeToCallResponse(id) {\n        return new Promise((resolve, reject) => {\n            this._subscribeToResponse(id, (error, payload) => {\n                if (error) {\n                    reject(error);\n                    return;\n                }\n                if (isJsonRpcResponseSuccess(payload)) {\n                    resolve(payload.result);\n                }\n                else if (payload.error && payload.error.message) {\n                    reject(payload.error);\n                }\n                else {\n                    reject(new Error(ERROR_INVALID_RESPONSE));\n                }\n            });\n        });\n    }\n    _subscribeToInternalEvents() {\n        this.on(\"display_uri\", () => {\n            if (this._qrcodeModal) {\n                this._qrcodeModal.open(this.uri, () => {\n                    this._eventManager.trigger({\n                        event: \"modal_closed\",\n                        params: [],\n                    });\n                }, this._qrcodeModalOptions);\n            }\n        });\n        this.on(\"connect\", () => {\n            if (this._qrcodeModal) {\n                this._qrcodeModal.close();\n            }\n        });\n        this.on(\"call_request_sent\", (error, payload) => {\n            const { request } = payload.params[0];\n            if (isMobile() && this._signingMethods.includes(request.method)) {\n                const mobileLinkUrl = getLocal(mobileLinkChoiceKey);\n                if (mobileLinkUrl) {\n                    window.location.href = mobileLinkUrl.href;\n                }\n            }\n        });\n        this.on(\"wc_sessionRequest\", (error, payload) => {\n            if (error) {\n                this._eventManager.trigger({\n                    event: \"error\",\n                    params: [\n                        {\n                            code: \"SESSION_REQUEST_ERROR\",\n                            message: error.toString(),\n                        },\n                    ],\n                });\n            }\n            this.handshakeId = payload.id;\n            this.peerId = payload.params[0].peerId;\n            this.peerMeta = payload.params[0].peerMeta;\n            const internalPayload = Object.assign(Object.assign({}, payload), { method: \"session_request\" });\n            this._eventManager.trigger(internalPayload);\n        });\n        this.on(\"wc_sessionUpdate\", (error, payload) => {\n            if (error) {\n                this._handleSessionResponse(error.message);\n            }\n            this._handleSessionResponse(\"Session disconnected\", payload.params[0]);\n        });\n    }\n    _initTransport() {\n        this._transport.on(\"message\", (socketMessage) => this._handleIncomingMessages(socketMessage));\n        this._transport.on(\"open\", () => this._eventManager.trigger({ event: \"transport_open\", params: [] }));\n        this._transport.on(\"close\", () => this._eventManager.trigger({ event: \"transport_close\", params: [] }));\n        this._transport.on(\"error\", () => this._eventManager.trigger({\n            event: \"transport_error\",\n            params: [\"Websocket connection failed\"],\n        }));\n        this._transport.open();\n    }\n    _formatUri() {\n        const protocol = this.protocol;\n        const handshakeTopic = this.handshakeTopic;\n        const version = this.version;\n        const bridge = encodeURIComponent(this.bridge);\n        const key = this.key;\n        const uri = `${protocol}:${handshakeTopic}@${version}?bridge=${bridge}&key=${key}`;\n        return uri;\n    }\n    _parseUri(uri) {\n        const result = parseWalletConnectUri(uri);\n        if (result.protocol === this.protocol) {\n            if (!result.handshakeTopic) {\n                throw Error(\"Invalid or missing handshakeTopic parameter value\");\n            }\n            const handshakeTopic = result.handshakeTopic;\n            if (!result.bridge) {\n                throw Error(\"Invalid or missing bridge url parameter value\");\n            }\n            const bridge = decodeURIComponent(result.bridge);\n            if (!result.key) {\n                throw Error(\"Invalid or missing key parameter value\");\n            }\n            const key = result.key;\n            return { handshakeTopic, bridge, key };\n        }\n        else {\n            throw new Error(ERROR_INVALID_URI);\n        }\n    }\n    async _generateKey() {\n        if (this._cryptoLib) {\n            const result = await this._cryptoLib.generateKey();\n            return result;\n        }\n        return null;\n    }\n    async _encrypt(data) {\n        const key = this._key;\n        if (this._cryptoLib && key) {\n            const result = await this._cryptoLib.encrypt(data, key);\n            return result;\n        }\n        return null;\n    }\n    async _decrypt(payload) {\n        const key = this._key;\n        if (this._cryptoLib && key) {\n            const result = await this._cryptoLib.decrypt(payload, key);\n            return result;\n        }\n        return null;\n    }\n    _getStorageSession() {\n        let result = null;\n        if (this._sessionStorage) {\n            result = this._sessionStorage.getSession();\n        }\n        return result;\n    }\n    _setStorageSession() {\n        if (this._sessionStorage) {\n            this._sessionStorage.setSession(this.session);\n        }\n    }\n    _removeStorageSession() {\n        if (this._sessionStorage) {\n            this._sessionStorage.removeSession();\n        }\n    }\n    _manageStorageSession() {\n        if (this._connected) {\n            this._setStorageSession();\n        }\n        else {\n            this._removeStorageSession();\n        }\n    }\n    _registerPushServer(pushServerOpts) {\n        if (!pushServerOpts.url || typeof pushServerOpts.url !== \"string\") {\n            throw Error(\"Invalid or missing pushServerOpts.url parameter value\");\n        }\n        if (!pushServerOpts.type || typeof pushServerOpts.type !== \"string\") {\n            throw Error(\"Invalid or missing pushServerOpts.type parameter value\");\n        }\n        if (!pushServerOpts.token || typeof pushServerOpts.token !== \"string\") {\n            throw Error(\"Invalid or missing pushServerOpts.token parameter value\");\n        }\n        const pushSubscription = {\n            bridge: this.bridge,\n            topic: this.clientId,\n            type: pushServerOpts.type,\n            token: pushServerOpts.token,\n            peerName: \"\",\n            language: pushServerOpts.language || \"\",\n        };\n        this.on(\"connect\", async (error, payload) => {\n            if (error) {\n                throw error;\n            }\n            if (pushServerOpts.peerMeta) {\n                const peerName = payload.params[0].peerMeta.name;\n                pushSubscription.peerName = peerName;\n            }\n            try {\n                const response = await fetch(`${pushServerOpts.url}/new`, {\n                    method: \"POST\",\n                    headers: {\n                        Accept: \"application/json\",\n                        \"Content-Type\": \"application/json\",\n                    },\n                    body: JSON.stringify(pushSubscription),\n                });\n                const json = await response.json();\n                if (!json.success) {\n                    throw Error(\"Failed to register in Push Server\");\n                }\n            }\n            catch (error) {\n                throw Error(\"Failed to register in Push Server\");\n            }\n        });\n    }\n}\nexport default Connector;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}