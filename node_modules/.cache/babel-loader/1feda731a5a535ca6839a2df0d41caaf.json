{"ast":null,"code":"import _toConsumableArray from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { logger, getEventDescription, stringMatchesSomePattern } from '@sentry/utils';\n\n// \"Script error.\" is hard coded into browsers for errors that it can't read.\n// this is the result of a script being pulled in from an external domain and CORS.\nvar DEFAULT_IGNORE_ERRORS = [/^Script error\\.?$/, /^Javascript error: Script error\\.? on line 0$/];\n\n/** Options for the InboundFilters integration */\n\n/** Inbound filters configurable by the user */\nvar InboundFilters = /*#__PURE__*/function () {\n  function InboundFilters() {\n    var _options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, InboundFilters);\n    ;\n    this._options = _options;\n    InboundFilters.prototype.__init.call(this);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  _createClass(InboundFilters, [{\n    key: \"__init\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __init() {\n      this.name = InboundFilters.id;\n    }\n  }, {\n    key: \"setupOnce\",\n    value: function setupOnce(addGlobalEventProcessor, getCurrentHub) {\n      var eventProcess = function eventProcess(event) {\n        var hub = getCurrentHub();\n        if (hub) {\n          var self = hub.getIntegration(InboundFilters);\n          if (self) {\n            var client = hub.getClient();\n            var clientOptions = client ? client.getOptions() : {};\n            var options = _mergeOptions(self._options, clientOptions);\n            return _shouldDropEvent(event, options) ? null : event;\n          }\n        }\n        return event;\n      };\n      eventProcess.id = this.name;\n      addGlobalEventProcessor(eventProcess);\n    }\n  }], [{\n    key: \"__initStatic\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __initStatic() {\n      this.id = 'InboundFilters';\n    }\n  }]);\n  return InboundFilters;\n}();\nInboundFilters.__initStatic();\n\n/** JSDoc */\nfunction _mergeOptions() {\n  var internalOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var clientOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return {\n    allowUrls: [].concat(_toConsumableArray(internalOptions.allowUrls || []), _toConsumableArray(clientOptions.allowUrls || [])),\n    denyUrls: [].concat(_toConsumableArray(internalOptions.denyUrls || []), _toConsumableArray(clientOptions.denyUrls || [])),\n    ignoreErrors: [].concat(_toConsumableArray(internalOptions.ignoreErrors || []), _toConsumableArray(clientOptions.ignoreErrors || []), DEFAULT_IGNORE_ERRORS),\n    ignoreInternal: internalOptions.ignoreInternal !== undefined ? internalOptions.ignoreInternal : true\n  };\n}\n\n/** JSDoc */\nfunction _shouldDropEvent(event, options) {\n  if (options.ignoreInternal && _isSentryError(event)) {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.warn(\"Event dropped due to being internal Sentry Error.\\nEvent: \".concat(getEventDescription(event)));\n    return true;\n  }\n  if (_isIgnoredError(event, options.ignoreErrors)) {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.warn(\"Event dropped due to being matched by `ignoreErrors` option.\\nEvent: \".concat(getEventDescription(event)));\n    return true;\n  }\n  if (_isDeniedUrl(event, options.denyUrls)) {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.warn(\"Event dropped due to being matched by `denyUrls` option.\\nEvent: \".concat(getEventDescription(event), \".\\nUrl: \").concat(_getEventFilterUrl(event)));\n    return true;\n  }\n  if (!_isAllowedUrl(event, options.allowUrls)) {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.warn(\"Event dropped due to not being matched by `allowUrls` option.\\nEvent: \".concat(getEventDescription(event), \".\\nUrl: \").concat(_getEventFilterUrl(event)));\n    return true;\n  }\n  return false;\n}\nfunction _isIgnoredError(event, ignoreErrors) {\n  if (!ignoreErrors || !ignoreErrors.length) {\n    return false;\n  }\n  return _getPossibleEventMessages(event).some(function (message) {\n    return stringMatchesSomePattern(message, ignoreErrors);\n  });\n}\nfunction _isDeniedUrl(event, denyUrls) {\n  // TODO: Use Glob instead?\n  if (!denyUrls || !denyUrls.length) {\n    return false;\n  }\n  var url = _getEventFilterUrl(event);\n  return !url ? false : stringMatchesSomePattern(url, denyUrls);\n}\nfunction _isAllowedUrl(event, allowUrls) {\n  // TODO: Use Glob instead?\n  if (!allowUrls || !allowUrls.length) {\n    return true;\n  }\n  var url = _getEventFilterUrl(event);\n  return !url ? true : stringMatchesSomePattern(url, allowUrls);\n}\nfunction _getPossibleEventMessages(event) {\n  if (event.message) {\n    return [event.message];\n  }\n  if (event.exception) {\n    try {\n      var _ref = event.exception.values && event.exception.values[0] || {},\n        _ref$type = _ref.type,\n        type = _ref$type === void 0 ? '' : _ref$type,\n        _ref$value = _ref.value,\n        value = _ref$value === void 0 ? '' : _ref$value;\n      return [\"\".concat(value), \"\".concat(type, \": \").concat(value)];\n    } catch (oO) {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.error(\"Cannot extract message for event \".concat(getEventDescription(event)));\n      return [];\n    }\n  }\n  return [];\n}\nfunction _isSentryError(event) {\n  try {\n    // @ts-ignore can't be a sentry error if undefined\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    return event.exception.values[0].type === 'SentryError';\n  } catch (e) {\n    // ignore\n  }\n  return false;\n}\nfunction _getLastValidUrl() {\n  var frames = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  for (var i = frames.length - 1; i >= 0; i--) {\n    var frame = frames[i];\n    if (frame && frame.filename !== '<anonymous>' && frame.filename !== '[native code]') {\n      return frame.filename || null;\n    }\n  }\n  return null;\n}\nfunction _getEventFilterUrl(event) {\n  try {\n    var frames;\n    try {\n      // @ts-ignore we only care about frames if the whole thing here is defined\n      frames = event.exception.values[0].stacktrace.frames;\n    } catch (e) {\n      // ignore\n    }\n    return frames ? _getLastValidUrl(frames) : null;\n  } catch (oO) {\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.error(\"Cannot extract url for event \".concat(getEventDescription(event)));\n    return null;\n  }\n}\nexport { InboundFilters, _mergeOptions, _shouldDropEvent };","map":{"version":3,"sources":["../../../src/integrations/inboundfilters.ts"],"names":[],"mappings":"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","sourcesContent":["import { Event, EventProcessor, Hub, Integration, StackFrame } from '@sentry/types';\nimport { getEventDescription, logger, stringMatchesSomePattern } from '@sentry/utils';\n\n// \"Script error.\" is hard coded into browsers for errors that it can't read.\n// this is the result of a script being pulled in from an external domain and CORS.\nconst DEFAULT_IGNORE_ERRORS = [/^Script error\\.?$/, /^Javascript error: Script error\\.? on line 0$/];\n\n/** Options for the InboundFilters integration */\nexport interface InboundFiltersOptions {\n  allowUrls: Array<string | RegExp>;\n  denyUrls: Array<string | RegExp>;\n  ignoreErrors: Array<string | RegExp>;\n  ignoreInternal: boolean;\n}\n\n/** Inbound filters configurable by the user */\nexport class InboundFilters implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'InboundFilters';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = InboundFilters.id;\n\n  public constructor(private readonly _options: Partial<InboundFiltersOptions> = {}) {}\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(addGlobalEventProcessor: (processor: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    const eventProcess: EventProcessor = (event: Event) => {\n      const hub = getCurrentHub();\n      if (hub) {\n        const self = hub.getIntegration(InboundFilters);\n        if (self) {\n          const client = hub.getClient();\n          const clientOptions = client ? client.getOptions() : {};\n          const options = _mergeOptions(self._options, clientOptions);\n          return _shouldDropEvent(event, options) ? null : event;\n        }\n      }\n      return event;\n    };\n\n    eventProcess.id = this.name;\n    addGlobalEventProcessor(eventProcess);\n  }\n}\n\n/** JSDoc */\nexport function _mergeOptions(\n  internalOptions: Partial<InboundFiltersOptions> = {},\n  clientOptions: Partial<InboundFiltersOptions> = {},\n): Partial<InboundFiltersOptions> {\n  return {\n    allowUrls: [...(internalOptions.allowUrls || []), ...(clientOptions.allowUrls || [])],\n    denyUrls: [...(internalOptions.denyUrls || []), ...(clientOptions.denyUrls || [])],\n    ignoreErrors: [\n      ...(internalOptions.ignoreErrors || []),\n      ...(clientOptions.ignoreErrors || []),\n      ...DEFAULT_IGNORE_ERRORS,\n    ],\n    ignoreInternal: internalOptions.ignoreInternal !== undefined ? internalOptions.ignoreInternal : true,\n  };\n}\n\n/** JSDoc */\nexport function _shouldDropEvent(event: Event, options: Partial<InboundFiltersOptions>): boolean {\n  if (options.ignoreInternal && _isSentryError(event)) {\n    __DEBUG_BUILD__ &&\n      logger.warn(`Event dropped due to being internal Sentry Error.\\nEvent: ${getEventDescription(event)}`);\n    return true;\n  }\n  if (_isIgnoredError(event, options.ignoreErrors)) {\n    __DEBUG_BUILD__ &&\n      logger.warn(\n        `Event dropped due to being matched by \\`ignoreErrors\\` option.\\nEvent: ${getEventDescription(event)}`,\n      );\n    return true;\n  }\n  if (_isDeniedUrl(event, options.denyUrls)) {\n    __DEBUG_BUILD__ &&\n      logger.warn(\n        `Event dropped due to being matched by \\`denyUrls\\` option.\\nEvent: ${getEventDescription(\n          event,\n        )}.\\nUrl: ${_getEventFilterUrl(event)}`,\n      );\n    return true;\n  }\n  if (!_isAllowedUrl(event, options.allowUrls)) {\n    __DEBUG_BUILD__ &&\n      logger.warn(\n        `Event dropped due to not being matched by \\`allowUrls\\` option.\\nEvent: ${getEventDescription(\n          event,\n        )}.\\nUrl: ${_getEventFilterUrl(event)}`,\n      );\n    return true;\n  }\n  return false;\n}\n\nfunction _isIgnoredError(event: Event, ignoreErrors?: Array<string | RegExp>): boolean {\n  if (!ignoreErrors || !ignoreErrors.length) {\n    return false;\n  }\n\n  return _getPossibleEventMessages(event).some(message => stringMatchesSomePattern(message, ignoreErrors));\n}\n\nfunction _isDeniedUrl(event: Event, denyUrls?: Array<string | RegExp>): boolean {\n  // TODO: Use Glob instead?\n  if (!denyUrls || !denyUrls.length) {\n    return false;\n  }\n  const url = _getEventFilterUrl(event);\n  return !url ? false : stringMatchesSomePattern(url, denyUrls);\n}\n\nfunction _isAllowedUrl(event: Event, allowUrls?: Array<string | RegExp>): boolean {\n  // TODO: Use Glob instead?\n  if (!allowUrls || !allowUrls.length) {\n    return true;\n  }\n  const url = _getEventFilterUrl(event);\n  return !url ? true : stringMatchesSomePattern(url, allowUrls);\n}\n\nfunction _getPossibleEventMessages(event: Event): string[] {\n  if (event.message) {\n    return [event.message];\n  }\n  if (event.exception) {\n    try {\n      const { type = '', value = '' } = (event.exception.values && event.exception.values[0]) || {};\n      return [`${value}`, `${type}: ${value}`];\n    } catch (oO) {\n      __DEBUG_BUILD__ && logger.error(`Cannot extract message for event ${getEventDescription(event)}`);\n      return [];\n    }\n  }\n  return [];\n}\n\nfunction _isSentryError(event: Event): boolean {\n  try {\n    // @ts-ignore can't be a sentry error if undefined\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    return event.exception.values[0].type === 'SentryError';\n  } catch (e) {\n    // ignore\n  }\n  return false;\n}\n\nfunction _getLastValidUrl(frames: StackFrame[] = []): string | null {\n  for (let i = frames.length - 1; i >= 0; i--) {\n    const frame = frames[i];\n\n    if (frame && frame.filename !== '<anonymous>' && frame.filename !== '[native code]') {\n      return frame.filename || null;\n    }\n  }\n\n  return null;\n}\n\nfunction _getEventFilterUrl(event: Event): string | null {\n  try {\n    let frames;\n    try {\n      // @ts-ignore we only care about frames if the whole thing here is defined\n      frames = event.exception.values[0].stacktrace.frames;\n    } catch (e) {\n      // ignore\n    }\n    return frames ? _getLastValidUrl(frames) : null;\n  } catch (oO) {\n    __DEBUG_BUILD__ && logger.error(`Cannot extract url for event ${getEventDescription(event)}`);\n    return null;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}