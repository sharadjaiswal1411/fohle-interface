{"ast":null,"code":"var _s = $RefreshSig$();\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { NEVER_RELOAD, useSingleCallResult } from 'lib/hooks/multicall';\nimport { useMemo } from 'react';\nimport { useV3NFTPositionManagerContract } from './useContract';\nconst STARTS_WITH = 'data:application/json;base64,';\nexport function usePositionTokenURI(tokenId) {\n  _s();\n  const contract = useV3NFTPositionManagerContract();\n  const inputs = useMemo(() => [tokenId instanceof BigNumber ? tokenId.toHexString() : tokenId === null || tokenId === void 0 ? void 0 : tokenId.toString(16)], [tokenId]);\n  const {\n    result,\n    error,\n    loading,\n    valid\n  } = useSingleCallResult(contract, 'tokenURI', inputs, {\n    ...NEVER_RELOAD,\n    gasRequired: 3000000\n  });\n  return useMemo(() => {\n    if (error || !valid || !tokenId) {\n      return {\n        valid: false,\n        loading: false\n      };\n    }\n    if (loading) {\n      return {\n        valid: true,\n        loading: true\n      };\n    }\n    if (!result) {\n      return {\n        valid: false,\n        loading: false\n      };\n    }\n    const [tokenURI] = result;\n    if (!tokenURI || !tokenURI.startsWith(STARTS_WITH)) return {\n      valid: false,\n      loading: false\n    };\n    try {\n      const json = JSON.parse(atob(tokenURI.slice(STARTS_WITH.length)));\n      return {\n        valid: true,\n        loading: false,\n        result: json\n      };\n    } catch (error) {\n      return {\n        valid: false,\n        loading: false\n      };\n    }\n  }, [error, loading, result, tokenId, valid]);\n}\n_s(usePositionTokenURI, \"SCLtzeoN4yVO2UjcH/UMQ86G5Io=\", false, function () {\n  return [useV3NFTPositionManagerContract, useSingleCallResult];\n});","map":{"version":3,"names":["BigNumber","NEVER_RELOAD","useSingleCallResult","useMemo","useV3NFTPositionManagerContract","STARTS_WITH","usePositionTokenURI","tokenId","contract","inputs","toHexString","toString","result","error","loading","valid","gasRequired","tokenURI","startsWith","json","JSON","parse","atob","slice","length"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/hooks/usePositionTokenURI.ts"],"sourcesContent":["import { BigNumber } from '@ethersproject/bignumber'\nimport JSBI from 'jsbi'\nimport { NEVER_RELOAD, useSingleCallResult } from 'lib/hooks/multicall'\nimport { useMemo } from 'react'\n\nimport { useV3NFTPositionManagerContract } from './useContract'\n\ntype TokenId = number | JSBI | BigNumber\n\nconst STARTS_WITH = 'data:application/json;base64,'\n\ntype UsePositionTokenURIResult =\n  | {\n      valid: true\n      loading: false\n      result: {\n        name: string\n        description: string\n        image: string\n      }\n    }\n  | {\n      valid: false\n      loading: false\n    }\n  | {\n      valid: true\n      loading: true\n    }\n\nexport function usePositionTokenURI(tokenId: TokenId | undefined): UsePositionTokenURIResult {\n  const contract = useV3NFTPositionManagerContract()\n  const inputs = useMemo(\n    () => [tokenId instanceof BigNumber ? tokenId.toHexString() : tokenId?.toString(16)],\n    [tokenId]\n  )\n  const { result, error, loading, valid } = useSingleCallResult(contract, 'tokenURI', inputs, {\n    ...NEVER_RELOAD,\n    gasRequired: 3_000_000,\n  })\n\n  return useMemo(() => {\n    if (error || !valid || !tokenId) {\n      return {\n        valid: false,\n        loading: false,\n      }\n    }\n    if (loading) {\n      return {\n        valid: true,\n        loading: true,\n      }\n    }\n    if (!result) {\n      return {\n        valid: false,\n        loading: false,\n      }\n    }\n    const [tokenURI] = result as [string]\n    if (!tokenURI || !tokenURI.startsWith(STARTS_WITH))\n      return {\n        valid: false,\n        loading: false,\n      }\n\n    try {\n      const json = JSON.parse(atob(tokenURI.slice(STARTS_WITH.length)))\n\n      return {\n        valid: true,\n        loading: false,\n        result: json,\n      }\n    } catch (error) {\n      return { valid: false, loading: false }\n    }\n  }, [error, loading, result, tokenId, valid])\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,0BAA0B;AAEpD,SAASC,YAAY,EAAEC,mBAAmB,QAAQ,qBAAqB;AACvE,SAASC,OAAO,QAAQ,OAAO;AAE/B,SAASC,+BAA+B,QAAQ,eAAe;AAI/D,MAAMC,WAAW,GAAG,+BAA+B;AAqBnD,OAAO,SAASC,mBAAmB,CAACC,OAA4B,EAA6B;EAAA;EAC3F,MAAMC,QAAQ,GAAGJ,+BAA+B,EAAE;EAClD,MAAMK,MAAM,GAAGN,OAAO,CACpB,MAAM,CAACI,OAAO,YAAYP,SAAS,GAAGO,OAAO,CAACG,WAAW,EAAE,GAAGH,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEI,QAAQ,CAAC,EAAE,CAAC,CAAC,EACpF,CAACJ,OAAO,CAAC,CACV;EACD,MAAM;IAAEK,MAAM;IAAEC,KAAK;IAAEC,OAAO;IAAEC;EAAM,CAAC,GAAGb,mBAAmB,CAACM,QAAQ,EAAE,UAAU,EAAEC,MAAM,EAAE;IAC1F,GAAGR,YAAY;IACfe,WAAW,EAAE;EACf,CAAC,CAAC;EAEF,OAAOb,OAAO,CAAC,MAAM;IACnB,IAAIU,KAAK,IAAI,CAACE,KAAK,IAAI,CAACR,OAAO,EAAE;MAC/B,OAAO;QACLQ,KAAK,EAAE,KAAK;QACZD,OAAO,EAAE;MACX,CAAC;IACH;IACA,IAAIA,OAAO,EAAE;MACX,OAAO;QACLC,KAAK,EAAE,IAAI;QACXD,OAAO,EAAE;MACX,CAAC;IACH;IACA,IAAI,CAACF,MAAM,EAAE;MACX,OAAO;QACLG,KAAK,EAAE,KAAK;QACZD,OAAO,EAAE;MACX,CAAC;IACH;IACA,MAAM,CAACG,QAAQ,CAAC,GAAGL,MAAkB;IACrC,IAAI,CAACK,QAAQ,IAAI,CAACA,QAAQ,CAACC,UAAU,CAACb,WAAW,CAAC,EAChD,OAAO;MACLU,KAAK,EAAE,KAAK;MACZD,OAAO,EAAE;IACX,CAAC;IAEH,IAAI;MACF,MAAMK,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACL,QAAQ,CAACM,KAAK,CAAClB,WAAW,CAACmB,MAAM,CAAC,CAAC,CAAC;MAEjE,OAAO;QACLT,KAAK,EAAE,IAAI;QACXD,OAAO,EAAE,KAAK;QACdF,MAAM,EAAEO;MACV,CAAC;IACH,CAAC,CAAC,OAAON,KAAK,EAAE;MACd,OAAO;QAAEE,KAAK,EAAE,KAAK;QAAED,OAAO,EAAE;MAAM,CAAC;IACzC;EACF,CAAC,EAAE,CAACD,KAAK,EAAEC,OAAO,EAAEF,MAAM,EAAEL,OAAO,EAAEQ,KAAK,CAAC,CAAC;AAC9C;AAAC,GAjDeT,mBAAmB;EAAA,QAChBF,+BAA+B,EAKNF,mBAAmB;AAAA"},"metadata":{},"sourceType":"module"}