{"ast":null,"code":"var _s = $RefreshSig$();\nimport { skipToken } from '@reduxjs/toolkit/query/react';\nimport { CurrencyAmount, TradeType } from '@uniswap/sdk-core';\nimport { IMetric, setGlobalMetric } from '@uniswap/smart-order-router';\nimport { sendTiming } from 'components/analytics';\nimport { AVERAGE_L1_BLOCK_TIME } from 'constants/chainInfo';\nimport { useStablecoinAmountFromFiatValue } from 'hooks/useStablecoinPrice';\nimport { useRoutingAPIArguments } from 'lib/hooks/routing/useRoutingAPIArguments';\nimport useIsValidBlock from 'lib/hooks/useIsValidBlock';\nimport { useMemo } from 'react';\nimport { RouterPreference, useGetQuoteQuery } from 'state/routing/slice';\nimport { TradeState } from './types';\nimport { computeRoutes, transformRoutesToTrade } from './utils';\n\n/**\n * Returns the best trade by invoking the routing api or the smart order router on the client\n * @param tradeType whether the swap is an exact in/out\n * @param amountSpecified the exact amount to swap in/out\n * @param otherCurrency the desired output/payment currency\n */\nexport function useRoutingAPITrade(tradeType, amountSpecified, otherCurrency, routerPreference) {\n  _s();\n  var _useStablecoinAmountF;\n  const [currencyIn, currencyOut] = useMemo(() => tradeType === TradeType.EXACT_INPUT ? [amountSpecified === null || amountSpecified === void 0 ? void 0 : amountSpecified.currency, otherCurrency] : [otherCurrency, amountSpecified === null || amountSpecified === void 0 ? void 0 : amountSpecified.currency], [amountSpecified, otherCurrency, tradeType]);\n  const queryArgs = useRoutingAPIArguments({\n    tokenIn: currencyIn,\n    tokenOut: currencyOut,\n    amount: amountSpecified,\n    tradeType,\n    routerPreference\n  });\n  const {\n    isLoading,\n    isError,\n    data,\n    currentData\n  } = useGetQuoteQuery(queryArgs !== null && queryArgs !== void 0 ? queryArgs : skipToken, {\n    // Price-fetching is informational and costly, so it's done less frequently.\n    pollingInterval: routerPreference === RouterPreference.PRICE ? 120000 : AVERAGE_L1_BLOCK_TIME\n  });\n  const quoteResult = useIsValidBlock(Number(data === null || data === void 0 ? void 0 : data.blockNumber) || 0) ? data : undefined;\n  const route = useMemo(() => computeRoutes(currencyIn, currencyOut, tradeType, quoteResult), [currencyIn, currencyOut, quoteResult, tradeType]);\n\n  // get USD gas cost of trade in active chains stablecoin amount\n  const gasUseEstimateUSD = (_useStablecoinAmountF = useStablecoinAmountFromFiatValue(quoteResult === null || quoteResult === void 0 ? void 0 : quoteResult.gasUseEstimateUSD)) !== null && _useStablecoinAmountF !== void 0 ? _useStablecoinAmountF : null;\n  const isSyncing = currentData !== data;\n  return useMemo(() => {\n    if (!currencyIn || !currencyOut) {\n      return {\n        state: TradeState.INVALID,\n        trade: undefined\n      };\n    }\n    if (isLoading && !quoteResult) {\n      // only on first hook render\n      return {\n        state: TradeState.LOADING,\n        trade: undefined\n      };\n    }\n    let otherAmount = undefined;\n    if (quoteResult) {\n      if (tradeType === TradeType.EXACT_INPUT && currencyOut) {\n        otherAmount = CurrencyAmount.fromRawAmount(currencyOut, quoteResult.quote);\n      }\n      if (tradeType === TradeType.EXACT_OUTPUT && currencyIn) {\n        otherAmount = CurrencyAmount.fromRawAmount(currencyIn, quoteResult.quote);\n      }\n    }\n    if (isError || !otherAmount || !route || route.length === 0 || !queryArgs) {\n      return {\n        state: TradeState.NO_ROUTE_FOUND,\n        trade: undefined\n      };\n    }\n    try {\n      const trade = transformRoutesToTrade(route, tradeType, quoteResult === null || quoteResult === void 0 ? void 0 : quoteResult.blockNumber, gasUseEstimateUSD);\n      return {\n        // always return VALID regardless of isFetching status\n        state: isSyncing ? TradeState.SYNCING : TradeState.VALID,\n        trade\n      };\n    } catch (e) {\n      return {\n        state: TradeState.INVALID,\n        trade: undefined\n      };\n    }\n  }, [currencyIn, currencyOut, quoteResult, isLoading, tradeType, isError, route, queryArgs, gasUseEstimateUSD, isSyncing]);\n}\n\n// only want to enable this when app hook called\n_s(useRoutingAPITrade, \"bW2EGBK6OeGXo/JpC3777RNINHE=\", false, function () {\n  return [useRoutingAPIArguments, useGetQuoteQuery, useIsValidBlock, useStablecoinAmountFromFiatValue];\n});\nclass GAMetric extends IMetric {\n  putDimensions() {\n    return;\n  }\n  putMetric(key, value, unit) {\n    sendTiming('Routing API', `${key} | ${unit}`, value, 'client');\n  }\n}\nsetGlobalMetric(new GAMetric());","map":{"version":3,"names":["skipToken","CurrencyAmount","TradeType","IMetric","setGlobalMetric","sendTiming","AVERAGE_L1_BLOCK_TIME","useStablecoinAmountFromFiatValue","useRoutingAPIArguments","useIsValidBlock","useMemo","RouterPreference","useGetQuoteQuery","TradeState","computeRoutes","transformRoutesToTrade","useRoutingAPITrade","tradeType","amountSpecified","otherCurrency","routerPreference","currencyIn","currencyOut","EXACT_INPUT","currency","queryArgs","tokenIn","tokenOut","amount","isLoading","isError","data","currentData","pollingInterval","PRICE","quoteResult","Number","blockNumber","undefined","route","gasUseEstimateUSD","isSyncing","state","INVALID","trade","LOADING","otherAmount","fromRawAmount","quote","EXACT_OUTPUT","length","NO_ROUTE_FOUND","SYNCING","VALID","e","GAMetric","putDimensions","putMetric","key","value","unit"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/state/routing/useRoutingAPITrade.ts"],"sourcesContent":["import { skipToken } from '@reduxjs/toolkit/query/react'\nimport { Currency, CurrencyAmount, TradeType } from '@uniswap/sdk-core'\nimport { IMetric, MetricLoggerUnit, setGlobalMetric } from '@uniswap/smart-order-router'\nimport { sendTiming } from 'components/analytics'\nimport { AVERAGE_L1_BLOCK_TIME } from 'constants/chainInfo'\nimport { useStablecoinAmountFromFiatValue } from 'hooks/useStablecoinPrice'\nimport { useRoutingAPIArguments } from 'lib/hooks/routing/useRoutingAPIArguments'\nimport useIsValidBlock from 'lib/hooks/useIsValidBlock'\nimport ms from 'ms.macro'\nimport { useMemo } from 'react'\nimport { RouterPreference, useGetQuoteQuery } from 'state/routing/slice'\n\nimport { GetQuoteResult, InterfaceTrade, TradeState } from './types'\nimport { computeRoutes, transformRoutesToTrade } from './utils'\n\n/**\n * Returns the best trade by invoking the routing api or the smart order router on the client\n * @param tradeType whether the swap is an exact in/out\n * @param amountSpecified the exact amount to swap in/out\n * @param otherCurrency the desired output/payment currency\n */\nexport function useRoutingAPITrade<TTradeType extends TradeType>(\n  tradeType: TTradeType,\n  amountSpecified: CurrencyAmount<Currency> | undefined,\n  otherCurrency: Currency | undefined,\n  routerPreference: RouterPreference\n): {\n  state: TradeState\n  trade: InterfaceTrade<Currency, Currency, TTradeType> | undefined\n} {\n  const [currencyIn, currencyOut]: [Currency | undefined, Currency | undefined] = useMemo(\n    () =>\n      tradeType === TradeType.EXACT_INPUT\n        ? [amountSpecified?.currency, otherCurrency]\n        : [otherCurrency, amountSpecified?.currency],\n    [amountSpecified, otherCurrency, tradeType]\n  )\n\n  const queryArgs = useRoutingAPIArguments({\n    tokenIn: currencyIn,\n    tokenOut: currencyOut,\n    amount: amountSpecified,\n    tradeType,\n    routerPreference,\n  })\n\n  const { isLoading, isError, data, currentData } = useGetQuoteQuery(queryArgs ?? skipToken, {\n    // Price-fetching is informational and costly, so it's done less frequently.\n    pollingInterval: routerPreference === RouterPreference.PRICE ? ms`2m` : AVERAGE_L1_BLOCK_TIME,\n  })\n\n  const quoteResult: GetQuoteResult | undefined = useIsValidBlock(Number(data?.blockNumber) || 0) ? data : undefined\n\n  const route = useMemo(\n    () => computeRoutes(currencyIn, currencyOut, tradeType, quoteResult),\n    [currencyIn, currencyOut, quoteResult, tradeType]\n  )\n\n  // get USD gas cost of trade in active chains stablecoin amount\n  const gasUseEstimateUSD = useStablecoinAmountFromFiatValue(quoteResult?.gasUseEstimateUSD) ?? null\n\n  const isSyncing = currentData !== data\n\n  return useMemo(() => {\n    if (!currencyIn || !currencyOut) {\n      return {\n        state: TradeState.INVALID,\n        trade: undefined,\n      }\n    }\n\n    if (isLoading && !quoteResult) {\n      // only on first hook render\n      return {\n        state: TradeState.LOADING,\n        trade: undefined,\n      }\n    }\n\n    let otherAmount = undefined\n    if (quoteResult) {\n      if (tradeType === TradeType.EXACT_INPUT && currencyOut) {\n        otherAmount = CurrencyAmount.fromRawAmount(currencyOut, quoteResult.quote)\n      }\n\n      if (tradeType === TradeType.EXACT_OUTPUT && currencyIn) {\n        otherAmount = CurrencyAmount.fromRawAmount(currencyIn, quoteResult.quote)\n      }\n    }\n\n    if (isError || !otherAmount || !route || route.length === 0 || !queryArgs) {\n      return {\n        state: TradeState.NO_ROUTE_FOUND,\n        trade: undefined,\n      }\n    }\n\n    try {\n      const trade = transformRoutesToTrade(route, tradeType, quoteResult?.blockNumber, gasUseEstimateUSD)\n      return {\n        // always return VALID regardless of isFetching status\n        state: isSyncing ? TradeState.SYNCING : TradeState.VALID,\n        trade,\n      }\n    } catch (e) {\n      return { state: TradeState.INVALID, trade: undefined }\n    }\n  }, [\n    currencyIn,\n    currencyOut,\n    quoteResult,\n    isLoading,\n    tradeType,\n    isError,\n    route,\n    queryArgs,\n    gasUseEstimateUSD,\n    isSyncing,\n  ])\n}\n\n// only want to enable this when app hook called\nclass GAMetric extends IMetric {\n  putDimensions() {\n    return\n  }\n\n  putMetric(key: string, value: number, unit?: MetricLoggerUnit) {\n    sendTiming('Routing API', `${key} | ${unit}`, value, 'client')\n  }\n}\n\nsetGlobalMetric(new GAMetric())\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}