{"ast":null,"code":"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nimport { Protocol } from '@uniswap/router-sdk';\nimport { AlphaRouter } from '@uniswap/smart-order-router';\nimport { RPC_PROVIDERS } from 'constants/providers';\nimport { getClientSideQuote, toSupportedChainId } from 'lib/hooks/routing/clientSideSmartOrderRouter';\nimport qs from 'qs';\nexport let RouterPreference;\n(function (RouterPreference) {\n  RouterPreference[\"API\"] = \"api\";\n  RouterPreference[\"CLIENT\"] = \"client\";\n  RouterPreference[\"PRICE\"] = \"price\";\n})(RouterPreference || (RouterPreference = {}));\nconst routers = new Map();\nfunction getRouter(chainId) {\n  const router = routers.get(chainId);\n  if (router) return router;\n  const supportedChainId = toSupportedChainId(chainId);\n  if (supportedChainId) {\n    const provider = RPC_PROVIDERS[supportedChainId];\n    const router = new AlphaRouter({\n      chainId,\n      provider\n    });\n    routers.set(chainId, router);\n    return router;\n  }\n  throw new Error(`Router does not support this chain (chainId: ${chainId}).`);\n}\n\n// routing API quote params: https://github.com/Uniswap/routing-api/blob/main/lib/handlers/quote/schema/quote-schema.ts\nconst API_QUERY_PARAMS = {\n  protocols: 'v2,v3,mixed'\n};\nconst CLIENT_PARAMS = {\n  protocols: [Protocol.V2, Protocol.V3, Protocol.MIXED]\n};\n// Price queries are tuned down to minimize the required RPCs to respond to them.\n// TODO(zzmp): This will be used after testing router caching.\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst PRICE_PARAMS = {\n  protocols: [Protocol.V2, Protocol.V3],\n  v2PoolSelection: {\n    topN: 2,\n    topNDirectSwaps: 1,\n    topNTokenInOut: 2,\n    topNSecondHop: 1,\n    topNWithEachBaseToken: 2,\n    topNWithBaseToken: 2\n  },\n  v3PoolSelection: {\n    topN: 2,\n    topNDirectSwaps: 1,\n    topNTokenInOut: 2,\n    topNSecondHop: 1,\n    topNWithEachBaseToken: 2,\n    topNWithBaseToken: 2\n  },\n  maxSwapsPerPath: 2,\n  minSplits: 1,\n  maxSplits: 1,\n  distributionPercent: 100\n};\nexport const routingApi = createApi({\n  reducerPath: 'routingApi',\n  baseQuery: fetchBaseQuery({\n    baseUrl: 'https://api.uniswap.org/v1/'\n  }),\n  endpoints: build => ({\n    getQuote: build.query({\n      async queryFn(args, _api, _extraOptions, fetch) {\n        const {\n          tokenInAddress,\n          tokenInChainId,\n          tokenOutAddress,\n          tokenOutChainId,\n          amount,\n          routerPreference,\n          type\n        } = args;\n        let result;\n        try {\n          if (routerPreference === RouterPreference.API) {\n            const query = qs.stringify({\n              ...API_QUERY_PARAMS,\n              tokenInAddress,\n              tokenInChainId,\n              tokenOutAddress,\n              tokenOutChainId,\n              amount,\n              type\n            });\n            result = await fetch(`quote?${query}`);\n          } else {\n            const router = getRouter(args.tokenInChainId);\n            result = await getClientSideQuote(args, router,\n            // TODO(zzmp): Use PRICE_PARAMS for RouterPreference.PRICE.\n            // This change is intentionally being deferred to first see what effect router caching has.\n            CLIENT_PARAMS);\n          }\n          return {\n            data: result.data\n          };\n        } catch (e) {\n          // TODO: fall back to client-side quoter when auto router fails.\n          // deprecate 'legacy' v2/v3 routers first.\n          return {\n            error: e\n          };\n        }\n      },\n      keepUnusedDataFor: 10000,\n      extraOptions: {\n        maxRetries: 0\n      }\n    })\n  })\n});\nexport const {\n  useGetQuoteQuery\n} = routingApi;","map":{"version":3,"names":["createApi","fetchBaseQuery","Protocol","AlphaRouter","RPC_PROVIDERS","getClientSideQuote","toSupportedChainId","qs","RouterPreference","routers","Map","getRouter","chainId","router","get","supportedChainId","provider","set","Error","API_QUERY_PARAMS","protocols","CLIENT_PARAMS","V2","V3","MIXED","PRICE_PARAMS","v2PoolSelection","topN","topNDirectSwaps","topNTokenInOut","topNSecondHop","topNWithEachBaseToken","topNWithBaseToken","v3PoolSelection","maxSwapsPerPath","minSplits","maxSplits","distributionPercent","routingApi","reducerPath","baseQuery","baseUrl","endpoints","build","getQuote","query","queryFn","args","_api","_extraOptions","fetch","tokenInAddress","tokenInChainId","tokenOutAddress","tokenOutChainId","amount","routerPreference","type","result","API","stringify","data","e","error","keepUnusedDataFor","extraOptions","maxRetries","useGetQuoteQuery"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/state/routing/slice.ts"],"sourcesContent":["import { createApi, fetchBaseQuery, FetchBaseQueryError } from '@reduxjs/toolkit/query/react'\nimport { Protocol } from '@uniswap/router-sdk'\nimport { AlphaRouter, ChainId } from '@uniswap/smart-order-router'\nimport { RPC_PROVIDERS } from 'constants/providers'\nimport { getClientSideQuote, toSupportedChainId } from 'lib/hooks/routing/clientSideSmartOrderRouter'\nimport ms from 'ms.macro'\nimport qs from 'qs'\nimport geckoTerminalApi from '../services/geckoTermial'\n\nimport { GetQuoteResult } from './types'\n\nexport enum RouterPreference {\n  API = 'api',\n  CLIENT = 'client',\n  PRICE = 'price',\n}\n\nconst routers = new Map<ChainId, AlphaRouter>()\nfunction getRouter(chainId: ChainId): AlphaRouter {\n  const router = routers.get(chainId)\n  if (router) return router\n\n  const supportedChainId = toSupportedChainId(chainId)\n  if (supportedChainId) {\n    const provider = RPC_PROVIDERS[supportedChainId]\n    const router = new AlphaRouter({ chainId, provider })\n    routers.set(chainId, router)\n    return router\n  }\n\n  throw new Error(`Router does not support this chain (chainId: ${chainId}).`)\n}\n\n// routing API quote params: https://github.com/Uniswap/routing-api/blob/main/lib/handlers/quote/schema/quote-schema.ts\nconst API_QUERY_PARAMS = {\n  protocols: 'v2,v3,mixed',\n}\nconst CLIENT_PARAMS = {\n  protocols: [Protocol.V2, Protocol.V3, Protocol.MIXED],\n}\n// Price queries are tuned down to minimize the required RPCs to respond to them.\n// TODO(zzmp): This will be used after testing router caching.\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst PRICE_PARAMS = {\n  protocols: [Protocol.V2, Protocol.V3],\n  v2PoolSelection: {\n    topN: 2,\n    topNDirectSwaps: 1,\n    topNTokenInOut: 2,\n    topNSecondHop: 1,\n    topNWithEachBaseToken: 2,\n    topNWithBaseToken: 2,\n  },\n  v3PoolSelection: {\n    topN: 2,\n    topNDirectSwaps: 1,\n    topNTokenInOut: 2,\n    topNSecondHop: 1,\n    topNWithEachBaseToken: 2,\n    topNWithBaseToken: 2,\n  },\n  maxSwapsPerPath: 2,\n  minSplits: 1,\n  maxSplits: 1,\n  distributionPercent: 100,\n}\n\nexport const routingApi = createApi({\n  reducerPath: 'routingApi',\n  baseQuery: fetchBaseQuery({\n    baseUrl: 'https://api.uniswap.org/v1/',\n  }),\n  endpoints: (build) => ({\n    getQuote: build.query<\n      GetQuoteResult,\n      {\n        tokenInAddress: string\n        tokenInChainId: ChainId\n        tokenInDecimals: number\n        tokenInSymbol?: string\n        tokenOutAddress: string\n        tokenOutChainId: ChainId\n        tokenOutDecimals: number\n        tokenOutSymbol?: string\n        amount: string\n        routerPreference: RouterPreference\n        type: 'exactIn' | 'exactOut'\n      }\n    >({\n      async queryFn(args, _api, _extraOptions, fetch) {\n        const { tokenInAddress, tokenInChainId, tokenOutAddress, tokenOutChainId, amount, routerPreference, type } =\n          args\n\n        let result\n\n        try {\n          if (routerPreference === RouterPreference.API) {\n            const query = qs.stringify({\n              ...API_QUERY_PARAMS,\n              tokenInAddress,\n              tokenInChainId,\n              tokenOutAddress,\n              tokenOutChainId,\n              amount,\n              type,\n            })\n            result = await fetch(`quote?${query}`)\n          } else {\n            const router = getRouter(args.tokenInChainId)\n            result = await getClientSideQuote(\n              args,\n              router,\n              // TODO(zzmp): Use PRICE_PARAMS for RouterPreference.PRICE.\n              // This change is intentionally being deferred to first see what effect router caching has.\n              CLIENT_PARAMS\n            )\n          }\n\n          return { data: result.data as GetQuoteResult }\n        } catch (e) {\n          // TODO: fall back to client-side quoter when auto router fails.\n          // deprecate 'legacy' v2/v3 routers first.\n          return { error: e as FetchBaseQueryError }\n        }\n      },\n      keepUnusedDataFor: ms`10s`,\n      extraOptions: {\n        maxRetries: 0,\n      },\n    }),\n  }),\n})\n\nexport const { useGetQuoteQuery } = routingApi\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}