{"ast":null,"code":"//     treeify.js\n//     Luke Plaster <notatestuser@gmail.com>\n//     https://github.com/notatestuser/treeify.js\n\n// do the universal module definition dance\n(function (root, factory) {\n  if (typeof exports === 'object') {\n    module.exports = factory();\n  } else if (typeof define === 'function' && define.amd) {\n    define(factory);\n  } else {\n    root.treeify = factory();\n  }\n})(this, function () {\n  function makePrefix(key, last) {\n    var str = last ? '└' : '├';\n    if (key) {\n      str += '─ ';\n    } else {\n      str += '──┐';\n    }\n    return str;\n  }\n  function filterKeys(obj, hideFunctions) {\n    var keys = [];\n    for (var branch in obj) {\n      // always exclude anything in the object's prototype\n      if (!obj.hasOwnProperty(branch)) {\n        continue;\n      }\n      // ... and hide any keys mapped to functions if we've been told to\n      if (hideFunctions && typeof obj[branch] === \"function\") {\n        continue;\n      }\n      keys.push(branch);\n    }\n    return keys;\n  }\n  function growBranch(key, root, last, lastStates, showValues, hideFunctions, callback) {\n    var line = '',\n      index = 0,\n      lastKey,\n      circular,\n      lastStatesCopy = lastStates.slice(0);\n    if (lastStatesCopy.push([root, last]) && lastStates.length > 0) {\n      // based on the \"was last element\" states of whatever we're nested within,\n      // we need to append either blankness or a branch to our line\n      lastStates.forEach(function (lastState, idx) {\n        if (idx > 0) {\n          line += (lastState[1] ? ' ' : '│') + '  ';\n        }\n        if (!circular && lastState[0] === root) {\n          circular = true;\n        }\n      });\n\n      // the prefix varies based on whether the key contains something to show and\n      // whether we're dealing with the last element in this collection\n      line += makePrefix(key, last) + key;\n\n      // append values and the circular reference indicator\n      showValues && (typeof root !== 'object' || root instanceof Date) && (line += ': ' + root);\n      circular && (line += ' (circular ref.)');\n      callback(line);\n    }\n\n    // can we descend into the next item?\n    if (!circular && typeof root === 'object') {\n      var keys = filterKeys(root, hideFunctions);\n      keys.forEach(function (branch) {\n        // the last key is always printed with a different prefix, so we'll need to know if we have it\n        lastKey = ++index === keys.length;\n\n        // hold your breath for recursive action\n        growBranch(branch, root[branch], lastKey, lastStatesCopy, showValues, hideFunctions, callback);\n      });\n    }\n  }\n  ;\n\n  // --------------------\n\n  var Treeify = {};\n\n  // Treeify.asLines\n  // --------------------\n  // Outputs the tree line-by-line, calling the lineCallback when each one is available.\n\n  Treeify.asLines = function (obj, showValues, hideFunctions, lineCallback) {\n    /* hideFunctions and lineCallback are curried, which means we don't break apps using the older form */\n    var hideFunctionsArg = typeof hideFunctions !== 'function' ? hideFunctions : false;\n    growBranch('.', obj, false, [], showValues, hideFunctionsArg, lineCallback || hideFunctions);\n  };\n\n  // Treeify.asTree\n  // --------------------\n  // Outputs the entire tree, returning it as a string with line breaks.\n\n  Treeify.asTree = function (obj, showValues, hideFunctions) {\n    var tree = '';\n    growBranch('.', obj, false, [], showValues, hideFunctions, function (line) {\n      tree += line + '\\n';\n    });\n    return tree;\n  };\n\n  // --------------------\n\n  return Treeify;\n});","map":{"version":3,"names":["root","factory","exports","module","define","amd","treeify","makePrefix","key","last","str","filterKeys","obj","hideFunctions","keys","branch","hasOwnProperty","push","growBranch","lastStates","showValues","callback","line","index","lastKey","circular","lastStatesCopy","slice","length","forEach","lastState","idx","Date","Treeify","asLines","lineCallback","hideFunctionsArg","asTree","tree"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/treeify/treeify.js"],"sourcesContent":["//     treeify.js\n//     Luke Plaster <notatestuser@gmail.com>\n//     https://github.com/notatestuser/treeify.js\n\n// do the universal module definition dance\n(function (root, factory) {\n\n  if (typeof exports === 'object') {\n    module.exports = factory();\n  } else if (typeof define === 'function' && define.amd) {\n    define(factory);\n  } else {\n    root.treeify = factory();\n  }\n\n}(this, function() {\n\n  function makePrefix(key, last) {\n    var str = (last ? '└' : '├');\n    if (key) {\n      str += '─ ';\n    } else {\n      str += '──┐';\n    }\n    return str;\n  }\n\n  function filterKeys(obj, hideFunctions) {\n    var keys = [];\n    for (var branch in obj) {\n      // always exclude anything in the object's prototype\n      if (!obj.hasOwnProperty(branch)) {\n        continue;\n      }\n      // ... and hide any keys mapped to functions if we've been told to\n      if (hideFunctions && ((typeof obj[branch])===\"function\")) {\n        continue;\n      }\n      keys.push(branch);\n    }\n    return keys;\n  }\n\n  function growBranch(key, root, last, lastStates, showValues, hideFunctions, callback) {\n    var line = '', index = 0, lastKey, circular, lastStatesCopy = lastStates.slice(0);\n\n    if (lastStatesCopy.push([ root, last ]) && lastStates.length > 0) {\n      // based on the \"was last element\" states of whatever we're nested within,\n      // we need to append either blankness or a branch to our line\n      lastStates.forEach(function(lastState, idx) {\n        if (idx > 0) {\n          line += (lastState[1] ? ' ' : '│') + '  ';\n        }\n        if ( ! circular && lastState[0] === root) {\n          circular = true;\n        }\n      });\n\n      // the prefix varies based on whether the key contains something to show and\n      // whether we're dealing with the last element in this collection\n      line += makePrefix(key, last) + key;\n\n      // append values and the circular reference indicator\n      showValues && (typeof root !== 'object' || root instanceof Date) && (line += ': ' + root);\n      circular && (line += ' (circular ref.)');\n\n      callback(line);\n    }\n\n    // can we descend into the next item?\n    if ( ! circular && typeof root === 'object') {\n      var keys = filterKeys(root, hideFunctions);\n      keys.forEach(function(branch){\n        // the last key is always printed with a different prefix, so we'll need to know if we have it\n        lastKey = ++index === keys.length;\n\n        // hold your breath for recursive action\n        growBranch(branch, root[branch], lastKey, lastStatesCopy, showValues, hideFunctions, callback);\n      });\n    }\n  };\n\n  // --------------------\n\n  var Treeify = {};\n\n  // Treeify.asLines\n  // --------------------\n  // Outputs the tree line-by-line, calling the lineCallback when each one is available.\n\n  Treeify.asLines = function(obj, showValues, hideFunctions, lineCallback) {\n    /* hideFunctions and lineCallback are curried, which means we don't break apps using the older form */\n    var hideFunctionsArg = typeof hideFunctions !== 'function' ? hideFunctions : false;\n    growBranch('.', obj, false, [], showValues, hideFunctionsArg, lineCallback || hideFunctions);\n  };\n\n  // Treeify.asTree\n  // --------------------\n  // Outputs the entire tree, returning it as a string with line breaks.\n\n  Treeify.asTree = function(obj, showValues, hideFunctions) {\n    var tree = '';\n    growBranch('.', obj, false, [], showValues, hideFunctions, function(line) {\n      tree += line + '\\n';\n    });\n    return tree;\n  };\n\n  // --------------------\n\n  return Treeify;\n\n}));\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}