{"ast":null,"code":"import{useMemo}from'react';/** Sorts currency amounts (descending). */function balanceComparator(a,b){if(a&&b){return a.greaterThan(b)?-1:a.equalTo(b)?0:1;}else if(a===null||a===void 0?void 0:a.greaterThan('0')){return-1;}else if(b===null||b===void 0?void 0:b.greaterThan('0')){return 1;}return 0;}/** Sorts tokens by currency amount (descending), then safety, then symbol (ascending). */export function tokenComparator(balances,a,b){// Sorts by balances\nvar balanceComparison=balanceComparator(balances[a.address],balances[b.address]);if(balanceComparison!==0)return balanceComparison;// Sorts by symbol\nif(a.symbol&&b.symbol){return a.symbol.toLowerCase()<b.symbol.toLowerCase()?-1:1;}return-1;}/** Sorts tokens by query, giving precedence to exact matches and partial matches. */export function useSortTokensByQuery(query,tokens){return useMemo(function(){if(!tokens){return[];}var matches=query.toLowerCase().split(/\\s+/).filter(function(s){return s.length>0;});if(matches.length>1){return tokens;}var exactMatches=[];var symbolSubtrings=[];var rest=[];// sort tokens by exact match -> subtring on symbol match -> rest\nvar trimmedQuery=query.toLowerCase().trim();tokens.map(function(token){var _token$symbol;var symbol=(_token$symbol=token.symbol)===null||_token$symbol===void 0?void 0:_token$symbol.toLowerCase();if(symbol===matches[0]){return exactMatches.push(token);}else if(symbol===null||symbol===void 0?void 0:symbol.startsWith(trimmedQuery)){return symbolSubtrings.push(token);}else{return rest.push(token);}});return[].concat(exactMatches,symbolSubtrings,rest);},[tokens,query]);}","map":{"version":3,"names":["useMemo","balanceComparator","a","b","greaterThan","equalTo","tokenComparator","balances","balanceComparison","address","symbol","toLowerCase","useSortTokensByQuery","query","tokens","matches","split","filter","s","length","exactMatches","symbolSubtrings","rest","trimmedQuery","trim","map","token","push","startsWith"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/lib/hooks/useTokenList/sorting.ts"],"sourcesContent":["import { Currency, CurrencyAmount, Token } from '@uniswap/sdk-core'\nimport { TokenInfo } from '@uniswap/token-lists'\nimport { useMemo } from 'react'\n\n/** Sorts currency amounts (descending). */\nfunction balanceComparator(a?: CurrencyAmount<Currency>, b?: CurrencyAmount<Currency>) {\n  if (a && b) {\n    return a.greaterThan(b) ? -1 : a.equalTo(b) ? 0 : 1\n  } else if (a?.greaterThan('0')) {\n    return -1\n  } else if (b?.greaterThan('0')) {\n    return 1\n  }\n  return 0\n}\n\ntype TokenBalances = { [tokenAddress: string]: CurrencyAmount<Token> | undefined }\n\n/** Sorts tokens by currency amount (descending), then safety, then symbol (ascending). */\nexport function tokenComparator(balances: TokenBalances, a: Token, b: Token) {\n  // Sorts by balances\n  const balanceComparison = balanceComparator(balances[a.address], balances[b.address])\n  if (balanceComparison !== 0) return balanceComparison\n\n  // Sorts by symbol\n  if (a.symbol && b.symbol) {\n    return a.symbol.toLowerCase() < b.symbol.toLowerCase() ? -1 : 1\n  }\n\n  return -1\n}\n\n/** Sorts tokens by query, giving precedence to exact matches and partial matches. */\nexport function useSortTokensByQuery<T extends Token | TokenInfo>(query: string, tokens?: T[]): T[] {\n  return useMemo(() => {\n    if (!tokens) {\n      return []\n    }\n\n    const matches = query\n      .toLowerCase()\n      .split(/\\s+/)\n      .filter((s) => s.length > 0)\n\n    if (matches.length > 1) {\n      return tokens\n    }\n\n    const exactMatches: T[] = []\n    const symbolSubtrings: T[] = []\n    const rest: T[] = []\n\n    // sort tokens by exact match -> subtring on symbol match -> rest\n    const trimmedQuery = query.toLowerCase().trim()\n    tokens.map((token) => {\n      const symbol = token.symbol?.toLowerCase()\n      if (symbol === matches[0]) {\n        return exactMatches.push(token)\n      } else if (symbol?.startsWith(trimmedQuery)) {\n        return symbolSubtrings.push(token)\n      } else {\n        return rest.push(token)\n      }\n    })\n\n    return [...exactMatches, ...symbolSubtrings, ...rest]\n  }, [tokens, query])\n}\n"],"mappings":"AAEA,OAASA,OAAO,KAAQ,OAAO,CAE/B,2CACA,QAASC,kBAAiB,CAACC,CAA4B,CAAEC,CAA4B,CAAE,CACrF,GAAID,CAAC,EAAIC,CAAC,CAAE,CACV,MAAOD,EAAC,CAACE,WAAW,CAACD,CAAC,CAAC,CAAG,CAAC,CAAC,CAAGD,CAAC,CAACG,OAAO,CAACF,CAAC,CAAC,CAAG,CAAC,CAAG,CAAC,CACrD,CAAC,IAAM,IAAID,CAAC,SAADA,CAAC,iBAADA,CAAC,CAAEE,WAAW,CAAC,GAAG,CAAC,CAAE,CAC9B,MAAO,CAAC,CAAC,CACX,CAAC,IAAM,IAAID,CAAC,SAADA,CAAC,iBAADA,CAAC,CAAEC,WAAW,CAAC,GAAG,CAAC,CAAE,CAC9B,MAAO,EAAC,CACV,CACA,MAAO,EAAC,CACV,CAIA,0FACA,MAAO,SAASE,gBAAe,CAACC,QAAuB,CAAEL,CAAQ,CAAEC,CAAQ,CAAE,CAC3E;AACA,GAAMK,kBAAiB,CAAGP,iBAAiB,CAACM,QAAQ,CAACL,CAAC,CAACO,OAAO,CAAC,CAAEF,QAAQ,CAACJ,CAAC,CAACM,OAAO,CAAC,CAAC,CACrF,GAAID,iBAAiB,GAAK,CAAC,CAAE,MAAOA,kBAAiB,CAErD;AACA,GAAIN,CAAC,CAACQ,MAAM,EAAIP,CAAC,CAACO,MAAM,CAAE,CACxB,MAAOR,EAAC,CAACQ,MAAM,CAACC,WAAW,EAAE,CAAGR,CAAC,CAACO,MAAM,CAACC,WAAW,EAAE,CAAG,CAAC,CAAC,CAAG,CAAC,CACjE,CAEA,MAAO,CAAC,CAAC,CACX,CAEA,qFACA,MAAO,SAASC,qBAAoB,CAA8BC,KAAa,CAAEC,MAAY,CAAO,CAClG,MAAOd,QAAO,CAAC,UAAM,CACnB,GAAI,CAACc,MAAM,CAAE,CACX,MAAO,EAAE,CACX,CAEA,GAAMC,QAAO,CAAGF,KAAK,CAClBF,WAAW,EAAE,CACbK,KAAK,CAAC,KAAK,CAAC,CACZC,MAAM,CAAC,SAACC,CAAC,QAAKA,EAAC,CAACC,MAAM,CAAG,CAAC,GAAC,CAE9B,GAAIJ,OAAO,CAACI,MAAM,CAAG,CAAC,CAAE,CACtB,MAAOL,OAAM,CACf,CAEA,GAAMM,aAAiB,CAAG,EAAE,CAC5B,GAAMC,gBAAoB,CAAG,EAAE,CAC/B,GAAMC,KAAS,CAAG,EAAE,CAEpB;AACA,GAAMC,aAAY,CAAGV,KAAK,CAACF,WAAW,EAAE,CAACa,IAAI,EAAE,CAC/CV,MAAM,CAACW,GAAG,CAAC,SAACC,KAAK,CAAK,mBACpB,GAAMhB,OAAM,gBAAGgB,KAAK,CAAChB,MAAM,wCAAZ,cAAcC,WAAW,EAAE,CAC1C,GAAID,MAAM,GAAKK,OAAO,CAAC,CAAC,CAAC,CAAE,CACzB,MAAOK,aAAY,CAACO,IAAI,CAACD,KAAK,CAAC,CACjC,CAAC,IAAM,IAAIhB,MAAM,SAANA,MAAM,iBAANA,MAAM,CAAEkB,UAAU,CAACL,YAAY,CAAC,CAAE,CAC3C,MAAOF,gBAAe,CAACM,IAAI,CAACD,KAAK,CAAC,CACpC,CAAC,IAAM,CACL,MAAOJ,KAAI,CAACK,IAAI,CAACD,KAAK,CAAC,CACzB,CACF,CAAC,CAAC,CAEF,gBAAWN,YAAY,CAAKC,eAAe,CAAKC,IAAI,EACtD,CAAC,CAAE,CAACR,MAAM,CAAED,KAAK,CAAC,CAAC,CACrB"},"metadata":{},"sourceType":"module"}