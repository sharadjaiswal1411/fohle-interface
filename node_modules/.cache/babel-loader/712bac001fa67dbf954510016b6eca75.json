{"ast":null,"code":"import{DEFAULT_LOCALE,SUPPORTED_LOCALES}from'constants/locales';export default function formatLocaleNumber(_ref){var number=_ref.number,locale=_ref.locale,sigFigs=_ref.sigFigs,fixedDecimals=_ref.fixedDecimals,_ref$options=_ref.options,options=_ref$options===void 0?{}:_ref$options;var localeArg;if(!locale||locale&&!SUPPORTED_LOCALES.includes(locale)){localeArg=DEFAULT_LOCALE;}else{localeArg=[locale,DEFAULT_LOCALE];}options.minimumFractionDigits=options.minimumFractionDigits||fixedDecimals;options.maximumFractionDigits=options.maximumFractionDigits||fixedDecimals;// Fixed decimals should override significant figures.\noptions.maximumSignificantDigits=options.maximumSignificantDigits||fixedDecimals?undefined:sigFigs;var numberString;if(typeof number==='number'){numberString=fixedDecimals?parseFloat(number.toFixed(fixedDecimals)):number;}else{var baseString=parseFloat(number.toSignificant(sigFigs));numberString=fixedDecimals?parseFloat(baseString.toFixed(fixedDecimals)):baseString;}return numberString.toLocaleString(localeArg,options);}","map":{"version":3,"names":["DEFAULT_LOCALE","SUPPORTED_LOCALES","formatLocaleNumber","number","locale","sigFigs","fixedDecimals","options","localeArg","includes","minimumFractionDigits","maximumFractionDigits","maximumSignificantDigits","undefined","numberString","parseFloat","toFixed","baseString","toSignificant","toLocaleString"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/lib/utils/formatLocaleNumber.ts"],"sourcesContent":["import { Currency, CurrencyAmount, Price } from '@uniswap/sdk-core'\nimport { DEFAULT_LOCALE, SUPPORTED_LOCALES } from 'constants/locales'\n\ninterface FormatLocaleNumberArgs {\n  number: CurrencyAmount<Currency> | Price<Currency, Currency> | number\n  locale: string | null | undefined\n  options?: Intl.NumberFormatOptions\n  sigFigs?: number\n  fixedDecimals?: number\n}\n\nexport default function formatLocaleNumber({\n  number,\n  locale,\n  sigFigs,\n  fixedDecimals,\n  options = {},\n}: FormatLocaleNumberArgs): string {\n  let localeArg: string | string[]\n  if (!locale || (locale && !SUPPORTED_LOCALES.includes(locale))) {\n    localeArg = DEFAULT_LOCALE\n  } else {\n    localeArg = [locale, DEFAULT_LOCALE]\n  }\n  options.minimumFractionDigits = options.minimumFractionDigits || fixedDecimals\n  options.maximumFractionDigits = options.maximumFractionDigits || fixedDecimals\n\n  // Fixed decimals should override significant figures.\n  options.maximumSignificantDigits = options.maximumSignificantDigits || fixedDecimals ? undefined : sigFigs\n\n  let numberString: number\n  if (typeof number === 'number') {\n    numberString = fixedDecimals ? parseFloat(number.toFixed(fixedDecimals)) : number\n  } else {\n    const baseString = parseFloat(number.toSignificant(sigFigs))\n    numberString = fixedDecimals ? parseFloat(baseString.toFixed(fixedDecimals)) : baseString\n  }\n\n  return numberString.toLocaleString(localeArg, options)\n}\n"],"mappings":"AACA,OAASA,cAAc,CAAEC,iBAAiB,KAAQ,mBAAmB,CAUrE,cAAe,SAASC,mBAAkB,MAMP,IALjCC,OAAM,MAANA,MAAM,CACNC,MAAM,MAANA,MAAM,CACNC,OAAO,MAAPA,OAAO,CACPC,aAAa,MAAbA,aAAa,mBACbC,OAAO,CAAPA,OAAO,uBAAG,CAAC,CAAC,cAEZ,GAAIC,UAA4B,CAChC,GAAI,CAACJ,MAAM,EAAKA,MAAM,EAAI,CAACH,iBAAiB,CAACQ,QAAQ,CAACL,MAAM,CAAE,CAAE,CAC9DI,SAAS,CAAGR,cAAc,CAC5B,CAAC,IAAM,CACLQ,SAAS,CAAG,CAACJ,MAAM,CAAEJ,cAAc,CAAC,CACtC,CACAO,OAAO,CAACG,qBAAqB,CAAGH,OAAO,CAACG,qBAAqB,EAAIJ,aAAa,CAC9EC,OAAO,CAACI,qBAAqB,CAAGJ,OAAO,CAACI,qBAAqB,EAAIL,aAAa,CAE9E;AACAC,OAAO,CAACK,wBAAwB,CAAGL,OAAO,CAACK,wBAAwB,EAAIN,aAAa,CAAGO,SAAS,CAAGR,OAAO,CAE1G,GAAIS,aAAoB,CACxB,GAAI,MAAOX,OAAM,GAAK,QAAQ,CAAE,CAC9BW,YAAY,CAAGR,aAAa,CAAGS,UAAU,CAACZ,MAAM,CAACa,OAAO,CAACV,aAAa,CAAC,CAAC,CAAGH,MAAM,CACnF,CAAC,IAAM,CACL,GAAMc,WAAU,CAAGF,UAAU,CAACZ,MAAM,CAACe,aAAa,CAACb,OAAO,CAAC,CAAC,CAC5DS,YAAY,CAAGR,aAAa,CAAGS,UAAU,CAACE,UAAU,CAACD,OAAO,CAACV,aAAa,CAAC,CAAC,CAAGW,UAAU,CAC3F,CAEA,MAAOH,aAAY,CAACK,cAAc,CAACX,SAAS,CAAED,OAAO,CAAC,CACxD"},"metadata":{},"sourceType":"module"}