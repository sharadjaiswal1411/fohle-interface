{"ast":null,"code":"import { BigNumber } from '@ethersproject/bignumber';\nimport { encodeMixedRouteToPath, MixedRouteSDK, Protocol } from '@uniswap/router-sdk';\nimport { encodeRouteToPath } from '@uniswap/v3-sdk';\nimport retry from 'async-retry';\nimport _ from 'lodash';\nimport stats from 'stats-lite';\nimport { V2Route } from '../routers/router';\nimport { IMixedRouteQuoterV1__factory } from '../types/other/factories/IMixedRouteQuoterV1__factory';\nimport { IQuoterV2__factory } from '../types/v3/factories/IQuoterV2__factory';\nimport { ChainId, metric, MetricLoggerUnit } from '../util';\nimport { MIXED_ROUTE_QUOTER_V1_ADDRESSES, QUOTER_V2_ADDRESSES } from '../util/addresses';\nimport { log } from '../util/log';\nimport { routeToString } from '../util/routes';\nexport class BlockConflictError extends Error {\n  constructor() {\n    super(...arguments);\n    this.name = 'BlockConflictError';\n  }\n}\nexport class SuccessRateError extends Error {\n  constructor() {\n    super(...arguments);\n    this.name = 'SuccessRateError';\n  }\n}\nexport class ProviderBlockHeaderError extends Error {\n  constructor() {\n    super(...arguments);\n    this.name = 'ProviderBlockHeaderError';\n  }\n}\nexport class ProviderTimeoutError extends Error {\n  constructor() {\n    super(...arguments);\n    this.name = 'ProviderTimeoutError';\n  }\n}\n/**\n * This error typically means that the gas used by the multicall has\n * exceeded the total call gas limit set by the node provider.\n *\n * This can be resolved by modifying BatchParams to request fewer\n * quotes per call, or to set a lower gas limit per quote.\n *\n * @export\n * @class ProviderGasError\n */\nexport class ProviderGasError extends Error {\n  constructor() {\n    super(...arguments);\n    this.name = 'ProviderGasError';\n  }\n}\nconst DEFAULT_BATCH_RETRIES = 2;\n/**\n * Computes on chain quotes for swaps. For pure V3 routes, quotes are computed on-chain using\n * the 'QuoterV2' smart contract. For exactIn mixed and V2 routes, quotes are computed using the 'MixedRouteQuoterV1' contract\n * This is because computing quotes off-chain would require fetching all the tick data for each pool, which is a lot of data.\n *\n * To minimize the number of requests for quotes we use a Multicall contract. Generally\n * the number of quotes to fetch exceeds the maximum we can fit in a single multicall\n * while staying under gas limits, so we also batch these quotes across multiple multicalls.\n *\n * The biggest challenge with the quote provider is dealing with various gas limits.\n * Each provider sets a limit on the amount of gas a call can consume (on Infura this\n * is approximately 10x the block max size), so we must ensure each multicall does not\n * exceed this limit. Additionally, each quote on V3 can consume a large number of gas if\n * the pool lacks liquidity and the swap would cause all the ticks to be traversed.\n *\n * To ensure we don't exceed the node's call limit, we limit the gas used by each quote to\n * a specific value, and we limit the number of quotes in each multicall request. Users of this\n * class should set BatchParams such that multicallChunk * gasLimitPerCall is less than their node\n * providers total gas limit per call.\n *\n * @export\n * @class OnChainQuoteProvider\n */\nexport class OnChainQuoteProvider {\n  /**\n   * Creates an instance of OnChainQuoteProvider.\n   *\n   * @param chainId The chain to get quotes for.\n   * @param provider The web 3 provider.\n   * @param multicall2Provider The multicall provider to use to get the quotes on-chain.\n   * Only supports the Uniswap Multicall contract as it needs the gas limitting functionality.\n   * @param retryOptions The retry options for each call to the multicall.\n   * @param batchParams The parameters for each batched call to the multicall.\n   * @param gasErrorFailureOverride The gas and chunk parameters to use when retrying a batch that failed due to out of gas.\n   * @param successRateFailureOverrides The parameters for retries when we fail to get quotes.\n   * @param blockNumberConfig Parameters for adjusting which block we get quotes from, and how to handle block header not found errors.\n   * @param [quoterAddressOverride] Overrides the address of the quoter contract to use.\n   */\n  constructor(chainId, provider,\n  // Only supports Uniswap Multicall as it needs the gas limitting functionality.\n  multicall2Provider) {\n    let retryOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {\n      retries: DEFAULT_BATCH_RETRIES,\n      minTimeout: 25,\n      maxTimeout: 250\n    };\n    let batchParams = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {\n      multicallChunk: 150,\n      gasLimitPerCall: 1000000,\n      quoteMinSuccessRate: 0.2\n    };\n    let gasErrorFailureOverride = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {\n      gasLimitOverride: 1500000,\n      multicallChunk: 100\n    };\n    let successRateFailureOverrides = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : {\n      gasLimitOverride: 1300000,\n      multicallChunk: 110\n    };\n    let blockNumberConfig = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : {\n      baseBlockOffset: 0,\n      rollback: {\n        enabled: false\n      }\n    };\n    let quoterAddressOverride = arguments.length > 8 ? arguments[8] : undefined;\n    this.chainId = chainId;\n    this.provider = provider;\n    this.multicall2Provider = multicall2Provider;\n    this.retryOptions = retryOptions;\n    this.batchParams = batchParams;\n    this.gasErrorFailureOverride = gasErrorFailureOverride;\n    this.successRateFailureOverrides = successRateFailureOverrides;\n    this.blockNumberConfig = blockNumberConfig;\n    this.quoterAddressOverride = quoterAddressOverride;\n  }\n  getQuoterAddress(useMixedRouteQuoter) {\n    if (this.quoterAddressOverride) {\n      return this.quoterAddressOverride;\n    }\n    const quoterAddress = useMixedRouteQuoter ? MIXED_ROUTE_QUOTER_V1_ADDRESSES[this.chainId] : QUOTER_V2_ADDRESSES[this.chainId];\n    if (!quoterAddress) {\n      throw new Error(`No address for the quoter contract on chain id: ${this.chainId}`);\n    }\n    return quoterAddress;\n  }\n  async getQuotesManyExactIn(amountIns, routes, providerConfig) {\n    return this.getQuotesManyData(amountIns, routes, 'quoteExactInput', providerConfig);\n  }\n  async getQuotesManyExactOut(amountOuts, routes, providerConfig) {\n    return this.getQuotesManyData(amountOuts, routes, 'quoteExactOutput', providerConfig);\n  }\n  async getQuotesManyData(amounts, routes, functionName, _providerConfig) {\n    var _a;\n    const useMixedRouteQuoter = routes.some(route => route.protocol === Protocol.V2) || routes.some(route => route.protocol === Protocol.MIXED);\n    /// Validate that there are no incorrect routes / function combinations\n    this.validateRoutes(routes, functionName, useMixedRouteQuoter);\n    let multicallChunk = this.batchParams.multicallChunk;\n    let gasLimitOverride = this.batchParams.gasLimitPerCall;\n    const {\n      baseBlockOffset,\n      rollback\n    } = this.blockNumberConfig;\n    // Apply the base block offset if provided\n    const originalBlockNumber = await this.provider.getBlockNumber();\n    const providerConfig = {\n      ..._providerConfig,\n      blockNumber: (_a = _providerConfig === null || _providerConfig === void 0 ? void 0 : _providerConfig.blockNumber) !== null && _a !== void 0 ? _a : originalBlockNumber + baseBlockOffset\n    };\n    const inputs = _(routes).flatMap(route => {\n      const encodedRoute = route.protocol === Protocol.V3 ? encodeRouteToPath(route, functionName == 'quoteExactOutput' // For exactOut must be true to ensure the routes are reversed.\n      ) : encodeMixedRouteToPath(route instanceof V2Route ? new MixedRouteSDK(route.pairs, route.input, route.output) : route);\n      const routeInputs = amounts.map(amount => [encodedRoute, `0x${amount.quotient.toString(16)}`]);\n      return routeInputs;\n    }).value();\n    const normalizedChunk = Math.ceil(inputs.length / Math.ceil(inputs.length / multicallChunk));\n    const inputsChunked = _.chunk(inputs, normalizedChunk);\n    let quoteStates = _.map(inputsChunked, inputChunk => {\n      return {\n        status: 'pending',\n        inputs: inputChunk\n      };\n    });\n    log.info(`About to get ${inputs.length} quotes in chunks of ${normalizedChunk} [${_.map(inputsChunked, i => i.length).join(',')}] ${gasLimitOverride ? `with a gas limit override of ${gasLimitOverride}` : ''} and block number: ${await providerConfig.blockNumber} [Original before offset: ${originalBlockNumber}].`);\n    let haveRetriedForSuccessRate = false;\n    let haveRetriedForBlockHeader = false;\n    let blockHeaderRetryAttemptNumber = 0;\n    let haveIncrementedBlockHeaderFailureCounter = false;\n    let blockHeaderRolledBack = false;\n    let haveRetriedForBlockConflictError = false;\n    let haveRetriedForOutOfGas = false;\n    let haveRetriedForTimeout = false;\n    let haveRetriedForUnknownReason = false;\n    let finalAttemptNumber = 1;\n    const expectedCallsMade = quoteStates.length;\n    let totalCallsMade = 0;\n    const {\n      results: quoteResults,\n      blockNumber,\n      approxGasUsedPerSuccessCall\n    } = await retry(async (_bail, attemptNumber) => {\n      haveIncrementedBlockHeaderFailureCounter = false;\n      finalAttemptNumber = attemptNumber;\n      const [success, failed, pending] = this.partitionQuotes(quoteStates);\n      log.info(`Starting attempt: ${attemptNumber}.\n          Currently ${success.length} success, ${failed.length} failed, ${pending.length} pending.\n          Gas limit override: ${gasLimitOverride} Block number override: ${providerConfig.blockNumber}.`);\n      quoteStates = await Promise.all(_.map(quoteStates, async (quoteState, idx) => {\n        if (quoteState.status == 'success') {\n          return quoteState;\n        }\n        // QuoteChunk is pending or failed, so we try again\n        const {\n          inputs\n        } = quoteState;\n        try {\n          totalCallsMade = totalCallsMade + 1;\n          const results = await this.multicall2Provider.callSameFunctionOnContractWithMultipleParams({\n            address: this.getQuoterAddress(useMixedRouteQuoter),\n            contractInterface: useMixedRouteQuoter ? IMixedRouteQuoterV1__factory.createInterface() : IQuoterV2__factory.createInterface(),\n            functionName,\n            functionParams: inputs,\n            providerConfig,\n            additionalConfig: {\n              gasLimitPerCallOverride: gasLimitOverride\n            }\n          });\n          const successRateError = this.validateSuccessRate(results.results, haveRetriedForSuccessRate);\n          if (successRateError) {\n            return {\n              status: 'failed',\n              inputs,\n              reason: successRateError,\n              results\n            };\n          }\n          return {\n            status: 'success',\n            inputs,\n            results\n          };\n        } catch (err) {\n          // Error from providers have huge messages that include all the calldata and fill the logs.\n          // Catch them and rethrow with shorter message.\n          if (err.message.includes('header not found')) {\n            return {\n              status: 'failed',\n              inputs,\n              reason: new ProviderBlockHeaderError(err.message.slice(0, 500))\n            };\n          }\n          if (err.message.includes('timeout')) {\n            return {\n              status: 'failed',\n              inputs,\n              reason: new ProviderTimeoutError(`Req ${idx}/${quoteStates.length}. Request had ${inputs.length} inputs. ${err.message.slice(0, 500)}`)\n            };\n          }\n          if (err.message.includes('out of gas')) {\n            return {\n              status: 'failed',\n              inputs,\n              reason: new ProviderGasError(err.message.slice(0, 500))\n            };\n          }\n          return {\n            status: 'failed',\n            inputs,\n            reason: new Error(`Unknown error from provider: ${err.message.slice(0, 500)}`)\n          };\n        }\n      }));\n      const [successfulQuoteStates, failedQuoteStates, pendingQuoteStates] = this.partitionQuotes(quoteStates);\n      if (pendingQuoteStates.length > 0) {\n        throw new Error('Pending quote after waiting for all promises.');\n      }\n      let retryAll = false;\n      const blockNumberError = this.validateBlockNumbers(successfulQuoteStates, inputsChunked.length, gasLimitOverride);\n      // If there is a block number conflict we retry all the quotes.\n      if (blockNumberError) {\n        retryAll = true;\n      }\n      const reasonForFailureStr = _.map(failedQuoteStates, failedQuoteState => failedQuoteState.reason.name).join(', ');\n      if (failedQuoteStates.length > 0) {\n        log.info(`On attempt ${attemptNumber}: ${failedQuoteStates.length}/${quoteStates.length} quotes failed. Reasons: ${reasonForFailureStr}`);\n        for (const failedQuoteState of failedQuoteStates) {\n          const {\n            reason: error\n          } = failedQuoteState;\n          log.info({\n            error\n          }, `[QuoteFetchError] Attempt ${attemptNumber}. ${error.message}`);\n          if (error instanceof BlockConflictError) {\n            if (!haveRetriedForBlockConflictError) {\n              metric.putMetric('QuoteBlockConflictErrorRetry', 1, MetricLoggerUnit.Count);\n              haveRetriedForBlockConflictError = true;\n            }\n            retryAll = true;\n          } else if (error instanceof ProviderBlockHeaderError) {\n            if (!haveRetriedForBlockHeader) {\n              metric.putMetric('QuoteBlockHeaderNotFoundRetry', 1, MetricLoggerUnit.Count);\n              haveRetriedForBlockHeader = true;\n            }\n            // Ensure that if multiple calls fail due to block header in the current pending batch,\n            // we only count once.\n            if (!haveIncrementedBlockHeaderFailureCounter) {\n              blockHeaderRetryAttemptNumber = blockHeaderRetryAttemptNumber + 1;\n              haveIncrementedBlockHeaderFailureCounter = true;\n            }\n            if (rollback.enabled) {\n              const {\n                rollbackBlockOffset,\n                attemptsBeforeRollback\n              } = rollback;\n              if (blockHeaderRetryAttemptNumber >= attemptsBeforeRollback && !blockHeaderRolledBack) {\n                log.info(`Attempt ${attemptNumber}. Have failed due to block header ${blockHeaderRetryAttemptNumber - 1} times. Rolling back block number by ${rollbackBlockOffset} for next retry`);\n                providerConfig.blockNumber = providerConfig.blockNumber ? (await providerConfig.blockNumber) + rollbackBlockOffset : (await this.provider.getBlockNumber()) + rollbackBlockOffset;\n                retryAll = true;\n                blockHeaderRolledBack = true;\n              }\n            }\n          } else if (error instanceof ProviderTimeoutError) {\n            if (!haveRetriedForTimeout) {\n              metric.putMetric('QuoteTimeoutRetry', 1, MetricLoggerUnit.Count);\n              haveRetriedForTimeout = true;\n            }\n          } else if (error instanceof ProviderGasError) {\n            if (!haveRetriedForOutOfGas) {\n              metric.putMetric('QuoteOutOfGasExceptionRetry', 1, MetricLoggerUnit.Count);\n              haveRetriedForOutOfGas = true;\n            }\n            gasLimitOverride = this.gasErrorFailureOverride.gasLimitOverride;\n            multicallChunk = this.gasErrorFailureOverride.multicallChunk;\n            retryAll = true;\n          } else if (error instanceof SuccessRateError) {\n            if (!haveRetriedForSuccessRate) {\n              metric.putMetric('QuoteSuccessRateRetry', 1, MetricLoggerUnit.Count);\n              haveRetriedForSuccessRate = true;\n              // Low success rate can indicate too little gas given to each call.\n              gasLimitOverride = this.successRateFailureOverrides.gasLimitOverride;\n              multicallChunk = this.successRateFailureOverrides.multicallChunk;\n              retryAll = true;\n            }\n          } else {\n            if (!haveRetriedForUnknownReason) {\n              metric.putMetric('QuoteUnknownReasonRetry', 1, MetricLoggerUnit.Count);\n              haveRetriedForUnknownReason = true;\n            }\n          }\n        }\n      }\n      if (retryAll) {\n        log.info(`Attempt ${attemptNumber}. Resetting all requests to pending for next attempt.`);\n        const normalizedChunk = Math.ceil(inputs.length / Math.ceil(inputs.length / multicallChunk));\n        const inputsChunked = _.chunk(inputs, normalizedChunk);\n        quoteStates = _.map(inputsChunked, inputChunk => {\n          return {\n            status: 'pending',\n            inputs: inputChunk\n          };\n        });\n      }\n      if (failedQuoteStates.length > 0) {\n        // TODO: Work with Arbitrum to find a solution for making large multicalls with gas limits that always\n        // successfully.\n        //\n        // On Arbitrum we can not set a gas limit for every call in the multicall and guarantee that\n        // we will not run out of gas on the node. This is because they have a different way of accounting\n        // for gas, that seperates storage and compute gas costs, and we can not cover both in a single limit.\n        //\n        // To work around this and avoid throwing errors when really we just couldn't get a quote, we catch this\n        // case and return 0 quotes found.\n        if ((this.chainId == ChainId.ARBITRUM_ONE || this.chainId == ChainId.ARBITRUM_RINKEBY) && _.every(failedQuoteStates, failedQuoteState => failedQuoteState.reason instanceof ProviderGasError) && attemptNumber == this.retryOptions.retries) {\n          log.error(`Failed to get quotes on Arbitrum due to provider gas error issue. Overriding error to return 0 quotes.`);\n          return {\n            results: [],\n            blockNumber: BigNumber.from(0),\n            approxGasUsedPerSuccessCall: 0\n          };\n        }\n        throw new Error(`Failed to get ${failedQuoteStates.length} quotes. Reasons: ${reasonForFailureStr}`);\n      }\n      const callResults = _.map(successfulQuoteStates, quoteState => quoteState.results);\n      return {\n        results: _.flatMap(callResults, result => result.results),\n        blockNumber: BigNumber.from(callResults[0].blockNumber),\n        approxGasUsedPerSuccessCall: stats.percentile(_.map(callResults, result => result.approxGasUsedPerSuccessCall), 100)\n      };\n    }, {\n      retries: DEFAULT_BATCH_RETRIES,\n      ...this.retryOptions\n    });\n    const routesQuotes = this.processQuoteResults(quoteResults, routes, amounts);\n    metric.putMetric('QuoteApproxGasUsedPerSuccessfulCall', approxGasUsedPerSuccessCall, MetricLoggerUnit.Count);\n    metric.putMetric('QuoteNumRetryLoops', finalAttemptNumber - 1, MetricLoggerUnit.Count);\n    metric.putMetric('QuoteTotalCallsToProvider', totalCallsMade, MetricLoggerUnit.Count);\n    metric.putMetric('QuoteExpectedCallsToProvider', expectedCallsMade, MetricLoggerUnit.Count);\n    metric.putMetric('QuoteNumRetriedCalls', totalCallsMade - expectedCallsMade, MetricLoggerUnit.Count);\n    const [successfulQuotes, failedQuotes] = _(routesQuotes).flatMap(routeWithQuotes => routeWithQuotes[1]).partition(quote => quote.quote != null).value();\n    log.info(`Got ${successfulQuotes.length} successful quotes, ${failedQuotes.length} failed quotes. Took ${finalAttemptNumber - 1} attempt loops. Total calls made to provider: ${totalCallsMade}. Have retried for timeout: ${haveRetriedForTimeout}`);\n    return {\n      routesWithQuotes: routesQuotes,\n      blockNumber\n    };\n  }\n  partitionQuotes(quoteStates) {\n    const successfulQuoteStates = _.filter(quoteStates, quoteState => quoteState.status == 'success');\n    const failedQuoteStates = _.filter(quoteStates, quoteState => quoteState.status == 'failed');\n    const pendingQuoteStates = _.filter(quoteStates, quoteState => quoteState.status == 'pending');\n    return [successfulQuoteStates, failedQuoteStates, pendingQuoteStates];\n  }\n  processQuoteResults(quoteResults, routes, amounts) {\n    const routesQuotes = [];\n    const quotesResultsByRoute = _.chunk(quoteResults, amounts.length);\n    const debugFailedQuotes = [];\n    for (let i = 0; i < quotesResultsByRoute.length; i++) {\n      const route = routes[i];\n      const quoteResults = quotesResultsByRoute[i];\n      const quotes = _.map(quoteResults, (quoteResult, index) => {\n        const amount = amounts[index];\n        if (!quoteResult.success) {\n          const percent = 100 / amounts.length * (index + 1);\n          const amountStr = amount.toFixed(Math.min(amount.currency.decimals, 2));\n          const routeStr = routeToString(route);\n          debugFailedQuotes.push({\n            route: routeStr,\n            percent,\n            amount: amountStr\n          });\n          return {\n            amount,\n            quote: null,\n            sqrtPriceX96AfterList: null,\n            gasEstimate: null,\n            initializedTicksCrossedList: null\n          };\n        }\n        return {\n          amount,\n          quote: quoteResult.result[0],\n          sqrtPriceX96AfterList: quoteResult.result[1],\n          initializedTicksCrossedList: quoteResult.result[2],\n          gasEstimate: quoteResult.result[3]\n        };\n      });\n      routesQuotes.push([route, quotes]);\n    }\n    // For routes and amounts that we failed to get a quote for, group them by route\n    // and batch them together before logging to minimize number of logs.\n    const debugChunk = 80;\n    _.forEach(_.chunk(debugFailedQuotes, debugChunk), (quotes, idx) => {\n      const failedQuotesByRoute = _.groupBy(quotes, q => q.route);\n      const failedFlat = _.mapValues(failedQuotesByRoute, f => _(f).map(f => `${f.percent}%[${f.amount}]`).join(','));\n      log.info({\n        failedQuotes: _.map(failedFlat, (amounts, routeStr) => `${routeStr} : ${amounts}`)\n      }, `Failed on chain quotes for routes Part ${idx}/${Math.ceil(debugFailedQuotes.length / debugChunk)}`);\n    });\n    return routesQuotes;\n  }\n  validateBlockNumbers(successfulQuoteStates, totalCalls, gasLimitOverride) {\n    if (successfulQuoteStates.length <= 1) {\n      return null;\n    }\n    const results = _.map(successfulQuoteStates, quoteState => quoteState.results);\n    const blockNumbers = _.map(results, result => result.blockNumber);\n    const uniqBlocks = _(blockNumbers).map(blockNumber => blockNumber.toNumber()).uniq().value();\n    if (uniqBlocks.length == 1) {\n      return null;\n    }\n    /* if (\n      uniqBlocks.length == 2 &&\n      Math.abs(uniqBlocks[0]! - uniqBlocks[1]!) <= 1\n    ) {\n      return null;\n    } */\n    return new BlockConflictError(`Quotes returned from different blocks. ${uniqBlocks}. ${totalCalls} calls were made with gas limit ${gasLimitOverride}`);\n  }\n  validateSuccessRate(allResults, haveRetriedForSuccessRate) {\n    const numResults = allResults.length;\n    const numSuccessResults = allResults.filter(result => result.success).length;\n    const successRate = 1.0 * numSuccessResults / numResults;\n    const {\n      quoteMinSuccessRate\n    } = this.batchParams;\n    if (successRate < quoteMinSuccessRate) {\n      if (haveRetriedForSuccessRate) {\n        log.info(`Quote success rate still below threshold despite retry. Continuing. ${quoteMinSuccessRate}: ${successRate}`);\n        return;\n      }\n      return new SuccessRateError(`Quote success rate below threshold of ${quoteMinSuccessRate}: ${successRate}`);\n    }\n  }\n  /**\n   * Throw an error for incorrect routes / function combinations\n   * @param routes Any combination of V3, V2, and Mixed routes.\n   * @param functionName\n   * @param useMixedRouteQuoter true if there are ANY V2Routes or MixedRoutes in the routes parameter\n   */\n  validateRoutes(routes, functionName, useMixedRouteQuoter) {\n    /// We do not send any V3Routes to new qutoer becuase it is not deployed on chains besides mainnet\n    if (routes.some(route => route.protocol === Protocol.V3) && useMixedRouteQuoter) {\n      throw new Error(`Cannot use mixed route quoter with V3 routes`);\n    }\n    /// We cannot call quoteExactOutput with V2 or Mixed routes\n    if (functionName === 'quoteExactOutput' && useMixedRouteQuoter) {\n      throw new Error('Cannot call quoteExactOutput with V2 or Mixed routes');\n    }\n  }\n}","map":{"version":3,"sources":["../../../src/providers/on-chain-quote-provider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { BigNumber } from '@ethersproject/bignumber';\nimport { encodeMixedRouteToPath, MixedRouteSDK, Protocol, } from '@uniswap/router-sdk';\nimport { encodeRouteToPath } from '@uniswap/v3-sdk';\nimport retry from 'async-retry';\nimport _ from 'lodash';\nimport stats from 'stats-lite';\nimport { V2Route } from '../routers/router';\nimport { IMixedRouteQuoterV1__factory } from '../types/other/factories/IMixedRouteQuoterV1__factory';\nimport { IQuoterV2__factory } from '../types/v3/factories/IQuoterV2__factory';\nimport { ChainId, metric, MetricLoggerUnit } from '../util';\nimport { MIXED_ROUTE_QUOTER_V1_ADDRESSES, QUOTER_V2_ADDRESSES, } from '../util/addresses';\nimport { log } from '../util/log';\nimport { routeToString } from '../util/routes';\nexport class BlockConflictError extends Error {\n    constructor() {\n        super(...arguments);\n        this.name = 'BlockConflictError';\n    }\n}\nexport class SuccessRateError extends Error {\n    constructor() {\n        super(...arguments);\n        this.name = 'SuccessRateError';\n    }\n}\nexport class ProviderBlockHeaderError extends Error {\n    constructor() {\n        super(...arguments);\n        this.name = 'ProviderBlockHeaderError';\n    }\n}\nexport class ProviderTimeoutError extends Error {\n    constructor() {\n        super(...arguments);\n        this.name = 'ProviderTimeoutError';\n    }\n}\n/**\n * This error typically means that the gas used by the multicall has\n * exceeded the total call gas limit set by the node provider.\n *\n * This can be resolved by modifying BatchParams to request fewer\n * quotes per call, or to set a lower gas limit per quote.\n *\n * @export\n * @class ProviderGasError\n */\nexport class ProviderGasError extends Error {\n    constructor() {\n        super(...arguments);\n        this.name = 'ProviderGasError';\n    }\n}\nconst DEFAULT_BATCH_RETRIES = 2;\n/**\n * Computes on chain quotes for swaps. For pure V3 routes, quotes are computed on-chain using\n * the 'QuoterV2' smart contract. For exactIn mixed and V2 routes, quotes are computed using the 'MixedRouteQuoterV1' contract\n * This is because computing quotes off-chain would require fetching all the tick data for each pool, which is a lot of data.\n *\n * To minimize the number of requests for quotes we use a Multicall contract. Generally\n * the number of quotes to fetch exceeds the maximum we can fit in a single multicall\n * while staying under gas limits, so we also batch these quotes across multiple multicalls.\n *\n * The biggest challenge with the quote provider is dealing with various gas limits.\n * Each provider sets a limit on the amount of gas a call can consume (on Infura this\n * is approximately 10x the block max size), so we must ensure each multicall does not\n * exceed this limit. Additionally, each quote on V3 can consume a large number of gas if\n * the pool lacks liquidity and the swap would cause all the ticks to be traversed.\n *\n * To ensure we don't exceed the node's call limit, we limit the gas used by each quote to\n * a specific value, and we limit the number of quotes in each multicall request. Users of this\n * class should set BatchParams such that multicallChunk * gasLimitPerCall is less than their node\n * providers total gas limit per call.\n *\n * @export\n * @class OnChainQuoteProvider\n */\nexport class OnChainQuoteProvider {\n    /**\n     * Creates an instance of OnChainQuoteProvider.\n     *\n     * @param chainId The chain to get quotes for.\n     * @param provider The web 3 provider.\n     * @param multicall2Provider The multicall provider to use to get the quotes on-chain.\n     * Only supports the Uniswap Multicall contract as it needs the gas limitting functionality.\n     * @param retryOptions The retry options for each call to the multicall.\n     * @param batchParams The parameters for each batched call to the multicall.\n     * @param gasErrorFailureOverride The gas and chunk parameters to use when retrying a batch that failed due to out of gas.\n     * @param successRateFailureOverrides The parameters for retries when we fail to get quotes.\n     * @param blockNumberConfig Parameters for adjusting which block we get quotes from, and how to handle block header not found errors.\n     * @param [quoterAddressOverride] Overrides the address of the quoter contract to use.\n     */\n    constructor(chainId, provider, \n    // Only supports Uniswap Multicall as it needs the gas limitting functionality.\n    multicall2Provider, retryOptions = {\n        retries: DEFAULT_BATCH_RETRIES,\n        minTimeout: 25,\n        maxTimeout: 250,\n    }, batchParams = {\n        multicallChunk: 150,\n        gasLimitPerCall: 1000000,\n        quoteMinSuccessRate: 0.2,\n    }, gasErrorFailureOverride = {\n        gasLimitOverride: 1500000,\n        multicallChunk: 100,\n    }, successRateFailureOverrides = {\n        gasLimitOverride: 1300000,\n        multicallChunk: 110,\n    }, blockNumberConfig = {\n        baseBlockOffset: 0,\n        rollback: { enabled: false },\n    }, quoterAddressOverride) {\n        this.chainId = chainId;\n        this.provider = provider;\n        this.multicall2Provider = multicall2Provider;\n        this.retryOptions = retryOptions;\n        this.batchParams = batchParams;\n        this.gasErrorFailureOverride = gasErrorFailureOverride;\n        this.successRateFailureOverrides = successRateFailureOverrides;\n        this.blockNumberConfig = blockNumberConfig;\n        this.quoterAddressOverride = quoterAddressOverride;\n    }\n    getQuoterAddress(useMixedRouteQuoter) {\n        if (this.quoterAddressOverride) {\n            return this.quoterAddressOverride;\n        }\n        const quoterAddress = useMixedRouteQuoter\n            ? MIXED_ROUTE_QUOTER_V1_ADDRESSES[this.chainId]\n            : QUOTER_V2_ADDRESSES[this.chainId];\n        if (!quoterAddress) {\n            throw new Error(`No address for the quoter contract on chain id: ${this.chainId}`);\n        }\n        return quoterAddress;\n    }\n    async getQuotesManyExactIn(amountIns, routes, providerConfig) {\n        return this.getQuotesManyData(amountIns, routes, 'quoteExactInput', providerConfig);\n    }\n    async getQuotesManyExactOut(amountOuts, routes, providerConfig) {\n        return this.getQuotesManyData(amountOuts, routes, 'quoteExactOutput', providerConfig);\n    }\n    async getQuotesManyData(amounts, routes, functionName, _providerConfig) {\n        var _a;\n        const useMixedRouteQuoter = routes.some((route) => route.protocol === Protocol.V2) ||\n            routes.some((route) => route.protocol === Protocol.MIXED);\n        /// Validate that there are no incorrect routes / function combinations\n        this.validateRoutes(routes, functionName, useMixedRouteQuoter);\n        let multicallChunk = this.batchParams.multicallChunk;\n        let gasLimitOverride = this.batchParams.gasLimitPerCall;\n        const { baseBlockOffset, rollback } = this.blockNumberConfig;\n        // Apply the base block offset if provided\n        const originalBlockNumber = await this.provider.getBlockNumber();\n        const providerConfig = {\n            ..._providerConfig,\n            blockNumber: (_a = _providerConfig === null || _providerConfig === void 0 ? void 0 : _providerConfig.blockNumber) !== null && _a !== void 0 ? _a : originalBlockNumber + baseBlockOffset,\n        };\n        const inputs = _(routes)\n            .flatMap((route) => {\n            const encodedRoute = route.protocol === Protocol.V3\n                ? encodeRouteToPath(route, functionName == 'quoteExactOutput' // For exactOut must be true to ensure the routes are reversed.\n                )\n                : encodeMixedRouteToPath(route instanceof V2Route\n                    ? new MixedRouteSDK(route.pairs, route.input, route.output)\n                    : route);\n            const routeInputs = amounts.map((amount) => [\n                encodedRoute,\n                `0x${amount.quotient.toString(16)}`,\n            ]);\n            return routeInputs;\n        })\n            .value();\n        const normalizedChunk = Math.ceil(inputs.length / Math.ceil(inputs.length / multicallChunk));\n        const inputsChunked = _.chunk(inputs, normalizedChunk);\n        let quoteStates = _.map(inputsChunked, (inputChunk) => {\n            return {\n                status: 'pending',\n                inputs: inputChunk,\n            };\n        });\n        log.info(`About to get ${inputs.length} quotes in chunks of ${normalizedChunk} [${_.map(inputsChunked, (i) => i.length).join(',')}] ${gasLimitOverride\n            ? `with a gas limit override of ${gasLimitOverride}`\n            : ''} and block number: ${await providerConfig.blockNumber} [Original before offset: ${originalBlockNumber}].`);\n        let haveRetriedForSuccessRate = false;\n        let haveRetriedForBlockHeader = false;\n        let blockHeaderRetryAttemptNumber = 0;\n        let haveIncrementedBlockHeaderFailureCounter = false;\n        let blockHeaderRolledBack = false;\n        let haveRetriedForBlockConflictError = false;\n        let haveRetriedForOutOfGas = false;\n        let haveRetriedForTimeout = false;\n        let haveRetriedForUnknownReason = false;\n        let finalAttemptNumber = 1;\n        const expectedCallsMade = quoteStates.length;\n        let totalCallsMade = 0;\n        const { results: quoteResults, blockNumber, approxGasUsedPerSuccessCall, } = await retry(async (_bail, attemptNumber) => {\n            haveIncrementedBlockHeaderFailureCounter = false;\n            finalAttemptNumber = attemptNumber;\n            const [success, failed, pending] = this.partitionQuotes(quoteStates);\n            log.info(`Starting attempt: ${attemptNumber}.\n          Currently ${success.length} success, ${failed.length} failed, ${pending.length} pending.\n          Gas limit override: ${gasLimitOverride} Block number override: ${providerConfig.blockNumber}.`);\n            quoteStates = await Promise.all(_.map(quoteStates, async (quoteState, idx) => {\n                if (quoteState.status == 'success') {\n                    return quoteState;\n                }\n                // QuoteChunk is pending or failed, so we try again\n                const { inputs } = quoteState;\n                try {\n                    totalCallsMade = totalCallsMade + 1;\n                    const results = await this.multicall2Provider.callSameFunctionOnContractWithMultipleParams({\n                        address: this.getQuoterAddress(useMixedRouteQuoter),\n                        contractInterface: useMixedRouteQuoter\n                            ? IMixedRouteQuoterV1__factory.createInterface()\n                            : IQuoterV2__factory.createInterface(),\n                        functionName,\n                        functionParams: inputs,\n                        providerConfig,\n                        additionalConfig: {\n                            gasLimitPerCallOverride: gasLimitOverride,\n                        },\n                    });\n                    const successRateError = this.validateSuccessRate(results.results, haveRetriedForSuccessRate);\n                    if (successRateError) {\n                        return {\n                            status: 'failed',\n                            inputs,\n                            reason: successRateError,\n                            results,\n                        };\n                    }\n                    return {\n                        status: 'success',\n                        inputs,\n                        results,\n                    };\n                }\n                catch (err) {\n                    // Error from providers have huge messages that include all the calldata and fill the logs.\n                    // Catch them and rethrow with shorter message.\n                    if (err.message.includes('header not found')) {\n                        return {\n                            status: 'failed',\n                            inputs,\n                            reason: new ProviderBlockHeaderError(err.message.slice(0, 500)),\n                        };\n                    }\n                    if (err.message.includes('timeout')) {\n                        return {\n                            status: 'failed',\n                            inputs,\n                            reason: new ProviderTimeoutError(`Req ${idx}/${quoteStates.length}. Request had ${inputs.length} inputs. ${err.message.slice(0, 500)}`),\n                        };\n                    }\n                    if (err.message.includes('out of gas')) {\n                        return {\n                            status: 'failed',\n                            inputs,\n                            reason: new ProviderGasError(err.message.slice(0, 500)),\n                        };\n                    }\n                    return {\n                        status: 'failed',\n                        inputs,\n                        reason: new Error(`Unknown error from provider: ${err.message.slice(0, 500)}`),\n                    };\n                }\n            }));\n            const [successfulQuoteStates, failedQuoteStates, pendingQuoteStates] = this.partitionQuotes(quoteStates);\n            if (pendingQuoteStates.length > 0) {\n                throw new Error('Pending quote after waiting for all promises.');\n            }\n            let retryAll = false;\n            const blockNumberError = this.validateBlockNumbers(successfulQuoteStates, inputsChunked.length, gasLimitOverride);\n            // If there is a block number conflict we retry all the quotes.\n            if (blockNumberError) {\n                retryAll = true;\n            }\n            const reasonForFailureStr = _.map(failedQuoteStates, (failedQuoteState) => failedQuoteState.reason.name).join(', ');\n            if (failedQuoteStates.length > 0) {\n                log.info(`On attempt ${attemptNumber}: ${failedQuoteStates.length}/${quoteStates.length} quotes failed. Reasons: ${reasonForFailureStr}`);\n                for (const failedQuoteState of failedQuoteStates) {\n                    const { reason: error } = failedQuoteState;\n                    log.info({ error }, `[QuoteFetchError] Attempt ${attemptNumber}. ${error.message}`);\n                    if (error instanceof BlockConflictError) {\n                        if (!haveRetriedForBlockConflictError) {\n                            metric.putMetric('QuoteBlockConflictErrorRetry', 1, MetricLoggerUnit.Count);\n                            haveRetriedForBlockConflictError = true;\n                        }\n                        retryAll = true;\n                    }\n                    else if (error instanceof ProviderBlockHeaderError) {\n                        if (!haveRetriedForBlockHeader) {\n                            metric.putMetric('QuoteBlockHeaderNotFoundRetry', 1, MetricLoggerUnit.Count);\n                            haveRetriedForBlockHeader = true;\n                        }\n                        // Ensure that if multiple calls fail due to block header in the current pending batch,\n                        // we only count once.\n                        if (!haveIncrementedBlockHeaderFailureCounter) {\n                            blockHeaderRetryAttemptNumber =\n                                blockHeaderRetryAttemptNumber + 1;\n                            haveIncrementedBlockHeaderFailureCounter = true;\n                        }\n                        if (rollback.enabled) {\n                            const { rollbackBlockOffset, attemptsBeforeRollback } = rollback;\n                            if (blockHeaderRetryAttemptNumber >= attemptsBeforeRollback &&\n                                !blockHeaderRolledBack) {\n                                log.info(`Attempt ${attemptNumber}. Have failed due to block header ${blockHeaderRetryAttemptNumber - 1} times. Rolling back block number by ${rollbackBlockOffset} for next retry`);\n                                providerConfig.blockNumber = providerConfig.blockNumber\n                                    ? (await providerConfig.blockNumber) + rollbackBlockOffset\n                                    : (await this.provider.getBlockNumber()) +\n                                        rollbackBlockOffset;\n                                retryAll = true;\n                                blockHeaderRolledBack = true;\n                            }\n                        }\n                    }\n                    else if (error instanceof ProviderTimeoutError) {\n                        if (!haveRetriedForTimeout) {\n                            metric.putMetric('QuoteTimeoutRetry', 1, MetricLoggerUnit.Count);\n                            haveRetriedForTimeout = true;\n                        }\n                    }\n                    else if (error instanceof ProviderGasError) {\n                        if (!haveRetriedForOutOfGas) {\n                            metric.putMetric('QuoteOutOfGasExceptionRetry', 1, MetricLoggerUnit.Count);\n                            haveRetriedForOutOfGas = true;\n                        }\n                        gasLimitOverride = this.gasErrorFailureOverride.gasLimitOverride;\n                        multicallChunk = this.gasErrorFailureOverride.multicallChunk;\n                        retryAll = true;\n                    }\n                    else if (error instanceof SuccessRateError) {\n                        if (!haveRetriedForSuccessRate) {\n                            metric.putMetric('QuoteSuccessRateRetry', 1, MetricLoggerUnit.Count);\n                            haveRetriedForSuccessRate = true;\n                            // Low success rate can indicate too little gas given to each call.\n                            gasLimitOverride =\n                                this.successRateFailureOverrides.gasLimitOverride;\n                            multicallChunk =\n                                this.successRateFailureOverrides.multicallChunk;\n                            retryAll = true;\n                        }\n                    }\n                    else {\n                        if (!haveRetriedForUnknownReason) {\n                            metric.putMetric('QuoteUnknownReasonRetry', 1, MetricLoggerUnit.Count);\n                            haveRetriedForUnknownReason = true;\n                        }\n                    }\n                }\n            }\n            if (retryAll) {\n                log.info(`Attempt ${attemptNumber}. Resetting all requests to pending for next attempt.`);\n                const normalizedChunk = Math.ceil(inputs.length / Math.ceil(inputs.length / multicallChunk));\n                const inputsChunked = _.chunk(inputs, normalizedChunk);\n                quoteStates = _.map(inputsChunked, (inputChunk) => {\n                    return {\n                        status: 'pending',\n                        inputs: inputChunk,\n                    };\n                });\n            }\n            if (failedQuoteStates.length > 0) {\n                // TODO: Work with Arbitrum to find a solution for making large multicalls with gas limits that always\n                // successfully.\n                //\n                // On Arbitrum we can not set a gas limit for every call in the multicall and guarantee that\n                // we will not run out of gas on the node. This is because they have a different way of accounting\n                // for gas, that seperates storage and compute gas costs, and we can not cover both in a single limit.\n                //\n                // To work around this and avoid throwing errors when really we just couldn't get a quote, we catch this\n                // case and return 0 quotes found.\n                if ((this.chainId == ChainId.ARBITRUM_ONE ||\n                    this.chainId == ChainId.ARBITRUM_RINKEBY) &&\n                    _.every(failedQuoteStates, (failedQuoteState) => failedQuoteState.reason instanceof ProviderGasError) &&\n                    attemptNumber == this.retryOptions.retries) {\n                    log.error(`Failed to get quotes on Arbitrum due to provider gas error issue. Overriding error to return 0 quotes.`);\n                    return {\n                        results: [],\n                        blockNumber: BigNumber.from(0),\n                        approxGasUsedPerSuccessCall: 0,\n                    };\n                }\n                throw new Error(`Failed to get ${failedQuoteStates.length} quotes. Reasons: ${reasonForFailureStr}`);\n            }\n            const callResults = _.map(successfulQuoteStates, (quoteState) => quoteState.results);\n            return {\n                results: _.flatMap(callResults, (result) => result.results),\n                blockNumber: BigNumber.from(callResults[0].blockNumber),\n                approxGasUsedPerSuccessCall: stats.percentile(_.map(callResults, (result) => result.approxGasUsedPerSuccessCall), 100),\n            };\n        }, {\n            retries: DEFAULT_BATCH_RETRIES,\n            ...this.retryOptions,\n        });\n        const routesQuotes = this.processQuoteResults(quoteResults, routes, amounts);\n        metric.putMetric('QuoteApproxGasUsedPerSuccessfulCall', approxGasUsedPerSuccessCall, MetricLoggerUnit.Count);\n        metric.putMetric('QuoteNumRetryLoops', finalAttemptNumber - 1, MetricLoggerUnit.Count);\n        metric.putMetric('QuoteTotalCallsToProvider', totalCallsMade, MetricLoggerUnit.Count);\n        metric.putMetric('QuoteExpectedCallsToProvider', expectedCallsMade, MetricLoggerUnit.Count);\n        metric.putMetric('QuoteNumRetriedCalls', totalCallsMade - expectedCallsMade, MetricLoggerUnit.Count);\n        const [successfulQuotes, failedQuotes] = _(routesQuotes)\n            .flatMap((routeWithQuotes) => routeWithQuotes[1])\n            .partition((quote) => quote.quote != null)\n            .value();\n        log.info(`Got ${successfulQuotes.length} successful quotes, ${failedQuotes.length} failed quotes. Took ${finalAttemptNumber - 1} attempt loops. Total calls made to provider: ${totalCallsMade}. Have retried for timeout: ${haveRetriedForTimeout}`);\n        return { routesWithQuotes: routesQuotes, blockNumber };\n    }\n    partitionQuotes(quoteStates) {\n        const successfulQuoteStates = _.filter(quoteStates, (quoteState) => quoteState.status == 'success');\n        const failedQuoteStates = _.filter(quoteStates, (quoteState) => quoteState.status == 'failed');\n        const pendingQuoteStates = _.filter(quoteStates, (quoteState) => quoteState.status == 'pending');\n        return [successfulQuoteStates, failedQuoteStates, pendingQuoteStates];\n    }\n    processQuoteResults(quoteResults, routes, amounts) {\n        const routesQuotes = [];\n        const quotesResultsByRoute = _.chunk(quoteResults, amounts.length);\n        const debugFailedQuotes = [];\n        for (let i = 0; i < quotesResultsByRoute.length; i++) {\n            const route = routes[i];\n            const quoteResults = quotesResultsByRoute[i];\n            const quotes = _.map(quoteResults, (quoteResult, index) => {\n                const amount = amounts[index];\n                if (!quoteResult.success) {\n                    const percent = (100 / amounts.length) * (index + 1);\n                    const amountStr = amount.toFixed(Math.min(amount.currency.decimals, 2));\n                    const routeStr = routeToString(route);\n                    debugFailedQuotes.push({\n                        route: routeStr,\n                        percent,\n                        amount: amountStr,\n                    });\n                    return {\n                        amount,\n                        quote: null,\n                        sqrtPriceX96AfterList: null,\n                        gasEstimate: null,\n                        initializedTicksCrossedList: null,\n                    };\n                }\n                return {\n                    amount,\n                    quote: quoteResult.result[0],\n                    sqrtPriceX96AfterList: quoteResult.result[1],\n                    initializedTicksCrossedList: quoteResult.result[2],\n                    gasEstimate: quoteResult.result[3],\n                };\n            });\n            routesQuotes.push([route, quotes]);\n        }\n        // For routes and amounts that we failed to get a quote for, group them by route\n        // and batch them together before logging to minimize number of logs.\n        const debugChunk = 80;\n        _.forEach(_.chunk(debugFailedQuotes, debugChunk), (quotes, idx) => {\n            const failedQuotesByRoute = _.groupBy(quotes, (q) => q.route);\n            const failedFlat = _.mapValues(failedQuotesByRoute, (f) => _(f)\n                .map((f) => `${f.percent}%[${f.amount}]`)\n                .join(','));\n            log.info({\n                failedQuotes: _.map(failedFlat, (amounts, routeStr) => `${routeStr} : ${amounts}`),\n            }, `Failed on chain quotes for routes Part ${idx}/${Math.ceil(debugFailedQuotes.length / debugChunk)}`);\n        });\n        return routesQuotes;\n    }\n    validateBlockNumbers(successfulQuoteStates, totalCalls, gasLimitOverride) {\n        if (successfulQuoteStates.length <= 1) {\n            return null;\n        }\n        const results = _.map(successfulQuoteStates, (quoteState) => quoteState.results);\n        const blockNumbers = _.map(results, (result) => result.blockNumber);\n        const uniqBlocks = _(blockNumbers)\n            .map((blockNumber) => blockNumber.toNumber())\n            .uniq()\n            .value();\n        if (uniqBlocks.length == 1) {\n            return null;\n        }\n        /* if (\n          uniqBlocks.length == 2 &&\n          Math.abs(uniqBlocks[0]! - uniqBlocks[1]!) <= 1\n        ) {\n          return null;\n        } */\n        return new BlockConflictError(`Quotes returned from different blocks. ${uniqBlocks}. ${totalCalls} calls were made with gas limit ${gasLimitOverride}`);\n    }\n    validateSuccessRate(allResults, haveRetriedForSuccessRate) {\n        const numResults = allResults.length;\n        const numSuccessResults = allResults.filter((result) => result.success).length;\n        const successRate = (1.0 * numSuccessResults) / numResults;\n        const { quoteMinSuccessRate } = this.batchParams;\n        if (successRate < quoteMinSuccessRate) {\n            if (haveRetriedForSuccessRate) {\n                log.info(`Quote success rate still below threshold despite retry. Continuing. ${quoteMinSuccessRate}: ${successRate}`);\n                return;\n            }\n            return new SuccessRateError(`Quote success rate below threshold of ${quoteMinSuccessRate}: ${successRate}`);\n        }\n    }\n    /**\n     * Throw an error for incorrect routes / function combinations\n     * @param routes Any combination of V3, V2, and Mixed routes.\n     * @param functionName\n     * @param useMixedRouteQuoter true if there are ANY V2Routes or MixedRoutes in the routes parameter\n     */\n    validateRoutes(routes, functionName, useMixedRouteQuoter) {\n        /// We do not send any V3Routes to new qutoer becuase it is not deployed on chains besides mainnet\n        if (routes.some((route) => route.protocol === Protocol.V3) &&\n            useMixedRouteQuoter) {\n            throw new Error(`Cannot use mixed route quoter with V3 routes`);\n        }\n        /// We cannot call quoteExactOutput with V2 or Mixed routes\n        if (functionName === 'quoteExactOutput' && useMixedRouteQuoter) {\n            throw new Error('Cannot call quoteExactOutput with V2 or Mixed routes');\n        }\n    }\n}\n//# sourceMappingURL=data:application/json;base64,"]},"metadata":{},"sourceType":"module"}