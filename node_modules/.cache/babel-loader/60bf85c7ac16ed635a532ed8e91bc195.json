{"ast":null,"code":"import { Pair } from '@uniswap/v2-sdk';\nimport _ from 'lodash';\nimport { ChainId, WRAPPED_NATIVE_CURRENCY } from '../../util/chains';\nimport { log } from '../../util/log';\nimport { DAI_MAINNET, DAI_RINKEBY_1, DAI_RINKEBY_2, USDC_MAINNET, USDT_MAINNET, WBTC_MAINNET } from '../token-provider';\nconst BASES_TO_CHECK_TRADES_AGAINST = {\n  [ChainId.MAINNET]: [WRAPPED_NATIVE_CURRENCY[ChainId.MAINNET], DAI_MAINNET, USDC_MAINNET, USDT_MAINNET, WBTC_MAINNET],\n  [ChainId.ROPSTEN]: [WRAPPED_NATIVE_CURRENCY[ChainId.ROPSTEN]],\n  [ChainId.RINKEBY]: [WRAPPED_NATIVE_CURRENCY[ChainId.RINKEBY], DAI_RINKEBY_1, DAI_RINKEBY_2],\n  [ChainId.GÖRLI]: [WRAPPED_NATIVE_CURRENCY[ChainId.GÖRLI]],\n  [ChainId.KOVAN]: [WRAPPED_NATIVE_CURRENCY[ChainId.KOVAN]],\n  //v2 not deployed on [optimism, arbitrum, polygon, celo, gnosis, moonbeam] and their testnets\n  [ChainId.OPTIMISM]: [],\n  [ChainId.ARBITRUM_ONE]: [],\n  [ChainId.ARBITRUM_RINKEBY]: [],\n  [ChainId.OPTIMISTIC_KOVAN]: [],\n  [ChainId.POLYGON]: [],\n  [ChainId.POLYGON_MUMBAI]: [],\n  [ChainId.CELO]: [],\n  [ChainId.CELO_ALFAJORES]: [],\n  [ChainId.GNOSIS]: [],\n  [ChainId.MOONBEAM]: []\n};\n/**\n * Provider that does not get data from an external source and instead returns\n * a hardcoded list of Subgraph pools.\n *\n * Since the pools are hardcoded, the liquidity/price values are dummys and should not\n * be depended on.\n *\n * Useful for instances where other data sources are unavailable. E.g. subgraph not available.\n *\n * @export\n * @class StaticV2SubgraphProvider\n */\nexport class StaticV2SubgraphProvider {\n  constructor(chainId) {\n    this.chainId = chainId;\n  }\n  async getPools(tokenIn, tokenOut) {\n    log.info('In static subgraph provider for V2');\n    const bases = BASES_TO_CHECK_TRADES_AGAINST[this.chainId];\n    const basePairs = _.flatMap(bases, base => bases.map(otherBase => [base, otherBase]));\n    if (tokenIn && tokenOut) {\n      basePairs.push([tokenIn, tokenOut], ...bases.map(base => [tokenIn, base]), ...bases.map(base => [tokenOut, base]));\n    }\n    const pairs = _(basePairs).filter(tokens => Boolean(tokens[0] && tokens[1])).filter(_ref => {\n      let [tokenA, tokenB] = _ref;\n      return tokenA.address !== tokenB.address && !tokenA.equals(tokenB);\n    }).value();\n    const poolAddressSet = new Set();\n    const subgraphPools = _(pairs).map(_ref2 => {\n      let [tokenA, tokenB] = _ref2;\n      const poolAddress = Pair.getAddress(tokenA, tokenB);\n      if (poolAddressSet.has(poolAddress)) {\n        return undefined;\n      }\n      poolAddressSet.add(poolAddress);\n      const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA];\n      return {\n        id: poolAddress,\n        liquidity: '100',\n        token0: {\n          id: token0.address\n        },\n        token1: {\n          id: token1.address\n        },\n        supply: 100,\n        reserve: 100,\n        reserveUSD: 100\n      };\n    }).compact().value();\n    return subgraphPools;\n  }\n}","map":{"version":3,"sources":["../../../../src/providers/v2/static-subgraph-provider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Pair } from '@uniswap/v2-sdk';\nimport _ from 'lodash';\nimport { ChainId, WRAPPED_NATIVE_CURRENCY } from '../../util/chains';\nimport { log } from '../../util/log';\nimport { DAI_MAINNET, DAI_RINKEBY_1, DAI_RINKEBY_2, USDC_MAINNET, USDT_MAINNET, WBTC_MAINNET, } from '../token-provider';\nconst BASES_TO_CHECK_TRADES_AGAINST = {\n    [ChainId.MAINNET]: [\n        WRAPPED_NATIVE_CURRENCY[ChainId.MAINNET],\n        DAI_MAINNET,\n        USDC_MAINNET,\n        USDT_MAINNET,\n        WBTC_MAINNET,\n    ],\n    [ChainId.ROPSTEN]: [WRAPPED_NATIVE_CURRENCY[ChainId.ROPSTEN]],\n    [ChainId.RINKEBY]: [\n        WRAPPED_NATIVE_CURRENCY[ChainId.RINKEBY],\n        DAI_RINKEBY_1,\n        DAI_RINKEBY_2,\n    ],\n    [ChainId.GÖRLI]: [WRAPPED_NATIVE_CURRENCY[ChainId.GÖRLI]],\n    [ChainId.KOVAN]: [WRAPPED_NATIVE_CURRENCY[ChainId.KOVAN]],\n    //v2 not deployed on [optimism, arbitrum, polygon, celo, gnosis, moonbeam] and their testnets\n    [ChainId.OPTIMISM]: [],\n    [ChainId.ARBITRUM_ONE]: [],\n    [ChainId.ARBITRUM_RINKEBY]: [],\n    [ChainId.OPTIMISTIC_KOVAN]: [],\n    [ChainId.POLYGON]: [],\n    [ChainId.POLYGON_MUMBAI]: [],\n    [ChainId.CELO]: [],\n    [ChainId.CELO_ALFAJORES]: [],\n    [ChainId.GNOSIS]: [],\n    [ChainId.MOONBEAM]: [],\n};\n/**\n * Provider that does not get data from an external source and instead returns\n * a hardcoded list of Subgraph pools.\n *\n * Since the pools are hardcoded, the liquidity/price values are dummys and should not\n * be depended on.\n *\n * Useful for instances where other data sources are unavailable. E.g. subgraph not available.\n *\n * @export\n * @class StaticV2SubgraphProvider\n */\nexport class StaticV2SubgraphProvider {\n    constructor(chainId) {\n        this.chainId = chainId;\n    }\n    async getPools(tokenIn, tokenOut) {\n        log.info('In static subgraph provider for V2');\n        const bases = BASES_TO_CHECK_TRADES_AGAINST[this.chainId];\n        const basePairs = _.flatMap(bases, (base) => bases.map((otherBase) => [base, otherBase]));\n        if (tokenIn && tokenOut) {\n            basePairs.push([tokenIn, tokenOut], ...bases.map((base) => [tokenIn, base]), ...bases.map((base) => [tokenOut, base]));\n        }\n        const pairs = _(basePairs)\n            .filter((tokens) => Boolean(tokens[0] && tokens[1]))\n            .filter(([tokenA, tokenB]) => tokenA.address !== tokenB.address && !tokenA.equals(tokenB))\n            .value();\n        const poolAddressSet = new Set();\n        const subgraphPools = _(pairs)\n            .map(([tokenA, tokenB]) => {\n            const poolAddress = Pair.getAddress(tokenA, tokenB);\n            if (poolAddressSet.has(poolAddress)) {\n                return undefined;\n            }\n            poolAddressSet.add(poolAddress);\n            const [token0, token1] = tokenA.sortsBefore(tokenB)\n                ? [tokenA, tokenB]\n                : [tokenB, tokenA];\n            return {\n                id: poolAddress,\n                liquidity: '100',\n                token0: {\n                    id: token0.address,\n                },\n                token1: {\n                    id: token1.address,\n                },\n                supply: 100,\n                reserve: 100,\n                reserveUSD: 100,\n            };\n        })\n            .compact()\n            .value();\n        return subgraphPools;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdGljLXN1YmdyYXBoLXByb3ZpZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3Byb3ZpZGVycy92Mi9zdGF0aWMtc3ViZ3JhcGgtcHJvdmlkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3ZDLE9BQU8sQ0FBQyxNQUFNLFFBQVEsQ0FBQztBQUV2QixPQUFPLEVBQUUsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDckUsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3JDLE9BQU8sRUFDTCxXQUFXLEVBQ1gsYUFBYSxFQUNiLGFBQWEsRUFDYixZQUFZLEVBQ1osWUFBWSxFQUNaLFlBQVksR0FDYixNQUFNLG1CQUFtQixDQUFDO0FBUTNCLE1BQU0sNkJBQTZCLEdBQW1CO0lBQ3BELENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ2pCLHVCQUF1QixDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUU7UUFDekMsV0FBVztRQUNYLFlBQVk7UUFDWixZQUFZO1FBQ1osWUFBWTtLQUNiO0lBQ0QsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFFLENBQUM7SUFDOUQsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUU7UUFDakIsdUJBQXVCLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBRTtRQUN6QyxhQUFhO1FBQ2IsYUFBYTtLQUNkO0lBQ0QsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFFLENBQUM7SUFDMUQsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFFLENBQUM7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"]},"metadata":{},"sourceType":"module"}