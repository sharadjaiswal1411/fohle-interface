{"ast":null,"code":"var createTimeFormatter=function createTimeFormatter(timestamp,locale,options){return new Date(timestamp.valueOf()*1000).toLocaleTimeString(locale,options);};export var hourFormatter=function hourFormatter(locale){return function(timestamp){return createTimeFormatter(timestamp,locale,{hour:'numeric',minute:'numeric',hour12:true});};};export var dayHourFormatter=function dayHourFormatter(locale){return function(timestamp){return createTimeFormatter(timestamp,locale,{month:'short',day:'numeric',hour:'numeric',minute:'2-digit',hour12:true});};};var createDateFormatter=function createDateFormatter(timestamp,locale,options){return new Date(timestamp.valueOf()*1000).toLocaleDateString(locale,options);};export var monthDayFormatter=function monthDayFormatter(locale){return function(timestamp){return createDateFormatter(timestamp,locale,{month:'long',day:'numeric'});};};export var monthYearDayFormatter=function monthYearDayFormatter(locale){return function(timestamp){return createDateFormatter(timestamp,locale,{month:'short',year:'numeric',day:'numeric'});};};export var monthTickFormatter=function monthTickFormatter(locale){return function(timestamp){var date=new Date(timestamp.valueOf()*1000);// when a tick maps to a date not on the first of the month, modify the tick to the closest\n// first of month date. For example, Dec 31 becomes Jan 1, and Dec 5 becomes Dec 1.\nif(date.getDate()!==1){date=date.getDate()>=15?new Date(date.getFullYear(),date.getMonth()+1,1):new Date(date.getFullYear(),date.getMonth(),1);}return date.toLocaleDateString(locale,{month:'long'});};};export var weekFormatter=function weekFormatter(locale){return function(timestamp){return createDateFormatter(timestamp,locale,{weekday:'long'});};};","map":{"version":3,"names":["createTimeFormatter","timestamp","locale","options","Date","valueOf","toLocaleTimeString","hourFormatter","hour","minute","hour12","dayHourFormatter","month","day","createDateFormatter","toLocaleDateString","monthDayFormatter","monthYearDayFormatter","year","monthTickFormatter","date","getDate","getFullYear","getMonth","weekFormatter","weekday"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/utils/formatChartTimes.ts"],"sourcesContent":["import { NumberValue } from 'd3'\n\nconst createTimeFormatter = (timestamp: NumberValue, locale: string, options: Intl.DateTimeFormatOptions) =>\n  new Date(timestamp.valueOf() * 1000).toLocaleTimeString(locale, options)\n\nexport const hourFormatter = (locale: string) => (timestamp: NumberValue) =>\n  createTimeFormatter(timestamp, locale, {\n    hour: 'numeric',\n    minute: 'numeric',\n    hour12: true,\n  })\n\nexport const dayHourFormatter = (locale: string) => (timestamp: NumberValue) =>\n  createTimeFormatter(timestamp, locale, {\n    month: 'short',\n    day: 'numeric',\n    hour: 'numeric',\n    minute: '2-digit',\n    hour12: true,\n  })\n\nconst createDateFormatter = (timestamp: NumberValue, locale: string, options: Intl.DateTimeFormatOptions) =>\n  new Date(timestamp.valueOf() * 1000).toLocaleDateString(locale, options)\n\nexport const monthDayFormatter = (locale: string) => (timestamp: NumberValue) =>\n  createDateFormatter(timestamp, locale, {\n    month: 'long',\n    day: 'numeric',\n  })\n\nexport const monthYearDayFormatter = (locale: string) => (timestamp: NumberValue) =>\n  createDateFormatter(timestamp, locale, {\n    month: 'short',\n    year: 'numeric',\n    day: 'numeric',\n  })\n\nexport const monthTickFormatter = (locale: string) => (timestamp: NumberValue) => {\n  let date = new Date(timestamp.valueOf() * 1000)\n\n  // when a tick maps to a date not on the first of the month, modify the tick to the closest\n  // first of month date. For example, Dec 31 becomes Jan 1, and Dec 5 becomes Dec 1.\n  if (date.getDate() !== 1) {\n    date =\n      date.getDate() >= 15\n        ? new Date(date.getFullYear(), date.getMonth() + 1, 1)\n        : new Date(date.getFullYear(), date.getMonth(), 1)\n  }\n  return date.toLocaleDateString(locale, { month: 'long' })\n}\n\nexport const weekFormatter = (locale: string) => (timestamp: NumberValue) =>\n  createDateFormatter(timestamp, locale, { weekday: 'long' })\n"],"mappings":"AAEA,GAAMA,oBAAmB,CAAG,QAAtBA,oBAAmB,CAAIC,SAAsB,CAAEC,MAAc,CAAEC,OAAmC,QACtG,IAAIC,KAAI,CAACH,SAAS,CAACI,OAAO,EAAE,CAAG,IAAI,CAAC,CAACC,kBAAkB,CAACJ,MAAM,CAAEC,OAAO,CAAC,GAE1E,MAAO,IAAMI,cAAa,CAAG,QAAhBA,cAAa,CAAIL,MAAc,QAAK,UAACD,SAAsB,QACtED,oBAAmB,CAACC,SAAS,CAAEC,MAAM,CAAE,CACrCM,IAAI,CAAE,SAAS,CACfC,MAAM,CAAE,SAAS,CACjBC,MAAM,CAAE,IACV,CAAC,CAAC,KAEJ,MAAO,IAAMC,iBAAgB,CAAG,QAAnBA,iBAAgB,CAAIT,MAAc,QAAK,UAACD,SAAsB,QACzED,oBAAmB,CAACC,SAAS,CAAEC,MAAM,CAAE,CACrCU,KAAK,CAAE,OAAO,CACdC,GAAG,CAAE,SAAS,CACdL,IAAI,CAAE,SAAS,CACfC,MAAM,CAAE,SAAS,CACjBC,MAAM,CAAE,IACV,CAAC,CAAC,KAEJ,GAAMI,oBAAmB,CAAG,QAAtBA,oBAAmB,CAAIb,SAAsB,CAAEC,MAAc,CAAEC,OAAmC,QACtG,IAAIC,KAAI,CAACH,SAAS,CAACI,OAAO,EAAE,CAAG,IAAI,CAAC,CAACU,kBAAkB,CAACb,MAAM,CAAEC,OAAO,CAAC,GAE1E,MAAO,IAAMa,kBAAiB,CAAG,QAApBA,kBAAiB,CAAId,MAAc,QAAK,UAACD,SAAsB,QAC1Ea,oBAAmB,CAACb,SAAS,CAAEC,MAAM,CAAE,CACrCU,KAAK,CAAE,MAAM,CACbC,GAAG,CAAE,SACP,CAAC,CAAC,KAEJ,MAAO,IAAMI,sBAAqB,CAAG,QAAxBA,sBAAqB,CAAIf,MAAc,QAAK,UAACD,SAAsB,QAC9Ea,oBAAmB,CAACb,SAAS,CAAEC,MAAM,CAAE,CACrCU,KAAK,CAAE,OAAO,CACdM,IAAI,CAAE,SAAS,CACfL,GAAG,CAAE,SACP,CAAC,CAAC,KAEJ,MAAO,IAAMM,mBAAkB,CAAG,QAArBA,mBAAkB,CAAIjB,MAAc,QAAK,UAACD,SAAsB,CAAK,CAChF,GAAImB,KAAI,CAAG,GAAIhB,KAAI,CAACH,SAAS,CAACI,OAAO,EAAE,CAAG,IAAI,CAAC,CAE/C;AACA;AACA,GAAIe,IAAI,CAACC,OAAO,EAAE,GAAK,CAAC,CAAE,CACxBD,IAAI,CACFA,IAAI,CAACC,OAAO,EAAE,EAAI,EAAE,CAChB,GAAIjB,KAAI,CAACgB,IAAI,CAACE,WAAW,EAAE,CAAEF,IAAI,CAACG,QAAQ,EAAE,CAAG,CAAC,CAAE,CAAC,CAAC,CACpD,GAAInB,KAAI,CAACgB,IAAI,CAACE,WAAW,EAAE,CAAEF,IAAI,CAACG,QAAQ,EAAE,CAAE,CAAC,CAAC,CACxD,CACA,MAAOH,KAAI,CAACL,kBAAkB,CAACb,MAAM,CAAE,CAAEU,KAAK,CAAE,MAAO,CAAC,CAAC,CAC3D,CAAC,GAED,MAAO,IAAMY,cAAa,CAAG,QAAhBA,cAAa,CAAItB,MAAc,QAAK,UAACD,SAAsB,QACtEa,oBAAmB,CAACb,SAAS,CAAEC,MAAM,CAAE,CAAEuB,OAAO,CAAE,MAAO,CAAC,CAAC"},"metadata":{},"sourceType":"module"}