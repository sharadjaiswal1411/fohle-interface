{"ast":null,"code":"import _toConsumableArray from\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import{SupportedChainId}from'constants/chains';import useHttpLocations from'hooks/useHttpLocations';import{useMemo}from'react';import{isAddress}from'utils';import EthereumLogo from'../../assets/images/ethereum-logo.png';import CeloLogo from\"../../assets/svg/celo_logo.svg\";import MaticLogo from\"../../assets/svg/matic-token-icon.svg\";import{isCelo,NATIVE_CHAIN_ID,nativeOnChain}from'../../constants/tokens';export function chainIdToNetworkName(networkId){switch(networkId){case SupportedChainId.MAINNET:return'ethereum';case SupportedChainId.ARBITRUM_ONE:return'arbitrum';case SupportedChainId.OPTIMISM:return'optimism';case SupportedChainId.POLYGON:return'polygon';default:return'ethereum';}}export function getNativeLogoURI(){var chainId=arguments.length>0&&arguments[0]!==undefined?arguments[0]:SupportedChainId.MAINNET;switch(chainId){case SupportedChainId.POLYGON:case SupportedChainId.POLYGON_MUMBAI:return MaticLogo;case SupportedChainId.CELO:case SupportedChainId.CELO_ALFAJORES:return CeloLogo;default:return EthereumLogo;}}function getTokenLogoURI(address){var chainId=arguments.length>1&&arguments[1]!==undefined?arguments[1]:SupportedChainId.MAINNET;var networkName=chainIdToNetworkName(chainId);var networksWithUrls=[SupportedChainId.ARBITRUM_ONE,SupportedChainId.MAINNET,SupportedChainId.OPTIMISM];if(networksWithUrls.includes(chainId)){return\"https://raw.githubusercontent.com/Uniswap/assets/master/blockchains/\".concat(networkName,\"/assets/\").concat(address,\"/logo.png\");}// Celo logo logo is hosted elsewhere.\nif(isCelo(chainId)){if(address===nativeOnChain(chainId).wrapped.address){return'https://raw.githubusercontent.com/ubeswap/default-token-list/master/assets/asset_CELO.png';}}}export default function useCurrencyLogoURIs(currency){var locations=useHttpLocations(currency===null||currency===void 0?void 0:currency.logoURI);return useMemo(function(){var logoURIs=_toConsumableArray(locations);if(currency){if(currency.isNative||currency.address===NATIVE_CHAIN_ID){logoURIs.push(getNativeLogoURI(currency.chainId));}else if(currency.isToken||currency.address){var checksummedAddress=isAddress(currency.address);var logoURI=checksummedAddress&&getTokenLogoURI(checksummedAddress,currency.chainId);if(logoURI){logoURIs.push(logoURI);}}}return logoURIs;},[currency,locations]);}","map":{"version":3,"names":["SupportedChainId","useHttpLocations","useMemo","isAddress","EthereumLogo","isCelo","NATIVE_CHAIN_ID","nativeOnChain","chainIdToNetworkName","networkId","MAINNET","ARBITRUM_ONE","OPTIMISM","POLYGON","getNativeLogoURI","chainId","POLYGON_MUMBAI","MaticLogo","CELO","CELO_ALFAJORES","CeloLogo","getTokenLogoURI","address","networkName","networksWithUrls","includes","wrapped","useCurrencyLogoURIs","currency","locations","logoURI","logoURIs","isNative","push","isToken","checksummedAddress"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/lib/hooks/useCurrencyLogoURIs.ts"],"sourcesContent":["import { SupportedChainId } from 'constants/chains'\nimport useHttpLocations from 'hooks/useHttpLocations'\nimport { useMemo } from 'react'\nimport { isAddress } from 'utils'\n\nimport EthereumLogo from '../../assets/images/ethereum-logo.png'\nimport CeloLogo from '../../assets/svg/celo_logo.svg'\nimport MaticLogo from '../../assets/svg/matic-token-icon.svg'\nimport { isCelo, NATIVE_CHAIN_ID, nativeOnChain } from '../../constants/tokens'\n\ntype Network = 'ethereum' | 'arbitrum' | 'optimism' | 'polygon'\n\nexport function chainIdToNetworkName(networkId: SupportedChainId): Network {\n  switch (networkId) {\n    case SupportedChainId.MAINNET:\n      return 'ethereum'\n    case SupportedChainId.ARBITRUM_ONE:\n      return 'arbitrum'\n    case SupportedChainId.OPTIMISM:\n      return 'optimism'\n    case SupportedChainId.POLYGON:\n      return 'polygon'\n    default:\n      return 'ethereum'\n  }\n}\n\nexport function getNativeLogoURI(chainId: SupportedChainId = SupportedChainId.MAINNET): string {\n  switch (chainId) {\n    case SupportedChainId.POLYGON:\n    case SupportedChainId.POLYGON_MUMBAI:\n      return MaticLogo\n    case SupportedChainId.CELO:\n    case SupportedChainId.CELO_ALFAJORES:\n      return CeloLogo\n    default:\n      return EthereumLogo\n  }\n}\n\nfunction getTokenLogoURI(address: string, chainId: SupportedChainId = SupportedChainId.MAINNET): string | void {\n  const networkName = chainIdToNetworkName(chainId)\n  const networksWithUrls = [SupportedChainId.ARBITRUM_ONE, SupportedChainId.MAINNET, SupportedChainId.OPTIMISM]\n  if (networksWithUrls.includes(chainId)) {\n    return `https://raw.githubusercontent.com/Uniswap/assets/master/blockchains/${networkName}/assets/${address}/logo.png`\n  }\n\n  // Celo logo logo is hosted elsewhere.\n  if (isCelo(chainId)) {\n    if (address === nativeOnChain(chainId).wrapped.address) {\n      return 'https://raw.githubusercontent.com/ubeswap/default-token-list/master/assets/asset_CELO.png'\n    }\n  }\n}\n\nexport default function useCurrencyLogoURIs(\n  currency:\n    | {\n        isNative?: boolean\n        isToken?: boolean\n        address?: string\n        chainId: number\n        logoURI?: string | null\n      }\n    | null\n    | undefined\n): string[] {\n  const locations = useHttpLocations(currency?.logoURI)\n  return useMemo(() => {\n    const logoURIs = [...locations]\n    if (currency) {\n      if (currency.isNative || currency.address === NATIVE_CHAIN_ID) {\n        logoURIs.push(getNativeLogoURI(currency.chainId))\n      } else if (currency.isToken || currency.address) {\n        const checksummedAddress = isAddress(currency.address)\n        const logoURI = checksummedAddress && getTokenLogoURI(checksummedAddress, currency.chainId)\n        if (logoURI) {\n          logoURIs.push(logoURI)\n        }\n      }\n    }\n    return logoURIs\n  }, [currency, locations])\n}\n"],"mappings":"oLAAA,OAASA,gBAAgB,KAAQ,kBAAkB,CACnD,MAAOC,iBAAgB,KAAM,wBAAwB,CACrD,OAASC,OAAO,KAAQ,OAAO,CAC/B,OAASC,SAAS,KAAQ,OAAO,CAEjC,MAAOC,aAAY,KAAM,uCAAuC,mHAGhE,OAASC,MAAM,CAAEC,eAAe,CAAEC,aAAa,KAAQ,wBAAwB,CAI/E,MAAO,SAASC,qBAAoB,CAACC,SAA2B,CAAW,CACzE,OAAQA,SAAS,EACf,IAAKT,iBAAgB,CAACU,OAAO,CAC3B,MAAO,UAAU,CACnB,IAAKV,iBAAgB,CAACW,YAAY,CAChC,MAAO,UAAU,CACnB,IAAKX,iBAAgB,CAACY,QAAQ,CAC5B,MAAO,UAAU,CACnB,IAAKZ,iBAAgB,CAACa,OAAO,CAC3B,MAAO,SAAS,CAClB,QACE,MAAO,UAAU,EAEvB,CAEA,MAAO,SAASC,iBAAgB,EAA+D,IAA9DC,QAAyB,2DAAGf,gBAAgB,CAACU,OAAO,CACnF,OAAQK,OAAO,EACb,IAAKf,iBAAgB,CAACa,OAAO,CAC7B,IAAKb,iBAAgB,CAACgB,cAAc,CAClC,MAAOC,UAAS,CAClB,IAAKjB,iBAAgB,CAACkB,IAAI,CAC1B,IAAKlB,iBAAgB,CAACmB,cAAc,CAClC,MAAOC,SAAQ,CACjB,QACE,MAAOhB,aAAY,EAEzB,CAEA,QAASiB,gBAAe,CAACC,OAAe,CAAuE,IAArEP,QAAyB,2DAAGf,gBAAgB,CAACU,OAAO,CAC5F,GAAMa,YAAW,CAAGf,oBAAoB,CAACO,OAAO,CAAC,CACjD,GAAMS,iBAAgB,CAAG,CAACxB,gBAAgB,CAACW,YAAY,CAAEX,gBAAgB,CAACU,OAAO,CAAEV,gBAAgB,CAACY,QAAQ,CAAC,CAC7G,GAAIY,gBAAgB,CAACC,QAAQ,CAACV,OAAO,CAAC,CAAE,CACtC,oFAA8EQ,WAAW,oBAAWD,OAAO,cAC7G,CAEA;AACA,GAAIjB,MAAM,CAACU,OAAO,CAAC,CAAE,CACnB,GAAIO,OAAO,GAAKf,aAAa,CAACQ,OAAO,CAAC,CAACW,OAAO,CAACJ,OAAO,CAAE,CACtD,MAAO,2FAA2F,CACpG,CACF,CACF,CAEA,cAAe,SAASK,oBAAmB,CACzCC,QASa,CACH,CACV,GAAMC,UAAS,CAAG5B,gBAAgB,CAAC2B,QAAQ,SAARA,QAAQ,iBAARA,QAAQ,CAAEE,OAAO,CAAC,CACrD,MAAO5B,QAAO,CAAC,UAAM,CACnB,GAAM6B,SAAQ,oBAAOF,SAAS,CAAC,CAC/B,GAAID,QAAQ,CAAE,CACZ,GAAIA,QAAQ,CAACI,QAAQ,EAAIJ,QAAQ,CAACN,OAAO,GAAKhB,eAAe,CAAE,CAC7DyB,QAAQ,CAACE,IAAI,CAACnB,gBAAgB,CAACc,QAAQ,CAACb,OAAO,CAAC,CAAC,CACnD,CAAC,IAAM,IAAIa,QAAQ,CAACM,OAAO,EAAIN,QAAQ,CAACN,OAAO,CAAE,CAC/C,GAAMa,mBAAkB,CAAGhC,SAAS,CAACyB,QAAQ,CAACN,OAAO,CAAC,CACtD,GAAMQ,QAAO,CAAGK,kBAAkB,EAAId,eAAe,CAACc,kBAAkB,CAAEP,QAAQ,CAACb,OAAO,CAAC,CAC3F,GAAIe,OAAO,CAAE,CACXC,QAAQ,CAACE,IAAI,CAACH,OAAO,CAAC,CACxB,CACF,CACF,CACA,MAAOC,SAAQ,CACjB,CAAC,CAAE,CAACH,QAAQ,CAAEC,SAAS,CAAC,CAAC,CAC3B"},"metadata":{},"sourceType":"module"}