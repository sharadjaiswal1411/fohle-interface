{"ast":null,"code":"import { Trade } from '@uniswap/router-sdk';\nexport let TradeState;\n\n// from https://github.com/Uniswap/routing-api/blob/main/lib/handlers/schema.ts\n(function (TradeState) {\n  TradeState[TradeState[\"LOADING\"] = 0] = \"LOADING\";\n  TradeState[TradeState[\"INVALID\"] = 1] = \"INVALID\";\n  TradeState[TradeState[\"NO_ROUTE_FOUND\"] = 2] = \"NO_ROUTE_FOUND\";\n  TradeState[TradeState[\"VALID\"] = 3] = \"VALID\";\n  TradeState[TradeState[\"SYNCING\"] = 4] = \"SYNCING\";\n})(TradeState || (TradeState = {}));\nexport class InterfaceTrade extends Trade {\n  constructor(_ref) {\n    let {\n      gasUseEstimateUSD,\n      blockNumber,\n      ...routes\n    } = _ref;\n    super(routes);\n    this.gasUseEstimateUSD = void 0;\n    this.blockNumber = void 0;\n    this.blockNumber = blockNumber;\n    this.gasUseEstimateUSD = gasUseEstimateUSD;\n  }\n}","map":{"version":3,"names":["Trade","TradeState","InterfaceTrade","constructor","gasUseEstimateUSD","blockNumber","routes"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/state/routing/types.ts"],"sourcesContent":["import { MixedRouteSDK, Trade } from '@uniswap/router-sdk'\nimport { Currency, CurrencyAmount, Token, TradeType } from '@uniswap/sdk-core'\nimport { Route as V2Route } from '@uniswap/v2-sdk'\nimport { Route as V3Route } from '@uniswap/v3-sdk'\n\nexport enum TradeState {\n  LOADING,\n  INVALID,\n  NO_ROUTE_FOUND,\n  VALID,\n  SYNCING,\n}\n\n// from https://github.com/Uniswap/routing-api/blob/main/lib/handlers/schema.ts\n\ntype TokenInRoute = Pick<Token, 'address' | 'chainId' | 'symbol' | 'decimals'>\n\nexport type V3PoolInRoute = {\n  type: 'v3-pool'\n  tokenIn: TokenInRoute\n  tokenOut: TokenInRoute\n  sqrtRatioX96: string\n  liquidity: string\n  tickCurrent: string\n  fee: string\n  amountIn?: string\n  amountOut?: string\n\n  // not used in the interface\n  address?: string\n}\n\ntype V2Reserve = {\n  token: TokenInRoute\n  quotient: string\n}\n\nexport type V2PoolInRoute = {\n  type: 'v2-pool'\n  tokenIn: TokenInRoute\n  tokenOut: TokenInRoute\n  reserve0: V2Reserve\n  reserve1: V2Reserve\n  amountIn?: string\n  amountOut?: string\n\n  // not used in the interface\n  // avoid returning it from the client-side smart-order-router\n  address?: string\n}\n\nexport interface GetQuoteResult {\n  quoteId?: string\n  blockNumber: string\n  amount: string\n  amountDecimals: string\n  gasPriceWei: string\n  gasUseEstimate: string\n  gasUseEstimateQuote: string\n  gasUseEstimateQuoteDecimals: string\n  gasUseEstimateUSD: string\n  methodParameters?: { calldata: string; value: string }\n  quote: string\n  quoteDecimals: string\n  quoteGasAdjusted: string\n  quoteGasAdjustedDecimals: string\n  route: Array<(V3PoolInRoute | V2PoolInRoute)[]>\n  routeString: string\n}\n\nexport class InterfaceTrade<\n  TInput extends Currency,\n  TOutput extends Currency,\n  TTradeType extends TradeType\n> extends Trade<TInput, TOutput, TTradeType> {\n  gasUseEstimateUSD: CurrencyAmount<Token> | null | undefined\n  blockNumber: string | null | undefined\n\n  constructor({\n    gasUseEstimateUSD,\n    blockNumber,\n    ...routes\n  }: {\n    gasUseEstimateUSD?: CurrencyAmount<Token> | undefined | null\n    blockNumber?: string | null | undefined\n    v2Routes: {\n      routev2: V2Route<TInput, TOutput>\n      inputAmount: CurrencyAmount<TInput>\n      outputAmount: CurrencyAmount<TOutput>\n    }[]\n    v3Routes: {\n      routev3: V3Route<TInput, TOutput>\n      inputAmount: CurrencyAmount<TInput>\n      outputAmount: CurrencyAmount<TOutput>\n    }[]\n    tradeType: TTradeType\n    mixedRoutes?: {\n      mixedRoute: MixedRouteSDK<TInput, TOutput>\n      inputAmount: CurrencyAmount<TInput>\n      outputAmount: CurrencyAmount<TOutput>\n    }[]\n  }) {\n    super(routes)\n    this.blockNumber = blockNumber\n    this.gasUseEstimateUSD = gasUseEstimateUSD\n  }\n}\n"],"mappings":"AAAA,SAAwBA,KAAK,QAAQ,qBAAqB;AAK1D,WAAYC,UAAU;;AAQtB;AAAA,WARYA,UAAU;EAAVA,UAAU,CAAVA,UAAU;EAAVA,UAAU,CAAVA,UAAU;EAAVA,UAAU,CAAVA,UAAU;EAAVA,UAAU,CAAVA,UAAU;EAAVA,UAAU,CAAVA,UAAU;AAAA,GAAVA,UAAU,KAAVA,UAAU;AAiEtB,OAAO,MAAMC,cAAc,SAIjBF,KAAK,CAA8B;EAI3CG,WAAW,OAuBR;IAAA,IAvBS;MACVC,iBAAiB;MACjBC,WAAW;MACX,GAAGC;IAoBL,CAAC;IACC,KAAK,CAACA,MAAM,CAAC;IAAA,KA3BfF,iBAAiB;IAAA,KACjBC,WAAW;IA2BT,IAAI,CAACA,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACD,iBAAiB,GAAGA,iBAAiB;EAC5C;AACF"},"metadata":{},"sourceType":"module"}