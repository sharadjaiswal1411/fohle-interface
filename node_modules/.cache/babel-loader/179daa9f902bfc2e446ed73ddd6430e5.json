{"ast":null,"code":"import _slicedToArray from\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useUpdatePoolData,useAllPoolData,useAddPoolKeys}from'./hooks';import{useEffect,useMemo}from'react';import{useTopPoolAddresses}from'data/pools/topPools';import{usePoolDatas}from'data/pools/poolData';import{POOL_HIDE}from'../../constants';import{useActiveNetworkVersion}from'state/application/hooks';export default function Updater(){// updaters\nvar _useActiveNetworkVers=useActiveNetworkVersion(),_useActiveNetworkVers2=_slicedToArray(_useActiveNetworkVers,1),currentNetwork=_useActiveNetworkVers2[0];var updatePoolData=useUpdatePoolData();var addPoolKeys=useAddPoolKeys();// data\nvar allPoolData=useAllPoolData();var _useTopPoolAddresses=useTopPoolAddresses(),loading=_useTopPoolAddresses.loading,error=_useTopPoolAddresses.error,addresses=_useTopPoolAddresses.addresses;// add top pools on first load\nuseEffect(function(){if(addresses&&!error&&!loading){addPoolKeys(addresses);}},[addPoolKeys,addresses,error,loading]);// load data for pools we need to hide\nuseEffect(function(){addPoolKeys(POOL_HIDE[currentNetwork.id]);},[addPoolKeys,currentNetwork.id]);// detect for which addresses we havent loaded pool data yet\nvar unfetchedPoolAddresses=useMemo(function(){return Object.keys(allPoolData).reduce(function(accum,key){var poolData=allPoolData[key];if(!poolData.data||!poolData.lastUpdated){accum.push(key);}return accum;},[]);},[allPoolData]);// update unloaded pool entries with fetched data\nvar _usePoolDatas=usePoolDatas(unfetchedPoolAddresses),poolDataError=_usePoolDatas.error,poolDataLoading=_usePoolDatas.loading,poolDatas=_usePoolDatas.data;useEffect(function(){if(poolDatas&&!poolDataError&&!poolDataLoading){updatePoolData(Object.values(poolDatas));}},[poolDataError,poolDataLoading,poolDatas,updatePoolData]);return null;}","map":{"version":3,"names":["useUpdatePoolData","useAllPoolData","useAddPoolKeys","useEffect","useMemo","useTopPoolAddresses","usePoolDatas","POOL_HIDE","useActiveNetworkVersion","Updater","currentNetwork","updatePoolData","addPoolKeys","allPoolData","loading","error","addresses","id","unfetchedPoolAddresses","Object","keys","reduce","accum","key","poolData","data","lastUpdated","push","poolDataError","poolDataLoading","poolDatas","values"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/state/pools/updater.ts"],"sourcesContent":["import { useUpdatePoolData, useAllPoolData, useAddPoolKeys } from './hooks'\nimport { useEffect, useMemo } from 'react'\nimport { useTopPoolAddresses } from 'data/pools/topPools'\nimport { usePoolDatas } from 'data/pools/poolData'\nimport { POOL_HIDE } from '../../constants'\nimport { useActiveNetworkVersion } from 'state/application/hooks'\n\nexport default function Updater(): null {\n  // updaters\n  const [currentNetwork] = useActiveNetworkVersion()\n  const updatePoolData = useUpdatePoolData()\n  const addPoolKeys = useAddPoolKeys()\n\n  // data\n  const allPoolData = useAllPoolData()\n  const { loading, error, addresses } = useTopPoolAddresses()\n\n  // add top pools on first load\n  useEffect(() => {\n    if (addresses && !error && !loading) {\n      addPoolKeys(addresses)\n    }\n  }, [addPoolKeys, addresses, error, loading])\n\n  // load data for pools we need to hide\n  useEffect(() => {\n    addPoolKeys(POOL_HIDE[currentNetwork.id])\n  }, [addPoolKeys, currentNetwork.id])\n\n  // detect for which addresses we havent loaded pool data yet\n  const unfetchedPoolAddresses = useMemo(() => {\n    return Object.keys(allPoolData).reduce((accum: string[], key) => {\n      const poolData = allPoolData[key]\n      if (!poolData.data || !poolData.lastUpdated) {\n        accum.push(key)\n      }\n      return accum\n    }, [])\n  }, [allPoolData])\n\n  // update unloaded pool entries with fetched data\n  const { error: poolDataError, loading: poolDataLoading, data: poolDatas } = usePoolDatas(unfetchedPoolAddresses)\n\n  useEffect(() => {\n    if (poolDatas && !poolDataError && !poolDataLoading) {\n      updatePoolData(Object.values(poolDatas))\n    }\n  }, [poolDataError, poolDataLoading, poolDatas, updatePoolData])\n\n  return null\n}"],"mappings":"4KAAA,OAASA,iBAAiB,CAAEC,cAAc,CAAEC,cAAc,KAAQ,SAAS,CAC3E,OAASC,SAAS,CAAEC,OAAO,KAAQ,OAAO,CAC1C,OAASC,mBAAmB,KAAQ,qBAAqB,CACzD,OAASC,YAAY,KAAQ,qBAAqB,CAClD,OAASC,SAAS,KAAQ,iBAAiB,CAC3C,OAASC,uBAAuB,KAAQ,yBAAyB,CAEjE,cAAe,SAASC,QAAO,EAAS,CACtC;AACA,0BAAyBD,uBAAuB,EAAE,gEAA3CE,cAAc,2BACrB,GAAMC,eAAc,CAAGX,iBAAiB,EAAE,CAC1C,GAAMY,YAAW,CAAGV,cAAc,EAAE,CAEpC;AACA,GAAMW,YAAW,CAAGZ,cAAc,EAAE,CACpC,yBAAsCI,mBAAmB,EAAE,CAAnDS,OAAO,sBAAPA,OAAO,CAAEC,KAAK,sBAALA,KAAK,CAAEC,SAAS,sBAATA,SAAS,CAEjC;AACAb,SAAS,CAAC,UAAM,CACd,GAAIa,SAAS,EAAI,CAACD,KAAK,EAAI,CAACD,OAAO,CAAE,CACnCF,WAAW,CAACI,SAAS,CAAC,CACxB,CACF,CAAC,CAAE,CAACJ,WAAW,CAAEI,SAAS,CAAED,KAAK,CAAED,OAAO,CAAC,CAAC,CAE5C;AACAX,SAAS,CAAC,UAAM,CACdS,WAAW,CAACL,SAAS,CAACG,cAAc,CAACO,EAAE,CAAC,CAAC,CAC3C,CAAC,CAAE,CAACL,WAAW,CAAEF,cAAc,CAACO,EAAE,CAAC,CAAC,CAEpC;AACA,GAAMC,uBAAsB,CAAGd,OAAO,CAAC,UAAM,CAC3C,MAAOe,OAAM,CAACC,IAAI,CAACP,WAAW,CAAC,CAACQ,MAAM,CAAC,SAACC,KAAe,CAAEC,GAAG,CAAK,CAC/D,GAAMC,SAAQ,CAAGX,WAAW,CAACU,GAAG,CAAC,CACjC,GAAI,CAACC,QAAQ,CAACC,IAAI,EAAI,CAACD,QAAQ,CAACE,WAAW,CAAE,CAC3CJ,KAAK,CAACK,IAAI,CAACJ,GAAG,CAAC,CACjB,CACA,MAAOD,MAAK,CACd,CAAC,CAAE,EAAE,CAAC,CACR,CAAC,CAAE,CAACT,WAAW,CAAC,CAAC,CAEjB;AACA,kBAA4EP,YAAY,CAACY,sBAAsB,CAAC,CAAjGU,aAAa,eAApBb,KAAK,CAA0Bc,eAAe,eAAxBf,OAAO,CAAyBgB,SAAS,eAAfL,IAAI,CAE5DtB,SAAS,CAAC,UAAM,CACd,GAAI2B,SAAS,EAAI,CAACF,aAAa,EAAI,CAACC,eAAe,CAAE,CACnDlB,cAAc,CAACQ,MAAM,CAACY,MAAM,CAACD,SAAS,CAAC,CAAC,CAC1C,CACF,CAAC,CAAE,CAACF,aAAa,CAAEC,eAAe,CAAEC,SAAS,CAAEnB,cAAc,CAAC,CAAC,CAE/D,MAAO,KAAI,CACb"},"metadata":{},"sourceType":"module"}