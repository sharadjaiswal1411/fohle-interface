{"ast":null,"code":"'use strict';\n\nmodule.exports = atxHeading;\nvar C_NEWLINE = '\\n';\nvar C_TAB = '\\t';\nvar C_SPACE = ' ';\nvar C_HASH = '#';\nvar MAX_ATX_COUNT = 6;\nfunction atxHeading(eat, value, silent) {\n  var self = this;\n  var settings = self.options;\n  var length = value.length + 1;\n  var index = -1;\n  var now = eat.now();\n  var subvalue = '';\n  var content = '';\n  var character;\n  var queue;\n  var depth;\n\n  /* Eat initial spacing. */\n  while (++index < length) {\n    character = value.charAt(index);\n    if (character !== C_SPACE && character !== C_TAB) {\n      index--;\n      break;\n    }\n    subvalue += character;\n  }\n\n  /* Eat hashes. */\n  depth = 0;\n  while (++index <= length) {\n    character = value.charAt(index);\n    if (character !== C_HASH) {\n      index--;\n      break;\n    }\n    subvalue += character;\n    depth++;\n  }\n  if (depth > MAX_ATX_COUNT) {\n    return;\n  }\n  if (!depth || !settings.pedantic && value.charAt(index + 1) === C_HASH) {\n    return;\n  }\n  length = value.length + 1;\n\n  /* Eat intermediate white-space. */\n  queue = '';\n  while (++index < length) {\n    character = value.charAt(index);\n    if (character !== C_SPACE && character !== C_TAB) {\n      index--;\n      break;\n    }\n    queue += character;\n  }\n\n  /* Exit when not in pedantic mode without spacing. */\n  if (!settings.pedantic && queue.length === 0 && character && character !== C_NEWLINE) {\n    return;\n  }\n  if (silent) {\n    return true;\n  }\n\n  /* Eat content. */\n  subvalue += queue;\n  queue = '';\n  content = '';\n  while (++index < length) {\n    character = value.charAt(index);\n    if (!character || character === C_NEWLINE) {\n      break;\n    }\n    if (character !== C_SPACE && character !== C_TAB && character !== C_HASH) {\n      content += queue + character;\n      queue = '';\n      continue;\n    }\n    while (character === C_SPACE || character === C_TAB) {\n      queue += character;\n      character = value.charAt(++index);\n    }\n    while (character === C_HASH) {\n      queue += character;\n      character = value.charAt(++index);\n    }\n    while (character === C_SPACE || character === C_TAB) {\n      queue += character;\n      character = value.charAt(++index);\n    }\n    index--;\n  }\n  now.column += subvalue.length;\n  now.offset += subvalue.length;\n  subvalue += content + queue;\n  return eat(subvalue)({\n    type: 'heading',\n    depth: depth,\n    children: self.tokenizeInline(content, now)\n  });\n}","map":{"version":3,"names":["module","exports","atxHeading","C_NEWLINE","C_TAB","C_SPACE","C_HASH","MAX_ATX_COUNT","eat","value","silent","self","settings","options","length","index","now","subvalue","content","character","queue","depth","charAt","pedantic","column","offset","type","children","tokenizeInline"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/remark-parse/lib/tokenize/heading-atx.js"],"sourcesContent":["'use strict';\n\nmodule.exports = atxHeading;\n\nvar C_NEWLINE = '\\n';\nvar C_TAB = '\\t';\nvar C_SPACE = ' ';\nvar C_HASH = '#';\n\nvar MAX_ATX_COUNT = 6;\n\nfunction atxHeading(eat, value, silent) {\n  var self = this;\n  var settings = self.options;\n  var length = value.length + 1;\n  var index = -1;\n  var now = eat.now();\n  var subvalue = '';\n  var content = '';\n  var character;\n  var queue;\n  var depth;\n\n  /* Eat initial spacing. */\n  while (++index < length) {\n    character = value.charAt(index);\n\n    if (character !== C_SPACE && character !== C_TAB) {\n      index--;\n      break;\n    }\n\n    subvalue += character;\n  }\n\n  /* Eat hashes. */\n  depth = 0;\n\n  while (++index <= length) {\n    character = value.charAt(index);\n\n    if (character !== C_HASH) {\n      index--;\n      break;\n    }\n\n    subvalue += character;\n    depth++;\n  }\n\n  if (depth > MAX_ATX_COUNT) {\n    return;\n  }\n\n  if (\n    !depth ||\n    (!settings.pedantic && value.charAt(index + 1) === C_HASH)\n  ) {\n    return;\n  }\n\n  length = value.length + 1;\n\n  /* Eat intermediate white-space. */\n  queue = '';\n\n  while (++index < length) {\n    character = value.charAt(index);\n\n    if (character !== C_SPACE && character !== C_TAB) {\n      index--;\n      break;\n    }\n\n    queue += character;\n  }\n\n  /* Exit when not in pedantic mode without spacing. */\n  if (\n    !settings.pedantic &&\n    queue.length === 0 &&\n    character &&\n    character !== C_NEWLINE\n  ) {\n    return;\n  }\n\n  if (silent) {\n    return true;\n  }\n\n  /* Eat content. */\n  subvalue += queue;\n  queue = '';\n  content = '';\n\n  while (++index < length) {\n    character = value.charAt(index);\n\n    if (!character || character === C_NEWLINE) {\n      break;\n    }\n\n    if (\n      character !== C_SPACE &&\n      character !== C_TAB &&\n      character !== C_HASH\n    ) {\n      content += queue + character;\n      queue = '';\n      continue;\n    }\n\n    while (character === C_SPACE || character === C_TAB) {\n      queue += character;\n      character = value.charAt(++index);\n    }\n\n    while (character === C_HASH) {\n      queue += character;\n      character = value.charAt(++index);\n    }\n\n    while (character === C_SPACE || character === C_TAB) {\n      queue += character;\n      character = value.charAt(++index);\n    }\n\n    index--;\n  }\n\n  now.column += subvalue.length;\n  now.offset += subvalue.length;\n  subvalue += content + queue;\n\n  return eat(subvalue)({\n    type: 'heading',\n    depth: depth,\n    children: self.tokenizeInline(content, now)\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}