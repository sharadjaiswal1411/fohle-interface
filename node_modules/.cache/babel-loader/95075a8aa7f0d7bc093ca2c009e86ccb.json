{"ast":null,"code":"import _regeneratorRuntime from\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{validateTokenList}from'@uniswap/widgets';import contenthashToUri from'lib/utils/contenthashToUri';import parseENSAddress from'lib/utils/parseENSAddress';import uriToHttp from'lib/utils/uriToHttp';export var DEFAULT_TOKEN_LIST='https://gateway.ipfs.io/ipns/tokens.uniswap.org';var listCache=new Map();/** Fetches and validates a token list. */export default function fetchTokenList(_x,_x2,_x3){return _fetchTokenList.apply(this,arguments);}function _fetchTokenList(){_fetchTokenList=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(listUrl,resolveENSContentHash,skipValidation){var cached,urls,parsedENS,_parsedENS$ensPath,contentHashUri,message,translatedUri,_message,i,url,isLast,response,_message2,_message3,json,list;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:cached=listCache===null||listCache===void 0?void 0:listCache.get(listUrl);// avoid spurious re-fetches\nif(!cached){_context.next=3;break;}return _context.abrupt(\"return\",cached);case 3:parsedENS=parseENSAddress(listUrl);if(!parsedENS){_context.next=28;break;}_context.prev=5;_context.next=8;return resolveENSContentHash(parsedENS.ensName);case 8:contentHashUri=_context.sent;_context.next=16;break;case 11:_context.prev=11;_context.t0=_context[\"catch\"](5);message=\"failed to resolve ENS name: \".concat(parsedENS.ensName);console.debug(message,_context.t0);throw new Error(message);case 16:_context.prev=16;translatedUri=contenthashToUri(contentHashUri);_context.next=25;break;case 20:_context.prev=20;_context.t1=_context[\"catch\"](16);_message=\"failed to translate contenthash to URI: \".concat(contentHashUri);console.debug(_message,_context.t1);throw new Error(_message);case 25:urls=uriToHttp(\"\".concat(translatedUri).concat((_parsedENS$ensPath=parsedENS.ensPath)!==null&&_parsedENS$ensPath!==void 0?_parsedENS$ensPath:''));_context.next=29;break;case 28:urls=uriToHttp(listUrl);case 29:i=0;case 30:if(!(i<urls.length)){_context.next=69;break;}url=urls[i];isLast=i===urls.length-1;response=void 0;_context.prev=34;_context.next=37;return fetch(url,{credentials:'omit'});case 37:response=_context.sent;_context.next=47;break;case 40:_context.prev=40;_context.t2=_context[\"catch\"](34);_message2=\"failed to fetch list: \".concat(listUrl);console.debug(_message2,_context.t2);if(!isLast){_context.next=46;break;}throw new Error(_message2);case 46:return _context.abrupt(\"continue\",66);case 47:if(response.ok){_context.next=53;break;}_message3=\"failed to fetch list: \".concat(listUrl);console.debug(_message3,response.statusText);if(!isLast){_context.next=52;break;}throw new Error(_message3);case 52:return _context.abrupt(\"continue\",66);case 53:_context.next=55;return response.json();case 55:json=_context.sent;if(!skipValidation){_context.next=60;break;}_context.t3=json;_context.next=63;break;case 60:_context.next=62;return validateTokenList(json);case 62:_context.t3=_context.sent;case 63:list=_context.t3;listCache===null||listCache===void 0?void 0:listCache.set(listUrl,list);return _context.abrupt(\"return\",list);case 66:i++;_context.next=30;break;case 69:throw new Error('Unrecognized list URL protocol.');case 70:case\"end\":return _context.stop();}}},_callee,null,[[5,11],[16,20],[34,40]]);}));return _fetchTokenList.apply(this,arguments);}","map":{"version":3,"names":["validateTokenList","contenthashToUri","parseENSAddress","uriToHttp","DEFAULT_TOKEN_LIST","listCache","Map","fetchTokenList","listUrl","resolveENSContentHash","skipValidation","cached","get","parsedENS","ensName","contentHashUri","message","console","debug","Error","translatedUri","urls","ensPath","i","length","url","isLast","response","fetch","credentials","ok","statusText","json","list","set"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/lib/hooks/useTokenList/fetchTokenList.ts"],"sourcesContent":["import type { TokenList } from '@uniswap/token-lists'\nimport { validateTokenList } from '@uniswap/widgets'\nimport contenthashToUri from 'lib/utils/contenthashToUri'\nimport parseENSAddress from 'lib/utils/parseENSAddress'\nimport uriToHttp from 'lib/utils/uriToHttp'\n\nexport const DEFAULT_TOKEN_LIST = 'https://gateway.ipfs.io/ipns/tokens.uniswap.org'\n\nconst listCache = new Map<string, TokenList>()\n\n/** Fetches and validates a token list. */\nexport default async function fetchTokenList(\n  listUrl: string,\n  resolveENSContentHash: (ensName: string) => Promise<string>,\n  skipValidation?: boolean\n): Promise<TokenList> {\n  const cached = listCache?.get(listUrl) // avoid spurious re-fetches\n  if (cached) {\n    return cached\n  }\n\n  let urls: string[]\n  const parsedENS = parseENSAddress(listUrl)\n  if (parsedENS) {\n    let contentHashUri\n    try {\n      contentHashUri = await resolveENSContentHash(parsedENS.ensName)\n    } catch (error) {\n      const message = `failed to resolve ENS name: ${parsedENS.ensName}`\n      console.debug(message, error)\n      throw new Error(message)\n    }\n    let translatedUri\n    try {\n      translatedUri = contenthashToUri(contentHashUri)\n    } catch (error) {\n      const message = `failed to translate contenthash to URI: ${contentHashUri}`\n      console.debug(message, error)\n      throw new Error(message)\n    }\n    urls = uriToHttp(`${translatedUri}${parsedENS.ensPath ?? ''}`)\n  } else {\n    urls = uriToHttp(listUrl)\n  }\n\n  for (let i = 0; i < urls.length; i++) {\n    const url = urls[i]\n    const isLast = i === urls.length - 1\n    let response\n    try {\n      response = await fetch(url, { credentials: 'omit' })\n    } catch (error) {\n      const message = `failed to fetch list: ${listUrl}`\n      console.debug(message, error)\n      if (isLast) throw new Error(message)\n      continue\n    }\n\n    if (!response.ok) {\n      const message = `failed to fetch list: ${listUrl}`\n      console.debug(message, response.statusText)\n      if (isLast) throw new Error(message)\n      continue\n    }\n\n    const json = await response.json()\n    const list = skipValidation ? json : await validateTokenList(json)\n    listCache?.set(listUrl, list)\n    return list\n  }\n\n  throw new Error('Unrecognized list URL protocol.')\n}\n"],"mappings":"qVACA,OAASA,iBAAiB,KAAQ,kBAAkB,CACpD,MAAOC,iBAAgB,KAAM,4BAA4B,CACzD,MAAOC,gBAAe,KAAM,2BAA2B,CACvD,MAAOC,UAAS,KAAM,qBAAqB,CAE3C,MAAO,IAAMC,mBAAkB,CAAG,iDAAiD,CAEnF,GAAMC,UAAS,CAAG,GAAIC,IAAG,EAAqB,CAE9C,0CACA,uBAA8BC,eAAc,2DA6D3C,mGA7Dc,iBACbC,OAAe,CACfC,qBAA2D,CAC3DC,cAAwB,iQAElBC,MAAM,CAAGN,SAAS,SAATA,SAAS,iBAATA,SAAS,CAAEO,GAAG,CAACJ,OAAO,CAAC,CAAC;AAAA,IACnCG,MAAM,yDACDA,MAAM,SAITE,SAAS,CAAGX,eAAe,CAACM,OAAO,CAAC,KACtCK,SAAS,gEAGcJ,sBAAqB,CAACI,SAAS,CAACC,OAAO,CAAC,QAA/DC,cAAc,gGAERC,OAAO,uCAAkCH,SAAS,CAACC,OAAO,EAChEG,OAAO,CAACC,KAAK,CAACF,OAAO,aAAQ,MACvB,IAAIG,MAAK,CAACH,OAAO,CAAC,0BAIxBI,aAAa,CAAGnB,gBAAgB,CAACc,cAAc,CAAC,mFAE1CC,QAAO,mDAA8CD,cAAc,EACzEE,OAAO,CAACC,KAAK,CAACF,QAAO,aAAQ,MACvB,IAAIG,MAAK,CAACH,QAAO,CAAC,SAE1BK,IAAI,CAAGlB,SAAS,WAAIiB,aAAa,6BAAGP,SAAS,CAACS,OAAO,yDAAI,EAAE,EAAG,gCAE9DD,IAAI,CAAGlB,SAAS,CAACK,OAAO,CAAC,SAGlBe,CAAC,CAAG,CAAC,cAAEA,CAAC,CAAGF,IAAI,CAACG,MAAM,2BACvBC,GAAG,CAAGJ,IAAI,CAACE,CAAC,CAAC,CACbG,MAAM,CAAGH,CAAC,GAAKF,IAAI,CAACG,MAAM,CAAG,CAAC,CAChCG,QAAQ,gDAEOC,MAAK,CAACH,GAAG,CAAE,CAAEI,WAAW,CAAE,MAAO,CAAC,CAAC,SAApDF,QAAQ,iGAEFX,SAAO,iCAA4BR,OAAO,EAChDS,OAAO,CAACC,KAAK,CAACF,SAAO,aAAQ,KACzBU,MAAM,+BAAQ,IAAIP,MAAK,CAACH,SAAO,CAAC,0DAIjCW,QAAQ,CAACG,EAAE,0BACRd,SAAO,iCAA4BR,OAAO,EAChDS,OAAO,CAACC,KAAK,CAACF,SAAO,CAAEW,QAAQ,CAACI,UAAU,CAAC,KACvCL,MAAM,+BAAQ,IAAIP,MAAK,CAACH,SAAO,CAAC,8EAInBW,SAAQ,CAACK,IAAI,EAAE,SAA5BA,IAAI,mBACGtB,cAAc,sCAAGsB,IAAI,uDAAShC,kBAAiB,CAACgC,IAAI,CAAC,2CAA5DC,IAAI,aACV5B,SAAS,SAATA,SAAS,iBAATA,SAAS,CAAE6B,GAAG,CAAC1B,OAAO,CAAEyB,IAAI,CAAC,iCACtBA,IAAI,UAvBoBV,CAAC,EAAE,qCA0B9B,IAAIJ,MAAK,CAAC,iCAAiC,CAAC,sFACnD"},"metadata":{},"sourceType":"module"}