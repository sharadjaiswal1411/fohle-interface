{"ast":null,"code":"import { __awaiter, __extends, __generator } from \"tslib\";\nimport { BaseTransport } from '@amplitude/analytics-core';\nvar XHRTransport = /** @class */function (_super) {\n  __extends(XHRTransport, _super);\n  function XHRTransport() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.state = {\n      done: 4\n    };\n    return _this;\n  }\n  XHRTransport.prototype.send = function (serverUrl, payload) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n      return __generator(this, function (_a) {\n        return [2 /*return*/, new Promise(function (resolve, reject) {\n          /* istanbul ignore if */\n          if (typeof XMLHttpRequest === 'undefined') {\n            reject(new Error('XHRTransport is not supported.'));\n          }\n          var xhr = new XMLHttpRequest();\n          xhr.open('POST', serverUrl, true);\n          xhr.onreadystatechange = function () {\n            if (xhr.readyState === _this.state.done) {\n              try {\n                var responsePayload = xhr.responseText;\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                var parsedResponsePayload = JSON.parse(responsePayload);\n                var result = _this.buildResponse(parsedResponsePayload);\n                resolve(result);\n              } catch (e) {\n                reject(e);\n              }\n            }\n          };\n          xhr.setRequestHeader('Content-Type', 'application/json');\n          xhr.setRequestHeader('Accept', '*/*');\n          xhr.send(JSON.stringify(payload));\n        })];\n      });\n    });\n  };\n  return XHRTransport;\n}(BaseTransport);\nexport { XHRTransport };","map":{"version":3,"sources":["../../../src/transports/xhr.ts"],"names":[],"mappings":";AAAA,SAAS,aAAa,QAAQ,2BAA2B;AAGzD,IAAA,YAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAkC,SAAA,CAAA,YAAA,EAAA,MAAA,CAAA;EAAlC,SAAA,YAAA,GAAA;IAAA,IAAA,KAAA,GAAA,MAAA,KAAA,IAAA,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA;IACU,KAAA,CAAA,KAAK,GAAG;MACd,IAAI,EAAE;KACP;;EA6BH;EA3BQ,YAAA,CAAA,SAAA,CAAA,IAAI,GAAV,UAAW,SAAiB,EAAE,OAAgB,EAAA;;;;QAC5C,OAAA,CAAA,CAAA,CAAA,YAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM,EAAA;UACjC;UACA,IAAI,OAAO,cAAc,KAAK,WAAW,EAAE;YACzC,MAAM,CAAC,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;UACpD;UAED,IAAM,GAAG,GAAG,IAAI,cAAc,EAAE;UAChC,GAAG,CAAC,IAAI,CAAC,MAAM,EAAE,SAAS,EAAE,IAAI,CAAC;UACjC,GAAG,CAAC,kBAAkB,GAAG,YAAA;YACvB,IAAI,GAAG,CAAC,UAAU,KAAK,KAAI,CAAC,KAAK,CAAC,IAAI,EAAE;cACtC,IAAI;gBACF,IAAM,eAAe,GAAG,GAAG,CAAC,YAAY;gBACxC;gBACA,IAAM,qBAAqB,GAAwB,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC;gBAC9E,IAAM,MAAM,GAAG,KAAI,CAAC,aAAa,CAAC,qBAAqB,CAAC;gBACxD,OAAO,CAAC,MAAM,CAAC;eAChB,CAAC,OAAO,CAAC,EAAE;gBACV,MAAM,CAAC,CAAC,CAAC;cACV;YACF;UACH,CAAC;UACD,GAAG,CAAC,gBAAgB,CAAC,cAAc,EAAE,kBAAkB,CAAC;UACxD,GAAG,CAAC,gBAAgB,CAAC,QAAQ,EAAE,KAAK,CAAC;UACrC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;QACnC,CAAC,CAAC,CAAA;;;GACH;EACH,OAAA,YAAC;AAAD,CAAC,CAhCiC,aAAa,CAAA","sourcesContent":["import { BaseTransport } from '@amplitude/analytics-core';\nimport { Payload, Response, Transport } from '@amplitude/analytics-types';\n\nexport class XHRTransport extends BaseTransport implements Transport {\n  private state = {\n    done: 4,\n  };\n\n  async send(serverUrl: string, payload: Payload): Promise<Response | null> {\n    return new Promise((resolve, reject) => {\n      /* istanbul ignore if */\n      if (typeof XMLHttpRequest === 'undefined') {\n        reject(new Error('XHRTransport is not supported.'));\n      }\n\n      const xhr = new XMLHttpRequest();\n      xhr.open('POST', serverUrl, true);\n      xhr.onreadystatechange = () => {\n        if (xhr.readyState === this.state.done) {\n          try {\n            const responsePayload = xhr.responseText;\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            const parsedResponsePayload: Record<string, any> = JSON.parse(responsePayload);\n            const result = this.buildResponse(parsedResponsePayload);\n            resolve(result);\n          } catch (e) {\n            reject(e);\n          }\n        }\n      };\n      xhr.setRequestHeader('Content-Type', 'application/json');\n      xhr.setRequestHeader('Accept', '*/*');\n      xhr.send(JSON.stringify(payload));\n    });\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}