{"ast":null,"code":"import _regeneratorRuntime from\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _defineProperty from\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _asyncToGenerator from\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import gql from'graphql-tag';import{useState,useEffect,useMemo}from'react';import{splitQuery}from'utils/queries';import{useActiveNetworkVersion,useClients}from'state/application/hooks';export var GET_BLOCKS=function GET_BLOCKS(timestamps){var queryString='query blocks {';queryString+=timestamps.map(function(timestamp){return\"t\".concat(timestamp,\":blocks(first: 1, orderBy: timestamp, orderDirection: desc, where: { timestamp_gt: \").concat(timestamp,\", timestamp_lt: \").concat(timestamp+600,\" }) {\\n        number\\n      }\");});queryString+='}';return gql(queryString);};/**\n * for a given array of timestamps, returns block entities\n * @param timestamps\n */export function useBlocksFromTimestamps(timestamps,blockClientOverride){var _useActiveNetworkVers=useActiveNetworkVersion(),_useActiveNetworkVers2=_slicedToArray(_useActiveNetworkVers,1),activeNetwork=_useActiveNetworkVers2[0];var _useState=useState(),_useState2=_slicedToArray(_useState,2),blocks=_useState2[0],setBlocks=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),error=_useState4[0],setError=_useState4[1];var _useClients=useClients(),blockClient=_useClients.blockClient;var activeBlockClient=blockClientOverride!==null&&blockClientOverride!==void 0?blockClientOverride:blockClient;// derive blocks based on active network\nvar networkBlocks=blocks===null||blocks===void 0?void 0:blocks[activeNetwork.id];useEffect(function(){function fetchData(){return _fetchData.apply(this,arguments);}function _fetchData(){_fetchData=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var results;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return splitQuery(GET_BLOCKS,activeBlockClient,[],timestamps);case 2:results=_context.sent;if(results){setBlocks(_objectSpread(_objectSpread({},blocks!==null&&blocks!==void 0?blocks:{}),{},_defineProperty({},activeNetwork.id,results)));}else{setError(true);}case 4:case\"end\":return _context.stop();}}},_callee);}));return _fetchData.apply(this,arguments);}if(!networkBlocks&&!error){fetchData();}});var blocksFormatted=useMemo(function(){if(blocks===null||blocks===void 0?void 0:blocks[activeNetwork.id]){var _networkBlocks=blocks===null||blocks===void 0?void 0:blocks[activeNetwork.id];var formatted=[];for(var t in _networkBlocks){if(_networkBlocks[t].length>0){formatted.push({timestamp:t.split('t')[1],number:_networkBlocks[t][0]['number']});}}return formatted;}return undefined;},[activeNetwork.id,blocks]);return{blocks:blocksFormatted,error:error};}/**\n * @notice Fetches block objects for an array of timestamps.\n * @dev blocks are returned in chronological order (ASC) regardless of input.\n * @dev blocks are returned at string representations of Int\n * @dev timestamps are returns as they were provided; not the block time.\n * @param {Array} timestamps\n */export function getBlocksFromTimestamps(_x,_x2){return _getBlocksFromTimestamps.apply(this,arguments);}function _getBlocksFromTimestamps(){_getBlocksFromTimestamps=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(timestamps,blockClient){var skipCount,fetchedData,blocks,t,_args2=arguments;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:skipCount=_args2.length>2&&_args2[2]!==undefined?_args2[2]:500;if(!((timestamps===null||timestamps===void 0?void 0:timestamps.length)===0)){_context2.next=3;break;}return _context2.abrupt(\"return\",[]);case 3:_context2.next=5;return splitQuery(GET_BLOCKS,blockClient,[],timestamps,skipCount);case 5:fetchedData=_context2.sent;blocks=[];if(fetchedData){for(t in fetchedData){if(fetchedData[t].length>0){blocks.push({timestamp:t.split('t')[1],number:fetchedData[t][0]['number']});}}}return _context2.abrupt(\"return\",blocks);case 9:case\"end\":return _context2.stop();}}},_callee2);}));return _getBlocksFromTimestamps.apply(this,arguments);}","map":{"version":3,"names":["gql","useState","useEffect","useMemo","splitQuery","useActiveNetworkVersion","useClients","GET_BLOCKS","timestamps","queryString","map","timestamp","useBlocksFromTimestamps","blockClientOverride","activeNetwork","blocks","setBlocks","error","setError","blockClient","activeBlockClient","networkBlocks","id","fetchData","results","blocksFormatted","formatted","t","length","push","split","number","undefined","getBlocksFromTimestamps","skipCount","fetchedData"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/hooks/useBlocksFromTimestamps.ts"],"sourcesContent":["import gql from 'graphql-tag'\nimport { useState, useEffect, useMemo } from 'react'\nimport { splitQuery } from 'utils/queries'\nimport { useActiveNetworkVersion, useClients } from 'state/application/hooks'\nimport { ApolloClient, NormalizedCacheObject } from '@apollo/client'\n\nexport const GET_BLOCKS = (timestamps: string[]) => {\n  let queryString = 'query blocks {'\n  queryString += timestamps.map((timestamp) => {\n    return `t${timestamp}:blocks(first: 1, orderBy: timestamp, orderDirection: desc, where: { timestamp_gt: ${timestamp}, timestamp_lt: ${\n      timestamp + 600\n    } }) {\n        number\n      }`\n  })\n  queryString += '}'\n  return gql(queryString)\n}\n\n/**\n * for a given array of timestamps, returns block entities\n * @param timestamps\n */\nexport function useBlocksFromTimestamps(\n  timestamps: number[],\n  blockClientOverride?: ApolloClient<NormalizedCacheObject>\n): {\n  blocks:\n    | {\n        timestamp: string\n        number: any\n      }[]\n    | undefined\n  error: boolean\n} {\n  const [activeNetwork] = useActiveNetworkVersion()\n  const [blocks, setBlocks] = useState<any>()\n  const [error, setError] = useState(false)\n\n  const { blockClient } = useClients()\n  const activeBlockClient = blockClientOverride ?? blockClient\n\n  // derive blocks based on active network\n  const networkBlocks = blocks?.[activeNetwork.id]\n\n  useEffect(() => {\n    async function fetchData() {\n      const results = await splitQuery(GET_BLOCKS, activeBlockClient, [], timestamps)\n      if (results) {\n        setBlocks({ ...(blocks ?? {}), [activeNetwork.id]: results })\n      } else {\n        setError(true)\n      }\n    }\n    if (!networkBlocks && !error) {\n      fetchData()\n    }\n  })\n\n  const blocksFormatted = useMemo(() => {\n    if (blocks?.[activeNetwork.id]) {\n      const networkBlocks = blocks?.[activeNetwork.id]\n      const formatted = []\n      for (const t in networkBlocks) {\n        if (networkBlocks[t].length > 0) {\n          formatted.push({\n            timestamp: t.split('t')[1],\n            number: networkBlocks[t][0]['number'],\n          })\n        }\n      }\n      return formatted\n    }\n    return undefined\n  }, [activeNetwork.id, blocks])\n\n  return {\n    blocks: blocksFormatted,\n    error,\n  }\n}\n\n/**\n * @notice Fetches block objects for an array of timestamps.\n * @dev blocks are returned in chronological order (ASC) regardless of input.\n * @dev blocks are returned at string representations of Int\n * @dev timestamps are returns as they were provided; not the block time.\n * @param {Array} timestamps\n */\nexport async function getBlocksFromTimestamps(\n  timestamps: number[],\n  blockClient: ApolloClient<NormalizedCacheObject>,\n  skipCount = 500\n) {\n  if (timestamps?.length === 0) {\n    return []\n  }\n  const fetchedData: any = await splitQuery(GET_BLOCKS, blockClient, [], timestamps, skipCount)\n\n  const blocks: any[] = []\n  if (fetchedData) {\n    for (const t in fetchedData) {\n      if (fetchedData[t].length > 0) {\n        blocks.push({\n          timestamp: t.split('t')[1],\n          number: fetchedData[t][0]['number'],\n        })\n      }\n    }\n  }\n  return blocks\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}