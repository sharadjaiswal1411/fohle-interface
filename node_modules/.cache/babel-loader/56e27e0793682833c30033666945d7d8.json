{"ast":null,"code":"import _classCallCheck from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { BaseClient, SDK_VERSION, getCurrentHub, getEnvelopeEndpointWithUrlEncodedAuth } from '@sentry/core';\nimport { getEventDescription, logger, createClientReportEnvelope, dsnToString, serializeEnvelope } from '@sentry/utils';\nimport { eventFromException as _eventFromException, eventFromMessage as _eventFromMessage } from './eventbuilder.js';\nimport { WINDOW } from './helpers.js';\nimport { BREADCRUMB_INTEGRATION_ID } from './integrations/breadcrumbs.js';\n\n/**\n * The Sentry Browser SDK Client.\n *\n * @see BrowserOptions for documentation on configuration options.\n * @see SentryClient for usage documentation.\n */\nvar BrowserClient = /*#__PURE__*/function (_BaseClient) {\n  _inherits(BrowserClient, _BaseClient);\n  var _super = _createSuper(BrowserClient);\n  /**\n   * Creates a new Browser SDK instance.\n   *\n   * @param options Configuration options for this SDK.\n   */\n  function BrowserClient(options) {\n    var _this;\n    _classCallCheck(this, BrowserClient);\n    options._metadata = options._metadata || {};\n    options._metadata.sdk = options._metadata.sdk || {\n      name: 'sentry.javascript.browser',\n      packages: [{\n        name: 'npm:@sentry/browser',\n        version: SDK_VERSION\n      }],\n      version: SDK_VERSION\n    };\n    _this = _super.call(this, options);\n    if (options.sendClientReports && WINDOW.document) {\n      WINDOW.document.addEventListener('visibilitychange', function () {\n        if (WINDOW.document.visibilityState === 'hidden') {\n          _this._flushOutcomes();\n        }\n      });\n    }\n    return _this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  _createClass(BrowserClient, [{\n    key: \"eventFromException\",\n    value: function eventFromException(exception, hint) {\n      return _eventFromException(this._options.stackParser, exception, hint, this._options.attachStacktrace);\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"eventFromMessage\",\n    value: function eventFromMessage(message) {\n      var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'info';\n      var hint = arguments.length > 2 ? arguments[2] : undefined;\n      return _eventFromMessage(this._options.stackParser, message, level, hint, this._options.attachStacktrace);\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"sendEvent\",\n    value: function sendEvent(event, hint) {\n      // We only want to add the sentry event breadcrumb when the user has the breadcrumb integration installed and\n      // activated its `sentry` option.\n      // We also do not want to use the `Breadcrumbs` class here directly, because we do not want it to be included in\n      // bundles, if it is not used by the SDK.\n      // This all sadly is a bit ugly, but we currently don't have a \"pre-send\" hook on the integrations so we do it this\n      // way for now.\n      var breadcrumbIntegration = this.getIntegrationById(BREADCRUMB_INTEGRATION_ID);\n      if (breadcrumbIntegration &&\n      // We check for definedness of `options`, even though it is not strictly necessary, because that access to\n      // `.sentry` below does not throw, in case users provided their own integration with id \"Breadcrumbs\" that does\n      // not have an`options` field\n      breadcrumbIntegration.options && breadcrumbIntegration.options.sentry) {\n        getCurrentHub().addBreadcrumb({\n          category: \"sentry.\".concat(event.type === 'transaction' ? 'transaction' : 'event'),\n          event_id: event.event_id,\n          level: event.level,\n          message: getEventDescription(event)\n        }, {\n          event: event\n        });\n      }\n      _get(_getPrototypeOf(BrowserClient.prototype), \"sendEvent\", this).call(this, event, hint);\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"_prepareEvent\",\n    value: function _prepareEvent(event, hint, scope) {\n      event.platform = event.platform || 'javascript';\n      return _get(_getPrototypeOf(BrowserClient.prototype), \"_prepareEvent\", this).call(this, event, hint, scope);\n    }\n\n    /**\n     * Sends client reports as an envelope.\n     */\n  }, {\n    key: \"_flushOutcomes\",\n    value: function _flushOutcomes() {\n      var outcomes = this._clearOutcomes();\n      if (outcomes.length === 0) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('No outcomes to send');\n        return;\n      }\n      if (!this._dsn) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('No dsn provided, will not send outcomes');\n        return;\n      }\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('Sending outcomes:', outcomes);\n      var url = getEnvelopeEndpointWithUrlEncodedAuth(this._dsn, this._options);\n      var envelope = createClientReportEnvelope(outcomes, this._options.tunnel && dsnToString(this._dsn));\n      try {\n        var isRealNavigator = Object.prototype.toString.call(WINDOW && WINDOW.navigator) === '[object Navigator]';\n        var hasSendBeacon = isRealNavigator && typeof WINDOW.navigator.sendBeacon === 'function';\n        // Make sure beacon is not used if user configures custom transport options\n        if (hasSendBeacon && !this._options.transportOptions) {\n          // Prevent illegal invocations - https://xgwang.me/posts/you-may-not-know-beacon/#it-may-throw-error%2C-be-sure-to-catch\n          var sendBeacon = WINDOW.navigator.sendBeacon.bind(WINDOW.navigator);\n          sendBeacon(url, serializeEnvelope(envelope));\n        } else {\n          // If beacon is not supported or if they are using the tunnel option\n          // use our regular transport to send client reports to Sentry.\n          this._sendEnvelope(envelope);\n        }\n      } catch (e) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.error(e);\n      }\n    }\n  }]);\n  return BrowserClient;\n}(BaseClient);\nexport { BrowserClient };","map":{"version":3,"sources":["../../../src/client.ts"],"names":[],"mappings":"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","sourcesContent":["import { BaseClient, getCurrentHub, getEnvelopeEndpointWithUrlEncodedAuth, Scope, SDK_VERSION } from '@sentry/core';\nimport { ClientOptions, Event, EventHint, Options, Severity, SeverityLevel } from '@sentry/types';\nimport { createClientReportEnvelope, dsnToString, getEventDescription, logger, serializeEnvelope } from '@sentry/utils';\n\nimport { eventFromException, eventFromMessage } from './eventbuilder';\nimport { WINDOW } from './helpers';\nimport { Breadcrumbs } from './integrations';\nimport { BREADCRUMB_INTEGRATION_ID } from './integrations/breadcrumbs';\nimport { BrowserTransportOptions } from './transports/types';\n\nexport interface BaseBrowserOptions {\n  /**\n   * A pattern for error URLs which should exclusively be sent to Sentry.\n   * This is the opposite of {@link Options.denyUrls}.\n   * By default, all errors will be sent.\n   */\n  allowUrls?: Array<string | RegExp>;\n\n  /**\n   * A pattern for error URLs which should not be sent to Sentry.\n   * To allow certain errors instead, use {@link Options.allowUrls}.\n   * By default, all errors will be sent.\n   */\n  denyUrls?: Array<string | RegExp>;\n}\n\n/**\n * Configuration options for the Sentry Browser SDK.\n * @see @sentry/types Options for more information.\n */\nexport interface BrowserOptions extends Options<BrowserTransportOptions>, BaseBrowserOptions {}\n\n/**\n * Configuration options for the Sentry Browser SDK Client class\n * @see BrowserClient for more information.\n */\nexport interface BrowserClientOptions extends ClientOptions<BrowserTransportOptions>, BaseBrowserOptions {}\n\n/**\n * The Sentry Browser SDK Client.\n *\n * @see BrowserOptions for documentation on configuration options.\n * @see SentryClient for usage documentation.\n */\nexport class BrowserClient extends BaseClient<BrowserClientOptions> {\n  /**\n   * Creates a new Browser SDK instance.\n   *\n   * @param options Configuration options for this SDK.\n   */\n  public constructor(options: BrowserClientOptions) {\n    options._metadata = options._metadata || {};\n    options._metadata.sdk = options._metadata.sdk || {\n      name: 'sentry.javascript.browser',\n      packages: [\n        {\n          name: 'npm:@sentry/browser',\n          version: SDK_VERSION,\n        },\n      ],\n      version: SDK_VERSION,\n    };\n\n    super(options);\n\n    if (options.sendClientReports && WINDOW.document) {\n      WINDOW.document.addEventListener('visibilitychange', () => {\n        if (WINDOW.document.visibilityState === 'hidden') {\n          this._flushOutcomes();\n        }\n      });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public eventFromException(exception: unknown, hint?: EventHint): PromiseLike<Event> {\n    return eventFromException(this._options.stackParser, exception, hint, this._options.attachStacktrace);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public eventFromMessage(\n    message: string,\n    // eslint-disable-next-line deprecation/deprecation\n    level: Severity | SeverityLevel = 'info',\n    hint?: EventHint,\n  ): PromiseLike<Event> {\n    return eventFromMessage(this._options.stackParser, message, level, hint, this._options.attachStacktrace);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public sendEvent(event: Event, hint?: EventHint): void {\n    // We only want to add the sentry event breadcrumb when the user has the breadcrumb integration installed and\n    // activated its `sentry` option.\n    // We also do not want to use the `Breadcrumbs` class here directly, because we do not want it to be included in\n    // bundles, if it is not used by the SDK.\n    // This all sadly is a bit ugly, but we currently don't have a \"pre-send\" hook on the integrations so we do it this\n    // way for now.\n    const breadcrumbIntegration = this.getIntegrationById(BREADCRUMB_INTEGRATION_ID) as Breadcrumbs | null;\n    if (\n      breadcrumbIntegration &&\n      // We check for definedness of `options`, even though it is not strictly necessary, because that access to\n      // `.sentry` below does not throw, in case users provided their own integration with id \"Breadcrumbs\" that does\n      // not have an`options` field\n      breadcrumbIntegration.options &&\n      breadcrumbIntegration.options.sentry\n    ) {\n      getCurrentHub().addBreadcrumb(\n        {\n          category: `sentry.${event.type === 'transaction' ? 'transaction' : 'event'}`,\n          event_id: event.event_id,\n          level: event.level,\n          message: getEventDescription(event),\n        },\n        {\n          event,\n        },\n      );\n    }\n\n    super.sendEvent(event, hint);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected _prepareEvent(event: Event, hint: EventHint, scope?: Scope): PromiseLike<Event | null> {\n    event.platform = event.platform || 'javascript';\n    return super._prepareEvent(event, hint, scope);\n  }\n\n  /**\n   * Sends client reports as an envelope.\n   */\n  private _flushOutcomes(): void {\n    const outcomes = this._clearOutcomes();\n\n    if (outcomes.length === 0) {\n      __DEBUG_BUILD__ && logger.log('No outcomes to send');\n      return;\n    }\n\n    if (!this._dsn) {\n      __DEBUG_BUILD__ && logger.log('No dsn provided, will not send outcomes');\n      return;\n    }\n\n    __DEBUG_BUILD__ && logger.log('Sending outcomes:', outcomes);\n\n    const url = getEnvelopeEndpointWithUrlEncodedAuth(this._dsn, this._options);\n    const envelope = createClientReportEnvelope(outcomes, this._options.tunnel && dsnToString(this._dsn));\n\n    try {\n      const isRealNavigator = Object.prototype.toString.call(WINDOW && WINDOW.navigator) === '[object Navigator]';\n      const hasSendBeacon = isRealNavigator && typeof WINDOW.navigator.sendBeacon === 'function';\n      // Make sure beacon is not used if user configures custom transport options\n      if (hasSendBeacon && !this._options.transportOptions) {\n        // Prevent illegal invocations - https://xgwang.me/posts/you-may-not-know-beacon/#it-may-throw-error%2C-be-sure-to-catch\n        const sendBeacon = WINDOW.navigator.sendBeacon.bind(WINDOW.navigator);\n        sendBeacon(url, serializeEnvelope(envelope));\n      } else {\n        // If beacon is not supported or if they are using the tunnel option\n        // use our regular transport to send client reports to Sentry.\n        this._sendEnvelope(envelope);\n      }\n    } catch (e) {\n      __DEBUG_BUILD__ && logger.error(e);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}