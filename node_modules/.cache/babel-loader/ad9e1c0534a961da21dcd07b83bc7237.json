{"ast":null,"code":"'use strict';\n\nvar _createForOfIteratorHelper = require(\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\nvar _classCallCheck = require(\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nvar _require = require('./util'),\n  encodeText = _require.encodeText;\n\n/** @typedef {import('./types').CodecFactory} CodecFactory */\n/** @typedef {import(\"./types\").BaseName} BaseName */\n/** @typedef {import(\"./types\").BaseCode} BaseCode */\n\n/**\n * Class to encode/decode in the supported Bases\n *\n */\nvar Base = /*#__PURE__*/function () {\n  /**\n   * @param {BaseName} name\n   * @param {BaseCode} code\n   * @param {CodecFactory} factory\n   * @param {string} alphabet\n   */\n  function Base(name, code, factory, alphabet) {\n    _classCallCheck(this, Base);\n    this.name = name;\n    this.code = code;\n    this.codeBuf = encodeText(this.code);\n    this.alphabet = alphabet;\n    this.codec = factory(alphabet);\n  }\n\n  /**\n   * @param {Uint8Array} buf\n   * @returns {string}\n   */\n  _createClass(Base, [{\n    key: \"encode\",\n    value: function encode(buf) {\n      return this.codec.encode(buf);\n    }\n\n    /**\n     * @param {string} string\n     * @returns {Uint8Array}\n     */\n  }, {\n    key: \"decode\",\n    value: function decode(string) {\n      var _iterator = _createForOfIteratorHelper(string),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var char = _step.value;\n          if (this.alphabet && this.alphabet.indexOf(char) < 0) {\n            throw new Error(\"invalid character '\".concat(char, \"' in '\").concat(string, \"'\"));\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return this.codec.decode(string);\n    }\n  }]);\n  return Base;\n}();\nmodule.exports = Base;","map":{"version":3,"names":["require","encodeText","Base","name","code","factory","alphabet","codeBuf","codec","buf","encode","string","char","indexOf","Error","decode","module","exports"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/multibase/src/base.js"],"sourcesContent":["'use strict'\n\nconst { encodeText } = require('./util')\n\n/** @typedef {import('./types').CodecFactory} CodecFactory */\n/** @typedef {import(\"./types\").BaseName} BaseName */\n/** @typedef {import(\"./types\").BaseCode} BaseCode */\n\n/**\n * Class to encode/decode in the supported Bases\n *\n */\nclass Base {\n  /**\n   * @param {BaseName} name\n   * @param {BaseCode} code\n   * @param {CodecFactory} factory\n   * @param {string} alphabet\n   */\n  constructor (name, code, factory, alphabet) {\n    this.name = name\n    this.code = code\n    this.codeBuf = encodeText(this.code)\n    this.alphabet = alphabet\n    this.codec = factory(alphabet)\n  }\n\n  /**\n   * @param {Uint8Array} buf\n   * @returns {string}\n   */\n  encode (buf) {\n    return this.codec.encode(buf)\n  }\n\n  /**\n   * @param {string} string\n   * @returns {Uint8Array}\n   */\n  decode (string) {\n    for (const char of string) {\n      if (this.alphabet && this.alphabet.indexOf(char) < 0) {\n        throw new Error(`invalid character '${char}' in '${string}'`)\n      }\n    }\n    return this.codec.decode(string)\n  }\n}\n\nmodule.exports = Base\n"],"mappings":"AAAA,YAAY;;AAAA;AAAA;AAAA;AAEZ,eAAuBA,OAAO,CAAC,QAAQ,CAAC;EAAhCC,UAAU,YAAVA,UAAU;;AAElB;AACA;AACA;;AAEA;AACA;AACA;AACA;AAHA,IAIMC,IAAI;EACR;AACF;AACA;AACA;AACA;AACA;EACE,cAAaC,IAAI,EAAEC,IAAI,EAAEC,OAAO,EAAEC,QAAQ,EAAE;IAAA;IAC1C,IAAI,CAACH,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACG,OAAO,GAAGN,UAAU,CAAC,IAAI,CAACG,IAAI,CAAC;IACpC,IAAI,CAACE,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACE,KAAK,GAAGH,OAAO,CAACC,QAAQ,CAAC;EAChC;;EAEA;AACF;AACA;AACA;EAHE;IAAA;IAAA,OAIA,gBAAQG,GAAG,EAAE;MACX,OAAO,IAAI,CAACD,KAAK,CAACE,MAAM,CAACD,GAAG,CAAC;IAC/B;;IAEA;AACF;AACA;AACA;EAHE;IAAA;IAAA,OAIA,gBAAQE,MAAM,EAAE;MAAA,2CACKA,MAAM;QAAA;MAAA;QAAzB,oDAA2B;UAAA,IAAhBC,IAAI;UACb,IAAI,IAAI,CAACN,QAAQ,IAAI,IAAI,CAACA,QAAQ,CAACO,OAAO,CAACD,IAAI,CAAC,GAAG,CAAC,EAAE;YACpD,MAAM,IAAIE,KAAK,8BAAuBF,IAAI,mBAASD,MAAM,OAAI;UAC/D;QACF;MAAC;QAAA;MAAA;QAAA;MAAA;MACD,OAAO,IAAI,CAACH,KAAK,CAACO,MAAM,CAACJ,MAAM,CAAC;IAClC;EAAC;EAAA;AAAA;AAGHK,MAAM,CAACC,OAAO,GAAGf,IAAI"},"metadata":{},"sourceType":"script"}