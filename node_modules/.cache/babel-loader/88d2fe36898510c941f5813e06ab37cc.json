{"ast":null,"code":"import { htmlTreeAsString } from './browser.js';\nimport { isError, isEvent, isInstanceOf, isElement, isPlainObject, isPrimitive } from './is.js';\nimport { truncate } from './string.js';\n\n/**\n * Replace a method in an object with a wrapped version of itself.\n *\n * @param source An object that contains a method to be wrapped.\n * @param name The name of the method to be wrapped.\n * @param replacementFactory A higher-order function that takes the original version of the given method and returns a\n * wrapped version. Note: The function returned by `replacementFactory` needs to be a non-arrow function, in order to\n * preserve the correct value of `this`, and the original method must be called using `origMethod.call(this, <other\n * args>)` or `origMethod.apply(this, [<other args>])` (rather than being called directly), again to preserve `this`.\n * @returns void\n */\nfunction fill(source, name, replacementFactory) {\n  if (!(name in source)) {\n    return;\n  }\n  const original = source[name];\n  const wrapped = replacementFactory(original);\n\n  // Make sure it's a function first, as we need to attach an empty prototype for `defineProperties` to work\n  // otherwise it'll throw \"TypeError: Object.defineProperties called on non-object\"\n  if (typeof wrapped === 'function') {\n    try {\n      markFunctionWrapped(wrapped, original);\n    } catch (_Oo) {\n      // This can throw if multiple fill happens on a global object like XMLHttpRequest\n      // Fixes https://github.com/getsentry/sentry-javascript/issues/2043\n    }\n  }\n  source[name] = wrapped;\n}\n\n/**\n * Defines a non-enumerable property on the given object.\n *\n * @param obj The object on which to set the property\n * @param name The name of the property to be set\n * @param value The value to which to set the property\n */\nfunction addNonEnumerableProperty(obj, name, value) {\n  Object.defineProperty(obj, name, {\n    // enumerable: false, // the default, so we can save on bundle size by not explicitly setting it\n    value: value,\n    writable: true,\n    configurable: true\n  });\n}\n\n/**\n * Remembers the original function on the wrapped function and\n * patches up the prototype.\n *\n * @param wrapped the wrapper function\n * @param original the original function that gets wrapped\n */\nfunction markFunctionWrapped(wrapped, original) {\n  const proto = original.prototype || {};\n  wrapped.prototype = original.prototype = proto;\n  addNonEnumerableProperty(wrapped, '__sentry_original__', original);\n}\n\n/**\n * This extracts the original function if available.  See\n * `markFunctionWrapped` for more information.\n *\n * @param func the function to unwrap\n * @returns the unwrapped version of the function if available.\n */\nfunction getOriginalFunction(func) {\n  return func.__sentry_original__;\n}\n\n/**\n * Encodes given object into url-friendly format\n *\n * @param object An object that contains serializable values\n * @returns string Encoded\n */\nfunction urlEncode(object) {\n  return Object.keys(object).map(key => `${encodeURIComponent(key)}=${encodeURIComponent(object[key])}`).join('&');\n}\n\n/**\n * Transforms any `Error` or `Event` into a plain object with all of their enumerable properties, and some of their\n * non-enumerable properties attached.\n *\n * @param value Initial source that we have to transform in order for it to be usable by the serializer\n * @returns An Event or Error turned into an object - or the value argurment itself, when value is neither an Event nor\n *  an Error.\n */\nfunction convertToPlainObject(value) {\n  if (isError(value)) {\n    return {\n      message: value.message,\n      name: value.name,\n      stack: value.stack,\n      ...getOwnProperties(value)\n    };\n  } else if (isEvent(value)) {\n    const newObj = {\n      type: value.type,\n      target: serializeEventTarget(value.target),\n      currentTarget: serializeEventTarget(value.currentTarget),\n      ...getOwnProperties(value)\n    };\n    if (typeof CustomEvent !== 'undefined' && isInstanceOf(value, CustomEvent)) {\n      newObj.detail = value.detail;\n    }\n    return newObj;\n  } else {\n    return value;\n  }\n}\n\n/** Creates a string representation of the target of an `Event` object */\nfunction serializeEventTarget(target) {\n  try {\n    return isElement(target) ? htmlTreeAsString(target) : Object.prototype.toString.call(target);\n  } catch (_oO) {\n    return '<unknown>';\n  }\n}\n\n/** Filters out all but an object's own properties */\nfunction getOwnProperties(obj) {\n  if (typeof obj === 'object' && obj !== null) {\n    const extractedProps = {};\n    for (const property in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, property)) {\n        extractedProps[property] = obj[property];\n      }\n    }\n    return extractedProps;\n  } else {\n    return {};\n  }\n}\n\n/**\n * Given any captured exception, extract its keys and create a sorted\n * and truncated list that will be used inside the event message.\n * eg. `Non-error exception captured with keys: foo, bar, baz`\n */\nfunction extractExceptionKeysForMessage(exception) {\n  let maxLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 40;\n  const keys = Object.keys(convertToPlainObject(exception));\n  keys.sort();\n  if (!keys.length) {\n    return '[object has no keys]';\n  }\n  if (keys[0].length >= maxLength) {\n    return truncate(keys[0], maxLength);\n  }\n  for (let includedKeys = keys.length; includedKeys > 0; includedKeys--) {\n    const serialized = keys.slice(0, includedKeys).join(', ');\n    if (serialized.length > maxLength) {\n      continue;\n    }\n    if (includedKeys === keys.length) {\n      return serialized;\n    }\n    return truncate(serialized, maxLength);\n  }\n  return '';\n}\n\n/**\n * Given any object, return a new object having removed all fields whose value was `undefined`.\n * Works recursively on objects and arrays.\n *\n * Attention: This function keeps circular references in the returned object.\n */\nfunction dropUndefinedKeys(inputValue) {\n  // This map keeps track of what already visited nodes map to.\n  // Our Set - based memoBuilder doesn't work here because we want to the output object to have the same circular\n  // references as the input object.\n  const memoizationMap = new Map();\n\n  // This function just proxies `_dropUndefinedKeys` to keep the `memoBuilder` out of this function's API\n  return _dropUndefinedKeys(inputValue, memoizationMap);\n}\nfunction _dropUndefinedKeys(inputValue, memoizationMap) {\n  if (isPlainObject(inputValue)) {\n    // If this node has already been visited due to a circular reference, return the object it was mapped to in the new object\n    const memoVal = memoizationMap.get(inputValue);\n    if (memoVal !== undefined) {\n      return memoVal;\n    }\n    const returnValue = {};\n    // Store the mapping of this value in case we visit it again, in case of circular data\n    memoizationMap.set(inputValue, returnValue);\n    for (const key of Object.keys(inputValue)) {\n      if (typeof inputValue[key] !== 'undefined') {\n        returnValue[key] = _dropUndefinedKeys(inputValue[key], memoizationMap);\n      }\n    }\n    return returnValue;\n  }\n  if (Array.isArray(inputValue)) {\n    // If this node has already been visited due to a circular reference, return the array it was mapped to in the new object\n    const memoVal = memoizationMap.get(inputValue);\n    if (memoVal !== undefined) {\n      return memoVal;\n    }\n    const returnValue = [];\n    // Store the mapping of this value in case we visit it again, in case of circular data\n    memoizationMap.set(inputValue, returnValue);\n    inputValue.forEach(item => {\n      returnValue.push(_dropUndefinedKeys(item, memoizationMap));\n    });\n    return returnValue;\n  }\n  return inputValue;\n}\n\n/**\n * Ensure that something is an object.\n *\n * Turns `undefined` and `null` into `String`s and all other primitives into instances of their respective wrapper\n * classes (String, Boolean, Number, etc.). Acts as the identity function on non-primitives.\n *\n * @param wat The subject of the objectification\n * @returns A version of `wat` which can safely be used with `Object` class methods\n */\nfunction objectify(wat) {\n  let objectified;\n  switch (true) {\n    case wat === undefined || wat === null:\n      objectified = new String(wat);\n      break;\n\n    // Though symbols and bigints do have wrapper classes (`Symbol` and `BigInt`, respectively), for whatever reason\n    // those classes don't have constructors which can be used with the `new` keyword. We therefore need to cast each as\n    // an object in order to wrap it.\n    case typeof wat === 'symbol' || typeof wat === 'bigint':\n      objectified = Object(wat);\n      break;\n\n    // this will catch the remaining primitives: `String`, `Number`, and `Boolean`\n    case isPrimitive(wat):\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      objectified = new wat.constructor(wat);\n      break;\n\n    // by process of elimination, at this point we know that `wat` must already be an object\n    default:\n      objectified = wat;\n      break;\n  }\n  return objectified;\n}\nexport { addNonEnumerableProperty, convertToPlainObject, dropUndefinedKeys, extractExceptionKeysForMessage, fill, getOriginalFunction, markFunctionWrapped, objectify, urlEncode };","map":{"version":3,"sources":["../../src/object.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable max-lines */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { WrappedFunction } from '@sentry/types';\n\nimport { htmlTreeAsString } from './browser';\nimport { isElement, isError, isEvent, isInstanceOf, isPlainObject, isPrimitive } from './is';\nimport { truncate } from './string';\n\n/**\n * Replace a method in an object with a wrapped version of itself.\n *\n * @param source An object that contains a method to be wrapped.\n * @param name The name of the method to be wrapped.\n * @param replacementFactory A higher-order function that takes the original version of the given method and returns a\n * wrapped version. Note: The function returned by `replacementFactory` needs to be a non-arrow function, in order to\n * preserve the correct value of `this`, and the original method must be called using `origMethod.call(this, <other\n * args>)` or `origMethod.apply(this, [<other args>])` (rather than being called directly), again to preserve `this`.\n * @returns void\n */\nexport function fill(source: { [key: string]: any }, name: string, replacementFactory: (...args: any[]) => any): void {\n  if (!(name in source)) {\n    return;\n  }\n\n  const original = source[name] as () => any;\n  const wrapped = replacementFactory(original) as WrappedFunction;\n\n  // Make sure it's a function first, as we need to attach an empty prototype for `defineProperties` to work\n  // otherwise it'll throw \"TypeError: Object.defineProperties called on non-object\"\n  if (typeof wrapped === 'function') {\n    try {\n      markFunctionWrapped(wrapped, original);\n    } catch (_Oo) {\n      // This can throw if multiple fill happens on a global object like XMLHttpRequest\n      // Fixes https://github.com/getsentry/sentry-javascript/issues/2043\n    }\n  }\n\n  source[name] = wrapped;\n}\n\n/**\n * Defines a non-enumerable property on the given object.\n *\n * @param obj The object on which to set the property\n * @param name The name of the property to be set\n * @param value The value to which to set the property\n */\nexport function addNonEnumerableProperty(obj: { [key: string]: unknown }, name: string, value: unknown): void {\n  Object.defineProperty(obj, name, {\n    // enumerable: false, // the default, so we can save on bundle size by not explicitly setting it\n    value: value,\n    writable: true,\n    configurable: true,\n  });\n}\n\n/**\n * Remembers the original function on the wrapped function and\n * patches up the prototype.\n *\n * @param wrapped the wrapper function\n * @param original the original function that gets wrapped\n */\nexport function markFunctionWrapped(wrapped: WrappedFunction, original: WrappedFunction): void {\n  const proto = original.prototype || {};\n  wrapped.prototype = original.prototype = proto;\n  addNonEnumerableProperty(wrapped, '__sentry_original__', original);\n}\n\n/**\n * This extracts the original function if available.  See\n * `markFunctionWrapped` for more information.\n *\n * @param func the function to unwrap\n * @returns the unwrapped version of the function if available.\n */\nexport function getOriginalFunction(func: WrappedFunction): WrappedFunction | undefined {\n  return func.__sentry_original__;\n}\n\n/**\n * Encodes given object into url-friendly format\n *\n * @param object An object that contains serializable values\n * @returns string Encoded\n */\nexport function urlEncode(object: { [key: string]: any }): string {\n  return Object.keys(object)\n    .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(object[key])}`)\n    .join('&');\n}\n\n/**\n * Transforms any `Error` or `Event` into a plain object with all of their enumerable properties, and some of their\n * non-enumerable properties attached.\n *\n * @param value Initial source that we have to transform in order for it to be usable by the serializer\n * @returns An Event or Error turned into an object - or the value argurment itself, when value is neither an Event nor\n *  an Error.\n */\nexport function convertToPlainObject<V extends unknown>(\n  value: V,\n):\n  | {\n      [ownProps: string]: unknown;\n      type: string;\n      target: string;\n      currentTarget: string;\n      detail?: unknown;\n    }\n  | {\n      [ownProps: string]: unknown;\n      message: string;\n      name: string;\n      stack?: string;\n    }\n  | V {\n  if (isError(value)) {\n    return {\n      message: value.message,\n      name: value.name,\n      stack: value.stack,\n      ...getOwnProperties(value),\n    };\n  } else if (isEvent(value)) {\n    const newObj: {\n      [ownProps: string]: unknown;\n      type: string;\n      target: string;\n      currentTarget: string;\n      detail?: unknown;\n    } = {\n      type: value.type,\n      target: serializeEventTarget(value.target),\n      currentTarget: serializeEventTarget(value.currentTarget),\n      ...getOwnProperties(value),\n    };\n\n    if (typeof CustomEvent !== 'undefined' && isInstanceOf(value, CustomEvent)) {\n      newObj.detail = value.detail;\n    }\n\n    return newObj;\n  } else {\n    return value;\n  }\n}\n\n/** Creates a string representation of the target of an `Event` object */\nfunction serializeEventTarget(target: unknown): string {\n  try {\n    return isElement(target) ? htmlTreeAsString(target) : Object.prototype.toString.call(target);\n  } catch (_oO) {\n    return '<unknown>';\n  }\n}\n\n/** Filters out all but an object's own properties */\nfunction getOwnProperties(obj: unknown): { [key: string]: unknown } {\n  if (typeof obj === 'object' && obj !== null) {\n    const extractedProps: { [key: string]: unknown } = {};\n    for (const property in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, property)) {\n        extractedProps[property] = (obj as Record<string, unknown>)[property];\n      }\n    }\n    return extractedProps;\n  } else {\n    return {};\n  }\n}\n\n/**\n * Given any captured exception, extract its keys and create a sorted\n * and truncated list that will be used inside the event message.\n * eg. `Non-error exception captured with keys: foo, bar, baz`\n */\nexport function extractExceptionKeysForMessage(exception: Record<string, unknown>, maxLength: number = 40): string {\n  const keys = Object.keys(convertToPlainObject(exception));\n  keys.sort();\n\n  if (!keys.length) {\n    return '[object has no keys]';\n  }\n\n  if (keys[0].length >= maxLength) {\n    return truncate(keys[0], maxLength);\n  }\n\n  for (let includedKeys = keys.length; includedKeys > 0; includedKeys--) {\n    const serialized = keys.slice(0, includedKeys).join(', ');\n    if (serialized.length > maxLength) {\n      continue;\n    }\n    if (includedKeys === keys.length) {\n      return serialized;\n    }\n    return truncate(serialized, maxLength);\n  }\n\n  return '';\n}\n\n/**\n * Given any object, return a new object having removed all fields whose value was `undefined`.\n * Works recursively on objects and arrays.\n *\n * Attention: This function keeps circular references in the returned object.\n */\nexport function dropUndefinedKeys<T>(inputValue: T): T {\n  // This map keeps track of what already visited nodes map to.\n  // Our Set - based memoBuilder doesn't work here because we want to the output object to have the same circular\n  // references as the input object.\n  const memoizationMap = new Map<unknown, unknown>();\n\n  // This function just proxies `_dropUndefinedKeys` to keep the `memoBuilder` out of this function's API\n  return _dropUndefinedKeys(inputValue, memoizationMap);\n}\n\nfunction _dropUndefinedKeys<T>(inputValue: T, memoizationMap: Map<unknown, unknown>): T {\n  if (isPlainObject(inputValue)) {\n    // If this node has already been visited due to a circular reference, return the object it was mapped to in the new object\n    const memoVal = memoizationMap.get(inputValue);\n    if (memoVal !== undefined) {\n      return memoVal as T;\n    }\n\n    const returnValue: { [key: string]: any } = {};\n    // Store the mapping of this value in case we visit it again, in case of circular data\n    memoizationMap.set(inputValue, returnValue);\n\n    for (const key of Object.keys(inputValue)) {\n      if (typeof inputValue[key] !== 'undefined') {\n        returnValue[key] = _dropUndefinedKeys(inputValue[key], memoizationMap);\n      }\n    }\n\n    return returnValue as T;\n  }\n\n  if (Array.isArray(inputValue)) {\n    // If this node has already been visited due to a circular reference, return the array it was mapped to in the new object\n    const memoVal = memoizationMap.get(inputValue);\n    if (memoVal !== undefined) {\n      return memoVal as T;\n    }\n\n    const returnValue: unknown[] = [];\n    // Store the mapping of this value in case we visit it again, in case of circular data\n    memoizationMap.set(inputValue, returnValue);\n\n    inputValue.forEach((item: unknown) => {\n      returnValue.push(_dropUndefinedKeys(item, memoizationMap));\n    });\n\n    return returnValue as unknown as T;\n  }\n\n  return inputValue;\n}\n\n/**\n * Ensure that something is an object.\n *\n * Turns `undefined` and `null` into `String`s and all other primitives into instances of their respective wrapper\n * classes (String, Boolean, Number, etc.). Acts as the identity function on non-primitives.\n *\n * @param wat The subject of the objectification\n * @returns A version of `wat` which can safely be used with `Object` class methods\n */\nexport function objectify(wat: unknown): typeof Object {\n  let objectified;\n  switch (true) {\n    case wat === undefined || wat === null:\n      objectified = new String(wat);\n      break;\n\n    // Though symbols and bigints do have wrapper classes (`Symbol` and `BigInt`, respectively), for whatever reason\n    // those classes don't have constructors which can be used with the `new` keyword. We therefore need to cast each as\n    // an object in order to wrap it.\n    case typeof wat === 'symbol' || typeof wat === 'bigint':\n      objectified = Object(wat);\n      break;\n\n    // this will catch the remaining primitives: `String`, `Number`, and `Boolean`\n    case isPrimitive(wat):\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      objectified = new (wat as any).constructor(wat);\n      break;\n\n    // by process of elimination, at this point we know that `wat` must already be an object\n    default:\n      objectified = wat;\n      break;\n  }\n  return objectified;\n}\n"]},"metadata":{},"sourceType":"module"}