{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { shallowEqual } from 'react-redux';\nconst initialState = {\n  connectedWallets: []\n};\nconst walletsSlice = createSlice({\n  name: 'wallets',\n  initialState,\n  reducers: {\n    addConnectedWallet(state, _ref) {\n      let {\n        payload\n      } = _ref;\n      const existsAlready = state.connectedWallets.find(wallet => shallowEqual(payload, wallet));\n      if (!existsAlready) {\n        state.connectedWallets = state.connectedWallets.concat(payload);\n      }\n    },\n    removeConnectedWallet(state, _ref2) {\n      let {\n        payload\n      } = _ref2;\n      state.connectedWallets = state.connectedWallets.filter(wallet => !shallowEqual(wallet, payload));\n    }\n  }\n});\nexport const {\n  addConnectedWallet,\n  removeConnectedWallet\n} = walletsSlice.actions;\nexport default walletsSlice.reducer;","map":{"version":3,"names":["createSlice","shallowEqual","initialState","connectedWallets","walletsSlice","name","reducers","addConnectedWallet","state","payload","existsAlready","find","wallet","concat","removeConnectedWallet","filter","actions","reducer"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/state/wallets/reducer.ts"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\nimport { shallowEqual } from 'react-redux'\n\nimport { Wallet } from './types'\n\n/* Used to track wallets that have been connected by the user in current session, and remove them when deliberately disconnected. \n  Used to compute is_reconnect event property for analytics */\ninterface WalletState {\n  connectedWallets: Wallet[]\n}\n\nconst initialState: WalletState = {\n  connectedWallets: [],\n}\n\nconst walletsSlice = createSlice({\n  name: 'wallets',\n  initialState,\n  reducers: {\n    addConnectedWallet(state, { payload }) {\n      const existsAlready = state.connectedWallets.find((wallet) => shallowEqual(payload, wallet))\n      if (!existsAlready) {\n        state.connectedWallets = state.connectedWallets.concat(payload)\n      }\n    },\n    removeConnectedWallet(state, { payload }) {\n      state.connectedWallets = state.connectedWallets.filter((wallet) => !shallowEqual(wallet, payload))\n    },\n  },\n})\n\nexport const { addConnectedWallet, removeConnectedWallet } = walletsSlice.actions\nexport default walletsSlice.reducer\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,YAAY,QAAQ,aAAa;AAU1C,MAAMC,YAAyB,GAAG;EAChCC,gBAAgB,EAAE;AACpB,CAAC;AAED,MAAMC,YAAY,GAAGJ,WAAW,CAAC;EAC/BK,IAAI,EAAE,SAAS;EACfH,YAAY;EACZI,QAAQ,EAAE;IACRC,kBAAkB,CAACC,KAAK,QAAe;MAAA,IAAb;QAAEC;MAAQ,CAAC;MACnC,MAAMC,aAAa,GAAGF,KAAK,CAACL,gBAAgB,CAACQ,IAAI,CAAEC,MAAM,IAAKX,YAAY,CAACQ,OAAO,EAAEG,MAAM,CAAC,CAAC;MAC5F,IAAI,CAACF,aAAa,EAAE;QAClBF,KAAK,CAACL,gBAAgB,GAAGK,KAAK,CAACL,gBAAgB,CAACU,MAAM,CAACJ,OAAO,CAAC;MACjE;IACF,CAAC;IACDK,qBAAqB,CAACN,KAAK,SAAe;MAAA,IAAb;QAAEC;MAAQ,CAAC;MACtCD,KAAK,CAACL,gBAAgB,GAAGK,KAAK,CAACL,gBAAgB,CAACY,MAAM,CAAEH,MAAM,IAAK,CAACX,YAAY,CAACW,MAAM,EAAEH,OAAO,CAAC,CAAC;IACpG;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEF,kBAAkB;EAAEO;AAAsB,CAAC,GAAGV,YAAY,CAACY,OAAO;AACjF,eAAeZ,YAAY,CAACa,OAAO"},"metadata":{},"sourceType":"module"}