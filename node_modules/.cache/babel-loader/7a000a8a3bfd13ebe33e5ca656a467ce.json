{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Base = void 0;\nvar buffer_1 = require(\"buffer\");\nvar crypto_js_1 = __importDefault(require(\"crypto-js\"));\nvar Base = /*#__PURE__*/function () {\n  function Base() {\n    _classCallCheck(this, Base);\n  }\n  _createClass(Base, [{\n    key: \"print\",\n    value:\n    /**\n     * print\n     * @desc Prints out a visual representation of the merkle tree.\n     * @example\n     *```js\n     *tree.print()\n     *```\n     */\n    function print() {\n      Base.print(this);\n    }\n    /**\n     * bufferIndexOf\n     * @desc Returns the first index of which given buffer is found in array.\n     * @param {Buffer[]} haystack - Array of buffers.\n     * @param {Buffer} needle - Buffer to find.\n     * @return {Number} - Index number\n     *\n     * @example\n     * ```js\n     *const index = tree.bufferIndexOf(haystack, needle)\n     *```\n     */\n  }, {\n    key: \"_bufferIndexOf\",\n    value: function _bufferIndexOf(array, element) {\n      for (var i = 0; i < array.length; i++) {\n        if (element.equals(array[i])) {\n          return i;\n        }\n      }\n      return -1;\n    }\n    /**\n     * bufferify\n     * @desc Returns a buffer type for the given value.\n     * @param {String|Number|Object|Buffer|ArrayBuffer} value\n     * @return {Buffer}\n     *\n     * @example\n     * ```js\n     *const buf = MerkleTree.bufferify('0x1234')\n     *```\n     */\n  }, {\n    key: \"bufferToHex\",\n    value:\n    /**\n     * bufferToHex\n     * @desc Returns a hex string with 0x prefix for given buffer.\n     * @param {Buffer} value\n     * @return {String}\n     * @example\n     *```js\n     *const hexStr = tree.bufferToHex(Buffer.from('A'))\n     *```\n     */\n    function bufferToHex(value) {\n      var withPrefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      return Base.bufferToHex(value, withPrefix);\n    }\n    /**\n     * bufferToHex\n     * @desc Returns a hex string with 0x prefix for given buffer.\n     * @param {Buffer} value\n     * @return {String}\n     * @example\n     *```js\n     *const hexStr = MerkleTree.bufferToHex(Buffer.from('A'))\n     *```\n     */\n  }, {\n    key: \"bufferify\",\n    value:\n    /**\n     * bufferify\n     * @desc Returns a buffer type for the given value.\n     * @param {String|Number|Object|Buffer} value\n     * @return {Buffer}\n     *\n     * @example\n     * ```js\n     *const buf = tree.bufferify('0x1234')\n     *```\n     */\n    function bufferify(value) {\n      return Base.bufferify(value);\n    }\n    /**\n     * bufferifyFn\n     * @desc Returns a function that will bufferify the return value.\n     * @param {Function}\n     * @return {Function}\n     *\n     * @example\n     * ```js\n     *const fn = tree.bufferifyFn((value) => sha256(value))\n     *```\n     */\n  }, {\n    key: \"bufferifyFn\",\n    value: function bufferifyFn(f) {\n      var _this = this;\n      return function (value) {\n        var v = f(value);\n        if (buffer_1.Buffer.isBuffer(v)) {\n          return v;\n        }\n        if (_this._isHexString(v)) {\n          return buffer_1.Buffer.from(v.replace('0x', ''), 'hex');\n        }\n        if (typeof v === 'string') {\n          return buffer_1.Buffer.from(v);\n        }\n        if (ArrayBuffer.isView(v)) {\n          return buffer_1.Buffer.from(v.buffer, v.byteOffset, v.byteLength);\n        }\n        // crypto-js support\n        return buffer_1.Buffer.from(f(crypto_js_1.default.enc.Hex.parse(value.toString('hex'))).toString(crypto_js_1.default.enc.Hex), 'hex');\n      };\n    }\n    /**\n     * isHexString\n     * @desc Returns true if value is a hex string.\n     * @param {String} value\n     * @return {Boolean}\n     *\n     * @example\n     * ```js\n     *console.log(MerkleTree.isHexString('0x1234'))\n     *```\n     */\n  }, {\n    key: \"_isHexString\",\n    value: function _isHexString(value) {\n      return Base.isHexString(value);\n    }\n    /**\n     * log2\n     * @desc Returns the log2 of number.\n     * @param {Number} value\n     * @return {Number}\n     */\n  }, {\n    key: \"_log2\",\n    value: function _log2(n) {\n      return n === 1 ? 0 : 1 + this._log2(n / 2 | 0);\n    }\n    /**\n     * zip\n     * @desc Returns true if value is a hex string.\n     * @param {String[]|Number[]|Buffer[]} a - first array\n     * @param {String[]|Number[]|Buffer[]} b -  second array\n     * @return {String[][]|Number[][]|Buffer[][]}\n     *\n     * @example\n     * ```js\n     *const zipped = tree.zip(['a', 'b'],['A', 'B'])\n     *console.log(zipped) // [ [ 'a', 'A' ], [ 'b', 'B' ] ]\n     *```\n     */\n  }, {\n    key: \"_zip\",\n    value: function _zip(a, b) {\n      return a.map(function (e, i) {\n        return [e, b[i]];\n      });\n    }\n  }], [{\n    key: \"bufferify\",\n    value: function bufferify(value) {\n      if (!buffer_1.Buffer.isBuffer(value)) {\n        // crypto-js support\n        if (typeof value === 'object' && value.words) {\n          return buffer_1.Buffer.from(value.toString(crypto_js_1.default.enc.Hex), 'hex');\n        } else if (Base.isHexString(value)) {\n          return buffer_1.Buffer.from(value.replace(/^0x/, ''), 'hex');\n        } else if (typeof value === 'string') {\n          return buffer_1.Buffer.from(value);\n        } else if (typeof value === 'number') {\n          var s = value.toString();\n          if (s.length % 2) {\n            s = \"0\".concat(s);\n          }\n          return buffer_1.Buffer.from(s, 'hex');\n        } else if (ArrayBuffer.isView(value)) {\n          return buffer_1.Buffer.from(value.buffer, value.byteOffset, value.byteLength);\n        }\n      }\n      return value;\n    }\n    /**\n     * isHexString\n     * @desc Returns true if value is a hex string.\n     * @param {String} value\n     * @return {Boolean}\n     *\n     * @example\n     * ```js\n     *console.log(MerkleTree.isHexString('0x1234'))\n     *```\n     */\n  }, {\n    key: \"isHexString\",\n    value: function isHexString(v) {\n      return typeof v === 'string' && /^(0x)?[0-9A-Fa-f]*$/.test(v);\n    }\n    /**\n     * print\n     * @desc Prints out a visual representation of the given merkle tree.\n     * @param {Object} tree - Merkle tree instance.\n     * @return {String}\n     * @example\n     *```js\n     *MerkleTree.print(tree)\n     *```\n     */\n  }, {\n    key: \"print\",\n    value: function print(tree) {\n      console.log(tree.toString());\n    }\n  }, {\n    key: \"bufferToHex\",\n    value: function bufferToHex(value) {\n      var withPrefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      return \"\".concat(withPrefix ? '0x' : '').concat((value || buffer_1.Buffer.alloc(0)).toString('hex'));\n    }\n  }]);\n  return Base;\n}();\nexports.Base = Base;\nexports.default = Base;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","Base","buffer_1","require","crypto_js_1","print","array","element","i","length","equals","withPrefix","bufferToHex","bufferify","f","v","Buffer","isBuffer","_isHexString","from","replace","ArrayBuffer","isView","buffer","byteOffset","byteLength","default","enc","Hex","parse","toString","isHexString","n","_log2","a","b","map","e","words","s","test","tree","console","log","alloc"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/merkletreejs/dist/Base.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Base = void 0;\nconst buffer_1 = require(\"buffer\");\nconst crypto_js_1 = __importDefault(require(\"crypto-js\"));\nclass Base {\n    /**\n     * print\n     * @desc Prints out a visual representation of the merkle tree.\n     * @example\n     *```js\n     *tree.print()\n     *```\n     */\n    print() {\n        Base.print(this);\n    }\n    /**\n     * bufferIndexOf\n     * @desc Returns the first index of which given buffer is found in array.\n     * @param {Buffer[]} haystack - Array of buffers.\n     * @param {Buffer} needle - Buffer to find.\n     * @return {Number} - Index number\n     *\n     * @example\n     * ```js\n     *const index = tree.bufferIndexOf(haystack, needle)\n     *```\n     */\n    _bufferIndexOf(array, element) {\n        for (let i = 0; i < array.length; i++) {\n            if (element.equals(array[i])) {\n                return i;\n            }\n        }\n        return -1;\n    }\n    /**\n     * bufferify\n     * @desc Returns a buffer type for the given value.\n     * @param {String|Number|Object|Buffer|ArrayBuffer} value\n     * @return {Buffer}\n     *\n     * @example\n     * ```js\n     *const buf = MerkleTree.bufferify('0x1234')\n     *```\n     */\n    static bufferify(value) {\n        if (!buffer_1.Buffer.isBuffer(value)) {\n            // crypto-js support\n            if (typeof value === 'object' && value.words) {\n                return buffer_1.Buffer.from(value.toString(crypto_js_1.default.enc.Hex), 'hex');\n            }\n            else if (Base.isHexString(value)) {\n                return buffer_1.Buffer.from(value.replace(/^0x/, ''), 'hex');\n            }\n            else if (typeof value === 'string') {\n                return buffer_1.Buffer.from(value);\n            }\n            else if (typeof value === 'number') {\n                let s = value.toString();\n                if (s.length % 2) {\n                    s = `0${s}`;\n                }\n                return buffer_1.Buffer.from(s, 'hex');\n            }\n            else if (ArrayBuffer.isView(value)) {\n                return buffer_1.Buffer.from(value.buffer, value.byteOffset, value.byteLength);\n            }\n        }\n        return value;\n    }\n    /**\n     * isHexString\n     * @desc Returns true if value is a hex string.\n     * @param {String} value\n     * @return {Boolean}\n     *\n     * @example\n     * ```js\n     *console.log(MerkleTree.isHexString('0x1234'))\n     *```\n     */\n    static isHexString(v) {\n        return (typeof v === 'string' && /^(0x)?[0-9A-Fa-f]*$/.test(v));\n    }\n    /**\n     * print\n     * @desc Prints out a visual representation of the given merkle tree.\n     * @param {Object} tree - Merkle tree instance.\n     * @return {String}\n     * @example\n     *```js\n     *MerkleTree.print(tree)\n     *```\n     */\n    static print(tree) {\n        console.log(tree.toString());\n    }\n    /**\n     * bufferToHex\n     * @desc Returns a hex string with 0x prefix for given buffer.\n     * @param {Buffer} value\n     * @return {String}\n     * @example\n     *```js\n     *const hexStr = tree.bufferToHex(Buffer.from('A'))\n     *```\n     */\n    bufferToHex(value, withPrefix = true) {\n        return Base.bufferToHex(value, withPrefix);\n    }\n    /**\n     * bufferToHex\n     * @desc Returns a hex string with 0x prefix for given buffer.\n     * @param {Buffer} value\n     * @return {String}\n     * @example\n     *```js\n     *const hexStr = MerkleTree.bufferToHex(Buffer.from('A'))\n     *```\n     */\n    static bufferToHex(value, withPrefix = true) {\n        return `${withPrefix ? '0x' : ''}${(value || buffer_1.Buffer.alloc(0)).toString('hex')}`;\n    }\n    /**\n     * bufferify\n     * @desc Returns a buffer type for the given value.\n     * @param {String|Number|Object|Buffer} value\n     * @return {Buffer}\n     *\n     * @example\n     * ```js\n     *const buf = tree.bufferify('0x1234')\n     *```\n     */\n    bufferify(value) {\n        return Base.bufferify(value);\n    }\n    /**\n     * bufferifyFn\n     * @desc Returns a function that will bufferify the return value.\n     * @param {Function}\n     * @return {Function}\n     *\n     * @example\n     * ```js\n     *const fn = tree.bufferifyFn((value) => sha256(value))\n     *```\n     */\n    bufferifyFn(f) {\n        return (value) => {\n            const v = f(value);\n            if (buffer_1.Buffer.isBuffer(v)) {\n                return v;\n            }\n            if (this._isHexString(v)) {\n                return buffer_1.Buffer.from(v.replace('0x', ''), 'hex');\n            }\n            if (typeof v === 'string') {\n                return buffer_1.Buffer.from(v);\n            }\n            if (ArrayBuffer.isView(v)) {\n                return buffer_1.Buffer.from(v.buffer, v.byteOffset, v.byteLength);\n            }\n            // crypto-js support\n            return buffer_1.Buffer.from(f(crypto_js_1.default.enc.Hex.parse(value.toString('hex'))).toString(crypto_js_1.default.enc.Hex), 'hex');\n        };\n    }\n    /**\n     * isHexString\n     * @desc Returns true if value is a hex string.\n     * @param {String} value\n     * @return {Boolean}\n     *\n     * @example\n     * ```js\n     *console.log(MerkleTree.isHexString('0x1234'))\n     *```\n     */\n    _isHexString(value) {\n        return Base.isHexString(value);\n    }\n    /**\n     * log2\n     * @desc Returns the log2 of number.\n     * @param {Number} value\n     * @return {Number}\n     */\n    _log2(n) {\n        return n === 1 ? 0 : 1 + this._log2((n / 2) | 0);\n    }\n    /**\n     * zip\n     * @desc Returns true if value is a hex string.\n     * @param {String[]|Number[]|Buffer[]} a - first array\n     * @param {String[]|Number[]|Buffer[]} b -  second array\n     * @return {String[][]|Number[][]|Buffer[][]}\n     *\n     * @example\n     * ```js\n     *const zipped = tree.zip(['a', 'b'],['A', 'B'])\n     *console.log(zipped) // [ [ 'a', 'A' ], [ 'b', 'B' ] ]\n     *```\n     */\n    _zip(a, b) {\n        return a.map((e, i) => [e, b[i]]);\n    }\n}\nexports.Base = Base;\nexports.default = Base;\n"],"mappings":"AAAA,YAAY;;AAAC;AAAA;AACb,IAAIA,eAAe,GAAI,IAAI,IAAI,IAAI,CAACA,eAAe,IAAK,UAAUC,GAAG,EAAE;EACnE,OAAQA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAID,GAAG,GAAG;IAAE,SAAS,EAAEA;EAAI,CAAC;AAC7D,CAAC;AACDE,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,IAAI,GAAG,KAAK,CAAC;AACrB,IAAMC,QAAQ,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAClC,IAAMC,WAAW,GAAGV,eAAe,CAACS,OAAO,CAAC,WAAW,CAAC,CAAC;AAAC,IACpDF,IAAI;EAAA;IAAA;EAAA;EAAA;IAAA;IAAA;IACN;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;IACI,iBAAQ;MACJA,IAAI,CAACI,KAAK,CAAC,IAAI,CAAC;IACpB;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAXI;IAAA;IAAA,OAYA,wBAAeC,KAAK,EAAEC,OAAO,EAAE;MAC3B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,KAAK,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;QACnC,IAAID,OAAO,CAACG,MAAM,CAACJ,KAAK,CAACE,CAAC,CAAC,CAAC,EAAE;UAC1B,OAAOA,CAAC;QACZ;MACJ;MACA,OAAO,CAAC,CAAC;IACb;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAVI;IAAA;IAAA;IA+DA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACI,qBAAYR,KAAK,EAAqB;MAAA,IAAnBW,UAAU,uEAAG,IAAI;MAChC,OAAOV,IAAI,CAACW,WAAW,CAACZ,KAAK,EAAEW,UAAU,CAAC;IAC9C;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EATI;IAAA;IAAA;IAaA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACI,mBAAUX,KAAK,EAAE;MACb,OAAOC,IAAI,CAACY,SAAS,CAACb,KAAK,CAAC;IAChC;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAVI;IAAA;IAAA,OAWA,qBAAYc,CAAC,EAAE;MAAA;MACX,OAAO,UAACd,KAAK,EAAK;QACd,IAAMe,CAAC,GAAGD,CAAC,CAACd,KAAK,CAAC;QAClB,IAAIE,QAAQ,CAACc,MAAM,CAACC,QAAQ,CAACF,CAAC,CAAC,EAAE;UAC7B,OAAOA,CAAC;QACZ;QACA,IAAI,KAAI,CAACG,YAAY,CAACH,CAAC,CAAC,EAAE;UACtB,OAAOb,QAAQ,CAACc,MAAM,CAACG,IAAI,CAACJ,CAAC,CAACK,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,EAAE,KAAK,CAAC;QAC3D;QACA,IAAI,OAAOL,CAAC,KAAK,QAAQ,EAAE;UACvB,OAAOb,QAAQ,CAACc,MAAM,CAACG,IAAI,CAACJ,CAAC,CAAC;QAClC;QACA,IAAIM,WAAW,CAACC,MAAM,CAACP,CAAC,CAAC,EAAE;UACvB,OAAOb,QAAQ,CAACc,MAAM,CAACG,IAAI,CAACJ,CAAC,CAACQ,MAAM,EAAER,CAAC,CAACS,UAAU,EAAET,CAAC,CAACU,UAAU,CAAC;QACrE;QACA;QACA,OAAOvB,QAAQ,CAACc,MAAM,CAACG,IAAI,CAACL,CAAC,CAACV,WAAW,CAACsB,OAAO,CAACC,GAAG,CAACC,GAAG,CAACC,KAAK,CAAC7B,KAAK,CAAC8B,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAACA,QAAQ,CAAC1B,WAAW,CAACsB,OAAO,CAACC,GAAG,CAACC,GAAG,CAAC,EAAE,KAAK,CAAC;MACzI,CAAC;IACL;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAVI;IAAA;IAAA,OAWA,sBAAa5B,KAAK,EAAE;MAChB,OAAOC,IAAI,CAAC8B,WAAW,CAAC/B,KAAK,CAAC;IAClC;IACA;AACJ;AACA;AACA;AACA;AACA;EALI;IAAA;IAAA,OAMA,eAAMgC,CAAC,EAAE;MACL,OAAOA,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,IAAI,CAACC,KAAK,CAAED,CAAC,GAAG,CAAC,GAAI,CAAC,CAAC;IACpD;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAZI;IAAA;IAAA,OAaA,cAAKE,CAAC,EAAEC,CAAC,EAAE;MACP,OAAOD,CAAC,CAACE,GAAG,CAAC,UAACC,CAAC,EAAE7B,CAAC;QAAA,OAAK,CAAC6B,CAAC,EAAEF,CAAC,CAAC3B,CAAC,CAAC,CAAC;MAAA,EAAC;IACrC;EAAC;IAAA;IAAA,OAhKD,mBAAiBR,KAAK,EAAE;MACpB,IAAI,CAACE,QAAQ,CAACc,MAAM,CAACC,QAAQ,CAACjB,KAAK,CAAC,EAAE;QAClC;QACA,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAIA,KAAK,CAACsC,KAAK,EAAE;UAC1C,OAAOpC,QAAQ,CAACc,MAAM,CAACG,IAAI,CAACnB,KAAK,CAAC8B,QAAQ,CAAC1B,WAAW,CAACsB,OAAO,CAACC,GAAG,CAACC,GAAG,CAAC,EAAE,KAAK,CAAC;QACnF,CAAC,MACI,IAAI3B,IAAI,CAAC8B,WAAW,CAAC/B,KAAK,CAAC,EAAE;UAC9B,OAAOE,QAAQ,CAACc,MAAM,CAACG,IAAI,CAACnB,KAAK,CAACoB,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,EAAE,KAAK,CAAC;QAChE,CAAC,MACI,IAAI,OAAOpB,KAAK,KAAK,QAAQ,EAAE;UAChC,OAAOE,QAAQ,CAACc,MAAM,CAACG,IAAI,CAACnB,KAAK,CAAC;QACtC,CAAC,MACI,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;UAChC,IAAIuC,CAAC,GAAGvC,KAAK,CAAC8B,QAAQ,EAAE;UACxB,IAAIS,CAAC,CAAC9B,MAAM,GAAG,CAAC,EAAE;YACd8B,CAAC,cAAOA,CAAC,CAAE;UACf;UACA,OAAOrC,QAAQ,CAACc,MAAM,CAACG,IAAI,CAACoB,CAAC,EAAE,KAAK,CAAC;QACzC,CAAC,MACI,IAAIlB,WAAW,CAACC,MAAM,CAACtB,KAAK,CAAC,EAAE;UAChC,OAAOE,QAAQ,CAACc,MAAM,CAACG,IAAI,CAACnB,KAAK,CAACuB,MAAM,EAAEvB,KAAK,CAACwB,UAAU,EAAExB,KAAK,CAACyB,UAAU,CAAC;QACjF;MACJ;MACA,OAAOzB,KAAK;IAChB;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAVI;IAAA;IAAA,OAWA,qBAAmBe,CAAC,EAAE;MAClB,OAAQ,OAAOA,CAAC,KAAK,QAAQ,IAAI,qBAAqB,CAACyB,IAAI,CAACzB,CAAC,CAAC;IAClE;IACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EATI;IAAA;IAAA,OAUA,eAAa0B,IAAI,EAAE;MACfC,OAAO,CAACC,GAAG,CAACF,IAAI,CAACX,QAAQ,EAAE,CAAC;IAChC;EAAC;IAAA;IAAA,OAwBD,qBAAmB9B,KAAK,EAAqB;MAAA,IAAnBW,UAAU,uEAAG,IAAI;MACvC,iBAAUA,UAAU,GAAG,IAAI,GAAG,EAAE,SAAG,CAACX,KAAK,IAAIE,QAAQ,CAACc,MAAM,CAAC4B,KAAK,CAAC,CAAC,CAAC,EAAEd,QAAQ,CAAC,KAAK,CAAC;IAC1F;EAAC;EAAA;AAAA;AAqFL/B,OAAO,CAACE,IAAI,GAAGA,IAAI;AACnBF,OAAO,CAAC2B,OAAO,GAAGzB,IAAI"},"metadata":{},"sourceType":"script"}