{"ast":null,"code":"var _s = $RefreshSig$();\nimport { SwapRouter, UNIVERSAL_ROUTER_ADDRESS } from '@uniswap/universal-router-sdk';\nimport { toHex } from '@uniswap/v3-sdk';\nimport { useWeb3React } from '@web3-react/core';\nimport { useCallback } from 'react';\nimport { calculateGasMargin } from 'utils/calculateGasMargin';\nimport isZero from 'utils/isZero';\nimport { swapErrorToUserReadableMessage } from 'utils/swapErrorToUserReadableMessage';\nexport function useUniversalRouterSwapCallback(trade, options) {\n  _s();\n  const {\n    account,\n    chainId,\n    provider\n  } = useWeb3React();\n  return useCallback(async () => {\n    try {\n      var _options$deadline;\n      if (!account) throw new Error('missing account');\n      if (!chainId) throw new Error('missing chainId');\n      if (!provider) throw new Error('missing provider');\n      if (!trade) throw new Error('missing trade');\n      const {\n        calldata: data,\n        value\n      } = SwapRouter.swapERC20CallParameters(trade, {\n        slippageTolerance: options.slippageTolerance,\n        deadlineOrPreviousBlockhash: (_options$deadline = options.deadline) === null || _options$deadline === void 0 ? void 0 : _options$deadline.toString(),\n        inputTokenPermit: options.permit,\n        fee: options.feeOptions\n      });\n      const tx = {\n        from: account,\n        to: UNIVERSAL_ROUTER_ADDRESS(chainId),\n        data,\n        // TODO: universal-router-sdk returns a non-hexlified value.\n        ...(value && !isZero(value) ? {\n          value: toHex(value)\n        } : {})\n      };\n      let gasEstimate;\n      try {\n        gasEstimate = await provider.estimateGas(tx);\n      } catch (gasError) {\n        await provider.call(tx); // this should throw the actual error\n        throw new Error('unexpected issue with gas estimation; please try again');\n      }\n      const gasLimit = calculateGasMargin(gasEstimate);\n      const response = await provider.getSigner().sendTransaction({\n        ...tx,\n        gasLimit\n      });\n      return response;\n    } catch (swapError) {\n      const message = swapErrorToUserReadableMessage(swapError);\n      throw new Error(message);\n    }\n  }, [account, chainId, options.deadline, options.feeOptions, options.permit, options.slippageTolerance, provider, trade]);\n}\n_s(useUniversalRouterSwapCallback, \"Er43l/h37JfIIXMK+0pJt5mfuPM=\", false, function () {\n  return [useWeb3React];\n});","map":{"version":3,"names":["SwapRouter","UNIVERSAL_ROUTER_ADDRESS","toHex","useWeb3React","useCallback","calculateGasMargin","isZero","swapErrorToUserReadableMessage","useUniversalRouterSwapCallback","trade","options","account","chainId","provider","Error","calldata","data","value","swapERC20CallParameters","slippageTolerance","deadlineOrPreviousBlockhash","deadline","toString","inputTokenPermit","permit","fee","feeOptions","tx","from","to","gasEstimate","estimateGas","gasError","call","gasLimit","response","getSigner","sendTransaction","swapError","message"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/hooks/useUniversalRouter.ts"],"sourcesContent":["import { TransactionResponse } from '@ethersproject/abstract-provider'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { Trade } from '@uniswap/router-sdk'\nimport { Currency, Percent, TradeType } from '@uniswap/sdk-core'\nimport { SwapRouter, UNIVERSAL_ROUTER_ADDRESS } from '@uniswap/universal-router-sdk'\nimport { FeeOptions, toHex } from '@uniswap/v3-sdk'\nimport { useWeb3React } from '@web3-react/core'\nimport { useCallback } from 'react'\nimport { calculateGasMargin } from 'utils/calculateGasMargin'\nimport isZero from 'utils/isZero'\nimport { swapErrorToUserReadableMessage } from 'utils/swapErrorToUserReadableMessage'\n\nimport { PermitSignature } from './usePermitAllowance'\n\ninterface SwapOptions {\n  slippageTolerance: Percent\n  deadline?: BigNumber\n  permit?: PermitSignature\n  feeOptions?: FeeOptions\n}\n\nexport function useUniversalRouterSwapCallback(\n  trade: Trade<Currency, Currency, TradeType> | undefined,\n  options: SwapOptions\n) {\n  const { account, chainId, provider } = useWeb3React()\n\n  return useCallback(async (): Promise<TransactionResponse> => {\n    try {\n      if (!account) throw new Error('missing account')\n      if (!chainId) throw new Error('missing chainId')\n      if (!provider) throw new Error('missing provider')\n      if (!trade) throw new Error('missing trade')\n\n      const { calldata: data, value } = SwapRouter.swapERC20CallParameters(trade, {\n        slippageTolerance: options.slippageTolerance,\n        deadlineOrPreviousBlockhash: options.deadline?.toString(),\n        inputTokenPermit: options.permit,\n        fee: options.feeOptions,\n      })\n      const tx = {\n        from: account,\n        to: UNIVERSAL_ROUTER_ADDRESS(chainId),\n        data,\n        // TODO: universal-router-sdk returns a non-hexlified value.\n        ...(value && !isZero(value) ? { value: toHex(value) } : {}),\n      }\n\n      let gasEstimate: BigNumber\n      try {\n        gasEstimate = await provider.estimateGas(tx)\n      } catch (gasError) {\n        await provider.call(tx) // this should throw the actual error\n        throw new Error('unexpected issue with gas estimation; please try again')\n      }\n      const gasLimit = calculateGasMargin(gasEstimate)\n      const response = await provider.getSigner().sendTransaction({ ...tx, gasLimit })\n      return response\n    } catch (swapError: unknown) {\n      const message = swapErrorToUserReadableMessage(swapError)\n      throw new Error(message)\n    }\n  }, [\n    account,\n    chainId,\n    options.deadline,\n    options.feeOptions,\n    options.permit,\n    options.slippageTolerance,\n    provider,\n    trade,\n  ])\n}\n"],"mappings":";AAIA,SAASA,UAAU,EAAEC,wBAAwB,QAAQ,+BAA+B;AACpF,SAAqBC,KAAK,QAAQ,iBAAiB;AACnD,SAASC,YAAY,QAAQ,kBAAkB;AAC/C,SAASC,WAAW,QAAQ,OAAO;AACnC,SAASC,kBAAkB,QAAQ,0BAA0B;AAC7D,OAAOC,MAAM,MAAM,cAAc;AACjC,SAASC,8BAA8B,QAAQ,sCAAsC;AAWrF,OAAO,SAASC,8BAA8B,CAC5CC,KAAuD,EACvDC,OAAoB,EACpB;EAAA;EACA,MAAM;IAAEC,OAAO;IAAEC,OAAO;IAAEC;EAAS,CAAC,GAAGV,YAAY,EAAE;EAErD,OAAOC,WAAW,CAAC,YAA0C;IAC3D,IAAI;MAAA;MACF,IAAI,CAACO,OAAO,EAAE,MAAM,IAAIG,KAAK,CAAC,iBAAiB,CAAC;MAChD,IAAI,CAACF,OAAO,EAAE,MAAM,IAAIE,KAAK,CAAC,iBAAiB,CAAC;MAChD,IAAI,CAACD,QAAQ,EAAE,MAAM,IAAIC,KAAK,CAAC,kBAAkB,CAAC;MAClD,IAAI,CAACL,KAAK,EAAE,MAAM,IAAIK,KAAK,CAAC,eAAe,CAAC;MAE5C,MAAM;QAAEC,QAAQ,EAAEC,IAAI;QAAEC;MAAM,CAAC,GAAGjB,UAAU,CAACkB,uBAAuB,CAACT,KAAK,EAAE;QAC1EU,iBAAiB,EAAET,OAAO,CAACS,iBAAiB;QAC5CC,2BAA2B,uBAAEV,OAAO,CAACW,QAAQ,sDAAhB,kBAAkBC,QAAQ,EAAE;QACzDC,gBAAgB,EAAEb,OAAO,CAACc,MAAM;QAChCC,GAAG,EAAEf,OAAO,CAACgB;MACf,CAAC,CAAC;MACF,MAAMC,EAAE,GAAG;QACTC,IAAI,EAAEjB,OAAO;QACbkB,EAAE,EAAE5B,wBAAwB,CAACW,OAAO,CAAC;QACrCI,IAAI;QACJ;QACA,IAAIC,KAAK,IAAI,CAACX,MAAM,CAACW,KAAK,CAAC,GAAG;UAAEA,KAAK,EAAEf,KAAK,CAACe,KAAK;QAAE,CAAC,GAAG,CAAC,CAAC;MAC5D,CAAC;MAED,IAAIa,WAAsB;MAC1B,IAAI;QACFA,WAAW,GAAG,MAAMjB,QAAQ,CAACkB,WAAW,CAACJ,EAAE,CAAC;MAC9C,CAAC,CAAC,OAAOK,QAAQ,EAAE;QACjB,MAAMnB,QAAQ,CAACoB,IAAI,CAACN,EAAE,CAAC,EAAC;QACxB,MAAM,IAAIb,KAAK,CAAC,wDAAwD,CAAC;MAC3E;MACA,MAAMoB,QAAQ,GAAG7B,kBAAkB,CAACyB,WAAW,CAAC;MAChD,MAAMK,QAAQ,GAAG,MAAMtB,QAAQ,CAACuB,SAAS,EAAE,CAACC,eAAe,CAAC;QAAE,GAAGV,EAAE;QAAEO;MAAS,CAAC,CAAC;MAChF,OAAOC,QAAQ;IACjB,CAAC,CAAC,OAAOG,SAAkB,EAAE;MAC3B,MAAMC,OAAO,GAAGhC,8BAA8B,CAAC+B,SAAS,CAAC;MACzD,MAAM,IAAIxB,KAAK,CAACyB,OAAO,CAAC;IAC1B;EACF,CAAC,EAAE,CACD5B,OAAO,EACPC,OAAO,EACPF,OAAO,CAACW,QAAQ,EAChBX,OAAO,CAACgB,UAAU,EAClBhB,OAAO,CAACc,MAAM,EACdd,OAAO,CAACS,iBAAiB,EACzBN,QAAQ,EACRJ,KAAK,CACN,CAAC;AACJ;AAAC,GAnDeD,8BAA8B;EAAA,QAILL,YAAY;AAAA"},"metadata":{},"sourceType":"module"}