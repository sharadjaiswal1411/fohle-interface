{"ast":null,"code":"import { __awaiter, __generator, __read, __rest, __spreadArray } from \"tslib\";\nimport { PluginType, Status } from '@amplitude/analytics-types';\nimport { INVALID_API_KEY, MAX_RETRIES_EXCEEDED_MESSAGE, MISSING_API_KEY_MESSAGE, SUCCESS_MESSAGE, UNEXPECTED_ERROR_MESSAGE } from '../messages';\nimport { STORAGE_PREFIX } from '../constants';\nimport { chunk } from '../utils/chunk';\nimport { buildResult } from '../utils/result-builder';\nimport { createServerConfig } from '../config';\nvar Destination = /** @class */function () {\n  function Destination() {\n    this.name = 'amplitude';\n    this.type = PluginType.DESTINATION;\n    this.retryTimeout = 1000;\n    this.throttleTimeout = 30000;\n    this.storageKey = '';\n    this.scheduled = false;\n    this.queue = [];\n  }\n  Destination.prototype.setup = function (config) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function () {\n      var unsent;\n      var _this = this;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            this.config = config;\n            this.storageKey = \"\".concat(STORAGE_PREFIX, \"_\").concat(this.config.apiKey.substring(0, 10));\n            return [4 /*yield*/, (_a = this.config.storageProvider) === null || _a === void 0 ? void 0 : _a.get(this.storageKey)];\n          case 1:\n            unsent = _b.sent();\n            this.saveEvents(); // sets storage to '[]'\n            if (unsent && unsent.length > 0) {\n              void Promise.all(unsent.map(function (event) {\n                return _this.execute(event);\n              })).catch();\n            }\n            return [2 /*return*/, Promise.resolve(undefined)];\n        }\n      });\n    });\n  };\n  Destination.prototype.execute = function (event) {\n    var _this = this;\n    return new Promise(function (resolve) {\n      var context = {\n        event: event,\n        attempts: 0,\n        callback: function callback(result) {\n          return resolve(result);\n        },\n        timeout: 0\n      };\n      void _this.addToQueue(context);\n    });\n  };\n  Destination.prototype.addToQueue = function () {\n    var _this = this;\n    var list = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      list[_i] = arguments[_i];\n    }\n    var tryable = list.filter(function (context) {\n      if (context.attempts < _this.config.flushMaxRetries) {\n        context.attempts += 1;\n        return true;\n      }\n      void _this.fulfillRequest([context], 500, MAX_RETRIES_EXCEEDED_MESSAGE);\n      return false;\n    });\n    tryable.forEach(function (context) {\n      _this.queue = _this.queue.concat(context);\n      if (context.timeout === 0) {\n        _this.schedule(_this.config.flushIntervalMillis);\n        return;\n      }\n      setTimeout(function () {\n        context.timeout = 0;\n        _this.schedule(0);\n      }, context.timeout);\n    });\n    this.saveEvents();\n  };\n  Destination.prototype.schedule = function (timeout) {\n    var _this = this;\n    if (this.scheduled) return;\n    this.scheduled = true;\n    setTimeout(function () {\n      void _this.flush(true).then(function () {\n        _this.scheduled = false;\n        if (_this.queue.length > 0) {\n          _this.schedule(timeout);\n        }\n      });\n    }, timeout);\n  };\n  Destination.prototype.flush = function (useRetry) {\n    if (useRetry === void 0) {\n      useRetry = false;\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      var list, later, batches;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            list = [];\n            later = [];\n            this.queue.forEach(function (context) {\n              return context.timeout === 0 ? list.push(context) : later.push(context);\n            });\n            this.queue = later;\n            batches = chunk(list, this.config.flushQueueSize);\n            return [4 /*yield*/, Promise.all(batches.map(function (batch) {\n              return _this.send(batch, useRetry);\n            }))];\n          case 1:\n            _a.sent();\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  Destination.prototype.send = function (list, useRetry) {\n    if (useRetry === void 0) {\n      useRetry = true;\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      var payload, serverUrl, res, e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.config.apiKey) {\n              return [2 /*return*/, this.fulfillRequest(list, 400, MISSING_API_KEY_MESSAGE)];\n            }\n            payload = {\n              api_key: this.config.apiKey,\n              events: list.map(function (context) {\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                var _a = context.event,\n                  extra = _a.extra,\n                  eventWithoutExtra = __rest(_a, [\"extra\"]);\n                return eventWithoutExtra;\n              }),\n              options: {\n                min_id_length: this.config.minIdLength\n              }\n            };\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            serverUrl = createServerConfig(this.config.serverUrl, this.config.serverZone, this.config.useBatch).serverUrl;\n            return [4 /*yield*/, this.config.transportProvider.send(serverUrl, payload)];\n          case 2:\n            res = _a.sent();\n            if (res === null) {\n              this.fulfillRequest(list, 0, UNEXPECTED_ERROR_MESSAGE);\n              return [2 /*return*/];\n            }\n\n            if (!useRetry) {\n              this.fulfillRequest(list, res.statusCode, res.status);\n              return [2 /*return*/];\n            }\n\n            this.handleReponse(res, list);\n            return [3 /*break*/, 4];\n          case 3:\n            e_1 = _a.sent();\n            this.fulfillRequest(list, 0, String(e_1));\n            return [3 /*break*/, 4];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  Destination.prototype.handleReponse = function (res, list) {\n    var status = res.status;\n    switch (status) {\n      case Status.Success:\n        this.handleSuccessResponse(res, list);\n        break;\n      case Status.Invalid:\n        this.handleInvalidResponse(res, list);\n        break;\n      case Status.PayloadTooLarge:\n        this.handlePayloadTooLargeResponse(res, list);\n        break;\n      case Status.RateLimit:\n        this.handleRateLimitResponse(res, list);\n        break;\n      default:\n        this.handleOtherReponse(list);\n    }\n  };\n  Destination.prototype.handleSuccessResponse = function (res, list) {\n    this.fulfillRequest(list, res.statusCode, SUCCESS_MESSAGE);\n  };\n  Destination.prototype.handleInvalidResponse = function (res, list) {\n    var _this = this;\n    if (res.body.missingField || res.body.error.startsWith(INVALID_API_KEY)) {\n      this.fulfillRequest(list, res.statusCode, res.body.error);\n      return;\n    }\n    var dropIndex = __spreadArray(__spreadArray(__spreadArray(__spreadArray([], __read(Object.values(res.body.eventsWithInvalidFields)), false), __read(Object.values(res.body.eventsWithMissingFields)), false), __read(Object.values(res.body.eventsWithInvalidIdLengths)), false), __read(res.body.silencedEvents), false).flat();\n    var dropIndexSet = new Set(dropIndex);\n    var retry = list.filter(function (context, index) {\n      if (dropIndexSet.has(index)) {\n        _this.fulfillRequest([context], res.statusCode, res.body.error);\n        return;\n      }\n      return true;\n    });\n    this.addToQueue.apply(this, __spreadArray([], __read(retry), false));\n  };\n  Destination.prototype.handlePayloadTooLargeResponse = function (res, list) {\n    if (list.length === 1) {\n      this.fulfillRequest(list, res.statusCode, res.body.error);\n      return;\n    }\n    this.config.flushQueueSize /= 2;\n    this.addToQueue.apply(this, __spreadArray([], __read(list), false));\n  };\n  Destination.prototype.handleRateLimitResponse = function (res, list) {\n    var _this = this;\n    var dropUserIds = Object.keys(res.body.exceededDailyQuotaUsers);\n    var dropDeviceIds = Object.keys(res.body.exceededDailyQuotaDevices);\n    var throttledIndex = res.body.throttledEvents;\n    var dropUserIdsSet = new Set(dropUserIds);\n    var dropDeviceIdsSet = new Set(dropDeviceIds);\n    var throttledIndexSet = new Set(throttledIndex);\n    var retry = list.filter(function (context, index) {\n      if (context.event.user_id && dropUserIdsSet.has(context.event.user_id) || context.event.device_id && dropDeviceIdsSet.has(context.event.device_id)) {\n        _this.fulfillRequest([context], res.statusCode, res.body.error);\n        return;\n      }\n      if (throttledIndexSet.has(index)) {\n        context.timeout = _this.throttleTimeout;\n      }\n      return true;\n    });\n    this.addToQueue.apply(this, __spreadArray([], __read(retry), false));\n  };\n  Destination.prototype.handleOtherReponse = function (list) {\n    var _this = this;\n    this.addToQueue.apply(this, __spreadArray([], __read(list.map(function (context) {\n      context.timeout = context.attempts * _this.retryTimeout;\n      return context;\n    })), false));\n  };\n  Destination.prototype.fulfillRequest = function (list, code, message) {\n    this.saveEvents();\n    list.forEach(function (context) {\n      return context.callback(buildResult(context.event, code, message));\n    });\n  };\n  /**\n   * Saves events to storage\n   * This is called on\n   * 1) new events are added to queue; or\n   * 2) response comes back for a request\n   */\n  Destination.prototype.saveEvents = function () {\n    if (!this.config.storageProvider) {\n      return;\n    }\n    var events = Array.from(this.queue.map(function (context) {\n      return context.event;\n    }));\n    void this.config.storageProvider.set(this.storageKey, events);\n  };\n  return Destination;\n}();\nexport { Destination };","map":{"version":3,"sources":["../../../src/plugins/destination.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Config,\n  DestinationContext as Context,\n  DestinationPlugin,\n  Event,\n  InvalidResponse,\n  PayloadTooLargeResponse,\n  PluginType,\n  RateLimitResponse,\n  Response,\n  Result,\n  Status,\n  SuccessResponse,\n} from '@amplitude/analytics-types';\nimport {\n  INVALID_API_KEY,\n  MAX_RETRIES_EXCEEDED_MESSAGE,\n  MISSING_API_KEY_MESSAGE,\n  SUCCESS_MESSAGE,\n  UNEXPECTED_ERROR_MESSAGE,\n} from '../messages';\nimport { STORAGE_PREFIX } from '../constants';\nimport { chunk } from '../utils/chunk';\nimport { buildResult } from '../utils/result-builder';\nimport { createServerConfig } from '../config';\n\nexport class Destination implements DestinationPlugin {\n  name = 'amplitude';\n  type = PluginType.DESTINATION as const;\n\n  retryTimeout = 1000;\n  throttleTimeout = 30000;\n  storageKey = '';\n  // this.config is defined in setup() which will always be called first\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  config: Config;\n  scheduled = false;\n  queue: Context[] = [];\n\n  async setup(config: Config): Promise<undefined> {\n    this.config = config;\n\n    this.storageKey = `${STORAGE_PREFIX}_${this.config.apiKey.substring(0, 10)}`;\n    const unsent = await this.config.storageProvider?.get(this.storageKey);\n    this.saveEvents(); // sets storage to '[]'\n    if (unsent && unsent.length > 0) {\n      void Promise.all(unsent.map((event) => this.execute(event))).catch();\n    }\n\n    return Promise.resolve(undefined);\n  }\n\n  execute(event: Event): Promise<Result> {\n    return new Promise((resolve) => {\n      const context = {\n        event,\n        attempts: 0,\n        callback: (result: Result) => resolve(result),\n        timeout: 0,\n      };\n      void this.addToQueue(context);\n    });\n  }\n\n  addToQueue(...list: Context[]) {\n    const tryable = list.filter((context) => {\n      if (context.attempts < this.config.flushMaxRetries) {\n        context.attempts += 1;\n        return true;\n      }\n      void this.fulfillRequest([context], 500, MAX_RETRIES_EXCEEDED_MESSAGE);\n      return false;\n    });\n\n    tryable.forEach((context) => {\n      this.queue = this.queue.concat(context);\n      if (context.timeout === 0) {\n        this.schedule(this.config.flushIntervalMillis);\n        return;\n      }\n\n      setTimeout(() => {\n        context.timeout = 0;\n        this.schedule(0);\n      }, context.timeout);\n    });\n\n    this.saveEvents();\n  }\n\n  schedule(timeout: number) {\n    if (this.scheduled) return;\n    this.scheduled = true;\n    setTimeout(() => {\n      void this.flush(true).then(() => {\n        this.scheduled = false;\n        if (this.queue.length > 0) {\n          this.schedule(timeout);\n        }\n      });\n    }, timeout);\n  }\n\n  async flush(useRetry = false) {\n    const list: Context[] = [];\n    const later: Context[] = [];\n    this.queue.forEach((context) => (context.timeout === 0 ? list.push(context) : later.push(context)));\n    this.queue = later;\n\n    const batches = chunk(list, this.config.flushQueueSize);\n    await Promise.all(batches.map((batch) => this.send(batch, useRetry)));\n  }\n\n  async send(list: Context[], useRetry = true) {\n    if (!this.config.apiKey) {\n      return this.fulfillRequest(list, 400, MISSING_API_KEY_MESSAGE);\n    }\n\n    const payload = {\n      api_key: this.config.apiKey,\n      events: list.map((context) => {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { extra, ...eventWithoutExtra } = context.event;\n        return eventWithoutExtra;\n      }),\n      options: {\n        min_id_length: this.config.minIdLength,\n      },\n    };\n\n    try {\n      const { serverUrl } = createServerConfig(this.config.serverUrl, this.config.serverZone, this.config.useBatch);\n      const res = await this.config.transportProvider.send(serverUrl, payload);\n      if (res === null) {\n        this.fulfillRequest(list, 0, UNEXPECTED_ERROR_MESSAGE);\n        return;\n      }\n      if (!useRetry) {\n        this.fulfillRequest(list, res.statusCode, res.status);\n        return;\n      }\n      this.handleReponse(res, list);\n    } catch (e) {\n      this.fulfillRequest(list, 0, String(e));\n    }\n  }\n\n  handleReponse(res: Response, list: Context[]) {\n    const { status } = res;\n    switch (status) {\n      case Status.Success:\n        this.handleSuccessResponse(res, list);\n        break;\n\n      case Status.Invalid:\n        this.handleInvalidResponse(res, list);\n        break;\n\n      case Status.PayloadTooLarge:\n        this.handlePayloadTooLargeResponse(res, list);\n        break;\n\n      case Status.RateLimit:\n        this.handleRateLimitResponse(res, list);\n        break;\n\n      default:\n        this.handleOtherReponse(list);\n    }\n  }\n\n  handleSuccessResponse(res: SuccessResponse, list: Context[]) {\n    this.fulfillRequest(list, res.statusCode, SUCCESS_MESSAGE);\n  }\n\n  handleInvalidResponse(res: InvalidResponse, list: Context[]) {\n    if (res.body.missingField || res.body.error.startsWith(INVALID_API_KEY)) {\n      this.fulfillRequest(list, res.statusCode, res.body.error);\n      return;\n    }\n\n    const dropIndex = [\n      ...Object.values(res.body.eventsWithInvalidFields),\n      ...Object.values(res.body.eventsWithMissingFields),\n      ...Object.values(res.body.eventsWithInvalidIdLengths),\n      ...res.body.silencedEvents,\n    ].flat();\n    const dropIndexSet = new Set(dropIndex);\n\n    const retry = list.filter((context, index) => {\n      if (dropIndexSet.has(index)) {\n        this.fulfillRequest([context], res.statusCode, res.body.error);\n        return;\n      }\n      return true;\n    });\n\n    this.addToQueue(...retry);\n  }\n\n  handlePayloadTooLargeResponse(res: PayloadTooLargeResponse, list: Context[]) {\n    if (list.length === 1) {\n      this.fulfillRequest(list, res.statusCode, res.body.error);\n      return;\n    }\n    this.config.flushQueueSize /= 2;\n    this.addToQueue(...list);\n  }\n\n  handleRateLimitResponse(res: RateLimitResponse, list: Context[]) {\n    const dropUserIds = Object.keys(res.body.exceededDailyQuotaUsers);\n    const dropDeviceIds = Object.keys(res.body.exceededDailyQuotaDevices);\n    const throttledIndex = res.body.throttledEvents;\n    const dropUserIdsSet = new Set(dropUserIds);\n    const dropDeviceIdsSet = new Set(dropDeviceIds);\n    const throttledIndexSet = new Set(throttledIndex);\n\n    const retry = list.filter((context, index) => {\n      if (\n        (context.event.user_id && dropUserIdsSet.has(context.event.user_id)) ||\n        (context.event.device_id && dropDeviceIdsSet.has(context.event.device_id))\n      ) {\n        this.fulfillRequest([context], res.statusCode, res.body.error);\n        return;\n      }\n      if (throttledIndexSet.has(index)) {\n        context.timeout = this.throttleTimeout;\n      }\n      return true;\n    });\n\n    this.addToQueue(...retry);\n  }\n\n  handleOtherReponse(list: Context[]) {\n    this.addToQueue(\n      ...list.map((context) => {\n        context.timeout = context.attempts * this.retryTimeout;\n        return context;\n      }),\n    );\n  }\n\n  fulfillRequest(list: Context[], code: number, message: string) {\n    this.saveEvents();\n    list.forEach((context) => context.callback(buildResult(context.event, code, message)));\n  }\n\n  /**\n   * Saves events to storage\n   * This is called on\n   * 1) new events are added to queue; or\n   * 2) response comes back for a request\n   */\n  saveEvents() {\n    if (!this.config.storageProvider) {\n      return;\n    }\n    const events = Array.from(this.queue.map((context) => context.event));\n    void this.config.storageProvider.set(this.storageKey, events);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}