{"ast":null,"code":"import _classCallCheck from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { getOriginalFunction } from '@sentry/utils';\nvar originalFunctionToString;\n\n/** Patch toString calls to return proper name for wrapped functions */\nvar FunctionToString = /*#__PURE__*/function () {\n  function FunctionToString() {\n    _classCallCheck(this, FunctionToString);\n    FunctionToString.prototype.__init.call(this);\n  }\n  /**\n   * @inheritDoc\n   */\n  _createClass(FunctionToString, [{\n    key: \"__init\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __init() {\n      this.name = FunctionToString.id;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setupOnce\",\n    value: function setupOnce() {\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      originalFunctionToString = Function.prototype.toString;\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      Function.prototype.toString = function () {\n        var context = getOriginalFunction(this) || this;\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        return originalFunctionToString.apply(context, args);\n      };\n    }\n  }], [{\n    key: \"__initStatic\",\n    value: function __initStatic() {\n      this.id = 'FunctionToString';\n    }\n  }]);\n  return FunctionToString;\n}();\nFunctionToString.__initStatic();\nexport { FunctionToString };","map":{"version":3,"sources":["../../../src/integrations/functiontostring.ts"],"names":[],"mappings":";;;AAGA,IAAA,wBAAA;;AAEA;AAAA,IACA,gBAAA;EAAA,4BAAA;IAAA;IAAA,gBAAA,CAAA,SAAA,CAAA,MAAA,CAAA,IAAA,CAAA,IAAA,CAAA;EAAA;EACA;AACA;AACA;EAFA;IAAA;IAAA;IAKA;AACA;AACA;IACA,kBAAA;MAAA,IAAA,CAAA,IAAA,GAAA,gBAAA,CAAA,EAAA;IAAA;;IAEA;AACA;AACA;EAFA;IAAA;IAAA,OAGA,qBAAA;MACA;MACA,wBAAA,GAAA,QAAA,CAAA,SAAA,CAAA,QAAA;;MAEA;MACA,QAAA,CAAA,SAAA,CAAA,QAAA,GAAA,YAAA;QACA,IAAA,OAAA,GAAA,mBAAA,CAAA,IAAA,CAAA,IAAA,IAAA;QAAA,kCADA,IAAA;UAAA,IAAA;QAAA;QAEA,OAAA,wBAAA,CAAA,KAAA,CAAA,OAAA,EAAA,IAAA,CAAA;MACA,CAAA;IACA;EAAA;IAAA;IAAA,OAnBA,wBAAA;MAAA,IAAA,CAAA,EAAA,GAAA,kBAAA;IAAA;EAAA;EAAA;AAAA;AAoBA,gBAAA,CAAA,YAAA,EAAA","sourcesContent":["import { Integration, WrappedFunction } from '@sentry/types';\nimport { getOriginalFunction } from '@sentry/utils';\n\nlet originalFunctionToString: () => void;\n\n/** Patch toString calls to return proper name for wrapped functions */\nexport class FunctionToString implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'FunctionToString';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = FunctionToString.id;\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    originalFunctionToString = Function.prototype.toString;\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Function.prototype.toString = function (this: WrappedFunction, ...args: any[]): string {\n      const context = getOriginalFunction(this) || this;\n      return originalFunctionToString.apply(context, args);\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}