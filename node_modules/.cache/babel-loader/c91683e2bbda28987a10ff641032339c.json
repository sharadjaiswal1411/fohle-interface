{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: !0\n});\nvar e,\n  t = (e = require(\"tiny-invariant\")) && \"object\" == typeof e && \"default\" in e ? e.default : e,\n  n = require(\"@ethersproject/hash\"),\n  r = require(\"@ethersproject/bignumber\"),\n  a = require(\"@ethersproject/contracts\"),\n  i = r.BigNumber.from(\"0xffffffffffff\"),\n  s = r.BigNumber.from(\"0xffffffffffffffffffffffffffffffffffffffff\"),\n  o = r.BigNumber.from(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\"),\n  p = s,\n  u = i,\n  y = i,\n  d = o,\n  l = o,\n  m = o,\n  c = r.BigNumber.from(0);\nfunction f(e, t) {\n  return {\n    name: \"Permit2\",\n    chainId: t,\n    verifyingContract: e\n  };\n}\nvar h = [{\n    name: \"token\",\n    type: \"address\"\n  }, {\n    name: \"amount\",\n    type: \"uint160\"\n  }, {\n    name: \"expiration\",\n    type: \"uint48\"\n  }, {\n    name: \"nonce\",\n    type: \"uint48\"\n  }],\n  T = {\n    PermitSingle: [{\n      name: \"details\",\n      type: \"PermitDetails\"\n    }, {\n      name: \"spender\",\n      type: \"address\"\n    }, {\n      name: \"sigDeadline\",\n      type: \"uint256\"\n    }],\n    PermitDetails: h\n  },\n  v = {\n    PermitBatch: [{\n      name: \"details\",\n      type: \"PermitDetails[]\"\n    }, {\n      name: \"spender\",\n      type: \"address\"\n    }, {\n      name: \"sigDeadline\",\n      type: \"uint256\"\n    }],\n    PermitDetails: h\n  },\n  g = function () {\n    function e() {}\n    return e.getPermitData = function (e, n, r) {\n      m.gte(e.sigDeadline) || t(!1);\n      var a = f(n, r);\n      return function (e) {\n        return !Array.isArray(e.details);\n      }(e) ? (w(e.details), {\n        domain: a,\n        types: T,\n        values: e\n      }) : (e.details.forEach(w), {\n        domain: a,\n        types: v,\n        values: e\n      });\n    }, e.hash = function (t, r, a) {\n      var i = e.getPermitData(t, r, a);\n      return n._TypedDataEncoder.hash(i.domain, i.types, i.values);\n    }, e;\n  }();\nfunction w(e) {\n  y.gte(e.nonce) || t(!1), p.gte(e.amount) || t(!1), u.gte(e.expiration) || t(!1);\n}\nfunction x() {\n  x = function x() {\n    return e;\n  };\n  var e = {},\n    t = Object.prototype,\n    n = t.hasOwnProperty,\n    r = \"function\" == typeof Symbol ? Symbol : {},\n    a = r.iterator || \"@@iterator\",\n    i = r.asyncIterator || \"@@asyncIterator\",\n    s = r.toStringTag || \"@@toStringTag\";\n  function o(e, t, n) {\n    return Object.defineProperty(e, t, {\n      value: n,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }), e[t];\n  }\n  try {\n    o({}, \"\");\n  } catch (e) {\n    o = function o(e, t, n) {\n      return e[t] = n;\n    };\n  }\n  function p(e, t, n, r) {\n    var a = Object.create((t && t.prototype instanceof d ? t : d).prototype),\n      i = new k(r || []);\n    return a._invoke = function (e, t, n) {\n      var r = \"suspendedStart\";\n      return function (a, i) {\n        if (\"executing\" === r) throw new Error(\"Generator is already running\");\n        if (\"completed\" === r) {\n          if (\"throw\" === a) throw i;\n          return {\n            value: void 0,\n            done: !0\n          };\n        }\n        for (n.method = a, n.arg = i;;) {\n          var s = n.delegate;\n          if (s) {\n            var o = w(s, n);\n            if (o) {\n              if (o === y) continue;\n              return o;\n            }\n          }\n          if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) {\n            if (\"suspendedStart\" === r) throw r = \"completed\", n.arg;\n            n.dispatchException(n.arg);\n          } else \"return\" === n.method && n.abrupt(\"return\", n.arg);\n          r = \"executing\";\n          var p = u(e, t, n);\n          if (\"normal\" === p.type) {\n            if (r = n.done ? \"completed\" : \"suspendedYield\", p.arg === y) continue;\n            return {\n              value: p.arg,\n              done: n.done\n            };\n          }\n          \"throw\" === p.type && (r = \"completed\", n.method = \"throw\", n.arg = p.arg);\n        }\n      };\n    }(e, n, i), a;\n  }\n  function u(e, t, n) {\n    try {\n      return {\n        type: \"normal\",\n        arg: e.call(t, n)\n      };\n    } catch (e) {\n      return {\n        type: \"throw\",\n        arg: e\n      };\n    }\n  }\n  e.wrap = p;\n  var y = {};\n  function d() {}\n  function l() {}\n  function m() {}\n  var c = {};\n  o(c, a, function () {\n    return this;\n  });\n  var f = Object.getPrototypeOf,\n    h = f && f(f(A([])));\n  h && h !== t && n.call(h, a) && (c = h);\n  var T = m.prototype = d.prototype = Object.create(c);\n  function v(e) {\n    [\"next\", \"throw\", \"return\"].forEach(function (t) {\n      o(e, t, function (e) {\n        return this._invoke(t, e);\n      });\n    });\n  }\n  function g(e, t) {\n    var r;\n    this._invoke = function (a, i) {\n      function s() {\n        return new t(function (r, s) {\n          !function r(a, i, s, o) {\n            var p = u(e[a], e, i);\n            if (\"throw\" !== p.type) {\n              var y = p.arg,\n                d = y.value;\n              return d && \"object\" == typeof d && n.call(d, \"__await\") ? t.resolve(d.__await).then(function (e) {\n                r(\"next\", e, s, o);\n              }, function (e) {\n                r(\"throw\", e, s, o);\n              }) : t.resolve(d).then(function (e) {\n                y.value = e, s(y);\n              }, function (e) {\n                return r(\"throw\", e, s, o);\n              });\n            }\n            o(p.arg);\n          }(a, i, r, s);\n        });\n      }\n      return r = r ? r.then(s, s) : s();\n    };\n  }\n  function w(e, t) {\n    var n = e.iterator[t.method];\n    if (void 0 === n) {\n      if (t.delegate = null, \"throw\" === t.method) {\n        if (e.iterator.return && (t.method = \"return\", t.arg = void 0, w(e, t), \"throw\" === t.method)) return y;\n        t.method = \"throw\", t.arg = new TypeError(\"The iterator does not provide a 'throw' method\");\n      }\n      return y;\n    }\n    var r = u(n, e.iterator, t.arg);\n    if (\"throw\" === r.type) return t.method = \"throw\", t.arg = r.arg, t.delegate = null, y;\n    var a = r.arg;\n    return a ? a.done ? (t[e.resultName] = a.value, t.next = e.nextLoc, \"return\" !== t.method && (t.method = \"next\", t.arg = void 0), t.delegate = null, y) : a : (t.method = \"throw\", t.arg = new TypeError(\"iterator result is not an object\"), t.delegate = null, y);\n  }\n  function b(e) {\n    var t = {\n      tryLoc: e[0]\n    };\n    1 in e && (t.catchLoc = e[1]), 2 in e && (t.finallyLoc = e[2], t.afterLoc = e[3]), this.tryEntries.push(t);\n  }\n  function P(e) {\n    var t = e.completion || {};\n    t.type = \"normal\", delete t.arg, e.completion = t;\n  }\n  function k(e) {\n    this.tryEntries = [{\n      tryLoc: \"root\"\n    }], e.forEach(b, this), this.reset(!0);\n  }\n  function A(e) {\n    if (e) {\n      var t = e[a];\n      if (t) return t.call(e);\n      if (\"function\" == typeof e.next) return e;\n      if (!isNaN(e.length)) {\n        var r = -1,\n          i = function t() {\n            for (; ++r < e.length;) {\n              if (n.call(e, r)) return t.value = e[r], t.done = !1, t;\n            }\n            return t.value = void 0, t.done = !0, t;\n          };\n        return i.next = i;\n      }\n    }\n    return {\n      next: E\n    };\n  }\n  function E() {\n    return {\n      value: void 0,\n      done: !0\n    };\n  }\n  return l.prototype = m, o(T, \"constructor\", m), o(m, \"constructor\", l), l.displayName = o(m, s, \"GeneratorFunction\"), e.isGeneratorFunction = function (e) {\n    var t = \"function\" == typeof e && e.constructor;\n    return !!t && (t === l || \"GeneratorFunction\" === (t.displayName || t.name));\n  }, e.mark = function (e) {\n    return Object.setPrototypeOf ? Object.setPrototypeOf(e, m) : (e.__proto__ = m, o(e, s, \"GeneratorFunction\")), e.prototype = Object.create(T), e;\n  }, e.awrap = function (e) {\n    return {\n      __await: e\n    };\n  }, v(g.prototype), o(g.prototype, i, function () {\n    return this;\n  }), e.AsyncIterator = g, e.async = function (t, n, r, a, i) {\n    void 0 === i && (i = Promise);\n    var s = new g(p(t, n, r, a), i);\n    return e.isGeneratorFunction(n) ? s : s.next().then(function (e) {\n      return e.done ? e.value : s.next();\n    });\n  }, v(T), o(T, s, \"Generator\"), o(T, a, function () {\n    return this;\n  }), o(T, \"toString\", function () {\n    return \"[object Generator]\";\n  }), e.keys = function (e) {\n    var t = [];\n    for (var n in e) {\n      t.push(n);\n    }\n    return t.reverse(), function n() {\n      for (; t.length;) {\n        var r = t.pop();\n        if (r in e) return n.value = r, n.done = !1, n;\n      }\n      return n.done = !0, n;\n    };\n  }, e.values = A, k.prototype = {\n    constructor: k,\n    reset: function reset(e) {\n      if (this.prev = 0, this.next = 0, this.sent = this._sent = void 0, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = void 0, this.tryEntries.forEach(P), !e) for (var t in this) {\n        \"t\" === t.charAt(0) && n.call(this, t) && !isNaN(+t.slice(1)) && (this[t] = void 0);\n      }\n    },\n    stop: function stop() {\n      this.done = !0;\n      var e = this.tryEntries[0].completion;\n      if (\"throw\" === e.type) throw e.arg;\n      return this.rval;\n    },\n    dispatchException: function dispatchException(e) {\n      if (this.done) throw e;\n      var t = this;\n      function r(n, r) {\n        return s.type = \"throw\", s.arg = e, t.next = n, r && (t.method = \"next\", t.arg = void 0), !!r;\n      }\n      for (var a = this.tryEntries.length - 1; a >= 0; --a) {\n        var i = this.tryEntries[a],\n          s = i.completion;\n        if (\"root\" === i.tryLoc) return r(\"end\");\n        if (i.tryLoc <= this.prev) {\n          var o = n.call(i, \"catchLoc\"),\n            p = n.call(i, \"finallyLoc\");\n          if (o && p) {\n            if (this.prev < i.catchLoc) return r(i.catchLoc, !0);\n            if (this.prev < i.finallyLoc) return r(i.finallyLoc);\n          } else if (o) {\n            if (this.prev < i.catchLoc) return r(i.catchLoc, !0);\n          } else {\n            if (!p) throw new Error(\"try statement without catch or finally\");\n            if (this.prev < i.finallyLoc) return r(i.finallyLoc);\n          }\n        }\n      }\n    },\n    abrupt: function abrupt(e, t) {\n      for (var r = this.tryEntries.length - 1; r >= 0; --r) {\n        var a = this.tryEntries[r];\n        if (a.tryLoc <= this.prev && n.call(a, \"finallyLoc\") && this.prev < a.finallyLoc) {\n          var i = a;\n          break;\n        }\n      }\n      i && (\"break\" === e || \"continue\" === e) && i.tryLoc <= t && t <= i.finallyLoc && (i = null);\n      var s = i ? i.completion : {};\n      return s.type = e, s.arg = t, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(s);\n    },\n    complete: function complete(e, t) {\n      if (\"throw\" === e.type) throw e.arg;\n      return \"break\" === e.type || \"continue\" === e.type ? this.next = e.arg : \"return\" === e.type ? (this.rval = this.arg = e.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === e.type && t && (this.next = t), y;\n    },\n    finish: function finish(e) {\n      for (var t = this.tryEntries.length - 1; t >= 0; --t) {\n        var n = this.tryEntries[t];\n        if (n.finallyLoc === e) return this.complete(n.completion, n.afterLoc), P(n), y;\n      }\n    },\n    catch: function _catch(e) {\n      for (var t = this.tryEntries.length - 1; t >= 0; --t) {\n        var n = this.tryEntries[t];\n        if (n.tryLoc === e) {\n          var r = n.completion;\n          if (\"throw\" === r.type) {\n            var a = r.arg;\n            P(n);\n          }\n          return a;\n        }\n      }\n      throw new Error(\"illegal catch attempt\");\n    },\n    delegateYield: function delegateYield(e, t, n) {\n      return this.delegate = {\n        iterator: A(e),\n        resultName: t,\n        nextLoc: n\n      }, \"next\" === this.method && (this.arg = void 0), y;\n    }\n  }, e;\n}\nfunction b(e, t, n, r, a, i, s) {\n  try {\n    var o = e[i](s),\n      p = o.value;\n  } catch (e) {\n    return void n(e);\n  }\n  o.done ? t(p) : Promise.resolve(p).then(r, a);\n}\nfunction P(e) {\n  return function () {\n    var t = this,\n      n = arguments;\n    return new Promise(function (r, a) {\n      var i = e.apply(t, n);\n      function s(e) {\n        b(i, r, a, s, o, \"next\", e);\n      }\n      function o(e) {\n        b(i, r, a, s, o, \"throw\", e);\n      }\n      s(void 0);\n    });\n  };\n}\nfunction k() {\n  return (k = Object.assign ? Object.assign.bind() : function (e) {\n    for (var t = 1; t < arguments.length; t++) {\n      var n = arguments[t];\n      for (var r in n) {\n        Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);\n      }\n    }\n    return e;\n  }).apply(this, arguments);\n}\nvar A = [{\n    name: \"token\",\n    type: \"address\"\n  }, {\n    name: \"amount\",\n    type: \"uint256\"\n  }],\n  E = {\n    PermitTransferFrom: [{\n      name: \"permitted\",\n      type: \"TokenPermissions\"\n    }, {\n      name: \"spender\",\n      type: \"address\"\n    }, {\n      name: \"nonce\",\n      type: \"uint256\"\n    }, {\n      name: \"deadline\",\n      type: \"uint256\"\n    }],\n    TokenPermissions: A\n  },\n  S = {\n    PermitBatchTransferFrom: [{\n      name: \"permitted\",\n      type: \"TokenPermissions[]\"\n    }, {\n      name: \"spender\",\n      type: \"address\"\n    }, {\n      name: \"nonce\",\n      type: \"uint256\"\n    }, {\n      name: \"deadline\",\n      type: \"uint256\"\n    }],\n    TokenPermissions: A\n  },\n  D = function () {\n    function e() {}\n    return e.getPermitData = function (e, n, r, a) {\n      m.gte(e.deadline) || t(!1), l.gte(e.nonce) || t(!1);\n      var i = f(n, r);\n      return function (e) {\n        return !Array.isArray(e.permitted);\n      }(e) ? (I(e.permitted), {\n        domain: i,\n        types: a ? function (e) {\n          return k({\n            PermitWitnessTransferFrom: [{\n              name: \"permitted\",\n              type: \"TokenPermissions\"\n            }, {\n              name: \"spender\",\n              type: \"address\"\n            }, {\n              name: \"nonce\",\n              type: \"uint256\"\n            }, {\n              name: \"deadline\",\n              type: \"uint256\"\n            }, {\n              name: \"witness\",\n              type: e.witnessTypeName\n            }],\n            TokenPermissions: A\n          }, e.witnessType);\n        }(a) : E,\n        values: a ? Object.assign(e, {\n          witness: a.witness\n        }) : e\n      }) : (e.permitted.forEach(I), {\n        domain: i,\n        types: a ? function (e) {\n          return k({\n            PermitBatchWitnessTransferFrom: [{\n              name: \"permitted\",\n              type: \"TokenPermissions[]\"\n            }, {\n              name: \"spender\",\n              type: \"address\"\n            }, {\n              name: \"nonce\",\n              type: \"uint256\"\n            }, {\n              name: \"deadline\",\n              type: \"uint256\"\n            }, {\n              name: \"witness\",\n              type: e.witnessTypeName\n            }],\n            TokenPermissions: A\n          }, e.witnessType);\n        }(a) : S,\n        values: a ? Object.assign(e, {\n          witness: a.witness\n        }) : e\n      });\n    }, e.hash = function (t, r, a, i) {\n      var s = e.getPermitData(t, r, a, i);\n      return n._TypedDataEncoder.hash(s.domain, s.types, s.values);\n    }, e;\n  }();\nfunction I(e) {\n  d.gte(e.amount) || t(!1);\n}\nvar L = [{\n  inputs: [],\n  name: \"AllowanceExpired\",\n  type: \"error\"\n}, {\n  inputs: [],\n  name: \"ExcessiveInvalidation\",\n  type: \"error\"\n}, {\n  inputs: [],\n  name: \"InsufficientAllowance\",\n  type: \"error\"\n}, {\n  inputs: [],\n  name: \"InvalidAmount\",\n  type: \"error\"\n}, {\n  inputs: [],\n  name: \"InvalidContractSignature\",\n  type: \"error\"\n}, {\n  inputs: [],\n  name: \"InvalidNonce\",\n  type: \"error\"\n}, {\n  inputs: [],\n  name: \"InvalidSignature\",\n  type: \"error\"\n}, {\n  inputs: [],\n  name: \"InvalidSigner\",\n  type: \"error\"\n}, {\n  inputs: [],\n  name: \"LengthMismatch\",\n  type: \"error\"\n}, {\n  inputs: [],\n  name: \"NotSpender\",\n  type: \"error\"\n}, {\n  inputs: [],\n  name: \"SignatureExpired\",\n  type: \"error\"\n}, {\n  anonymous: !1,\n  inputs: [{\n    indexed: !0,\n    internalType: \"address\",\n    name: \"owner\",\n    type: \"address\"\n  }, {\n    indexed: !0,\n    internalType: \"address\",\n    name: \"token\",\n    type: \"address\"\n  }, {\n    indexed: !0,\n    internalType: \"address\",\n    name: \"spender\",\n    type: \"address\"\n  }, {\n    indexed: !1,\n    internalType: \"uint160\",\n    name: \"amount\",\n    type: \"uint160\"\n  }, {\n    indexed: !1,\n    internalType: \"uint48\",\n    name: \"expiration\",\n    type: \"uint48\"\n  }],\n  name: \"Approval\",\n  type: \"event\"\n}, {\n  anonymous: !1,\n  inputs: [{\n    indexed: !0,\n    internalType: \"address\",\n    name: \"owner\",\n    type: \"address\"\n  }, {\n    indexed: !1,\n    internalType: \"address\",\n    name: \"token\",\n    type: \"address\"\n  }, {\n    indexed: !1,\n    internalType: \"address\",\n    name: \"spender\",\n    type: \"address\"\n  }],\n  name: \"Lockdown\",\n  type: \"event\"\n}, {\n  anonymous: !1,\n  inputs: [{\n    indexed: !0,\n    internalType: \"address\",\n    name: \"owner\",\n    type: \"address\"\n  }, {\n    indexed: !0,\n    internalType: \"address\",\n    name: \"token\",\n    type: \"address\"\n  }, {\n    indexed: !0,\n    internalType: \"address\",\n    name: \"spender\",\n    type: \"address\"\n  }, {\n    indexed: !1,\n    internalType: \"uint48\",\n    name: \"newNonce\",\n    type: \"uint48\"\n  }, {\n    indexed: !1,\n    internalType: \"uint48\",\n    name: \"oldNonce\",\n    type: \"uint48\"\n  }],\n  name: \"NonceInvalidation\",\n  type: \"event\"\n}, {\n  anonymous: !1,\n  inputs: [{\n    indexed: !0,\n    internalType: \"address\",\n    name: \"owner\",\n    type: \"address\"\n  }, {\n    indexed: !1,\n    internalType: \"uint256\",\n    name: \"word\",\n    type: \"uint256\"\n  }, {\n    indexed: !1,\n    internalType: \"uint256\",\n    name: \"mask\",\n    type: \"uint256\"\n  }],\n  name: \"UnorderedNonceInvalidation\",\n  type: \"event\"\n}, {\n  inputs: [],\n  name: \"DOMAIN_SEPARATOR\",\n  outputs: [{\n    internalType: \"bytes32\",\n    name: \"\",\n    type: \"bytes32\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  inputs: [{\n    internalType: \"address\",\n    name: \"\",\n    type: \"address\"\n  }, {\n    internalType: \"address\",\n    name: \"\",\n    type: \"address\"\n  }, {\n    internalType: \"address\",\n    name: \"\",\n    type: \"address\"\n  }],\n  name: \"allowance\",\n  outputs: [{\n    internalType: \"uint160\",\n    name: \"amount\",\n    type: \"uint160\"\n  }, {\n    internalType: \"uint48\",\n    name: \"expiration\",\n    type: \"uint48\"\n  }, {\n    internalType: \"uint48\",\n    name: \"nonce\",\n    type: \"uint48\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  inputs: [{\n    internalType: \"address\",\n    name: \"token\",\n    type: \"address\"\n  }, {\n    internalType: \"address\",\n    name: \"spender\",\n    type: \"address\"\n  }, {\n    internalType: \"uint160\",\n    name: \"amount\",\n    type: \"uint160\"\n  }, {\n    internalType: \"uint48\",\n    name: \"expiration\",\n    type: \"uint48\"\n  }],\n  name: \"approve\",\n  outputs: [],\n  stateMutability: \"nonpayable\",\n  type: \"function\"\n}, {\n  inputs: [{\n    internalType: \"address\",\n    name: \"token\",\n    type: \"address\"\n  }, {\n    internalType: \"address\",\n    name: \"spender\",\n    type: \"address\"\n  }, {\n    internalType: \"uint48\",\n    name: \"newNonce\",\n    type: \"uint48\"\n  }],\n  name: \"invalidateNonces\",\n  outputs: [],\n  stateMutability: \"nonpayable\",\n  type: \"function\"\n}, {\n  inputs: [{\n    internalType: \"uint256\",\n    name: \"wordPos\",\n    type: \"uint256\"\n  }, {\n    internalType: \"uint256\",\n    name: \"mask\",\n    type: \"uint256\"\n  }],\n  name: \"invalidateUnorderedNonces\",\n  outputs: [],\n  stateMutability: \"nonpayable\",\n  type: \"function\"\n}, {\n  inputs: [{\n    components: [{\n      internalType: \"address\",\n      name: \"token\",\n      type: \"address\"\n    }, {\n      internalType: \"address\",\n      name: \"spender\",\n      type: \"address\"\n    }],\n    internalType: \"struct IAllowanceTransfer.TokenSpenderPair[]\",\n    name: \"approvals\",\n    type: \"tuple[]\"\n  }],\n  name: \"lockdown\",\n  outputs: [],\n  stateMutability: \"nonpayable\",\n  type: \"function\"\n}, {\n  inputs: [{\n    internalType: \"address\",\n    name: \"\",\n    type: \"address\"\n  }, {\n    internalType: \"uint256\",\n    name: \"\",\n    type: \"uint256\"\n  }],\n  name: \"nonceBitmap\",\n  outputs: [{\n    internalType: \"uint256\",\n    name: \"\",\n    type: \"uint256\"\n  }],\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  inputs: [{\n    internalType: \"address\",\n    name: \"owner\",\n    type: \"address\"\n  }, {\n    components: [{\n      components: [{\n        internalType: \"address\",\n        name: \"token\",\n        type: \"address\"\n      }, {\n        internalType: \"uint160\",\n        name: \"amount\",\n        type: \"uint160\"\n      }, {\n        internalType: \"uint48\",\n        name: \"expiration\",\n        type: \"uint48\"\n      }, {\n        internalType: \"uint48\",\n        name: \"nonce\",\n        type: \"uint48\"\n      }],\n      internalType: \"struct IAllowanceTransfer.PermitDetails[]\",\n      name: \"details\",\n      type: \"tuple[]\"\n    }, {\n      internalType: \"address\",\n      name: \"spender\",\n      type: \"address\"\n    }, {\n      internalType: \"uint256\",\n      name: \"sigDeadline\",\n      type: \"uint256\"\n    }],\n    internalType: \"struct IAllowanceTransfer.PermitBatch\",\n    name: \"permitBatch\",\n    type: \"tuple\"\n  }, {\n    internalType: \"bytes\",\n    name: \"signature\",\n    type: \"bytes\"\n  }],\n  name: \"permit\",\n  outputs: [],\n  stateMutability: \"nonpayable\",\n  type: \"function\"\n}, {\n  inputs: [{\n    internalType: \"address\",\n    name: \"owner\",\n    type: \"address\"\n  }, {\n    components: [{\n      components: [{\n        internalType: \"address\",\n        name: \"token\",\n        type: \"address\"\n      }, {\n        internalType: \"uint160\",\n        name: \"amount\",\n        type: \"uint160\"\n      }, {\n        internalType: \"uint48\",\n        name: \"expiration\",\n        type: \"uint48\"\n      }, {\n        internalType: \"uint48\",\n        name: \"nonce\",\n        type: \"uint48\"\n      }],\n      internalType: \"struct IAllowanceTransfer.PermitDetails\",\n      name: \"details\",\n      type: \"tuple\"\n    }, {\n      internalType: \"address\",\n      name: \"spender\",\n      type: \"address\"\n    }, {\n      internalType: \"uint256\",\n      name: \"sigDeadline\",\n      type: \"uint256\"\n    }],\n    internalType: \"struct IAllowanceTransfer.PermitSingle\",\n    name: \"permitSingle\",\n    type: \"tuple\"\n  }, {\n    internalType: \"bytes\",\n    name: \"signature\",\n    type: \"bytes\"\n  }],\n  name: \"permit\",\n  outputs: [],\n  stateMutability: \"nonpayable\",\n  type: \"function\"\n}, {\n  inputs: [{\n    components: [{\n      components: [{\n        internalType: \"address\",\n        name: \"token\",\n        type: \"address\"\n      }, {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\"\n      }],\n      internalType: \"struct ISignatureTransfer.TokenPermissions[]\",\n      name: \"permitted\",\n      type: \"tuple[]\"\n    }, {\n      internalType: \"uint256\",\n      name: \"nonce\",\n      type: \"uint256\"\n    }, {\n      internalType: \"uint256\",\n      name: \"deadline\",\n      type: \"uint256\"\n    }],\n    internalType: \"struct ISignatureTransfer.PermitBatchTransferFrom\",\n    name: \"permit\",\n    type: \"tuple\"\n  }, {\n    internalType: \"address\",\n    name: \"owner\",\n    type: \"address\"\n  }, {\n    components: [{\n      internalType: \"address\",\n      name: \"to\",\n      type: \"address\"\n    }, {\n      internalType: \"uint256\",\n      name: \"requestedAmount\",\n      type: \"uint256\"\n    }],\n    internalType: \"struct ISignatureTransfer.SignatureTransferDetails[]\",\n    name: \"transferDetails\",\n    type: \"tuple[]\"\n  }, {\n    internalType: \"bytes\",\n    name: \"signature\",\n    type: \"bytes\"\n  }],\n  name: \"permitTransferFrom\",\n  outputs: [],\n  stateMutability: \"nonpayable\",\n  type: \"function\"\n}, {\n  inputs: [{\n    components: [{\n      components: [{\n        internalType: \"address\",\n        name: \"token\",\n        type: \"address\"\n      }, {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\"\n      }],\n      internalType: \"struct ISignatureTransfer.TokenPermissions\",\n      name: \"permitted\",\n      type: \"tuple\"\n    }, {\n      internalType: \"uint256\",\n      name: \"nonce\",\n      type: \"uint256\"\n    }, {\n      internalType: \"uint256\",\n      name: \"deadline\",\n      type: \"uint256\"\n    }],\n    internalType: \"struct ISignatureTransfer.PermitTransferFrom\",\n    name: \"permit\",\n    type: \"tuple\"\n  }, {\n    internalType: \"address\",\n    name: \"owner\",\n    type: \"address\"\n  }, {\n    internalType: \"address\",\n    name: \"to\",\n    type: \"address\"\n  }, {\n    internalType: \"uint256\",\n    name: \"requestedAmount\",\n    type: \"uint256\"\n  }, {\n    internalType: \"bytes\",\n    name: \"signature\",\n    type: \"bytes\"\n  }],\n  name: \"permitTransferFrom\",\n  outputs: [],\n  stateMutability: \"nonpayable\",\n  type: \"function\"\n}, {\n  inputs: [{\n    components: [{\n      components: [{\n        internalType: \"address\",\n        name: \"token\",\n        type: \"address\"\n      }, {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\"\n      }],\n      internalType: \"struct ISignatureTransfer.TokenPermissions\",\n      name: \"permitted\",\n      type: \"tuple\"\n    }, {\n      internalType: \"uint256\",\n      name: \"nonce\",\n      type: \"uint256\"\n    }, {\n      internalType: \"uint256\",\n      name: \"deadline\",\n      type: \"uint256\"\n    }],\n    internalType: \"struct ISignatureTransfer.PermitTransferFrom\",\n    name: \"permit\",\n    type: \"tuple\"\n  }, {\n    internalType: \"address\",\n    name: \"owner\",\n    type: \"address\"\n  }, {\n    internalType: \"address\",\n    name: \"to\",\n    type: \"address\"\n  }, {\n    internalType: \"uint256\",\n    name: \"requestedAmount\",\n    type: \"uint256\"\n  }, {\n    internalType: \"bytes32\",\n    name: \"witness\",\n    type: \"bytes32\"\n  }, {\n    internalType: \"string\",\n    name: \"witnessTypeName\",\n    type: \"string\"\n  }, {\n    internalType: \"string\",\n    name: \"witnessType\",\n    type: \"string\"\n  }, {\n    internalType: \"bytes\",\n    name: \"signature\",\n    type: \"bytes\"\n  }],\n  name: \"permitWitnessTransferFrom\",\n  outputs: [],\n  stateMutability: \"nonpayable\",\n  type: \"function\"\n}, {\n  inputs: [{\n    components: [{\n      components: [{\n        internalType: \"address\",\n        name: \"token\",\n        type: \"address\"\n      }, {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\"\n      }],\n      internalType: \"struct ISignatureTransfer.TokenPermissions[]\",\n      name: \"permitted\",\n      type: \"tuple[]\"\n    }, {\n      internalType: \"uint256\",\n      name: \"nonce\",\n      type: \"uint256\"\n    }, {\n      internalType: \"uint256\",\n      name: \"deadline\",\n      type: \"uint256\"\n    }],\n    internalType: \"struct ISignatureTransfer.PermitBatchTransferFrom\",\n    name: \"permit\",\n    type: \"tuple\"\n  }, {\n    internalType: \"address\",\n    name: \"owner\",\n    type: \"address\"\n  }, {\n    components: [{\n      internalType: \"address\",\n      name: \"to\",\n      type: \"address\"\n    }, {\n      internalType: \"uint256\",\n      name: \"requestedAmount\",\n      type: \"uint256\"\n    }],\n    internalType: \"struct ISignatureTransfer.SignatureTransferDetails[]\",\n    name: \"transferDetails\",\n    type: \"tuple[]\"\n  }, {\n    internalType: \"bytes32\",\n    name: \"witness\",\n    type: \"bytes32\"\n  }, {\n    internalType: \"string\",\n    name: \"witnessTypeName\",\n    type: \"string\"\n  }, {\n    internalType: \"string\",\n    name: \"witnessType\",\n    type: \"string\"\n  }, {\n    internalType: \"bytes\",\n    name: \"signature\",\n    type: \"bytes\"\n  }],\n  name: \"permitWitnessTransferFrom\",\n  outputs: [],\n  stateMutability: \"nonpayable\",\n  type: \"function\"\n}, {\n  inputs: [{\n    internalType: \"address\",\n    name: \"token\",\n    type: \"address\"\n  }, {\n    internalType: \"address\",\n    name: \"from\",\n    type: \"address\"\n  }, {\n    internalType: \"address\",\n    name: \"to\",\n    type: \"address\"\n  }, {\n    internalType: \"uint160\",\n    name: \"amount\",\n    type: \"uint160\"\n  }],\n  name: \"transferFrom\",\n  outputs: [],\n  stateMutability: \"nonpayable\",\n  type: \"function\"\n}, {\n  inputs: [{\n    internalType: \"address\",\n    name: \"from\",\n    type: \"address\"\n  }, {\n    components: [{\n      internalType: \"address\",\n      name: \"token\",\n      type: \"address\"\n    }, {\n      internalType: \"uint160\",\n      name: \"amount\",\n      type: \"uint160\"\n    }, {\n      internalType: \"address\",\n      name: \"to\",\n      type: \"address\"\n    }],\n    internalType: \"struct IAllowanceTransfer.AllowanceTransferDetails[]\",\n    name: \"transferDetails\",\n    type: \"tuple[]\"\n  }],\n  name: \"transferFrom\",\n  outputs: [],\n  stateMutability: \"nonpayable\",\n  type: \"function\"\n}];\nexports.AllowanceProvider = function () {\n  function e(e, t) {\n    this.provider = e, this.permit2Address = t, this.permit2 = new a.Contract(this.permit2Address, L, this.provider);\n  }\n  var t = e.prototype;\n  return t.getAllowanceData = function () {\n    var e = P(x().mark(function e(t, n, r) {\n      return x().wrap(function (e) {\n        for (;;) {\n          switch (e.prev = e.next) {\n            case 0:\n              return e.next = 2, this.permit2.allowance(n, t, r);\n            case 2:\n              return e.abrupt(\"return\", e.sent);\n            case 3:\n            case \"end\":\n              return e.stop();\n          }\n        }\n      }, e, this);\n    }));\n    return function (t, n, r) {\n      return e.apply(this, arguments);\n    };\n  }(), t.getAllowance = function () {\n    var e = P(x().mark(function e(t, n, r) {\n      return x().wrap(function (e) {\n        for (;;) {\n          switch (e.prev = e.next) {\n            case 0:\n              return e.next = 2, this.getAllowanceData(t, n, r);\n            case 2:\n              return e.abrupt(\"return\", e.sent.amount);\n            case 3:\n            case \"end\":\n              return e.stop();\n          }\n        }\n      }, e, this);\n    }));\n    return function (t, n, r) {\n      return e.apply(this, arguments);\n    };\n  }(), t.getNonce = function () {\n    var e = P(x().mark(function e(t, n, r) {\n      return x().wrap(function (e) {\n        for (;;) {\n          switch (e.prev = e.next) {\n            case 0:\n              return e.next = 2, this.getAllowanceData(t, n, r);\n            case 2:\n              return e.abrupt(\"return\", e.sent.nonce);\n            case 3:\n            case \"end\":\n              return e.stop();\n          }\n        }\n      }, e, this);\n    }));\n    return function (t, n, r) {\n      return e.apply(this, arguments);\n    };\n  }(), t.getExpiration = function () {\n    var e = P(x().mark(function e(t, n, r) {\n      return x().wrap(function (e) {\n        for (;;) {\n          switch (e.prev = e.next) {\n            case 0:\n              return e.next = 2, this.getAllowanceData(t, n, r);\n            case 2:\n              return e.abrupt(\"return\", e.sent.expiration);\n            case 3:\n            case \"end\":\n              return e.stop();\n          }\n        }\n      }, e, this);\n    }));\n    return function (t, n, r) {\n      return e.apply(this, arguments);\n    };\n  }(), e;\n}(), exports.AllowanceTransfer = g, exports.InstantExpiration = c, exports.MaxAllowanceExpiration = u, exports.MaxAllowanceTransferAmount = p, exports.MaxOrderedNonce = y, exports.MaxSigDeadline = m, exports.MaxSignatureTransferAmount = d, exports.MaxUint160 = s, exports.MaxUint256 = o, exports.MaxUint48 = i, exports.MaxUnorderedNonce = l, exports.PERMIT2_ADDRESS = \"0x000000000022D473030F116dDEE9F6B43aC78BA3\", exports.SignatureTransfer = D;","map":{"version":3,"sources":["../src/constants.ts","../src/domain.ts","../src/allowanceTransfer.ts","../src/signatureTransfer.ts","../src/providers/AllowanceProvider.ts"],"names":["MaxUint48","BigNumber","from","MaxUint160","MaxUint256","MaxAllowanceTransferAmount","MaxAllowanceExpiration","MaxOrderedNonce","MaxSignatureTransferAmount","MaxUnorderedNonce","MaxSigDeadline","InstantExpiration","permit2Domain","permit2Address","chainId","name","verifyingContract","PERMIT_DETAILS","type","PERMIT_TYPES","PermitSingle","PermitDetails","PERMIT_BATCH_TYPES","PermitBatch","permit","Array","isArray","details","AllowanceTransfer","getPermitData","invariant","gte","sigDeadline","domain","isPermit","validatePermitDetails","types","values","forEach","hash","_TypedDataEncoder","nonce","amount","expiration","TOKEN_PERMISSIONS","PERMIT_TRANSFER_FROM_TYPES","PermitTransferFrom","TokenPermissions","PERMIT_BATCH_TRANSFER_FROM_TYPES","PermitBatchTransferFrom","witness","PermitWitnessTransferFrom","witnessTypeName","witnessType","PermitBatchWitnessTransferFrom","permitted","SignatureTransfer","deadline","isPermitTransferFrom","validateTokenPermissions","permitTransferFromWithWitnessType","Object","assign","permitBatchTransferFromWithWitnessType","permissions","provider","this","permit2","Contract","Permit2Abi","getAllowanceData","token","owner","spender","allowance","getAllowance","getNonce","getExpiration"],"mappings":"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","sourcesContent":["import { BigNumber } from '@ethersproject/bignumber'\n\nexport const PERMIT2_ADDRESS = '0x000000000022D473030F116dDEE9F6B43aC78BA3'\n\nexport const MaxUint48 = BigNumber.from('0xffffffffffff')\nexport const MaxUint160 = BigNumber.from('0xffffffffffffffffffffffffffffffffffffffff')\nexport const MaxUint256 = BigNumber.from('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n\n// alias max types for their usages\n// allowance transfer types\nexport const MaxAllowanceTransferAmount = MaxUint160\nexport const MaxAllowanceExpiration = MaxUint48\nexport const MaxOrderedNonce = MaxUint48\n\n// signature transfer types\nexport const MaxSignatureTransferAmount = MaxUint256\nexport const MaxUnorderedNonce = MaxUint256\nexport const MaxSigDeadline = MaxUint256\n\nexport const InstantExpiration: BigNumber = BigNumber.from(0)\n","import { TypedDataDomain, TypedDataField } from '@ethersproject/abstract-signer'\n\nconst PERMIT2_DOMAIN_NAME = 'Permit2'\n\nexport function permit2Domain(permit2Address: string, chainId: number): TypedDataDomain {\n  return {\n    name: PERMIT2_DOMAIN_NAME,\n    chainId,\n    verifyingContract: permit2Address,\n  }\n}\n\nexport type PermitData = {\n  domain: TypedDataDomain\n  types: Record<string, TypedDataField[]>\n  values: any\n}\n","import invariant from 'tiny-invariant'\nimport { TypedDataDomain, TypedDataField } from '@ethersproject/abstract-signer'\nimport { BigNumberish } from '@ethersproject/bignumber'\nimport { _TypedDataEncoder } from '@ethersproject/hash'\nimport { MaxSigDeadline, MaxOrderedNonce, MaxAllowanceTransferAmount, MaxAllowanceExpiration } from './constants'\nimport { permit2Domain } from './domain'\n\nexport interface PermitDetails {\n  token: string\n  amount: BigNumberish\n  expiration: BigNumberish\n  nonce: BigNumberish\n}\n\nexport interface PermitSingle {\n  details: PermitDetails\n  spender: string\n  sigDeadline: BigNumberish\n}\n\nexport interface PermitBatch {\n  details: PermitDetails[]\n  spender: string\n  sigDeadline: BigNumberish\n}\n\nexport type PermitSingleData = {\n  domain: TypedDataDomain\n  types: Record<string, TypedDataField[]>\n  values: PermitSingle\n}\n\nexport type PermitBatchData = {\n  domain: TypedDataDomain\n  types: Record<string, TypedDataField[]>\n  values: PermitBatch\n}\n\nconst PERMIT_DETAILS = [\n  { name: 'token', type: 'address' },\n  { name: 'amount', type: 'uint160' },\n  { name: 'expiration', type: 'uint48' },\n  { name: 'nonce', type: 'uint48' },\n]\n\nconst PERMIT_TYPES = {\n  PermitSingle: [\n    { name: 'details', type: 'PermitDetails' },\n    { name: 'spender', type: 'address' },\n    { name: 'sigDeadline', type: 'uint256' },\n  ],\n  PermitDetails: PERMIT_DETAILS,\n}\n\nconst PERMIT_BATCH_TYPES = {\n  PermitBatch: [\n    { name: 'details', type: 'PermitDetails[]' },\n    { name: 'spender', type: 'address' },\n    { name: 'sigDeadline', type: 'uint256' },\n  ],\n  PermitDetails: PERMIT_DETAILS,\n}\n\nfunction isPermit(permit: PermitSingle | PermitBatch): permit is PermitSingle {\n  return !Array.isArray(permit.details)\n}\n\nexport abstract class AllowanceTransfer {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  // return the data to be sent in a eth_signTypedData RPC call\n  // for signing the given permit data\n  public static getPermitData(\n    permit: PermitSingle | PermitBatch,\n    permit2Address: string,\n    chainId: number\n  ): PermitSingleData | PermitBatchData {\n    invariant(MaxSigDeadline.gte(permit.sigDeadline), 'SIG_DEADLINE_OUT_OF_RANGE')\n\n    const domain = permit2Domain(permit2Address, chainId)\n    if (isPermit(permit)) {\n      validatePermitDetails(permit.details)\n      return {\n        domain,\n        types: PERMIT_TYPES,\n        values: permit,\n      }\n    } else {\n      permit.details.forEach(validatePermitDetails)\n      return {\n        domain,\n        types: PERMIT_BATCH_TYPES,\n        values: permit,\n      }\n    }\n  }\n\n  public static hash(permit: PermitSingle | PermitBatch, permit2Address: string, chainId: number): string {\n    const { domain, types, values } = AllowanceTransfer.getPermitData(permit, permit2Address, chainId)\n    return _TypedDataEncoder.hash(domain, types, values)\n  }\n}\n\nfunction validatePermitDetails(details: PermitDetails) {\n  invariant(MaxOrderedNonce.gte(details.nonce), 'NONCE_OUT_OF_RANGE')\n  invariant(MaxAllowanceTransferAmount.gte(details.amount), 'AMOUNT_OUT_OF_RANGE')\n  invariant(MaxAllowanceExpiration.gte(details.expiration), 'EXPIRATION_OUT_OF_RANGE')\n}\n","import invariant from 'tiny-invariant'\nimport { TypedDataDomain, TypedDataField } from '@ethersproject/abstract-signer'\nimport { BigNumberish } from '@ethersproject/bignumber'\nimport { _TypedDataEncoder } from '@ethersproject/hash'\nimport { permit2Domain } from './domain'\nimport { MaxSigDeadline, MaxUnorderedNonce, MaxSignatureTransferAmount } from './constants'\n\nexport interface Witness {\n  witness: any\n  witnessTypeName: string\n  witnessType: Record<string, TypedDataField[]>\n}\n\nexport interface TokenPermissions {\n  token: string\n  amount: BigNumberish\n}\n\nexport interface PermitTransferFrom {\n  permitted: TokenPermissions\n  spender: string\n  nonce: BigNumberish\n  deadline: BigNumberish\n}\n\nexport interface PermitBatchTransferFrom {\n  permitted: TokenPermissions[]\n  spender: string\n  nonce: BigNumberish\n  deadline: BigNumberish\n}\n\nexport type PermitTransferFromData = {\n  domain: TypedDataDomain\n  types: Record<string, TypedDataField[]>\n  values: PermitTransferFrom\n}\n\nexport type PermitBatchTransferFromData = {\n  domain: TypedDataDomain\n  types: Record<string, TypedDataField[]>\n  values: PermitBatchTransferFrom\n}\n\nconst TOKEN_PERMISSIONS = [\n  { name: 'token', type: 'address' },\n  { name: 'amount', type: 'uint256' },\n]\n\nconst PERMIT_TRANSFER_FROM_TYPES = {\n  PermitTransferFrom: [\n    { name: 'permitted', type: 'TokenPermissions' },\n    { name: 'spender', type: 'address' },\n    { name: 'nonce', type: 'uint256' },\n    { name: 'deadline', type: 'uint256' },\n  ],\n  TokenPermissions: TOKEN_PERMISSIONS,\n}\n\nconst PERMIT_BATCH_TRANSFER_FROM_TYPES = {\n  PermitBatchTransferFrom: [\n    { name: 'permitted', type: 'TokenPermissions[]' },\n    { name: 'spender', type: 'address' },\n    { name: 'nonce', type: 'uint256' },\n    { name: 'deadline', type: 'uint256' },\n  ],\n  TokenPermissions: TOKEN_PERMISSIONS,\n}\n\nfunction permitTransferFromWithWitnessType(witness: Witness): Record<string, TypedDataField[]> {\n  return {\n    PermitWitnessTransferFrom: [\n      { name: 'permitted', type: 'TokenPermissions' },\n      { name: 'spender', type: 'address' },\n      { name: 'nonce', type: 'uint256' },\n      { name: 'deadline', type: 'uint256' },\n      { name: 'witness', type: witness.witnessTypeName },\n    ],\n    TokenPermissions: TOKEN_PERMISSIONS,\n    ...witness.witnessType,\n  }\n}\n\nfunction permitBatchTransferFromWithWitnessType(witness: Witness): Record<string, TypedDataField[]> {\n  return {\n    PermitBatchWitnessTransferFrom: [\n      { name: 'permitted', type: 'TokenPermissions[]' },\n      { name: 'spender', type: 'address' },\n      { name: 'nonce', type: 'uint256' },\n      { name: 'deadline', type: 'uint256' },\n      { name: 'witness', type: witness.witnessTypeName },\n    ],\n    TokenPermissions: TOKEN_PERMISSIONS,\n    ...witness.witnessType,\n  }\n}\n\nfunction isPermitTransferFrom(permit: PermitTransferFrom | PermitBatchTransferFrom): permit is PermitTransferFrom {\n  return !Array.isArray(permit.permitted)\n}\n\nexport abstract class SignatureTransfer {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  // return the data to be sent in a eth_signTypedData RPC call\n  // for signing the given permit data\n  public static getPermitData(\n    permit: PermitTransferFrom | PermitBatchTransferFrom,\n    permit2Address: string,\n    chainId: number,\n    witness?: Witness\n  ): PermitTransferFromData | PermitBatchTransferFromData {\n    invariant(MaxSigDeadline.gte(permit.deadline), 'SIG_DEADLINE_OUT_OF_RANGE')\n    invariant(MaxUnorderedNonce.gte(permit.nonce), 'NONCE_OUT_OF_RANGE')\n\n    const domain = permit2Domain(permit2Address, chainId)\n    if (isPermitTransferFrom(permit)) {\n      validateTokenPermissions(permit.permitted)\n      const types = witness ? permitTransferFromWithWitnessType(witness) : PERMIT_TRANSFER_FROM_TYPES\n      const values = witness ? Object.assign(permit, { witness: witness.witness }) : permit\n      return {\n        domain,\n        types,\n        values,\n      }\n    } else {\n      permit.permitted.forEach(validateTokenPermissions)\n      const types = witness ? permitBatchTransferFromWithWitnessType(witness) : PERMIT_BATCH_TRANSFER_FROM_TYPES\n      const values = witness ? Object.assign(permit, { witness: witness.witness }) : permit\n      return {\n        domain,\n        types,\n        values,\n      }\n    }\n  }\n\n  public static hash(\n    permit: PermitTransferFrom | PermitBatchTransferFrom,\n    permit2Address: string,\n    chainId: number,\n    witness?: Witness\n  ): string {\n    const { domain, types, values } = SignatureTransfer.getPermitData(permit, permit2Address, chainId, witness)\n    return _TypedDataEncoder.hash(domain, types, values)\n  }\n}\n\nfunction validateTokenPermissions(permissions: TokenPermissions) {\n  invariant(MaxSignatureTransferAmount.gte(permissions.amount), 'AMOUNT_OUT_OF_RANGE')\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport { Provider } from '@ethersproject/providers'\nimport Permit2Abi from '../../abis/Permit2.json'\nimport { Contract } from '@ethersproject/contracts'\n\nexport interface AllowanceData {\n  amount: BigNumber\n  nonce: number\n  expiration: number\n}\n\nexport class AllowanceProvider {\n  private permit2: Contract\n\n  constructor(private provider: Provider, private permit2Address: string) {\n    this.permit2 = new Contract(this.permit2Address, Permit2Abi, this.provider)\n  }\n\n  async getAllowanceData(token: string, owner: string, spender: string): Promise<AllowanceData> {\n    return await this.permit2.allowance(owner, token, spender)\n  }\n\n  async getAllowance(token: string, owner: string, spender: string): Promise<BigNumber> {\n    return (await this.getAllowanceData(token, owner, spender)).amount\n  }\n\n  async getNonce(token: string, owner: string, spender: string): Promise<number> {\n    return (await this.getAllowanceData(token, owner, spender)).nonce\n  }\n\n  async getExpiration(token: string, owner: string, spender: string): Promise<number> {\n    return (await this.getAllowanceData(token, owner, spender)).expiration\n  }\n}\n"]},"metadata":{},"sourceType":"script"}