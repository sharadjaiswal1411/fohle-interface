{"ast":null,"code":"import { DEFAULT_LOCALE } from 'constants/locales';\nimport numbro from 'numbro';\nexport const isNumber = s => {\n  const reg = /^-?\\d+\\.?\\d*$/;\n  return reg.test(s) && !isNaN(parseFloat(s)) && isFinite(parseFloat(s));\n};\nexport const floorFormatter = n => {\n  if (n === 0) return '0.00';\n  if (!n) return '';\n  if (n < 0.001) {\n    return '<0.001';\n  }\n  if (n >= 0.001 && n < 1) {\n    return `${parseFloat(n.toFixed(3)).toLocaleString(DEFAULT_LOCALE, {\n      minimumFractionDigits: 1,\n      maximumFractionDigits: 3\n    })}`;\n  }\n  if (n >= 1 && n < 1e6) {\n    return `${parseFloat(n.toPrecision(6)).toLocaleString(DEFAULT_LOCALE, {\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 2\n    })}`;\n  }\n  if (n >= 1e6 && n < 1e15) {\n    return numbro(n).format({\n      average: true,\n      mantissa: 2,\n      optionalMantissa: true,\n      abbreviations: {\n        million: 'M',\n        billion: 'B',\n        trillion: 'T'\n      }\n    }).toUpperCase();\n  }\n  if (n >= 1e15) {\n    return `${n.toExponential(3).replace(/(\\.[0-9]*[1-9])0*|(\\.0*)/, '$1')}`;\n  }\n  return `${Number(n.toFixed(2)).toLocaleString(DEFAULT_LOCALE, {\n    minimumFractionDigits: 2\n  })}`;\n};\nexport const volumeFormatter = n => {\n  if (n === 0) return '0.00';\n  if (!n) return '';\n  if (n < 0.01) {\n    return '<0.01';\n  }\n  if (n >= 0.01 && n < 1) {\n    return `${parseFloat(n.toFixed(2)).toLocaleString(DEFAULT_LOCALE)}`;\n  }\n  if (n >= 1 && n < 1000) {\n    return `${Number(Math.round(n).toLocaleString(DEFAULT_LOCALE))}`;\n  }\n  if (n >= 1000) {\n    return numbro(n).format({\n      average: true,\n      mantissa: 1,\n      optionalMantissa: true,\n      abbreviations: {\n        thousand: 'K',\n        million: 'M',\n        billion: 'B',\n        trillion: 'T'\n      }\n    }).toUpperCase();\n  }\n  return `${Number(n.toFixed(1)).toLocaleString(DEFAULT_LOCALE, {\n    minimumFractionDigits: 1\n  })}`;\n};\nexport const quantityFormatter = n => {\n  if (n === 0) return '0.00';\n  if (!n) return '';\n  if (n >= 1 && n < 1000) {\n    return `${Number(Math.round(n).toLocaleString(DEFAULT_LOCALE))}`;\n  }\n  if (n >= 1000) {\n    return numbro(n).format({\n      average: true,\n      mantissa: 1,\n      thousandSeparated: true,\n      optionalMantissa: true,\n      abbreviations: {\n        thousand: 'K',\n        million: 'M',\n        billion: 'B',\n        trillion: 'T'\n      }\n    }).toUpperCase();\n  }\n  return `${Number(n.toFixed(2)).toLocaleString(DEFAULT_LOCALE, {\n    minimumFractionDigits: 2\n  })}`;\n};\nexport const roundWholePercentage = n => {\n  if (n === 0) return '0';\n  if (!n) return '';\n  if (n < 1) {\n    return '<1';\n  }\n  return Math.round(n).toString();\n};","map":{"version":3,"names":["DEFAULT_LOCALE","numbro","isNumber","s","reg","test","isNaN","parseFloat","isFinite","floorFormatter","n","toFixed","toLocaleString","minimumFractionDigits","maximumFractionDigits","toPrecision","format","average","mantissa","optionalMantissa","abbreviations","million","billion","trillion","toUpperCase","toExponential","replace","Number","volumeFormatter","Math","round","thousand","quantityFormatter","thousandSeparated","roundWholePercentage","toString"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/nft/utils/numbers.ts"],"sourcesContent":["import { DEFAULT_LOCALE } from 'constants/locales'\nimport numbro from 'numbro'\n\nexport const isNumber = (s: string): boolean => {\n  const reg = /^-?\\d+\\.?\\d*$/\n  return reg.test(s) && !isNaN(parseFloat(s)) && isFinite(parseFloat(s))\n}\n\nexport const floorFormatter = (n: number): string => {\n  if (n === 0) return '0.00'\n  if (!n) return ''\n  if (n < 0.001) {\n    return '<0.001'\n  }\n  if (n >= 0.001 && n < 1) {\n    return `${parseFloat(n.toFixed(3)).toLocaleString(DEFAULT_LOCALE, {\n      minimumFractionDigits: 1,\n      maximumFractionDigits: 3,\n    })}`\n  }\n  if (n >= 1 && n < 1e6) {\n    return `${parseFloat(n.toPrecision(6)).toLocaleString(DEFAULT_LOCALE, {\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 2,\n    })}`\n  }\n  if (n >= 1e6 && n < 1e15) {\n    return numbro(n)\n      .format({\n        average: true,\n        mantissa: 2,\n        optionalMantissa: true,\n        abbreviations: {\n          million: 'M',\n          billion: 'B',\n          trillion: 'T',\n        },\n      })\n      .toUpperCase()\n  }\n  if (n >= 1e15) {\n    return `${n.toExponential(3).replace(/(\\.[0-9]*[1-9])0*|(\\.0*)/, '$1')}`\n  }\n  return `${Number(n.toFixed(2)).toLocaleString(DEFAULT_LOCALE, { minimumFractionDigits: 2 })}`\n}\n\nexport const volumeFormatter = (n: number): string => {\n  if (n === 0) return '0.00'\n  if (!n) return ''\n  if (n < 0.01) {\n    return '<0.01'\n  }\n  if (n >= 0.01 && n < 1) {\n    return `${parseFloat(n.toFixed(2)).toLocaleString(DEFAULT_LOCALE)}`\n  }\n  if (n >= 1 && n < 1000) {\n    return `${Number(Math.round(n).toLocaleString(DEFAULT_LOCALE))}`\n  }\n  if (n >= 1000) {\n    return numbro(n)\n      .format({\n        average: true,\n        mantissa: 1,\n        optionalMantissa: true,\n        abbreviations: {\n          thousand: 'K',\n          million: 'M',\n          billion: 'B',\n          trillion: 'T',\n        },\n      })\n      .toUpperCase()\n  }\n  return `${Number(n.toFixed(1)).toLocaleString(DEFAULT_LOCALE, { minimumFractionDigits: 1 })}`\n}\n\nexport const quantityFormatter = (n: number): string => {\n  if (n === 0) return '0.00'\n  if (!n) return ''\n  if (n >= 1 && n < 1000) {\n    return `${Number(Math.round(n).toLocaleString(DEFAULT_LOCALE))}`\n  }\n  if (n >= 1000) {\n    return numbro(n)\n      .format({\n        average: true,\n        mantissa: 1,\n        thousandSeparated: true,\n        optionalMantissa: true,\n        abbreviations: {\n          thousand: 'K',\n          million: 'M',\n          billion: 'B',\n          trillion: 'T',\n        },\n      })\n      .toUpperCase()\n  }\n  return `${Number(n.toFixed(2)).toLocaleString(DEFAULT_LOCALE, { minimumFractionDigits: 2 })}`\n}\n\nexport const roundWholePercentage = (n: number): string => {\n  if (n === 0) return '0'\n  if (!n) return ''\n  if (n < 1) {\n    return '<1'\n  }\n  return Math.round(n).toString()\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}