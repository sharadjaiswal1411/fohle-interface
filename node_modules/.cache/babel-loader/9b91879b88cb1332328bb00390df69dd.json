{"ast":null,"code":"import _regeneratorRuntime from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _createForOfIteratorHelper from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\n/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { removeIgnoredSearchParams } from './removeIgnoredSearchParams.js';\nimport '../_version.js';\n/**\n * Generator function that yields possible variations on the original URL to\n * check, one at a time.\n *\n * @param {string} url\n * @param {Object} options\n *\n * @private\n * @memberof module:workbox-precaching\n */\nexport function generateURLVariations(url) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    _ref$ignoreURLParamet = _ref.ignoreURLParametersMatching,\n    ignoreURLParametersMatching = _ref$ignoreURLParamet === void 0 ? [/^utm_/, /^fbclid$/] : _ref$ignoreURLParamet,\n    _ref$directoryIndex = _ref.directoryIndex,\n    directoryIndex = _ref$directoryIndex === void 0 ? 'index.html' : _ref$directoryIndex,\n    _ref$cleanURLs = _ref.cleanURLs,\n    cleanURLs = _ref$cleanURLs === void 0 ? true : _ref$cleanURLs,\n    urlManipulation = _ref.urlManipulation;\n  return /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var urlObject, urlWithoutIgnoredParams, directoryURL, cleanURL, additionalURLs, _iterator, _step, urlToAttempt;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            urlObject = new URL(url, location.href);\n            urlObject.hash = '';\n            _context.next = 4;\n            return urlObject.href;\n          case 4:\n            urlWithoutIgnoredParams = removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching);\n            _context.next = 7;\n            return urlWithoutIgnoredParams.href;\n          case 7:\n            if (!(directoryIndex && urlWithoutIgnoredParams.pathname.endsWith('/'))) {\n              _context.next = 12;\n              break;\n            }\n            directoryURL = new URL(urlWithoutIgnoredParams.href);\n            directoryURL.pathname += directoryIndex;\n            _context.next = 12;\n            return directoryURL.href;\n          case 12:\n            if (!cleanURLs) {\n              _context.next = 17;\n              break;\n            }\n            cleanURL = new URL(urlWithoutIgnoredParams.href);\n            cleanURL.pathname += '.html';\n            _context.next = 17;\n            return cleanURL.href;\n          case 17:\n            if (!urlManipulation) {\n              _context.next = 36;\n              break;\n            }\n            additionalURLs = urlManipulation({\n              url: urlObject\n            });\n            _iterator = _createForOfIteratorHelper(additionalURLs);\n            _context.prev = 20;\n            _iterator.s();\n          case 22:\n            if ((_step = _iterator.n()).done) {\n              _context.next = 28;\n              break;\n            }\n            urlToAttempt = _step.value;\n            _context.next = 26;\n            return urlToAttempt.href;\n          case 26:\n            _context.next = 22;\n            break;\n          case 28:\n            _context.next = 33;\n            break;\n          case 30:\n            _context.prev = 30;\n            _context.t0 = _context[\"catch\"](20);\n            _iterator.e(_context.t0);\n          case 33:\n            _context.prev = 33;\n            _iterator.f();\n            return _context.finish(33);\n          case 36:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[20, 30, 33, 36]]);\n  })();\n}","map":{"version":3,"names":["removeIgnoredSearchParams","generateURLVariations","url","ignoreURLParametersMatching","directoryIndex","cleanURLs","urlManipulation","urlObject","URL","location","href","hash","urlWithoutIgnoredParams","pathname","endsWith","directoryURL","cleanURL","additionalURLs","urlToAttempt"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/workbox-precaching/utils/generateURLVariations.js"],"sourcesContent":["/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { removeIgnoredSearchParams } from './removeIgnoredSearchParams.js';\nimport '../_version.js';\n/**\n * Generator function that yields possible variations on the original URL to\n * check, one at a time.\n *\n * @param {string} url\n * @param {Object} options\n *\n * @private\n * @memberof module:workbox-precaching\n */\nexport function* generateURLVariations(url, { ignoreURLParametersMatching = [/^utm_/, /^fbclid$/], directoryIndex = 'index.html', cleanURLs = true, urlManipulation, } = {}) {\n    const urlObject = new URL(url, location.href);\n    urlObject.hash = '';\n    yield urlObject.href;\n    const urlWithoutIgnoredParams = removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching);\n    yield urlWithoutIgnoredParams.href;\n    if (directoryIndex && urlWithoutIgnoredParams.pathname.endsWith('/')) {\n        const directoryURL = new URL(urlWithoutIgnoredParams.href);\n        directoryURL.pathname += directoryIndex;\n        yield directoryURL.href;\n    }\n    if (cleanURLs) {\n        const cleanURL = new URL(urlWithoutIgnoredParams.href);\n        cleanURL.pathname += '.html';\n        yield cleanURL.href;\n    }\n    if (urlManipulation) {\n        const additionalURLs = urlManipulation({ url: urlObject });\n        for (const urlToAttempt of additionalURLs) {\n            yield urlToAttempt.href;\n        }\n    }\n}\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,yBAAyB,QAAQ,gCAAgC;AAC1E,OAAO,gBAAgB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAAUC,qBAAqB,CAACC,GAAG;EAAA,+EAA+H,CAAC,CAAC;IAAA,6BAA7HC,2BAA2B;IAA3BA,2BAA2B,sCAAG,CAAC,OAAO,EAAE,UAAU,CAAC;IAAA,2BAAEC,cAAc;IAAdA,cAAc,oCAAG,YAAY;IAAA,sBAAEC,SAAS;IAATA,SAAS,+BAAG,IAAI;IAAEC,eAAe,QAAfA,eAAe;EAAA;IAAA;IAAA;MAAA;QAAA;UAAA;YACzJC,SAAS,GAAG,IAAIC,GAAG,CAACN,GAAG,EAAEO,QAAQ,CAACC,IAAI,CAAC;YAC7CH,SAAS,CAACI,IAAI,GAAG,EAAE;YAAC;YACpB,OAAMJ,SAAS,CAACG,IAAI;UAAA;YACdE,uBAAuB,GAAGZ,yBAAyB,CAACO,SAAS,EAAEJ,2BAA2B,CAAC;YAAA;YACjG,OAAMS,uBAAuB,CAACF,IAAI;UAAA;YAAA,MAC9BN,cAAc,IAAIQ,uBAAuB,CAACC,QAAQ,CAACC,QAAQ,CAAC,GAAG,CAAC;cAAA;cAAA;YAAA;YAC1DC,YAAY,GAAG,IAAIP,GAAG,CAACI,uBAAuB,CAACF,IAAI,CAAC;YAC1DK,YAAY,CAACF,QAAQ,IAAIT,cAAc;YAAC;YACxC,OAAMW,YAAY,CAACL,IAAI;UAAA;YAAA,KAEvBL,SAAS;cAAA;cAAA;YAAA;YACHW,QAAQ,GAAG,IAAIR,GAAG,CAACI,uBAAuB,CAACF,IAAI,CAAC;YACtDM,QAAQ,CAACH,QAAQ,IAAI,OAAO;YAAC;YAC7B,OAAMG,QAAQ,CAACN,IAAI;UAAA;YAAA,KAEnBJ,eAAe;cAAA;cAAA;YAAA;YACTW,cAAc,GAAGX,eAAe,CAAC;cAAEJ,GAAG,EAAEK;YAAU,CAAC,CAAC;YAAA,uCAC/BU,cAAc;YAAA;YAAA;UAAA;YAAA;cAAA;cAAA;YAAA;YAA9BC,YAAY;YAAA;YACnB,OAAMA,YAAY,CAACR,IAAI;UAAA;YAAA;YAAA;UAAA;YAAA;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA;AAAA"},"metadata":{},"sourceType":"module"}