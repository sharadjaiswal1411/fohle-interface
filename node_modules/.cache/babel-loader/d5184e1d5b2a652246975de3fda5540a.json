{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\nvar _regeneratorRuntime = require(\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\nvar _slicedToArray = require(\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\nvar _asyncToGenerator = require(\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\nvar _classCallCheck = require(\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nvar _inherits = require(\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\nvar _createSuper = require(\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.JsonRpcEngine = void 0;\nvar safe_event_emitter_1 = __importDefault(require(\"@metamask/safe-event-emitter\"));\nvar eth_rpc_errors_1 = require(\"eth-rpc-errors\");\n/**\n * A JSON-RPC request and response processor.\n * Give it a stack of middleware, pass it requests, and get back responses.\n */\nvar JsonRpcEngine = /*#__PURE__*/function (_safe_event_emitter_) {\n  _inherits(JsonRpcEngine, _safe_event_emitter_);\n  var _super = _createSuper(JsonRpcEngine);\n  function JsonRpcEngine() {\n    var _this;\n    _classCallCheck(this, JsonRpcEngine);\n    _this = _super.call(this);\n    _this._middleware = [];\n    return _this;\n  }\n  /**\n   * Add a middleware function to the engine's middleware stack.\n   *\n   * @param middleware - The middleware function to add.\n   */\n  _createClass(JsonRpcEngine, [{\n    key: \"push\",\n    value: function push(middleware) {\n      this._middleware.push(middleware);\n    }\n  }, {\n    key: \"handle\",\n    value: function handle(req, cb) {\n      if (cb && typeof cb !== 'function') {\n        throw new Error('\"callback\" must be a function if provided.');\n      }\n      if (Array.isArray(req)) {\n        if (cb) {\n          return this._handleBatch(req, cb);\n        }\n        return this._handleBatch(req);\n      }\n      if (cb) {\n        return this._handle(req, cb);\n      }\n      return this._promiseHandle(req);\n    }\n    /**\n     * Returns this engine as a middleware function that can be pushed to other\n     * engines.\n     *\n     * @returns This engine as a middleware function.\n     */\n  }, {\n    key: \"asMiddleware\",\n    value: function asMiddleware() {\n      var _this2 = this;\n      return /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(req, res, next, end) {\n          var _yield$JsonRpcEngine$, _yield$JsonRpcEngine$2, middlewareError, isComplete, returnHandlers;\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  _context2.prev = 0;\n                  _context2.next = 3;\n                  return JsonRpcEngine._runAllMiddleware(req, res, _this2._middleware);\n                case 3:\n                  _yield$JsonRpcEngine$ = _context2.sent;\n                  _yield$JsonRpcEngine$2 = _slicedToArray(_yield$JsonRpcEngine$, 3);\n                  middlewareError = _yield$JsonRpcEngine$2[0];\n                  isComplete = _yield$JsonRpcEngine$2[1];\n                  returnHandlers = _yield$JsonRpcEngine$2[2];\n                  if (!isComplete) {\n                    _context2.next = 12;\n                    break;\n                  }\n                  _context2.next = 11;\n                  return JsonRpcEngine._runReturnHandlers(returnHandlers);\n                case 11:\n                  return _context2.abrupt(\"return\", end(middlewareError));\n                case 12:\n                  return _context2.abrupt(\"return\", next( /*#__PURE__*/function () {\n                    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(handlerCallback) {\n                      return _regeneratorRuntime.wrap(function _callee$(_context) {\n                        while (1) {\n                          switch (_context.prev = _context.next) {\n                            case 0:\n                              _context.prev = 0;\n                              _context.next = 3;\n                              return JsonRpcEngine._runReturnHandlers(returnHandlers);\n                            case 3:\n                              _context.next = 8;\n                              break;\n                            case 5:\n                              _context.prev = 5;\n                              _context.t0 = _context[\"catch\"](0);\n                              return _context.abrupt(\"return\", handlerCallback(_context.t0));\n                            case 8:\n                              return _context.abrupt(\"return\", handlerCallback());\n                            case 9:\n                            case \"end\":\n                              return _context.stop();\n                          }\n                        }\n                      }, _callee, null, [[0, 5]]);\n                    }));\n                    return function (_x5) {\n                      return _ref2.apply(this, arguments);\n                    };\n                  }()));\n                case 15:\n                  _context2.prev = 15;\n                  _context2.t0 = _context2[\"catch\"](0);\n                  return _context2.abrupt(\"return\", end(_context2.t0));\n                case 18:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2, null, [[0, 15]]);\n        }));\n        return function (_x, _x2, _x3, _x4) {\n          return _ref.apply(this, arguments);\n        };\n      }();\n    }\n  }, {\n    key: \"_handleBatch\",\n    value: function () {\n      var _handleBatch2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(reqs, cb) {\n        var responses;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                _context3.next = 3;\n                return Promise.all(\n                // 1. Begin executing each request in the order received\n                reqs.map(this._promiseHandle.bind(this)));\n              case 3:\n                responses = _context3.sent;\n                if (!cb) {\n                  _context3.next = 6;\n                  break;\n                }\n                return _context3.abrupt(\"return\", cb(null, responses));\n              case 6:\n                return _context3.abrupt(\"return\", responses);\n              case 9:\n                _context3.prev = 9;\n                _context3.t0 = _context3[\"catch\"](0);\n                if (!cb) {\n                  _context3.next = 13;\n                  break;\n                }\n                return _context3.abrupt(\"return\", cb(_context3.t0));\n              case 13:\n                throw _context3.t0;\n              case 14:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[0, 9]]);\n      }));\n      function _handleBatch(_x6, _x7) {\n        return _handleBatch2.apply(this, arguments);\n      }\n      return _handleBatch;\n    }()\n    /**\n     * A promise-wrapped _handle.\n     */\n  }, {\n    key: \"_promiseHandle\",\n    value: function _promiseHandle(req) {\n      var _this3 = this;\n      return new Promise(function (resolve) {\n        _this3._handle(req, function (_err, res) {\n          // There will always be a response, and it will always have any error\n          // that is caught and propagated.\n          resolve(res);\n        });\n      });\n    }\n    /**\n     * Ensures that the request object is valid, processes it, and passes any\n     * error and the response object to the given callback.\n     *\n     * Does not reject.\n     */\n  }, {\n    key: \"_handle\",\n    value: function () {\n      var _handle2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(callerReq, cb) {\n        var _error2, _error3, req, res, error;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (!(!callerReq || Array.isArray(callerReq) || typeof callerReq !== 'object')) {\n                  _context4.next = 3;\n                  break;\n                }\n                _error2 = new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.invalidRequest, \"Requests must be plain objects. Received: \".concat(typeof callerReq), {\n                  request: callerReq\n                });\n                return _context4.abrupt(\"return\", cb(_error2, {\n                  id: undefined,\n                  jsonrpc: '2.0',\n                  error: _error2\n                }));\n              case 3:\n                if (!(typeof callerReq.method !== 'string')) {\n                  _context4.next = 6;\n                  break;\n                }\n                _error3 = new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.invalidRequest, \"Must specify a string method. Received: \".concat(typeof callerReq.method), {\n                  request: callerReq\n                });\n                return _context4.abrupt(\"return\", cb(_error3, {\n                  id: callerReq.id,\n                  jsonrpc: '2.0',\n                  error: _error3\n                }));\n              case 6:\n                req = Object.assign({}, callerReq);\n                res = {\n                  id: req.id,\n                  jsonrpc: req.jsonrpc\n                };\n                error = null;\n                _context4.prev = 9;\n                _context4.next = 12;\n                return this._processRequest(req, res);\n              case 12:\n                _context4.next = 17;\n                break;\n              case 14:\n                _context4.prev = 14;\n                _context4.t0 = _context4[\"catch\"](9);\n                // A request handler error, a re-thrown middleware error, or something\n                // unexpected.\n                error = _context4.t0;\n              case 17:\n                if (error) {\n                  // Ensure no result is present on an errored response\n                  delete res.result;\n                  if (!res.error) {\n                    res.error = eth_rpc_errors_1.serializeError(error);\n                  }\n                }\n                return _context4.abrupt(\"return\", cb(error, res));\n              case 19:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[9, 14]]);\n      }));\n      function _handle(_x8, _x9) {\n        return _handle2.apply(this, arguments);\n      }\n      return _handle;\n    }()\n    /**\n     * For the given request and response, runs all middleware and their return\n     * handlers, if any, and ensures that internal request processing semantics\n     * are satisfied.\n     */\n  }, {\n    key: \"_processRequest\",\n    value: function () {\n      var _processRequest2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(req, res) {\n        var _yield$JsonRpcEngine$3, _yield$JsonRpcEngine$4, error, isComplete, returnHandlers;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return JsonRpcEngine._runAllMiddleware(req, res, this._middleware);\n              case 2:\n                _yield$JsonRpcEngine$3 = _context5.sent;\n                _yield$JsonRpcEngine$4 = _slicedToArray(_yield$JsonRpcEngine$3, 3);\n                error = _yield$JsonRpcEngine$4[0];\n                isComplete = _yield$JsonRpcEngine$4[1];\n                returnHandlers = _yield$JsonRpcEngine$4[2];\n                // Throw if \"end\" was not called, or if the response has neither a result\n                // nor an error.\n                JsonRpcEngine._checkForCompletion(req, res, isComplete);\n                // The return handlers should run even if an error was encountered during\n                // middleware processing.\n                _context5.next = 10;\n                return JsonRpcEngine._runReturnHandlers(returnHandlers);\n              case 10:\n                if (!error) {\n                  _context5.next = 12;\n                  break;\n                }\n                throw error;\n              case 12:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n      function _processRequest(_x10, _x11) {\n        return _processRequest2.apply(this, arguments);\n      }\n      return _processRequest;\n    }()\n    /**\n     * Serially executes the given stack of middleware.\n     *\n     * @returns An array of any error encountered during middleware execution,\n     * a boolean indicating whether the request was completed, and an array of\n     * middleware-defined return handlers.\n     */\n  }], [{\n    key: \"_runAllMiddleware\",\n    value: function () {\n      var _runAllMiddleware2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(req, res, middlewareStack) {\n        var returnHandlers, error, isComplete, _iterator, _step, middleware, _yield$JsonRpcEngine$5, _yield$JsonRpcEngine$6;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                returnHandlers = [];\n                error = null;\n                isComplete = false; // Go down stack of middleware, call and collect optional returnHandlers\n                _iterator = _createForOfIteratorHelper(middlewareStack);\n                _context6.prev = 4;\n                _iterator.s();\n              case 6:\n                if ((_step = _iterator.n()).done) {\n                  _context6.next = 18;\n                  break;\n                }\n                middleware = _step.value;\n                _context6.next = 10;\n                return JsonRpcEngine._runMiddleware(req, res, middleware, returnHandlers);\n              case 10:\n                _yield$JsonRpcEngine$5 = _context6.sent;\n                _yield$JsonRpcEngine$6 = _slicedToArray(_yield$JsonRpcEngine$5, 2);\n                error = _yield$JsonRpcEngine$6[0];\n                isComplete = _yield$JsonRpcEngine$6[1];\n                if (!isComplete) {\n                  _context6.next = 16;\n                  break;\n                }\n                return _context6.abrupt(\"break\", 18);\n              case 16:\n                _context6.next = 6;\n                break;\n              case 18:\n                _context6.next = 23;\n                break;\n              case 20:\n                _context6.prev = 20;\n                _context6.t0 = _context6[\"catch\"](4);\n                _iterator.e(_context6.t0);\n              case 23:\n                _context6.prev = 23;\n                _iterator.f();\n                return _context6.finish(23);\n              case 26:\n                return _context6.abrupt(\"return\", [error, isComplete, returnHandlers.reverse()]);\n              case 27:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, null, [[4, 20, 23, 26]]);\n      }));\n      function _runAllMiddleware(_x12, _x13, _x14) {\n        return _runAllMiddleware2.apply(this, arguments);\n      }\n      return _runAllMiddleware;\n    }()\n    /**\n     * Runs an individual middleware.\n     *\n     * @returns An array of any error encountered during middleware exection,\n     * and a boolean indicating whether the request should end.\n     */\n  }, {\n    key: \"_runMiddleware\",\n    value: function _runMiddleware(req, res, middleware, returnHandlers) {\n      return new Promise(function (resolve) {\n        var end = function end(err) {\n          var error = err || res.error;\n          if (error) {\n            res.error = eth_rpc_errors_1.serializeError(error);\n          }\n          // True indicates that the request should end\n          resolve([error, true]);\n        };\n        var next = function next(returnHandler) {\n          if (res.error) {\n            end(res.error);\n          } else {\n            if (returnHandler) {\n              if (typeof returnHandler !== 'function') {\n                end(new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.internal, \"JsonRpcEngine: \\\"next\\\" return handlers must be functions. \" + \"Received \\\"\".concat(typeof returnHandler, \"\\\" for request:\\n\").concat(jsonify(req)), {\n                  request: req\n                }));\n              }\n              returnHandlers.push(returnHandler);\n            }\n            // False indicates that the request should not end\n            resolve([null, false]);\n          }\n        };\n        try {\n          middleware(req, res, next, end);\n        } catch (error) {\n          end(error);\n        }\n      });\n    }\n    /**\n     * Serially executes array of return handlers. The request and response are\n     * assumed to be in their scope.\n     */\n  }, {\n    key: \"_runReturnHandlers\",\n    value: function () {\n      var _runReturnHandlers2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(handlers) {\n        var _iterator2, _step2, _loop;\n        return _regeneratorRuntime.wrap(function _callee7$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _iterator2 = _createForOfIteratorHelper(handlers);\n                _context8.prev = 1;\n                _loop = /*#__PURE__*/_regeneratorRuntime.mark(function _loop() {\n                  var handler;\n                  return _regeneratorRuntime.wrap(function _loop$(_context7) {\n                    while (1) {\n                      switch (_context7.prev = _context7.next) {\n                        case 0:\n                          handler = _step2.value;\n                          _context7.next = 3;\n                          return new Promise(function (resolve, reject) {\n                            handler(function (err) {\n                              return err ? reject(err) : resolve();\n                            });\n                          });\n                        case 3:\n                        case \"end\":\n                          return _context7.stop();\n                      }\n                    }\n                  }, _loop);\n                });\n                _iterator2.s();\n              case 4:\n                if ((_step2 = _iterator2.n()).done) {\n                  _context8.next = 8;\n                  break;\n                }\n                return _context8.delegateYield(_loop(), \"t0\", 6);\n              case 6:\n                _context8.next = 4;\n                break;\n              case 8:\n                _context8.next = 13;\n                break;\n              case 10:\n                _context8.prev = 10;\n                _context8.t1 = _context8[\"catch\"](1);\n                _iterator2.e(_context8.t1);\n              case 13:\n                _context8.prev = 13;\n                _iterator2.f();\n                return _context8.finish(13);\n              case 16:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee7, null, [[1, 10, 13, 16]]);\n      }));\n      function _runReturnHandlers(_x15) {\n        return _runReturnHandlers2.apply(this, arguments);\n      }\n      return _runReturnHandlers;\n    }()\n    /**\n     * Throws an error if the response has neither a result nor an error, or if\n     * the \"isComplete\" flag is falsy.\n     */\n  }, {\n    key: \"_checkForCompletion\",\n    value: function _checkForCompletion(req, res, isComplete) {\n      if (!('result' in res) && !('error' in res)) {\n        throw new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.internal, \"JsonRpcEngine: Response has no error or result for request:\\n\".concat(jsonify(req)), {\n          request: req\n        });\n      }\n      if (!isComplete) {\n        throw new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.internal, \"JsonRpcEngine: Nothing ended request:\\n\".concat(jsonify(req)), {\n          request: req\n        });\n      }\n    }\n  }]);\n  return JsonRpcEngine;\n}(safe_event_emitter_1.default);\nexports.JsonRpcEngine = JsonRpcEngine;\nfunction jsonify(request) {\n  return JSON.stringify(request, null, 2);\n}","map":{"version":3,"sources":["../src/JsonRpcEngine.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.JsonRpcEngine = void 0;\nconst safe_event_emitter_1 = __importDefault(require(\"@metamask/safe-event-emitter\"));\nconst eth_rpc_errors_1 = require(\"eth-rpc-errors\");\n/**\n * A JSON-RPC request and response processor.\n * Give it a stack of middleware, pass it requests, and get back responses.\n */\nclass JsonRpcEngine extends safe_event_emitter_1.default {\n    constructor() {\n        super();\n        this._middleware = [];\n    }\n    /**\n     * Add a middleware function to the engine's middleware stack.\n     *\n     * @param middleware - The middleware function to add.\n     */\n    push(middleware) {\n        this._middleware.push(middleware);\n    }\n    handle(req, cb) {\n        if (cb && typeof cb !== 'function') {\n            throw new Error('\"callback\" must be a function if provided.');\n        }\n        if (Array.isArray(req)) {\n            if (cb) {\n                return this._handleBatch(req, cb);\n            }\n            return this._handleBatch(req);\n        }\n        if (cb) {\n            return this._handle(req, cb);\n        }\n        return this._promiseHandle(req);\n    }\n    /**\n     * Returns this engine as a middleware function that can be pushed to other\n     * engines.\n     *\n     * @returns This engine as a middleware function.\n     */\n    asMiddleware() {\n        return async (req, res, next, end) => {\n            try {\n                const [middlewareError, isComplete, returnHandlers,] = await JsonRpcEngine._runAllMiddleware(req, res, this._middleware);\n                if (isComplete) {\n                    await JsonRpcEngine._runReturnHandlers(returnHandlers);\n                    return end(middlewareError);\n                }\n                return next(async (handlerCallback) => {\n                    try {\n                        await JsonRpcEngine._runReturnHandlers(returnHandlers);\n                    }\n                    catch (error) {\n                        return handlerCallback(error);\n                    }\n                    return handlerCallback();\n                });\n            }\n            catch (error) {\n                return end(error);\n            }\n        };\n    }\n    async _handleBatch(reqs, cb) {\n        // The order here is important\n        try {\n            // 2. Wait for all requests to finish, or throw on some kind of fatal\n            // error\n            const responses = await Promise.all(\n            // 1. Begin executing each request in the order received\n            reqs.map(this._promiseHandle.bind(this)));\n            // 3. Return batch response\n            if (cb) {\n                return cb(null, responses);\n            }\n            return responses;\n        }\n        catch (error) {\n            if (cb) {\n                return cb(error);\n            }\n            throw error;\n        }\n    }\n    /**\n     * A promise-wrapped _handle.\n     */\n    _promiseHandle(req) {\n        return new Promise((resolve) => {\n            this._handle(req, (_err, res) => {\n                // There will always be a response, and it will always have any error\n                // that is caught and propagated.\n                resolve(res);\n            });\n        });\n    }\n    /**\n     * Ensures that the request object is valid, processes it, and passes any\n     * error and the response object to the given callback.\n     *\n     * Does not reject.\n     */\n    async _handle(callerReq, cb) {\n        if (!callerReq ||\n            Array.isArray(callerReq) ||\n            typeof callerReq !== 'object') {\n            const error = new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.invalidRequest, `Requests must be plain objects. Received: ${typeof callerReq}`, { request: callerReq });\n            return cb(error, { id: undefined, jsonrpc: '2.0', error });\n        }\n        if (typeof callerReq.method !== 'string') {\n            const error = new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.invalidRequest, `Must specify a string method. Received: ${typeof callerReq.method}`, { request: callerReq });\n            return cb(error, { id: callerReq.id, jsonrpc: '2.0', error });\n        }\n        const req = Object.assign({}, callerReq);\n        const res = {\n            id: req.id,\n            jsonrpc: req.jsonrpc,\n        };\n        let error = null;\n        try {\n            await this._processRequest(req, res);\n        }\n        catch (_error) {\n            // A request handler error, a re-thrown middleware error, or something\n            // unexpected.\n            error = _error;\n        }\n        if (error) {\n            // Ensure no result is present on an errored response\n            delete res.result;\n            if (!res.error) {\n                res.error = eth_rpc_errors_1.serializeError(error);\n            }\n        }\n        return cb(error, res);\n    }\n    /**\n     * For the given request and response, runs all middleware and their return\n     * handlers, if any, and ensures that internal request processing semantics\n     * are satisfied.\n     */\n    async _processRequest(req, res) {\n        const [error, isComplete, returnHandlers,] = await JsonRpcEngine._runAllMiddleware(req, res, this._middleware);\n        // Throw if \"end\" was not called, or if the response has neither a result\n        // nor an error.\n        JsonRpcEngine._checkForCompletion(req, res, isComplete);\n        // The return handlers should run even if an error was encountered during\n        // middleware processing.\n        await JsonRpcEngine._runReturnHandlers(returnHandlers);\n        // Now we re-throw the middleware processing error, if any, to catch it\n        // further up the call chain.\n        if (error) {\n            throw error;\n        }\n    }\n    /**\n     * Serially executes the given stack of middleware.\n     *\n     * @returns An array of any error encountered during middleware execution,\n     * a boolean indicating whether the request was completed, and an array of\n     * middleware-defined return handlers.\n     */\n    static async _runAllMiddleware(req, res, middlewareStack) {\n        const returnHandlers = [];\n        let error = null;\n        let isComplete = false;\n        // Go down stack of middleware, call and collect optional returnHandlers\n        for (const middleware of middlewareStack) {\n            [error, isComplete] = await JsonRpcEngine._runMiddleware(req, res, middleware, returnHandlers);\n            if (isComplete) {\n                break;\n            }\n        }\n        return [error, isComplete, returnHandlers.reverse()];\n    }\n    /**\n     * Runs an individual middleware.\n     *\n     * @returns An array of any error encountered during middleware exection,\n     * and a boolean indicating whether the request should end.\n     */\n    static _runMiddleware(req, res, middleware, returnHandlers) {\n        return new Promise((resolve) => {\n            const end = (err) => {\n                const error = err || res.error;\n                if (error) {\n                    res.error = eth_rpc_errors_1.serializeError(error);\n                }\n                // True indicates that the request should end\n                resolve([error, true]);\n            };\n            const next = (returnHandler) => {\n                if (res.error) {\n                    end(res.error);\n                }\n                else {\n                    if (returnHandler) {\n                        if (typeof returnHandler !== 'function') {\n                            end(new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.internal, `JsonRpcEngine: \"next\" return handlers must be functions. ` +\n                                `Received \"${typeof returnHandler}\" for request:\\n${jsonify(req)}`, { request: req }));\n                        }\n                        returnHandlers.push(returnHandler);\n                    }\n                    // False indicates that the request should not end\n                    resolve([null, false]);\n                }\n            };\n            try {\n                middleware(req, res, next, end);\n            }\n            catch (error) {\n                end(error);\n            }\n        });\n    }\n    /**\n     * Serially executes array of return handlers. The request and response are\n     * assumed to be in their scope.\n     */\n    static async _runReturnHandlers(handlers) {\n        for (const handler of handlers) {\n            await new Promise((resolve, reject) => {\n                handler((err) => (err ? reject(err) : resolve()));\n            });\n        }\n    }\n    /**\n     * Throws an error if the response has neither a result nor an error, or if\n     * the \"isComplete\" flag is falsy.\n     */\n    static _checkForCompletion(req, res, isComplete) {\n        if (!('result' in res) && !('error' in res)) {\n            throw new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.internal, `JsonRpcEngine: Response has no error or result for request:\\n${jsonify(req)}`, { request: req });\n        }\n        if (!isComplete) {\n            throw new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.internal, `JsonRpcEngine: Nothing ended request:\\n${jsonify(req)}`, { request: req });\n        }\n    }\n}\nexports.JsonRpcEngine = JsonRpcEngine;\nfunction jsonify(request) {\n    return JSON.stringify(request, null, 2);\n}\n//# sourceMappingURL=data:application/json;base64,"]},"metadata":{},"sourceType":"script"}