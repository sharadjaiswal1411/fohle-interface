{"ast":null,"code":"/**\n * gets the amoutn difference plus the % change in change itself (second order change)\n * @param {*} valueNow\n * @param {*} value24HoursAgo\n * @param {*} value48HoursAgo\n */\nexport const get2DayChange = (valueNow, value24HoursAgo, value48HoursAgo) => {\n  // get volume info for both 24 hour periods\n  const currentChange = parseFloat(valueNow) - parseFloat(value24HoursAgo);\n  const previousChange = parseFloat(value24HoursAgo) - parseFloat(value48HoursAgo);\n  const adjustedPercentChange = (currentChange - previousChange) / previousChange * 100;\n  if (isNaN(adjustedPercentChange) || !isFinite(adjustedPercentChange)) {\n    return [currentChange, 0];\n  }\n  return [currentChange, adjustedPercentChange];\n};\n\n/**\n * get standard percent change between two values\n * @param {*} valueNow\n * @param {*} value24HoursAgo\n */\nexport const getPercentChange = (valueNow, value24HoursAgo) => {\n  if (valueNow && value24HoursAgo) {\n    const change = (parseFloat(valueNow) - parseFloat(value24HoursAgo)) / parseFloat(value24HoursAgo) * 100;\n    if (isFinite(change)) return change;\n  }\n  return 0;\n};","map":{"version":3,"names":["get2DayChange","valueNow","value24HoursAgo","value48HoursAgo","currentChange","parseFloat","previousChange","adjustedPercentChange","isNaN","isFinite","getPercentChange","change"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/utils/data.ts"],"sourcesContent":["/**\n * gets the amoutn difference plus the % change in change itself (second order change)\n * @param {*} valueNow\n * @param {*} value24HoursAgo\n * @param {*} value48HoursAgo\n */\nexport const get2DayChange = (valueNow: string, value24HoursAgo: string, value48HoursAgo: string): [number, number] => {\n  // get volume info for both 24 hour periods\n  const currentChange = parseFloat(valueNow) - parseFloat(value24HoursAgo)\n  const previousChange = parseFloat(value24HoursAgo) - parseFloat(value48HoursAgo)\n  const adjustedPercentChange = ((currentChange - previousChange) / previousChange) * 100\n  if (isNaN(adjustedPercentChange) || !isFinite(adjustedPercentChange)) {\n    return [currentChange, 0]\n  }\n  return [currentChange, adjustedPercentChange]\n}\n\n/**\n * get standard percent change between two values\n * @param {*} valueNow\n * @param {*} value24HoursAgo\n */\nexport const getPercentChange = (valueNow: string | undefined, value24HoursAgo: string | undefined): number => {\n  if (valueNow && value24HoursAgo) {\n    const change = ((parseFloat(valueNow) - parseFloat(value24HoursAgo)) / parseFloat(value24HoursAgo)) * 100\n    if (isFinite(change)) return change\n  }\n  return 0\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,aAAa,GAAG,CAACC,QAAgB,EAAEC,eAAuB,EAAEC,eAAuB,KAAuB;EACrH;EACA,MAAMC,aAAa,GAAGC,UAAU,CAACJ,QAAQ,CAAC,GAAGI,UAAU,CAACH,eAAe,CAAC;EACxE,MAAMI,cAAc,GAAGD,UAAU,CAACH,eAAe,CAAC,GAAGG,UAAU,CAACF,eAAe,CAAC;EAChF,MAAMI,qBAAqB,GAAI,CAACH,aAAa,GAAGE,cAAc,IAAIA,cAAc,GAAI,GAAG;EACvF,IAAIE,KAAK,CAACD,qBAAqB,CAAC,IAAI,CAACE,QAAQ,CAACF,qBAAqB,CAAC,EAAE;IACpE,OAAO,CAACH,aAAa,EAAE,CAAC,CAAC;EAC3B;EACA,OAAO,CAACA,aAAa,EAAEG,qBAAqB,CAAC;AAC/C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMG,gBAAgB,GAAG,CAACT,QAA4B,EAAEC,eAAmC,KAAa;EAC7G,IAAID,QAAQ,IAAIC,eAAe,EAAE;IAC/B,MAAMS,MAAM,GAAI,CAACN,UAAU,CAACJ,QAAQ,CAAC,GAAGI,UAAU,CAACH,eAAe,CAAC,IAAIG,UAAU,CAACH,eAAe,CAAC,GAAI,GAAG;IACzG,IAAIO,QAAQ,CAACE,MAAM,CAAC,EAAE,OAAOA,MAAM;EACrC;EACA,OAAO,CAAC;AACV,CAAC"},"metadata":{},"sourceType":"module"}