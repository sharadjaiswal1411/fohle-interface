{"ast":null,"code":"/**\n * Mnemonist Fixed Reverse Heap\n * =============================\n *\n * Static heap implementation with fixed capacity. It's a \"reverse\" heap\n * because it stores the elements in reverse so we can replace the worst\n * item in logarithmic time. As such, one cannot pop this heap but can only\n * consume it at the end. This structure is very efficient when trying to\n * find the n smallest/largest items from a larger query (k nearest neigbors\n * for instance).\n */\nvar comparators = require('./utils/comparators.js'),\n  Heap = require('./heap.js');\nvar DEFAULT_COMPARATOR = comparators.DEFAULT_COMPARATOR,\n  reverseComparator = comparators.reverseComparator;\n\n/**\n * Helper functions.\n */\n\n/**\n * Function used to sift up.\n *\n * @param {function} compare - Comparison function.\n * @param {array}    heap    - Array storing the heap's data.\n * @param {number}   size    - Heap's true size.\n * @param {number}   i       - Index.\n */\nfunction siftUp(compare, heap, size, i) {\n  var endIndex = size,\n    startIndex = i,\n    item = heap[i],\n    childIndex = 2 * i + 1,\n    rightIndex;\n  while (childIndex < endIndex) {\n    rightIndex = childIndex + 1;\n    if (rightIndex < endIndex && compare(heap[childIndex], heap[rightIndex]) >= 0) {\n      childIndex = rightIndex;\n    }\n    heap[i] = heap[childIndex];\n    i = childIndex;\n    childIndex = 2 * i + 1;\n  }\n  heap[i] = item;\n  Heap.siftDown(compare, heap, startIndex, i);\n}\n\n/**\n * Fully consumes the given heap.\n *\n * @param  {function} ArrayClass - Array class to use.\n * @param  {function} compare    - Comparison function.\n * @param  {array}    heap       - Array storing the heap's data.\n * @param  {number}   size       - True size of the heap.\n * @return {array}\n */\nfunction consume(ArrayClass, compare, heap, size) {\n  var l = size,\n    i = l;\n  var array = new ArrayClass(size),\n    lastItem,\n    item;\n  while (i > 0) {\n    lastItem = heap[--i];\n    if (i !== 0) {\n      item = heap[0];\n      heap[0] = lastItem;\n      siftUp(compare, heap, --size, 0);\n      lastItem = item;\n    }\n    array[i] = lastItem;\n  }\n  return array;\n}\n\n/**\n * Binary Minimum FixedReverseHeap.\n *\n * @constructor\n * @param {function} ArrayClass - The class of array to use.\n * @param {function} comparator - Comparator function.\n * @param {number}   capacity   - Maximum number of items to keep.\n */\nfunction FixedReverseHeap(ArrayClass, comparator, capacity) {\n  // Comparator can be omitted\n  if (arguments.length === 2) {\n    capacity = comparator;\n    comparator = null;\n  }\n  this.ArrayClass = ArrayClass;\n  this.capacity = capacity;\n  this.items = new ArrayClass(capacity);\n  this.clear();\n  this.comparator = comparator || DEFAULT_COMPARATOR;\n  if (typeof capacity !== 'number' && capacity <= 0) throw new Error('mnemonist/FixedReverseHeap.constructor: capacity should be a number > 0.');\n  if (typeof this.comparator !== 'function') throw new Error('mnemonist/FixedReverseHeap.constructor: given comparator should be a function.');\n  this.comparator = reverseComparator(this.comparator);\n}\n\n/**\n * Method used to clear the heap.\n *\n * @return {undefined}\n */\nFixedReverseHeap.prototype.clear = function () {\n  // Properties\n  this.size = 0;\n};\n\n/**\n * Method used to push an item into the heap.\n *\n * @param  {any}    item - Item to push.\n * @return {number}\n */\nFixedReverseHeap.prototype.push = function (item) {\n  // Still some place\n  if (this.size < this.capacity) {\n    this.items[this.size] = item;\n    Heap.siftDown(this.comparator, this.items, 0, this.size);\n    this.size++;\n  }\n\n  // Heap is full, we need to replace worst item\n  else {\n    if (this.comparator(item, this.items[0]) > 0) Heap.replace(this.comparator, this.items, item);\n  }\n  return this.size;\n};\n\n/**\n * Method used to peek the worst item in the heap.\n *\n * @return {any}\n */\nFixedReverseHeap.prototype.peek = function () {\n  return this.items[0];\n};\n\n/**\n * Method used to consume the heap fully and return its items as a sorted array.\n *\n * @return {array}\n */\nFixedReverseHeap.prototype.consume = function () {\n  var items = consume(this.ArrayClass, this.comparator, this.items, this.size);\n  this.size = 0;\n  return items;\n};\n\n/**\n * Method used to convert the heap to an array. Note that it basically clone\n * the heap and consumes it completely. This is hardly performant.\n *\n * @return {array}\n */\nFixedReverseHeap.prototype.toArray = function () {\n  return consume(this.ArrayClass, this.comparator, this.items.slice(0, this.size), this.size);\n};\n\n/**\n * Convenience known methods.\n */\nFixedReverseHeap.prototype.inspect = function () {\n  var proxy = this.toArray();\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(proxy, 'constructor', {\n    value: FixedReverseHeap,\n    enumerable: false\n  });\n  return proxy;\n};\nif (typeof Symbol !== 'undefined') FixedReverseHeap.prototype[Symbol.for('nodejs.util.inspect.custom')] = FixedReverseHeap.prototype.inspect;\n\n/**\n * Exporting.\n */\nmodule.exports = FixedReverseHeap;","map":{"version":3,"names":["comparators","require","Heap","DEFAULT_COMPARATOR","reverseComparator","siftUp","compare","heap","size","i","endIndex","startIndex","item","childIndex","rightIndex","siftDown","consume","ArrayClass","l","array","lastItem","FixedReverseHeap","comparator","capacity","arguments","length","items","clear","Error","prototype","push","replace","peek","toArray","slice","inspect","proxy","Object","defineProperty","value","enumerable","Symbol","for","module","exports"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/mnemonist/fixed-reverse-heap.js"],"sourcesContent":["/**\n * Mnemonist Fixed Reverse Heap\n * =============================\n *\n * Static heap implementation with fixed capacity. It's a \"reverse\" heap\n * because it stores the elements in reverse so we can replace the worst\n * item in logarithmic time. As such, one cannot pop this heap but can only\n * consume it at the end. This structure is very efficient when trying to\n * find the n smallest/largest items from a larger query (k nearest neigbors\n * for instance).\n */\nvar comparators = require('./utils/comparators.js'),\n    Heap = require('./heap.js');\n\nvar DEFAULT_COMPARATOR = comparators.DEFAULT_COMPARATOR,\n    reverseComparator = comparators.reverseComparator;\n\n/**\n * Helper functions.\n */\n\n/**\n * Function used to sift up.\n *\n * @param {function} compare - Comparison function.\n * @param {array}    heap    - Array storing the heap's data.\n * @param {number}   size    - Heap's true size.\n * @param {number}   i       - Index.\n */\nfunction siftUp(compare, heap, size, i) {\n  var endIndex = size,\n      startIndex = i,\n      item = heap[i],\n      childIndex = 2 * i + 1,\n      rightIndex;\n\n  while (childIndex < endIndex) {\n    rightIndex = childIndex + 1;\n\n    if (\n      rightIndex < endIndex &&\n      compare(heap[childIndex], heap[rightIndex]) >= 0\n    ) {\n      childIndex = rightIndex;\n    }\n\n    heap[i] = heap[childIndex];\n    i = childIndex;\n    childIndex = 2 * i + 1;\n  }\n\n  heap[i] = item;\n  Heap.siftDown(compare, heap, startIndex, i);\n}\n\n/**\n * Fully consumes the given heap.\n *\n * @param  {function} ArrayClass - Array class to use.\n * @param  {function} compare    - Comparison function.\n * @param  {array}    heap       - Array storing the heap's data.\n * @param  {number}   size       - True size of the heap.\n * @return {array}\n */\nfunction consume(ArrayClass, compare, heap, size) {\n  var l = size,\n      i = l;\n\n  var array = new ArrayClass(size),\n      lastItem,\n      item;\n\n  while (i > 0) {\n    lastItem = heap[--i];\n\n    if (i !== 0) {\n      item = heap[0];\n      heap[0] = lastItem;\n      siftUp(compare, heap, --size, 0);\n      lastItem = item;\n    }\n\n    array[i] = lastItem;\n  }\n\n  return array;\n}\n\n/**\n * Binary Minimum FixedReverseHeap.\n *\n * @constructor\n * @param {function} ArrayClass - The class of array to use.\n * @param {function} comparator - Comparator function.\n * @param {number}   capacity   - Maximum number of items to keep.\n */\nfunction FixedReverseHeap(ArrayClass, comparator, capacity) {\n\n  // Comparator can be omitted\n  if (arguments.length === 2) {\n    capacity = comparator;\n    comparator = null;\n  }\n\n  this.ArrayClass = ArrayClass;\n  this.capacity = capacity;\n\n  this.items = new ArrayClass(capacity);\n  this.clear();\n  this.comparator = comparator || DEFAULT_COMPARATOR;\n\n  if (typeof capacity !== 'number' && capacity <= 0)\n    throw new Error('mnemonist/FixedReverseHeap.constructor: capacity should be a number > 0.');\n\n  if (typeof this.comparator !== 'function')\n    throw new Error('mnemonist/FixedReverseHeap.constructor: given comparator should be a function.');\n\n  this.comparator = reverseComparator(this.comparator);\n}\n\n/**\n * Method used to clear the heap.\n *\n * @return {undefined}\n */\nFixedReverseHeap.prototype.clear = function() {\n\n  // Properties\n  this.size = 0;\n};\n\n/**\n * Method used to push an item into the heap.\n *\n * @param  {any}    item - Item to push.\n * @return {number}\n */\nFixedReverseHeap.prototype.push = function(item) {\n\n  // Still some place\n  if (this.size < this.capacity) {\n    this.items[this.size] = item;\n    Heap.siftDown(this.comparator, this.items, 0, this.size);\n    this.size++;\n  }\n\n  // Heap is full, we need to replace worst item\n  else {\n\n    if (this.comparator(item, this.items[0]) > 0)\n      Heap.replace(this.comparator, this.items, item);\n  }\n\n  return this.size;\n};\n\n/**\n * Method used to peek the worst item in the heap.\n *\n * @return {any}\n */\nFixedReverseHeap.prototype.peek = function() {\n  return this.items[0];\n};\n\n/**\n * Method used to consume the heap fully and return its items as a sorted array.\n *\n * @return {array}\n */\nFixedReverseHeap.prototype.consume = function() {\n  var items = consume(this.ArrayClass, this.comparator, this.items, this.size);\n  this.size = 0;\n\n  return items;\n};\n\n/**\n * Method used to convert the heap to an array. Note that it basically clone\n * the heap and consumes it completely. This is hardly performant.\n *\n * @return {array}\n */\nFixedReverseHeap.prototype.toArray = function() {\n  return consume(this.ArrayClass, this.comparator, this.items.slice(0, this.size), this.size);\n};\n\n/**\n * Convenience known methods.\n */\nFixedReverseHeap.prototype.inspect = function() {\n  var proxy = this.toArray();\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(proxy, 'constructor', {\n    value: FixedReverseHeap,\n    enumerable: false\n  });\n\n  return proxy;\n};\n\nif (typeof Symbol !== 'undefined')\n  FixedReverseHeap.prototype[Symbol.for('nodejs.util.inspect.custom')] = FixedReverseHeap.prototype.inspect;\n\n/**\n * Exporting.\n */\nmodule.exports = FixedReverseHeap;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,WAAW,GAAGC,OAAO,CAAC,wBAAwB,CAAC;EAC/CC,IAAI,GAAGD,OAAO,CAAC,WAAW,CAAC;AAE/B,IAAIE,kBAAkB,GAAGH,WAAW,CAACG,kBAAkB;EACnDC,iBAAiB,GAAGJ,WAAW,CAACI,iBAAiB;;AAErD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,MAAM,CAACC,OAAO,EAAEC,IAAI,EAAEC,IAAI,EAAEC,CAAC,EAAE;EACtC,IAAIC,QAAQ,GAAGF,IAAI;IACfG,UAAU,GAAGF,CAAC;IACdG,IAAI,GAAGL,IAAI,CAACE,CAAC,CAAC;IACdI,UAAU,GAAG,CAAC,GAAGJ,CAAC,GAAG,CAAC;IACtBK,UAAU;EAEd,OAAOD,UAAU,GAAGH,QAAQ,EAAE;IAC5BI,UAAU,GAAGD,UAAU,GAAG,CAAC;IAE3B,IACEC,UAAU,GAAGJ,QAAQ,IACrBJ,OAAO,CAACC,IAAI,CAACM,UAAU,CAAC,EAAEN,IAAI,CAACO,UAAU,CAAC,CAAC,IAAI,CAAC,EAChD;MACAD,UAAU,GAAGC,UAAU;IACzB;IAEAP,IAAI,CAACE,CAAC,CAAC,GAAGF,IAAI,CAACM,UAAU,CAAC;IAC1BJ,CAAC,GAAGI,UAAU;IACdA,UAAU,GAAG,CAAC,GAAGJ,CAAC,GAAG,CAAC;EACxB;EAEAF,IAAI,CAACE,CAAC,CAAC,GAAGG,IAAI;EACdV,IAAI,CAACa,QAAQ,CAACT,OAAO,EAAEC,IAAI,EAAEI,UAAU,EAAEF,CAAC,CAAC;AAC7C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASO,OAAO,CAACC,UAAU,EAAEX,OAAO,EAAEC,IAAI,EAAEC,IAAI,EAAE;EAChD,IAAIU,CAAC,GAAGV,IAAI;IACRC,CAAC,GAAGS,CAAC;EAET,IAAIC,KAAK,GAAG,IAAIF,UAAU,CAACT,IAAI,CAAC;IAC5BY,QAAQ;IACRR,IAAI;EAER,OAAOH,CAAC,GAAG,CAAC,EAAE;IACZW,QAAQ,GAAGb,IAAI,CAAC,EAAEE,CAAC,CAAC;IAEpB,IAAIA,CAAC,KAAK,CAAC,EAAE;MACXG,IAAI,GAAGL,IAAI,CAAC,CAAC,CAAC;MACdA,IAAI,CAAC,CAAC,CAAC,GAAGa,QAAQ;MAClBf,MAAM,CAACC,OAAO,EAAEC,IAAI,EAAE,EAAEC,IAAI,EAAE,CAAC,CAAC;MAChCY,QAAQ,GAAGR,IAAI;IACjB;IAEAO,KAAK,CAACV,CAAC,CAAC,GAAGW,QAAQ;EACrB;EAEA,OAAOD,KAAK;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,gBAAgB,CAACJ,UAAU,EAAEK,UAAU,EAAEC,QAAQ,EAAE;EAE1D;EACA,IAAIC,SAAS,CAACC,MAAM,KAAK,CAAC,EAAE;IAC1BF,QAAQ,GAAGD,UAAU;IACrBA,UAAU,GAAG,IAAI;EACnB;EAEA,IAAI,CAACL,UAAU,GAAGA,UAAU;EAC5B,IAAI,CAACM,QAAQ,GAAGA,QAAQ;EAExB,IAAI,CAACG,KAAK,GAAG,IAAIT,UAAU,CAACM,QAAQ,CAAC;EACrC,IAAI,CAACI,KAAK,EAAE;EACZ,IAAI,CAACL,UAAU,GAAGA,UAAU,IAAInB,kBAAkB;EAElD,IAAI,OAAOoB,QAAQ,KAAK,QAAQ,IAAIA,QAAQ,IAAI,CAAC,EAC/C,MAAM,IAAIK,KAAK,CAAC,0EAA0E,CAAC;EAE7F,IAAI,OAAO,IAAI,CAACN,UAAU,KAAK,UAAU,EACvC,MAAM,IAAIM,KAAK,CAAC,gFAAgF,CAAC;EAEnG,IAAI,CAACN,UAAU,GAAGlB,iBAAiB,CAAC,IAAI,CAACkB,UAAU,CAAC;AACtD;;AAEA;AACA;AACA;AACA;AACA;AACAD,gBAAgB,CAACQ,SAAS,CAACF,KAAK,GAAG,YAAW;EAE5C;EACA,IAAI,CAACnB,IAAI,GAAG,CAAC;AACf,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACAa,gBAAgB,CAACQ,SAAS,CAACC,IAAI,GAAG,UAASlB,IAAI,EAAE;EAE/C;EACA,IAAI,IAAI,CAACJ,IAAI,GAAG,IAAI,CAACe,QAAQ,EAAE;IAC7B,IAAI,CAACG,KAAK,CAAC,IAAI,CAAClB,IAAI,CAAC,GAAGI,IAAI;IAC5BV,IAAI,CAACa,QAAQ,CAAC,IAAI,CAACO,UAAU,EAAE,IAAI,CAACI,KAAK,EAAE,CAAC,EAAE,IAAI,CAAClB,IAAI,CAAC;IACxD,IAAI,CAACA,IAAI,EAAE;EACb;;EAEA;EAAA,KACK;IAEH,IAAI,IAAI,CAACc,UAAU,CAACV,IAAI,EAAE,IAAI,CAACc,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAC1CxB,IAAI,CAAC6B,OAAO,CAAC,IAAI,CAACT,UAAU,EAAE,IAAI,CAACI,KAAK,EAAEd,IAAI,CAAC;EACnD;EAEA,OAAO,IAAI,CAACJ,IAAI;AAClB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAa,gBAAgB,CAACQ,SAAS,CAACG,IAAI,GAAG,YAAW;EAC3C,OAAO,IAAI,CAACN,KAAK,CAAC,CAAC,CAAC;AACtB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAL,gBAAgB,CAACQ,SAAS,CAACb,OAAO,GAAG,YAAW;EAC9C,IAAIU,KAAK,GAAGV,OAAO,CAAC,IAAI,CAACC,UAAU,EAAE,IAAI,CAACK,UAAU,EAAE,IAAI,CAACI,KAAK,EAAE,IAAI,CAAClB,IAAI,CAAC;EAC5E,IAAI,CAACA,IAAI,GAAG,CAAC;EAEb,OAAOkB,KAAK;AACd,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACAL,gBAAgB,CAACQ,SAAS,CAACI,OAAO,GAAG,YAAW;EAC9C,OAAOjB,OAAO,CAAC,IAAI,CAACC,UAAU,EAAE,IAAI,CAACK,UAAU,EAAE,IAAI,CAACI,KAAK,CAACQ,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC1B,IAAI,CAAC,EAAE,IAAI,CAACA,IAAI,CAAC;AAC7F,CAAC;;AAED;AACA;AACA;AACAa,gBAAgB,CAACQ,SAAS,CAACM,OAAO,GAAG,YAAW;EAC9C,IAAIC,KAAK,GAAG,IAAI,CAACH,OAAO,EAAE;;EAE1B;EACAI,MAAM,CAACC,cAAc,CAACF,KAAK,EAAE,aAAa,EAAE;IAC1CG,KAAK,EAAElB,gBAAgB;IACvBmB,UAAU,EAAE;EACd,CAAC,CAAC;EAEF,OAAOJ,KAAK;AACd,CAAC;AAED,IAAI,OAAOK,MAAM,KAAK,WAAW,EAC/BpB,gBAAgB,CAACQ,SAAS,CAACY,MAAM,CAACC,GAAG,CAAC,4BAA4B,CAAC,CAAC,GAAGrB,gBAAgB,CAACQ,SAAS,CAACM,OAAO;;AAE3G;AACA;AACA;AACAQ,MAAM,CAACC,OAAO,GAAGvB,gBAAgB"},"metadata":{},"sourceType":"script"}