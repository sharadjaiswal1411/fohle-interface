{"ast":null,"code":"import dayjs from 'dayjs';\nimport utc from 'dayjs/plugin/utc';\nimport weekOfYear from 'dayjs/plugin/weekOfYear';\nimport gql from 'graphql-tag';\n// format dayjs with the libraries that we need\ndayjs.extend(utc);\ndayjs.extend(weekOfYear);\nconst ONE_DAY_UNIX = 24 * 60 * 60;\nconst POOL_CHART = gql`\n  query poolDayDatas($startTime: Int!, $skip: Int!, $address: Bytes!) {\n    poolDayDatas(\n      first: 1000\n      skip: $skip\n      where: { pool: $address, date_gt: $startTime }\n      orderBy: date\n      orderDirection: asc\n      subgraphError: allow\n    ) {\n      date\n      volumeUSD\n      tvlUSD\n      feesUSD\n      pool {\n        feeTier\n      }\n    }\n  }\n`;\nexport async function fetchPoolChartData(address, client) {\n  let data = [];\n  const startTimestamp = 1619170975;\n  const endTimestamp = dayjs.utc().unix();\n  let error = false;\n  let skip = 0;\n  let allFound = false;\n  try {\n    while (!allFound) {\n      const {\n        data: chartResData,\n        error,\n        loading\n      } = await client.query({\n        query: POOL_CHART,\n        variables: {\n          address,\n          startTime: startTimestamp,\n          skip\n        },\n        fetchPolicy: 'cache-first'\n      });\n      if (!loading) {\n        skip += 1000;\n        if (chartResData.poolDayDatas.length < 1000 || error) {\n          allFound = true;\n        }\n        if (chartResData) {\n          data = data.concat(chartResData.poolDayDatas);\n        }\n      }\n    }\n  } catch {\n    error = true;\n  }\n  if (data) {\n    var _firstEntry$date, _firstEntry$totalValu;\n    const formattedExisting = data.reduce((accum, dayData) => {\n      const roundedDate = parseInt((dayData.date / ONE_DAY_UNIX).toFixed(0));\n      const feePercent = parseFloat(dayData.pool.feeTier) / 10000;\n      const tvlAdjust = (dayData === null || dayData === void 0 ? void 0 : dayData.volumeUSD) ? parseFloat(dayData.volumeUSD) * feePercent : 0;\n      accum[roundedDate] = {\n        date: dayData.date,\n        volumeUSD: parseFloat(dayData.volumeUSD),\n        totalValueLockedUSD: parseFloat(dayData.tvlUSD) - tvlAdjust,\n        feesUSD: parseFloat(dayData.feesUSD)\n      };\n      return accum;\n    }, {});\n    const firstEntry = formattedExisting[parseInt(Object.keys(formattedExisting)[0])];\n\n    // fill in empty days ( there will be no day datas if no trades made that day )\n    let timestamp = (_firstEntry$date = firstEntry === null || firstEntry === void 0 ? void 0 : firstEntry.date) !== null && _firstEntry$date !== void 0 ? _firstEntry$date : startTimestamp;\n    let latestTvl = (_firstEntry$totalValu = firstEntry === null || firstEntry === void 0 ? void 0 : firstEntry.totalValueLockedUSD) !== null && _firstEntry$totalValu !== void 0 ? _firstEntry$totalValu : 0;\n    while (timestamp < endTimestamp - ONE_DAY_UNIX) {\n      const nextDay = timestamp + ONE_DAY_UNIX;\n      const currentDayIndex = parseInt((nextDay / ONE_DAY_UNIX).toFixed(0));\n      if (!Object.keys(formattedExisting).includes(currentDayIndex.toString())) {\n        formattedExisting[currentDayIndex] = {\n          date: nextDay,\n          volumeUSD: 0,\n          totalValueLockedUSD: latestTvl,\n          feesUSD: 0\n        };\n      } else {\n        latestTvl = formattedExisting[currentDayIndex].totalValueLockedUSD;\n      }\n      timestamp = nextDay;\n    }\n    const dateMap = Object.keys(formattedExisting).map(key => {\n      return formattedExisting[parseInt(key)];\n    });\n    return {\n      data: dateMap,\n      error: false\n    };\n  } else {\n    return {\n      data: undefined,\n      error\n    };\n  }\n}","map":{"version":3,"names":["dayjs","utc","weekOfYear","gql","extend","ONE_DAY_UNIX","POOL_CHART","fetchPoolChartData","address","client","data","startTimestamp","endTimestamp","unix","error","skip","allFound","chartResData","loading","query","variables","startTime","fetchPolicy","poolDayDatas","length","concat","formattedExisting","reduce","accum","dayData","roundedDate","parseInt","date","toFixed","feePercent","parseFloat","pool","feeTier","tvlAdjust","volumeUSD","totalValueLockedUSD","tvlUSD","feesUSD","firstEntry","Object","keys","timestamp","latestTvl","nextDay","currentDayIndex","includes","toString","dateMap","map","key","undefined"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/data/pools/chartData.ts"],"sourcesContent":["import { ApolloClient, NormalizedCacheObject } from '@apollo/client'\nimport dayjs from 'dayjs'\nimport utc from 'dayjs/plugin/utc'\nimport weekOfYear from 'dayjs/plugin/weekOfYear'\nimport gql from 'graphql-tag'\nimport { PoolChartEntry } from 'state/pools/reducer'\n\n// format dayjs with the libraries that we need\ndayjs.extend(utc)\ndayjs.extend(weekOfYear)\nconst ONE_DAY_UNIX = 24 * 60 * 60\n\nconst POOL_CHART = gql`\n  query poolDayDatas($startTime: Int!, $skip: Int!, $address: Bytes!) {\n    poolDayDatas(\n      first: 1000\n      skip: $skip\n      where: { pool: $address, date_gt: $startTime }\n      orderBy: date\n      orderDirection: asc\n      subgraphError: allow\n    ) {\n      date\n      volumeUSD\n      tvlUSD\n      feesUSD\n      pool {\n        feeTier\n      }\n    }\n  }\n`\n\ninterface ChartResults {\n  poolDayDatas: {\n    date: number\n    volumeUSD: string\n    tvlUSD: string\n    feesUSD: string\n    pool: {\n      feeTier: string\n    }\n  }[]\n}\n\nexport async function fetchPoolChartData(address: string, client: ApolloClient<NormalizedCacheObject>) {\n  let data: {\n    date: number\n    volumeUSD: string\n    tvlUSD: string\n    feesUSD: string\n    pool: {\n      feeTier: string\n    }\n  }[] = []\n  const startTimestamp = 1619170975\n  const endTimestamp = dayjs.utc().unix()\n\n  let error = false\n  let skip = 0\n  let allFound = false\n\n  try {\n    while (!allFound) {\n      const {\n        data: chartResData,\n        error,\n        loading,\n      } = await client.query<ChartResults>({\n        query: POOL_CHART,\n        variables: {\n          address,\n          startTime: startTimestamp,\n          skip,\n        },\n        fetchPolicy: 'cache-first',\n      })\n      if (!loading) {\n        skip += 1000\n        if (chartResData.poolDayDatas.length < 1000 || error) {\n          allFound = true\n        }\n        if (chartResData) {\n          data = data.concat(chartResData.poolDayDatas)\n        }\n      }\n    }\n  } catch {\n    error = true\n  }\n\n  if (data) {\n    const formattedExisting = data.reduce((accum: { [date: number]: PoolChartEntry }, dayData) => {\n      const roundedDate = parseInt((dayData.date / ONE_DAY_UNIX).toFixed(0))\n      const feePercent = parseFloat(dayData.pool.feeTier) / 10000\n      const tvlAdjust = dayData?.volumeUSD ? parseFloat(dayData.volumeUSD) * feePercent : 0\n\n      accum[roundedDate] = {\n        date: dayData.date,\n        volumeUSD: parseFloat(dayData.volumeUSD),\n        totalValueLockedUSD: parseFloat(dayData.tvlUSD) - tvlAdjust,\n        feesUSD: parseFloat(dayData.feesUSD),\n      }\n      return accum\n    }, {})\n\n    const firstEntry = formattedExisting[parseInt(Object.keys(formattedExisting)[0])]\n\n    // fill in empty days ( there will be no day datas if no trades made that day )\n    let timestamp = firstEntry?.date ?? startTimestamp\n    let latestTvl = firstEntry?.totalValueLockedUSD ?? 0\n    while (timestamp < endTimestamp - ONE_DAY_UNIX) {\n      const nextDay = timestamp + ONE_DAY_UNIX\n      const currentDayIndex = parseInt((nextDay / ONE_DAY_UNIX).toFixed(0))\n      if (!Object.keys(formattedExisting).includes(currentDayIndex.toString())) {\n        formattedExisting[currentDayIndex] = {\n          date: nextDay,\n          volumeUSD: 0,\n          totalValueLockedUSD: latestTvl,\n          feesUSD: 0,\n        }\n      } else {\n        latestTvl = formattedExisting[currentDayIndex].totalValueLockedUSD\n      }\n      timestamp = nextDay\n    }\n\n    const dateMap = Object.keys(formattedExisting).map((key) => {\n      return formattedExisting[parseInt(key)]\n    })\n\n    return {\n      data: dateMap,\n      error: false,\n    }\n  } else {\n    return {\n      data: undefined,\n      error,\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}