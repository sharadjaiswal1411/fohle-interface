{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Seaport = void 0;\nvar multicall_1 = require(\"@0xsequence/multicall\");\nvar ethers_1 = require(\"ethers\");\nvar utils_1 = require(\"ethers/lib/utils\");\nvar Seaport_1 = require(\"./abi/Seaport\");\nvar constants_1 = require(\"./constants\");\nvar approval_1 = require(\"./utils/approval\");\nvar balanceAndApprovalCheck_1 = require(\"./utils/balanceAndApprovalCheck\");\nvar fulfill_1 = require(\"./utils/fulfill\");\nvar item_1 = require(\"./utils/item\");\nvar order_1 = require(\"./utils/order\");\nvar usecase_1 = require(\"./utils/usecase\");\nvar Seaport = /** @class */function () {\n  /**\n   * @param providerOrSigner - The provider or signer to use for web3-related calls\n   * @param considerationConfig - A config to provide flexibility in the usage of Seaport\n   */\n  function Seaport(providerOrSigner, _a) {\n    var _b;\n    var _c = _a === void 0 ? {} : _a,\n      overrides = _c.overrides,\n      // Five minute buffer\n      _d = _c.ascendingAmountFulfillmentBuffer,\n      // Five minute buffer\n      ascendingAmountFulfillmentBuffer = _d === void 0 ? 300 : _d,\n      _e = _c.balanceAndApprovalChecksOnOrderCreation,\n      balanceAndApprovalChecksOnOrderCreation = _e === void 0 ? true : _e,\n      conduitKeyToConduit = _c.conduitKeyToConduit;\n    var _f, _g;\n    this.OPENSEA_CONDUIT_KEY = constants_1.OPENSEA_CONDUIT_KEY;\n    /**\n     * Calculates the order hash of order components so we can forgo executing a request to the contract\n     * This saves us RPC calls and latency.\n     */\n    this.getOrderHash = function (orderComponents) {\n      var offerItemTypeString = \"OfferItem(uint8 itemType,address token,uint256 identifierOrCriteria,uint256 startAmount,uint256 endAmount)\";\n      var considerationItemTypeString = \"ConsiderationItem(uint8 itemType,address token,uint256 identifierOrCriteria,uint256 startAmount,uint256 endAmount,address recipient)\";\n      var orderComponentsPartialTypeString = \"OrderComponents(address offerer,address zone,OfferItem[] offer,ConsiderationItem[] consideration,uint8 orderType,uint256 startTime,uint256 endTime,bytes32 zoneHash,uint256 salt,bytes32 conduitKey,uint256 counter)\";\n      var orderTypeString = \"\".concat(orderComponentsPartialTypeString).concat(considerationItemTypeString).concat(offerItemTypeString);\n      var offerItemTypeHash = ethers_1.ethers.utils.keccak256(ethers_1.ethers.utils.toUtf8Bytes(offerItemTypeString));\n      var considerationItemTypeHash = ethers_1.ethers.utils.keccak256(ethers_1.ethers.utils.toUtf8Bytes(considerationItemTypeString));\n      var orderTypeHash = ethers_1.ethers.utils.keccak256(ethers_1.ethers.utils.toUtf8Bytes(orderTypeString));\n      var offerHash = ethers_1.ethers.utils.keccak256(\"0x\" + orderComponents.offer.map(function (offerItem) {\n        return ethers_1.ethers.utils.keccak256(\"0x\" + [offerItemTypeHash.slice(2), offerItem.itemType.toString().padStart(64, \"0\"), offerItem.token.slice(2).padStart(64, \"0\"), ethers_1.ethers.BigNumber.from(offerItem.identifierOrCriteria).toHexString().slice(2).padStart(64, \"0\"), ethers_1.ethers.BigNumber.from(offerItem.startAmount).toHexString().slice(2).padStart(64, \"0\"), ethers_1.ethers.BigNumber.from(offerItem.endAmount).toHexString().slice(2).padStart(64, \"0\")].join(\"\")).slice(2);\n      }).join(\"\"));\n      var considerationHash = ethers_1.ethers.utils.keccak256(\"0x\" + orderComponents.consideration.map(function (considerationItem) {\n        return ethers_1.ethers.utils.keccak256(\"0x\" + [considerationItemTypeHash.slice(2), considerationItem.itemType.toString().padStart(64, \"0\"), considerationItem.token.slice(2).padStart(64, \"0\"), ethers_1.ethers.BigNumber.from(considerationItem.identifierOrCriteria).toHexString().slice(2).padStart(64, \"0\"), ethers_1.ethers.BigNumber.from(considerationItem.startAmount).toHexString().slice(2).padStart(64, \"0\"), ethers_1.ethers.BigNumber.from(considerationItem.endAmount).toHexString().slice(2).padStart(64, \"0\"), considerationItem.recipient.slice(2).padStart(64, \"0\")].join(\"\")).slice(2);\n      }).join(\"\"));\n      var derivedOrderHash = ethers_1.ethers.utils.keccak256(\"0x\" + [orderTypeHash.slice(2), orderComponents.offerer.slice(2).padStart(64, \"0\"), orderComponents.zone.slice(2).padStart(64, \"0\"), offerHash.slice(2), considerationHash.slice(2), orderComponents.orderType.toString().padStart(64, \"0\"), ethers_1.ethers.BigNumber.from(orderComponents.startTime).toHexString().slice(2).padStart(64, \"0\"), ethers_1.ethers.BigNumber.from(orderComponents.endTime).toHexString().slice(2).padStart(64, \"0\"), orderComponents.zoneHash.slice(2), orderComponents.salt.slice(2).padStart(64, \"0\"), orderComponents.conduitKey.slice(2).padStart(64, \"0\"), ethers_1.ethers.BigNumber.from(orderComponents.counter).toHexString().slice(2).padStart(64, \"0\")].join(\"\"));\n      return derivedOrderHash;\n    };\n    var provider = providerOrSigner instanceof ethers_1.providers.Provider ? providerOrSigner : providerOrSigner.provider;\n    this.signer = providerOrSigner._isSigner ? providerOrSigner : undefined;\n    if (!provider) {\n      throw new Error(\"Either a provider or custom signer with provider must be provided\");\n    }\n    this.provider = provider;\n    this.multicallProvider = new multicall_1.providers.MulticallProvider(this.provider);\n    this.contract = new ethers_1.Contract((_f = overrides === null || overrides === void 0 ? void 0 : overrides.contractAddress) !== null && _f !== void 0 ? _f : constants_1.CROSS_CHAIN_SEAPORT_ADDRESS, Seaport_1.SeaportABI, this.multicallProvider);\n    this.config = {\n      ascendingAmountFulfillmentBuffer: ascendingAmountFulfillmentBuffer,\n      balanceAndApprovalChecksOnOrderCreation: balanceAndApprovalChecksOnOrderCreation,\n      conduitKeyToConduit: __assign(__assign(__assign({}, constants_1.KNOWN_CONDUIT_KEYS_TO_CONDUIT), (_b = {}, _b[constants_1.NO_CONDUIT] = this.contract.address, _b)), conduitKeyToConduit)\n    };\n    this.defaultConduitKey = (_g = overrides === null || overrides === void 0 ? void 0 : overrides.defaultConduitKey) !== null && _g !== void 0 ? _g : constants_1.NO_CONDUIT;\n  }\n  Seaport.prototype._getSigner = function (accountAddress) {\n    if (this.signer) {\n      return this.signer;\n    }\n    if (!(this.provider instanceof ethers_1.providers.JsonRpcProvider)) {\n      throw new Error(\"Either signer or a JsonRpcProvider must be provided\");\n    }\n    return this.provider.getSigner(accountAddress);\n  };\n  /**\n   * Returns the corresponding order type based on whether it allows partial fills and is restricted by zone\n   *\n   * @param input\n   * @param input.allowPartialFills Whether or not the order can be partially filled\n   * @param input.restrictedByZone Whether or not the order can only be filled/cancelled by the zone\n   * @returns the order type\n   */\n  Seaport.prototype._getOrderTypeFromOrderOptions = function (_a) {\n    var allowPartialFills = _a.allowPartialFills,\n      restrictedByZone = _a.restrictedByZone;\n    if (allowPartialFills) {\n      return restrictedByZone ? constants_1.OrderType.PARTIAL_RESTRICTED : constants_1.OrderType.PARTIAL_OPEN;\n    }\n    return restrictedByZone ? constants_1.OrderType.FULL_RESTRICTED : constants_1.OrderType.FULL_OPEN;\n  };\n  /**\n   * Returns a use case that will create an order.\n   * The use case will contain the list of actions necessary to finish creating an order.\n   * The list of actions will either be an approval if approvals are necessary\n   * or a signature request that will then be supplied into the final Order struct, ready to be fulfilled.\n   *\n   * @param input\n   * @param input.conduitKey The conduitKey key to derive where to source your approvals from. Defaults to 0 which refers to the Seaport contract.\n   *                         Another special value is address(1) will refer to the legacy proxy. All other must derive to the specified address.\n   * @param input.zone The zone of the order. Defaults to the zero address.\n   * @param input.startTime The start time of the order. Defaults to the current unix time.\n   * @param input.endTime The end time of the order. Defaults to \"never end\".\n   *                      It is HIGHLY recommended to pass in an explicit end time\n   * @param input.offer The items you are willing to offer. This is a condensed version of the Seaport struct OfferItem for convenience\n   * @param input.consideration The items that will go to their respective recipients upon receiving your offer.\n   * @param input.counter The counter from which to create the order with. Automatically fetched from the contract if not provided\n   * @param input.allowPartialFills Whether to allow the order to be partially filled\n   * @param input.restrictedByZone Whether the order should be restricted by zone\n   * @param input.fees Convenience array to apply fees onto the order. The fees will be deducted from the\n   *                   existing consideration items and then tacked on as new consideration items\n   * @param input.salt Random salt\n   * @param input.offerer The order's creator address. Defaults to the first address on the provider.\n   * @param accountAddress Optional address for which to create the order with\n   * @returns a use case containing the list of actions needed to be performed in order to create the order\n   */\n  Seaport.prototype.createOrder = function (_a, accountAddress) {\n    var _b;\n    var _c = _a.conduitKey,\n      conduitKey = _c === void 0 ? this.defaultConduitKey : _c,\n      _d = _a.zone,\n      zone = _d === void 0 ? ethers_1.ethers.constants.AddressZero : _d,\n      _e = _a.startTime,\n      startTime = _e === void 0 ? Math.floor(Date.now() / 1000).toString() : _e,\n      _f = _a.endTime,\n      endTime = _f === void 0 ? constants_1.MAX_INT.toString() : _f,\n      offer = _a.offer,\n      consideration = _a.consideration,\n      counter = _a.counter,\n      allowPartialFills = _a.allowPartialFills,\n      restrictedByZone = _a.restrictedByZone,\n      fees = _a.fees,\n      _g = _a.salt,\n      salt = _g === void 0 ? (0, order_1.generateRandomSalt)() : _g;\n    return __awaiter(this, void 0, void 0, function () {\n      var signer, offerer, offerItems, considerationItems, currencies, totalCurrencyAmount, operator, _h, resolvedCounter, balancesAndApprovals, orderType, considerationItemsWithFees, orderParameters, checkBalancesAndApprovals, insufficientApprovals, approvalActions, _j, createOrderAction, actions;\n      var _this = this;\n      return __generator(this, function (_k) {\n        switch (_k.label) {\n          case 0:\n            signer = this._getSigner(accountAddress);\n            return [4 /*yield*/, signer.getAddress()];\n          case 1:\n            offerer = _k.sent();\n            offerItems = offer.map(order_1.mapInputItemToOfferItem);\n            considerationItems = __spreadArray([], __read(consideration.map(function (consideration) {\n              var _a;\n              return __assign(__assign({}, (0, order_1.mapInputItemToOfferItem)(consideration)), {\n                recipient: (_a = consideration.recipient) !== null && _a !== void 0 ? _a : offerer\n              });\n            })), false);\n            if (!(0, order_1.areAllCurrenciesSame)({\n              offer: offerItems,\n              consideration: considerationItems\n            })) {\n              throw new Error(\"All currency tokens in the order must be the same token\");\n            }\n            currencies = __spreadArray(__spreadArray([], __read(offerItems), false), __read(considerationItems), false).filter(item_1.isCurrencyItem);\n            totalCurrencyAmount = (0, order_1.totalItemsAmount)(currencies);\n            operator = this.config.conduitKeyToConduit[conduitKey];\n            return [4 /*yield*/, Promise.all([counter !== null && counter !== void 0 ? counter : this.getCounter(offerer), (0, balanceAndApprovalCheck_1.getBalancesAndApprovals)({\n              owner: offerer,\n              items: offerItems,\n              criterias: [],\n              multicallProvider: this.multicallProvider,\n              operator: operator\n            })])];\n          case 2:\n            _h = __read.apply(void 0, [_k.sent(), 2]), resolvedCounter = _h[0], balancesAndApprovals = _h[1];\n            orderType = this._getOrderTypeFromOrderOptions({\n              allowPartialFills: allowPartialFills,\n              restrictedByZone: restrictedByZone\n            });\n            considerationItemsWithFees = __spreadArray(__spreadArray([], __read((0, order_1.deductFees)(considerationItems, fees)), false), __read(currencies.length ? (_b = fees === null || fees === void 0 ? void 0 : fees.map(function (fee) {\n              return (0, order_1.feeToConsiderationItem)({\n                fee: fee,\n                token: currencies[0].token,\n                baseAmount: totalCurrencyAmount.startAmount,\n                baseEndAmount: totalCurrencyAmount.endAmount\n              });\n            })) !== null && _b !== void 0 ? _b : [] : []), false);\n            orderParameters = {\n              offerer: offerer,\n              zone: zone,\n              // TODO: Placeholder\n              zoneHash: (0, utils_1.formatBytes32String)(resolvedCounter.toString()),\n              startTime: startTime,\n              endTime: endTime,\n              orderType: orderType,\n              offer: offerItems,\n              consideration: considerationItemsWithFees,\n              totalOriginalConsiderationItems: considerationItemsWithFees.length,\n              salt: salt,\n              conduitKey: conduitKey\n            };\n            checkBalancesAndApprovals = this.config.balanceAndApprovalChecksOnOrderCreation;\n            insufficientApprovals = checkBalancesAndApprovals ? (0, balanceAndApprovalCheck_1.validateOfferBalancesAndApprovals)({\n              offer: offerItems,\n              criterias: [],\n              balancesAndApprovals: balancesAndApprovals,\n              throwOnInsufficientBalances: checkBalancesAndApprovals,\n              operator: operator\n            }) : [];\n            if (!checkBalancesAndApprovals) return [3 /*break*/, 4];\n            return [4 /*yield*/, (0, approval_1.getApprovalActions)(insufficientApprovals, signer)];\n          case 3:\n            _j = _k.sent();\n            return [3 /*break*/, 5];\n          case 4:\n            _j = [];\n            _k.label = 5;\n          case 5:\n            approvalActions = _j;\n            createOrderAction = {\n              type: \"create\",\n              getMessageToSign: function () {\n                return _this._getMessageToSign(orderParameters, resolvedCounter);\n              },\n              createOrder: function () {\n                return __awaiter(_this, void 0, void 0, function () {\n                  var signature;\n                  return __generator(this, function (_a) {\n                    switch (_a.label) {\n                      case 0:\n                        return [4 /*yield*/, this.signOrder(orderParameters, resolvedCounter, offerer)];\n                      case 1:\n                        signature = _a.sent();\n                        return [2 /*return*/, {\n                          parameters: __assign(__assign({}, orderParameters), {\n                            counter: resolvedCounter\n                          }),\n                          signature: signature\n                        }];\n                    }\n                  });\n                });\n              }\n            };\n            actions = __spreadArray(__spreadArray([], __read(approvalActions), false), [createOrderAction], false);\n            return [2 /*return*/, {\n              actions: actions,\n              executeAllActions: function () {\n                return (0, usecase_1.executeAllActions)(actions);\n              }\n            }];\n        }\n      });\n    });\n  };\n  /**\n   * Returns the domain data used when signing typed data\n   * @returns domain data\n   */\n  Seaport.prototype._getDomainData = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var chainId;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.provider.getNetwork()];\n          case 1:\n            chainId = _a.sent().chainId;\n            return [2 /*return*/, {\n              name: constants_1.SEAPORT_CONTRACT_NAME,\n              version: constants_1.SEAPORT_CONTRACT_VERSION,\n              chainId: chainId,\n              verifyingContract: this.contract.address\n            }];\n        }\n      });\n    });\n  };\n  /**\n   * Returns a raw message to be signed using EIP-712\n   * @param orderParameters order parameter struct\n   * @param counter counter of the order\n   * @returns JSON string of the message to be signed\n   */\n  Seaport.prototype._getMessageToSign = function (orderParameters, counter) {\n    return __awaiter(this, void 0, void 0, function () {\n      var domainData, orderComponents;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._getDomainData()];\n          case 1:\n            domainData = _a.sent();\n            orderComponents = __assign(__assign({}, orderParameters), {\n              counter: counter\n            });\n            return [2 /*return*/, JSON.stringify(utils_1._TypedDataEncoder.getPayload(domainData, constants_1.EIP_712_ORDER_TYPE, orderComponents))];\n        }\n      });\n    });\n  };\n  /**\n   * Submits a request to your provider to sign the order. Signed orders are used for off-chain order books.\n   * @param orderParameters standard order parameter struct\n   * @param counter counter of the offerer\n   * @param accountAddress optional account address from which to sign the order with.\n   * @returns the order signature\n   */\n  Seaport.prototype.signOrder = function (orderParameters, counter, accountAddress) {\n    return __awaiter(this, void 0, void 0, function () {\n      var signer, domainData, orderComponents, signature;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            signer = this._getSigner(accountAddress);\n            return [4 /*yield*/, this._getDomainData()];\n          case 1:\n            domainData = _a.sent();\n            orderComponents = __assign(__assign({}, orderParameters), {\n              counter: counter\n            });\n            return [4 /*yield*/, signer._signTypedData(domainData, constants_1.EIP_712_ORDER_TYPE, orderComponents)];\n          case 2:\n            signature = _a.sent();\n            // Use EIP-2098 compact signatures to save gas. https://eips.ethereum.org/EIPS/eip-2098\n            return [2 /*return*/, ethers_1.ethers.utils.splitSignature(signature).compact];\n        }\n      });\n    });\n  };\n  /**\n   * Cancels a list of orders so that they are no longer fulfillable.\n   *\n   * @param orders list of order components\n   * @param accountAddress optional account address from which to cancel the orders from.\n   * @returns the set of transaction methods that can be used\n   */\n  Seaport.prototype.cancelOrders = function (orders, accountAddress) {\n    var signer = this._getSigner(accountAddress);\n    return (0, usecase_1.getTransactionMethods)(this.contract.connect(signer), \"cancel\", [orders]);\n  };\n  /**\n   * Bulk cancels all existing orders for a given account\n   * @param offerer the account to bulk cancel orders on\n   * @returns the set of transaction methods that can be used\n   */\n  Seaport.prototype.bulkCancelOrders = function (offerer) {\n    var signer = this._getSigner(offerer);\n    return (0, usecase_1.getTransactionMethods)(this.contract.connect(signer), \"incrementCounter\", []);\n  };\n  /**\n   * Approves a list of orders on-chain. This allows accounts to fulfill the order without requiring\n   * a signature. Can also check if an order is valid using `callStatic`\n   * @param orders list of order structs\n   * @param accountAddress optional account address to approve orders.\n   * @returns the set of transaction methods that can be used\n   */\n  Seaport.prototype.validate = function (orders, accountAddress) {\n    var signer = this._getSigner(accountAddress);\n    return (0, usecase_1.getTransactionMethods)(this.contract.connect(signer), \"validate\", [orders]);\n  };\n  /**\n   * Returns the order status given an order hash\n   * @param orderHash the hash of the order\n   * @returns an order status struct\n   */\n  Seaport.prototype.getOrderStatus = function (orderHash) {\n    return this.contract.getOrderStatus(orderHash);\n  };\n  /**\n   * Gets the counter of a given offerer\n   * @param offerer the offerer to get the counter of\n   * @returns counter as a number\n   */\n  Seaport.prototype.getCounter = function (offerer) {\n    return this.contract.getCounter(offerer).then(function (counter) {\n      return counter.toNumber();\n    });\n  };\n  /**\n   * Fulfills an order through either the basic method or the standard method\n   * Units to fill are denominated by the max possible size of the order, which is the greatest common denominator (GCD).\n   * We expose a helper to get this: getMaximumSizeForOrder\n   * i.e. If the maximum size of an order is 4, supplying 2 as the units to fulfill will fill half of the order: ;\n   * @param input\n   * @param input.order The standard order struct\n   * @param input.unitsToFill the number of units to fill for the given order. Only used if you wish to partially fill an order\n   * @param input.offerCriteria an array of criteria with length equal to the number of offer criteria items\n   * @param input.considerationCriteria an array of criteria with length equal to the number of consideration criteria items\n   * @param input.tips an array of optional condensed consideration items to be added onto a fulfillment\n   * @param input.extraData extra data supplied to the order\n   * @param input.accountAddress optional address from which to fulfill the order from\n   * @param input.conduitKey the conduitKey to source approvals from\n   * @param input.recipientAddress optional recipient to forward the offer to as opposed to the fulfiller.\n   *                               Defaults to the zero address which means the offer goes to the fulfiller\n   * @returns a use case containing the set of approval actions and fulfillment action\n   */\n  Seaport.prototype.fulfillOrder = function (_a) {\n    var order = _a.order,\n      unitsToFill = _a.unitsToFill,\n      _b = _a.offerCriteria,\n      offerCriteria = _b === void 0 ? [] : _b,\n      _c = _a.considerationCriteria,\n      considerationCriteria = _c === void 0 ? [] : _c,\n      _d = _a.tips,\n      tips = _d === void 0 ? [] : _d,\n      _e = _a.extraData,\n      extraData = _e === void 0 ? \"0x\" : _e,\n      accountAddress = _a.accountAddress,\n      _f = _a.conduitKey,\n      conduitKey = _f === void 0 ? this.defaultConduitKey : _f,\n      _g = _a.recipientAddress,\n      recipientAddress = _g === void 0 ? ethers_1.ethers.constants.AddressZero : _g;\n    return __awaiter(this, void 0, void 0, function () {\n      var orderParameters, offerer, offer, consideration, fulfiller, fulfillerAddress, offererOperator, fulfillerOperator, _h, offererBalancesAndApprovals, fulfillerBalancesAndApprovals, currentBlock, orderStatus, currentBlockTimestamp, totalFilled, totalSize, sanitizedOrder, timeBasedItemParams, tipConsiderationItems, isRecipientSelf;\n      return __generator(this, function (_j) {\n        switch (_j.label) {\n          case 0:\n            orderParameters = order.parameters;\n            offerer = orderParameters.offerer, offer = orderParameters.offer, consideration = orderParameters.consideration;\n            fulfiller = this._getSigner(accountAddress);\n            return [4 /*yield*/, fulfiller.getAddress()];\n          case 1:\n            fulfillerAddress = _j.sent();\n            offererOperator = this.config.conduitKeyToConduit[orderParameters.conduitKey];\n            fulfillerOperator = this.config.conduitKeyToConduit[conduitKey];\n            return [4 /*yield*/, Promise.all([(0, balanceAndApprovalCheck_1.getBalancesAndApprovals)({\n              owner: offerer,\n              items: offer,\n              criterias: offerCriteria,\n              multicallProvider: this.multicallProvider,\n              operator: offererOperator\n            }),\n            // Get fulfiller balances and approvals of all items in the set, as offer items\n            // may be received by the fulfiller for standard fulfills\n            (0, balanceAndApprovalCheck_1.getBalancesAndApprovals)({\n              owner: fulfillerAddress,\n              items: __spreadArray(__spreadArray([], __read(offer), false), __read(consideration), false),\n              criterias: __spreadArray(__spreadArray([], __read(offerCriteria), false), __read(considerationCriteria), false),\n              multicallProvider: this.multicallProvider,\n              operator: fulfillerOperator\n            }), this.multicallProvider.getBlock(\"latest\"), this.getOrderStatus(this.getOrderHash(orderParameters))])];\n          case 2:\n            _h = __read.apply(void 0, [_j.sent(), 4]), offererBalancesAndApprovals = _h[0], fulfillerBalancesAndApprovals = _h[1], currentBlock = _h[2], orderStatus = _h[3];\n            currentBlockTimestamp = currentBlock.timestamp;\n            totalFilled = orderStatus.totalFilled, totalSize = orderStatus.totalSize;\n            sanitizedOrder = (0, fulfill_1.validateAndSanitizeFromOrderStatus)(order, orderStatus);\n            timeBasedItemParams = {\n              startTime: sanitizedOrder.parameters.startTime,\n              endTime: sanitizedOrder.parameters.endTime,\n              currentBlockTimestamp: currentBlockTimestamp,\n              ascendingAmountTimestampBuffer: this.config.ascendingAmountFulfillmentBuffer\n            };\n            tipConsiderationItems = tips.map(function (tip) {\n              return __assign(__assign({}, (0, order_1.mapInputItemToOfferItem)(tip)), {\n                recipient: tip.recipient\n              });\n            });\n            isRecipientSelf = recipientAddress === ethers_1.ethers.constants.AddressZero;\n            // We use basic fulfills as they are more optimal for simple and \"hot\" use cases\n            // We cannot use basic fulfill if user is trying to partially fill though.\n            if (!unitsToFill && isRecipientSelf && (0, fulfill_1.shouldUseBasicFulfill)(sanitizedOrder.parameters, totalFilled)) {\n              // TODO: Use fulfiller proxy if there are approvals needed directly, but none needed for proxy\n              return [2 /*return*/, (0, fulfill_1.fulfillBasicOrder)({\n                order: sanitizedOrder,\n                seaportContract: this.contract,\n                offererBalancesAndApprovals: offererBalancesAndApprovals,\n                fulfillerBalancesAndApprovals: fulfillerBalancesAndApprovals,\n                timeBasedItemParams: timeBasedItemParams,\n                conduitKey: conduitKey,\n                offererOperator: offererOperator,\n                fulfillerOperator: fulfillerOperator,\n                signer: fulfiller,\n                tips: tipConsiderationItems\n              })];\n            }\n            // Else, we fallback to the standard fulfill order\n            return [2 /*return*/, (0, fulfill_1.fulfillStandardOrder)({\n              order: sanitizedOrder,\n              unitsToFill: unitsToFill,\n              totalFilled: totalFilled,\n              totalSize: totalSize.eq(0) ? (0, item_1.getMaximumSizeForOrder)(sanitizedOrder) : totalSize,\n              offerCriteria: offerCriteria,\n              considerationCriteria: considerationCriteria,\n              tips: tipConsiderationItems,\n              extraData: extraData,\n              seaportContract: this.contract,\n              offererBalancesAndApprovals: offererBalancesAndApprovals,\n              fulfillerBalancesAndApprovals: fulfillerBalancesAndApprovals,\n              timeBasedItemParams: timeBasedItemParams,\n              conduitKey: conduitKey,\n              signer: fulfiller,\n              offererOperator: offererOperator,\n              fulfillerOperator: fulfillerOperator,\n              recipientAddress: recipientAddress\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * Fulfills an order through best-effort fashion. Orders that fail will not revert the whole transaction\n   * unless there's an issue with approvals or balance checks\n   * @param input\n   * @param input.fulfillOrderDetails list of helper order details\n   * @param input.accountAddress the account to fulfill orders on\n   * @param input.conduitKey the key from which to source approvals from\n   * @param input.recipientAddress optional recipient to forward the offer to as opposed to the fulfiller.\n   *                               Defaults to the zero address which means the offer goes to the fulfiller\n   * @returns a use case containing the set of approval actions and fulfillment action\n   */\n  Seaport.prototype.fulfillOrders = function (_a) {\n    var fulfillOrderDetails = _a.fulfillOrderDetails,\n      accountAddress = _a.accountAddress,\n      _b = _a.conduitKey,\n      conduitKey = _b === void 0 ? this.defaultConduitKey : _b,\n      _c = _a.recipientAddress,\n      recipientAddress = _c === void 0 ? ethers_1.ethers.constants.AddressZero : _c;\n    return __awaiter(this, void 0, void 0, function () {\n      var fulfiller, fulfillerAddress, allOffererOperators, fulfillerOperator, allOfferItems, allConsiderationItems, allOfferCriteria, allConsiderationCriteria, _d, offerersBalancesAndApprovals, fulfillerBalancesAndApprovals, currentBlock, orderStatuses, ordersMetadata;\n      var _this = this;\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            fulfiller = this._getSigner(accountAddress);\n            return [4 /*yield*/, fulfiller.getAddress()];\n          case 1:\n            fulfillerAddress = _e.sent();\n            allOffererOperators = fulfillOrderDetails.map(function (_a) {\n              var order = _a.order;\n              return _this.config.conduitKeyToConduit[order.parameters.conduitKey];\n            });\n            fulfillerOperator = this.config.conduitKeyToConduit[conduitKey];\n            allOfferItems = fulfillOrderDetails.flatMap(function (_a) {\n              var order = _a.order;\n              return order.parameters.offer;\n            });\n            allConsiderationItems = fulfillOrderDetails.flatMap(function (_a) {\n              var order = _a.order;\n              return order.parameters.consideration;\n            });\n            allOfferCriteria = fulfillOrderDetails.flatMap(function (_a) {\n              var _b = _a.offerCriteria,\n                offerCriteria = _b === void 0 ? [] : _b;\n              return offerCriteria;\n            });\n            allConsiderationCriteria = fulfillOrderDetails.flatMap(function (_a) {\n              var _b = _a.considerationCriteria,\n                considerationCriteria = _b === void 0 ? [] : _b;\n              return considerationCriteria;\n            });\n            return [4 /*yield*/, Promise.all([Promise.all(fulfillOrderDetails.map(function (_a, i) {\n              var order = _a.order,\n                _b = _a.offerCriteria,\n                offerCriteria = _b === void 0 ? [] : _b;\n              return (0, balanceAndApprovalCheck_1.getBalancesAndApprovals)({\n                owner: order.parameters.offerer,\n                items: order.parameters.offer,\n                criterias: offerCriteria,\n                operator: allOffererOperators[i],\n                multicallProvider: _this.multicallProvider\n              });\n            })),\n            // Get fulfiller balances and approvals of all items in the set, as offer items\n            // may be received by the fulfiller for standard fulfills\n            (0, balanceAndApprovalCheck_1.getBalancesAndApprovals)({\n              owner: fulfillerAddress,\n              items: __spreadArray(__spreadArray([], __read(allOfferItems), false), __read(allConsiderationItems), false),\n              criterias: __spreadArray(__spreadArray([], __read(allOfferCriteria), false), __read(allConsiderationCriteria), false),\n              operator: fulfillerOperator,\n              multicallProvider: this.multicallProvider\n            }), this.multicallProvider.getBlock(\"latest\"), Promise.all(fulfillOrderDetails.map(function (_a) {\n              var order = _a.order;\n              return _this.getOrderStatus(_this.getOrderHash(order.parameters));\n            }))])];\n          case 2:\n            _d = __read.apply(void 0, [_e.sent(), 4]), offerersBalancesAndApprovals = _d[0], fulfillerBalancesAndApprovals = _d[1], currentBlock = _d[2], orderStatuses = _d[3];\n            ordersMetadata = fulfillOrderDetails.map(function (orderDetails, index) {\n              var _a, _b, _c, _d, _e;\n              return {\n                order: orderDetails.order,\n                unitsToFill: orderDetails.unitsToFill,\n                orderStatus: orderStatuses[index],\n                offerCriteria: (_a = orderDetails.offerCriteria) !== null && _a !== void 0 ? _a : [],\n                considerationCriteria: (_b = orderDetails.considerationCriteria) !== null && _b !== void 0 ? _b : [],\n                tips: (_d = (_c = orderDetails.tips) === null || _c === void 0 ? void 0 : _c.map(function (tip) {\n                  return __assign(__assign({}, (0, order_1.mapInputItemToOfferItem)(tip)), {\n                    recipient: tip.recipient\n                  });\n                })) !== null && _d !== void 0 ? _d : [],\n                extraData: (_e = orderDetails.extraData) !== null && _e !== void 0 ? _e : \"0x\",\n                offererBalancesAndApprovals: offerersBalancesAndApprovals[index],\n                offererOperator: allOffererOperators[index]\n              };\n            });\n            return [2 /*return*/, (0, fulfill_1.fulfillAvailableOrders)({\n              ordersMetadata: ordersMetadata,\n              seaportContract: this.contract,\n              fulfillerBalancesAndApprovals: fulfillerBalancesAndApprovals,\n              currentBlockTimestamp: currentBlock.timestamp,\n              ascendingAmountTimestampBuffer: this.config.ascendingAmountFulfillmentBuffer,\n              fulfillerOperator: fulfillerOperator,\n              signer: fulfiller,\n              conduitKey: conduitKey,\n              recipientAddress: recipientAddress\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * NOTE: Largely incomplete. Does NOT do any balance or approval checks.\n   * Just exposes the bare bones matchOrders where clients will have to supply\n   * their own overrides as needed.\n   * @param input\n   * @param input.orders the list of orders to match\n   * @param input.fulfillments the list of fulfillments to match offer and considerations\n   * @param input.overrides any overrides the client wants, will need to pass in value for matching orders with ETH.\n   * @param input.accountAddress Optional address for which to match the order with\n   * @returns set of transaction methods for matching orders\n   */\n  Seaport.prototype.matchOrders = function (_a) {\n    var orders = _a.orders,\n      fulfillments = _a.fulfillments,\n      overrides = _a.overrides,\n      accountAddress = _a.accountAddress;\n    var signer = this._getSigner(accountAddress);\n    return (0, usecase_1.getTransactionMethods)(this.contract.connect(signer), \"matchOrders\", [orders, fulfillments, overrides]);\n  };\n  return Seaport;\n}();\nexports.Seaport = Seaport;","map":{"version":3,"sources":["../src/seaport.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Seaport = void 0;\nvar multicall_1 = require(\"@0xsequence/multicall\");\nvar ethers_1 = require(\"ethers\");\nvar utils_1 = require(\"ethers/lib/utils\");\nvar Seaport_1 = require(\"./abi/Seaport\");\nvar constants_1 = require(\"./constants\");\nvar approval_1 = require(\"./utils/approval\");\nvar balanceAndApprovalCheck_1 = require(\"./utils/balanceAndApprovalCheck\");\nvar fulfill_1 = require(\"./utils/fulfill\");\nvar item_1 = require(\"./utils/item\");\nvar order_1 = require(\"./utils/order\");\nvar usecase_1 = require(\"./utils/usecase\");\nvar Seaport = /** @class */ (function () {\n    /**\n     * @param providerOrSigner - The provider or signer to use for web3-related calls\n     * @param considerationConfig - A config to provide flexibility in the usage of Seaport\n     */\n    function Seaport(providerOrSigner, _a) {\n        var _b;\n        var _c = _a === void 0 ? {} : _a, overrides = _c.overrides, \n        // Five minute buffer\n        _d = _c.ascendingAmountFulfillmentBuffer, \n        // Five minute buffer\n        ascendingAmountFulfillmentBuffer = _d === void 0 ? 300 : _d, _e = _c.balanceAndApprovalChecksOnOrderCreation, balanceAndApprovalChecksOnOrderCreation = _e === void 0 ? true : _e, conduitKeyToConduit = _c.conduitKeyToConduit;\n        var _f, _g;\n        this.OPENSEA_CONDUIT_KEY = constants_1.OPENSEA_CONDUIT_KEY;\n        /**\n         * Calculates the order hash of order components so we can forgo executing a request to the contract\n         * This saves us RPC calls and latency.\n         */\n        this.getOrderHash = function (orderComponents) {\n            var offerItemTypeString = \"OfferItem(uint8 itemType,address token,uint256 identifierOrCriteria,uint256 startAmount,uint256 endAmount)\";\n            var considerationItemTypeString = \"ConsiderationItem(uint8 itemType,address token,uint256 identifierOrCriteria,uint256 startAmount,uint256 endAmount,address recipient)\";\n            var orderComponentsPartialTypeString = \"OrderComponents(address offerer,address zone,OfferItem[] offer,ConsiderationItem[] consideration,uint8 orderType,uint256 startTime,uint256 endTime,bytes32 zoneHash,uint256 salt,bytes32 conduitKey,uint256 counter)\";\n            var orderTypeString = \"\".concat(orderComponentsPartialTypeString).concat(considerationItemTypeString).concat(offerItemTypeString);\n            var offerItemTypeHash = ethers_1.ethers.utils.keccak256(ethers_1.ethers.utils.toUtf8Bytes(offerItemTypeString));\n            var considerationItemTypeHash = ethers_1.ethers.utils.keccak256(ethers_1.ethers.utils.toUtf8Bytes(considerationItemTypeString));\n            var orderTypeHash = ethers_1.ethers.utils.keccak256(ethers_1.ethers.utils.toUtf8Bytes(orderTypeString));\n            var offerHash = ethers_1.ethers.utils.keccak256(\"0x\" +\n                orderComponents.offer\n                    .map(function (offerItem) {\n                    return ethers_1.ethers.utils\n                        .keccak256(\"0x\" +\n                        [\n                            offerItemTypeHash.slice(2),\n                            offerItem.itemType.toString().padStart(64, \"0\"),\n                            offerItem.token.slice(2).padStart(64, \"0\"),\n                            ethers_1.ethers.BigNumber.from(offerItem.identifierOrCriteria)\n                                .toHexString()\n                                .slice(2)\n                                .padStart(64, \"0\"),\n                            ethers_1.ethers.BigNumber.from(offerItem.startAmount)\n                                .toHexString()\n                                .slice(2)\n                                .padStart(64, \"0\"),\n                            ethers_1.ethers.BigNumber.from(offerItem.endAmount)\n                                .toHexString()\n                                .slice(2)\n                                .padStart(64, \"0\"),\n                        ].join(\"\"))\n                        .slice(2);\n                })\n                    .join(\"\"));\n            var considerationHash = ethers_1.ethers.utils.keccak256(\"0x\" +\n                orderComponents.consideration\n                    .map(function (considerationItem) {\n                    return ethers_1.ethers.utils\n                        .keccak256(\"0x\" +\n                        [\n                            considerationItemTypeHash.slice(2),\n                            considerationItem.itemType.toString().padStart(64, \"0\"),\n                            considerationItem.token.slice(2).padStart(64, \"0\"),\n                            ethers_1.ethers.BigNumber.from(considerationItem.identifierOrCriteria)\n                                .toHexString()\n                                .slice(2)\n                                .padStart(64, \"0\"),\n                            ethers_1.ethers.BigNumber.from(considerationItem.startAmount)\n                                .toHexString()\n                                .slice(2)\n                                .padStart(64, \"0\"),\n                            ethers_1.ethers.BigNumber.from(considerationItem.endAmount)\n                                .toHexString()\n                                .slice(2)\n                                .padStart(64, \"0\"),\n                            considerationItem.recipient.slice(2).padStart(64, \"0\"),\n                        ].join(\"\"))\n                        .slice(2);\n                })\n                    .join(\"\"));\n            var derivedOrderHash = ethers_1.ethers.utils.keccak256(\"0x\" +\n                [\n                    orderTypeHash.slice(2),\n                    orderComponents.offerer.slice(2).padStart(64, \"0\"),\n                    orderComponents.zone.slice(2).padStart(64, \"0\"),\n                    offerHash.slice(2),\n                    considerationHash.slice(2),\n                    orderComponents.orderType.toString().padStart(64, \"0\"),\n                    ethers_1.ethers.BigNumber.from(orderComponents.startTime)\n                        .toHexString()\n                        .slice(2)\n                        .padStart(64, \"0\"),\n                    ethers_1.ethers.BigNumber.from(orderComponents.endTime)\n                        .toHexString()\n                        .slice(2)\n                        .padStart(64, \"0\"),\n                    orderComponents.zoneHash.slice(2),\n                    orderComponents.salt.slice(2).padStart(64, \"0\"),\n                    orderComponents.conduitKey.slice(2).padStart(64, \"0\"),\n                    ethers_1.ethers.BigNumber.from(orderComponents.counter)\n                        .toHexString()\n                        .slice(2)\n                        .padStart(64, \"0\"),\n                ].join(\"\"));\n            return derivedOrderHash;\n        };\n        var provider = providerOrSigner instanceof ethers_1.providers.Provider\n            ? providerOrSigner\n            : providerOrSigner.provider;\n        this.signer = providerOrSigner._isSigner\n            ? providerOrSigner\n            : undefined;\n        if (!provider) {\n            throw new Error(\"Either a provider or custom signer with provider must be provided\");\n        }\n        this.provider = provider;\n        this.multicallProvider = new multicall_1.providers.MulticallProvider(this.provider);\n        this.contract = new ethers_1.Contract((_f = overrides === null || overrides === void 0 ? void 0 : overrides.contractAddress) !== null && _f !== void 0 ? _f : constants_1.CROSS_CHAIN_SEAPORT_ADDRESS, Seaport_1.SeaportABI, this.multicallProvider);\n        this.config = {\n            ascendingAmountFulfillmentBuffer: ascendingAmountFulfillmentBuffer,\n            balanceAndApprovalChecksOnOrderCreation: balanceAndApprovalChecksOnOrderCreation,\n            conduitKeyToConduit: __assign(__assign(__assign({}, constants_1.KNOWN_CONDUIT_KEYS_TO_CONDUIT), (_b = {}, _b[constants_1.NO_CONDUIT] = this.contract.address, _b)), conduitKeyToConduit),\n        };\n        this.defaultConduitKey = (_g = overrides === null || overrides === void 0 ? void 0 : overrides.defaultConduitKey) !== null && _g !== void 0 ? _g : constants_1.NO_CONDUIT;\n    }\n    Seaport.prototype._getSigner = function (accountAddress) {\n        if (this.signer) {\n            return this.signer;\n        }\n        if (!(this.provider instanceof ethers_1.providers.JsonRpcProvider)) {\n            throw new Error(\"Either signer or a JsonRpcProvider must be provided\");\n        }\n        return this.provider.getSigner(accountAddress);\n    };\n    /**\n     * Returns the corresponding order type based on whether it allows partial fills and is restricted by zone\n     *\n     * @param input\n     * @param input.allowPartialFills Whether or not the order can be partially filled\n     * @param input.restrictedByZone Whether or not the order can only be filled/cancelled by the zone\n     * @returns the order type\n     */\n    Seaport.prototype._getOrderTypeFromOrderOptions = function (_a) {\n        var allowPartialFills = _a.allowPartialFills, restrictedByZone = _a.restrictedByZone;\n        if (allowPartialFills) {\n            return restrictedByZone\n                ? constants_1.OrderType.PARTIAL_RESTRICTED\n                : constants_1.OrderType.PARTIAL_OPEN;\n        }\n        return restrictedByZone ? constants_1.OrderType.FULL_RESTRICTED : constants_1.OrderType.FULL_OPEN;\n    };\n    /**\n     * Returns a use case that will create an order.\n     * The use case will contain the list of actions necessary to finish creating an order.\n     * The list of actions will either be an approval if approvals are necessary\n     * or a signature request that will then be supplied into the final Order struct, ready to be fulfilled.\n     *\n     * @param input\n     * @param input.conduitKey The conduitKey key to derive where to source your approvals from. Defaults to 0 which refers to the Seaport contract.\n     *                         Another special value is address(1) will refer to the legacy proxy. All other must derive to the specified address.\n     * @param input.zone The zone of the order. Defaults to the zero address.\n     * @param input.startTime The start time of the order. Defaults to the current unix time.\n     * @param input.endTime The end time of the order. Defaults to \"never end\".\n     *                      It is HIGHLY recommended to pass in an explicit end time\n     * @param input.offer The items you are willing to offer. This is a condensed version of the Seaport struct OfferItem for convenience\n     * @param input.consideration The items that will go to their respective recipients upon receiving your offer.\n     * @param input.counter The counter from which to create the order with. Automatically fetched from the contract if not provided\n     * @param input.allowPartialFills Whether to allow the order to be partially filled\n     * @param input.restrictedByZone Whether the order should be restricted by zone\n     * @param input.fees Convenience array to apply fees onto the order. The fees will be deducted from the\n     *                   existing consideration items and then tacked on as new consideration items\n     * @param input.salt Random salt\n     * @param input.offerer The order's creator address. Defaults to the first address on the provider.\n     * @param accountAddress Optional address for which to create the order with\n     * @returns a use case containing the list of actions needed to be performed in order to create the order\n     */\n    Seaport.prototype.createOrder = function (_a, accountAddress) {\n        var _b;\n        var _c = _a.conduitKey, conduitKey = _c === void 0 ? this.defaultConduitKey : _c, _d = _a.zone, zone = _d === void 0 ? ethers_1.ethers.constants.AddressZero : _d, _e = _a.startTime, startTime = _e === void 0 ? Math.floor(Date.now() / 1000).toString() : _e, _f = _a.endTime, endTime = _f === void 0 ? constants_1.MAX_INT.toString() : _f, offer = _a.offer, consideration = _a.consideration, counter = _a.counter, allowPartialFills = _a.allowPartialFills, restrictedByZone = _a.restrictedByZone, fees = _a.fees, _g = _a.salt, salt = _g === void 0 ? (0, order_1.generateRandomSalt)() : _g;\n        return __awaiter(this, void 0, void 0, function () {\n            var signer, offerer, offerItems, considerationItems, currencies, totalCurrencyAmount, operator, _h, resolvedCounter, balancesAndApprovals, orderType, considerationItemsWithFees, orderParameters, checkBalancesAndApprovals, insufficientApprovals, approvalActions, _j, createOrderAction, actions;\n            var _this = this;\n            return __generator(this, function (_k) {\n                switch (_k.label) {\n                    case 0:\n                        signer = this._getSigner(accountAddress);\n                        return [4 /*yield*/, signer.getAddress()];\n                    case 1:\n                        offerer = _k.sent();\n                        offerItems = offer.map(order_1.mapInputItemToOfferItem);\n                        considerationItems = __spreadArray([], __read(consideration.map(function (consideration) {\n                            var _a;\n                            return (__assign(__assign({}, (0, order_1.mapInputItemToOfferItem)(consideration)), { recipient: (_a = consideration.recipient) !== null && _a !== void 0 ? _a : offerer }));\n                        })), false);\n                        if (!(0, order_1.areAllCurrenciesSame)({\n                            offer: offerItems,\n                            consideration: considerationItems,\n                        })) {\n                            throw new Error(\"All currency tokens in the order must be the same token\");\n                        }\n                        currencies = __spreadArray(__spreadArray([], __read(offerItems), false), __read(considerationItems), false).filter(item_1.isCurrencyItem);\n                        totalCurrencyAmount = (0, order_1.totalItemsAmount)(currencies);\n                        operator = this.config.conduitKeyToConduit[conduitKey];\n                        return [4 /*yield*/, Promise.all([\n                                counter !== null && counter !== void 0 ? counter : this.getCounter(offerer),\n                                (0, balanceAndApprovalCheck_1.getBalancesAndApprovals)({\n                                    owner: offerer,\n                                    items: offerItems,\n                                    criterias: [],\n                                    multicallProvider: this.multicallProvider,\n                                    operator: operator,\n                                }),\n                            ])];\n                    case 2:\n                        _h = __read.apply(void 0, [_k.sent(), 2]), resolvedCounter = _h[0], balancesAndApprovals = _h[1];\n                        orderType = this._getOrderTypeFromOrderOptions({\n                            allowPartialFills: allowPartialFills,\n                            restrictedByZone: restrictedByZone,\n                        });\n                        considerationItemsWithFees = __spreadArray(__spreadArray([], __read((0, order_1.deductFees)(considerationItems, fees)), false), __read((currencies.length\n                            ? (_b = fees === null || fees === void 0 ? void 0 : fees.map(function (fee) {\n                                return (0, order_1.feeToConsiderationItem)({\n                                    fee: fee,\n                                    token: currencies[0].token,\n                                    baseAmount: totalCurrencyAmount.startAmount,\n                                    baseEndAmount: totalCurrencyAmount.endAmount,\n                                });\n                            })) !== null && _b !== void 0 ? _b : []\n                            : [])), false);\n                        orderParameters = {\n                            offerer: offerer,\n                            zone: zone,\n                            // TODO: Placeholder\n                            zoneHash: (0, utils_1.formatBytes32String)(resolvedCounter.toString()),\n                            startTime: startTime,\n                            endTime: endTime,\n                            orderType: orderType,\n                            offer: offerItems,\n                            consideration: considerationItemsWithFees,\n                            totalOriginalConsiderationItems: considerationItemsWithFees.length,\n                            salt: salt,\n                            conduitKey: conduitKey,\n                        };\n                        checkBalancesAndApprovals = this.config.balanceAndApprovalChecksOnOrderCreation;\n                        insufficientApprovals = checkBalancesAndApprovals\n                            ? (0, balanceAndApprovalCheck_1.validateOfferBalancesAndApprovals)({\n                                offer: offerItems,\n                                criterias: [],\n                                balancesAndApprovals: balancesAndApprovals,\n                                throwOnInsufficientBalances: checkBalancesAndApprovals,\n                                operator: operator,\n                            })\n                            : [];\n                        if (!checkBalancesAndApprovals) return [3 /*break*/, 4];\n                        return [4 /*yield*/, (0, approval_1.getApprovalActions)(insufficientApprovals, signer)];\n                    case 3:\n                        _j = _k.sent();\n                        return [3 /*break*/, 5];\n                    case 4:\n                        _j = [];\n                        _k.label = 5;\n                    case 5:\n                        approvalActions = _j;\n                        createOrderAction = {\n                            type: \"create\",\n                            getMessageToSign: function () {\n                                return _this._getMessageToSign(orderParameters, resolvedCounter);\n                            },\n                            createOrder: function () { return __awaiter(_this, void 0, void 0, function () {\n                                var signature;\n                                return __generator(this, function (_a) {\n                                    switch (_a.label) {\n                                        case 0: return [4 /*yield*/, this.signOrder(orderParameters, resolvedCounter, offerer)];\n                                        case 1:\n                                            signature = _a.sent();\n                                            return [2 /*return*/, {\n                                                    parameters: __assign(__assign({}, orderParameters), { counter: resolvedCounter }),\n                                                    signature: signature,\n                                                }];\n                                    }\n                                });\n                            }); },\n                        };\n                        actions = __spreadArray(__spreadArray([], __read(approvalActions), false), [createOrderAction], false);\n                        return [2 /*return*/, {\n                                actions: actions,\n                                executeAllActions: function () {\n                                    return (0, usecase_1.executeAllActions)(actions);\n                                },\n                            }];\n                }\n            });\n        });\n    };\n    /**\n     * Returns the domain data used when signing typed data\n     * @returns domain data\n     */\n    Seaport.prototype._getDomainData = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var chainId;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.provider.getNetwork()];\n                    case 1:\n                        chainId = (_a.sent()).chainId;\n                        return [2 /*return*/, {\n                                name: constants_1.SEAPORT_CONTRACT_NAME,\n                                version: constants_1.SEAPORT_CONTRACT_VERSION,\n                                chainId: chainId,\n                                verifyingContract: this.contract.address,\n                            }];\n                }\n            });\n        });\n    };\n    /**\n     * Returns a raw message to be signed using EIP-712\n     * @param orderParameters order parameter struct\n     * @param counter counter of the order\n     * @returns JSON string of the message to be signed\n     */\n    Seaport.prototype._getMessageToSign = function (orderParameters, counter) {\n        return __awaiter(this, void 0, void 0, function () {\n            var domainData, orderComponents;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._getDomainData()];\n                    case 1:\n                        domainData = _a.sent();\n                        orderComponents = __assign(__assign({}, orderParameters), { counter: counter });\n                        return [2 /*return*/, JSON.stringify(utils_1._TypedDataEncoder.getPayload(domainData, constants_1.EIP_712_ORDER_TYPE, orderComponents))];\n                }\n            });\n        });\n    };\n    /**\n     * Submits a request to your provider to sign the order. Signed orders are used for off-chain order books.\n     * @param orderParameters standard order parameter struct\n     * @param counter counter of the offerer\n     * @param accountAddress optional account address from which to sign the order with.\n     * @returns the order signature\n     */\n    Seaport.prototype.signOrder = function (orderParameters, counter, accountAddress) {\n        return __awaiter(this, void 0, void 0, function () {\n            var signer, domainData, orderComponents, signature;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        signer = this._getSigner(accountAddress);\n                        return [4 /*yield*/, this._getDomainData()];\n                    case 1:\n                        domainData = _a.sent();\n                        orderComponents = __assign(__assign({}, orderParameters), { counter: counter });\n                        return [4 /*yield*/, signer._signTypedData(domainData, constants_1.EIP_712_ORDER_TYPE, orderComponents)];\n                    case 2:\n                        signature = _a.sent();\n                        // Use EIP-2098 compact signatures to save gas. https://eips.ethereum.org/EIPS/eip-2098\n                        return [2 /*return*/, ethers_1.ethers.utils.splitSignature(signature).compact];\n                }\n            });\n        });\n    };\n    /**\n     * Cancels a list of orders so that they are no longer fulfillable.\n     *\n     * @param orders list of order components\n     * @param accountAddress optional account address from which to cancel the orders from.\n     * @returns the set of transaction methods that can be used\n     */\n    Seaport.prototype.cancelOrders = function (orders, accountAddress) {\n        var signer = this._getSigner(accountAddress);\n        return (0, usecase_1.getTransactionMethods)(this.contract.connect(signer), \"cancel\", [\n            orders,\n        ]);\n    };\n    /**\n     * Bulk cancels all existing orders for a given account\n     * @param offerer the account to bulk cancel orders on\n     * @returns the set of transaction methods that can be used\n     */\n    Seaport.prototype.bulkCancelOrders = function (offerer) {\n        var signer = this._getSigner(offerer);\n        return (0, usecase_1.getTransactionMethods)(this.contract.connect(signer), \"incrementCounter\", []);\n    };\n    /**\n     * Approves a list of orders on-chain. This allows accounts to fulfill the order without requiring\n     * a signature. Can also check if an order is valid using `callStatic`\n     * @param orders list of order structs\n     * @param accountAddress optional account address to approve orders.\n     * @returns the set of transaction methods that can be used\n     */\n    Seaport.prototype.validate = function (orders, accountAddress) {\n        var signer = this._getSigner(accountAddress);\n        return (0, usecase_1.getTransactionMethods)(this.contract.connect(signer), \"validate\", [\n            orders,\n        ]);\n    };\n    /**\n     * Returns the order status given an order hash\n     * @param orderHash the hash of the order\n     * @returns an order status struct\n     */\n    Seaport.prototype.getOrderStatus = function (orderHash) {\n        return this.contract.getOrderStatus(orderHash);\n    };\n    /**\n     * Gets the counter of a given offerer\n     * @param offerer the offerer to get the counter of\n     * @returns counter as a number\n     */\n    Seaport.prototype.getCounter = function (offerer) {\n        return this.contract\n            .getCounter(offerer)\n            .then(function (counter) { return counter.toNumber(); });\n    };\n    /**\n     * Fulfills an order through either the basic method or the standard method\n     * Units to fill are denominated by the max possible size of the order, which is the greatest common denominator (GCD).\n     * We expose a helper to get this: getMaximumSizeForOrder\n     * i.e. If the maximum size of an order is 4, supplying 2 as the units to fulfill will fill half of the order: ;\n     * @param input\n     * @param input.order The standard order struct\n     * @param input.unitsToFill the number of units to fill for the given order. Only used if you wish to partially fill an order\n     * @param input.offerCriteria an array of criteria with length equal to the number of offer criteria items\n     * @param input.considerationCriteria an array of criteria with length equal to the number of consideration criteria items\n     * @param input.tips an array of optional condensed consideration items to be added onto a fulfillment\n     * @param input.extraData extra data supplied to the order\n     * @param input.accountAddress optional address from which to fulfill the order from\n     * @param input.conduitKey the conduitKey to source approvals from\n     * @param input.recipientAddress optional recipient to forward the offer to as opposed to the fulfiller.\n     *                               Defaults to the zero address which means the offer goes to the fulfiller\n     * @returns a use case containing the set of approval actions and fulfillment action\n     */\n    Seaport.prototype.fulfillOrder = function (_a) {\n        var order = _a.order, unitsToFill = _a.unitsToFill, _b = _a.offerCriteria, offerCriteria = _b === void 0 ? [] : _b, _c = _a.considerationCriteria, considerationCriteria = _c === void 0 ? [] : _c, _d = _a.tips, tips = _d === void 0 ? [] : _d, _e = _a.extraData, extraData = _e === void 0 ? \"0x\" : _e, accountAddress = _a.accountAddress, _f = _a.conduitKey, conduitKey = _f === void 0 ? this.defaultConduitKey : _f, _g = _a.recipientAddress, recipientAddress = _g === void 0 ? ethers_1.ethers.constants.AddressZero : _g;\n        return __awaiter(this, void 0, void 0, function () {\n            var orderParameters, offerer, offer, consideration, fulfiller, fulfillerAddress, offererOperator, fulfillerOperator, _h, offererBalancesAndApprovals, fulfillerBalancesAndApprovals, currentBlock, orderStatus, currentBlockTimestamp, totalFilled, totalSize, sanitizedOrder, timeBasedItemParams, tipConsiderationItems, isRecipientSelf;\n            return __generator(this, function (_j) {\n                switch (_j.label) {\n                    case 0:\n                        orderParameters = order.parameters;\n                        offerer = orderParameters.offerer, offer = orderParameters.offer, consideration = orderParameters.consideration;\n                        fulfiller = this._getSigner(accountAddress);\n                        return [4 /*yield*/, fulfiller.getAddress()];\n                    case 1:\n                        fulfillerAddress = _j.sent();\n                        offererOperator = this.config.conduitKeyToConduit[orderParameters.conduitKey];\n                        fulfillerOperator = this.config.conduitKeyToConduit[conduitKey];\n                        return [4 /*yield*/, Promise.all([\n                                (0, balanceAndApprovalCheck_1.getBalancesAndApprovals)({\n                                    owner: offerer,\n                                    items: offer,\n                                    criterias: offerCriteria,\n                                    multicallProvider: this.multicallProvider,\n                                    operator: offererOperator,\n                                }),\n                                // Get fulfiller balances and approvals of all items in the set, as offer items\n                                // may be received by the fulfiller for standard fulfills\n                                (0, balanceAndApprovalCheck_1.getBalancesAndApprovals)({\n                                    owner: fulfillerAddress,\n                                    items: __spreadArray(__spreadArray([], __read(offer), false), __read(consideration), false),\n                                    criterias: __spreadArray(__spreadArray([], __read(offerCriteria), false), __read(considerationCriteria), false),\n                                    multicallProvider: this.multicallProvider,\n                                    operator: fulfillerOperator,\n                                }),\n                                this.multicallProvider.getBlock(\"latest\"),\n                                this.getOrderStatus(this.getOrderHash(orderParameters)),\n                            ])];\n                    case 2:\n                        _h = __read.apply(void 0, [_j.sent(), 4]), offererBalancesAndApprovals = _h[0], fulfillerBalancesAndApprovals = _h[1], currentBlock = _h[2], orderStatus = _h[3];\n                        currentBlockTimestamp = currentBlock.timestamp;\n                        totalFilled = orderStatus.totalFilled, totalSize = orderStatus.totalSize;\n                        sanitizedOrder = (0, fulfill_1.validateAndSanitizeFromOrderStatus)(order, orderStatus);\n                        timeBasedItemParams = {\n                            startTime: sanitizedOrder.parameters.startTime,\n                            endTime: sanitizedOrder.parameters.endTime,\n                            currentBlockTimestamp: currentBlockTimestamp,\n                            ascendingAmountTimestampBuffer: this.config.ascendingAmountFulfillmentBuffer,\n                        };\n                        tipConsiderationItems = tips.map(function (tip) { return (__assign(__assign({}, (0, order_1.mapInputItemToOfferItem)(tip)), { recipient: tip.recipient })); });\n                        isRecipientSelf = recipientAddress === ethers_1.ethers.constants.AddressZero;\n                        // We use basic fulfills as they are more optimal for simple and \"hot\" use cases\n                        // We cannot use basic fulfill if user is trying to partially fill though.\n                        if (!unitsToFill &&\n                            isRecipientSelf &&\n                            (0, fulfill_1.shouldUseBasicFulfill)(sanitizedOrder.parameters, totalFilled)) {\n                            // TODO: Use fulfiller proxy if there are approvals needed directly, but none needed for proxy\n                            return [2 /*return*/, (0, fulfill_1.fulfillBasicOrder)({\n                                    order: sanitizedOrder,\n                                    seaportContract: this.contract,\n                                    offererBalancesAndApprovals: offererBalancesAndApprovals,\n                                    fulfillerBalancesAndApprovals: fulfillerBalancesAndApprovals,\n                                    timeBasedItemParams: timeBasedItemParams,\n                                    conduitKey: conduitKey,\n                                    offererOperator: offererOperator,\n                                    fulfillerOperator: fulfillerOperator,\n                                    signer: fulfiller,\n                                    tips: tipConsiderationItems,\n                                })];\n                        }\n                        // Else, we fallback to the standard fulfill order\n                        return [2 /*return*/, (0, fulfill_1.fulfillStandardOrder)({\n                                order: sanitizedOrder,\n                                unitsToFill: unitsToFill,\n                                totalFilled: totalFilled,\n                                totalSize: totalSize.eq(0)\n                                    ? (0, item_1.getMaximumSizeForOrder)(sanitizedOrder)\n                                    : totalSize,\n                                offerCriteria: offerCriteria,\n                                considerationCriteria: considerationCriteria,\n                                tips: tipConsiderationItems,\n                                extraData: extraData,\n                                seaportContract: this.contract,\n                                offererBalancesAndApprovals: offererBalancesAndApprovals,\n                                fulfillerBalancesAndApprovals: fulfillerBalancesAndApprovals,\n                                timeBasedItemParams: timeBasedItemParams,\n                                conduitKey: conduitKey,\n                                signer: fulfiller,\n                                offererOperator: offererOperator,\n                                fulfillerOperator: fulfillerOperator,\n                                recipientAddress: recipientAddress,\n                            })];\n                }\n            });\n        });\n    };\n    /**\n     * Fulfills an order through best-effort fashion. Orders that fail will not revert the whole transaction\n     * unless there's an issue with approvals or balance checks\n     * @param input\n     * @param input.fulfillOrderDetails list of helper order details\n     * @param input.accountAddress the account to fulfill orders on\n     * @param input.conduitKey the key from which to source approvals from\n     * @param input.recipientAddress optional recipient to forward the offer to as opposed to the fulfiller.\n     *                               Defaults to the zero address which means the offer goes to the fulfiller\n     * @returns a use case containing the set of approval actions and fulfillment action\n     */\n    Seaport.prototype.fulfillOrders = function (_a) {\n        var fulfillOrderDetails = _a.fulfillOrderDetails, accountAddress = _a.accountAddress, _b = _a.conduitKey, conduitKey = _b === void 0 ? this.defaultConduitKey : _b, _c = _a.recipientAddress, recipientAddress = _c === void 0 ? ethers_1.ethers.constants.AddressZero : _c;\n        return __awaiter(this, void 0, void 0, function () {\n            var fulfiller, fulfillerAddress, allOffererOperators, fulfillerOperator, allOfferItems, allConsiderationItems, allOfferCriteria, allConsiderationCriteria, _d, offerersBalancesAndApprovals, fulfillerBalancesAndApprovals, currentBlock, orderStatuses, ordersMetadata;\n            var _this = this;\n            return __generator(this, function (_e) {\n                switch (_e.label) {\n                    case 0:\n                        fulfiller = this._getSigner(accountAddress);\n                        return [4 /*yield*/, fulfiller.getAddress()];\n                    case 1:\n                        fulfillerAddress = _e.sent();\n                        allOffererOperators = fulfillOrderDetails.map(function (_a) {\n                            var order = _a.order;\n                            return _this.config.conduitKeyToConduit[order.parameters.conduitKey];\n                        });\n                        fulfillerOperator = this.config.conduitKeyToConduit[conduitKey];\n                        allOfferItems = fulfillOrderDetails.flatMap(function (_a) {\n                            var order = _a.order;\n                            return order.parameters.offer;\n                        });\n                        allConsiderationItems = fulfillOrderDetails.flatMap(function (_a) {\n                            var order = _a.order;\n                            return order.parameters.consideration;\n                        });\n                        allOfferCriteria = fulfillOrderDetails.flatMap(function (_a) {\n                            var _b = _a.offerCriteria, offerCriteria = _b === void 0 ? [] : _b;\n                            return offerCriteria;\n                        });\n                        allConsiderationCriteria = fulfillOrderDetails.flatMap(function (_a) {\n                            var _b = _a.considerationCriteria, considerationCriteria = _b === void 0 ? [] : _b;\n                            return considerationCriteria;\n                        });\n                        return [4 /*yield*/, Promise.all([\n                                Promise.all(fulfillOrderDetails.map(function (_a, i) {\n                                    var order = _a.order, _b = _a.offerCriteria, offerCriteria = _b === void 0 ? [] : _b;\n                                    return (0, balanceAndApprovalCheck_1.getBalancesAndApprovals)({\n                                        owner: order.parameters.offerer,\n                                        items: order.parameters.offer,\n                                        criterias: offerCriteria,\n                                        operator: allOffererOperators[i],\n                                        multicallProvider: _this.multicallProvider,\n                                    });\n                                })),\n                                // Get fulfiller balances and approvals of all items in the set, as offer items\n                                // may be received by the fulfiller for standard fulfills\n                                (0, balanceAndApprovalCheck_1.getBalancesAndApprovals)({\n                                    owner: fulfillerAddress,\n                                    items: __spreadArray(__spreadArray([], __read(allOfferItems), false), __read(allConsiderationItems), false),\n                                    criterias: __spreadArray(__spreadArray([], __read(allOfferCriteria), false), __read(allConsiderationCriteria), false),\n                                    operator: fulfillerOperator,\n                                    multicallProvider: this.multicallProvider,\n                                }),\n                                this.multicallProvider.getBlock(\"latest\"),\n                                Promise.all(fulfillOrderDetails.map(function (_a) {\n                                    var order = _a.order;\n                                    return _this.getOrderStatus(_this.getOrderHash(order.parameters));\n                                })),\n                            ])];\n                    case 2:\n                        _d = __read.apply(void 0, [_e.sent(), 4]), offerersBalancesAndApprovals = _d[0], fulfillerBalancesAndApprovals = _d[1], currentBlock = _d[2], orderStatuses = _d[3];\n                        ordersMetadata = fulfillOrderDetails.map(function (orderDetails, index) {\n                            var _a, _b, _c, _d, _e;\n                            return ({\n                                order: orderDetails.order,\n                                unitsToFill: orderDetails.unitsToFill,\n                                orderStatus: orderStatuses[index],\n                                offerCriteria: (_a = orderDetails.offerCriteria) !== null && _a !== void 0 ? _a : [],\n                                considerationCriteria: (_b = orderDetails.considerationCriteria) !== null && _b !== void 0 ? _b : [],\n                                tips: (_d = (_c = orderDetails.tips) === null || _c === void 0 ? void 0 : _c.map(function (tip) { return (__assign(__assign({}, (0, order_1.mapInputItemToOfferItem)(tip)), { recipient: tip.recipient })); })) !== null && _d !== void 0 ? _d : [],\n                                extraData: (_e = orderDetails.extraData) !== null && _e !== void 0 ? _e : \"0x\",\n                                offererBalancesAndApprovals: offerersBalancesAndApprovals[index],\n                                offererOperator: allOffererOperators[index],\n                            });\n                        });\n                        return [2 /*return*/, (0, fulfill_1.fulfillAvailableOrders)({\n                                ordersMetadata: ordersMetadata,\n                                seaportContract: this.contract,\n                                fulfillerBalancesAndApprovals: fulfillerBalancesAndApprovals,\n                                currentBlockTimestamp: currentBlock.timestamp,\n                                ascendingAmountTimestampBuffer: this.config.ascendingAmountFulfillmentBuffer,\n                                fulfillerOperator: fulfillerOperator,\n                                signer: fulfiller,\n                                conduitKey: conduitKey,\n                                recipientAddress: recipientAddress,\n                            })];\n                }\n            });\n        });\n    };\n    /**\n     * NOTE: Largely incomplete. Does NOT do any balance or approval checks.\n     * Just exposes the bare bones matchOrders where clients will have to supply\n     * their own overrides as needed.\n     * @param input\n     * @param input.orders the list of orders to match\n     * @param input.fulfillments the list of fulfillments to match offer and considerations\n     * @param input.overrides any overrides the client wants, will need to pass in value for matching orders with ETH.\n     * @param input.accountAddress Optional address for which to match the order with\n     * @returns set of transaction methods for matching orders\n     */\n    Seaport.prototype.matchOrders = function (_a) {\n        var orders = _a.orders, fulfillments = _a.fulfillments, overrides = _a.overrides, accountAddress = _a.accountAddress;\n        var signer = this._getSigner(accountAddress);\n        return (0, usecase_1.getTransactionMethods)(this.contract.connect(signer), \"matchOrders\", [\n            orders,\n            fulfillments,\n            overrides,\n        ]);\n    };\n    return Seaport;\n}());\nexports.Seaport = Seaport;\n//# sourceMappingURL=seaport.js.map"]},"metadata":{},"sourceType":"script"}