{"ast":null,"code":"import _regeneratorRuntime from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport retry from 'async-retry';\nimport Timeout from 'await-timeout';\nimport axios from 'axios';\nimport { log } from '../util/log';\n/**\n * Gets subgraph pools from a URI. The URI shoudl contain a JSON\n * stringified array of V2SubgraphPool objects or V3SubgraphPool\n * objects.\n *\n * @export\n * @class URISubgraphProvider\n * @template TSubgraphPool\n */\nexport var URISubgraphProvider = /*#__PURE__*/function () {\n  function URISubgraphProvider(chainId, uri) {\n    var timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 6000;\n    var retries = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 2;\n    _classCallCheck(this, URISubgraphProvider);\n    this.chainId = chainId;\n    this.uri = uri;\n    this.timeout = timeout;\n    this.retries = retries;\n  }\n  _createClass(URISubgraphProvider, [{\n    key: \"getPools\",\n    value: function () {\n      var _getPools = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _this = this;\n        var allPools;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                log.info({\n                  uri: this.uri\n                }, \"About to get subgraph pools from URI \".concat(this.uri));\n                allPools = [];\n                _context2.next = 4;\n                return retry( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                  var timeout, timerPromise, response, _response, poolsBuffer, status, pools;\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          timeout = new Timeout();\n                          timerPromise = timeout.set(_this.timeout).then(function () {\n                            throw new Error(\"Timed out getting pools from subgraph: \".concat(_this.timeout));\n                          });\n                          _context.prev = 2;\n                          _context.next = 5;\n                          return Promise.race([axios.get(_this.uri), timerPromise]);\n                        case 5:\n                          response = _context.sent;\n                          _context.next = 11;\n                          break;\n                        case 8:\n                          _context.prev = 8;\n                          _context.t0 = _context[\"catch\"](2);\n                          throw _context.t0;\n                        case 11:\n                          _context.prev = 11;\n                          timeout.clear();\n                          return _context.finish(11);\n                        case 14:\n                          /* eslint-enable no-useless-catch */\n                          _response = response, poolsBuffer = _response.data, status = _response.status;\n                          if (!(status != 200)) {\n                            _context.next = 18;\n                            break;\n                          }\n                          log.error({\n                            response: response\n                          }, \"Unabled to get pools from \".concat(_this.uri, \".\"));\n                          throw new Error(\"Unable to get pools from \".concat(_this.uri));\n                        case 18:\n                          pools = poolsBuffer;\n                          log.info({\n                            uri: _this.uri,\n                            chain: _this.chainId\n                          }, \"Got subgraph pools from uri. Num: \".concat(pools.length));\n                          allPools = pools;\n                        case 21:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee, null, [[2, 8, 11, 14]]);\n                })), {\n                  retries: this.retries,\n                  onRetry: function onRetry(err, retry) {\n                    log.info({\n                      err: err\n                    }, \"Failed to get pools from uri \".concat(_this.uri, \". Retry attempt: \").concat(retry));\n                  }\n                });\n              case 4:\n                return _context2.abrupt(\"return\", allPools);\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function getPools() {\n        return _getPools.apply(this, arguments);\n      }\n      return getPools;\n    }()\n  }]);\n  return URISubgraphProvider;\n}();","map":{"version":3,"sources":["../../../src/providers/uri-subgraph-provider.ts"],"names":[],"mappings":";;;;AAAA,OAAO,KAAK,MAAM,aAAa;AAC/B,OAAO,OAAO,MAAM,eAAe;AACnC,OAAO,KAAK,MAAM,OAAO;AAGzB,SAAS,GAAG,QAAQ,aAAa;AAKjC;;;;;;;;AAQG;AACH,WAAa,mBAAmB;EAG9B,6BACU,OAAgB,EAChB,GAAW,EAEA;IAAA,IADX,OAAA,uEAAU,IAAI;IAAA,IACd,OAAA,uEAAU,CAAC;IAAA;IAHX,IAAA,CAAA,OAAO,GAAP,OAAO;IACP,IAAA,CAAA,GAAG,GAAH,GAAG;IACH,IAAA,CAAA,OAAO,GAAP,OAAO;IACP,IAAA,CAAA,OAAO,GAAP,OAAO;EACd;EAAC;IAAA;IAAA;MAAA,yEAEG;QAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBACL,GAAG,CAAC,IAAI,CACN;kBAAE,GAAG,EAAE,IAAI,CAAC;gBAAG,CAAE,iDACuB,IAAI,CAAC,GAAG,EACjD;gBAEG,QAAQ,GAAoB,EAAE;gBAAA;gBAAA,OAE5B,KAAK,wEACT;kBAAA;kBAAA;oBAAA;sBAAA;wBAAA;0BACQ,OAAO,GAAG,IAAI,OAAO,EAAE;0BACvB,YAAY,GAAG,OAAO,CAAC,GAAG,CAAC,KAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,YAAK;4BACvD,MAAM,IAAI,KAAK,kDAC6B,KAAI,CAAC,OAAO,EACvD;0BACH,CAAC,CAAC;0BAAA;0BAAA;0BAAA,OAMiB,OAAO,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,KAAI,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,CAAC;wBAAA;0BAAlE,QAAQ;0BAAA;0BAAA;wBAAA;0BAAA;0BAAA;0BAAA;wBAAA;0BAAA;0BAIR,OAAO,CAAC,KAAK,EAAE;0BAAC;wBAAA;0BAElB;0BAAA,YAEsC,QAAQ,EAAhC,WAAW,aAAjB,IAAI,EAAe,MAAM,aAAN,MAAM;0BAAA,MAE7B,MAAM,IAAI,GAAG;4BAAA;4BAAA;0BAAA;0BACf,GAAG,CAAC,KAAK,CAAC;4BAAE,QAAQ,EAAR;0BAAQ,CAAE,sCAA+B,KAAI,CAAC,GAAG,OAAI;0BAAC,MAE5D,IAAI,KAAK,oCAA6B,KAAI,CAAC,GAAG,EAAG;wBAAA;0BAGnD,KAAK,GAAG,WAA8B;0BAE5C,GAAG,CAAC,IAAI,CACN;4BAAE,GAAG,EAAE,KAAI,CAAC,GAAG;4BAAE,KAAK,EAAE,KAAI,CAAC;0BAAO,CAAE,8CACD,KAAK,CAAC,MAAM,EAClD;0BAED,QAAQ,GAAG,KAAK;wBAAC;wBAAA;0BAAA;sBAAA;oBAAA;kBAAA;gBAAA,CAClB,IACD;kBACE,OAAO,EAAE,IAAI,CAAC,OAAO;kBACrB,OAAO,EAAE,iBAAC,GAAG,EAAE,KAAK,EAAI;oBACtB,GAAG,CAAC,IAAI,CACN;sBAAE,GAAG,EAAH;oBAAG,CAAE,yCACyB,KAAI,CAAC,GAAG,8BAAoB,KAAK,EAClE;kBACH;iBACD,CACF;cAAA;gBAAA,kCAEM,QAAQ;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAChB;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;EAAA;AAAA","sourceRoot":"","sourcesContent":["import retry from 'async-retry';\nimport Timeout from 'await-timeout';\nimport axios from 'axios';\nimport { log } from '../util/log';\n/**\n * Gets subgraph pools from a URI. The URI shoudl contain a JSON\n * stringified array of V2SubgraphPool objects or V3SubgraphPool\n * objects.\n *\n * @export\n * @class URISubgraphProvider\n * @template TSubgraphPool\n */\nexport class URISubgraphProvider {\n    constructor(chainId, uri, timeout = 6000, retries = 2) {\n        this.chainId = chainId;\n        this.uri = uri;\n        this.timeout = timeout;\n        this.retries = retries;\n    }\n    async getPools() {\n        log.info({ uri: this.uri }, `About to get subgraph pools from URI ${this.uri}`);\n        let allPools = [];\n        await retry(async () => {\n            const timeout = new Timeout();\n            const timerPromise = timeout.set(this.timeout).then(() => {\n                throw new Error(`Timed out getting pools from subgraph: ${this.timeout}`);\n            });\n            let response;\n            /* eslint-disable no-useless-catch */\n            try {\n                response = await Promise.race([axios.get(this.uri), timerPromise]);\n            }\n            catch (err) {\n                throw err;\n            }\n            finally {\n                timeout.clear();\n            }\n            /* eslint-enable no-useless-catch */\n            const { data: poolsBuffer, status } = response;\n            if (status != 200) {\n                log.error({ response }, `Unabled to get pools from ${this.uri}.`);\n                throw new Error(`Unable to get pools from ${this.uri}`);\n            }\n            const pools = poolsBuffer;\n            log.info({ uri: this.uri, chain: this.chainId }, `Got subgraph pools from uri. Num: ${pools.length}`);\n            allPools = pools;\n        }, {\n            retries: this.retries,\n            onRetry: (err, retry) => {\n                log.info({ err }, `Failed to get pools from uri ${this.uri}. Retry attempt: ${retry}`);\n            },\n        });\n        return allPools;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXJpLXN1YmdyYXBoLXByb3ZpZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3Byb3ZpZGVycy91cmktc3ViZ3JhcGgtcHJvdmlkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxLQUFLLE1BQU0sYUFBYSxDQUFDO0FBQ2hDLE9BQU8sT0FBTyxNQUFNLGVBQWUsQ0FBQztBQUNwQyxPQUFPLEtBQUssTUFBTSxPQUFPLENBQUM7QUFHMUIsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUtsQzs7Ozs7Ozs7R0FRRztBQUNILE1BQU0sT0FBTyxtQkFBbUI7SUFHOUIsWUFDVSxPQUFnQixFQUNoQixHQUFXLEVBQ1gsVUFBVSxJQUFJLEVBQ2QsVUFBVSxDQUFDO1FBSFgsWUFBTyxHQUFQLE9BQU8sQ0FBUztRQUNoQixRQUFHLEdBQUgsR0FBRyxDQUFRO1FBQ1gsWUFBTyxHQUFQLE9BQU8sQ0FBTztRQUNkLFlBQU8sR0FBUCxPQUFPLENBQUk7SUFDbEIsQ0FBQztJQUVHLEtBQUssQ0FBQyxRQUFRO1FBQ25CLEdBQUcsQ0FBQyxJQUFJLENBQ04sRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUNqQix3Q0FBd0MsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUNuRCxDQUFDO1FBRUYsSUFBSSxRQUFRLEdBQW9CLEVBQUUsQ0FBQztRQUVuQyxNQUFNLEtBQUssQ0FDVCxLQUFLLElBQUksRUFBRTtZQUNULE1BQU0sT0FBTyxHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7WUFDOUIsTUFBTSxZQUFZLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRTtnQkFDdkQsTUFBTSxJQUFJLEtBQUssQ0FDYiwwQ0FBMEMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUN6RCxDQUFDO1lBQ0osQ0FBQyxDQUFDLENBQUM7WUFFSCxJQUFJLFFBQVEsQ0FBQztZQUViLHFDQUFxQztZQUNyQyxJQUFJO2dCQUNGLFFBQVEsR0FBRyxNQUFNLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDO2FBQ3BFO1lBQUMsT0FBTyxHQUFHLEVBQUU7Z0JBQ1osTUFBTSxHQUFHLENBQUM7YUFDWDtvQkFBUztnQkFDUixPQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7YUFDakI7WUFDRCxvQ0FBb0M7WUFFcEMsTUFBTSxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLEdBQUcsUUFBUSxDQUFDO1lBRS9DLElBQUksTUFBTSxJQUFJLEdBQUcsRUFBRTtnQkFDakIsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLFFBQVEsRUFBRSxFQUFFLDZCQUE2QixJQUFJLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQztnQkFFbEUsTUFBTSxJQUFJLEtBQUssQ0FBQyw0QkFBNEIsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7YUFDekQ7WUFFRCxNQUFNLEtBQUssR0FBRyxXQUE4QixDQUFDO1lBRTdDLEdBQUcsQ0FBQyxJQUFJLENBQ04sRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUN0QyxxQ0FBcUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUNwRCxDQUFDO1lBRUYsUUFBUSxHQUFHLEtBQUssQ0FBQztRQUNuQixDQUFDLEVBQ0Q7WUFDRSxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU87WUFDckIsT0FBTyxFQUFFLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxFQUFFO2dCQUN0QixHQUFHLENBQUMsSUFBSSxDQUNOLEVBQUUsR0FBRyxFQUFFLEVBQ1AsZ0NBQWdDLElBQUksQ0FBQyxHQUFHLG9CQUFvQixLQUFLLEVBQUUsQ0FDcEUsQ0FBQztZQUNKLENBQUM7U0FDRixDQUNGLENBQUM7UUFFRixPQUFPLFFBQVEsQ0FBQztJQUNsQixDQUFDO0NBQ0YifQ=="]},"metadata":{},"sourceType":"module"}