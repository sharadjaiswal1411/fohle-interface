{"ast":null,"code":"var _s = $RefreshSig$();\nimport { SwapRouter } from '@uniswap/router-sdk';\nimport { useWeb3React } from '@web3-react/core';\nimport { SWAP_ROUTER_ADDRESSES } from 'constants/addresses';\nimport { useMemo } from 'react';\nimport approveAmountCalldata from 'utils/approveAmountCalldata';\nimport { useArgentWalletContract } from './useArgentWalletContract';\nimport useENS from './useENS';\n/**\n * Returns the swap calls that can be used to make the trade\n * @param trade trade to execute\n * @param allowedSlippage user allowed slippage\n * @param recipientAddressOrName the ENS name or address of the recipient of the swap output\n * @param signatureData the signature data of the permit of the input token amount, if available\n */\nexport function useSwapCallArguments(trade, allowedSlippage, recipientAddressOrName, signatureData, deadline, feeOptions) {\n  _s();\n  const {\n    account,\n    chainId,\n    provider\n  } = useWeb3React();\n  const {\n    address: recipientAddress\n  } = useENS(recipientAddressOrName);\n  const recipient = recipientAddressOrName === null ? account : recipientAddress;\n  const argentWalletContract = useArgentWalletContract();\n  return useMemo(() => {\n    if (!trade || !recipient || !provider || !account || !chainId || !deadline) return [];\n    const swapRouterAddress = chainId ? SWAP_ROUTER_ADDRESSES[chainId] : undefined;\n    if (!swapRouterAddress) return [];\n    const {\n      value,\n      calldata\n    } = SwapRouter.swapCallParameters(trade, {\n      fee: feeOptions,\n      recipient,\n      slippageTolerance: allowedSlippage,\n      ...(signatureData ? {\n        inputTokenPermit: 'allowed' in signatureData ? {\n          expiry: signatureData.deadline,\n          nonce: signatureData.nonce,\n          s: signatureData.s,\n          r: signatureData.r,\n          v: signatureData.v\n        } : {\n          deadline: signatureData.deadline,\n          amount: signatureData.amount,\n          s: signatureData.s,\n          r: signatureData.r,\n          v: signatureData.v\n        }\n      } : {}),\n      deadlineOrPreviousBlockhash: deadline.toString()\n    });\n    if (argentWalletContract && trade.inputAmount.currency.isToken) {\n      return [{\n        address: argentWalletContract.address,\n        calldata: argentWalletContract.interface.encodeFunctionData('wc_multiCall', [[approveAmountCalldata(trade.maximumAmountIn(allowedSlippage), swapRouterAddress), {\n          to: swapRouterAddress,\n          value,\n          data: calldata\n        }]]),\n        value: '0x0'\n      }];\n    }\n    return [{\n      address: swapRouterAddress,\n      calldata,\n      value\n    }];\n  }, [account, allowedSlippage, argentWalletContract, chainId, deadline, feeOptions, provider, recipient, signatureData, trade]);\n}\n_s(useSwapCallArguments, \"4hKIbLmcA3CUGrcN0wd4OZPsSWE=\", false, function () {\n  return [useWeb3React, useENS, useArgentWalletContract];\n});","map":{"version":3,"names":["SwapRouter","useWeb3React","SWAP_ROUTER_ADDRESSES","useMemo","approveAmountCalldata","useArgentWalletContract","useENS","useSwapCallArguments","trade","allowedSlippage","recipientAddressOrName","signatureData","deadline","feeOptions","account","chainId","provider","address","recipientAddress","recipient","argentWalletContract","swapRouterAddress","undefined","value","calldata","swapCallParameters","fee","slippageTolerance","inputTokenPermit","expiry","nonce","s","r","v","amount","deadlineOrPreviousBlockhash","toString","inputAmount","currency","isToken","interface","encodeFunctionData","maximumAmountIn","to","data"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/hooks/useSwapCallArguments.tsx"],"sourcesContent":["import { BigNumber } from '@ethersproject/bignumber'\nimport { SwapRouter, Trade } from '@uniswap/router-sdk'\nimport { Currency, Percent, TradeType } from '@uniswap/sdk-core'\nimport { FeeOptions } from '@uniswap/v3-sdk'\nimport { useWeb3React } from '@web3-react/core'\nimport { SWAP_ROUTER_ADDRESSES } from 'constants/addresses'\nimport { useMemo } from 'react'\nimport approveAmountCalldata from 'utils/approveAmountCalldata'\n\nimport { useArgentWalletContract } from './useArgentWalletContract'\nimport useENS from './useENS'\nimport { SignatureData } from './useERC20Permit'\n\ninterface SwapCall {\n  address: string\n  calldata: string\n  value: string\n}\n\n/**\n * Returns the swap calls that can be used to make the trade\n * @param trade trade to execute\n * @param allowedSlippage user allowed slippage\n * @param recipientAddressOrName the ENS name or address of the recipient of the swap output\n * @param signatureData the signature data of the permit of the input token amount, if available\n */\nexport function useSwapCallArguments(\n  trade: Trade<Currency, Currency, TradeType> | undefined,\n  allowedSlippage: Percent,\n  recipientAddressOrName: string | null | undefined,\n  signatureData: SignatureData | null | undefined,\n  deadline: BigNumber | undefined,\n  feeOptions: FeeOptions | undefined\n): SwapCall[] {\n  const { account, chainId, provider } = useWeb3React()\n\n  const { address: recipientAddress } = useENS(recipientAddressOrName)\n  const recipient = recipientAddressOrName === null ? account : recipientAddress\n  const argentWalletContract = useArgentWalletContract()\n\n  return useMemo(() => {\n    if (!trade || !recipient || !provider || !account || !chainId || !deadline) return []\n\n    const swapRouterAddress = chainId ? SWAP_ROUTER_ADDRESSES[chainId] : undefined\n    if (!swapRouterAddress) return []\n\n    const { value, calldata } = SwapRouter.swapCallParameters(trade, {\n      fee: feeOptions,\n      recipient,\n      slippageTolerance: allowedSlippage,\n      ...(signatureData\n        ? {\n            inputTokenPermit:\n              'allowed' in signatureData\n                ? {\n                    expiry: signatureData.deadline,\n                    nonce: signatureData.nonce,\n                    s: signatureData.s,\n                    r: signatureData.r,\n                    v: signatureData.v as any,\n                  }\n                : {\n                    deadline: signatureData.deadline,\n                    amount: signatureData.amount,\n                    s: signatureData.s,\n                    r: signatureData.r,\n                    v: signatureData.v as any,\n                  },\n          }\n        : {}),\n\n      deadlineOrPreviousBlockhash: deadline.toString(),\n    })\n\n    if (argentWalletContract && trade.inputAmount.currency.isToken) {\n      return [\n        {\n          address: argentWalletContract.address,\n          calldata: argentWalletContract.interface.encodeFunctionData('wc_multiCall', [\n            [\n              approveAmountCalldata(trade.maximumAmountIn(allowedSlippage), swapRouterAddress),\n              {\n                to: swapRouterAddress,\n                value,\n                data: calldata,\n              },\n            ],\n          ]),\n          value: '0x0',\n        },\n      ]\n    }\n    return [\n      {\n        address: swapRouterAddress,\n        calldata,\n        value,\n      },\n    ]\n  }, [\n    account,\n    allowedSlippage,\n    argentWalletContract,\n    chainId,\n    deadline,\n    feeOptions,\n    provider,\n    recipient,\n    signatureData,\n    trade,\n  ])\n}\n"],"mappings":";AACA,SAASA,UAAU,QAAe,qBAAqB;AAGvD,SAASC,YAAY,QAAQ,kBAAkB;AAC/C,SAASC,qBAAqB,QAAQ,qBAAqB;AAC3D,SAASC,OAAO,QAAQ,OAAO;AAC/B,OAAOC,qBAAqB,MAAM,6BAA6B;AAE/D,SAASC,uBAAuB,QAAQ,2BAA2B;AACnE,OAAOC,MAAM,MAAM,UAAU;AAS7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,oBAAoB,CAClCC,KAAuD,EACvDC,eAAwB,EACxBC,sBAAiD,EACjDC,aAA+C,EAC/CC,QAA+B,EAC/BC,UAAkC,EACtB;EAAA;EACZ,MAAM;IAAEC,OAAO;IAAEC,OAAO;IAAEC;EAAS,CAAC,GAAGf,YAAY,EAAE;EAErD,MAAM;IAAEgB,OAAO,EAAEC;EAAiB,CAAC,GAAGZ,MAAM,CAACI,sBAAsB,CAAC;EACpE,MAAMS,SAAS,GAAGT,sBAAsB,KAAK,IAAI,GAAGI,OAAO,GAAGI,gBAAgB;EAC9E,MAAME,oBAAoB,GAAGf,uBAAuB,EAAE;EAEtD,OAAOF,OAAO,CAAC,MAAM;IACnB,IAAI,CAACK,KAAK,IAAI,CAACW,SAAS,IAAI,CAACH,QAAQ,IAAI,CAACF,OAAO,IAAI,CAACC,OAAO,IAAI,CAACH,QAAQ,EAAE,OAAO,EAAE;IAErF,MAAMS,iBAAiB,GAAGN,OAAO,GAAGb,qBAAqB,CAACa,OAAO,CAAC,GAAGO,SAAS;IAC9E,IAAI,CAACD,iBAAiB,EAAE,OAAO,EAAE;IAEjC,MAAM;MAAEE,KAAK;MAAEC;IAAS,CAAC,GAAGxB,UAAU,CAACyB,kBAAkB,CAACjB,KAAK,EAAE;MAC/DkB,GAAG,EAAEb,UAAU;MACfM,SAAS;MACTQ,iBAAiB,EAAElB,eAAe;MAClC,IAAIE,aAAa,GACb;QACEiB,gBAAgB,EACd,SAAS,IAAIjB,aAAa,GACtB;UACEkB,MAAM,EAAElB,aAAa,CAACC,QAAQ;UAC9BkB,KAAK,EAAEnB,aAAa,CAACmB,KAAK;UAC1BC,CAAC,EAAEpB,aAAa,CAACoB,CAAC;UAClBC,CAAC,EAAErB,aAAa,CAACqB,CAAC;UAClBC,CAAC,EAAEtB,aAAa,CAACsB;QACnB,CAAC,GACD;UACErB,QAAQ,EAAED,aAAa,CAACC,QAAQ;UAChCsB,MAAM,EAAEvB,aAAa,CAACuB,MAAM;UAC5BH,CAAC,EAAEpB,aAAa,CAACoB,CAAC;UAClBC,CAAC,EAAErB,aAAa,CAACqB,CAAC;UAClBC,CAAC,EAAEtB,aAAa,CAACsB;QACnB;MACR,CAAC,GACD,CAAC,CAAC,CAAC;MAEPE,2BAA2B,EAAEvB,QAAQ,CAACwB,QAAQ;IAChD,CAAC,CAAC;IAEF,IAAIhB,oBAAoB,IAAIZ,KAAK,CAAC6B,WAAW,CAACC,QAAQ,CAACC,OAAO,EAAE;MAC9D,OAAO,CACL;QACEtB,OAAO,EAAEG,oBAAoB,CAACH,OAAO;QACrCO,QAAQ,EAAEJ,oBAAoB,CAACoB,SAAS,CAACC,kBAAkB,CAAC,cAAc,EAAE,CAC1E,CACErC,qBAAqB,CAACI,KAAK,CAACkC,eAAe,CAACjC,eAAe,CAAC,EAAEY,iBAAiB,CAAC,EAChF;UACEsB,EAAE,EAAEtB,iBAAiB;UACrBE,KAAK;UACLqB,IAAI,EAAEpB;QACR,CAAC,CACF,CACF,CAAC;QACFD,KAAK,EAAE;MACT,CAAC,CACF;IACH;IACA,OAAO,CACL;MACEN,OAAO,EAAEI,iBAAiB;MAC1BG,QAAQ;MACRD;IACF,CAAC,CACF;EACH,CAAC,EAAE,CACDT,OAAO,EACPL,eAAe,EACfW,oBAAoB,EACpBL,OAAO,EACPH,QAAQ,EACRC,UAAU,EACVG,QAAQ,EACRG,SAAS,EACTR,aAAa,EACbH,KAAK,CACN,CAAC;AACJ;AAAC,GArFeD,oBAAoB;EAAA,QAQKN,YAAY,EAEbK,MAAM,EAEfD,uBAAuB;AAAA"},"metadata":{},"sourceType":"module"}