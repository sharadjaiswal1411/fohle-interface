{"ast":null,"code":"var _s = $RefreshSig$();\nimport { ConnectionType } from 'connection';\nimport { getConnection } from 'connection/utils';\nimport { useMemo } from 'react';\nimport { useAppSelector } from 'state/hooks';\nconst SELECTABLE_WALLETS = [ConnectionType.INJECTED, ConnectionType.COINBASE_WALLET, ConnectionType.WALLET_CONNECT];\nexport default function useOrderedConnections() {\n  _s();\n  const selectedWallet = useAppSelector(state => state.user.selectedWallet);\n  return useMemo(() => {\n    const orderedConnectionTypes = [];\n\n    // Always attempt to use to Gnosis Safe first, as we can't know if we're in a SafeContext.\n    orderedConnectionTypes.push(ConnectionType.GNOSIS_SAFE);\n\n    // Add the `selectedWallet` to the top so it's prioritized, then add the other selectable wallets.\n    if (selectedWallet) {\n      orderedConnectionTypes.push(selectedWallet);\n    }\n    orderedConnectionTypes.push(...SELECTABLE_WALLETS.filter(wallet => wallet !== selectedWallet));\n\n    // Add network connection last as it should be the fallback.\n    orderedConnectionTypes.push(ConnectionType.NETWORK);\n    return orderedConnectionTypes.map(getConnection);\n  }, [selectedWallet]);\n}\n_s(useOrderedConnections, \"qw6/qXMuLXVNKPSkfr8TBQkPRiI=\", false, function () {\n  return [useAppSelector];\n});","map":{"version":3,"names":["ConnectionType","getConnection","useMemo","useAppSelector","SELECTABLE_WALLETS","INJECTED","COINBASE_WALLET","WALLET_CONNECT","useOrderedConnections","selectedWallet","state","user","orderedConnectionTypes","push","GNOSIS_SAFE","filter","wallet","NETWORK","map"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/hooks/useOrderedConnections.ts"],"sourcesContent":["import { ConnectionType } from 'connection'\nimport { getConnection } from 'connection/utils'\nimport { useMemo } from 'react'\nimport { useAppSelector } from 'state/hooks'\n\nconst SELECTABLE_WALLETS = [ConnectionType.INJECTED, ConnectionType.COINBASE_WALLET, ConnectionType.WALLET_CONNECT]\n\nexport default function useOrderedConnections() {\n  const selectedWallet = useAppSelector((state) => state.user.selectedWallet)\n  return useMemo(() => {\n    const orderedConnectionTypes: ConnectionType[] = []\n\n    // Always attempt to use to Gnosis Safe first, as we can't know if we're in a SafeContext.\n    orderedConnectionTypes.push(ConnectionType.GNOSIS_SAFE)\n\n    // Add the `selectedWallet` to the top so it's prioritized, then add the other selectable wallets.\n    if (selectedWallet) {\n      orderedConnectionTypes.push(selectedWallet)\n    }\n    orderedConnectionTypes.push(...SELECTABLE_WALLETS.filter((wallet) => wallet !== selectedWallet))\n\n    // Add network connection last as it should be the fallback.\n    orderedConnectionTypes.push(ConnectionType.NETWORK)\n\n    return orderedConnectionTypes.map(getConnection)\n  }, [selectedWallet])\n}\n"],"mappings":";AAAA,SAASA,cAAc,QAAQ,YAAY;AAC3C,SAASC,aAAa,QAAQ,kBAAkB;AAChD,SAASC,OAAO,QAAQ,OAAO;AAC/B,SAASC,cAAc,QAAQ,aAAa;AAE5C,MAAMC,kBAAkB,GAAG,CAACJ,cAAc,CAACK,QAAQ,EAAEL,cAAc,CAACM,eAAe,EAAEN,cAAc,CAACO,cAAc,CAAC;AAEnH,eAAe,SAASC,qBAAqB,GAAG;EAAA;EAC9C,MAAMC,cAAc,GAAGN,cAAc,CAAEO,KAAK,IAAKA,KAAK,CAACC,IAAI,CAACF,cAAc,CAAC;EAC3E,OAAOP,OAAO,CAAC,MAAM;IACnB,MAAMU,sBAAwC,GAAG,EAAE;;IAEnD;IACAA,sBAAsB,CAACC,IAAI,CAACb,cAAc,CAACc,WAAW,CAAC;;IAEvD;IACA,IAAIL,cAAc,EAAE;MAClBG,sBAAsB,CAACC,IAAI,CAACJ,cAAc,CAAC;IAC7C;IACAG,sBAAsB,CAACC,IAAI,CAAC,GAAGT,kBAAkB,CAACW,MAAM,CAAEC,MAAM,IAAKA,MAAM,KAAKP,cAAc,CAAC,CAAC;;IAEhG;IACAG,sBAAsB,CAACC,IAAI,CAACb,cAAc,CAACiB,OAAO,CAAC;IAEnD,OAAOL,sBAAsB,CAACM,GAAG,CAACjB,aAAa,CAAC;EAClD,CAAC,EAAE,CAACQ,cAAc,CAAC,CAAC;AACtB;AAAC,GAnBuBD,qBAAqB;EAAA,QACpBL,cAAc;AAAA"},"metadata":{},"sourceType":"module"}