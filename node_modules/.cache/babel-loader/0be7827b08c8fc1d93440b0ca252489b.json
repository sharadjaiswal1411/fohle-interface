{"ast":null,"code":"var _s = $RefreshSig$();\nimport { partitionMixedRouteByProtocol, Protocol } from '@uniswap/router-sdk';\nimport { CurrencyAmount, Percent } from '@uniswap/sdk-core';\nimport { Pair } from '@uniswap/v2-sdk';\nimport { Pool } from '@uniswap/v3-sdk';\nimport { useWeb3React } from '@web3-react/core';\nimport { SUPPORTED_GAS_ESTIMATE_CHAIN_IDS } from 'constants/chains';\nimport { L2_CHAIN_IDS } from 'constants/chains';\nimport JSBI from 'jsbi';\nimport useNativeCurrency from 'lib/hooks/useNativeCurrency';\nimport { useMemo } from 'react';\nimport useGasPrice from './useGasPrice';\nimport useStablecoinPrice, { useStablecoinValue } from './useStablecoinPrice';\nconst V3_SWAP_DEFAULT_SLIPPAGE = new Percent(50, 10000); // .50%\nconst ONE_TENTHS_PERCENT = new Percent(10, 10000); // .10%\nconst DEFAULT_AUTO_SLIPPAGE = ONE_TENTHS_PERCENT;\nconst GAS_ESTIMATE_BUFFER = new Percent(10, 100); // 10%\n\n// Base costs regardless of how many hops in the route\nconst V3_SWAP_BASE_GAS_ESTIMATE = 100000;\nconst V2_SWAP_BASE_GAS_ESTIMATE = 135000;\n\n// Extra cost per hop in the route\nconst V3_SWAP_HOP_GAS_ESTIMATE = 70000;\nconst V2_SWAP_HOP_GAS_ESTIMATE = 50000;\n\n/**\n * Return a guess of the gas cost used in computing slippage tolerance for a given trade\n * @param trade the trade for which to _guess_ the amount of gas it would cost to execute\n *\n * V3 logic is inspired by:\n * https://github.com/Uniswap/smart-order-router/blob/main/src/routers/alpha-router/gas-models/v3/v3-heuristic-gas-model.ts\n * V2 logic is inspired by:\n * https://github.com/Uniswap/smart-order-router/blob/main/src/routers/alpha-router/gas-models/v2/v2-heuristic-gas-model.ts\n */\nfunction guesstimateGas(trade) {\n  if (trade) {\n    let gas = 0;\n    for (const {\n      route\n    } of trade.swaps) {\n      if (route.protocol === Protocol.V2) {\n        gas += V2_SWAP_BASE_GAS_ESTIMATE + route.pools.length * V2_SWAP_HOP_GAS_ESTIMATE;\n      } else if (route.protocol === Protocol.V3) {\n        // V3 gas costs scale on initialized ticks being crossed, but we don't have that data here.\n        // We bake in some tick crossings into the base 100k cost.\n        gas += V3_SWAP_BASE_GAS_ESTIMATE + route.pools.length * V3_SWAP_HOP_GAS_ESTIMATE;\n      } else if (route.protocol === Protocol.MIXED) {\n        const sections = partitionMixedRouteByProtocol(route);\n        gas += sections.reduce((gas, section) => {\n          if (section.every(pool => pool instanceof Pool)) {\n            return gas + V3_SWAP_BASE_GAS_ESTIMATE + section.length * V3_SWAP_HOP_GAS_ESTIMATE;\n          } else if (section.every(pool => pool instanceof Pair)) {\n            return gas + V2_SWAP_BASE_GAS_ESTIMATE + (section.length - 1) * V2_SWAP_HOP_GAS_ESTIMATE;\n          } else {\n            console.warn('Invalid section');\n            return gas;\n          }\n        }, 0);\n      } else {\n        // fallback general gas estimation\n        gas += V3_SWAP_BASE_GAS_ESTIMATE + route.pools.length * V3_SWAP_HOP_GAS_ESTIMATE;\n      }\n    }\n    return gas;\n  }\n  return undefined;\n}\nconst MIN_AUTO_SLIPPAGE_TOLERANCE = new Percent(5, 1000); // 0.5%\nconst MAX_AUTO_SLIPPAGE_TOLERANCE = new Percent(25, 100); // 25%\n\n/**\n * Returns slippage tolerance based on values from current trade, gas estimates from api, and active network.\n */\nexport default function useAutoSlippageTolerance(trade) {\n  _s();\n  var _ref;\n  const {\n    chainId\n  } = useWeb3React();\n  const onL2 = chainId && L2_CHAIN_IDS.includes(chainId);\n  const outputDollarValue = useStablecoinValue(trade === null || trade === void 0 ? void 0 : trade.outputAmount);\n  const nativeGasPrice = useGasPrice();\n  const gasEstimate = guesstimateGas(trade);\n  const nativeCurrency = useNativeCurrency();\n  const nativeCurrencyPrice = useStablecoinPrice((_ref = trade && nativeCurrency) !== null && _ref !== void 0 ? _ref : undefined);\n  return useMemo(() => {\n    if (!trade || onL2) return DEFAULT_AUTO_SLIPPAGE;\n    const nativeGasCost = nativeGasPrice && typeof gasEstimate === 'number' ? JSBI.multiply(nativeGasPrice, JSBI.BigInt(gasEstimate)) : undefined;\n    const dollarGasCost = nativeCurrency && nativeGasCost && nativeCurrencyPrice ? nativeCurrencyPrice.quote(CurrencyAmount.fromRawAmount(nativeCurrency, nativeGasCost)) : undefined;\n\n    // if valid estimate from api and using api trade, use gas estimate from api\n    // NOTE - dont use gas estimate for L2s yet - need to verify accuracy\n    // if not, use local heuristic\n    const dollarCostToUse = chainId && SUPPORTED_GAS_ESTIMATE_CHAIN_IDS.includes(chainId) && (trade === null || trade === void 0 ? void 0 : trade.gasUseEstimateUSD) ? trade.gasUseEstimateUSD.multiply(GAS_ESTIMATE_BUFFER) : dollarGasCost === null || dollarGasCost === void 0 ? void 0 : dollarGasCost.multiply(GAS_ESTIMATE_BUFFER);\n    if (outputDollarValue && dollarCostToUse) {\n      // the rationale is that a user will not want their trade to fail for a loss due to slippage that is less than\n      // the cost of the gas of the failed transaction\n      const fraction = dollarCostToUse.asFraction.divide(outputDollarValue.asFraction);\n      const result = new Percent(fraction.numerator, fraction.denominator);\n      if (result.greaterThan(MAX_AUTO_SLIPPAGE_TOLERANCE)) {\n        return MAX_AUTO_SLIPPAGE_TOLERANCE;\n      }\n      if (result.lessThan(MIN_AUTO_SLIPPAGE_TOLERANCE)) {\n        return MIN_AUTO_SLIPPAGE_TOLERANCE;\n      }\n      return result;\n    }\n    return V3_SWAP_DEFAULT_SLIPPAGE;\n  }, [trade, onL2, nativeGasPrice, gasEstimate, nativeCurrency, nativeCurrencyPrice, chainId, outputDollarValue]);\n}\n_s(useAutoSlippageTolerance, \"iZlS7mnEYYGN492ALf29qhgh5/Q=\", false, function () {\n  return [useWeb3React, useStablecoinValue, useGasPrice, useNativeCurrency, useStablecoinPrice];\n});","map":{"version":3,"names":["partitionMixedRouteByProtocol","Protocol","CurrencyAmount","Percent","Pair","Pool","useWeb3React","SUPPORTED_GAS_ESTIMATE_CHAIN_IDS","L2_CHAIN_IDS","JSBI","useNativeCurrency","useMemo","useGasPrice","useStablecoinPrice","useStablecoinValue","V3_SWAP_DEFAULT_SLIPPAGE","ONE_TENTHS_PERCENT","DEFAULT_AUTO_SLIPPAGE","GAS_ESTIMATE_BUFFER","V3_SWAP_BASE_GAS_ESTIMATE","V2_SWAP_BASE_GAS_ESTIMATE","V3_SWAP_HOP_GAS_ESTIMATE","V2_SWAP_HOP_GAS_ESTIMATE","guesstimateGas","trade","gas","route","swaps","protocol","V2","pools","length","V3","MIXED","sections","reduce","section","every","pool","console","warn","undefined","MIN_AUTO_SLIPPAGE_TOLERANCE","MAX_AUTO_SLIPPAGE_TOLERANCE","useAutoSlippageTolerance","chainId","onL2","includes","outputDollarValue","outputAmount","nativeGasPrice","gasEstimate","nativeCurrency","nativeCurrencyPrice","nativeGasCost","multiply","BigInt","dollarGasCost","quote","fromRawAmount","dollarCostToUse","gasUseEstimateUSD","fraction","asFraction","divide","result","numerator","denominator","greaterThan","lessThan"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/hooks/useAutoSlippageTolerance.ts"],"sourcesContent":["import { MixedRoute, partitionMixedRouteByProtocol, Protocol, Trade } from '@uniswap/router-sdk'\nimport { Currency, CurrencyAmount, Percent, TradeType } from '@uniswap/sdk-core'\nimport { Pair } from '@uniswap/v2-sdk'\nimport { Pool } from '@uniswap/v3-sdk'\nimport { useWeb3React } from '@web3-react/core'\nimport { SUPPORTED_GAS_ESTIMATE_CHAIN_IDS } from 'constants/chains'\nimport { L2_CHAIN_IDS } from 'constants/chains'\nimport JSBI from 'jsbi'\nimport useNativeCurrency from 'lib/hooks/useNativeCurrency'\nimport { useMemo } from 'react'\nimport { InterfaceTrade } from 'state/routing/types'\n\nimport useGasPrice from './useGasPrice'\nimport useStablecoinPrice, { useStablecoinValue } from './useStablecoinPrice'\n\nconst V3_SWAP_DEFAULT_SLIPPAGE = new Percent(50, 10_000) // .50%\nconst ONE_TENTHS_PERCENT = new Percent(10, 10_000) // .10%\nconst DEFAULT_AUTO_SLIPPAGE = ONE_TENTHS_PERCENT\nconst GAS_ESTIMATE_BUFFER = new Percent(10, 100) // 10%\n\n// Base costs regardless of how many hops in the route\nconst V3_SWAP_BASE_GAS_ESTIMATE = 100_000\nconst V2_SWAP_BASE_GAS_ESTIMATE = 135_000\n\n// Extra cost per hop in the route\nconst V3_SWAP_HOP_GAS_ESTIMATE = 70_000\nconst V2_SWAP_HOP_GAS_ESTIMATE = 50_000\n\n/**\n * Return a guess of the gas cost used in computing slippage tolerance for a given trade\n * @param trade the trade for which to _guess_ the amount of gas it would cost to execute\n *\n * V3 logic is inspired by:\n * https://github.com/Uniswap/smart-order-router/blob/main/src/routers/alpha-router/gas-models/v3/v3-heuristic-gas-model.ts\n * V2 logic is inspired by:\n * https://github.com/Uniswap/smart-order-router/blob/main/src/routers/alpha-router/gas-models/v2/v2-heuristic-gas-model.ts\n */\nfunction guesstimateGas(trade: Trade<Currency, Currency, TradeType> | undefined): number | undefined {\n  if (trade) {\n    let gas = 0\n    for (const { route } of trade.swaps) {\n      if (route.protocol === Protocol.V2) {\n        gas += V2_SWAP_BASE_GAS_ESTIMATE + route.pools.length * V2_SWAP_HOP_GAS_ESTIMATE\n      } else if (route.protocol === Protocol.V3) {\n        // V3 gas costs scale on initialized ticks being crossed, but we don't have that data here.\n        // We bake in some tick crossings into the base 100k cost.\n        gas += V3_SWAP_BASE_GAS_ESTIMATE + route.pools.length * V3_SWAP_HOP_GAS_ESTIMATE\n      } else if (route.protocol === Protocol.MIXED) {\n        const sections = partitionMixedRouteByProtocol(route as MixedRoute<Currency, Currency>)\n        gas += sections.reduce((gas, section) => {\n          if (section.every((pool) => pool instanceof Pool)) {\n            return gas + V3_SWAP_BASE_GAS_ESTIMATE + section.length * V3_SWAP_HOP_GAS_ESTIMATE\n          } else if (section.every((pool) => pool instanceof Pair)) {\n            return gas + V2_SWAP_BASE_GAS_ESTIMATE + (section.length - 1) * V2_SWAP_HOP_GAS_ESTIMATE\n          } else {\n            console.warn('Invalid section')\n            return gas\n          }\n        }, 0)\n      } else {\n        // fallback general gas estimation\n        gas += V3_SWAP_BASE_GAS_ESTIMATE + route.pools.length * V3_SWAP_HOP_GAS_ESTIMATE\n      }\n    }\n    return gas\n  }\n  return undefined\n}\n\nconst MIN_AUTO_SLIPPAGE_TOLERANCE = new Percent(5, 1000) // 0.5%\nconst MAX_AUTO_SLIPPAGE_TOLERANCE = new Percent(25, 100) // 25%\n\n/**\n * Returns slippage tolerance based on values from current trade, gas estimates from api, and active network.\n */\nexport default function useAutoSlippageTolerance(\n  trade: InterfaceTrade<Currency, Currency, TradeType> | undefined\n): Percent {\n  const { chainId } = useWeb3React()\n  const onL2 = chainId && L2_CHAIN_IDS.includes(chainId)\n  const outputDollarValue = useStablecoinValue(trade?.outputAmount)\n  const nativeGasPrice = useGasPrice()\n\n  const gasEstimate = guesstimateGas(trade)\n  const nativeCurrency = useNativeCurrency()\n  const nativeCurrencyPrice = useStablecoinPrice((trade && nativeCurrency) ?? undefined)\n\n  return useMemo(() => {\n    if (!trade || onL2) return DEFAULT_AUTO_SLIPPAGE\n\n    const nativeGasCost =\n      nativeGasPrice && typeof gasEstimate === 'number'\n        ? JSBI.multiply(nativeGasPrice, JSBI.BigInt(gasEstimate))\n        : undefined\n    const dollarGasCost =\n      nativeCurrency && nativeGasCost && nativeCurrencyPrice\n        ? nativeCurrencyPrice.quote(CurrencyAmount.fromRawAmount(nativeCurrency, nativeGasCost))\n        : undefined\n\n    // if valid estimate from api and using api trade, use gas estimate from api\n    // NOTE - dont use gas estimate for L2s yet - need to verify accuracy\n    // if not, use local heuristic\n    const dollarCostToUse =\n      chainId && SUPPORTED_GAS_ESTIMATE_CHAIN_IDS.includes(chainId) && trade?.gasUseEstimateUSD\n        ? trade.gasUseEstimateUSD.multiply(GAS_ESTIMATE_BUFFER)\n        : dollarGasCost?.multiply(GAS_ESTIMATE_BUFFER)\n\n    if (outputDollarValue && dollarCostToUse) {\n      // the rationale is that a user will not want their trade to fail for a loss due to slippage that is less than\n      // the cost of the gas of the failed transaction\n      const fraction = dollarCostToUse.asFraction.divide(outputDollarValue.asFraction)\n      const result = new Percent(fraction.numerator, fraction.denominator)\n      if (result.greaterThan(MAX_AUTO_SLIPPAGE_TOLERANCE)) {\n        return MAX_AUTO_SLIPPAGE_TOLERANCE\n      }\n\n      if (result.lessThan(MIN_AUTO_SLIPPAGE_TOLERANCE)) {\n        return MIN_AUTO_SLIPPAGE_TOLERANCE\n      }\n\n      return result\n    }\n\n    return V3_SWAP_DEFAULT_SLIPPAGE\n  }, [trade, onL2, nativeGasPrice, gasEstimate, nativeCurrency, nativeCurrencyPrice, chainId, outputDollarValue])\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}