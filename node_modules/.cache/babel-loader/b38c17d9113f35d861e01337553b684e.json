{"ast":null,"code":"/**\n * Provider for getting V2 pools, with functionality for caching the results.\n *\n * @export\n * @class CachingV2SubgraphProvider\n */\nexport class CachingV2SubgraphProvider {\n  /**\n   * Creates an instance of CachingV2SubgraphProvider.\n   * @param chainId The chain id to use.\n   * @param subgraphProvider The provider to use to get the subgraph pools when not in the cache.\n   * @param cache Cache instance to hold cached pools.\n   */\n  constructor(chainId, subgraphProvider, cache) {\n    this.chainId = chainId;\n    this.subgraphProvider = subgraphProvider;\n    this.cache = cache;\n    this.SUBGRAPH_KEY = chainId => `subgraph-pools-v2-${chainId}`;\n  }\n  async getPools() {\n    const cachedPools = await this.cache.get(this.SUBGRAPH_KEY(this.chainId));\n    if (cachedPools) {\n      return cachedPools;\n    }\n    const pools = await this.subgraphProvider.getPools();\n    await this.cache.set(this.SUBGRAPH_KEY(this.chainId), pools);\n    return pools;\n  }\n}","map":{"version":3,"sources":["../../../../src/providers/v2/caching-subgraph-provider.ts"],"names":[],"mappings":"AAKA;;;;;AAKG;AACH,OAAM,MAAO,yBAAyB,CAAA;EAGpC;;;;;AAKG;EACH,WAAA,CACU,OAAgB,EACd,gBAAqC,EACvC,KAA+B,EAAA;IAF/B,IAAA,CAAA,OAAO,GAAP,OAAO;IACL,IAAA,CAAA,gBAAgB,GAAhB,gBAAgB;IAClB,IAAA,CAAA,KAAK,GAAL,KAAK;IAXP,IAAA,CAAA,YAAY,GAAI,OAAgB,IAAK,qBAAqB,OAAO,EAAE;EAYxE;EAEI,MAAM,QAAQ,GAAA;IACnB,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAEzE,IAAI,WAAW,EAAE;MACf,OAAO,WAAW;IACnB;IAED,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE;IAEpD,MAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,KAAK,CAAC;IAE5D,OAAO,KAAK;EACd;AACD","sourceRoot":"","sourcesContent":["/**\n * Provider for getting V2 pools, with functionality for caching the results.\n *\n * @export\n * @class CachingV2SubgraphProvider\n */\nexport class CachingV2SubgraphProvider {\n    /**\n     * Creates an instance of CachingV2SubgraphProvider.\n     * @param chainId The chain id to use.\n     * @param subgraphProvider The provider to use to get the subgraph pools when not in the cache.\n     * @param cache Cache instance to hold cached pools.\n     */\n    constructor(chainId, subgraphProvider, cache) {\n        this.chainId = chainId;\n        this.subgraphProvider = subgraphProvider;\n        this.cache = cache;\n        this.SUBGRAPH_KEY = (chainId) => `subgraph-pools-v2-${chainId}`;\n    }\n    async getPools() {\n        const cachedPools = await this.cache.get(this.SUBGRAPH_KEY(this.chainId));\n        if (cachedPools) {\n            return cachedPools;\n        }\n        const pools = await this.subgraphProvider.getPools();\n        await this.cache.set(this.SUBGRAPH_KEY(this.chainId), pools);\n        return pools;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGluZy1zdWJncmFwaC1wcm92aWRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9wcm92aWRlcnMvdjIvY2FjaGluZy1zdWJncmFwaC1wcm92aWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFLQTs7Ozs7R0FLRztBQUNILE1BQU0sT0FBTyx5QkFBeUI7SUFHcEM7Ozs7O09BS0c7SUFDSCxZQUNVLE9BQWdCLEVBQ2QsZ0JBQXFDLEVBQ3ZDLEtBQStCO1FBRi9CLFlBQU8sR0FBUCxPQUFPLENBQVM7UUFDZCxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQXFCO1FBQ3ZDLFVBQUssR0FBTCxLQUFLLENBQTBCO1FBWGpDLGlCQUFZLEdBQUcsQ0FBQyxPQUFnQixFQUFFLEVBQUUsQ0FBQyxxQkFBcUIsT0FBTyxFQUFFLENBQUM7SUFZekUsQ0FBQztJQUVHLEtBQUssQ0FBQyxRQUFRO1FBQ25CLE1BQU0sV0FBVyxHQUFHLE1BQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUUxRSxJQUFJLFdBQVcsRUFBRTtZQUNmLE9BQU8sV0FBVyxDQUFDO1NBQ3BCO1FBRUQsTUFBTSxLQUFLLEdBQUcsTUFBTSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxFQUFFLENBQUM7UUFFckQsTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUU3RCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7Q0FDRiJ9"]},"metadata":{},"sourceType":"module"}