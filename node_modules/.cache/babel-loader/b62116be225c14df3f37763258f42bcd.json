{"ast":null,"code":"import { addGlobalEventProcessor, getCurrentHub } from '@sentry/core';\nimport { WINDOW } from '../helpers.js';\n\n/** HttpContext integration collects information about HTTP request headers */\nclass HttpContext {\n  constructor() {\n    HttpContext.prototype.__init.call(this);\n  }\n  /**\n   * @inheritDoc\n   */\n  static __initStatic() {\n    this.id = 'HttpContext';\n  }\n\n  /**\n   * @inheritDoc\n   */\n  __init() {\n    this.name = HttpContext.id;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setupOnce() {\n    addGlobalEventProcessor(event => {\n      if (getCurrentHub().getIntegration(HttpContext)) {\n        // if none of the information we want exists, don't bother\n        if (!WINDOW.navigator && !WINDOW.location && !WINDOW.document) {\n          return event;\n        }\n\n        // grab as much info as exists and add it to the event\n        const url = event.request && event.request.url || WINDOW.location && WINDOW.location.href;\n        const {\n          referrer\n        } = WINDOW.document || {};\n        const {\n          userAgent\n        } = WINDOW.navigator || {};\n        const headers = {\n          ...(event.request && event.request.headers),\n          ...(referrer && {\n            Referer: referrer\n          }),\n          ...(userAgent && {\n            'User-Agent': userAgent\n          })\n        };\n        const request = {\n          ...(url && {\n            url\n          }),\n          headers\n        };\n        return {\n          ...event,\n          request\n        };\n      }\n      return event;\n    });\n  }\n}\nHttpContext.__initStatic();\nexport { HttpContext };","map":{"version":3,"sources":["../../../../src/integrations/httpcontext.ts"],"names":[],"mappings":";;;AAKA;AACA,MAAA,WAAA,CAAA;EAAA,WAAA,GAAA;IAAA,WAAA,CAAA,SAAA,CAAA,MAAA,CAAA,IAAA,CAAA,IAAA,CAAA;EAAA;EACA;AACA;AACA;EACA,OAAA,YAAA,GAAA;IAAA,IAAA,CAAA,EAAA,GAAA,aAAA;EAAA;;EAEA;AACA;AACA;EACA,MAAA,GAAA;IAAA,IAAA,CAAA,IAAA,GAAA,WAAA,CAAA,EAAA;EAAA;;EAEA;AACA;AACA;EACA,SAAA,GAAA;IACA,uBAAA,CAAA,KAAA,IAAA;MACA,IAAA,aAAA,EAAA,CAAA,cAAA,CAAA,WAAA,CAAA,EAAA;QACA;QACA,IAAA,CAAA,MAAA,CAAA,SAAA,IAAA,CAAA,MAAA,CAAA,QAAA,IAAA,CAAA,MAAA,CAAA,QAAA,EAAA;UACA,OAAA,KAAA;QACA;;QAEA;QACA,MAAA,GAAA,GAAA,KAAA,CAAA,OAAA,IAAA,KAAA,CAAA,OAAA,CAAA,GAAA,IAAA,MAAA,CAAA,QAAA,IAAA,MAAA,CAAA,QAAA,CAAA,IAAA;QACA,MAAA;UAAA;QAAA,CAAA,GAAA,MAAA,CAAA,QAAA,IAAA,CAAA,CAAA;QACA,MAAA;UAAA;QAAA,CAAA,GAAA,MAAA,CAAA,SAAA,IAAA,CAAA,CAAA;QAEA,MAAA,OAAA,GAAA;UACA,IAAA,KAAA,CAAA,OAAA,IAAA,KAAA,CAAA,OAAA,CAAA,OAAA,CAAA;UACA,IAAA,QAAA,IAAA;YAAA,OAAA,EAAA;UAAA,CAAA,CAAA;UACA,IAAA,SAAA,IAAA;YAAA,YAAA,EAAA;UAAA,CAAA;QACA,CAAA;QACA,MAAA,OAAA,GAAA;UAAA,IAAA,GAAA,IAAA;YAAA;UAAA,CAAA,CAAA;UAAA;QAAA,CAAA;QAEA,OAAA;UAAA,GAAA,KAAA;UAAA;QAAA,CAAA;MACA;MACA,OAAA,KAAA;IACA,CAAA,CAAA;EACA;AACA;AAAA,WAAA,CAAA,YAAA,EAAA","sourcesContent":["import { addGlobalEventProcessor, getCurrentHub } from '@sentry/core';\nimport { Event, Integration } from '@sentry/types';\n\nimport { WINDOW } from '../helpers';\n\n/** HttpContext integration collects information about HTTP request headers */\nexport class HttpContext implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'HttpContext';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = HttpContext.id;\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    addGlobalEventProcessor((event: Event) => {\n      if (getCurrentHub().getIntegration(HttpContext)) {\n        // if none of the information we want exists, don't bother\n        if (!WINDOW.navigator && !WINDOW.location && !WINDOW.document) {\n          return event;\n        }\n\n        // grab as much info as exists and add it to the event\n        const url = (event.request && event.request.url) || (WINDOW.location && WINDOW.location.href);\n        const { referrer } = WINDOW.document || {};\n        const { userAgent } = WINDOW.navigator || {};\n\n        const headers = {\n          ...(event.request && event.request.headers),\n          ...(referrer && { Referer: referrer }),\n          ...(userAgent && { 'User-Agent': userAgent }),\n        };\n        const request = { ...(url && { url }), headers };\n\n        return { ...event, request };\n      }\n      return event;\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}