{"ast":null,"code":"var _regeneratorRuntime = require(\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\nvar _asyncToGenerator = require(\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\nvar _classCallCheck = require(\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nvar _inherits = require(\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\nvar _createSuper = require(\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\nvar EthQuery = require('eth-query');\nvar pify = require('pify');\nvar BaseFilterWithHistory = require('./base-filter-history');\nvar _require = require('./hexUtils'),\n  bnToHex = _require.bnToHex,\n  hexToInt = _require.hexToInt,\n  incrementHexInt = _require.incrementHexInt,\n  minBlockRef = _require.minBlockRef,\n  blockRefIsNumber = _require.blockRefIsNumber;\nvar LogFilter = /*#__PURE__*/function (_BaseFilterWithHistor) {\n  \"use strict\";\n\n  _inherits(LogFilter, _BaseFilterWithHistor);\n  var _super = _createSuper(LogFilter);\n  function LogFilter(_ref) {\n    var _this;\n    var provider = _ref.provider,\n      params = _ref.params;\n    _classCallCheck(this, LogFilter);\n    _this = _super.call(this);\n    _this.type = 'log';\n    _this.ethQuery = new EthQuery(provider);\n    _this.params = Object.assign({\n      fromBlock: 'latest',\n      toBlock: 'latest',\n      address: undefined,\n      topics: []\n    }, params);\n    // normalize address parameter\n    if (_this.params.address) {\n      // ensure array\n      if (!Array.isArray(_this.params.address)) {\n        _this.params.address = [_this.params.address];\n      }\n      // ensure lowercase\n      _this.params.address = _this.params.address.map(function (address) {\n        return address.toLowerCase();\n      });\n    }\n    return _this;\n  }\n  _createClass(LogFilter, [{\n    key: \"initialize\",\n    value: function () {\n      var _initialize = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {\n        var currentBlock, fromBlock, toBlock, params, newLogs;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                currentBlock = _ref2.currentBlock;\n                // resolve params.fromBlock\n                fromBlock = this.params.fromBlock;\n                if (['latest', 'pending'].includes(fromBlock)) fromBlock = currentBlock;\n                if ('earliest' === fromBlock) fromBlock = '0x0';\n                this.params.fromBlock = fromBlock;\n                // set toBlock for initial lookup\n                toBlock = minBlockRef(this.params.toBlock, currentBlock);\n                params = Object.assign({}, this.params, {\n                  toBlock: toBlock\n                }); // fetch logs and add to results\n                _context.next = 9;\n                return this._fetchLogs(params);\n              case 9:\n                newLogs = _context.sent;\n                this.addInitialResults(newLogs);\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function initialize(_x) {\n        return _initialize.apply(this, arguments);\n      }\n      return initialize;\n    }()\n  }, {\n    key: \"update\",\n    value: function () {\n      var _update = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref3) {\n        var _this2 = this;\n        var oldBlock, newBlock, toBlock, fromBlock, params, newLogs, matchingLogs;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                oldBlock = _ref3.oldBlock, newBlock = _ref3.newBlock;\n                // configure params for this update\n                toBlock = newBlock;\n                // oldBlock is empty on first sync\n                if (oldBlock) {\n                  fromBlock = incrementHexInt(oldBlock);\n                } else {\n                  fromBlock = newBlock;\n                }\n                // fetch logs\n                params = Object.assign({}, this.params, {\n                  fromBlock: fromBlock,\n                  toBlock: toBlock\n                });\n                _context2.next = 6;\n                return this._fetchLogs(params);\n              case 6:\n                newLogs = _context2.sent;\n                matchingLogs = newLogs.filter(function (log) {\n                  return _this2.matchLog(log);\n                }); // add to results\n                this.addResults(matchingLogs);\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function update(_x2) {\n        return _update.apply(this, arguments);\n      }\n      return update;\n    }()\n  }, {\n    key: \"_fetchLogs\",\n    value: function () {\n      var _fetchLogs2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(params) {\n        var _this3 = this;\n        var newLogs;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return pify(function (cb) {\n                  return _this3.ethQuery.getLogs(params, cb);\n                })();\n              case 2:\n                newLogs = _context3.sent;\n                return _context3.abrupt(\"return\", newLogs);\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n      function _fetchLogs(_x3) {\n        return _fetchLogs2.apply(this, arguments);\n      }\n      return _fetchLogs;\n    }()\n  }, {\n    key: \"matchLog\",\n    value: function matchLog(log) {\n      // check if block number in bounds:\n      if (hexToInt(this.params.fromBlock) >= hexToInt(log.blockNumber)) return false;\n      if (blockRefIsNumber(this.params.toBlock) && hexToInt(this.params.toBlock) <= hexToInt(log.blockNumber)) return false;\n\n      // address is correct:\n      var normalizedLogAddress = log.address && log.address.toLowerCase();\n      if (this.params.address && normalizedLogAddress && !this.params.address.includes(normalizedLogAddress)) return false;\n\n      // topics match:\n      // topics are position-dependant\n      // topics can be nested to represent `or` [[a || b], c]\n      // topics can be null, representing a wild card for that position\n      var topicsMatch = this.params.topics.every(function (topicPattern, index) {\n        // pattern is longer than actual topics\n        var logTopic = log.topics[index];\n        if (!logTopic) return false;\n        logTopic = logTopic.toLowerCase();\n        // normalize subTopics\n        var subtopicsToMatch = Array.isArray(topicPattern) ? topicPattern : [topicPattern];\n        // check for wild card\n        var subtopicsIncludeWildcard = subtopicsToMatch.includes(null);\n        if (subtopicsIncludeWildcard) return true;\n        subtopicsToMatch = subtopicsToMatch.map(function (topic) {\n          return topic.toLowerCase();\n        });\n        // check each possible matching topic\n        var topicDoesMatch = subtopicsToMatch.includes(logTopic);\n        return topicDoesMatch;\n      });\n      return topicsMatch;\n    }\n  }]);\n  return LogFilter;\n}(BaseFilterWithHistory);\nmodule.exports = LogFilter;","map":{"version":3,"names":["EthQuery","require","pify","BaseFilterWithHistory","bnToHex","hexToInt","incrementHexInt","minBlockRef","blockRefIsNumber","LogFilter","provider","params","type","ethQuery","Object","assign","fromBlock","toBlock","address","undefined","topics","Array","isArray","map","toLowerCase","currentBlock","includes","_fetchLogs","newLogs","addInitialResults","oldBlock","newBlock","matchingLogs","filter","log","matchLog","addResults","cb","getLogs","blockNumber","normalizedLogAddress","topicsMatch","every","topicPattern","index","logTopic","subtopicsToMatch","subtopicsIncludeWildcard","topic","topicDoesMatch","module","exports"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/eth-json-rpc-filters/log-filter.js"],"sourcesContent":["const EthQuery = require('eth-query')\nconst pify = require('pify')\nconst BaseFilterWithHistory = require('./base-filter-history')\nconst { bnToHex, hexToInt, incrementHexInt, minBlockRef, blockRefIsNumber } = require('./hexUtils')\n\nclass LogFilter extends BaseFilterWithHistory {\n\n  constructor ({ provider, params }) {\n    super()\n    this.type = 'log'\n    this.ethQuery = new EthQuery(provider)\n    this.params = Object.assign({\n      fromBlock: 'latest',\n      toBlock: 'latest',\n      address: undefined,\n      topics: [],\n    }, params)\n    // normalize address parameter\n    if (this.params.address) {\n      // ensure array\n      if (!Array.isArray(this.params.address)) {\n        this.params.address = [this.params.address]\n      }\n      // ensure lowercase\n      this.params.address = this.params.address.map(address => address.toLowerCase())\n    }\n  }\n\n  async initialize({ currentBlock }) {\n    // resolve params.fromBlock\n    let fromBlock = this.params.fromBlock\n    if (['latest', 'pending'].includes(fromBlock)) fromBlock = currentBlock\n    if ('earliest' === fromBlock) fromBlock = '0x0'\n    this.params.fromBlock = fromBlock\n    // set toBlock for initial lookup\n    const toBlock = minBlockRef(this.params.toBlock, currentBlock)\n    const params = Object.assign({}, this.params, { toBlock })\n    // fetch logs and add to results\n    const newLogs = await this._fetchLogs(params)\n    this.addInitialResults(newLogs)\n  }\n\n  async update ({ oldBlock, newBlock }) {\n    // configure params for this update\n    const toBlock = newBlock\n    let fromBlock\n    // oldBlock is empty on first sync\n    if (oldBlock) {\n      fromBlock = incrementHexInt(oldBlock)\n    } else {\n      fromBlock = newBlock\n    }\n    // fetch logs\n    const params = Object.assign({}, this.params, { fromBlock, toBlock })\n    const newLogs = await this._fetchLogs(params)\n    const matchingLogs = newLogs.filter(log => this.matchLog(log))\n\n    // add to results\n    this.addResults(matchingLogs)\n  }\n\n  async _fetchLogs (params) {\n    const newLogs = await pify(cb => this.ethQuery.getLogs(params, cb))()\n    // add to results\n    return newLogs\n  }\n\n  matchLog(log) {\n    // check if block number in bounds:\n    if (hexToInt(this.params.fromBlock) >= hexToInt(log.blockNumber)) return false\n    if (blockRefIsNumber(this.params.toBlock) && hexToInt(this.params.toBlock) <= hexToInt(log.blockNumber)) return false\n\n    // address is correct:\n    const normalizedLogAddress = log.address && log.address.toLowerCase()\n    if (this.params.address && normalizedLogAddress && !this.params.address.includes(normalizedLogAddress)) return false\n\n    // topics match:\n    // topics are position-dependant\n    // topics can be nested to represent `or` [[a || b], c]\n    // topics can be null, representing a wild card for that position\n    const topicsMatch = this.params.topics.every((topicPattern, index) => {\n      // pattern is longer than actual topics\n      let logTopic = log.topics[index]\n      if (!logTopic) return false\n      logTopic = logTopic.toLowerCase()\n      // normalize subTopics\n      let subtopicsToMatch = Array.isArray(topicPattern) ? topicPattern : [topicPattern]\n      // check for wild card\n      const subtopicsIncludeWildcard = subtopicsToMatch.includes(null)\n      if (subtopicsIncludeWildcard) return true\n      subtopicsToMatch = subtopicsToMatch.map(topic => topic.toLowerCase())\n      // check each possible matching topic\n      const topicDoesMatch = subtopicsToMatch.includes(logTopic)\n      return topicDoesMatch\n    })\n\n    return topicsMatch\n  }\n\n}\n\nmodule.exports = LogFilter\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}