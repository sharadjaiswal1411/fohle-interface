{"ast":null,"code":"import { isPooledMarket, Markets } from 'nft/types';\nimport { calcAvgGroupPoolPrice, formatWeiToDecimal, isInSameMarketplaceCollection, isInSameSudoSwapPool } from 'nft/utils';\nconst isTheSame = (item, routeAsset) => {\n  // if route asset has id, match by id\n  if ('id' in routeAsset && routeAsset.id) {\n    return routeAsset.id === item.id;\n  } else {\n    return 'address' in routeAsset && routeAsset.address.toLowerCase() === item.address.toLowerCase() && routeAsset.tokenId === item.tokenId;\n  }\n};\nconst isPriceDiff = (oldPrice, newPrice) => {\n  return formatWeiToDecimal(oldPrice) !== formatWeiToDecimal(newPrice);\n};\nconst isAveragePriceOfPooledAssets = (asset, numberOfAssetsInPool, expectedPrice) => {\n  return !isPriceDiff(calcAvgGroupPoolPrice(asset, numberOfAssetsInPool), expectedPrice);\n};\nconst isAveragedPrice = (item, items, route, txRoute) => {\n  if (!(route && 'priceInfo' in route.assetOut)) return false;\n  return !!item.marketplace && isPooledMarket(item.marketplace) && isAveragePriceOfPooledAssets(item, items.filter(routeItem => itemInRouteAndSamePool(item, routeItem, txRoute)).length, route.assetOut.priceInfo.basePrice);\n};\nconst getRouteForItem = (item, txRoute) => {\n  return txRoute && txRoute.find(r => r.action === 'Buy' && isTheSame(item, r.assetOut));\n};\nconst itemHasRoute = (item, txRoute) => {\n  return !!getRouteForItem(item, txRoute);\n};\nconst itemInRouteAndSamePool = (item, routeItem, txRoute) => {\n  return itemHasRoute(routeItem, txRoute) && (item.marketplace === Markets.Sudoswap ? isInSameSudoSwapPool(item, routeItem) : isInSameMarketplaceCollection(item, routeItem));\n};\nexport const combineBuyItemsWithTxRoute = (items, txRoute) => {\n  return items.map(item => {\n    const route = getRouteForItem(item, txRoute);\n\n    // if the item is not found in txRoute, it means it's no longer for sale\n    if (txRoute && !route) {\n      return {\n        ...item,\n        isUnavailable: true\n      };\n    }\n    const newPriceInfo = item.updatedPriceInfo ? item.updatedPriceInfo : item.priceInfo;\n\n    // if the price changed\n    if (route && 'priceInfo' in route.assetOut) {\n      if (isPriceDiff(newPriceInfo.basePrice, route.assetOut.priceInfo.basePrice)) {\n        if (!isAveragedPrice(item, items, route, txRoute)) {\n          return {\n            ...item,\n            updatedPriceInfo: route.assetOut.priceInfo\n          };\n        }\n      }\n    }\n    return {\n      ...item,\n      priceInfo: newPriceInfo,\n      updatedPriceInfo: undefined,\n      orderSource: route && 'orderSource' in route.assetOut ? route.assetOut.orderSource : undefined\n    };\n  });\n};","map":{"version":3,"names":["isPooledMarket","Markets","calcAvgGroupPoolPrice","formatWeiToDecimal","isInSameMarketplaceCollection","isInSameSudoSwapPool","isTheSame","item","routeAsset","id","address","toLowerCase","tokenId","isPriceDiff","oldPrice","newPrice","isAveragePriceOfPooledAssets","asset","numberOfAssetsInPool","expectedPrice","isAveragedPrice","items","route","txRoute","assetOut","marketplace","filter","routeItem","itemInRouteAndSamePool","length","priceInfo","basePrice","getRouteForItem","find","r","action","itemHasRoute","Sudoswap","combineBuyItemsWithTxRoute","map","isUnavailable","newPriceInfo","updatedPriceInfo","undefined","orderSource"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/nft/utils/txRoute/combineItemsWithTxRoute.ts"],"sourcesContent":["import { BuyItem, GenieAsset, isPooledMarket, Markets, PriceInfo, RoutingItem, UpdatedGenieAsset } from 'nft/types'\nimport {\n  calcAvgGroupPoolPrice,\n  formatWeiToDecimal,\n  isInSameMarketplaceCollection,\n  isInSameSudoSwapPool,\n} from 'nft/utils'\n\nconst isTheSame = (item: GenieAsset, routeAsset: BuyItem | PriceInfo) => {\n  // if route asset has id, match by id\n  if ('id' in routeAsset && routeAsset.id) {\n    return routeAsset.id === item.id\n  } else {\n    return (\n      'address' in routeAsset &&\n      routeAsset.address.toLowerCase() === item.address.toLowerCase() &&\n      routeAsset.tokenId === item.tokenId\n    )\n  }\n}\n\nconst isPriceDiff = (oldPrice: string, newPrice: string) => {\n  return formatWeiToDecimal(oldPrice) !== formatWeiToDecimal(newPrice)\n}\n\nconst isAveragePriceOfPooledAssets = (\n  asset: GenieAsset,\n  numberOfAssetsInPool: number,\n  expectedPrice: string\n): boolean => {\n  return !isPriceDiff(calcAvgGroupPoolPrice(asset, numberOfAssetsInPool), expectedPrice)\n}\n\nconst isAveragedPrice = (\n  item: UpdatedGenieAsset,\n  items: UpdatedGenieAsset[],\n  route: RoutingItem,\n  txRoute?: RoutingItem[]\n): boolean => {\n  if (!(route && 'priceInfo' in route.assetOut)) return false\n\n  return (\n    !!item.marketplace &&\n    isPooledMarket(item.marketplace) &&\n    isAveragePriceOfPooledAssets(\n      item,\n      items.filter((routeItem) => itemInRouteAndSamePool(item, routeItem, txRoute)).length,\n      route.assetOut.priceInfo.basePrice\n    )\n  )\n}\n\nconst getRouteForItem = (item: UpdatedGenieAsset, txRoute?: RoutingItem[]): RoutingItem | undefined => {\n  return txRoute && txRoute.find((r) => r.action === 'Buy' && isTheSame(item, r.assetOut))\n}\n\nconst itemHasRoute = (item: UpdatedGenieAsset, txRoute?: RoutingItem[]): boolean => {\n  return !!getRouteForItem(item, txRoute)\n}\n\nconst itemInRouteAndSamePool = (\n  item: UpdatedGenieAsset,\n  routeItem: UpdatedGenieAsset,\n  txRoute?: RoutingItem[]\n): boolean => {\n  return (\n    itemHasRoute(routeItem, txRoute) &&\n    (item.marketplace === Markets.Sudoswap\n      ? isInSameSudoSwapPool(item, routeItem)\n      : isInSameMarketplaceCollection(item, routeItem))\n  )\n}\n\nexport const combineBuyItemsWithTxRoute = (\n  items: UpdatedGenieAsset[],\n  txRoute?: RoutingItem[]\n): UpdatedGenieAsset[] => {\n  return items.map((item) => {\n    const route = getRouteForItem(item, txRoute)\n\n    // if the item is not found in txRoute, it means it's no longer for sale\n    if (txRoute && !route) {\n      return {\n        ...item,\n        isUnavailable: true,\n      }\n    }\n\n    const newPriceInfo = item.updatedPriceInfo ? item.updatedPriceInfo : item.priceInfo\n\n    // if the price changed\n    if (route && 'priceInfo' in route.assetOut) {\n      if (isPriceDiff(newPriceInfo.basePrice, route.assetOut.priceInfo.basePrice)) {\n        if (!isAveragedPrice(item, items, route, txRoute)) {\n          return {\n            ...item,\n            updatedPriceInfo: route.assetOut.priceInfo,\n          }\n        }\n      }\n    }\n\n    return {\n      ...item,\n      priceInfo: newPriceInfo,\n      updatedPriceInfo: undefined,\n      orderSource: route && 'orderSource' in route.assetOut ? route.assetOut.orderSource : undefined,\n    }\n  })\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}