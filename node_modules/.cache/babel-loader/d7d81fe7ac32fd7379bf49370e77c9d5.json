{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { PluginType } from '@amplitude/analytics-types';\nimport UAParser from '@amplitude/ua-parser-js';\nimport { UUID } from '@amplitude/analytics-core';\nimport { getLanguage } from '@amplitude/analytics-client-common';\nimport { VERSION } from '../version';\nvar BROWSER_PLATFORM = 'Web';\nvar IP_ADDRESS = '$remote';\nvar Context = /** @class */function () {\n  function Context() {\n    this.name = 'context';\n    this.type = PluginType.BEFORE;\n    this.eventId = 0;\n    this.library = \"amplitude-ts/\".concat(VERSION);\n    var agent;\n    /* istanbul ignore else */\n    if (typeof navigator !== 'undefined') {\n      agent = navigator.userAgent;\n    }\n    this.uaResult = new UAParser(agent).getResult();\n  }\n  Context.prototype.setup = function (config) {\n    this.config = config;\n    return Promise.resolve(undefined);\n  };\n  Context.prototype.execute = function (context) {\n    return __awaiter(this, void 0, void 0, function () {\n      var time, osName, osVersion, deviceModel, deviceVendor, event;\n      return __generator(this, function (_a) {\n        /**\n         * Manages user session triggered by new events\n         */\n        if (!this.isSessionValid()) {\n          // Creates new session\n          this.config.sessionId = Date.now();\n        } // else use previously creates session\n        // Updates last event time to extend time-based session\n        this.config.lastEventTime = Date.now();\n        time = new Date().getTime();\n        osName = this.uaResult.browser.name;\n        osVersion = this.uaResult.browser.version;\n        deviceModel = this.uaResult.device.model || this.uaResult.os.name;\n        deviceVendor = this.uaResult.device.vendor;\n        event = __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({\n          user_id: this.config.userId,\n          device_id: this.config.deviceId,\n          session_id: this.config.sessionId,\n          time: time\n        }, this.config.appVersion && {\n          app_version: this.config.appVersion\n        }), this.config.trackingOptions.platform && {\n          platform: BROWSER_PLATFORM\n        }), this.config.trackingOptions.osName && {\n          os_name: osName\n        }), this.config.trackingOptions.osVersion && {\n          os_version: osVersion\n        }), this.config.trackingOptions.deviceManufacturer && {\n          device_manufacturer: deviceVendor\n        }), this.config.trackingOptions.deviceModel && {\n          device_model: deviceModel\n        }), this.config.trackingOptions.language && {\n          language: getLanguage()\n        }), this.config.trackingOptions.ipAddress && {\n          ip: IP_ADDRESS\n        }), {\n          insert_id: UUID(),\n          partner_id: this.config.partnerId,\n          plan: this.config.plan\n        }), this.config.ingestionMetadata && {\n          ingestion_metadata: {\n            source_name: this.config.ingestionMetadata.sourceName,\n            source_version: this.config.ingestionMetadata.sourceVersion\n          }\n        }), context), {\n          event_id: this.eventId++,\n          library: this.library\n        });\n        return [2 /*return*/, event];\n      });\n    });\n  };\n  Context.prototype.isSessionValid = function () {\n    var lastEventTime = this.config.lastEventTime || Date.now();\n    var timeSinceLastEvent = Date.now() - lastEventTime;\n    return timeSinceLastEvent < this.config.sessionTimeout;\n  };\n  return Context;\n}();\nexport { Context };","map":{"version":3,"sources":["../../../src/plugins/context.ts"],"names":[],"mappings":"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","sourcesContent":["import { BeforePlugin, BrowserConfig, Event, PluginType } from '@amplitude/analytics-types';\nimport UAParser from '@amplitude/ua-parser-js';\nimport { UUID } from '@amplitude/analytics-core';\nimport { getLanguage } from '@amplitude/analytics-client-common';\nimport { VERSION } from '../version';\n\nconst BROWSER_PLATFORM = 'Web';\nconst IP_ADDRESS = '$remote';\nexport class Context implements BeforePlugin {\n  name = 'context';\n  type = PluginType.BEFORE as const;\n\n  // this.config is defined in setup() which will always be called first\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  config: BrowserConfig;\n  eventId = 0;\n  uaResult: UAParser.IResult;\n  library = `amplitude-ts/${VERSION}`;\n\n  constructor() {\n    let agent: string | undefined;\n    /* istanbul ignore else */\n    if (typeof navigator !== 'undefined') {\n      agent = navigator.userAgent;\n    }\n    this.uaResult = new UAParser(agent).getResult();\n  }\n\n  setup(config: BrowserConfig): Promise<undefined> {\n    this.config = config;\n\n    return Promise.resolve(undefined);\n  }\n\n  async execute(context: Event): Promise<Event> {\n    /**\n     * Manages user session triggered by new events\n     */\n    if (!this.isSessionValid()) {\n      // Creates new session\n      this.config.sessionId = Date.now();\n    } // else use previously creates session\n    // Updates last event time to extend time-based session\n    this.config.lastEventTime = Date.now();\n    const time = new Date().getTime();\n    const osName = this.uaResult.browser.name;\n    const osVersion = this.uaResult.browser.version;\n    const deviceModel = this.uaResult.device.model || this.uaResult.os.name;\n    const deviceVendor = this.uaResult.device.vendor;\n\n    const event: Event = {\n      user_id: this.config.userId,\n      device_id: this.config.deviceId,\n      session_id: this.config.sessionId,\n      time,\n      ...(this.config.appVersion && { app_version: this.config.appVersion }),\n      ...(this.config.trackingOptions.platform && { platform: BROWSER_PLATFORM }),\n      ...(this.config.trackingOptions.osName && { os_name: osName }),\n      ...(this.config.trackingOptions.osVersion && { os_version: osVersion }),\n      ...(this.config.trackingOptions.deviceManufacturer && { device_manufacturer: deviceVendor }),\n      ...(this.config.trackingOptions.deviceModel && { device_model: deviceModel }),\n      ...(this.config.trackingOptions.language && { language: getLanguage() }),\n      ...(this.config.trackingOptions.ipAddress && { ip: IP_ADDRESS }),\n      insert_id: UUID(),\n      partner_id: this.config.partnerId,\n      plan: this.config.plan,\n      ...(this.config.ingestionMetadata && {\n        ingestion_metadata: {\n          source_name: this.config.ingestionMetadata.sourceName,\n          source_version: this.config.ingestionMetadata.sourceVersion,\n        },\n      }),\n      ...context,\n      event_id: this.eventId++,\n      library: this.library,\n    };\n    return event;\n  }\n\n  isSessionValid() {\n    const lastEventTime = this.config.lastEventTime || Date.now();\n    const timeSinceLastEvent = Date.now() - lastEventTime;\n    return timeSinceLastEvent < this.config.sessionTimeout;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}