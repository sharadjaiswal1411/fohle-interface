{"ast":null,"code":"import _classCallCheck from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { dropUndefinedKeys } from '@sentry/utils';\nimport { getCurrentHub } from './hub.js';\n\n/**\n * @inheritdoc\n */\nvar SessionFlusher = /*#__PURE__*/function () {\n  function SessionFlusher(client, attrs) {\n    var _this = this;\n    _classCallCheck(this, SessionFlusher);\n    ;\n    SessionFlusher.prototype.__init.call(this);\n    SessionFlusher.prototype.__init2.call(this);\n    SessionFlusher.prototype.__init3.call(this);\n    this._client = client;\n    // Call to setInterval, so that flush is called every 60 seconds\n    this._intervalId = setInterval(function () {\n      return _this.flush();\n    }, this.flushTimeout * 1000);\n    this._sessionAttrs = attrs;\n  }\n\n  /** Checks if `pendingAggregates` has entries, and if it does flushes them by calling `sendSession` */\n  _createClass(SessionFlusher, [{\n    key: \"__init\",\n    value: function __init() {\n      this.flushTimeout = 60;\n    }\n  }, {\n    key: \"__init2\",\n    value: function __init2() {\n      this._pendingAggregates = {};\n    }\n  }, {\n    key: \"__init3\",\n    value: function __init3() {\n      this._isEnabled = true;\n    }\n  }, {\n    key: \"flush\",\n    value: function flush() {\n      var sessionAggregates = this.getSessionAggregates();\n      if (sessionAggregates.aggregates.length === 0) {\n        return;\n      }\n      this._pendingAggregates = {};\n      this._client.sendSession(sessionAggregates);\n    }\n\n    /** Massages the entries in `pendingAggregates` and returns aggregated sessions */\n  }, {\n    key: \"getSessionAggregates\",\n    value: function getSessionAggregates() {\n      var _this2 = this;\n      var aggregates = Object.keys(this._pendingAggregates).map(function (key) {\n        return _this2._pendingAggregates[parseInt(key)];\n      });\n      var sessionAggregates = {\n        attrs: this._sessionAttrs,\n        aggregates: aggregates\n      };\n      return dropUndefinedKeys(sessionAggregates);\n    }\n\n    /** JSDoc */\n  }, {\n    key: \"close\",\n    value: function close() {\n      clearInterval(this._intervalId);\n      this._isEnabled = false;\n      this.flush();\n    }\n\n    /**\n     * Wrapper function for _incrementSessionStatusCount that checks if the instance of SessionFlusher is enabled then\n     * fetches the session status of the request from `Scope.getRequestSession().status` on the scope and passes them to\n     * `_incrementSessionStatusCount` along with the start date\n     */\n  }, {\n    key: \"incrementSessionStatusCount\",\n    value: function incrementSessionStatusCount() {\n      if (!this._isEnabled) {\n        return;\n      }\n      var scope = getCurrentHub().getScope();\n      var requestSession = scope && scope.getRequestSession();\n      if (requestSession && requestSession.status) {\n        this._incrementSessionStatusCount(requestSession.status, new Date());\n        // This is not entirely necessarily but is added as a safe guard to indicate the bounds of a request and so in\n        // case captureRequestSession is called more than once to prevent double count\n        if (scope) {\n          scope.setRequestSession(undefined);\n        }\n        /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n      }\n    }\n\n    /**\n     * Increments status bucket in pendingAggregates buffer (internal state) corresponding to status of\n     * the session received\n     */\n  }, {\n    key: \"_incrementSessionStatusCount\",\n    value: function _incrementSessionStatusCount(status, date) {\n      // Truncate minutes and seconds on Session Started attribute to have one minute bucket keys\n      var sessionStartedTrunc = new Date(date).setSeconds(0, 0);\n      this._pendingAggregates[sessionStartedTrunc] = this._pendingAggregates[sessionStartedTrunc] || {};\n\n      // corresponds to aggregated sessions in one specific minute bucket\n      // for example, {\"started\":\"2021-03-16T08:00:00.000Z\",\"exited\":4, \"errored\": 1}\n      var aggregationCounts = this._pendingAggregates[sessionStartedTrunc];\n      if (!aggregationCounts.started) {\n        aggregationCounts.started = new Date(sessionStartedTrunc).toISOString();\n      }\n      switch (status) {\n        case 'errored':\n          aggregationCounts.errored = (aggregationCounts.errored || 0) + 1;\n          return aggregationCounts.errored;\n        case 'ok':\n          aggregationCounts.exited = (aggregationCounts.exited || 0) + 1;\n          return aggregationCounts.exited;\n        default:\n          aggregationCounts.crashed = (aggregationCounts.crashed || 0) + 1;\n          return aggregationCounts.crashed;\n      }\n    }\n  }]);\n  return SessionFlusher;\n}();\nexport { SessionFlusher };","map":{"version":3,"sources":["../../src/sessionflusher.ts"],"names":[],"mappings":"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","sourcesContent":["import { AggregationCounts, Client, RequestSessionStatus, SessionAggregates, SessionFlusherLike } from '@sentry/types';\nimport { dropUndefinedKeys } from '@sentry/utils';\n\nimport { getCurrentHub } from './hub';\n\ntype ReleaseHealthAttributes = {\n  environment?: string;\n  release: string;\n};\n\n/**\n * @inheritdoc\n */\nexport class SessionFlusher implements SessionFlusherLike {\n  public readonly flushTimeout: number = 60;\n  private _pendingAggregates: Record<number, AggregationCounts> = {};\n  private _sessionAttrs: ReleaseHealthAttributes;\n  private _intervalId: ReturnType<typeof setInterval>;\n  private _isEnabled: boolean = true;\n  private _client: Client;\n\n  public constructor(client: Client, attrs: ReleaseHealthAttributes) {\n    this._client = client;\n    // Call to setInterval, so that flush is called every 60 seconds\n    this._intervalId = setInterval(() => this.flush(), this.flushTimeout * 1000);\n    this._sessionAttrs = attrs;\n  }\n\n  /** Checks if `pendingAggregates` has entries, and if it does flushes them by calling `sendSession` */\n  public flush(): void {\n    const sessionAggregates = this.getSessionAggregates();\n    if (sessionAggregates.aggregates.length === 0) {\n      return;\n    }\n    this._pendingAggregates = {};\n    this._client.sendSession(sessionAggregates);\n  }\n\n  /** Massages the entries in `pendingAggregates` and returns aggregated sessions */\n  public getSessionAggregates(): SessionAggregates {\n    const aggregates: AggregationCounts[] = Object.keys(this._pendingAggregates).map((key: string) => {\n      return this._pendingAggregates[parseInt(key)];\n    });\n\n    const sessionAggregates: SessionAggregates = {\n      attrs: this._sessionAttrs,\n      aggregates,\n    };\n    return dropUndefinedKeys(sessionAggregates);\n  }\n\n  /** JSDoc */\n  public close(): void {\n    clearInterval(this._intervalId);\n    this._isEnabled = false;\n    this.flush();\n  }\n\n  /**\n   * Wrapper function for _incrementSessionStatusCount that checks if the instance of SessionFlusher is enabled then\n   * fetches the session status of the request from `Scope.getRequestSession().status` on the scope and passes them to\n   * `_incrementSessionStatusCount` along with the start date\n   */\n  public incrementSessionStatusCount(): void {\n    if (!this._isEnabled) {\n      return;\n    }\n    const scope = getCurrentHub().getScope();\n    const requestSession = scope && scope.getRequestSession();\n\n    if (requestSession && requestSession.status) {\n      this._incrementSessionStatusCount(requestSession.status, new Date());\n      // This is not entirely necessarily but is added as a safe guard to indicate the bounds of a request and so in\n      // case captureRequestSession is called more than once to prevent double count\n      if (scope) {\n        scope.setRequestSession(undefined);\n      }\n      /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n    }\n  }\n\n  /**\n   * Increments status bucket in pendingAggregates buffer (internal state) corresponding to status of\n   * the session received\n   */\n  private _incrementSessionStatusCount(status: RequestSessionStatus, date: Date): number {\n    // Truncate minutes and seconds on Session Started attribute to have one minute bucket keys\n    const sessionStartedTrunc = new Date(date).setSeconds(0, 0);\n    this._pendingAggregates[sessionStartedTrunc] = this._pendingAggregates[sessionStartedTrunc] || {};\n\n    // corresponds to aggregated sessions in one specific minute bucket\n    // for example, {\"started\":\"2021-03-16T08:00:00.000Z\",\"exited\":4, \"errored\": 1}\n    const aggregationCounts: AggregationCounts = this._pendingAggregates[sessionStartedTrunc];\n    if (!aggregationCounts.started) {\n      aggregationCounts.started = new Date(sessionStartedTrunc).toISOString();\n    }\n\n    switch (status) {\n      case 'errored':\n        aggregationCounts.errored = (aggregationCounts.errored || 0) + 1;\n        return aggregationCounts.errored;\n      case 'ok':\n        aggregationCounts.exited = (aggregationCounts.exited || 0) + 1;\n        return aggregationCounts.exited;\n      default:\n        aggregationCounts.crashed = (aggregationCounts.crashed || 0) + 1;\n        return aggregationCounts.crashed;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}