{"ast":null,"code":"import _slicedToArray from\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _toConsumableArray from\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import TokenLogoLookupTable from'constants/TokenLogoLookupTable';import{chainIdToNetworkName,getNativeLogoURI}from'lib/hooks/useCurrencyLogoURIs';import uriToHttp from'lib/utils/uriToHttp';import{useCallback,useEffect,useState}from'react';import{isAddress}from'utils';var BAD_SRCS={};// Converts uri's into fetchable urls\nfunction parseLogoSources(uris){var urls=[];uris.forEach(function(uri){return urls.push.apply(urls,_toConsumableArray(uriToHttp(uri)));});return urls;}// Parses uri's, favors non-coingecko images, and improves coingecko logo quality\nfunction prioritizeLogoSources(uris){var parsedUris=uris.map(function(uri){return uriToHttp(uri);}).flat(1);var preferredUris=[];// Consolidate duplicate coingecko urls into one fallback source\nvar coingeckoUrl=undefined;parsedUris.forEach(function(uri){if(uri.startsWith('https://assets.coingecko')){if(!coingeckoUrl){coingeckoUrl=uri.replace(/small|thumb/g,'large');}}else{preferredUris.push(uri);}});// Places coingecko urls in the back of the source array\nreturn coingeckoUrl?[].concat(preferredUris,[coingeckoUrl]):preferredUris;}function getInitialUrl(address,chainId,isNative){if(chainId&&isNative)return getNativeLogoURI(chainId);var networkName=chainId?chainIdToNetworkName(chainId):'ethereum';var checksummedAddress=isAddress(address);if(checksummedAddress){return\"https://raw.githubusercontent.com/Uniswap/assets/master/blockchains/\".concat(networkName,\"/assets/\").concat(checksummedAddress,\"/logo.png\");}else{return undefined;}}export default function useAssetLogoSource(address,chainId,isNative,backupImg){var _useState=useState(getInitialUrl(address,chainId,isNative)),_useState2=_slicedToArray(_useState,2),current=_useState2[0],setCurrent=_useState2[1];var _useState3=useState(undefined),_useState4=_slicedToArray(_useState3,2),fallbackSrcs=_useState4[0],setFallbackSrcs=_useState4[1];useEffect(function(){setCurrent(getInitialUrl(address,chainId,isNative));setFallbackSrcs(undefined);},[address,chainId,isNative]);var nextSrc=useCallback(function(){if(current){BAD_SRCS[current]=true;}// Parses and stores logo sources from tokenlists if assets repo url fails\nif(!fallbackSrcs){var _TokenLogoLookupTable;var uris=(_TokenLogoLookupTable=TokenLogoLookupTable.getIcons(address))!==null&&_TokenLogoLookupTable!==void 0?_TokenLogoLookupTable:[];if(backupImg)uris.push(backupImg);var tokenListIcons=prioritizeLogoSources(parseLogoSources(uris));setCurrent(tokenListIcons.find(function(src){return!BAD_SRCS[src];}));setFallbackSrcs(tokenListIcons);}else{setCurrent(fallbackSrcs.find(function(src){return!BAD_SRCS[src];}));}},[current,fallbackSrcs,address,backupImg]);return[current,nextSrc];}","map":{"version":3,"names":["TokenLogoLookupTable","chainIdToNetworkName","getNativeLogoURI","uriToHttp","useCallback","useEffect","useState","isAddress","BAD_SRCS","parseLogoSources","uris","urls","forEach","uri","push","prioritizeLogoSources","parsedUris","map","flat","preferredUris","coingeckoUrl","undefined","startsWith","replace","getInitialUrl","address","chainId","isNative","networkName","checksummedAddress","useAssetLogoSource","backupImg","current","setCurrent","fallbackSrcs","setFallbackSrcs","nextSrc","getIcons","tokenListIcons","find","src"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/hooks/useAssetLogoSource.ts"],"sourcesContent":["import TokenLogoLookupTable from 'constants/TokenLogoLookupTable'\nimport { chainIdToNetworkName, getNativeLogoURI } from 'lib/hooks/useCurrencyLogoURIs'\nimport uriToHttp from 'lib/utils/uriToHttp'\nimport { useCallback, useEffect, useState } from 'react'\nimport { isAddress } from 'utils'\n\nconst BAD_SRCS: { [tokenAddress: string]: true } = {}\n\n// Converts uri's into fetchable urls\nfunction parseLogoSources(uris: string[]) {\n  const urls: string[] = []\n  uris.forEach((uri) => urls.push(...uriToHttp(uri)))\n  return urls\n}\n\n// Parses uri's, favors non-coingecko images, and improves coingecko logo quality\nfunction prioritizeLogoSources(uris: string[]) {\n  const parsedUris = uris.map((uri) => uriToHttp(uri)).flat(1)\n  const preferredUris: string[] = []\n\n  // Consolidate duplicate coingecko urls into one fallback source\n  let coingeckoUrl: string | undefined = undefined\n\n  parsedUris.forEach((uri) => {\n    if (uri.startsWith('https://assets.coingecko')) {\n      if (!coingeckoUrl) {\n        coingeckoUrl = uri.replace(/small|thumb/g, 'large')\n      }\n    } else {\n      preferredUris.push(uri)\n    }\n  })\n  // Places coingecko urls in the back of the source array\n  return coingeckoUrl ? [...preferredUris, coingeckoUrl] : preferredUris\n}\n\nfunction getInitialUrl(address?: string | null, chainId?: number | null, isNative?: boolean) {\n  if (chainId && isNative) return getNativeLogoURI(chainId)\n\n  const networkName = chainId ? chainIdToNetworkName(chainId) : 'ethereum'\n  const checksummedAddress = isAddress(address)\n  if (checksummedAddress) {\n    return `https://raw.githubusercontent.com/Uniswap/assets/master/blockchains/${networkName}/assets/${checksummedAddress}/logo.png`\n  } else {\n    return undefined\n  }\n}\n\nexport default function useAssetLogoSource(\n  address?: string | null,\n  chainId?: number | null,\n  isNative?: boolean,\n  backupImg?: string | null\n): [string | undefined, () => void] {\n  const [current, setCurrent] = useState<string | undefined>(getInitialUrl(address, chainId, isNative))\n  const [fallbackSrcs, setFallbackSrcs] = useState<string[] | undefined>(undefined)\n\n  useEffect(() => {\n    setCurrent(getInitialUrl(address, chainId, isNative))\n    setFallbackSrcs(undefined)\n  }, [address, chainId, isNative])\n\n  const nextSrc = useCallback(() => {\n    if (current) {\n      BAD_SRCS[current] = true\n    }\n    // Parses and stores logo sources from tokenlists if assets repo url fails\n    if (!fallbackSrcs) {\n      const uris = TokenLogoLookupTable.getIcons(address) ?? []\n      if (backupImg) uris.push(backupImg)\n      const tokenListIcons = prioritizeLogoSources(parseLogoSources(uris))\n\n      setCurrent(tokenListIcons.find((src) => !BAD_SRCS[src]))\n      setFallbackSrcs(tokenListIcons)\n    } else {\n      setCurrent(fallbackSrcs.find((src) => !BAD_SRCS[src]))\n    }\n  }, [current, fallbackSrcs, address, backupImg])\n\n  return [current, nextSrc]\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}