{"ast":null,"code":"import _regeneratorRuntime from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { partitionMixedRouteByProtocol } from '@uniswap/router-sdk';\nimport { Pair } from '@uniswap/v2-sdk';\nimport { Pool } from '@uniswap/v3-sdk';\nimport _ from 'lodash';\nimport { WRAPPED_NATIVE_CURRENCY } from '../../../..';\nimport { log } from '../../../../util';\nimport { CurrencyAmount } from '../../../../util/amounts';\nimport { getHighestLiquidityV3NativePool, getHighestLiquidityV3USDPool, getV2NativePool } from '../../../../util/gas-factory-helpers';\nimport { IOnChainGasModelFactory } from '../gas-model';\nimport { BASE_SWAP_COST as BASE_SWAP_COST_V2, COST_PER_EXTRA_HOP as COST_PER_EXTRA_HOP_V2 } from '../v2/v2-heuristic-gas-model';\nimport { BASE_SWAP_COST, COST_PER_HOP, COST_PER_INIT_TICK, COST_PER_UNINIT_TICK } from '../v3/gas-costs';\n/**\n * Computes a gas estimate for a mixed route swap using heuristics.\n * Considers number of hops in the route, number of ticks crossed\n * and the typical base cost for a swap.\n *\n * We get the number of ticks crossed in a swap from the MixedRouteQuoterV1\n * contract.\n *\n * We compute gas estimates off-chain because\n *  1/ Calling eth_estimateGas for a swaps requires the caller to have\n *     the full balance token being swapped, and approvals.\n *  2/ Tracking gas used using a wrapper contract is not accurate with Multicall\n *     due to EIP-2929. We would have to make a request for every swap we wanted to estimate.\n *  3/ For V2 we simulate all our swaps off-chain so have no way to track gas used.\n *\n * @export\n * @class MixedRouteHeuristicGasModelFactory\n */\nexport var MixedRouteHeuristicGasModelFactory = /*#__PURE__*/function (_IOnChainGasModelFact) {\n  _inherits(MixedRouteHeuristicGasModelFactory, _IOnChainGasModelFact);\n  var _super = _createSuper(MixedRouteHeuristicGasModelFactory);\n  function MixedRouteHeuristicGasModelFactory() {\n    _classCallCheck(this, MixedRouteHeuristicGasModelFactory);\n    return _super.call(this);\n  }\n  _createClass(MixedRouteHeuristicGasModelFactory, [{\n    key: \"buildGasModel\",\n    value: function () {\n      var _buildGasModel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n        var _this = this;\n        var chainId, gasPriceWei, V3poolProvider, token, V2poolProvider, usdPool, nativeCurrency, _estimateGasCost, nativeV3Pool, nativeV2Pool, usdToken, estimateGasCost;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                chainId = _ref.chainId, gasPriceWei = _ref.gasPriceWei, V3poolProvider = _ref.v3poolProvider, token = _ref.token, V2poolProvider = _ref.v2poolProvider;\n                _context.next = 3;\n                return getHighestLiquidityV3USDPool(chainId, V3poolProvider);\n              case 3:\n                usdPool = _context.sent;\n                // If our quote token is WETH, we don't need to convert our gas use to be in terms\n                // of the quote token in order to produce a gas adjusted amount.\n                // We do return a gas use in USD however, so we still convert to usd.\n                nativeCurrency = WRAPPED_NATIVE_CURRENCY[chainId];\n                if (!token.equals(nativeCurrency)) {\n                  _context.next = 8;\n                  break;\n                }\n                _estimateGasCost = function _estimateGasCost(routeWithValidQuote) {\n                  var _this$estimateGas = _this.estimateGas(routeWithValidQuote, gasPriceWei, chainId),\n                    totalGasCostNativeCurrency = _this$estimateGas.totalGasCostNativeCurrency,\n                    baseGasUse = _this$estimateGas.baseGasUse;\n                  var token0 = usdPool.token0.address == nativeCurrency.address;\n                  var nativeTokenPrice = token0 ? usdPool.token0Price : usdPool.token1Price;\n                  var gasCostInTermsOfUSD = nativeTokenPrice.quote(totalGasCostNativeCurrency);\n                  return {\n                    gasEstimate: baseGasUse,\n                    gasCostInToken: totalGasCostNativeCurrency,\n                    gasCostInUSD: gasCostInTermsOfUSD\n                  };\n                };\n                return _context.abrupt(\"return\", {\n                  estimateGasCost: _estimateGasCost\n                });\n              case 8:\n                _context.next = 10;\n                return getHighestLiquidityV3NativePool(token, V3poolProvider);\n              case 10:\n                nativeV3Pool = _context.sent;\n                if (!V2poolProvider) {\n                  _context.next = 15;\n                  break;\n                }\n                _context.next = 14;\n                return getV2NativePool(token, V2poolProvider);\n              case 14:\n                nativeV2Pool = _context.sent;\n              case 15:\n                usdToken = usdPool.token0.address == nativeCurrency.address ? usdPool.token1 : usdPool.token0;\n                estimateGasCost = function estimateGasCost(routeWithValidQuote) {\n                  var _this$estimateGas2 = _this.estimateGas(routeWithValidQuote, gasPriceWei, chainId),\n                    totalGasCostNativeCurrency = _this$estimateGas2.totalGasCostNativeCurrency,\n                    baseGasUse = _this$estimateGas2.baseGasUse;\n                  if (!nativeV3Pool && !nativeV2Pool) {\n                    log.info(\"Unable to find \".concat(nativeCurrency.symbol, \" pool with the quote token, \").concat(token.symbol, \" to produce gas adjusted costs. Route will not account for gas.\"));\n                    return {\n                      gasEstimate: baseGasUse,\n                      gasCostInToken: CurrencyAmount.fromRawAmount(token, 0),\n                      gasCostInUSD: CurrencyAmount.fromRawAmount(usdToken, 0)\n                    };\n                  }\n                  /// we will use nativeV2Pool for fallback if nativeV3 does not exist\n                  /// can use ! here because we return above if v3Pool and v2Pool are null\n                  var nativePool = !nativeV3Pool && nativeV2Pool ? nativeV2Pool : nativeV3Pool;\n                  var token0 = nativePool.token0.address == nativeCurrency.address;\n                  // returns mid price in terms of the native currency (the ratio of quoteToken/nativeToken)\n                  var nativeTokenPrice = token0 ? nativePool.token0Price : nativePool.token1Price;\n                  var gasCostInTermsOfQuoteToken;\n                  try {\n                    // native token is base currency\n                    gasCostInTermsOfQuoteToken = nativeTokenPrice.quote(totalGasCostNativeCurrency);\n                  } catch (err) {\n                    log.info({\n                      nativeTokenPriceBase: nativeTokenPrice.baseCurrency,\n                      nativeTokenPriceQuote: nativeTokenPrice.quoteCurrency,\n                      gasCostInEth: totalGasCostNativeCurrency.currency\n                    }, 'Debug eth price token issue');\n                    throw err;\n                  }\n                  // true if token0 is the native currency\n                  var token0USDPool = usdPool.token0.address == nativeCurrency.address;\n                  // gets the mid price of the pool in terms of the native token\n                  var nativeTokenPriceUSDPool = token0USDPool ? usdPool.token0Price : usdPool.token1Price;\n                  var gasCostInTermsOfUSD;\n                  try {\n                    gasCostInTermsOfUSD = nativeTokenPriceUSDPool.quote(totalGasCostNativeCurrency);\n                  } catch (err) {\n                    log.info({\n                      usdT1: usdPool.token0.symbol,\n                      usdT2: usdPool.token1.symbol,\n                      gasCostInNativeToken: totalGasCostNativeCurrency.currency.symbol\n                    }, 'Failed to compute USD gas price');\n                    throw err;\n                  }\n                  return {\n                    gasEstimate: baseGasUse,\n                    gasCostInToken: gasCostInTermsOfQuoteToken,\n                    gasCostInUSD: gasCostInTermsOfUSD\n                  };\n                };\n                return _context.abrupt(\"return\", {\n                  estimateGasCost: estimateGasCost.bind(this)\n                });\n              case 18:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function buildGasModel(_x) {\n        return _buildGasModel.apply(this, arguments);\n      }\n      return buildGasModel;\n    }()\n  }, {\n    key: \"estimateGas\",\n    value: function estimateGas(routeWithValidQuote, gasPriceWei, chainId) {\n      var totalInitializedTicksCrossed = BigNumber.from(Math.max(1, _.sum(routeWithValidQuote.initializedTicksCrossedList)));\n      /**\n       * Since we must make a separate call to multicall for each v3 and v2 section, we will have to\n       * add the BASE_SWAP_COST to each section.\n       */\n      var baseGasUse = BigNumber.from(0);\n      var route = routeWithValidQuote.route;\n      var res = partitionMixedRouteByProtocol(route);\n      res.map(function (section) {\n        if (section.every(function (pool) {\n          return pool instanceof Pool;\n        })) {\n          baseGasUse = baseGasUse.add(BASE_SWAP_COST(chainId));\n          baseGasUse = baseGasUse.add(COST_PER_HOP(chainId).mul(section.length));\n        } else if (section.every(function (pool) {\n          return pool instanceof Pair;\n        })) {\n          baseGasUse = baseGasUse.add(BASE_SWAP_COST_V2);\n          baseGasUse = baseGasUse.add(\n          /// same behavior in v2 heuristic gas model factory\n          COST_PER_EXTRA_HOP_V2.mul(section.length - 1));\n        }\n      });\n      var tickGasUse = COST_PER_INIT_TICK(chainId).mul(totalInitializedTicksCrossed);\n      var uninitializedTickGasUse = COST_PER_UNINIT_TICK.mul(0);\n      // base estimate gas used based on chainId estimates for hops and ticks gas useage\n      baseGasUse = baseGasUse.add(tickGasUse).add(uninitializedTickGasUse);\n      var baseGasCostWei = gasPriceWei.mul(baseGasUse);\n      var wrappedCurrency = WRAPPED_NATIVE_CURRENCY[chainId];\n      var totalGasCostNativeCurrency = CurrencyAmount.fromRawAmount(wrappedCurrency, baseGasCostWei.toString());\n      return {\n        totalGasCostNativeCurrency: totalGasCostNativeCurrency,\n        totalInitializedTicksCrossed: totalInitializedTicksCrossed,\n        baseGasUse: baseGasUse\n      };\n    }\n  }]);\n  return MixedRouteHeuristicGasModelFactory;\n}(IOnChainGasModelFactory);","map":{"version":3,"sources":["../../../../../../src/routers/alpha-router/gas-models/mixedRoute/mixed-route-heuristic-gas-model.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { BigNumber } from '@ethersproject/bignumber';\nimport { partitionMixedRouteByProtocol } from '@uniswap/router-sdk';\nimport { Pair } from '@uniswap/v2-sdk';\nimport { Pool } from '@uniswap/v3-sdk';\nimport _ from 'lodash';\nimport { WRAPPED_NATIVE_CURRENCY } from '../../../..';\nimport { log } from '../../../../util';\nimport { CurrencyAmount } from '../../../../util/amounts';\nimport { getHighestLiquidityV3NativePool, getHighestLiquidityV3USDPool, getV2NativePool, } from '../../../../util/gas-factory-helpers';\nimport { IOnChainGasModelFactory, } from '../gas-model';\nimport { BASE_SWAP_COST as BASE_SWAP_COST_V2, COST_PER_EXTRA_HOP as COST_PER_EXTRA_HOP_V2, } from '../v2/v2-heuristic-gas-model';\nimport { BASE_SWAP_COST, COST_PER_HOP, COST_PER_INIT_TICK, COST_PER_UNINIT_TICK, } from '../v3/gas-costs';\n/**\n * Computes a gas estimate for a mixed route swap using heuristics.\n * Considers number of hops in the route, number of ticks crossed\n * and the typical base cost for a swap.\n *\n * We get the number of ticks crossed in a swap from the MixedRouteQuoterV1\n * contract.\n *\n * We compute gas estimates off-chain because\n *  1/ Calling eth_estimateGas for a swaps requires the caller to have\n *     the full balance token being swapped, and approvals.\n *  2/ Tracking gas used using a wrapper contract is not accurate with Multicall\n *     due to EIP-2929. We would have to make a request for every swap we wanted to estimate.\n *  3/ For V2 we simulate all our swaps off-chain so have no way to track gas used.\n *\n * @export\n * @class MixedRouteHeuristicGasModelFactory\n */\nexport class MixedRouteHeuristicGasModelFactory extends IOnChainGasModelFactory {\n    constructor() {\n        super();\n    }\n    async buildGasModel({ chainId, gasPriceWei, v3poolProvider: V3poolProvider, token, v2poolProvider: V2poolProvider, }) {\n        const usdPool = await getHighestLiquidityV3USDPool(chainId, V3poolProvider);\n        // If our quote token is WETH, we don't need to convert our gas use to be in terms\n        // of the quote token in order to produce a gas adjusted amount.\n        // We do return a gas use in USD however, so we still convert to usd.\n        const nativeCurrency = WRAPPED_NATIVE_CURRENCY[chainId];\n        if (token.equals(nativeCurrency)) {\n            const estimateGasCost = (routeWithValidQuote) => {\n                const { totalGasCostNativeCurrency, baseGasUse } = this.estimateGas(routeWithValidQuote, gasPriceWei, chainId);\n                const token0 = usdPool.token0.address == nativeCurrency.address;\n                const nativeTokenPrice = token0\n                    ? usdPool.token0Price\n                    : usdPool.token1Price;\n                const gasCostInTermsOfUSD = nativeTokenPrice.quote(totalGasCostNativeCurrency);\n                return {\n                    gasEstimate: baseGasUse,\n                    gasCostInToken: totalGasCostNativeCurrency,\n                    gasCostInUSD: gasCostInTermsOfUSD,\n                };\n            };\n            return {\n                estimateGasCost,\n            };\n        }\n        // If the quote token is not in the native currency, we convert the gas cost to be in terms of the quote token.\n        // We do this by getting the highest liquidity <quoteToken>/<nativeCurrency> pool. eg. <quoteToken>/ETH pool.\n        const nativeV3Pool = await getHighestLiquidityV3NativePool(token, V3poolProvider);\n        let nativeV2Pool;\n        if (V2poolProvider) {\n            /// MixedRoutes\n            nativeV2Pool = await getV2NativePool(token, V2poolProvider);\n        }\n        const usdToken = usdPool.token0.address == nativeCurrency.address\n            ? usdPool.token1\n            : usdPool.token0;\n        const estimateGasCost = (routeWithValidQuote) => {\n            const { totalGasCostNativeCurrency, baseGasUse } = this.estimateGas(routeWithValidQuote, gasPriceWei, chainId);\n            if (!nativeV3Pool && !nativeV2Pool) {\n                log.info(`Unable to find ${nativeCurrency.symbol} pool with the quote token, ${token.symbol} to produce gas adjusted costs. Route will not account for gas.`);\n                return {\n                    gasEstimate: baseGasUse,\n                    gasCostInToken: CurrencyAmount.fromRawAmount(token, 0),\n                    gasCostInUSD: CurrencyAmount.fromRawAmount(usdToken, 0),\n                };\n            }\n            /// we will use nativeV2Pool for fallback if nativeV3 does not exist\n            /// can use ! here because we return above if v3Pool and v2Pool are null\n            const nativePool = !nativeV3Pool && nativeV2Pool ? nativeV2Pool : nativeV3Pool;\n            const token0 = nativePool.token0.address == nativeCurrency.address;\n            // returns mid price in terms of the native currency (the ratio of quoteToken/nativeToken)\n            const nativeTokenPrice = token0\n                ? nativePool.token0Price\n                : nativePool.token1Price;\n            let gasCostInTermsOfQuoteToken;\n            try {\n                // native token is base currency\n                gasCostInTermsOfQuoteToken = nativeTokenPrice.quote(totalGasCostNativeCurrency);\n            }\n            catch (err) {\n                log.info({\n                    nativeTokenPriceBase: nativeTokenPrice.baseCurrency,\n                    nativeTokenPriceQuote: nativeTokenPrice.quoteCurrency,\n                    gasCostInEth: totalGasCostNativeCurrency.currency,\n                }, 'Debug eth price token issue');\n                throw err;\n            }\n            // true if token0 is the native currency\n            const token0USDPool = usdPool.token0.address == nativeCurrency.address;\n            // gets the mid price of the pool in terms of the native token\n            const nativeTokenPriceUSDPool = token0USDPool\n                ? usdPool.token0Price\n                : usdPool.token1Price;\n            let gasCostInTermsOfUSD;\n            try {\n                gasCostInTermsOfUSD = nativeTokenPriceUSDPool.quote(totalGasCostNativeCurrency);\n            }\n            catch (err) {\n                log.info({\n                    usdT1: usdPool.token0.symbol,\n                    usdT2: usdPool.token1.symbol,\n                    gasCostInNativeToken: totalGasCostNativeCurrency.currency.symbol,\n                }, 'Failed to compute USD gas price');\n                throw err;\n            }\n            return {\n                gasEstimate: baseGasUse,\n                gasCostInToken: gasCostInTermsOfQuoteToken,\n                gasCostInUSD: gasCostInTermsOfUSD,\n            };\n        };\n        return {\n            estimateGasCost: estimateGasCost.bind(this),\n        };\n    }\n    estimateGas(routeWithValidQuote, gasPriceWei, chainId) {\n        const totalInitializedTicksCrossed = BigNumber.from(Math.max(1, _.sum(routeWithValidQuote.initializedTicksCrossedList)));\n        /**\n         * Since we must make a separate call to multicall for each v3 and v2 section, we will have to\n         * add the BASE_SWAP_COST to each section.\n         */\n        let baseGasUse = BigNumber.from(0);\n        const route = routeWithValidQuote.route;\n        const res = partitionMixedRouteByProtocol(route);\n        res.map((section) => {\n            if (section.every((pool) => pool instanceof Pool)) {\n                baseGasUse = baseGasUse.add(BASE_SWAP_COST(chainId));\n                baseGasUse = baseGasUse.add(COST_PER_HOP(chainId).mul(section.length));\n            }\n            else if (section.every((pool) => pool instanceof Pair)) {\n                baseGasUse = baseGasUse.add(BASE_SWAP_COST_V2);\n                baseGasUse = baseGasUse.add(\n                /// same behavior in v2 heuristic gas model factory\n                COST_PER_EXTRA_HOP_V2.mul(section.length - 1));\n            }\n        });\n        const tickGasUse = COST_PER_INIT_TICK(chainId).mul(totalInitializedTicksCrossed);\n        const uninitializedTickGasUse = COST_PER_UNINIT_TICK.mul(0);\n        // base estimate gas used based on chainId estimates for hops and ticks gas useage\n        baseGasUse = baseGasUse.add(tickGasUse).add(uninitializedTickGasUse);\n        const baseGasCostWei = gasPriceWei.mul(baseGasUse);\n        const wrappedCurrency = WRAPPED_NATIVE_CURRENCY[chainId];\n        const totalGasCostNativeCurrency = CurrencyAmount.fromRawAmount(wrappedCurrency, baseGasCostWei.toString());\n        return {\n            totalGasCostNativeCurrency,\n            totalInitializedTicksCrossed,\n            baseGasUse,\n        };\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWl4ZWQtcm91dGUtaGV1cmlzdGljLWdhcy1tb2RlbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9yb3V0ZXJzL2FscGhhLXJvdXRlci9nYXMtbW9kZWxzL21peGVkUm91dGUvbWl4ZWQtcm91dGUtaGV1cmlzdGljLWdhcy1tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDckQsT0FBTyxFQUFFLDZCQUE2QixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDcEUsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN2QyxPQUFPLENBQUMsTUFBTSxRQUFRLENBQUM7QUFFdkIsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3RELE9BQU8sRUFBVyxHQUFHLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNoRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDMUQsT0FBTyxFQUNMLCtCQUErQixFQUMvQiw0QkFBNEIsRUFDNUIsZUFBZSxHQUNoQixNQUFNLHNDQUFzQyxDQUFDO0FBRTlDLE9BQU8sRUFHTCx1QkFBdUIsR0FDeEIsTUFBTSxjQUFjLENBQUM7QUFDdEIsT0FBTyxFQUNMLGNBQWMsSUFBSSxpQkFBaUIsRUFDbkMsa0JBQWtCLElBQUkscUJBQXFCLEdBQzVDLE1BQU0sOEJBQThCLENBQUM7QUFDdEMsT0FBTyxFQUNMLGNBQWMsRUFDZCxZQUFZLEVBQ1osa0JBQWtCLEVBQ2xCLG9CQUFvQixHQUNyQixNQUFNLGlCQUFpQixDQUFDO0FBRXpCOzs7Ozs7Ozs7Ozs7Ozs7OztHQWlCRztBQUNILE1BQU0sT0FBTyxrQ0FBbUMsU0FBUSx1QkFBdUI7SUFDN0U7UUFDRSxLQUFLLEVBQUUs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"]},"metadata":{},"sourceType":"module"}