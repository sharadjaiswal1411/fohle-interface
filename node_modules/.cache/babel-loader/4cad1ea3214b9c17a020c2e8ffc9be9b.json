{"ast":null,"code":"/**\n * Given a URI that may be ipfs, ipns, http, https, ar, or data protocol, return the fetch-able http(s) URLs for the same content\n * @param uri to convert to fetch-able http url\n */\nexport default function uriToHttp(uri) {\n  const protocol = uri.split(':')[0].toLowerCase();\n  switch (protocol) {\n    case 'data':\n      return [uri];\n    case 'https':\n      return [uri];\n    case 'http':\n      return ['https' + uri.substr(4), uri];\n    case 'ipfs':\n      {\n        var _uri$match;\n        const hash = (_uri$match = uri.match(/^ipfs:(\\/\\/)?(.*)$/i)) === null || _uri$match === void 0 ? void 0 : _uri$match[2];\n        return [`https://cloudflare-ipfs.com/ipfs/${hash}/`, `https://ipfs.io/ipfs/${hash}/`];\n      }\n    case 'ipns':\n      {\n        var _uri$match2;\n        const name = (_uri$match2 = uri.match(/^ipns:(\\/\\/)?(.*)$/i)) === null || _uri$match2 === void 0 ? void 0 : _uri$match2[2];\n        return [`https://cloudflare-ipfs.com/ipns/${name}/`, `https://ipfs.io/ipns/${name}/`];\n      }\n    case 'ar':\n      {\n        var _uri$match3;\n        const tx = (_uri$match3 = uri.match(/^ar:(\\/\\/)?(.*)$/i)) === null || _uri$match3 === void 0 ? void 0 : _uri$match3[2];\n        return [`https://arweave.net/${tx}`];\n      }\n    default:\n      return [];\n  }\n}","map":{"version":3,"names":["uriToHttp","uri","protocol","split","toLowerCase","substr","hash","match","name","tx"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/lib/utils/uriToHttp.ts"],"sourcesContent":["/**\n * Given a URI that may be ipfs, ipns, http, https, ar, or data protocol, return the fetch-able http(s) URLs for the same content\n * @param uri to convert to fetch-able http url\n */\nexport default function uriToHttp(uri: string): string[] {\n  const protocol = uri.split(':')[0].toLowerCase()\n  switch (protocol) {\n    case 'data':\n      return [uri]\n    case 'https':\n      return [uri]\n    case 'http':\n      return ['https' + uri.substr(4), uri]\n    case 'ipfs': {\n      const hash = uri.match(/^ipfs:(\\/\\/)?(.*)$/i)?.[2]\n      return [`https://cloudflare-ipfs.com/ipfs/${hash}/`, `https://ipfs.io/ipfs/${hash}/`]\n    }\n    case 'ipns': {\n      const name = uri.match(/^ipns:(\\/\\/)?(.*)$/i)?.[2]\n      return [`https://cloudflare-ipfs.com/ipns/${name}/`, `https://ipfs.io/ipns/${name}/`]\n    }\n    case 'ar': {\n      const tx = uri.match(/^ar:(\\/\\/)?(.*)$/i)?.[2]\n      return [`https://arweave.net/${tx}`]\n    }\n    default:\n      return []\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,eAAe,SAASA,SAAS,CAACC,GAAW,EAAY;EACvD,MAAMC,QAAQ,GAAGD,GAAG,CAACE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACC,WAAW,EAAE;EAChD,QAAQF,QAAQ;IACd,KAAK,MAAM;MACT,OAAO,CAACD,GAAG,CAAC;IACd,KAAK,OAAO;MACV,OAAO,CAACA,GAAG,CAAC;IACd,KAAK,MAAM;MACT,OAAO,CAAC,OAAO,GAAGA,GAAG,CAACI,MAAM,CAAC,CAAC,CAAC,EAAEJ,GAAG,CAAC;IACvC,KAAK,MAAM;MAAE;QAAA;QACX,MAAMK,IAAI,iBAAGL,GAAG,CAACM,KAAK,CAAC,qBAAqB,CAAC,+CAAhC,WAAmC,CAAC,CAAC;QAClD,OAAO,CAAE,oCAAmCD,IAAK,GAAE,EAAG,wBAAuBA,IAAK,GAAE,CAAC;MACvF;IACA,KAAK,MAAM;MAAE;QAAA;QACX,MAAME,IAAI,kBAAGP,GAAG,CAACM,KAAK,CAAC,qBAAqB,CAAC,gDAAhC,YAAmC,CAAC,CAAC;QAClD,OAAO,CAAE,oCAAmCC,IAAK,GAAE,EAAG,wBAAuBA,IAAK,GAAE,CAAC;MACvF;IACA,KAAK,IAAI;MAAE;QAAA;QACT,MAAMC,EAAE,kBAAGR,GAAG,CAACM,KAAK,CAAC,mBAAmB,CAAC,gDAA9B,YAAiC,CAAC,CAAC;QAC9C,OAAO,CAAE,uBAAsBE,EAAG,EAAC,CAAC;MACtC;IACA;MACE,OAAO,EAAE;EAAA;AAEf"},"metadata":{},"sourceType":"module"}