{"ast":null,"code":"import { isAddress } from '../../utils';\n/**\n * Token instances created from token info on a token list.\n */\nexport class WrappedTokenInfo {\n  constructor(tokenInfo, list) {\n    this.isNative = false;\n    this.isToken = true;\n    this.list = void 0;\n    this.tokenInfo = void 0;\n    this._checksummedAddress = void 0;\n    this._tags = null;\n    this.tokenInfo = tokenInfo;\n    this.list = list;\n    const checksummedAddress = isAddress(this.tokenInfo.address);\n    if (!checksummedAddress) {\n      throw new Error(`Invalid token address: ${this.tokenInfo.address}`);\n    }\n    this._checksummedAddress = checksummedAddress;\n  }\n  get address() {\n    return this._checksummedAddress;\n  }\n  get chainId() {\n    return this.tokenInfo.chainId;\n  }\n  get decimals() {\n    return this.tokenInfo.decimals;\n  }\n  get name() {\n    return this.tokenInfo.name;\n  }\n  get symbol() {\n    return this.tokenInfo.symbol;\n  }\n  get logoURI() {\n    return this.tokenInfo.logoURI;\n  }\n  get tags() {\n    var _this$list;\n    if (this._tags !== null) return this._tags;\n    if (!this.tokenInfo.tags) return this._tags = [];\n    const listTags = (_this$list = this.list) === null || _this$list === void 0 ? void 0 : _this$list.tags;\n    if (!listTags) return this._tags = [];\n    return this._tags = this.tokenInfo.tags.map(tagId => {\n      return {\n        ...listTags[tagId],\n        id: tagId\n      };\n    });\n  }\n  equals(other) {\n    return other.chainId === this.chainId && other.isToken && other.address.toLowerCase() === this.address.toLowerCase();\n  }\n  sortsBefore(other) {\n    if (this.equals(other)) throw new Error('Addresses should not be equal');\n    return this.address.toLowerCase() < other.address.toLowerCase();\n  }\n  get wrapped() {\n    return this;\n  }\n}","map":{"version":3,"names":["isAddress","WrappedTokenInfo","constructor","tokenInfo","list","isNative","isToken","_checksummedAddress","_tags","checksummedAddress","address","Error","chainId","decimals","name","symbol","logoURI","tags","listTags","map","tagId","id","equals","other","toLowerCase","sortsBefore","wrapped"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/state/lists/wrappedTokenInfo.ts"],"sourcesContent":["import { Currency, Token } from '@uniswap/sdk-core'\nimport { Tags, TokenInfo, TokenList } from '@uniswap/token-lists'\n\nimport { isAddress } from '../../utils'\n\ntype TagDetails = Tags[keyof Tags]\ninterface TagInfo extends TagDetails {\n  id: string\n}\n/**\n * Token instances created from token info on a token list.\n */\nexport class WrappedTokenInfo implements Token {\n  public readonly isNative = false as const\n  public readonly isToken = true as const\n  public readonly list?: TokenList\n  public readonly tokenInfo: TokenInfo\n\n  private _checksummedAddress: string\n\n  constructor(tokenInfo: TokenInfo, list?: TokenList) {\n    this.tokenInfo = tokenInfo\n    this.list = list\n    const checksummedAddress = isAddress(this.tokenInfo.address)\n    if (!checksummedAddress) {\n      throw new Error(`Invalid token address: ${this.tokenInfo.address}`)\n    }\n    this._checksummedAddress = checksummedAddress\n  }\n\n  public get address(): string {\n    return this._checksummedAddress\n  }\n\n  public get chainId(): number {\n    return this.tokenInfo.chainId\n  }\n\n  public get decimals(): number {\n    return this.tokenInfo.decimals\n  }\n\n  public get name(): string {\n    return this.tokenInfo.name\n  }\n\n  public get symbol(): string {\n    return this.tokenInfo.symbol\n  }\n\n  public get logoURI(): string | undefined {\n    return this.tokenInfo.logoURI\n  }\n\n  private _tags: TagInfo[] | null = null\n  public get tags(): TagInfo[] {\n    if (this._tags !== null) return this._tags\n    if (!this.tokenInfo.tags) return (this._tags = [])\n    const listTags = this.list?.tags\n    if (!listTags) return (this._tags = [])\n\n    return (this._tags = this.tokenInfo.tags.map((tagId) => {\n      return {\n        ...listTags[tagId],\n        id: tagId,\n      }\n    }))\n  }\n\n  equals(other: Currency): boolean {\n    return other.chainId === this.chainId && other.isToken && other.address.toLowerCase() === this.address.toLowerCase()\n  }\n\n  sortsBefore(other: Token): boolean {\n    if (this.equals(other)) throw new Error('Addresses should not be equal')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  public get wrapped(): Token {\n    return this\n  }\n}\n"],"mappings":"AAGA,SAASA,SAAS,QAAQ,aAAa;AAMvC;AACA;AACA;AACA,OAAO,MAAMC,gBAAgB,CAAkB;EAQ7CC,WAAW,CAACC,SAAoB,EAAEC,IAAgB,EAAE;IAAA,KAPpCC,QAAQ,GAAG,KAAK;IAAA,KAChBC,OAAO,GAAG,IAAI;IAAA,KACdF,IAAI;IAAA,KACJD,SAAS;IAAA,KAEjBI,mBAAmB;IAAA,KAoCnBC,KAAK,GAAqB,IAAI;IAjCpC,IAAI,CAACL,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACC,IAAI,GAAGA,IAAI;IAChB,MAAMK,kBAAkB,GAAGT,SAAS,CAAC,IAAI,CAACG,SAAS,CAACO,OAAO,CAAC;IAC5D,IAAI,CAACD,kBAAkB,EAAE;MACvB,MAAM,IAAIE,KAAK,CAAE,0BAAyB,IAAI,CAACR,SAAS,CAACO,OAAQ,EAAC,CAAC;IACrE;IACA,IAAI,CAACH,mBAAmB,GAAGE,kBAAkB;EAC/C;EAEA,IAAWC,OAAO,GAAW;IAC3B,OAAO,IAAI,CAACH,mBAAmB;EACjC;EAEA,IAAWK,OAAO,GAAW;IAC3B,OAAO,IAAI,CAACT,SAAS,CAACS,OAAO;EAC/B;EAEA,IAAWC,QAAQ,GAAW;IAC5B,OAAO,IAAI,CAACV,SAAS,CAACU,QAAQ;EAChC;EAEA,IAAWC,IAAI,GAAW;IACxB,OAAO,IAAI,CAACX,SAAS,CAACW,IAAI;EAC5B;EAEA,IAAWC,MAAM,GAAW;IAC1B,OAAO,IAAI,CAACZ,SAAS,CAACY,MAAM;EAC9B;EAEA,IAAWC,OAAO,GAAuB;IACvC,OAAO,IAAI,CAACb,SAAS,CAACa,OAAO;EAC/B;EAGA,IAAWC,IAAI,GAAc;IAAA;IAC3B,IAAI,IAAI,CAACT,KAAK,KAAK,IAAI,EAAE,OAAO,IAAI,CAACA,KAAK;IAC1C,IAAI,CAAC,IAAI,CAACL,SAAS,CAACc,IAAI,EAAE,OAAQ,IAAI,CAACT,KAAK,GAAG,EAAE;IACjD,MAAMU,QAAQ,iBAAG,IAAI,CAACd,IAAI,+CAAT,WAAWa,IAAI;IAChC,IAAI,CAACC,QAAQ,EAAE,OAAQ,IAAI,CAACV,KAAK,GAAG,EAAE;IAEtC,OAAQ,IAAI,CAACA,KAAK,GAAG,IAAI,CAACL,SAAS,CAACc,IAAI,CAACE,GAAG,CAAEC,KAAK,IAAK;MACtD,OAAO;QACL,GAAGF,QAAQ,CAACE,KAAK,CAAC;QAClBC,EAAE,EAAED;MACN,CAAC;IACH,CAAC,CAAC;EACJ;EAEAE,MAAM,CAACC,KAAe,EAAW;IAC/B,OAAOA,KAAK,CAACX,OAAO,KAAK,IAAI,CAACA,OAAO,IAAIW,KAAK,CAACjB,OAAO,IAAIiB,KAAK,CAACb,OAAO,CAACc,WAAW,EAAE,KAAK,IAAI,CAACd,OAAO,CAACc,WAAW,EAAE;EACtH;EAEAC,WAAW,CAACF,KAAY,EAAW;IACjC,IAAI,IAAI,CAACD,MAAM,CAACC,KAAK,CAAC,EAAE,MAAM,IAAIZ,KAAK,CAAC,+BAA+B,CAAC;IACxE,OAAO,IAAI,CAACD,OAAO,CAACc,WAAW,EAAE,GAAGD,KAAK,CAACb,OAAO,CAACc,WAAW,EAAE;EACjE;EAEA,IAAWE,OAAO,GAAU;IAC1B,OAAO,IAAI;EACb;AACF"},"metadata":{},"sourceType":"module"}