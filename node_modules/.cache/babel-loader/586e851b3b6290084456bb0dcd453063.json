{"ast":null,"code":"import _slicedToArray from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _assertThisInitialized from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { getCurrentHub } from '@sentry/browser';\nimport { timestampWithMs } from '@sentry/utils';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport * as React from 'react';\nimport { REACT_MOUNT_OP, REACT_UPDATE_OP, REACT_RENDER_OP } from './constants.js';\nvar _jsxFileName = \"/home/runner/work/sentry-javascript/sentry-javascript/packages/react/src/profiler.tsx\"; /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n\nvar UNKNOWN_COMPONENT = 'unknown';\n\n/**\n * The Profiler component leverages Sentry's Tracing integration to generate\n * spans based on component lifecycles.\n */\nvar Profiler = /*#__PURE__*/function (_React$Component) {\n  _inherits(Profiler, _React$Component);\n  var _super = _createSuper(Profiler);\n  function Profiler(props) {\n    var _this;\n    _classCallCheck(this, Profiler);\n    _this = _super.call(this, props);\n    Profiler.prototype.__init.call(_assertThisInitialized(_this));\n    Profiler.prototype.__init2.call(_assertThisInitialized(_this));\n    ;\n    var _this$props = _this.props,\n      name = _this$props.name,\n      _this$props$disabled = _this$props.disabled,\n      disabled = _this$props$disabled === void 0 ? false : _this$props$disabled;\n    if (disabled) {\n      return _possibleConstructorReturn(_this);\n    }\n    var activeTransaction = getActiveTransaction();\n    if (activeTransaction) {\n      _this._mountSpan = activeTransaction.startChild({\n        description: \"<\".concat(name, \">\"),\n        op: REACT_MOUNT_OP\n      });\n    }\n    return _this;\n  }\n\n  // If a component mounted, we can finish the mount activity.\n  _createClass(Profiler, [{\n    key: \"__init\",\n    value:\n    /**\n     * The span of the mount activity\n     * Made protected for the React Native SDK to access\n     */\n    function __init() {\n      this._mountSpan = undefined;\n    }\n    /**\n     * The span that represents the duration of time between shouldComponentUpdate and componentDidUpdate\n     */\n  }, {\n    key: \"__init2\",\n    value: function __init2() {\n      this._updateSpan = undefined;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/member-ordering\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this._mountSpan) {\n        this._mountSpan.finish();\n      }\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(_ref) {\n      var _this2 = this;\n      var updateProps = _ref.updateProps,\n        _ref$includeUpdates = _ref.includeUpdates,\n        includeUpdates = _ref$includeUpdates === void 0 ? true : _ref$includeUpdates;\n      // Only generate an update span if includeUpdates is true, if there is a valid mountSpan,\n      // and if the updateProps have changed. It is ok to not do a deep equality check here as it is expensive.\n      // We are just trying to give baseline clues for further investigation.\n      if (includeUpdates && this._mountSpan && updateProps !== this.props.updateProps) {\n        // See what props haved changed between the previous props, and the current props. This is\n        // set as data on the span. We just store the prop keys as the values could be potenially very large.\n        var changedProps = Object.keys(updateProps).filter(function (k) {\n          return updateProps[k] !== _this2.props.updateProps[k];\n        });\n        if (changedProps.length > 0) {\n          var now = timestampWithMs();\n          this._updateSpan = this._mountSpan.startChild({\n            data: {\n              changedProps: changedProps\n            },\n            description: \"<\".concat(this.props.name, \">\"),\n            op: REACT_UPDATE_OP,\n            startTimestamp: now\n          });\n        }\n      }\n      return true;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      if (this._updateSpan) {\n        this._updateSpan.finish();\n        this._updateSpan = undefined;\n      }\n    }\n\n    // If a component is unmounted, we can say it is no longer on the screen.\n    // This means we can finish the span representing the component render.\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var _this$props2 = this.props,\n        name = _this$props2.name,\n        _this$props2$includeR = _this$props2.includeRender,\n        includeRender = _this$props2$includeR === void 0 ? true : _this$props2$includeR;\n      if (this._mountSpan && includeRender) {\n        // If we were able to obtain the spanId of the mount activity, we should set the\n        // next activity as a child to the component mount activity.\n        this._mountSpan.startChild({\n          description: \"<\".concat(name, \">\"),\n          endTimestamp: timestampWithMs(),\n          op: REACT_RENDER_OP,\n          startTimestamp: this._mountSpan.endTimestamp\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return this.props.children;\n    }\n  }], [{\n    key: \"__initStatic\",\n    value: function __initStatic() {\n      this.defaultProps = {\n        disabled: false,\n        includeRender: true,\n        includeUpdates: true\n      };\n    }\n  }]);\n  return Profiler;\n}(React.Component);\nProfiler.__initStatic();\n\n/**\n * withProfiler is a higher order component that wraps a\n * component in a {@link Profiler} component. It is recommended that\n * the higher order component be used over the regular {@link Profiler} component.\n *\n * @param WrappedComponent component that is wrapped by Profiler\n * @param options the {@link ProfilerProps} you can pass into the Profiler\n */\nfunction withProfiler(WrappedComponent,\n// We do not want to have `updateProps` given in options, it is instead filled through the HOC.\noptions) {\n  var _this3 = this;\n  var componentDisplayName = options && options.name || WrappedComponent.displayName || WrappedComponent.name || UNKNOWN_COMPONENT;\n  var Wrapped = function Wrapped(props) {\n    return React.createElement(Profiler, _objectSpread(_objectSpread({}, options), {}, {\n      name: componentDisplayName,\n      updateProps: props,\n      __self: _this3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      }\n    }), React.createElement(WrappedComponent, _objectSpread(_objectSpread({}, props), {}, {\n      __self: _this3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      }\n    })));\n  };\n  Wrapped.displayName = \"profiler(\".concat(componentDisplayName, \")\");\n\n  // Copy over static methods from Wrapped component to Profiler HOC\n  // See: https://reactjs.org/docs/higher-order-components.html#static-methods-must-be-copied-over\n  hoistNonReactStatics(Wrapped, WrappedComponent);\n  return Wrapped;\n}\n\n/**\n *\n * `useProfiler` is a React hook that profiles a React component.\n *\n * Requires React 16.8 or above.\n * @param name displayName of component being profiled\n */\nfunction useProfiler(name) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    disabled: false,\n    hasRenderSpan: true\n  };\n  var _React$useState = React.useState(function () {\n      if (options && options.disabled) {\n        return undefined;\n      }\n      var activeTransaction = getActiveTransaction();\n      if (activeTransaction) {\n        return activeTransaction.startChild({\n          description: \"<\".concat(name, \">\"),\n          op: REACT_MOUNT_OP\n        });\n      }\n      return undefined;\n    }),\n    _React$useState2 = _slicedToArray(_React$useState, 1),\n    mountSpan = _React$useState2[0];\n  React.useEffect(function () {\n    if (mountSpan) {\n      mountSpan.finish();\n    }\n    return function () {\n      if (mountSpan && options.hasRenderSpan) {\n        mountSpan.startChild({\n          description: \"<\".concat(name, \">\"),\n          endTimestamp: timestampWithMs(),\n          op: REACT_RENDER_OP,\n          startTimestamp: mountSpan.endTimestamp\n        });\n      }\n    };\n    // We only want this to run once.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n}\n\n/** Grabs active transaction off scope */\nfunction getActiveTransaction() {\n  var hub = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getCurrentHub();\n  if (hub) {\n    var scope = hub.getScope();\n    if (scope) {\n      return scope.getTransaction();\n    }\n  }\n  return undefined;\n}\nexport { Profiler, UNKNOWN_COMPONENT, getActiveTransaction, useProfiler, withProfiler };","map":{"version":3,"sources":["../../src/profiler.tsx"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { getCurrentHub, Hub } from '@sentry/browser';\nimport { Span, Transaction } from '@sentry/types';\nimport { timestampWithMs } from '@sentry/utils';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport * as React from 'react';\n\nimport { REACT_MOUNT_OP, REACT_RENDER_OP, REACT_UPDATE_OP } from './constants';\n\nexport const UNKNOWN_COMPONENT = 'unknown';\n\nexport type ProfilerProps = {\n  // The name of the component being profiled.\n  name: string;\n  // If the Profiler is disabled. False by default. This is useful if you want to disable profilers\n  // in certain environments.\n  disabled?: boolean;\n  // If time component is on page should be displayed as spans. True by default.\n  includeRender?: boolean;\n  // If component updates should be displayed as spans. True by default.\n  includeUpdates?: boolean;\n  // props given to component being profiled.\n  updateProps: { [key: string]: unknown };\n};\n\n/**\n * The Profiler component leverages Sentry's Tracing integration to generate\n * spans based on component lifecycles.\n */\nclass Profiler extends React.Component<ProfilerProps> {\n  /**\n   * The span of the mount activity\n   * Made protected for the React Native SDK to access\n   */\n  protected _mountSpan: Span | undefined = undefined;\n  /**\n   * The span that represents the duration of time between shouldComponentUpdate and componentDidUpdate\n   */\n  protected _updateSpan: Span | undefined = undefined;\n\n  // eslint-disable-next-line @typescript-eslint/member-ordering\n  public static defaultProps: Partial<ProfilerProps> = {\n    disabled: false,\n    includeRender: true,\n    includeUpdates: true,\n  };\n\n  public constructor(props: ProfilerProps) {\n    super(props);\n    const { name, disabled = false } = this.props;\n\n    if (disabled) {\n      return;\n    }\n\n    const activeTransaction = getActiveTransaction();\n    if (activeTransaction) {\n      this._mountSpan = activeTransaction.startChild({\n        description: `<${name}>`,\n        op: REACT_MOUNT_OP,\n      });\n    }\n  }\n\n  // If a component mounted, we can finish the mount activity.\n  public componentDidMount(): void {\n    if (this._mountSpan) {\n      this._mountSpan.finish();\n    }\n  }\n\n  public shouldComponentUpdate({ updateProps, includeUpdates = true }: ProfilerProps): boolean {\n    // Only generate an update span if includeUpdates is true, if there is a valid mountSpan,\n    // and if the updateProps have changed. It is ok to not do a deep equality check here as it is expensive.\n    // We are just trying to give baseline clues for further investigation.\n    if (includeUpdates && this._mountSpan && updateProps !== this.props.updateProps) {\n      // See what props haved changed between the previous props, and the current props. This is\n      // set as data on the span. We just store the prop keys as the values could be potenially very large.\n      const changedProps = Object.keys(updateProps).filter(k => updateProps[k] !== this.props.updateProps[k]);\n      if (changedProps.length > 0) {\n        const now = timestampWithMs();\n        this._updateSpan = this._mountSpan.startChild({\n          data: {\n            changedProps,\n          },\n          description: `<${this.props.name}>`,\n          op: REACT_UPDATE_OP,\n          startTimestamp: now,\n        });\n      }\n    }\n\n    return true;\n  }\n\n  public componentDidUpdate(): void {\n    if (this._updateSpan) {\n      this._updateSpan.finish();\n      this._updateSpan = undefined;\n    }\n  }\n\n  // If a component is unmounted, we can say it is no longer on the screen.\n  // This means we can finish the span representing the component render.\n  public componentWillUnmount(): void {\n    const { name, includeRender = true } = this.props;\n\n    if (this._mountSpan && includeRender) {\n      // If we were able to obtain the spanId of the mount activity, we should set the\n      // next activity as a child to the component mount activity.\n      this._mountSpan.startChild({\n        description: `<${name}>`,\n        endTimestamp: timestampWithMs(),\n        op: REACT_RENDER_OP,\n        startTimestamp: this._mountSpan.endTimestamp,\n      });\n    }\n  }\n\n  public render(): React.ReactNode {\n    return this.props.children;\n  }\n}\n\n/**\n * withProfiler is a higher order component that wraps a\n * component in a {@link Profiler} component. It is recommended that\n * the higher order component be used over the regular {@link Profiler} component.\n *\n * @param WrappedComponent component that is wrapped by Profiler\n * @param options the {@link ProfilerProps} you can pass into the Profiler\n */\nfunction withProfiler<P extends Record<string, any>>(\n  WrappedComponent: React.ComponentType<P>,\n  // We do not want to have `updateProps` given in options, it is instead filled through the HOC.\n  options?: Pick<Partial<ProfilerProps>, Exclude<keyof ProfilerProps, 'updateProps'>>,\n): React.FC<P> {\n  const componentDisplayName =\n    (options && options.name) || WrappedComponent.displayName || WrappedComponent.name || UNKNOWN_COMPONENT;\n\n  const Wrapped: React.FC<P> = (props: P) => (\n    <Profiler {...options} name={componentDisplayName} updateProps={props}>\n      <WrappedComponent {...props} />\n    </Profiler>\n  );\n\n  Wrapped.displayName = `profiler(${componentDisplayName})`;\n\n  // Copy over static methods from Wrapped component to Profiler HOC\n  // See: https://reactjs.org/docs/higher-order-components.html#static-methods-must-be-copied-over\n  hoistNonReactStatics(Wrapped, WrappedComponent);\n  return Wrapped;\n}\n\n/**\n *\n * `useProfiler` is a React hook that profiles a React component.\n *\n * Requires React 16.8 or above.\n * @param name displayName of component being profiled\n */\nfunction useProfiler(\n  name: string,\n  options: { disabled?: boolean; hasRenderSpan?: boolean } = {\n    disabled: false,\n    hasRenderSpan: true,\n  },\n): void {\n  const [mountSpan] = React.useState(() => {\n    if (options && options.disabled) {\n      return undefined;\n    }\n\n    const activeTransaction = getActiveTransaction();\n    if (activeTransaction) {\n      return activeTransaction.startChild({\n        description: `<${name}>`,\n        op: REACT_MOUNT_OP,\n      });\n    }\n\n    return undefined;\n  });\n\n  React.useEffect(() => {\n    if (mountSpan) {\n      mountSpan.finish();\n    }\n\n    return (): void => {\n      if (mountSpan && options.hasRenderSpan) {\n        mountSpan.startChild({\n          description: `<${name}>`,\n          endTimestamp: timestampWithMs(),\n          op: REACT_RENDER_OP,\n          startTimestamp: mountSpan.endTimestamp,\n        });\n      }\n    };\n    // We only want this to run once.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n}\n\nexport { withProfiler, Profiler, useProfiler };\n\n/** Grabs active transaction off scope */\nexport function getActiveTransaction<T extends Transaction>(hub: Hub = getCurrentHub()): T | undefined {\n  if (hub) {\n    const scope = hub.getScope();\n    if (scope) {\n      return scope.getTransaction() as T | undefined;\n    }\n  }\n\n  return undefined;\n}\n"]},"metadata":{},"sourceType":"module"}