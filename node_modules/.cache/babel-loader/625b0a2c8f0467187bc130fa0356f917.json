{"ast":null,"code":"import _createForOfIteratorHelper from\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import{CurrencyAmount,Fraction,Percent}from'@uniswap/sdk-core';import{Pair}from'@uniswap/v2-sdk';import{FeeAmount}from'@uniswap/v3-sdk';import JSBI from'jsbi';import{ALLOWED_PRICE_IMPACT_HIGH,ALLOWED_PRICE_IMPACT_LOW,ALLOWED_PRICE_IMPACT_MEDIUM,BLOCKED_PRICE_IMPACT_NON_EXPERT,ONE_HUNDRED_PERCENT,ZERO_PERCENT}from'../constants/misc';var THIRTY_BIPS_FEE=new Percent(JSBI.BigInt(30),JSBI.BigInt(10000));var INPUT_FRACTION_AFTER_FEE=ONE_HUNDRED_PERCENT.subtract(THIRTY_BIPS_FEE);export function computeRealizedPriceImpact(trade){var realizedLpFeePercent=computeRealizedLPFeePercent(trade);return trade.priceImpact.subtract(realizedLpFeePercent);}// computes realized lp fee as a percent\nfunction computeRealizedLPFeePercent(trade){var percent;// Since routes are either all v2 or all v3 right now, calculate separately\nif(trade.swaps[0].route.pools instanceof Pair){// for each hop in our trade, take away the x*y=k price impact from 0.3% fees\n// e.g. for 3 tokens/2 hops: 1 - ((1 - .03) * (1-.03))\npercent=ONE_HUNDRED_PERCENT.subtract(trade.swaps.reduce(function(currentFee){return currentFee.multiply(INPUT_FRACTION_AFTER_FEE);},ONE_HUNDRED_PERCENT));}else{percent=ZERO_PERCENT;var _iterator=_createForOfIteratorHelper(trade.swaps),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var swap=_step.value;var _swap$inputAmount$div=swap.inputAmount.divide(trade.inputAmount),numerator=_swap$inputAmount$div.numerator,denominator=_swap$inputAmount$div.denominator;var overallPercent=new Percent(numerator,denominator);var routeRealizedLPFeePercent=overallPercent.multiply(ONE_HUNDRED_PERCENT.subtract(swap.route.pools.reduce(function(currentFee,pool){var fee=pool instanceof Pair?// not currently possible given protocol check above, but not fatal\nFeeAmount.MEDIUM:pool.fee;return currentFee.multiply(ONE_HUNDRED_PERCENT.subtract(new Fraction(fee,1000000)));},ONE_HUNDRED_PERCENT)));percent=percent.add(routeRealizedLPFeePercent);}}catch(err){_iterator.e(err);}finally{_iterator.f();}}return new Percent(percent.numerator,percent.denominator);}// computes price breakdown for the trade\nexport function computeRealizedLPFeeAmount(trade){if(trade){var realizedLPFee=computeRealizedLPFeePercent(trade);// the amount of the input that accrues to LPs\nreturn CurrencyAmount.fromRawAmount(trade.inputAmount.currency,trade.inputAmount.multiply(realizedLPFee).quotient);}return undefined;}var IMPACT_TIERS=[BLOCKED_PRICE_IMPACT_NON_EXPERT,ALLOWED_PRICE_IMPACT_HIGH,ALLOWED_PRICE_IMPACT_MEDIUM,ALLOWED_PRICE_IMPACT_LOW];export function warningSeverity(priceImpact){if(!priceImpact)return 4;var impact=IMPACT_TIERS.length;var _iterator2=_createForOfIteratorHelper(IMPACT_TIERS),_step2;try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var impactLevel=_step2.value;if(impactLevel.lessThan(priceImpact))return impact;impact--;}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}return 0;}","map":{"version":3,"names":["CurrencyAmount","Fraction","Percent","Pair","FeeAmount","JSBI","ALLOWED_PRICE_IMPACT_HIGH","ALLOWED_PRICE_IMPACT_LOW","ALLOWED_PRICE_IMPACT_MEDIUM","BLOCKED_PRICE_IMPACT_NON_EXPERT","ONE_HUNDRED_PERCENT","ZERO_PERCENT","THIRTY_BIPS_FEE","BigInt","INPUT_FRACTION_AFTER_FEE","subtract","computeRealizedPriceImpact","trade","realizedLpFeePercent","computeRealizedLPFeePercent","priceImpact","percent","swaps","route","pools","reduce","currentFee","multiply","swap","inputAmount","divide","numerator","denominator","overallPercent","routeRealizedLPFeePercent","pool","fee","MEDIUM","add","computeRealizedLPFeeAmount","realizedLPFee","fromRawAmount","currency","quotient","undefined","IMPACT_TIERS","warningSeverity","impact","length","impactLevel","lessThan"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/utils/prices.ts"],"sourcesContent":["import { Trade } from '@uniswap/router-sdk'\nimport { Currency, CurrencyAmount, Fraction, Percent, TradeType } from '@uniswap/sdk-core'\nimport { Pair } from '@uniswap/v2-sdk'\nimport { FeeAmount } from '@uniswap/v3-sdk'\nimport JSBI from 'jsbi'\n\nimport {\n  ALLOWED_PRICE_IMPACT_HIGH,\n  ALLOWED_PRICE_IMPACT_LOW,\n  ALLOWED_PRICE_IMPACT_MEDIUM,\n  BLOCKED_PRICE_IMPACT_NON_EXPERT,\n  ONE_HUNDRED_PERCENT,\n  ZERO_PERCENT,\n} from '../constants/misc'\n\nconst THIRTY_BIPS_FEE = new Percent(JSBI.BigInt(30), JSBI.BigInt(10000))\nconst INPUT_FRACTION_AFTER_FEE = ONE_HUNDRED_PERCENT.subtract(THIRTY_BIPS_FEE)\n\nexport function computeRealizedPriceImpact(trade: Trade<Currency, Currency, TradeType>): Percent {\n  const realizedLpFeePercent = computeRealizedLPFeePercent(trade)\n  return trade.priceImpact.subtract(realizedLpFeePercent)\n}\n\n// computes realized lp fee as a percent\nfunction computeRealizedLPFeePercent(trade: Trade<Currency, Currency, TradeType>): Percent {\n  let percent: Percent\n\n  // Since routes are either all v2 or all v3 right now, calculate separately\n  if (trade.swaps[0].route.pools instanceof Pair) {\n    // for each hop in our trade, take away the x*y=k price impact from 0.3% fees\n    // e.g. for 3 tokens/2 hops: 1 - ((1 - .03) * (1-.03))\n    percent = ONE_HUNDRED_PERCENT.subtract(\n      trade.swaps.reduce<Percent>(\n        (currentFee: Percent): Percent => currentFee.multiply(INPUT_FRACTION_AFTER_FEE),\n        ONE_HUNDRED_PERCENT\n      )\n    )\n  } else {\n    percent = ZERO_PERCENT\n    for (const swap of trade.swaps) {\n      const { numerator, denominator } = swap.inputAmount.divide(trade.inputAmount)\n      const overallPercent = new Percent(numerator, denominator)\n\n      const routeRealizedLPFeePercent = overallPercent.multiply(\n        ONE_HUNDRED_PERCENT.subtract(\n          swap.route.pools.reduce<Percent>((currentFee: Percent, pool): Percent => {\n            const fee =\n              pool instanceof Pair\n                ? // not currently possible given protocol check above, but not fatal\n                  FeeAmount.MEDIUM\n                : pool.fee\n            return currentFee.multiply(ONE_HUNDRED_PERCENT.subtract(new Fraction(fee, 1_000_000)))\n          }, ONE_HUNDRED_PERCENT)\n        )\n      )\n\n      percent = percent.add(routeRealizedLPFeePercent)\n    }\n  }\n\n  return new Percent(percent.numerator, percent.denominator)\n}\n\n// computes price breakdown for the trade\nexport function computeRealizedLPFeeAmount(\n  trade?: Trade<Currency, Currency, TradeType> | null\n): CurrencyAmount<Currency> | undefined {\n  if (trade) {\n    const realizedLPFee = computeRealizedLPFeePercent(trade)\n\n    // the amount of the input that accrues to LPs\n    return CurrencyAmount.fromRawAmount(trade.inputAmount.currency, trade.inputAmount.multiply(realizedLPFee).quotient)\n  }\n\n  return undefined\n}\n\nconst IMPACT_TIERS = [\n  BLOCKED_PRICE_IMPACT_NON_EXPERT,\n  ALLOWED_PRICE_IMPACT_HIGH,\n  ALLOWED_PRICE_IMPACT_MEDIUM,\n  ALLOWED_PRICE_IMPACT_LOW,\n]\n\ntype WarningSeverity = 0 | 1 | 2 | 3 | 4\nexport function warningSeverity(priceImpact: Percent | undefined): WarningSeverity {\n  if (!priceImpact) return 4\n  let impact: WarningSeverity = IMPACT_TIERS.length as WarningSeverity\n  for (const impactLevel of IMPACT_TIERS) {\n    if (impactLevel.lessThan(priceImpact)) return impact\n    impact--\n  }\n  return 0\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}