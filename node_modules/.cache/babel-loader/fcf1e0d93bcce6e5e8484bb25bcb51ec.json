{"ast":null,"code":"import gql from 'graphql-tag';\nimport { TransactionType } from 'types';\nimport { formatTokenSymbol } from 'utils/tokens';\nconst POOL_TRANSACTIONS = gql`\n  query transactions($address: Bytes!) {\n    mints(first: 100, orderBy: timestamp, orderDirection: desc, where: { pool: $address }, subgraphError: allow) {\n      timestamp\n      transaction {\n        id\n      }\n      pool {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      owner\n      sender\n      origin\n      amount0\n      amount1\n      amountUSD\n    }\n    swaps(first: 100, orderBy: timestamp, orderDirection: desc, where: { pool: $address }, subgraphError: allow) {\n      timestamp\n      transaction {\n        id\n      }\n      pool {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      origin\n      amount0\n      amount1\n      amountUSD\n    }\n    burns(first: 100, orderBy: timestamp, orderDirection: desc, where: { pool: $address }, subgraphError: allow) {\n      timestamp\n      transaction {\n        id\n      }\n      pool {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      owner\n      amount0\n      amount1\n      amountUSD\n    }\n  }\n`;\nexport async function fetchPoolTransactions(address, client) {\n  const {\n    data,\n    error,\n    loading\n  } = await client.query({\n    query: POOL_TRANSACTIONS,\n    variables: {\n      address: address\n    },\n    fetchPolicy: 'cache-first'\n  });\n  if (error) {\n    return {\n      data: undefined,\n      error: true,\n      loading: false\n    };\n  }\n  if (loading && !data) {\n    return {\n      data: undefined,\n      error: false,\n      loading: true\n    };\n  }\n  const mints = data.mints.map(m => {\n    return {\n      type: TransactionType.MINT,\n      hash: m.transaction.id,\n      timestamp: m.timestamp,\n      sender: m.origin,\n      token0Symbol: formatTokenSymbol(m.pool.token0.id, m.pool.token0.symbol),\n      token1Symbol: formatTokenSymbol(m.pool.token1.id, m.pool.token1.symbol),\n      token0Address: m.pool.token0.id,\n      token1Address: m.pool.token1.id,\n      amountUSD: parseFloat(m.amountUSD),\n      amountToken0: parseFloat(m.amount0),\n      amountToken1: parseFloat(m.amount1)\n    };\n  });\n  const burns = data.burns.map(m => {\n    return {\n      type: TransactionType.BURN,\n      hash: m.transaction.id,\n      timestamp: m.timestamp,\n      sender: m.owner,\n      token0Symbol: formatTokenSymbol(m.pool.token0.id, m.pool.token0.symbol),\n      token1Symbol: formatTokenSymbol(m.pool.token1.id, m.pool.token1.symbol),\n      token0Address: m.pool.token0.id,\n      token1Address: m.pool.token1.id,\n      amountUSD: parseFloat(m.amountUSD),\n      amountToken0: parseFloat(m.amount0),\n      amountToken1: parseFloat(m.amount1)\n    };\n  });\n  const swaps = data.swaps.map(m => {\n    return {\n      type: TransactionType.SWAP,\n      hash: m.transaction.id,\n      timestamp: m.timestamp,\n      sender: m.origin,\n      token0Symbol: formatTokenSymbol(m.pool.token0.id, m.pool.token0.symbol),\n      token1Symbol: formatTokenSymbol(m.pool.token1.id, m.pool.token1.symbol),\n      token0Address: m.pool.token0.id,\n      token1Address: m.pool.token1.id,\n      amountUSD: parseFloat(m.amountUSD),\n      amountToken0: parseFloat(m.amount0),\n      amountToken1: parseFloat(m.amount1)\n    };\n  });\n  return {\n    data: [...mints, ...burns, ...swaps],\n    error: false,\n    loading: false\n  };\n}","map":{"version":3,"names":["gql","TransactionType","formatTokenSymbol","POOL_TRANSACTIONS","fetchPoolTransactions","address","client","data","error","loading","query","variables","fetchPolicy","undefined","mints","map","m","type","MINT","hash","transaction","id","timestamp","sender","origin","token0Symbol","pool","token0","symbol","token1Symbol","token1","token0Address","token1Address","amountUSD","parseFloat","amountToken0","amount0","amountToken1","amount1","burns","BURN","owner","swaps","SWAP"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/data/pools/transactions.ts"],"sourcesContent":["import { ApolloClient, NormalizedCacheObject } from '@apollo/client'\nimport gql from 'graphql-tag'\nimport { Transaction, TransactionType } from 'types'\nimport { formatTokenSymbol } from 'utils/tokens'\n\nconst POOL_TRANSACTIONS = gql`\n  query transactions($address: Bytes!) {\n    mints(first: 100, orderBy: timestamp, orderDirection: desc, where: { pool: $address }, subgraphError: allow) {\n      timestamp\n      transaction {\n        id\n      }\n      pool {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      owner\n      sender\n      origin\n      amount0\n      amount1\n      amountUSD\n    }\n    swaps(first: 100, orderBy: timestamp, orderDirection: desc, where: { pool: $address }, subgraphError: allow) {\n      timestamp\n      transaction {\n        id\n      }\n      pool {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      origin\n      amount0\n      amount1\n      amountUSD\n    }\n    burns(first: 100, orderBy: timestamp, orderDirection: desc, where: { pool: $address }, subgraphError: allow) {\n      timestamp\n      transaction {\n        id\n      }\n      pool {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      owner\n      amount0\n      amount1\n      amountUSD\n    }\n  }\n`\n\ninterface TransactionResults {\n  mints: {\n    timestamp: string\n    transaction: {\n      id: string\n    }\n    pool: {\n      token0: {\n        id: string\n        symbol: string\n      }\n      token1: {\n        id: string\n        symbol: string\n      }\n    }\n    origin: string\n    amount0: string\n    amount1: string\n    amountUSD: string\n  }[]\n  swaps: {\n    timestamp: string\n    transaction: {\n      id: string\n    }\n    pool: {\n      token0: {\n        id: string\n        symbol: string\n      }\n      token1: {\n        id: string\n        symbol: string\n      }\n    }\n    origin: string\n    amount0: string\n    amount1: string\n    amountUSD: string\n  }[]\n  burns: {\n    timestamp: string\n    transaction: {\n      id: string\n    }\n    pool: {\n      token0: {\n        id: string\n        symbol: string\n      }\n      token1: {\n        id: string\n        symbol: string\n      }\n    }\n    owner: string\n    amount0: string\n    amount1: string\n    amountUSD: string\n  }[]\n}\n\nexport async function fetchPoolTransactions(\n  address: string,\n  client: ApolloClient<NormalizedCacheObject>\n): Promise<{ data: Transaction[] | undefined; error: boolean; loading: boolean }> {\n  const { data, error, loading } = await client.query<TransactionResults>({\n    query: POOL_TRANSACTIONS,\n    variables: {\n      address: address,\n    },\n    fetchPolicy: 'cache-first',\n  })\n\n  if (error) {\n    return {\n      data: undefined,\n      error: true,\n      loading: false,\n    }\n  }\n\n  if (loading && !data) {\n    return {\n      data: undefined,\n      error: false,\n      loading: true,\n    }\n  }\n\n  const mints = data.mints.map((m) => {\n    return {\n      type: TransactionType.MINT,\n      hash: m.transaction.id,\n      timestamp: m.timestamp,\n      sender: m.origin,\n      token0Symbol: formatTokenSymbol(m.pool.token0.id, m.pool.token0.symbol),\n      token1Symbol: formatTokenSymbol(m.pool.token1.id, m.pool.token1.symbol),\n      token0Address: m.pool.token0.id,\n      token1Address: m.pool.token1.id,\n      amountUSD: parseFloat(m.amountUSD),\n      amountToken0: parseFloat(m.amount0),\n      amountToken1: parseFloat(m.amount1),\n    }\n  })\n  const burns = data.burns.map((m) => {\n    return {\n      type: TransactionType.BURN,\n      hash: m.transaction.id,\n      timestamp: m.timestamp,\n      sender: m.owner,\n      token0Symbol: formatTokenSymbol(m.pool.token0.id, m.pool.token0.symbol),\n      token1Symbol: formatTokenSymbol(m.pool.token1.id, m.pool.token1.symbol),\n      token0Address: m.pool.token0.id,\n      token1Address: m.pool.token1.id,\n      amountUSD: parseFloat(m.amountUSD),\n      amountToken0: parseFloat(m.amount0),\n      amountToken1: parseFloat(m.amount1),\n    }\n  })\n\n  const swaps = data.swaps.map((m) => {\n    return {\n      type: TransactionType.SWAP,\n      hash: m.transaction.id,\n      timestamp: m.timestamp,\n      sender: m.origin,\n      token0Symbol: formatTokenSymbol(m.pool.token0.id, m.pool.token0.symbol),\n      token1Symbol: formatTokenSymbol(m.pool.token1.id, m.pool.token1.symbol),\n      token0Address: m.pool.token0.id,\n      token1Address: m.pool.token1.id,\n      amountUSD: parseFloat(m.amountUSD),\n      amountToken0: parseFloat(m.amount0),\n      amountToken1: parseFloat(m.amount1),\n    }\n  })\n\n  return { data: [...mints, ...burns, ...swaps], error: false, loading: false }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}