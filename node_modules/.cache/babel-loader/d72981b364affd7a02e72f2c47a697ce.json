{"ast":null,"code":"import { __awaiter, __extends, __generator } from \"tslib\";\nimport { BaseTransport } from '@amplitude/analytics-core';\nvar FetchTransport = /** @class */function (_super) {\n  __extends(FetchTransport, _super);\n  function FetchTransport() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  FetchTransport.prototype.send = function (serverUrl, payload) {\n    return __awaiter(this, void 0, void 0, function () {\n      var options, response, responsePayload;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            /* istanbul ignore if */\n            if (typeof fetch === 'undefined') {\n              throw new Error('FetchTransport is not supported');\n            }\n            options = {\n              headers: {\n                'Content-Type': 'application/json',\n                Accept: '*/*'\n              },\n              body: JSON.stringify(payload),\n              method: 'POST'\n            };\n            return [4 /*yield*/, fetch(serverUrl, options)];\n          case 1:\n            response = _a.sent();\n            return [4 /*yield*/, response.json()];\n          case 2:\n            responsePayload = _a.sent();\n            return [2 /*return*/, this.buildResponse(responsePayload)];\n        }\n      });\n    });\n  };\n  return FetchTransport;\n}(BaseTransport);\nexport { FetchTransport };","map":{"version":3,"sources":["../../../src/transports/fetch.ts"],"names":[],"mappings":";AAAA,SAAS,aAAa,QAAQ,2BAA2B;AAGzD,IAAA,cAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAAoC,SAAA,CAAA,cAAA,EAAA,MAAA,CAAA;EAApC,SAAA,cAAA,GAAA;;EAmBA;EAlBQ,cAAA,CAAA,SAAA,CAAA,IAAI,GAAV,UAAW,SAAiB,EAAE,OAAgB,EAAA;;;;;;YAC5C;YACA,IAAI,OAAO,KAAK,KAAK,WAAW,EAAE;cAChC,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC;YACnD;YACK,OAAO,GAAgB;cAC3B,OAAO,EAAE;gBACP,cAAc,EAAE,kBAAkB;gBAClC,MAAM,EAAE;eACT;cACD,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC;cAC7B,MAAM,EAAE;aACT;YACgB,OAAA,CAAA,CAAA,CAAA,WAAM,KAAK,CAAC,SAAS,EAAE,OAAO,CAAC,CAAA;;YAA1C,QAAQ,GAAG,EAAA,CAAA,IAAA,EAA+B;YAEH,OAAA,CAAA,CAAA,CAAA,WAAM,QAAQ,CAAC,IAAI,EAAE,CAAA;;YAA5D,eAAe,GAAwB,EAAA,CAAA,IAAA,EAAqB;YAClE,OAAA,CAAA,CAAA,CAAA,YAAO,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC,CAAA;QAAC;;;GAC5C;EACH,OAAA,cAAC;AAAD,CAAC,CAnBmC,aAAa,CAAA","sourcesContent":["import { BaseTransport } from '@amplitude/analytics-core';\nimport { Payload, Response, Transport } from '@amplitude/analytics-types';\n\nexport class FetchTransport extends BaseTransport implements Transport {\n  async send(serverUrl: string, payload: Payload): Promise<Response | null> {\n    /* istanbul ignore if */\n    if (typeof fetch === 'undefined') {\n      throw new Error('FetchTransport is not supported');\n    }\n    const options: RequestInit = {\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: '*/*',\n      },\n      body: JSON.stringify(payload),\n      method: 'POST',\n    };\n    const response = await fetch(serverUrl, options);\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    const responsePayload: Record<string, any> = await response.json();\n    return this.buildResponse(responsePayload);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}