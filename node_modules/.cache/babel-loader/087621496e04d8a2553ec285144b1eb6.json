{"ast":null,"code":"import { createReducer } from '@reduxjs/toolkit';\nimport { Field, resetMintState, typeInput } from './actions';\nexport const initialState = {\n  independentField: Field.CURRENCY_A,\n  typedValue: '',\n  otherTypedValue: '',\n  startPriceTypedValue: '',\n  leftRangeTypedValue: '',\n  rightRangeTypedValue: ''\n};\nexport default createReducer(initialState, builder => builder.addCase(resetMintState, () => initialState).addCase(typeInput, (state, _ref) => {\n  let {\n    payload: {\n      field,\n      typedValue,\n      noLiquidity\n    }\n  } = _ref;\n  if (noLiquidity) {\n    // they're typing into the field they've last typed in\n    if (field === state.independentField) {\n      return {\n        ...state,\n        independentField: field,\n        typedValue\n      };\n    }\n    // they're typing into a new field, store the other value\n    else {\n      return {\n        ...state,\n        independentField: field,\n        typedValue,\n        otherTypedValue: state.typedValue\n      };\n    }\n  } else {\n    return {\n      ...state,\n      independentField: field,\n      typedValue,\n      otherTypedValue: ''\n    };\n  }\n}));","map":{"version":3,"names":["createReducer","Field","resetMintState","typeInput","initialState","independentField","CURRENCY_A","typedValue","otherTypedValue","startPriceTypedValue","leftRangeTypedValue","rightRangeTypedValue","builder","addCase","state","payload","field","noLiquidity"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/state/mint/reducer.ts"],"sourcesContent":["import { createReducer } from '@reduxjs/toolkit'\n\nimport { Field, resetMintState, typeInput } from './actions'\n\nexport interface MintState {\n  readonly independentField: Field\n  readonly typedValue: string\n  readonly otherTypedValue: string // for the case when there's no liquidity\n  readonly startPriceTypedValue: string // for the case when there's no liquidity\n  readonly leftRangeTypedValue: string\n  readonly rightRangeTypedValue: string\n}\n\nexport const initialState: MintState = {\n  independentField: Field.CURRENCY_A,\n  typedValue: '',\n  otherTypedValue: '',\n  startPriceTypedValue: '',\n  leftRangeTypedValue: '',\n  rightRangeTypedValue: '',\n}\n\nexport default createReducer<MintState>(initialState, (builder) =>\n  builder\n    .addCase(resetMintState, () => initialState)\n    .addCase(typeInput, (state, { payload: { field, typedValue, noLiquidity } }) => {\n      if (noLiquidity) {\n        // they're typing into the field they've last typed in\n        if (field === state.independentField) {\n          return {\n            ...state,\n            independentField: field,\n            typedValue,\n          }\n        }\n        // they're typing into a new field, store the other value\n        else {\n          return {\n            ...state,\n            independentField: field,\n            typedValue,\n            otherTypedValue: state.typedValue,\n          }\n        }\n      } else {\n        return {\n          ...state,\n          independentField: field,\n          typedValue,\n          otherTypedValue: '',\n        }\n      }\n    })\n)\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,kBAAkB;AAEhD,SAASC,KAAK,EAAEC,cAAc,EAAEC,SAAS,QAAQ,WAAW;AAW5D,OAAO,MAAMC,YAAuB,GAAG;EACrCC,gBAAgB,EAAEJ,KAAK,CAACK,UAAU;EAClCC,UAAU,EAAE,EAAE;EACdC,eAAe,EAAE,EAAE;EACnBC,oBAAoB,EAAE,EAAE;EACxBC,mBAAmB,EAAE,EAAE;EACvBC,oBAAoB,EAAE;AACxB,CAAC;AAED,eAAeX,aAAa,CAAYI,YAAY,EAAGQ,OAAO,IAC5DA,OAAO,CACJC,OAAO,CAACX,cAAc,EAAE,MAAME,YAAY,CAAC,CAC3CS,OAAO,CAACV,SAAS,EAAE,CAACW,KAAK,WAAsD;EAAA,IAApD;IAAEC,OAAO,EAAE;MAAEC,KAAK;MAAET,UAAU;MAAEU;IAAY;EAAE,CAAC;EACzE,IAAIA,WAAW,EAAE;IACf;IACA,IAAID,KAAK,KAAKF,KAAK,CAACT,gBAAgB,EAAE;MACpC,OAAO;QACL,GAAGS,KAAK;QACRT,gBAAgB,EAAEW,KAAK;QACvBT;MACF,CAAC;IACH;IACA;IAAA,KACK;MACH,OAAO;QACL,GAAGO,KAAK;QACRT,gBAAgB,EAAEW,KAAK;QACvBT,UAAU;QACVC,eAAe,EAAEM,KAAK,CAACP;MACzB,CAAC;IACH;EACF,CAAC,MAAM;IACL,OAAO;MACL,GAAGO,KAAK;MACRT,gBAAgB,EAAEW,KAAK;MACvBT,UAAU;MACVC,eAAe,EAAE;IACnB,CAAC;EACH;AACF,CAAC,CAAC,CACL"},"metadata":{},"sourceType":"module"}