{"ast":null,"code":"'use strict';\n\nmodule.exports = factory;\nfunction factory(file) {\n  var contents = indices(String(file));\n  return {\n    toPosition: offsetToPositionFactory(contents),\n    toOffset: positionToOffsetFactory(contents)\n  };\n}\n\n// Factory to get the line and column-based `position` for `offset` in the bound\n// indices.\nfunction offsetToPositionFactory(indices) {\n  return offsetToPosition;\n\n  // Get the line and column-based `position` for `offset` in the bound indices.\n  function offsetToPosition(offset) {\n    var index = -1;\n    var length = indices.length;\n    if (offset < 0) {\n      return {};\n    }\n    while (++index < length) {\n      if (indices[index] > offset) {\n        return {\n          line: index + 1,\n          column: offset - (indices[index - 1] || 0) + 1,\n          offset: offset\n        };\n      }\n    }\n    return {};\n  }\n}\n\n// Factory to get the `offset` for a line and column-based `position` in the\n// bound indices.\nfunction positionToOffsetFactory(indices) {\n  return positionToOffset;\n\n  // Get the `offset` for a line and column-based `position` in the bound\n  // indices.\n  function positionToOffset(position) {\n    var line = position && position.line;\n    var column = position && position.column;\n    if (!isNaN(line) && !isNaN(column) && line - 1 in indices) {\n      return (indices[line - 2] || 0) + column - 1 || 0;\n    }\n    return -1;\n  }\n}\n\n// Get indices of line-breaks in `value`.\nfunction indices(value) {\n  var result = [];\n  var index = value.indexOf('\\n');\n  while (index !== -1) {\n    result.push(index + 1);\n    index = value.indexOf('\\n', index + 1);\n  }\n  result.push(value.length + 1);\n  return result;\n}","map":{"version":3,"names":["module","exports","factory","file","contents","indices","String","toPosition","offsetToPositionFactory","toOffset","positionToOffsetFactory","offsetToPosition","offset","index","length","line","column","positionToOffset","position","isNaN","value","result","indexOf","push"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/vfile-location/index.js"],"sourcesContent":["'use strict'\n\nmodule.exports = factory\n\nfunction factory(file) {\n  var contents = indices(String(file))\n\n  return {\n    toPosition: offsetToPositionFactory(contents),\n    toOffset: positionToOffsetFactory(contents)\n  }\n}\n\n// Factory to get the line and column-based `position` for `offset` in the bound\n// indices.\nfunction offsetToPositionFactory(indices) {\n  return offsetToPosition\n\n  // Get the line and column-based `position` for `offset` in the bound indices.\n  function offsetToPosition(offset) {\n    var index = -1\n    var length = indices.length\n\n    if (offset < 0) {\n      return {}\n    }\n\n    while (++index < length) {\n      if (indices[index] > offset) {\n        return {\n          line: index + 1,\n          column: offset - (indices[index - 1] || 0) + 1,\n          offset: offset\n        }\n      }\n    }\n\n    return {}\n  }\n}\n\n// Factory to get the `offset` for a line and column-based `position` in the\n// bound indices.\nfunction positionToOffsetFactory(indices) {\n  return positionToOffset\n\n  // Get the `offset` for a line and column-based `position` in the bound\n  // indices.\n  function positionToOffset(position) {\n    var line = position && position.line\n    var column = position && position.column\n\n    if (!isNaN(line) && !isNaN(column) && line - 1 in indices) {\n      return (indices[line - 2] || 0) + column - 1 || 0\n    }\n\n    return -1\n  }\n}\n\n// Get indices of line-breaks in `value`.\nfunction indices(value) {\n  var result = []\n  var index = value.indexOf('\\n')\n\n  while (index !== -1) {\n    result.push(index + 1)\n    index = value.indexOf('\\n', index + 1)\n  }\n\n  result.push(value.length + 1)\n\n  return result\n}\n"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,OAAO,GAAGC,OAAO;AAExB,SAASA,OAAO,CAACC,IAAI,EAAE;EACrB,IAAIC,QAAQ,GAAGC,OAAO,CAACC,MAAM,CAACH,IAAI,CAAC,CAAC;EAEpC,OAAO;IACLI,UAAU,EAAEC,uBAAuB,CAACJ,QAAQ,CAAC;IAC7CK,QAAQ,EAAEC,uBAAuB,CAACN,QAAQ;EAC5C,CAAC;AACH;;AAEA;AACA;AACA,SAASI,uBAAuB,CAACH,OAAO,EAAE;EACxC,OAAOM,gBAAgB;;EAEvB;EACA,SAASA,gBAAgB,CAACC,MAAM,EAAE;IAChC,IAAIC,KAAK,GAAG,CAAC,CAAC;IACd,IAAIC,MAAM,GAAGT,OAAO,CAACS,MAAM;IAE3B,IAAIF,MAAM,GAAG,CAAC,EAAE;MACd,OAAO,CAAC,CAAC;IACX;IAEA,OAAO,EAAEC,KAAK,GAAGC,MAAM,EAAE;MACvB,IAAIT,OAAO,CAACQ,KAAK,CAAC,GAAGD,MAAM,EAAE;QAC3B,OAAO;UACLG,IAAI,EAAEF,KAAK,GAAG,CAAC;UACfG,MAAM,EAAEJ,MAAM,IAAIP,OAAO,CAACQ,KAAK,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC;UAC9CD,MAAM,EAAEA;QACV,CAAC;MACH;IACF;IAEA,OAAO,CAAC,CAAC;EACX;AACF;;AAEA;AACA;AACA,SAASF,uBAAuB,CAACL,OAAO,EAAE;EACxC,OAAOY,gBAAgB;;EAEvB;EACA;EACA,SAASA,gBAAgB,CAACC,QAAQ,EAAE;IAClC,IAAIH,IAAI,GAAGG,QAAQ,IAAIA,QAAQ,CAACH,IAAI;IACpC,IAAIC,MAAM,GAAGE,QAAQ,IAAIA,QAAQ,CAACF,MAAM;IAExC,IAAI,CAACG,KAAK,CAACJ,IAAI,CAAC,IAAI,CAACI,KAAK,CAACH,MAAM,CAAC,IAAID,IAAI,GAAG,CAAC,IAAIV,OAAO,EAAE;MACzD,OAAO,CAACA,OAAO,CAACU,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,IAAIC,MAAM,GAAG,CAAC,IAAI,CAAC;IACnD;IAEA,OAAO,CAAC,CAAC;EACX;AACF;;AAEA;AACA,SAASX,OAAO,CAACe,KAAK,EAAE;EACtB,IAAIC,MAAM,GAAG,EAAE;EACf,IAAIR,KAAK,GAAGO,KAAK,CAACE,OAAO,CAAC,IAAI,CAAC;EAE/B,OAAOT,KAAK,KAAK,CAAC,CAAC,EAAE;IACnBQ,MAAM,CAACE,IAAI,CAACV,KAAK,GAAG,CAAC,CAAC;IACtBA,KAAK,GAAGO,KAAK,CAACE,OAAO,CAAC,IAAI,EAAET,KAAK,GAAG,CAAC,CAAC;EACxC;EAEAQ,MAAM,CAACE,IAAI,CAACH,KAAK,CAACN,MAAM,GAAG,CAAC,CAAC;EAE7B,OAAOO,MAAM;AACf"},"metadata":{},"sourceType":"script"}