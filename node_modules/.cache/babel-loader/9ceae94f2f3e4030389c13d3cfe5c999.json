{"ast":null,"code":"import { isThenable } from './is.js';\n\n/* eslint-disable @typescript-eslint/explicit-function-return-type */\n\n/** SyncPromise internal states */\nvar States;\n(function (States) {\n  /** Pending */\n  const PENDING = 0;\n  States[States[\"PENDING\"] = PENDING] = \"PENDING\";\n  /** Resolved / OK */\n  const RESOLVED = 1;\n  States[States[\"RESOLVED\"] = RESOLVED] = \"RESOLVED\";\n  /** Rejected / Error */\n  const REJECTED = 2;\n  States[States[\"REJECTED\"] = REJECTED] = \"REJECTED\";\n})(States || (States = {}));\n\n// Overloads so we can call resolvedSyncPromise without arguments and generic argument\n\n/**\n * Creates a resolved sync promise.\n *\n * @param value the value to resolve the promise with\n * @returns the resolved sync promise\n */\nfunction resolvedSyncPromise(value) {\n  return new SyncPromise(resolve => {\n    resolve(value);\n  });\n}\n\n/**\n * Creates a rejected sync promise.\n *\n * @param value the value to reject the promise with\n * @returns the rejected sync promise\n */\nfunction rejectedSyncPromise(reason) {\n  return new SyncPromise((_, reject) => {\n    reject(reason);\n  });\n}\n\n/**\n * Thenable class that behaves like a Promise and follows it's interface\n * but is not async internally\n */\nclass SyncPromise {\n  __init() {\n    this._state = States.PENDING;\n  }\n  __init2() {\n    this._handlers = [];\n  }\n  constructor(executor) {\n    ;\n    SyncPromise.prototype.__init.call(this);\n    SyncPromise.prototype.__init2.call(this);\n    SyncPromise.prototype.__init3.call(this);\n    SyncPromise.prototype.__init4.call(this);\n    SyncPromise.prototype.__init5.call(this);\n    SyncPromise.prototype.__init6.call(this);\n    try {\n      executor(this._resolve, this._reject);\n    } catch (e) {\n      this._reject(e);\n    }\n  }\n\n  /** JSDoc */\n  then(onfulfilled, onrejected) {\n    return new SyncPromise((resolve, reject) => {\n      this._handlers.push([false, result => {\n        if (!onfulfilled) {\n          // TODO: ¯\\_(ツ)_/¯\n          // TODO: FIXME\n          resolve(result);\n        } else {\n          try {\n            resolve(onfulfilled(result));\n          } catch (e) {\n            reject(e);\n          }\n        }\n      }, reason => {\n        if (!onrejected) {\n          reject(reason);\n        } else {\n          try {\n            resolve(onrejected(reason));\n          } catch (e) {\n            reject(e);\n          }\n        }\n      }]);\n      this._executeHandlers();\n    });\n  }\n\n  /** JSDoc */\n  catch(onrejected) {\n    return this.then(val => val, onrejected);\n  }\n\n  /** JSDoc */\n  finally(onfinally) {\n    return new SyncPromise((resolve, reject) => {\n      let val;\n      let isRejected;\n      return this.then(value => {\n        isRejected = false;\n        val = value;\n        if (onfinally) {\n          onfinally();\n        }\n      }, reason => {\n        isRejected = true;\n        val = reason;\n        if (onfinally) {\n          onfinally();\n        }\n      }).then(() => {\n        if (isRejected) {\n          reject(val);\n          return;\n        }\n        resolve(val);\n      });\n    });\n  }\n\n  /** JSDoc */\n  __init3() {\n    this._resolve = value => {\n      this._setResult(States.RESOLVED, value);\n    };\n  }\n\n  /** JSDoc */\n  __init4() {\n    this._reject = reason => {\n      this._setResult(States.REJECTED, reason);\n    };\n  }\n\n  /** JSDoc */\n  __init5() {\n    this._setResult = (state, value) => {\n      if (this._state !== States.PENDING) {\n        return;\n      }\n      if (isThenable(value)) {\n        void value.then(this._resolve, this._reject);\n        return;\n      }\n      this._state = state;\n      this._value = value;\n      this._executeHandlers();\n    };\n  }\n\n  /** JSDoc */\n  __init6() {\n    this._executeHandlers = () => {\n      if (this._state === States.PENDING) {\n        return;\n      }\n      const cachedHandlers = this._handlers.slice();\n      this._handlers = [];\n      cachedHandlers.forEach(handler => {\n        if (handler[0]) {\n          return;\n        }\n        if (this._state === States.RESOLVED) {\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          handler[1](this._value);\n        }\n        if (this._state === States.REJECTED) {\n          handler[2](this._value);\n        }\n        handler[0] = true;\n      });\n    };\n  }\n}\nexport { SyncPromise, rejectedSyncPromise, resolvedSyncPromise };","map":{"version":3,"sources":["../../src/syncpromise.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/explicit-function-return-type */\n/* eslint-disable @typescript-eslint/typedef */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { isThenable } from './is';\n\n/** SyncPromise internal states */\nconst enum States {\n  /** Pending */\n  PENDING = 0,\n  /** Resolved / OK */\n  RESOLVED = 1,\n  /** Rejected / Error */\n  REJECTED = 2,\n}\n\n// Overloads so we can call resolvedSyncPromise without arguments and generic argument\nexport function resolvedSyncPromise(): PromiseLike<void>;\nexport function resolvedSyncPromise<T>(value: T | PromiseLike<T>): PromiseLike<T>;\n\n/**\n * Creates a resolved sync promise.\n *\n * @param value the value to resolve the promise with\n * @returns the resolved sync promise\n */\nexport function resolvedSyncPromise<T>(value?: T | PromiseLike<T>): PromiseLike<T> {\n  return new SyncPromise(resolve => {\n    resolve(value);\n  });\n}\n\n/**\n * Creates a rejected sync promise.\n *\n * @param value the value to reject the promise with\n * @returns the rejected sync promise\n */\nexport function rejectedSyncPromise<T = never>(reason?: any): PromiseLike<T> {\n  return new SyncPromise((_, reject) => {\n    reject(reason);\n  });\n}\n\n/**\n * Thenable class that behaves like a Promise and follows it's interface\n * but is not async internally\n */\nclass SyncPromise<T> implements PromiseLike<T> {\n  private _state: States = States.PENDING;\n  private _handlers: Array<[boolean, (value: T) => void, (reason: any) => any]> = [];\n  private _value: any;\n\n  public constructor(\n    executor: (resolve: (value?: T | PromiseLike<T> | null) => void, reject: (reason?: any) => void) => void,\n  ) {\n    try {\n      executor(this._resolve, this._reject);\n    } catch (e) {\n      this._reject(e);\n    }\n  }\n\n  /** JSDoc */\n  public then<TResult1 = T, TResult2 = never>(\n    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | null,\n    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null,\n  ): PromiseLike<TResult1 | TResult2> {\n    return new SyncPromise((resolve, reject) => {\n      this._handlers.push([\n        false,\n        result => {\n          if (!onfulfilled) {\n            // TODO: ¯\\_(ツ)_/¯\n            // TODO: FIXME\n            resolve(result as any);\n          } else {\n            try {\n              resolve(onfulfilled(result));\n            } catch (e) {\n              reject(e);\n            }\n          }\n        },\n        reason => {\n          if (!onrejected) {\n            reject(reason);\n          } else {\n            try {\n              resolve(onrejected(reason));\n            } catch (e) {\n              reject(e);\n            }\n          }\n        },\n      ]);\n      this._executeHandlers();\n    });\n  }\n\n  /** JSDoc */\n  public catch<TResult = never>(\n    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | null,\n  ): PromiseLike<T | TResult> {\n    return this.then(val => val, onrejected);\n  }\n\n  /** JSDoc */\n  public finally<TResult>(onfinally?: (() => void) | null): PromiseLike<TResult> {\n    return new SyncPromise<TResult>((resolve, reject) => {\n      let val: TResult | any;\n      let isRejected: boolean;\n\n      return this.then(\n        value => {\n          isRejected = false;\n          val = value;\n          if (onfinally) {\n            onfinally();\n          }\n        },\n        reason => {\n          isRejected = true;\n          val = reason;\n          if (onfinally) {\n            onfinally();\n          }\n        },\n      ).then(() => {\n        if (isRejected) {\n          reject(val);\n          return;\n        }\n\n        resolve(val as unknown as any);\n      });\n    });\n  }\n\n  /** JSDoc */\n  private readonly _resolve = (value?: T | PromiseLike<T> | null) => {\n    this._setResult(States.RESOLVED, value);\n  };\n\n  /** JSDoc */\n  private readonly _reject = (reason?: any) => {\n    this._setResult(States.REJECTED, reason);\n  };\n\n  /** JSDoc */\n  private readonly _setResult = (state: States, value?: T | PromiseLike<T> | any) => {\n    if (this._state !== States.PENDING) {\n      return;\n    }\n\n    if (isThenable(value)) {\n      void (value as PromiseLike<T>).then(this._resolve, this._reject);\n      return;\n    }\n\n    this._state = state;\n    this._value = value;\n\n    this._executeHandlers();\n  };\n\n  /** JSDoc */\n  private readonly _executeHandlers = () => {\n    if (this._state === States.PENDING) {\n      return;\n    }\n\n    const cachedHandlers = this._handlers.slice();\n    this._handlers = [];\n\n    cachedHandlers.forEach(handler => {\n      if (handler[0]) {\n        return;\n      }\n\n      if (this._state === States.RESOLVED) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        handler[1](this._value as unknown as any);\n      }\n\n      if (this._state === States.REJECTED) {\n        handler[2](this._value);\n      }\n\n      handler[0] = true;\n    });\n  };\n}\n\nexport { SyncPromise };\n"]},"metadata":{},"sourceType":"module"}