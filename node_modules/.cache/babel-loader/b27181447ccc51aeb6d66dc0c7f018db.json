{"ast":null,"code":"import _styled from \"styled-components\";\nvar _jsxFileName = \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/nft/components/details/TraitsContainer.tsx\",\n  _s = $RefreshSig$();\nimport { OpacityHoverState } from 'components/Common';\nimport qs from 'query-string';\nimport { useMemo } from 'react';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Grid = _styled.div.withConfig({\n  displayName: \"TraitsContainer__Grid\",\n  componentId: \"sc-1mnwt62-0\"\n})([\"display:grid;grid-template-columns:1fr 1fr 1fr 1fr;gap:16px;max-width:780px;@media (max-width:1080px){grid-template-columns:1fr 1fr 1fr;}@media (max-width:420px){grid-template-columns:1fr 1fr;}\"]);\nconst GridItemContainer = _styled(Link).withConfig({\n  displayName: \"TraitsContainer__GridItemContainer\",\n  componentId: \"sc-1mnwt62-1\"\n})([\"background-color:\", \";border-radius:12px;cursor:pointer;padding:12px;text-decoration:none;\", \" min-width:0;\"], _ref => {\n  let {\n    theme\n  } = _ref;\n  return theme.backgroundInteractive;\n}, OpacityHoverState);\nconst TraitType = _styled.div.withConfig({\n  displayName: \"TraitsContainer__TraitType\",\n  componentId: \"sc-1mnwt62-2\"\n})([\"color:\", \";font-weight:600;font-size:10px;line-height:12px;white-space:nowrap;width:100%;\"], _ref2 => {\n  let {\n    theme\n  } = _ref2;\n  return theme.textSecondary;\n});\nconst TraitValue = _styled.div.withConfig({\n  displayName: \"TraitsContainer__TraitValue\",\n  componentId: \"sc-1mnwt62-3\"\n})([\"color:\", \";font-size:16px;line-height:24px;margin-top:4px;display:inline-block;display:inline-block;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;max-width:100%;\"], _ref3 => {\n  let {\n    theme\n  } = _ref3;\n  return theme.textPrimary;\n});\nconst GridItem = _ref4 => {\n  let {\n    trait,\n    collectionAddress\n  } = _ref4;\n  const {\n    trait_type,\n    trait_value\n  } = trait;\n  const params = qs.stringify({\n    traits: [`(\"${trait_type}\",\"${trait_value}\")`]\n  }, {\n    arrayFormat: 'comma'\n  });\n  return /*#__PURE__*/_jsxDEV(GridItemContainer, {\n    to: `/nfts/collection/${collectionAddress}?${params}`,\n    children: [/*#__PURE__*/_jsxDEV(TraitType, {\n      children: trait_type\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TraitValue, {\n      children: trait_value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_c = GridItem;\nconst TraitsContainer = _ref5 => {\n  _s();\n  let {\n    asset\n  } = _ref5;\n  const traits = useMemo(() => {\n    var _asset$traits;\n    return (_asset$traits = asset.traits) === null || _asset$traits === void 0 ? void 0 : _asset$traits.sort((a, b) => a.trait_type.localeCompare(b.trait_type));\n  }, [asset]);\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    children: traits === null || traits === void 0 ? void 0 : traits.map(trait => {\n      return /*#__PURE__*/_jsxDEV(GridItem, {\n        trait: trait,\n        collectionAddress: asset.address\n      }, trait.trait_type, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 16\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n_s(TraitsContainer, \"P34pTWp8gkMijkjBXLFfz8HxpCk=\");\n_c2 = TraitsContainer;\nexport default TraitsContainer;\nvar _c, _c2;\n$RefreshReg$(_c, \"GridItem\");\n$RefreshReg$(_c2, \"TraitsContainer\");","map":{"version":3,"names":["OpacityHoverState","qs","useMemo","Link","Grid","styled","div","GridItemContainer","theme","backgroundInteractive","TraitType","textSecondary","TraitValue","textPrimary","GridItem","trait","collectionAddress","trait_type","trait_value","params","stringify","traits","arrayFormat","TraitsContainer","asset","sort","a","b","localeCompare","map","address"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/nft/components/details/TraitsContainer.tsx"],"sourcesContent":["import { OpacityHoverState } from 'components/Common'\nimport { GenieAsset, Trait } from 'nft/types'\nimport qs from 'query-string'\nimport { useMemo } from 'react'\nimport { Link } from 'react-router-dom'\nimport styled from 'styled-components/macro'\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr 1fr;\n  gap: 16px;\n  max-width: 780px;\n\n  @media (max-width: 1080px) {\n    grid-template-columns: 1fr 1fr 1fr;\n  }\n\n  @media (max-width: 420px) {\n    grid-template-columns: 1fr 1fr;\n  }\n`\n\nconst GridItemContainer = styled(Link)`\n  background-color: ${({ theme }) => theme.backgroundInteractive};\n  border-radius: 12px;\n  cursor: pointer;\n  padding: 12px;\n  text-decoration: none;\n\n  ${OpacityHoverState}\n  min-width: 0;\n`\n\nconst TraitType = styled.div`\n  color: ${({ theme }) => theme.textSecondary};\n  font-weight: 600;\n  font-size: 10px;\n  line-height: 12px;\n  white-space: nowrap;\n  width: 100%;\n`\n\nconst TraitValue = styled.div`\n  color: ${({ theme }) => theme.textPrimary};\n  font-size: 16px;\n  line-height: 24px;\n  margin-top: 4px;\n  display: inline-block;\n\n  display: inline-block;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  max-width: 100%;\n`\n\nconst GridItem = ({ trait, collectionAddress }: { trait: Trait; collectionAddress: string }) => {\n  const { trait_type, trait_value } = trait\n  const params = qs.stringify(\n    { traits: [`(\"${trait_type}\",\"${trait_value}\")`] },\n    {\n      arrayFormat: 'comma',\n    }\n  )\n\n  return (\n    <GridItemContainer to={`/nfts/collection/${collectionAddress}?${params}`}>\n      <TraitType>{trait_type}</TraitType>\n      <TraitValue>{trait_value}</TraitValue>\n    </GridItemContainer>\n  )\n}\n\nconst TraitsContainer = ({ asset }: { asset: GenieAsset }) => {\n  const traits = useMemo(() => asset.traits?.sort((a, b) => a.trait_type.localeCompare(b.trait_type)), [asset])\n\n  return (\n    <Grid>\n      {traits?.map((trait) => {\n        return <GridItem key={trait.trait_type} trait={trait} collectionAddress={asset.address} />\n      })}\n    </Grid>\n  )\n}\n\nexport default TraitsContainer\n"],"mappings":";;;AAAA,SAASA,iBAAiB,QAAQ,mBAAmB;AAErD,OAAOC,EAAE,MAAM,cAAc;AAC7B,SAASC,OAAO,QAAQ,OAAO;AAC/B,SAASC,IAAI,QAAQ,kBAAkB;AAAA;AAGvC,MAAMC,IAAI,GAAGC,OAAM,CAACC,GAAG;EAAA;EAAA;AAAA,yMAatB;AAED,MAAMC,iBAAiB,GAAGF,OAAM,CAACF,IAAI,CAAC;EAAA;EAAA;AAAA,oHAChB;EAAA,IAAC;IAAEK;EAAM,CAAC;EAAA,OAAKA,KAAK,CAACC,qBAAqB;AAAA,GAM5DT,iBAAiB,CAEpB;AAED,MAAMU,SAAS,GAAGL,OAAM,CAACC,GAAG;EAAA;EAAA;AAAA,kGACjB;EAAA,IAAC;IAAEE;EAAM,CAAC;EAAA,OAAKA,KAAK,CAACG,aAAa;AAAA,EAM5C;AAED,MAAMC,UAAU,GAAGP,OAAM,CAACC,GAAG;EAAA;EAAA;AAAA,sLAClB;EAAA,IAAC;IAAEE;EAAM,CAAC;EAAA,OAAKA,KAAK,CAACK,WAAW;AAAA,EAW1C;AAED,MAAMC,QAAQ,GAAG,SAA+E;EAAA,IAA9E;IAAEC,KAAK;IAAEC;EAA+D,CAAC;EACzF,MAAM;IAAEC,UAAU;IAAEC;EAAY,CAAC,GAAGH,KAAK;EACzC,MAAMI,MAAM,GAAGlB,EAAE,CAACmB,SAAS,CACzB;IAAEC,MAAM,EAAE,CAAE,KAAIJ,UAAW,MAAKC,WAAY,IAAG;EAAE,CAAC,EAClD;IACEI,WAAW,EAAE;EACf,CAAC,CACF;EAED,oBACE,QAAC,iBAAiB;IAAC,EAAE,EAAG,oBAAmBN,iBAAkB,IAAGG,MAAO,EAAE;IAAA,wBACvE,QAAC,SAAS;MAAA,UAAEF;IAAU;MAAA;MAAA;MAAA;IAAA,QAAa,eACnC,QAAC,UAAU;MAAA,UAAEC;IAAW;MAAA;MAAA;MAAA;IAAA,QAAc;EAAA;IAAA;IAAA;IAAA;EAAA,QACpB;AAExB,CAAC;AAAA,KAfKJ,QAAQ;AAiBd,MAAMS,eAAe,GAAG,SAAsC;EAAA;EAAA,IAArC;IAAEC;EAA6B,CAAC;EACvD,MAAMH,MAAM,GAAGnB,OAAO,CAAC;IAAA;IAAA,wBAAMsB,KAAK,CAACH,MAAM,kDAAZ,cAAcI,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACT,UAAU,CAACW,aAAa,CAACD,CAAC,CAACV,UAAU,CAAC,CAAC;EAAA,GAAE,CAACO,KAAK,CAAC,CAAC;EAE7G,oBACE,QAAC,IAAI;IAAA,UACFH,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEQ,GAAG,CAAEd,KAAK,IAAK;MACtB,oBAAO,QAAC,QAAQ;QAAwB,KAAK,EAAEA,KAAM;QAAC,iBAAiB,EAAES,KAAK,CAACM;MAAQ,GAAjEf,KAAK,CAACE,UAAU;QAAA;QAAA;QAAA;MAAA,QAAoD;IAC5F,CAAC;EAAC;IAAA;IAAA;IAAA;EAAA,QACG;AAEX,CAAC;AAAA,GAVKM,eAAe;AAAA,MAAfA,eAAe;AAYrB,eAAeA,eAAe;AAAA;AAAA;AAAA"},"metadata":{},"sourceType":"module"}