{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar histogram_1 = __importDefault(require(\"@vibrant/image/lib/histogram\"));\nvar SIGBITS = 5;\nvar RSHIFT = 8 - SIGBITS;\nvar VBox = /** @class */function () {\n  function VBox(r1, r2, g1, g2, b1, b2, histogram) {\n    this.histogram = histogram;\n    this._volume = -1;\n    this._count = -1;\n    // NOTE: dimension will be mutated by split operation.\n    //       It must be specified explicitly, not from histogram\n    this.dimension = {\n      r1: r1,\n      r2: r2,\n      g1: g1,\n      g2: g2,\n      b1: b1,\n      b2: b2\n    };\n  }\n  VBox.build = function (pixels) {\n    var h = new histogram_1.default(pixels, {\n      sigBits: SIGBITS\n    });\n    var rmin = h.rmin,\n      rmax = h.rmax,\n      gmin = h.gmin,\n      gmax = h.gmax,\n      bmin = h.bmin,\n      bmax = h.bmax;\n    return new VBox(rmin, rmax, gmin, gmax, bmin, bmax, h);\n  };\n  VBox.prototype.invalidate = function () {\n    this._volume = this._count = -1;\n    this._avg = null;\n  };\n  VBox.prototype.volume = function () {\n    if (this._volume < 0) {\n      var _a = this.dimension,\n        r1 = _a.r1,\n        r2 = _a.r2,\n        g1 = _a.g1,\n        g2 = _a.g2,\n        b1 = _a.b1,\n        b2 = _a.b2;\n      this._volume = (r2 - r1 + 1) * (g2 - g1 + 1) * (b2 - b1 + 1);\n    }\n    return this._volume;\n  };\n  VBox.prototype.count = function () {\n    if (this._count < 0) {\n      var _a = this.histogram,\n        hist = _a.hist,\n        getColorIndex = _a.getColorIndex;\n      var _b = this.dimension,\n        r1 = _b.r1,\n        r2 = _b.r2,\n        g1 = _b.g1,\n        g2 = _b.g2,\n        b1 = _b.b1,\n        b2 = _b.b2;\n      var c = 0;\n      for (var r = r1; r <= r2; r++) {\n        for (var g = g1; g <= g2; g++) {\n          for (var b = b1; b <= b2; b++) {\n            var index = getColorIndex(r, g, b);\n            c += hist[index];\n          }\n        }\n      }\n      this._count = c;\n    }\n    return this._count;\n  };\n  VBox.prototype.clone = function () {\n    var histogram = this.histogram;\n    var _a = this.dimension,\n      r1 = _a.r1,\n      r2 = _a.r2,\n      g1 = _a.g1,\n      g2 = _a.g2,\n      b1 = _a.b1,\n      b2 = _a.b2;\n    return new VBox(r1, r2, g1, g2, b1, b2, histogram);\n  };\n  VBox.prototype.avg = function () {\n    if (!this._avg) {\n      var _a = this.histogram,\n        hist = _a.hist,\n        getColorIndex = _a.getColorIndex;\n      var _b = this.dimension,\n        r1 = _b.r1,\n        r2 = _b.r2,\n        g1 = _b.g1,\n        g2 = _b.g2,\n        b1 = _b.b1,\n        b2 = _b.b2;\n      var ntot = 0;\n      var mult = 1 << 8 - SIGBITS;\n      var rsum = void 0;\n      var gsum = void 0;\n      var bsum = void 0;\n      rsum = gsum = bsum = 0;\n      for (var r = r1; r <= r2; r++) {\n        for (var g = g1; g <= g2; g++) {\n          for (var b = b1; b <= b2; b++) {\n            var index = getColorIndex(r, g, b);\n            var h = hist[index];\n            ntot += h;\n            rsum += h * (r + 0.5) * mult;\n            gsum += h * (g + 0.5) * mult;\n            bsum += h * (b + 0.5) * mult;\n          }\n        }\n      }\n      if (ntot) {\n        this._avg = [~~(rsum / ntot), ~~(gsum / ntot), ~~(bsum / ntot)];\n      } else {\n        this._avg = [~~(mult * (r1 + r2 + 1) / 2), ~~(mult * (g1 + g2 + 1) / 2), ~~(mult * (b1 + b2 + 1) / 2)];\n      }\n    }\n    return this._avg;\n  };\n  VBox.prototype.contains = function (rgb) {\n    var r = rgb[0],\n      g = rgb[1],\n      b = rgb[2];\n    var _a = this.dimension,\n      r1 = _a.r1,\n      r2 = _a.r2,\n      g1 = _a.g1,\n      g2 = _a.g2,\n      b1 = _a.b1,\n      b2 = _a.b2;\n    r >>= RSHIFT;\n    g >>= RSHIFT;\n    b >>= RSHIFT;\n    return r >= r1 && r <= r2 && g >= g1 && g <= g2 && b >= b1 && b <= b2;\n  };\n  VBox.prototype.split = function () {\n    var _a = this.histogram,\n      hist = _a.hist,\n      getColorIndex = _a.getColorIndex;\n    var _b = this.dimension,\n      r1 = _b.r1,\n      r2 = _b.r2,\n      g1 = _b.g1,\n      g2 = _b.g2,\n      b1 = _b.b1,\n      b2 = _b.b2;\n    var count = this.count();\n    if (!count) return [];\n    if (count === 1) return [this.clone()];\n    var rw = r2 - r1 + 1;\n    var gw = g2 - g1 + 1;\n    var bw = b2 - b1 + 1;\n    var maxw = Math.max(rw, gw, bw);\n    var accSum = null;\n    var sum;\n    var total;\n    sum = total = 0;\n    var maxd = null;\n    if (maxw === rw) {\n      maxd = 'r';\n      accSum = new Uint32Array(r2 + 1);\n      for (var r = r1; r <= r2; r++) {\n        sum = 0;\n        for (var g = g1; g <= g2; g++) {\n          for (var b = b1; b <= b2; b++) {\n            var index = getColorIndex(r, g, b);\n            sum += hist[index];\n          }\n        }\n        total += sum;\n        accSum[r] = total;\n      }\n    } else if (maxw === gw) {\n      maxd = 'g';\n      accSum = new Uint32Array(g2 + 1);\n      for (var g = g1; g <= g2; g++) {\n        sum = 0;\n        for (var r = r1; r <= r2; r++) {\n          for (var b = b1; b <= b2; b++) {\n            var index = getColorIndex(r, g, b);\n            sum += hist[index];\n          }\n        }\n        total += sum;\n        accSum[g] = total;\n      }\n    } else {\n      maxd = 'b';\n      accSum = new Uint32Array(b2 + 1);\n      for (var b = b1; b <= b2; b++) {\n        sum = 0;\n        for (var r = r1; r <= r2; r++) {\n          for (var g = g1; g <= g2; g++) {\n            var index = getColorIndex(r, g, b);\n            sum += hist[index];\n          }\n        }\n        total += sum;\n        accSum[b] = total;\n      }\n    }\n    var splitPoint = -1;\n    var reverseSum = new Uint32Array(accSum.length);\n    for (var i = 0; i < accSum.length; i++) {\n      var d = accSum[i];\n      if (splitPoint < 0 && d > total / 2) splitPoint = i;\n      reverseSum[i] = total - d;\n    }\n    var vbox = this;\n    function doCut(d) {\n      var dim1 = d + '1';\n      var dim2 = d + '2';\n      var d1 = vbox.dimension[dim1];\n      var d2 = vbox.dimension[dim2];\n      var vbox1 = vbox.clone();\n      var vbox2 = vbox.clone();\n      var left = splitPoint - d1;\n      var right = d2 - splitPoint;\n      if (left <= right) {\n        d2 = Math.min(d2 - 1, ~~(splitPoint + right / 2));\n        d2 = Math.max(0, d2);\n      } else {\n        d2 = Math.max(d1, ~~(splitPoint - 1 - left / 2));\n        d2 = Math.min(vbox.dimension[dim2], d2);\n      }\n      while (!accSum[d2]) d2++;\n      var c2 = reverseSum[d2];\n      while (!c2 && accSum[d2 - 1]) c2 = reverseSum[--d2];\n      vbox1.dimension[dim2] = d2;\n      vbox2.dimension[dim1] = d2 + 1;\n      return [vbox1, vbox2];\n    }\n    return doCut(maxd);\n  };\n  return VBox;\n}();\nexports.default = VBox;","map":{"version":3,"sources":["../../../../packages/vibrant-quantizer-mmcq/src/vbox.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar histogram_1 = __importDefault(require(\"@vibrant/image/lib/histogram\"));\nvar SIGBITS = 5;\nvar RSHIFT = 8 - SIGBITS;\nvar VBox = /** @class */ (function () {\n    function VBox(r1, r2, g1, g2, b1, b2, histogram) {\n        this.histogram = histogram;\n        this._volume = -1;\n        this._count = -1;\n        // NOTE: dimension will be mutated by split operation.\n        //       It must be specified explicitly, not from histogram\n        this.dimension = { r1: r1, r2: r2, g1: g1, g2: g2, b1: b1, b2: b2 };\n    }\n    VBox.build = function (pixels) {\n        var h = new histogram_1.default(pixels, { sigBits: SIGBITS });\n        var rmin = h.rmin, rmax = h.rmax, gmin = h.gmin, gmax = h.gmax, bmin = h.bmin, bmax = h.bmax;\n        return new VBox(rmin, rmax, gmin, gmax, bmin, bmax, h);\n    };\n    VBox.prototype.invalidate = function () {\n        this._volume = this._count = -1;\n        this._avg = null;\n    };\n    VBox.prototype.volume = function () {\n        if (this._volume < 0) {\n            var _a = this.dimension, r1 = _a.r1, r2 = _a.r2, g1 = _a.g1, g2 = _a.g2, b1 = _a.b1, b2 = _a.b2;\n            this._volume = (r2 - r1 + 1) * (g2 - g1 + 1) * (b2 - b1 + 1);\n        }\n        return this._volume;\n    };\n    VBox.prototype.count = function () {\n        if (this._count < 0) {\n            var _a = this.histogram, hist = _a.hist, getColorIndex = _a.getColorIndex;\n            var _b = this.dimension, r1 = _b.r1, r2 = _b.r2, g1 = _b.g1, g2 = _b.g2, b1 = _b.b1, b2 = _b.b2;\n            var c = 0;\n            for (var r = r1; r <= r2; r++) {\n                for (var g = g1; g <= g2; g++) {\n                    for (var b = b1; b <= b2; b++) {\n                        var index = getColorIndex(r, g, b);\n                        c += hist[index];\n                    }\n                }\n            }\n            this._count = c;\n        }\n        return this._count;\n    };\n    VBox.prototype.clone = function () {\n        var histogram = this.histogram;\n        var _a = this.dimension, r1 = _a.r1, r2 = _a.r2, g1 = _a.g1, g2 = _a.g2, b1 = _a.b1, b2 = _a.b2;\n        return new VBox(r1, r2, g1, g2, b1, b2, histogram);\n    };\n    VBox.prototype.avg = function () {\n        if (!this._avg) {\n            var _a = this.histogram, hist = _a.hist, getColorIndex = _a.getColorIndex;\n            var _b = this.dimension, r1 = _b.r1, r2 = _b.r2, g1 = _b.g1, g2 = _b.g2, b1 = _b.b1, b2 = _b.b2;\n            var ntot = 0;\n            var mult = 1 << (8 - SIGBITS);\n            var rsum = void 0;\n            var gsum = void 0;\n            var bsum = void 0;\n            rsum = gsum = bsum = 0;\n            for (var r = r1; r <= r2; r++) {\n                for (var g = g1; g <= g2; g++) {\n                    for (var b = b1; b <= b2; b++) {\n                        var index = getColorIndex(r, g, b);\n                        var h = hist[index];\n                        ntot += h;\n                        rsum += (h * (r + 0.5) * mult);\n                        gsum += (h * (g + 0.5) * mult);\n                        bsum += (h * (b + 0.5) * mult);\n                    }\n                }\n            }\n            if (ntot) {\n                this._avg = [\n                    ~~(rsum / ntot),\n                    ~~(gsum / ntot),\n                    ~~(bsum / ntot)\n                ];\n            }\n            else {\n                this._avg = [\n                    ~~(mult * (r1 + r2 + 1) / 2),\n                    ~~(mult * (g1 + g2 + 1) / 2),\n                    ~~(mult * (b1 + b2 + 1) / 2)\n                ];\n            }\n        }\n        return this._avg;\n    };\n    VBox.prototype.contains = function (rgb) {\n        var r = rgb[0], g = rgb[1], b = rgb[2];\n        var _a = this.dimension, r1 = _a.r1, r2 = _a.r2, g1 = _a.g1, g2 = _a.g2, b1 = _a.b1, b2 = _a.b2;\n        r >>= RSHIFT;\n        g >>= RSHIFT;\n        b >>= RSHIFT;\n        return r >= r1 && r <= r2\n            && g >= g1 && g <= g2\n            && b >= b1 && b <= b2;\n    };\n    VBox.prototype.split = function () {\n        var _a = this.histogram, hist = _a.hist, getColorIndex = _a.getColorIndex;\n        var _b = this.dimension, r1 = _b.r1, r2 = _b.r2, g1 = _b.g1, g2 = _b.g2, b1 = _b.b1, b2 = _b.b2;\n        var count = this.count();\n        if (!count)\n            return [];\n        if (count === 1)\n            return [this.clone()];\n        var rw = r2 - r1 + 1;\n        var gw = g2 - g1 + 1;\n        var bw = b2 - b1 + 1;\n        var maxw = Math.max(rw, gw, bw);\n        var accSum = null;\n        var sum;\n        var total;\n        sum = total = 0;\n        var maxd = null;\n        if (maxw === rw) {\n            maxd = 'r';\n            accSum = new Uint32Array(r2 + 1);\n            for (var r = r1; r <= r2; r++) {\n                sum = 0;\n                for (var g = g1; g <= g2; g++) {\n                    for (var b = b1; b <= b2; b++) {\n                        var index = getColorIndex(r, g, b);\n                        sum += hist[index];\n                    }\n                }\n                total += sum;\n                accSum[r] = total;\n            }\n        }\n        else if (maxw === gw) {\n            maxd = 'g';\n            accSum = new Uint32Array(g2 + 1);\n            for (var g = g1; g <= g2; g++) {\n                sum = 0;\n                for (var r = r1; r <= r2; r++) {\n                    for (var b = b1; b <= b2; b++) {\n                        var index = getColorIndex(r, g, b);\n                        sum += hist[index];\n                    }\n                }\n                total += sum;\n                accSum[g] = total;\n            }\n        }\n        else {\n            maxd = 'b';\n            accSum = new Uint32Array(b2 + 1);\n            for (var b = b1; b <= b2; b++) {\n                sum = 0;\n                for (var r = r1; r <= r2; r++) {\n                    for (var g = g1; g <= g2; g++) {\n                        var index = getColorIndex(r, g, b);\n                        sum += hist[index];\n                    }\n                }\n                total += sum;\n                accSum[b] = total;\n            }\n        }\n        var splitPoint = -1;\n        var reverseSum = new Uint32Array(accSum.length);\n        for (var i = 0; i < accSum.length; i++) {\n            var d = accSum[i];\n            if (splitPoint < 0 && d > total / 2)\n                splitPoint = i;\n            reverseSum[i] = total - d;\n        }\n        var vbox = this;\n        function doCut(d) {\n            var dim1 = d + '1';\n            var dim2 = d + '2';\n            var d1 = vbox.dimension[dim1];\n            var d2 = vbox.dimension[dim2];\n            var vbox1 = vbox.clone();\n            var vbox2 = vbox.clone();\n            var left = splitPoint - d1;\n            var right = d2 - splitPoint;\n            if (left <= right) {\n                d2 = Math.min(d2 - 1, ~~(splitPoint + right / 2));\n                d2 = Math.max(0, d2);\n            }\n            else {\n                d2 = Math.max(d1, ~~(splitPoint - 1 - left / 2));\n                d2 = Math.min(vbox.dimension[dim2], d2);\n            }\n            while (!accSum[d2])\n                d2++;\n            var c2 = reverseSum[d2];\n            while (!c2 && accSum[d2 - 1])\n                c2 = reverseSum[--d2];\n            vbox1.dimension[dim2] = d2;\n            vbox2.dimension[dim1] = d2 + 1;\n            return [vbox1, vbox2];\n        }\n        return doCut(maxd);\n    };\n    return VBox;\n}());\nexports.default = VBox;\n//# sourceMappingURL=vbox.js.map"]},"metadata":{},"sourceType":"script"}