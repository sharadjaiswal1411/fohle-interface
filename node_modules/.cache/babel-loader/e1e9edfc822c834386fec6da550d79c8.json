{"ast":null,"code":"import { currentTimestamp } from './../../utils/index';\nimport { updatePoolData, addPoolKeys, updatePoolChartData, updatePoolTransactions, updateTickData } from './actions';\nimport { createReducer } from '@reduxjs/toolkit';\nimport { SupportedNetwork } from 'constants/networks';\nexport const initialState = {\n  byAddress: {\n    [SupportedNetwork.ETHEREUM]: {},\n    [SupportedNetwork.ARBITRUM]: {},\n    [SupportedNetwork.OPTIMISM]: {},\n    [SupportedNetwork.POLYGON]: {},\n    [SupportedNetwork.CELO]: {}\n  }\n};\nexport default createReducer(initialState, builder => builder.addCase(updatePoolData, (state, _ref) => {\n  let {\n    payload: {\n      pools,\n      networkId\n    }\n  } = _ref;\n  console.log(\"poolspoolspools\", pools);\n  pools.map(poolData => state.byAddress[networkId][poolData.address] = {\n    ...state.byAddress[networkId][poolData.address],\n    data: poolData,\n    lastUpdated: currentTimestamp()\n  });\n})\n// add address to byAddress keys if not included yet\n.addCase(addPoolKeys, (state, _ref2) => {\n  let {\n    payload: {\n      poolAddresses,\n      networkId\n    }\n  } = _ref2;\n  console.log(\"poolspoolspools1\", pools);\n  poolAddresses.map(address => {\n    if (!state.byAddress[networkId][address]) {\n      state.byAddress[networkId][address] = {\n        data: undefined,\n        chartData: undefined,\n        transactions: undefined,\n        lastUpdated: undefined,\n        tickData: undefined\n      };\n    }\n  });\n}).addCase(updatePoolChartData, (state, _ref3) => {\n  let {\n    payload: {\n      poolAddress,\n      chartData,\n      networkId\n    }\n  } = _ref3;\n  state.byAddress[networkId][poolAddress] = {\n    ...state.byAddress[networkId][poolAddress],\n    chartData: chartData\n  };\n}).addCase(updatePoolTransactions, (state, _ref4) => {\n  let {\n    payload: {\n      poolAddress,\n      transactions,\n      networkId\n    }\n  } = _ref4;\n  state.byAddress[networkId][poolAddress] = {\n    ...state.byAddress[networkId][poolAddress],\n    transactions\n  };\n}).addCase(updateTickData, (state, _ref5) => {\n  let {\n    payload: {\n      poolAddress,\n      tickData,\n      networkId\n    }\n  } = _ref5;\n  state.byAddress[networkId][poolAddress] = {\n    ...state.byAddress[networkId][poolAddress],\n    tickData\n  };\n}));","map":{"version":3,"names":["currentTimestamp","updatePoolData","addPoolKeys","updatePoolChartData","updatePoolTransactions","updateTickData","createReducer","SupportedNetwork","initialState","byAddress","ETHEREUM","ARBITRUM","OPTIMISM","POLYGON","CELO","builder","addCase","state","payload","pools","networkId","console","log","map","poolData","address","data","lastUpdated","poolAddresses","undefined","chartData","transactions","tickData","poolAddress"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/state/pools/reducer.ts"],"sourcesContent":["import { currentTimestamp } from './../../utils/index'\nimport { updatePoolData, addPoolKeys, updatePoolChartData, updatePoolTransactions, updateTickData } from './actions'\nimport { createReducer } from '@reduxjs/toolkit'\nimport { SerializedToken } from 'state/user/actions'\nimport { Transaction } from 'types'\nimport { PoolTickData } from 'data/pools/tickData'\nimport { SupportedNetwork } from 'constants/networks'\n\nexport interface Pool {\n  address: string\n  token0: SerializedToken\n  token1: SerializedToken\n}\n\nexport interface PoolData {\n  // basic token info\n  address: string\n  feeTier: number\n\n  token0: {\n    name: string\n    symbol: string\n    address: string\n    decimals: number\n    derivedETH: number\n  }\n\n  token1: {\n    name: string\n    symbol: string\n    address: string\n    decimals: number\n    derivedETH: number\n  }\n\n  // for tick math\n  liquidity: number\n  sqrtPrice: number\n  tick: number\n\n  // volume\n  volumeUSD: number\n  volumeUSDChange: number\n  volumeUSDWeek: number\n\n  // liquidity\n  tvlUSD: number\n  tvlUSDChange: number\n\n  // prices\n  token0Price: number\n  token1Price: number\n\n  // token amounts\n  tvlToken0: number\n  tvlToken1: number\n}\n\nexport type PoolChartEntry = {\n  date: number\n  volumeUSD: number\n  totalValueLockedUSD: number\n  feesUSD: number\n}\n\nexport interface PoolsState {\n  // analytics data from\n  byAddress: {\n    [networkId: string]: {\n      [address: string]: {\n        data: PoolData | undefined\n        chartData: PoolChartEntry[] | undefined\n        transactions: Transaction[] | undefined\n        lastUpdated: number | undefined\n        tickData: PoolTickData | undefined\n      }\n    }\n  }\n}\n\nexport const initialState: PoolsState = {\n  byAddress: {\n    [SupportedNetwork.ETHEREUM]: {},\n    [SupportedNetwork.ARBITRUM]: {},\n    [SupportedNetwork.OPTIMISM]: {},\n    [SupportedNetwork.POLYGON]: {},\n    [SupportedNetwork.CELO]: {},\n  },\n}\n\nexport default createReducer(initialState, (builder) =>\n  builder\n    .addCase(updatePoolData, (state, { payload: { pools, networkId } }) => {\n      console.log(\"poolspoolspools\",pools);\n      pools.map(\n        (poolData) =>\n          (state.byAddress[networkId][poolData.address] = {\n            ...state.byAddress[networkId][poolData.address],\n            data: poolData,\n            lastUpdated: currentTimestamp(),\n          })\n      )\n    })\n    // add address to byAddress keys if not included yet\n    .addCase(addPoolKeys, (state, { payload: { poolAddresses, networkId } }) => {\n      console.log(\"poolspoolspools1\",pools);\n      poolAddresses.map((address) => {\n        if (!state.byAddress[networkId][address]) {\n          state.byAddress[networkId][address] = {\n            data: undefined,\n            chartData: undefined,\n            transactions: undefined,\n            lastUpdated: undefined,\n            tickData: undefined,\n          }\n        }\n      })\n    })\n    .addCase(updatePoolChartData, (state, { payload: { poolAddress, chartData, networkId } }) => {\n      state.byAddress[networkId][poolAddress] = { ...state.byAddress[networkId][poolAddress], chartData: chartData }\n    })\n    .addCase(updatePoolTransactions, (state, { payload: { poolAddress, transactions, networkId } }) => {\n      state.byAddress[networkId][poolAddress] = { ...state.byAddress[networkId][poolAddress], transactions }\n    })\n    .addCase(updateTickData, (state, { payload: { poolAddress, tickData, networkId } }) => {\n      state.byAddress[networkId][poolAddress] = { ...state.byAddress[networkId][poolAddress], tickData }\n    })\n)"],"mappings":"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"},"metadata":{},"sourceType":"module"}