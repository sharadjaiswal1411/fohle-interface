{"ast":null,"code":"import { BigNumber } from '@ethersproject/bignumber';\nimport _ from 'lodash';\nimport { log } from '../util/log';\nimport { IGasPriceProvider } from './gas-price-provider';\n// We get the Xth percentile of priority fees for transactions successfully included in previous blocks.\nconst DEFAULT_PRIORITY_FEE_PERCENTILE = 50;\n// Infura docs say only past 4 blocks guaranteed to be available: https://infura.io/docs/ethereum#operation/eth_feeHistory\nconst DEFAULT_BLOCKS_TO_LOOK_BACK = 4;\n/**\n * Computes a gas estimate using on-chain data from the eth_feeHistory RPC endpoint.\n *\n * Takes the average priority fee from the past `blocksToConsider` blocks, and adds it\n * to the current base fee.\n *\n * @export\n * @class EIP1559GasPriceProvider\n */\nexport class EIP1559GasPriceProvider extends IGasPriceProvider {\n  constructor(provider) {\n    let priorityFeePercentile = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_PRIORITY_FEE_PERCENTILE;\n    let blocksToConsider = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_BLOCKS_TO_LOOK_BACK;\n    super();\n    this.provider = provider;\n    this.priorityFeePercentile = priorityFeePercentile;\n    this.blocksToConsider = blocksToConsider;\n  }\n  async getGasPrice() {\n    const feeHistoryRaw = await this.provider.send('eth_feeHistory', [\n    /**\n     * @fix Use BigNumber.from(this.blocksToConsider).toHexString() after hardhat adds support\n     * @see https://github.com/NomicFoundation/hardhat/issues/1585 .___.\n     */\n    BigNumber.from(this.blocksToConsider).toHexString().replace('0x0', '0x'), 'latest', [this.priorityFeePercentile]]);\n    const feeHistory = {\n      baseFeePerGas: _.map(feeHistoryRaw.baseFeePerGas, b => BigNumber.from(b)),\n      gasUsedRatio: feeHistoryRaw.gasUsedRatio,\n      oldestBlock: BigNumber.from(feeHistoryRaw.oldestBlock),\n      reward: _.map(feeHistoryRaw.reward, b => BigNumber.from(b[0]))\n    };\n    const nextBlockBaseFeePerGas = feeHistory.baseFeePerGas[feeHistory.baseFeePerGas.length - 1];\n    const averagePriorityFeePerGas = _.reduce(feeHistory.reward, (sum, cur) => sum.add(cur), BigNumber.from(0)).div(feeHistory.reward.length);\n    log.info({\n      feeHistory,\n      feeHistoryReadable: {\n        baseFeePerGas: _.map(feeHistory.baseFeePerGas, f => f.toString()),\n        oldestBlock: feeHistory.oldestBlock.toString(),\n        reward: _.map(feeHistory.reward, r => r.toString())\n      },\n      nextBlockBaseFeePerGas: nextBlockBaseFeePerGas.toString(),\n      averagePriorityFeePerGas: averagePriorityFeePerGas.toString()\n    }, 'Got fee history from provider and computed gas estimate');\n    const gasPriceWei = nextBlockBaseFeePerGas.add(averagePriorityFeePerGas);\n    const blockNumber = feeHistory.oldestBlock.add(this.blocksToConsider);\n    log.info(`Estimated gas price in wei: ${gasPriceWei} as of block ${blockNumber.toString()}`);\n    return {\n      gasPriceWei: gasPriceWei\n    };\n  }\n}","map":{"version":3,"sources":["../../../src/providers/eip-1559-gas-price-provider.ts"],"names":[],"mappings":"AAAA,SAAS,SAAS,QAAQ,0BAA0B;AAEpD,OAAO,CAAC,MAAM,QAAQ;AAEtB,SAAS,GAAG,QAAQ,aAAa;AAEjC,SAAmB,iBAAiB,QAAQ,sBAAsB;AAgBlE;AACA,MAAM,+BAA+B,GAAG,EAAE;AAC1C;AACA,MAAM,2BAA2B,GAAG,CAAC;AAErC;;;;;;;;AAQG;AACH,OAAM,MAAO,uBAAwB,SAAQ,iBAAiB,CAAA;EAC5D,WAAA,CACY,QAAyB,EAE2B;IAAA,IADtD,qBAAA,uEAAgC,+BAA+B;IAAA,IAC/D,gBAAA,uEAA2B,2BAA2B;IAE9D,KAAK,EAAE;IAJG,IAAA,CAAA,QAAQ,GAAR,QAAQ;IACV,IAAA,CAAA,qBAAqB,GAArB,qBAAqB;IACrB,IAAA,CAAA,gBAAgB,GAAhB,gBAAgB;EAG1B;EAEO,MAAM,WAAW,GAAA;IACtB,MAAM,aAAa,GAAI,MAAM,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,gBAAgB,EAAE;IAChE;;;AAGG;IACH,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,EACxE,QAAQ,EACR,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAC7B,CAA2B;IAE5B,MAAM,UAAU,GAAuB;MACrC,aAAa,EAAE,CAAC,CAAC,GAAG,CAAC,aAAa,CAAC,aAAa,EAAG,CAAC,IAClD,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAClB;MACD,YAAY,EAAE,aAAa,CAAC,YAAY;MACxC,WAAW,EAAE,SAAS,CAAC,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC;MACtD,MAAM,EAAE,CAAC,CAAC,GAAG,CAAC,aAAa,CAAC,MAAM,EAAG,CAAC,IAAK,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;KAChE;IAED,MAAM,sBAAsB,GAC1B,UAAU,CAAC,aAAa,CAAC,UAAU,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,CAAE;IAEhE,MAAM,wBAAwB,GAAG,CAAC,CAAC,MAAM,CACvC,UAAU,CAAC,MAAM,EACjB,CAAC,GAAc,EAAE,GAAc,KAAK,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAChD,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAClB,CAAC,GAAG,CAAC,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC;IAE/B,GAAG,CAAC,IAAI,CACN;MACE,UAAU;MACV,kBAAkB,EAAE;QAClB,aAAa,EAAE,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,aAAa,EAAG,CAAC,IAAK,CAAC,CAAC,QAAQ,EAAE,CAAC;QACnE,WAAW,EAAE,UAAU,CAAC,WAAW,CAAC,QAAQ,EAAE;QAC9C,MAAM,EAAE,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,MAAM,EAAG,CAAC,IAAK,CAAC,CAAC,QAAQ,EAAE;OACrD;MACD,sBAAsB,EAAE,sBAAsB,CAAC,QAAQ,EAAE;MACzD,wBAAwB,EAAE,wBAAwB,CAAC,QAAQ;KAC5D,EACD,yDAAyD,CAC1D;IAED,MAAM,WAAW,GAAG,sBAAsB,CAAC,GAAG,CAAC,wBAAwB,CAAC;IAExE,MAAM,WAAW,GAAG,UAAU,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,gBAAgB,CAAC;IAErE,GAAG,CAAC,IAAI,CACN,+BAA+B,WAAW,gBAAgB,WAAW,CAAC,QAAQ,EAAE,EAAE,CACnF;IAED,OAAO;MAAE,WAAW,EAAE;IAAW,CAAE;EACrC;AACD","sourceRoot":"","sourcesContent":["import { BigNumber } from '@ethersproject/bignumber';\nimport _ from 'lodash';\nimport { log } from '../util/log';\nimport { IGasPriceProvider } from './gas-price-provider';\n// We get the Xth percentile of priority fees for transactions successfully included in previous blocks.\nconst DEFAULT_PRIORITY_FEE_PERCENTILE = 50;\n// Infura docs say only past 4 blocks guaranteed to be available: https://infura.io/docs/ethereum#operation/eth_feeHistory\nconst DEFAULT_BLOCKS_TO_LOOK_BACK = 4;\n/**\n * Computes a gas estimate using on-chain data from the eth_feeHistory RPC endpoint.\n *\n * Takes the average priority fee from the past `blocksToConsider` blocks, and adds it\n * to the current base fee.\n *\n * @export\n * @class EIP1559GasPriceProvider\n */\nexport class EIP1559GasPriceProvider extends IGasPriceProvider {\n    constructor(provider, priorityFeePercentile = DEFAULT_PRIORITY_FEE_PERCENTILE, blocksToConsider = DEFAULT_BLOCKS_TO_LOOK_BACK) {\n        super();\n        this.provider = provider;\n        this.priorityFeePercentile = priorityFeePercentile;\n        this.blocksToConsider = blocksToConsider;\n    }\n    async getGasPrice() {\n        const feeHistoryRaw = (await this.provider.send('eth_feeHistory', [\n            /**\n             * @fix Use BigNumber.from(this.blocksToConsider).toHexString() after hardhat adds support\n             * @see https://github.com/NomicFoundation/hardhat/issues/1585 .___.\n             */\n            BigNumber.from(this.blocksToConsider).toHexString().replace('0x0', '0x'),\n            'latest',\n            [this.priorityFeePercentile],\n        ]));\n        const feeHistory = {\n            baseFeePerGas: _.map(feeHistoryRaw.baseFeePerGas, (b) => BigNumber.from(b)),\n            gasUsedRatio: feeHistoryRaw.gasUsedRatio,\n            oldestBlock: BigNumber.from(feeHistoryRaw.oldestBlock),\n            reward: _.map(feeHistoryRaw.reward, (b) => BigNumber.from(b[0])),\n        };\n        const nextBlockBaseFeePerGas = feeHistory.baseFeePerGas[feeHistory.baseFeePerGas.length - 1];\n        const averagePriorityFeePerGas = _.reduce(feeHistory.reward, (sum, cur) => sum.add(cur), BigNumber.from(0)).div(feeHistory.reward.length);\n        log.info({\n            feeHistory,\n            feeHistoryReadable: {\n                baseFeePerGas: _.map(feeHistory.baseFeePerGas, (f) => f.toString()),\n                oldestBlock: feeHistory.oldestBlock.toString(),\n                reward: _.map(feeHistory.reward, (r) => r.toString()),\n            },\n            nextBlockBaseFeePerGas: nextBlockBaseFeePerGas.toString(),\n            averagePriorityFeePerGas: averagePriorityFeePerGas.toString(),\n        }, 'Got fee history from provider and computed gas estimate');\n        const gasPriceWei = nextBlockBaseFeePerGas.add(averagePriorityFeePerGas);\n        const blockNumber = feeHistory.oldestBlock.add(this.blocksToConsider);\n        log.info(`Estimated gas price in wei: ${gasPriceWei} as of block ${blockNumber.toString()}`);\n        return { gasPriceWei: gasPriceWei };\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWlwLTE1NTktZ2FzLXByaWNlLXByb3ZpZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3Byb3ZpZGVycy9laXAtMTU1OS1nYXMtcHJpY2UtcHJvdmlkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBRXJELE9BQU8sQ0FBQyxNQUFNLFFBQVEsQ0FBQztBQUV2QixPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBRWxDLE9BQU8sRUFBWSxpQkFBaUIsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBZ0JuRSx3R0FBd0c7QUFDeEcsTUFBTSwrQkFBK0IsR0FBRyxFQUFFLENBQUM7QUFDM0MsMEhBQTBIO0FBQzFILE1BQU0sMkJBQTJCLEdBQUcsQ0FBQyxDQUFDO0FBRXRDOzs7Ozs7OztHQVFHO0FBQ0gsTUFBTSxPQUFPLHVCQUF3QixTQUFRLGlCQUFpQjtJQUM1RCxZQUNZLFFBQXlCLEVBQzNCLHdCQUFnQywrQkFBK0IsRUFDL0QsbUJBQTJCLDJCQUEyQjtRQUU5RCxLQUFLLEVBQUUsQ0FBQztRQUpFLGFBQVEsR0FBUixRQUFRLENBQWlCO1FBQzNCLDBCQUFxQixHQUFyQixxQkFBcUIsQ0FBMEM7UUFDL0QscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFzQztJQUdoRSxDQUFDO0lBRU0sS0FBSyxDQUFDLFdBQVc7UUFDdEIsTUFBTSxhQUFhLEdBQUcsQ0FBQyxNQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFO1lBQ2hFOzs7ZUFHRztZQUNILFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUMsV0FBVyxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUM7WUFDeEUsUUFBUTtZQUNSLENBQUMsSUFBSSxDQUFDLHFCQUFxQixDQUFDO1NBQzdCLENBQUMsQ0FBMEIsQ0FBQztRQUU3QixNQUFNLFVBQVUsR0FBdUI7WUFDckMsYUFBYSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQ3RELFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQ2xCO1lBQ0QsWUFBWSxFQUFFLGFBQWEsQ0FBQyxZQUFZO1lBQ3hDLFdBQVcsRUFBRSxTQUFTLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUM7WUFDdEQsTUFBTSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNqRSxDQUFDO1FBRUYsTUFBTSxzQkFBc0IsR0FDMUIsVUFBVSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUUsQ0FBQztRQUVqRSxNQUFNLHdCQUF3QixHQUFHLENBQUMsQ0FBQyxNQUFNLENBQ3ZDLFVBQVUsQ0FBQyxNQUFNLEVBQ2pCLENBQUMsR0FBYyxFQUFFLEdBQWMsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFDaEQsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FDbEIsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUVoQyxHQUFHLENBQUMsSUFBSSxDQUNOO1lBQ0UsVUFBVTtZQUNWLGtCQUFrQixFQUFFO2dCQUNsQixhQUFhLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7Z0JBQ25FLFdBQVcsRUFBRSxVQUFVLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRTtnQkFDOUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO2FBQ3REO1lBQ0Qsc0JBQXNCLEVBQUUsc0JBQXNCLENBQUMsUUFBUSxFQUFFO1lBQ3pELHdCQUF3QixFQUFFLHdCQUF3QixDQUFDLFFBQVEsRUFBRTtTQUM5RCxFQUNELHlEQUF5RCxDQUMxRCxDQUFDO1FBRUYsTUFBTSxXQUFXLEdBQUcsc0JBQXNCLENBQUMsR0FBRyxDQUFDLHdCQUF3QixDQUFDLENBQUM7UUFFekUsTUFBTSxXQUFXLEdBQUcsVUFBVSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFFdEUsR0FBRyxDQUFDLElBQUksQ0FDTiwrQkFBK0IsV0FBVyxnQkFBZ0IsV0FBVyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQ25GLENBQUM7UUFFRixPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxDQUFDO0lBQ3RDLENBQUM7Q0FDRiJ9"]},"metadata":{},"sourceType":"module"}