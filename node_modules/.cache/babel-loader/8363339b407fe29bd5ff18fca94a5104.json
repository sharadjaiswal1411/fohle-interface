{"ast":null,"code":"import _regeneratorRuntime from\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _defineProperty from\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _asyncToGenerator from\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import gql from'graphql-tag';import{useEffect,useMemo,useState}from'react';import{useActiveNetworkVersion,useClients}from'state/application/hooks';import{splitQuery}from'utils/queries';var GET_BLOCKS=function GET_BLOCKS(timestamps){var queryString='query blocks {';queryString+=timestamps.map(function(timestamp){return\"t\".concat(timestamp,\":blocks(first: 1, orderBy: timestamp, orderDirection: desc, where: { timestamp_gt: \").concat(timestamp,\", timestamp_lt: \").concat(timestamp+600,\" }) {\\n        number\\n      }\");});queryString+='}';return gql(queryString);};/**\n * for a given array of timestamps, returns block entities\n * @param timestamps\n */export function useBlocksFromTimestamps(timestamps,blockClientOverride){var _useActiveNetworkVers=useActiveNetworkVersion(),_useActiveNetworkVers2=_slicedToArray(_useActiveNetworkVers,1),activeNetwork=_useActiveNetworkVers2[0];var _useState=useState(),_useState2=_slicedToArray(_useState,2),blocks=_useState2[0],setBlocks=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),error=_useState4[0],setError=_useState4[1];var _useClients=useClients(),blockClient=_useClients.blockClient;var activeBlockClient=blockClientOverride!==null&&blockClientOverride!==void 0?blockClientOverride:blockClient;// derive blocks based on active network\nvar networkBlocks=blocks===null||blocks===void 0?void 0:blocks[activeNetwork.id];useEffect(function(){function fetchData(){return _fetchData.apply(this,arguments);}function _fetchData(){_fetchData=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var results;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return splitQuery(GET_BLOCKS,activeBlockClient,[],timestamps);case 2:results=_context.sent;if(results){setBlocks(_objectSpread(_objectSpread({},blocks!==null&&blocks!==void 0?blocks:{}),{},_defineProperty({},activeNetwork.id,results)));}else{setError(true);}case 4:case\"end\":return _context.stop();}}},_callee);}));return _fetchData.apply(this,arguments);}if(!networkBlocks&&!error){fetchData();}});var blocksFormatted=useMemo(function(){if(blocks===null||blocks===void 0?void 0:blocks[activeNetwork.id]){var _networkBlocks=blocks===null||blocks===void 0?void 0:blocks[activeNetwork.id];var formatted=[];for(var t in _networkBlocks){if(_networkBlocks[t].length>0){formatted.push({timestamp:t.split('t')[1],number:_networkBlocks[t][0]['number']});}}return formatted;}return undefined;},[activeNetwork.id,blocks]);return{blocks:blocksFormatted,error:error};}","map":{"version":3,"names":["gql","useEffect","useMemo","useState","useActiveNetworkVersion","useClients","splitQuery","GET_BLOCKS","timestamps","queryString","map","timestamp","useBlocksFromTimestamps","blockClientOverride","activeNetwork","blocks","setBlocks","error","setError","blockClient","activeBlockClient","networkBlocks","id","fetchData","results","blocksFormatted","formatted","t","length","push","split","number","undefined"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/hooks/useBlocksFromTimestamps.ts"],"sourcesContent":["import { ApolloClient, NormalizedCacheObject } from '@apollo/client'\nimport gql from 'graphql-tag'\nimport { useEffect, useMemo, useState } from 'react'\nimport { useActiveNetworkVersion, useClients } from 'state/application/hooks'\nimport { splitQuery } from 'utils/queries'\n\nconst GET_BLOCKS = (timestamps: string[]) => {\n  let queryString = 'query blocks {'\n  queryString += timestamps.map((timestamp) => {\n    return `t${timestamp}:blocks(first: 1, orderBy: timestamp, orderDirection: desc, where: { timestamp_gt: ${timestamp}, timestamp_lt: ${\n      timestamp + 600\n    } }) {\n        number\n      }`\n  })\n  queryString += '}'\n  return gql(queryString)\n}\n\n/**\n * for a given array of timestamps, returns block entities\n * @param timestamps\n */\nexport function useBlocksFromTimestamps(\n  timestamps: number[],\n  blockClientOverride?: ApolloClient<NormalizedCacheObject>\n): {\n  blocks:\n    | {\n        timestamp: string\n        number: any\n      }[]\n    | undefined\n  error: boolean\n} {\n  const [activeNetwork] = useActiveNetworkVersion()\n  const [blocks, setBlocks] = useState<any>()\n  const [error, setError] = useState(false)\n\n  const { blockClient } = useClients()\n  const activeBlockClient = blockClientOverride ?? blockClient\n\n  // derive blocks based on active network\n  const networkBlocks = blocks?.[activeNetwork.id]\n\n  useEffect(() => {\n    async function fetchData() {\n      const results = await splitQuery(GET_BLOCKS, activeBlockClient, [], timestamps)\n      if (results) {\n        setBlocks({ ...(blocks ?? {}), [activeNetwork.id]: results })\n      } else {\n        setError(true)\n      }\n    }\n    if (!networkBlocks && !error) {\n      fetchData()\n    }\n  })\n\n  const blocksFormatted = useMemo(() => {\n    if (blocks?.[activeNetwork.id]) {\n      const networkBlocks = blocks?.[activeNetwork.id]\n      const formatted = []\n      for (const t in networkBlocks) {\n        if (networkBlocks[t].length > 0) {\n          formatted.push({\n            timestamp: t.split('t')[1],\n            number: networkBlocks[t][0]['number'],\n          })\n        }\n      }\n      return formatted\n    }\n    return undefined\n  }, [activeNetwork.id, blocks])\n\n  return {\n    blocks: blocksFormatted,\n    error,\n  }\n}\n"],"mappings":"01BACA,MAAOA,IAAG,KAAM,aAAa,CAC7B,OAASC,SAAS,CAAEC,OAAO,CAAEC,QAAQ,KAAQ,OAAO,CACpD,OAASC,uBAAuB,CAAEC,UAAU,KAAQ,yBAAyB,CAC7E,OAASC,UAAU,KAAQ,eAAe,CAE1C,GAAMC,WAAU,CAAG,QAAbA,WAAU,CAAIC,UAAoB,CAAK,CAC3C,GAAIC,YAAW,CAAG,gBAAgB,CAClCA,WAAW,EAAID,UAAU,CAACE,GAAG,CAAC,SAACC,SAAS,CAAK,CAC3C,iBAAWA,SAAS,+FAAsFA,SAAS,4BACjHA,SAAS,CAAG,GAAG,mCAInB,CAAC,CAAC,CACFF,WAAW,EAAI,GAAG,CAClB,MAAOT,IAAG,CAACS,WAAW,CAAC,CACzB,CAAC,CAED;AACA;AACA;AACA,GACA,MAAO,SAASG,wBAAuB,CACrCJ,UAAoB,CACpBK,mBAAyD,CASzD,CACA,0BAAwBT,uBAAuB,EAAE,gEAA1CU,aAAa,2BACpB,cAA4BX,QAAQ,EAAO,wCAApCY,MAAM,eAAEC,SAAS,eACxB,eAA0Bb,QAAQ,CAAC,KAAK,CAAC,yCAAlCc,KAAK,eAAEC,QAAQ,eAEtB,gBAAwBb,UAAU,EAAE,CAA5Bc,WAAW,aAAXA,WAAW,CACnB,GAAMC,kBAAiB,CAAGP,mBAAmB,SAAnBA,mBAAmB,UAAnBA,mBAAmB,CAAIM,WAAW,CAE5D;AACA,GAAME,cAAa,CAAGN,MAAM,SAANA,MAAM,iBAANA,MAAM,CAAGD,aAAa,CAACQ,EAAE,CAAC,CAEhDrB,SAAS,CAAC,UAAM,SACCsB,UAAS,qIAAxB,qKACwBjB,WAAU,CAACC,UAAU,CAAEa,iBAAiB,CAAE,EAAE,CAAEZ,UAAU,CAAC,QAAzEgB,OAAO,eACb,GAAIA,OAAO,CAAE,CACXR,SAAS,gCAAOD,MAAM,SAANA,MAAM,UAANA,MAAM,CAAI,CAAC,CAAC,wBAAID,aAAa,CAACQ,EAAE,CAAGE,OAAO,GAAG,CAC/D,CAAC,IAAM,CACLN,QAAQ,CAAC,IAAI,CAAC,CAChB,CAAC,sDACF,4CACD,GAAI,CAACG,aAAa,EAAI,CAACJ,KAAK,CAAE,CAC5BM,SAAS,EAAE,CACb,CACF,CAAC,CAAC,CAEF,GAAME,gBAAe,CAAGvB,OAAO,CAAC,UAAM,CACpC,GAAIa,MAAM,SAANA,MAAM,iBAANA,MAAM,CAAGD,aAAa,CAACQ,EAAE,CAAC,CAAE,CAC9B,GAAMD,eAAa,CAAGN,MAAM,SAANA,MAAM,iBAANA,MAAM,CAAGD,aAAa,CAACQ,EAAE,CAAC,CAChD,GAAMI,UAAS,CAAG,EAAE,CACpB,IAAK,GAAMC,EAAC,GAAIN,eAAa,CAAE,CAC7B,GAAIA,cAAa,CAACM,CAAC,CAAC,CAACC,MAAM,CAAG,CAAC,CAAE,CAC/BF,SAAS,CAACG,IAAI,CAAC,CACblB,SAAS,CAAEgB,CAAC,CAACG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAC1BC,MAAM,CAAEV,cAAa,CAACM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CACtC,CAAC,CAAC,CACJ,CACF,CACA,MAAOD,UAAS,CAClB,CACA,MAAOM,UAAS,CAClB,CAAC,CAAE,CAAClB,aAAa,CAACQ,EAAE,CAAEP,MAAM,CAAC,CAAC,CAE9B,MAAO,CACLA,MAAM,CAAEU,eAAe,CACvBR,KAAK,CAALA,KACF,CAAC,CACH"},"metadata":{},"sourceType":"module"}