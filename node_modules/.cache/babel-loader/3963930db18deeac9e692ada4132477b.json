{"ast":null,"code":"import _regeneratorRuntime from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _objectSpread from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _asyncToGenerator from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _createForOfIteratorHelper from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\n/*\n  Copyright 2020 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nfunction stripParams(fullURL, ignoreParams) {\n  var strippedURL = new URL(fullURL);\n  var _iterator = _createForOfIteratorHelper(ignoreParams),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var param = _step.value;\n      strippedURL.searchParams.delete(param);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return strippedURL.href;\n}\n/**\n * Matches an item in the cache, ignoring specific URL params. This is similar\n * to the `ignoreSearch` option, but it allows you to ignore just specific\n * params (while continuing to match on the others).\n *\n * @private\n * @param {Cache} cache\n * @param {Request} request\n * @param {Object} matchOptions\n * @param {Array<string>} ignoreParams\n * @return {Promise<Response|undefined>}\n */\nfunction cacheMatchIgnoreParams(_x, _x2, _x3, _x4) {\n  return _cacheMatchIgnoreParams.apply(this, arguments);\n}\nfunction _cacheMatchIgnoreParams() {\n  _cacheMatchIgnoreParams = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(cache, request, ignoreParams, matchOptions) {\n    var strippedRequestURL, keysOptions, cacheKeys, _iterator2, _step2, cacheKey, strippedCacheKeyURL;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            strippedRequestURL = stripParams(request.url, ignoreParams); // If the request doesn't include any ignored params, match as normal.\n            if (!(request.url === strippedRequestURL)) {\n              _context.next = 3;\n              break;\n            }\n            return _context.abrupt(\"return\", cache.match(request, matchOptions));\n          case 3:\n            // Otherwise, match by comparing keys\n            keysOptions = _objectSpread(_objectSpread({}, matchOptions), {}, {\n              ignoreSearch: true\n            });\n            _context.next = 6;\n            return cache.keys(request, keysOptions);\n          case 6:\n            cacheKeys = _context.sent;\n            _iterator2 = _createForOfIteratorHelper(cacheKeys);\n            _context.prev = 8;\n            _iterator2.s();\n          case 10:\n            if ((_step2 = _iterator2.n()).done) {\n              _context.next = 17;\n              break;\n            }\n            cacheKey = _step2.value;\n            strippedCacheKeyURL = stripParams(cacheKey.url, ignoreParams);\n            if (!(strippedRequestURL === strippedCacheKeyURL)) {\n              _context.next = 15;\n              break;\n            }\n            return _context.abrupt(\"return\", cache.match(cacheKey, matchOptions));\n          case 15:\n            _context.next = 10;\n            break;\n          case 17:\n            _context.next = 22;\n            break;\n          case 19:\n            _context.prev = 19;\n            _context.t0 = _context[\"catch\"](8);\n            _iterator2.e(_context.t0);\n          case 22:\n            _context.prev = 22;\n            _iterator2.f();\n            return _context.finish(22);\n          case 25:\n            return _context.abrupt(\"return\");\n          case 26:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[8, 19, 22, 25]]);\n  }));\n  return _cacheMatchIgnoreParams.apply(this, arguments);\n}\nexport { cacheMatchIgnoreParams };","map":{"version":3,"names":["stripParams","fullURL","ignoreParams","strippedURL","URL","param","searchParams","delete","href","cacheMatchIgnoreParams","cache","request","matchOptions","strippedRequestURL","url","match","keysOptions","ignoreSearch","keys","cacheKeys","cacheKey","strippedCacheKeyURL"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/workbox-core/_private/cacheMatchIgnoreParams.js"],"sourcesContent":["/*\n  Copyright 2020 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nfunction stripParams(fullURL, ignoreParams) {\n    const strippedURL = new URL(fullURL);\n    for (const param of ignoreParams) {\n        strippedURL.searchParams.delete(param);\n    }\n    return strippedURL.href;\n}\n/**\n * Matches an item in the cache, ignoring specific URL params. This is similar\n * to the `ignoreSearch` option, but it allows you to ignore just specific\n * params (while continuing to match on the others).\n *\n * @private\n * @param {Cache} cache\n * @param {Request} request\n * @param {Object} matchOptions\n * @param {Array<string>} ignoreParams\n * @return {Promise<Response|undefined>}\n */\nasync function cacheMatchIgnoreParams(cache, request, ignoreParams, matchOptions) {\n    const strippedRequestURL = stripParams(request.url, ignoreParams);\n    // If the request doesn't include any ignored params, match as normal.\n    if (request.url === strippedRequestURL) {\n        return cache.match(request, matchOptions);\n    }\n    // Otherwise, match by comparing keys\n    const keysOptions = { ...matchOptions, ignoreSearch: true };\n    const cacheKeys = await cache.keys(request, keysOptions);\n    for (const cacheKey of cacheKeys) {\n        const strippedCacheKeyURL = stripParams(cacheKey.url, ignoreParams);\n        if (strippedRequestURL === strippedCacheKeyURL) {\n            return cache.match(cacheKey, matchOptions);\n        }\n    }\n    return;\n}\nexport { cacheMatchIgnoreParams };\n"],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,gBAAgB;AACvB,SAASA,WAAW,CAACC,OAAO,EAAEC,YAAY,EAAE;EACxC,IAAMC,WAAW,GAAG,IAAIC,GAAG,CAACH,OAAO,CAAC;EAAC,2CACjBC,YAAY;IAAA;EAAA;IAAhC,oDAAkC;MAAA,IAAvBG,KAAK;MACZF,WAAW,CAACG,YAAY,CAACC,MAAM,CAACF,KAAK,CAAC;IAC1C;EAAC;IAAA;EAAA;IAAA;EAAA;EACD,OAAOF,WAAW,CAACK,IAAI;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA,SAYeC,sBAAsB;EAAA;AAAA;AAAA;EAAA,mFAArC,iBAAsCC,KAAK,EAAEC,OAAO,EAAET,YAAY,EAAEU,YAAY;IAAA;IAAA;MAAA;QAAA;UAAA;YACtEC,kBAAkB,GAAGb,WAAW,CAACW,OAAO,CAACG,GAAG,EAAEZ,YAAY,CAAC,EACjE;YAAA,MACIS,OAAO,CAACG,GAAG,KAAKD,kBAAkB;cAAA;cAAA;YAAA;YAAA,iCAC3BH,KAAK,CAACK,KAAK,CAACJ,OAAO,EAAEC,YAAY,CAAC;UAAA;YAE7C;YACMI,WAAW,mCAAQJ,YAAY;cAAEK,YAAY,EAAE;YAAI;YAAA;YAAA,OACjCP,KAAK,CAACQ,IAAI,CAACP,OAAO,EAAEK,WAAW,CAAC;UAAA;YAAlDG,SAAS;YAAA,wCACQA,SAAS;YAAA;YAAA;UAAA;YAAA;cAAA;cAAA;YAAA;YAArBC,QAAQ;YACTC,mBAAmB,GAAGrB,WAAW,CAACoB,QAAQ,CAACN,GAAG,EAAEZ,YAAY,CAAC;YAAA,MAC/DW,kBAAkB,KAAKQ,mBAAmB;cAAA;cAAA;YAAA;YAAA,iCACnCX,KAAK,CAACK,KAAK,CAACK,QAAQ,EAAER,YAAY,CAAC;UAAA;YAAA;YAAA;UAAA;YAAA;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA;YAAA;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAIrD;EAAA;AAAA;AACD,SAASH,sBAAsB"},"metadata":{},"sourceType":"module"}