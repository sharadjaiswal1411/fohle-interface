{"ast":null,"code":"import _objectSpread from\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _objectWithoutProperties from\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";import _styled from\"styled-components\";var _excluded=[\"value\",\"onUserInput\",\"placeholder\",\"prependSymbol\"];import React from'react';import{escapeRegExp}from'../../utils';import{jsx as _jsx}from\"react/jsx-runtime\";var StyledInput=_styled.input.withConfig({componentId:\"sc-1x3stf0-0\"})([\"color:\",\";width:0;position:relative;font-weight:400;outline:none;border:none;flex:1 1 auto;background-color:transparent;font-size:\",\";text-align:\",\";white-space:nowrap;overflow:hidden;text-overflow:ellipsis;padding:0px;-webkit-appearance:textfield;text-align:right;::-webkit-search-decoration{-webkit-appearance:none;}[type='number']{-moz-appearance:textfield;}::-webkit-outer-spin-button,::-webkit-inner-spin-button{-webkit-appearance:none;}::placeholder{color:\",\";}\"],function(_ref){var error=_ref.error,theme=_ref.theme;return error?theme.accentFailure:theme.textPrimary;},function(_ref2){var fontSize=_ref2.fontSize;return fontSize!==null&&fontSize!==void 0?fontSize:'28px';},function(_ref3){var align=_ref3.align;return align&&align;},function(_ref4){var theme=_ref4.theme;return theme.textTertiary;});var inputRegex=RegExp(\"^\\\\d*(?:\\\\\\\\[.])?\\\\d*$\");// match escaped \".\" characters via in a non-capturing group\nexport var Input=/*#__PURE__*/React.memo(function InnerInput(_ref5){var value=_ref5.value,onUserInput=_ref5.onUserInput,placeholder=_ref5.placeholder,prependSymbol=_ref5.prependSymbol,rest=_objectWithoutProperties(_ref5,_excluded);var enforcer=function enforcer(nextUserInput){if(nextUserInput===''||inputRegex.test(escapeRegExp(nextUserInput))){onUserInput(nextUserInput);}};return/*#__PURE__*/_jsx(StyledInput,_objectSpread(_objectSpread({},rest),{},{value:prependSymbol&&value?prependSymbol+value:value,onChange:function onChange(event){if(prependSymbol){var _value=event.target.value;// cut off prepended symbol\nvar formattedValue=_value.toString().includes(prependSymbol)?_value.toString().slice(1,_value.toString().length+1):_value;// replace commas with periods, because uniswap exclusively uses period as the decimal separator\nenforcer(formattedValue.replace(/,/g,'.'));}else{enforcer(event.target.value.replace(/,/g,'.'));}}// universal input options\n,inputMode:\"decimal\",autoComplete:\"off\",autoCorrect:\"off\"// text-specific options\n,type:\"text\",pattern:\"^[0-9]*[.,]?[0-9]*$\",placeholder:placeholder||'0',minLength:1,maxLength:79,spellCheck:\"false\"}));});export default Input;// const inputRegex = RegExp(`^\\\\d*(?:\\\\\\\\[.])?\\\\d*$`) // match escaped \".\" characters via in a non-capturing group","map":{"version":3,"names":["React","escapeRegExp","StyledInput","styled","input","error","theme","accentFailure","textPrimary","fontSize","align","textTertiary","inputRegex","RegExp","Input","memo","InnerInput","value","onUserInput","placeholder","prependSymbol","rest","enforcer","nextUserInput","test","event","target","formattedValue","toString","includes","slice","length","replace"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/components/NumericalInput/index.tsx"],"sourcesContent":["import React from 'react'\nimport styled from 'styled-components/macro'\n\nimport { escapeRegExp } from '../../utils'\n\nconst StyledInput = styled.input<{ error?: boolean; fontSize?: string; align?: string }>`\n  color: ${({ error, theme }) => (error ? theme.accentFailure : theme.textPrimary)};\n  width: 0;\n  position: relative;\n  font-weight: 400;\n  outline: none;\n  border: none;\n  flex: 1 1 auto;\n  background-color: transparent;\n  font-size: ${({ fontSize }) => fontSize ?? '28px'};\n  text-align: ${({ align }) => align && align};\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  padding: 0px;\n  -webkit-appearance: textfield;\n  text-align: right;\n\n  ::-webkit-search-decoration {\n    -webkit-appearance: none;\n  }\n\n  [type='number'] {\n    -moz-appearance: textfield;\n  }\n\n  ::-webkit-outer-spin-button,\n  ::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n  }\n\n  ::placeholder {\n    color: ${({ theme }) => theme.textTertiary};\n  }\n`\n\nconst inputRegex = RegExp(`^\\\\d*(?:\\\\\\\\[.])?\\\\d*$`) // match escaped \".\" characters via in a non-capturing group\n\nexport const Input = React.memo(function InnerInput({\n  value,\n  onUserInput,\n  placeholder,\n  prependSymbol,\n  ...rest\n}: {\n  value: string | number\n  onUserInput: (input: string) => void\n  error?: boolean\n  fontSize?: string\n  align?: 'right' | 'left'\n  prependSymbol?: string | undefined\n} & Omit<React.HTMLProps<HTMLInputElement>, 'ref' | 'onChange' | 'as'>) {\n  const enforcer = (nextUserInput: string) => {\n    if (nextUserInput === '' || inputRegex.test(escapeRegExp(nextUserInput))) {\n      onUserInput(nextUserInput)\n    }\n  }\n\n  return (\n    <StyledInput\n      {...rest}\n      value={prependSymbol && value ? prependSymbol + value : value}\n      onChange={(event) => {\n        if (prependSymbol) {\n          const value = event.target.value\n\n          // cut off prepended symbol\n          const formattedValue = value.toString().includes(prependSymbol)\n            ? value.toString().slice(1, value.toString().length + 1)\n            : value\n\n          // replace commas with periods, because uniswap exclusively uses period as the decimal separator\n          enforcer(formattedValue.replace(/,/g, '.'))\n        } else {\n          enforcer(event.target.value.replace(/,/g, '.'))\n        }\n      }}\n      // universal input options\n      inputMode=\"decimal\"\n      autoComplete=\"off\"\n      autoCorrect=\"off\"\n      // text-specific options\n      type=\"text\"\n      pattern=\"^[0-9]*[.,]?[0-9]*$\"\n      placeholder={placeholder || '0'}\n      minLength={1}\n      maxLength={79}\n      spellCheck=\"false\"\n    />\n  )\n})\n\nexport default Input\n\n// const inputRegex = RegExp(`^\\\\d*(?:\\\\\\\\[.])?\\\\d*$`) // match escaped \".\" characters via in a non-capturing group\n"],"mappings":"sdAAA,MAAOA,MAAK,KAAM,OAAO,CAGzB,OAASC,YAAY,KAAQ,aAAa,4CAE1C,GAAMC,YAAW,CAAGC,OAAM,CAACC,KAAK,kgBACrB,kBAAGC,MAAK,MAALA,KAAK,CAAEC,KAAK,MAALA,KAAK,OAAQD,MAAK,CAAGC,KAAK,CAACC,aAAa,CAAGD,KAAK,CAACE,WAAW,EAAC,CAQnE,mBAAGC,SAAQ,OAARA,QAAQ,OAAOA,SAAQ,SAARA,QAAQ,UAARA,QAAQ,CAAI,MAAM,GACnC,mBAAGC,MAAK,OAALA,KAAK,OAAOA,MAAK,EAAIA,KAAK,GAsBhC,mBAAGJ,MAAK,OAALA,KAAK,OAAOA,MAAK,CAACK,YAAY,GAE7C,CAED,GAAMC,WAAU,CAAGC,MAAM,0BAA0B,CAAC;AAEpD,MAAO,IAAMC,MAAK,cAAGd,KAAK,CAACe,IAAI,CAAC,QAASC,WAAU,OAaqB,IAZtEC,MAAK,OAALA,KAAK,CACLC,WAAW,OAAXA,WAAW,CACXC,WAAW,OAAXA,WAAW,CACXC,aAAa,OAAbA,aAAa,CACVC,IAAI,2CASP,GAAMC,SAAQ,CAAG,QAAXA,SAAQ,CAAIC,aAAqB,CAAK,CAC1C,GAAIA,aAAa,GAAK,EAAE,EAAIX,UAAU,CAACY,IAAI,CAACvB,YAAY,CAACsB,aAAa,CAAC,CAAC,CAAE,CACxEL,WAAW,CAACK,aAAa,CAAC,CAC5B,CACF,CAAC,CAED,mBACE,KAAC,WAAW,gCACNF,IAAI,MACR,KAAK,CAAED,aAAa,EAAIH,KAAK,CAAGG,aAAa,CAAGH,KAAK,CAAGA,KAAM,CAC9D,QAAQ,CAAE,kBAACQ,KAAK,CAAK,CACnB,GAAIL,aAAa,CAAE,CACjB,GAAMH,OAAK,CAAGQ,KAAK,CAACC,MAAM,CAACT,KAAK,CAEhC;AACA,GAAMU,eAAc,CAAGV,MAAK,CAACW,QAAQ,EAAE,CAACC,QAAQ,CAACT,aAAa,CAAC,CAC3DH,MAAK,CAACW,QAAQ,EAAE,CAACE,KAAK,CAAC,CAAC,CAAEb,MAAK,CAACW,QAAQ,EAAE,CAACG,MAAM,CAAG,CAAC,CAAC,CACtDd,MAAK,CAET;AACAK,QAAQ,CAACK,cAAc,CAACK,OAAO,CAAC,IAAI,CAAE,GAAG,CAAC,CAAC,CAC7C,CAAC,IAAM,CACLV,QAAQ,CAACG,KAAK,CAACC,MAAM,CAACT,KAAK,CAACe,OAAO,CAAC,IAAI,CAAE,GAAG,CAAC,CAAC,CACjD,CACF,CACA;AAAA,CACA,SAAS,CAAC,SAAS,CACnB,YAAY,CAAC,KAAK,CAClB,WAAW,CAAC,KACZ;AAAA,CACA,IAAI,CAAC,MAAM,CACX,OAAO,CAAC,qBAAqB,CAC7B,WAAW,CAAEb,WAAW,EAAI,GAAI,CAChC,SAAS,CAAE,CAAE,CACb,SAAS,CAAE,EAAG,CACd,UAAU,CAAC,OAAO,GAClB,CAEN,CAAC,CAAC,CAEF,cAAeL,MAAK,CAEpB"},"metadata":{},"sourceType":"module"}