{"ast":null,"code":"import _regeneratorRuntime from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { _asyncOptionalChain } from './_asyncOptionalChain.js';\n\n/**\n * Polyfill for the optional chain operator, `?.`, given previous conversion of the expression into an array of values,\n * descriptors, and functions, in cases where the value of the expression is to be deleted.\n *\n * Adapted from Sucrase (https://github.com/alangpierce/sucrase) See\n * https://github.com/alangpierce/sucrase/blob/265887868966917f3b924ce38dfad01fbab1329f/src/transformers/OptionalChainingNullishTransformer.ts#L15\n *\n * @param ops Array result of expression conversion\n * @returns The return value of the `delete` operator: `true`, unless the deletion target is an own, non-configurable\n * property (one which can't be deleted or turned into an accessor, and whose enumerability can't be changed), in which\n * case `false`.\n */\n// eslint-disable-next-line @sentry-internal/sdk/no-async-await\nfunction _asyncOptionalChainDelete(_x) {\n  return _asyncOptionalChainDelete2.apply(this, arguments);\n} // Sucrase version:\n// async function asyncOptionalChainDelete(ops) {\n//   const result = await ASYNC_OPTIONAL_CHAIN_NAME(ops);\n//   return result == null ? true : result;\n// }\nfunction _asyncOptionalChainDelete2() {\n  _asyncOptionalChainDelete2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(ops) {\n    var result;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _asyncOptionalChain(ops);\n          case 2:\n            result = _context.sent;\n            return _context.abrupt(\"return\", result == null ? true : result);\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _asyncOptionalChainDelete2.apply(this, arguments);\n}\nexport { _asyncOptionalChainDelete };","map":{"version":3,"sources":["../../../src/buildPolyfills/_asyncOptionalChainDelete.ts"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,SACA,yBAAA;EAAA;AAAA,EAQA;AACA;AACA;AACA;AACA;AAAA;EAAA,sFAZA,iBAAA,GAAA;IAAA;IAAA;MAAA;QAAA;UAAA;YAAA;YAAA,OACA,mBAAA,CAAA,GAAA,CAAA;UAAA;YAAA,MAAA;YAAA,iCAIA,MAAA,IAAA,IAAA,GAAA,IAAA,GAAA,MAAA;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CACA;EAAA;AAAA","sourcesContent":["import { _asyncOptionalChain } from './_asyncOptionalChain';\n\n/**\n * Polyfill for the optional chain operator, `?.`, given previous conversion of the expression into an array of values,\n * descriptors, and functions, in cases where the value of the expression is to be deleted.\n *\n * Adapted from Sucrase (https://github.com/alangpierce/sucrase) See\n * https://github.com/alangpierce/sucrase/blob/265887868966917f3b924ce38dfad01fbab1329f/src/transformers/OptionalChainingNullishTransformer.ts#L15\n *\n * @param ops Array result of expression conversion\n * @returns The return value of the `delete` operator: `true`, unless the deletion target is an own, non-configurable\n * property (one which can't be deleted or turned into an accessor, and whose enumerability can't be changed), in which\n * case `false`.\n */\n// eslint-disable-next-line @sentry-internal/sdk/no-async-await\nexport async function _asyncOptionalChainDelete(ops: unknown[]): Promise<boolean> {\n  const result = (await _asyncOptionalChain(ops)) as Promise<boolean | null>;\n  // If `result` is `null`, it means we didn't get to the end of the chain and so nothing was deleted (in which case,\n  // return `true` since that's what `delete` does when it no-ops). If it's non-null, we know the delete happened, in\n  // which case we return whatever the `delete` returned, which will be a boolean.\n  return result == null ? true : (result as Promise<boolean>);\n}\n\n// Sucrase version:\n// async function asyncOptionalChainDelete(ops) {\n//   const result = await ASYNC_OPTIONAL_CHAIN_NAME(ops);\n//   return result == null ? true : result;\n// }\n"]},"metadata":{},"sourceType":"module"}