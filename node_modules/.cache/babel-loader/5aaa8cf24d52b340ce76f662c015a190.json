{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { SpecialEventType } from '@amplitude/analytics-types';\nimport { Identify } from '../identify';\nexport var createTrackEvent = function createTrackEvent(eventInput, eventProperties, eventOptions) {\n  var baseEvent = typeof eventInput === 'string' ? {\n    event_type: eventInput\n  } : eventInput;\n  return __assign(__assign(__assign({}, baseEvent), eventOptions), eventProperties && {\n    event_properties: eventProperties\n  });\n};\nexport var createIdentifyEvent = function createIdentifyEvent(identify, eventOptions) {\n  var identifyEvent = __assign(__assign({}, eventOptions), {\n    event_type: SpecialEventType.IDENTIFY,\n    user_properties: identify.getUserProperties()\n  });\n  return identifyEvent;\n};\nexport var createGroupIdentifyEvent = function createGroupIdentifyEvent(groupType, groupName, identify, eventOptions) {\n  var _a;\n  var groupIdentify = __assign(__assign({}, eventOptions), {\n    event_type: SpecialEventType.GROUP_IDENTIFY,\n    group_properties: identify.getUserProperties(),\n    groups: (_a = {}, _a[groupType] = groupName, _a)\n  });\n  return groupIdentify;\n};\nexport var createGroupEvent = function createGroupEvent(groupType, groupName, eventOptions) {\n  var _a;\n  var identify = new Identify();\n  identify.set(groupType, groupName);\n  var groupEvent = __assign(__assign({}, eventOptions), {\n    event_type: SpecialEventType.IDENTIFY,\n    user_properties: identify.getUserProperties(),\n    groups: (_a = {}, _a[groupType] = groupName, _a)\n  });\n  return groupEvent;\n};\nexport var createRevenueEvent = function createRevenueEvent(revenue, eventOptions) {\n  return __assign(__assign({}, eventOptions), {\n    event_type: SpecialEventType.REVENUE,\n    event_properties: revenue.getEventProperties()\n  });\n};","map":{"version":3,"sources":["../../../src/utils/event-builder.ts"],"names":[],"mappings":";AAAA,SAKE,gBAAgB,QAKX,4BAA4B;AACnC,SAAS,QAAQ,QAAQ,aAAa;AAEtC,OAAO,IAAM,gBAAgB,GAAG,SAAnB,gBAAgB,CAC3B,UAA8B,EAC9B,eAAqC,EACrC,YAA2B,EAAA;EAE3B,IAAM,SAAS,GAAc,OAAO,UAAU,KAAK,QAAQ,GAAG;IAAE,UAAU,EAAE;EAAU,CAAE,GAAG,UAAU;EACrG,OAAA,QAAA,CAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EACK,SAAS,CAAA,EACT,YAAY,CAAA,EACX,eAAe,IAAI;IAAE,gBAAgB,EAAE;EAAe,CAAE,CAAC;AAEjE,CAAC;AAED,OAAO,IAAM,mBAAmB,GAAG,SAAtB,mBAAmB,CAAI,QAAmB,EAAE,YAA2B,EAAA;EAClF,IAAM,aAAa,GAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EACd,YAAY,CAAA,EAAA;IACf,UAAU,EAAE,gBAAgB,CAAC,QAAQ;IACrC,eAAe,EAAE,QAAQ,CAAC,iBAAiB;EAAE,CAAA,CAC9C;EAED,OAAO,aAAa;AACtB,CAAC;AAED,OAAO,IAAM,wBAAwB,GAAG,SAA3B,wBAAwB,CACnC,SAAiB,EACjB,SAA4B,EAC5B,QAAmB,EACnB,YAA2B,EAAA;;EAE3B,IAAM,aAAa,GAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EACd,YAAY,CAAA,EAAA;IACf,UAAU,EAAE,gBAAgB,CAAC,cAAc;IAC3C,gBAAgB,EAAE,QAAQ,CAAC,iBAAiB,EAAE;IAC9C,MAAM,GAAA,EAAA,GAAA,CAAA,CAAA,EACJ,EAAA,CAAC,SAAS,CAAA,GAAG,SAAS,E;IAEzB;EAED,OAAO,aAAa;AACtB,CAAC;AAED,OAAO,IAAM,gBAAgB,GAAG,SAAnB,gBAAgB,CAAI,SAAiB,EAAE,SAA4B,EAAE,YAA2B,EAAA;;EAC3G,IAAM,QAAQ,GAAG,IAAI,QAAQ,EAAE;EAC/B,QAAQ,CAAC,GAAG,CAAC,SAAS,EAAE,SAAS,CAAC;EAElC,IAAM,UAAU,GAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EACX,YAAY,CAAA,EAAA;IACf,UAAU,EAAE,gBAAgB,CAAC,QAAQ;IACrC,eAAe,EAAE,QAAQ,CAAC,iBAAiB,EAAE;IAC7C,MAAM,GAAA,EAAA,GAAA,CAAA,CAAA,EACJ,EAAA,CAAC,SAAS,CAAA,GAAG,SAAS,E;IAEzB;EACD,OAAO,UAAU;AACnB,CAAC;AAED,OAAO,IAAM,kBAAkB,GAAG,SAArB,kBAAkB,CAAI,OAAgB,EAAE,YAA2B,EAAA;EAC9E,OAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EACK,YAAY,CAAA,EAAA;IACf,UAAU,EAAE,gBAAgB,CAAC,OAAO;IACpC,gBAAgB,EAAE,OAAO,CAAC,kBAAkB;EAAE,CAAA,CAAA;AAElD,CAAC","sourcesContent":["import {\n  BaseEvent,\n  TrackEvent,\n  IdentifyEvent,\n  GroupIdentifyEvent,\n  SpecialEventType,\n  Identify as IIdentify,\n  Revenue,\n  RevenueEvent,\n  EventOptions,\n} from '@amplitude/analytics-types';\nimport { Identify } from '../identify';\n\nexport const createTrackEvent = (\n  eventInput: BaseEvent | string,\n  eventProperties?: Record<string, any>,\n  eventOptions?: EventOptions,\n): TrackEvent => {\n  const baseEvent: BaseEvent = typeof eventInput === 'string' ? { event_type: eventInput } : eventInput;\n  return {\n    ...baseEvent,\n    ...eventOptions,\n    ...(eventProperties && { event_properties: eventProperties }),\n  };\n};\n\nexport const createIdentifyEvent = (identify: IIdentify, eventOptions?: EventOptions): IdentifyEvent => {\n  const identifyEvent: IdentifyEvent = {\n    ...eventOptions,\n    event_type: SpecialEventType.IDENTIFY,\n    user_properties: identify.getUserProperties(),\n  };\n\n  return identifyEvent;\n};\n\nexport const createGroupIdentifyEvent = (\n  groupType: string,\n  groupName: string | string[],\n  identify: IIdentify,\n  eventOptions?: EventOptions,\n): GroupIdentifyEvent => {\n  const groupIdentify: GroupIdentifyEvent = {\n    ...eventOptions,\n    event_type: SpecialEventType.GROUP_IDENTIFY,\n    group_properties: identify.getUserProperties(),\n    groups: {\n      [groupType]: groupName,\n    },\n  };\n\n  return groupIdentify;\n};\n\nexport const createGroupEvent = (groupType: string, groupName: string | string[], eventOptions?: EventOptions) => {\n  const identify = new Identify();\n  identify.set(groupType, groupName);\n\n  const groupEvent: IdentifyEvent = {\n    ...eventOptions,\n    event_type: SpecialEventType.IDENTIFY,\n    user_properties: identify.getUserProperties(),\n    groups: {\n      [groupType]: groupName,\n    },\n  };\n  return groupEvent;\n};\n\nexport const createRevenueEvent = (revenue: Revenue, eventOptions?: EventOptions): RevenueEvent => {\n  return {\n    ...eventOptions,\n    event_type: SpecialEventType.REVENUE,\n    event_properties: revenue.getEventProperties(),\n  };\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}