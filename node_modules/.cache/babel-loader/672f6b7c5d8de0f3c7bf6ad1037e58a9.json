{"ast":null,"code":"/**\n * Implementation of the [multibase](https://github.com/multiformats/multibase) specification.\n *\n */\n'use strict';\n\nvar constants = require('./constants');\nvar _require = require('./util'),\n  encodeText = _require.encodeText,\n  decodeText = _require.decodeText,\n  concat = _require.concat;\n\n/** @typedef {import('./base')} Base */\n/** @typedef {import(\"./types\").BaseNameOrCode} BaseNameOrCode */\n/** @typedef {import(\"./types\").BaseCode} BaseCode */\n/** @typedef {import(\"./types\").BaseName} BaseName */\n\n/**\n * Create a new Uint8Array with the multibase varint+code.\n *\n * @param {BaseNameOrCode} nameOrCode - The multibase name or code number.\n * @param {Uint8Array} buf - The data to be prefixed with multibase.\n * @returns {Uint8Array}\n * @throws {Error} Will throw if the encoding is not supported\n */\nfunction multibase(nameOrCode, buf) {\n  if (!buf) {\n    throw new Error('requires an encoded Uint8Array');\n  }\n  var _encoding = encoding(nameOrCode),\n    name = _encoding.name,\n    codeBuf = _encoding.codeBuf;\n  validEncode(name, buf);\n  return concat([codeBuf, buf], codeBuf.length + buf.length);\n}\n\n/**\n * Encode data with the specified base and add the multibase prefix.\n *\n * @param {BaseNameOrCode} nameOrCode - The multibase name or code number.\n * @param {Uint8Array} buf - The data to be encoded.\n * @returns {Uint8Array}\n * @throws {Error} Will throw if the encoding is not supported\n *\n */\nfunction encode(nameOrCode, buf) {\n  var enc = encoding(nameOrCode);\n  var data = encodeText(enc.encode(buf));\n  return concat([enc.codeBuf, data], enc.codeBuf.length + data.length);\n}\n\n/**\n * Takes a Uint8Array or string encoded with multibase header, decodes it and\n * returns the decoded buffer\n *\n * @param {Uint8Array|string} data\n * @returns {Uint8Array}\n * @throws {Error} Will throw if the encoding is not supported\n *\n */\nfunction decode(data) {\n  if (data instanceof Uint8Array) {\n    data = decodeText(data);\n  }\n  var prefix = data[0];\n\n  // Make all encodings case-insensitive except the ones that include upper and lower chars in the alphabet\n  if (['f', 'F', 'v', 'V', 't', 'T', 'b', 'B', 'c', 'C', 'h', 'k', 'K'].includes(prefix)) {\n    data = data.toLowerCase();\n  }\n  var enc = encoding( /** @type {BaseCode} */data[0]);\n  return enc.decode(data.substring(1));\n}\n\n/**\n * Is the given data multibase encoded?\n *\n * @param {Uint8Array|string} data\n */\nfunction isEncoded(data) {\n  if (data instanceof Uint8Array) {\n    data = decodeText(data);\n  }\n\n  // Ensure bufOrString is a string\n  if (Object.prototype.toString.call(data) !== '[object String]') {\n    return false;\n  }\n  try {\n    var enc = encoding( /** @type {BaseCode} */data[0]);\n    return enc.name;\n  } catch (err) {\n    return false;\n  }\n}\n\n/**\n * Validate encoded data\n *\n * @param {BaseNameOrCode} name\n * @param {Uint8Array} buf\n * @returns {void}\n * @throws {Error} Will throw if the encoding is not supported\n */\nfunction validEncode(name, buf) {\n  var enc = encoding(name);\n  enc.decode(decodeText(buf));\n}\n\n/**\n * Get the encoding by name or code\n *\n * @param {BaseNameOrCode} nameOrCode\n * @returns {Base}\n * @throws {Error} Will throw if the encoding is not supported\n */\nfunction encoding(nameOrCode) {\n  if (Object.prototype.hasOwnProperty.call(constants.names, /** @type {BaseName} */nameOrCode)) {\n    return constants.names[/** @type {BaseName} */nameOrCode];\n  } else if (Object.prototype.hasOwnProperty.call(constants.codes, /** @type {BaseCode} */nameOrCode)) {\n    return constants.codes[/** @type {BaseCode} */nameOrCode];\n  } else {\n    throw new Error(\"Unsupported encoding: \".concat(nameOrCode));\n  }\n}\n\n/**\n * Get encoding from data\n *\n * @param {string|Uint8Array} data\n * @returns {Base}\n * @throws {Error} Will throw if the encoding is not supported\n */\nfunction encodingFromData(data) {\n  if (data instanceof Uint8Array) {\n    data = decodeText(data);\n  }\n  return encoding( /** @type {BaseCode} */data[0]);\n}\nexports = module.exports = multibase;\nexports.encode = encode;\nexports.decode = decode;\nexports.isEncoded = isEncoded;\nexports.encoding = encoding;\nexports.encodingFromData = encodingFromData;\nvar names = Object.freeze(constants.names);\nvar codes = Object.freeze(constants.codes);\nexports.names = names;\nexports.codes = codes;","map":{"version":3,"names":["constants","require","encodeText","decodeText","concat","multibase","nameOrCode","buf","Error","encoding","name","codeBuf","validEncode","length","encode","enc","data","decode","Uint8Array","prefix","includes","toLowerCase","substring","isEncoded","Object","prototype","toString","call","err","hasOwnProperty","names","codes","encodingFromData","exports","module","freeze"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/multibase/src/index.js"],"sourcesContent":["/**\n * Implementation of the [multibase](https://github.com/multiformats/multibase) specification.\n *\n */\n'use strict'\n\nconst constants = require('./constants')\nconst { encodeText, decodeText, concat } = require('./util')\n\n/** @typedef {import('./base')} Base */\n/** @typedef {import(\"./types\").BaseNameOrCode} BaseNameOrCode */\n/** @typedef {import(\"./types\").BaseCode} BaseCode */\n/** @typedef {import(\"./types\").BaseName} BaseName */\n\n/**\n * Create a new Uint8Array with the multibase varint+code.\n *\n * @param {BaseNameOrCode} nameOrCode - The multibase name or code number.\n * @param {Uint8Array} buf - The data to be prefixed with multibase.\n * @returns {Uint8Array}\n * @throws {Error} Will throw if the encoding is not supported\n */\nfunction multibase (nameOrCode, buf) {\n  if (!buf) {\n    throw new Error('requires an encoded Uint8Array')\n  }\n  const { name, codeBuf } = encoding(nameOrCode)\n  validEncode(name, buf)\n\n  return concat([codeBuf, buf], codeBuf.length + buf.length)\n}\n\n/**\n * Encode data with the specified base and add the multibase prefix.\n *\n * @param {BaseNameOrCode} nameOrCode - The multibase name or code number.\n * @param {Uint8Array} buf - The data to be encoded.\n * @returns {Uint8Array}\n * @throws {Error} Will throw if the encoding is not supported\n *\n */\nfunction encode (nameOrCode, buf) {\n  const enc = encoding(nameOrCode)\n  const data = encodeText(enc.encode(buf))\n\n  return concat([enc.codeBuf, data], enc.codeBuf.length + data.length)\n}\n\n/**\n * Takes a Uint8Array or string encoded with multibase header, decodes it and\n * returns the decoded buffer\n *\n * @param {Uint8Array|string} data\n * @returns {Uint8Array}\n * @throws {Error} Will throw if the encoding is not supported\n *\n */\nfunction decode (data) {\n  if (data instanceof Uint8Array) {\n    data = decodeText(data)\n  }\n  const prefix = data[0]\n\n  // Make all encodings case-insensitive except the ones that include upper and lower chars in the alphabet\n  if (['f', 'F', 'v', 'V', 't', 'T', 'b', 'B', 'c', 'C', 'h', 'k', 'K'].includes(prefix)) {\n    data = data.toLowerCase()\n  }\n  const enc = encoding(/** @type {BaseCode} */(data[0]))\n  return enc.decode(data.substring(1))\n}\n\n/**\n * Is the given data multibase encoded?\n *\n * @param {Uint8Array|string} data\n */\nfunction isEncoded (data) {\n  if (data instanceof Uint8Array) {\n    data = decodeText(data)\n  }\n\n  // Ensure bufOrString is a string\n  if (Object.prototype.toString.call(data) !== '[object String]') {\n    return false\n  }\n\n  try {\n    const enc = encoding(/** @type {BaseCode} */(data[0]))\n    return enc.name\n  } catch (err) {\n    return false\n  }\n}\n\n/**\n * Validate encoded data\n *\n * @param {BaseNameOrCode} name\n * @param {Uint8Array} buf\n * @returns {void}\n * @throws {Error} Will throw if the encoding is not supported\n */\nfunction validEncode (name, buf) {\n  const enc = encoding(name)\n  enc.decode(decodeText(buf))\n}\n\n/**\n * Get the encoding by name or code\n *\n * @param {BaseNameOrCode} nameOrCode\n * @returns {Base}\n * @throws {Error} Will throw if the encoding is not supported\n */\nfunction encoding (nameOrCode) {\n  if (Object.prototype.hasOwnProperty.call(constants.names, /** @type {BaseName} */(nameOrCode))) {\n    return constants.names[/** @type {BaseName} */(nameOrCode)]\n  } else if (Object.prototype.hasOwnProperty.call(constants.codes, /** @type {BaseCode} */(nameOrCode))) {\n    return constants.codes[/** @type {BaseCode} */(nameOrCode)]\n  } else {\n    throw new Error(`Unsupported encoding: ${nameOrCode}`)\n  }\n}\n\n/**\n * Get encoding from data\n *\n * @param {string|Uint8Array} data\n * @returns {Base}\n * @throws {Error} Will throw if the encoding is not supported\n */\nfunction encodingFromData (data) {\n  if (data instanceof Uint8Array) {\n    data = decodeText(data)\n  }\n\n  return encoding(/** @type {BaseCode} */(data[0]))\n}\n\nexports = module.exports = multibase\nexports.encode = encode\nexports.decode = decode\nexports.isEncoded = isEncoded\nexports.encoding = encoding\nexports.encodingFromData = encodingFromData\nconst names = Object.freeze(constants.names)\nconst codes = Object.freeze(constants.codes)\nexports.names = names\nexports.codes = codes\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}