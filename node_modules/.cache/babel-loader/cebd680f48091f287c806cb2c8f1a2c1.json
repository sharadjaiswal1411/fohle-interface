{"ast":null,"code":"import _regeneratorRuntime from\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _defineProperty from\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _createForOfIteratorHelper from\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import{abi as MERKLE_DISTRIBUTOR_ABI}from'@uniswap/merkle-distributor/build/MerkleDistributor.json';import{CurrencyAmount}from'@uniswap/sdk-core';import{useWeb3React}from'@web3-react/core';import{MERKLE_DISTRIBUTOR_ADDRESS}from'constants/addresses';import JSBI from'jsbi';import{useSingleCallResult}from'lib/hooks/multicall';import{useEffect,useState}from'react';import{UNI}from'../../constants/tokens';import{useContract}from'../../hooks/useContract';import{isAddress}from'../../utils';import{calculateGasMargin}from'../../utils/calculateGasMargin';import{useTransactionAdder}from'../transactions/hooks';import{TransactionType}from'../transactions/types';function useMerkleDistributorContract(){return useContract(MERKLE_DISTRIBUTOR_ADDRESS,MERKLE_DISTRIBUTOR_ABI,true);}var FETCH_CLAIM_MAPPING_PROMISE=null;function fetchClaimMapping(){var _FETCH_CLAIM_MAPPING_;return(_FETCH_CLAIM_MAPPING_=FETCH_CLAIM_MAPPING_PROMISE)!==null&&_FETCH_CLAIM_MAPPING_!==void 0?_FETCH_CLAIM_MAPPING_:FETCH_CLAIM_MAPPING_PROMISE=fetch(\"https://raw.githubusercontent.com/Uniswap/mrkl-drop-data-chunks/final/chunks/mapping.json\").then(function(res){return res.json();}).catch(function(error){console.error('Failed to get claims mapping',error);FETCH_CLAIM_MAPPING_PROMISE=null;});}var FETCH_CLAIM_FILE_PROMISES={};function fetchClaimFile(key){var _FETCH_CLAIM_FILE_PRO;return(_FETCH_CLAIM_FILE_PRO=FETCH_CLAIM_FILE_PROMISES[key])!==null&&_FETCH_CLAIM_FILE_PRO!==void 0?_FETCH_CLAIM_FILE_PRO:FETCH_CLAIM_FILE_PROMISES[key]=fetch(\"https://raw.githubusercontent.com/Uniswap/mrkl-drop-data-chunks/final/chunks/\".concat(key,\".json\")).then(function(res){return res.json();}).catch(function(error){console.error(\"Failed to get claim file mapping for starting address \".concat(key),error);delete FETCH_CLAIM_FILE_PROMISES[key];});}var FETCH_CLAIM_PROMISES={};// returns the claim for the given address, or null if not valid\nfunction fetchClaim(account){var _FETCH_CLAIM_PROMISES;var formatted=isAddress(account);if(!formatted)return Promise.reject(new Error('Invalid address'));return(_FETCH_CLAIM_PROMISES=FETCH_CLAIM_PROMISES[account])!==null&&_FETCH_CLAIM_PROMISES!==void 0?_FETCH_CLAIM_PROMISES:FETCH_CLAIM_PROMISES[account]=fetchClaimMapping().then(function(mapping){var sorted=Object.keys(mapping).sort(function(a,b){return a.toLowerCase()<b.toLowerCase()?-1:1;});var _iterator=_createForOfIteratorHelper(sorted),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var _startingAddress=_step.value;var lastAddress=mapping[_startingAddress];if(_startingAddress.toLowerCase()<=formatted.toLowerCase()){if(formatted.toLowerCase()<=lastAddress.toLowerCase()){return _startingAddress;}}else{throw new Error(\"Claim for \".concat(formatted,\" was not found in partial search\"));}}}catch(err){_iterator.e(err);}finally{_iterator.f();}throw new Error(\"Claim for \".concat(formatted,\" was not found after searching all mappings\"));}).then(fetchClaimFile).then(function(result){if(result[formatted])return result[formatted];throw new Error(\"Claim for \".concat(formatted,\" was not found in claim file!\"));}).catch(function(error){console.debug('Claim fetch failed',error);throw error;});}// parse distributorContract blob and detect if user has claim data\n// null means we know it does not\nfunction useUserClaimData(account){var _useWeb3React=useWeb3React(),chainId=_useWeb3React.chainId;var _useState=useState({}),_useState2=_slicedToArray(_useState,2),claimInfo=_useState2[0],setClaimInfo=_useState2[1];useEffect(function(){if(!account||chainId!==1)return;fetchClaim(account).then(function(accountClaimInfo){return setClaimInfo(function(claimInfo){return _objectSpread(_objectSpread({},claimInfo),{},_defineProperty({},account,accountClaimInfo));});}).catch(function(){setClaimInfo(function(claimInfo){return _objectSpread(_objectSpread({},claimInfo),{},_defineProperty({},account,null));});});},[account,chainId]);return account&&chainId===1?claimInfo[account]:null;}// check if user is in blob and has not yet claimed UNI\nexport function useUserHasAvailableClaim(account){var _isClaimedResult$resu;var userClaimData=useUserClaimData(account);var distributorContract=useMerkleDistributorContract();var isClaimedResult=useSingleCallResult(distributorContract,'isClaimed',[userClaimData===null||userClaimData===void 0?void 0:userClaimData.index]);// user is in blob and contract marks as unclaimed\nreturn Boolean(userClaimData&&!isClaimedResult.loading&&((_isClaimedResult$resu=isClaimedResult.result)===null||_isClaimedResult$resu===void 0?void 0:_isClaimedResult$resu[0])===false);}export function useUserUnclaimedAmount(account){var _useWeb3React2=useWeb3React(),chainId=_useWeb3React2.chainId;var userClaimData=useUserClaimData(account);var canClaim=useUserHasAvailableClaim(account);var uni=chainId?UNI[chainId]:undefined;if(!uni)return undefined;if(!canClaim||!userClaimData){return CurrencyAmount.fromRawAmount(uni,JSBI.BigInt(0));}return CurrencyAmount.fromRawAmount(uni,JSBI.BigInt(userClaimData.amount));}export function useClaimCallback(account){// get claim data for this account\nvar _useWeb3React3=useWeb3React(),provider=_useWeb3React3.provider,chainId=_useWeb3React3.chainId;var claimData=useUserClaimData(account);// used for popup summary\nvar unclaimedAmount=useUserUnclaimedAmount(account);var addTransaction=useTransactionAdder();var distributorContract=useMerkleDistributorContract();var claimCallback=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var _distributorContract$;var args;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!(!claimData||!account||!provider||!chainId||!distributorContract)){_context.next=2;break;}return _context.abrupt(\"return\");case 2:args=[claimData.index,account,claimData.amount,claimData.proof];return _context.abrupt(\"return\",(_distributorContract$=distributorContract.estimateGas)['claim'].apply(_distributorContract$,args.concat([{}])).then(function(estimatedGasLimit){return distributorContract.claim.apply(distributorContract,args.concat([{value:null,gasLimit:calculateGasMargin(estimatedGasLimit)}])).then(function(response){addTransaction(response,{type:TransactionType.CLAIM,recipient:account,uniAmountRaw:unclaimedAmount===null||unclaimedAmount===void 0?void 0:unclaimedAmount.quotient.toString()});return response.hash;});}));case 4:case\"end\":return _context.stop();}}},_callee);}));return function claimCallback(){return _ref.apply(this,arguments);};}();return{claimCallback:claimCallback};}","map":{"version":3,"names":["abi","MERKLE_DISTRIBUTOR_ABI","CurrencyAmount","useWeb3React","MERKLE_DISTRIBUTOR_ADDRESS","JSBI","useSingleCallResult","useEffect","useState","UNI","useContract","isAddress","calculateGasMargin","useTransactionAdder","TransactionType","useMerkleDistributorContract","FETCH_CLAIM_MAPPING_PROMISE","fetchClaimMapping","fetch","then","res","json","catch","error","console","FETCH_CLAIM_FILE_PROMISES","fetchClaimFile","key","FETCH_CLAIM_PROMISES","fetchClaim","account","formatted","Promise","reject","Error","mapping","sorted","Object","keys","sort","a","b","toLowerCase","startingAddress","lastAddress","result","debug","useUserClaimData","chainId","claimInfo","setClaimInfo","accountClaimInfo","useUserHasAvailableClaim","userClaimData","distributorContract","isClaimedResult","index","Boolean","loading","useUserUnclaimedAmount","canClaim","uni","undefined","fromRawAmount","BigInt","amount","useClaimCallback","provider","claimData","unclaimedAmount","addTransaction","claimCallback","args","proof","estimateGas","estimatedGasLimit","claim","value","gasLimit","response","type","CLAIM","recipient","uniAmountRaw","quotient","toString","hash"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/state/claim/hooks.ts"],"sourcesContent":["import type { TransactionResponse } from '@ethersproject/providers'\nimport { abi as MERKLE_DISTRIBUTOR_ABI } from '@uniswap/merkle-distributor/build/MerkleDistributor.json'\nimport { CurrencyAmount, Token } from '@uniswap/sdk-core'\nimport { useWeb3React } from '@web3-react/core'\nimport { MERKLE_DISTRIBUTOR_ADDRESS } from 'constants/addresses'\nimport JSBI from 'jsbi'\nimport { useSingleCallResult } from 'lib/hooks/multicall'\nimport { useEffect, useState } from 'react'\n\nimport { UNI } from '../../constants/tokens'\nimport { useContract } from '../../hooks/useContract'\nimport { isAddress } from '../../utils'\nimport { calculateGasMargin } from '../../utils/calculateGasMargin'\nimport { useTransactionAdder } from '../transactions/hooks'\nimport { TransactionType } from '../transactions/types'\n\nfunction useMerkleDistributorContract() {\n  return useContract(MERKLE_DISTRIBUTOR_ADDRESS, MERKLE_DISTRIBUTOR_ABI, true)\n}\n\ninterface UserClaimData {\n  index: number\n  amount: string\n  proof: string[]\n  flags?: {\n    isSOCKS: boolean\n    isLP: boolean\n    isUser: boolean\n  }\n}\n\ntype LastAddress = string\ntype ClaimAddressMapping = { [firstAddress: string]: LastAddress }\nlet FETCH_CLAIM_MAPPING_PROMISE: Promise<ClaimAddressMapping> | null = null\nfunction fetchClaimMapping(): Promise<ClaimAddressMapping> {\n  return (\n    FETCH_CLAIM_MAPPING_PROMISE ??\n    (FETCH_CLAIM_MAPPING_PROMISE = fetch(\n      `https://raw.githubusercontent.com/Uniswap/mrkl-drop-data-chunks/final/chunks/mapping.json`\n    )\n      .then((res) => res.json())\n      .catch((error) => {\n        console.error('Failed to get claims mapping', error)\n        FETCH_CLAIM_MAPPING_PROMISE = null\n      }))\n  )\n}\n\nconst FETCH_CLAIM_FILE_PROMISES: { [startingAddress: string]: Promise<{ [address: string]: UserClaimData }> } = {}\nfunction fetchClaimFile(key: string): Promise<{ [address: string]: UserClaimData }> {\n  return (\n    FETCH_CLAIM_FILE_PROMISES[key] ??\n    (FETCH_CLAIM_FILE_PROMISES[key] = fetch(\n      `https://raw.githubusercontent.com/Uniswap/mrkl-drop-data-chunks/final/chunks/${key}.json`\n    )\n      .then((res) => res.json())\n      .catch((error) => {\n        console.error(`Failed to get claim file mapping for starting address ${key}`, error)\n        delete FETCH_CLAIM_FILE_PROMISES[key]\n      }))\n  )\n}\n\nconst FETCH_CLAIM_PROMISES: { [key: string]: Promise<UserClaimData> } = {}\n// returns the claim for the given address, or null if not valid\nfunction fetchClaim(account: string): Promise<UserClaimData> {\n  const formatted = isAddress(account)\n  if (!formatted) return Promise.reject(new Error('Invalid address'))\n\n  return (\n    FETCH_CLAIM_PROMISES[account] ??\n    (FETCH_CLAIM_PROMISES[account] = fetchClaimMapping()\n      .then((mapping) => {\n        const sorted = Object.keys(mapping).sort((a, b) => (a.toLowerCase() < b.toLowerCase() ? -1 : 1))\n\n        for (const startingAddress of sorted) {\n          const lastAddress = mapping[startingAddress]\n          if (startingAddress.toLowerCase() <= formatted.toLowerCase()) {\n            if (formatted.toLowerCase() <= lastAddress.toLowerCase()) {\n              return startingAddress\n            }\n          } else {\n            throw new Error(`Claim for ${formatted} was not found in partial search`)\n          }\n        }\n        throw new Error(`Claim for ${formatted} was not found after searching all mappings`)\n      })\n      .then(fetchClaimFile)\n      .then((result) => {\n        if (result[formatted]) return result[formatted]\n        throw new Error(`Claim for ${formatted} was not found in claim file!`)\n      })\n      .catch((error) => {\n        console.debug('Claim fetch failed', error)\n        throw error\n      }))\n  )\n}\n\n// parse distributorContract blob and detect if user has claim data\n// null means we know it does not\nfunction useUserClaimData(account: string | null | undefined): UserClaimData | null {\n  const { chainId } = useWeb3React()\n\n  const [claimInfo, setClaimInfo] = useState<{ [account: string]: UserClaimData | null }>({})\n\n  useEffect(() => {\n    if (!account || chainId !== 1) return\n\n    fetchClaim(account)\n      .then((accountClaimInfo) =>\n        setClaimInfo((claimInfo) => {\n          return {\n            ...claimInfo,\n            [account]: accountClaimInfo,\n          }\n        })\n      )\n      .catch(() => {\n        setClaimInfo((claimInfo) => {\n          return {\n            ...claimInfo,\n            [account]: null,\n          }\n        })\n      })\n  }, [account, chainId])\n\n  return account && chainId === 1 ? claimInfo[account] : null\n}\n\n// check if user is in blob and has not yet claimed UNI\nexport function useUserHasAvailableClaim(account: string | null | undefined): boolean {\n  const userClaimData = useUserClaimData(account)\n  const distributorContract = useMerkleDistributorContract()\n  const isClaimedResult = useSingleCallResult(distributorContract, 'isClaimed', [userClaimData?.index])\n  // user is in blob and contract marks as unclaimed\n  return Boolean(userClaimData && !isClaimedResult.loading && isClaimedResult.result?.[0] === false)\n}\n\nexport function useUserUnclaimedAmount(account: string | null | undefined): CurrencyAmount<Token> | undefined {\n  const { chainId } = useWeb3React()\n  const userClaimData = useUserClaimData(account)\n  const canClaim = useUserHasAvailableClaim(account)\n\n  const uni = chainId ? UNI[chainId] : undefined\n  if (!uni) return undefined\n  if (!canClaim || !userClaimData) {\n    return CurrencyAmount.fromRawAmount(uni, JSBI.BigInt(0))\n  }\n  return CurrencyAmount.fromRawAmount(uni, JSBI.BigInt(userClaimData.amount))\n}\n\nexport function useClaimCallback(account: string | null | undefined): {\n  claimCallback: () => Promise<string>\n} {\n  // get claim data for this account\n  const { provider, chainId } = useWeb3React()\n  const claimData = useUserClaimData(account)\n\n  // used for popup summary\n  const unclaimedAmount: CurrencyAmount<Token> | undefined = useUserUnclaimedAmount(account)\n  const addTransaction = useTransactionAdder()\n  const distributorContract = useMerkleDistributorContract()\n\n  const claimCallback = async function () {\n    if (!claimData || !account || !provider || !chainId || !distributorContract) return\n\n    const args = [claimData.index, account, claimData.amount, claimData.proof]\n\n    return distributorContract.estimateGas['claim'](...args, {}).then((estimatedGasLimit) => {\n      return distributorContract\n        .claim(...args, { value: null, gasLimit: calculateGasMargin(estimatedGasLimit) })\n        .then((response: TransactionResponse) => {\n          addTransaction(response, {\n            type: TransactionType.CLAIM,\n            recipient: account,\n            uniAmountRaw: unclaimedAmount?.quotient.toString(),\n          })\n          return response.hash\n        })\n    })\n  }\n\n  return { claimCallback }\n}\n"],"mappings":"8hCACA,OAASA,GAAG,GAAIC,uBAAsB,KAAQ,0DAA0D,CACxG,OAASC,cAAc,KAAe,mBAAmB,CACzD,OAASC,YAAY,KAAQ,kBAAkB,CAC/C,OAASC,0BAA0B,KAAQ,qBAAqB,CAChE,MAAOC,KAAI,KAAM,MAAM,CACvB,OAASC,mBAAmB,KAAQ,qBAAqB,CACzD,OAASC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAE3C,OAASC,GAAG,KAAQ,wBAAwB,CAC5C,OAASC,WAAW,KAAQ,yBAAyB,CACrD,OAASC,SAAS,KAAQ,aAAa,CACvC,OAASC,kBAAkB,KAAQ,gCAAgC,CACnE,OAASC,mBAAmB,KAAQ,uBAAuB,CAC3D,OAASC,eAAe,KAAQ,uBAAuB,CAEvD,QAASC,6BAA4B,EAAG,CACtC,MAAOL,YAAW,CAACN,0BAA0B,CAAEH,sBAAsB,CAAE,IAAI,CAAC,CAC9E,CAeA,GAAIe,4BAAgE,CAAG,IAAI,CAC3E,QAASC,kBAAiB,EAAiC,2BACzD,6BACED,2BAA2B,+DAC1BA,2BAA2B,CAAGE,KAAK,6FAEnC,CACEC,IAAI,CAAC,SAACC,GAAG,QAAKA,IAAG,CAACC,IAAI,EAAE,GAAC,CACzBC,KAAK,CAAC,SAACC,KAAK,CAAK,CAChBC,OAAO,CAACD,KAAK,CAAC,8BAA8B,CAAEA,KAAK,CAAC,CACpDP,2BAA2B,CAAG,IAAI,CACpC,CAAC,CAAC,CAER,CAEA,GAAMS,0BAAuG,CAAG,CAAC,CAAC,CAClH,QAASC,eAAc,CAACC,GAAW,CAAiD,2BAClF,6BACEF,yBAAyB,CAACE,GAAG,CAAC,+DAC7BF,yBAAyB,CAACE,GAAG,CAAC,CAAGT,KAAK,wFAC2CS,GAAG,UACpF,CACER,IAAI,CAAC,SAACC,GAAG,QAAKA,IAAG,CAACC,IAAI,EAAE,GAAC,CACzBC,KAAK,CAAC,SAACC,KAAK,CAAK,CAChBC,OAAO,CAACD,KAAK,iEAA0DI,GAAG,EAAIJ,KAAK,CAAC,CACpF,MAAOE,0BAAyB,CAACE,GAAG,CAAC,CACvC,CAAC,CAAC,CAER,CAEA,GAAMC,qBAA+D,CAAG,CAAC,CAAC,CAC1E;AACA,QAASC,WAAU,CAACC,OAAe,CAA0B,2BAC3D,GAAMC,UAAS,CAAGpB,SAAS,CAACmB,OAAO,CAAC,CACpC,GAAI,CAACC,SAAS,CAAE,MAAOC,QAAO,CAACC,MAAM,CAAC,GAAIC,MAAK,CAAC,iBAAiB,CAAC,CAAC,CAEnE,6BACEN,oBAAoB,CAACE,OAAO,CAAC,+DAC5BF,oBAAoB,CAACE,OAAO,CAAC,CAAGb,iBAAiB,EAAE,CACjDE,IAAI,CAAC,SAACgB,OAAO,CAAK,CACjB,GAAMC,OAAM,CAAGC,MAAM,CAACC,IAAI,CAACH,OAAO,CAAC,CAACI,IAAI,CAAC,SAACC,CAAC,CAAEC,CAAC,QAAMD,EAAC,CAACE,WAAW,EAAE,CAAGD,CAAC,CAACC,WAAW,EAAE,CAAG,CAAC,CAAC,CAAG,CAAC,EAAC,CAAC,0CAElEN,MAAM,YAApC,+CAAsC,IAA3BO,iBAAe,aACxB,GAAMC,YAAW,CAAGT,OAAO,CAACQ,gBAAe,CAAC,CAC5C,GAAIA,gBAAe,CAACD,WAAW,EAAE,EAAIX,SAAS,CAACW,WAAW,EAAE,CAAE,CAC5D,GAAIX,SAAS,CAACW,WAAW,EAAE,EAAIE,WAAW,CAACF,WAAW,EAAE,CAAE,CACxD,MAAOC,iBAAe,CACxB,CACF,CAAC,IAAM,CACL,KAAM,IAAIT,MAAK,qBAAcH,SAAS,qCAAmC,CAC3E,CACF,CAAC,qDACD,KAAM,IAAIG,MAAK,qBAAcH,SAAS,gDAA8C,CACtF,CAAC,CAAC,CACDZ,IAAI,CAACO,cAAc,CAAC,CACpBP,IAAI,CAAC,SAAC0B,MAAM,CAAK,CAChB,GAAIA,MAAM,CAACd,SAAS,CAAC,CAAE,MAAOc,OAAM,CAACd,SAAS,CAAC,CAC/C,KAAM,IAAIG,MAAK,qBAAcH,SAAS,kCAAgC,CACxE,CAAC,CAAC,CACDT,KAAK,CAAC,SAACC,KAAK,CAAK,CAChBC,OAAO,CAACsB,KAAK,CAAC,oBAAoB,CAAEvB,KAAK,CAAC,CAC1C,KAAMA,MAAK,CACb,CAAC,CAAC,CAER,CAEA;AACA;AACA,QAASwB,iBAAgB,CAACjB,OAAkC,CAAwB,CAClF,kBAAoB3B,YAAY,EAAE,CAA1B6C,OAAO,eAAPA,OAAO,CAEf,cAAkCxC,QAAQ,CAA8C,CAAC,CAAC,CAAC,wCAApFyC,SAAS,eAAEC,YAAY,eAE9B3C,SAAS,CAAC,UAAM,CACd,GAAI,CAACuB,OAAO,EAAIkB,OAAO,GAAK,CAAC,CAAE,OAE/BnB,UAAU,CAACC,OAAO,CAAC,CAChBX,IAAI,CAAC,SAACgC,gBAAgB,QACrBD,aAAY,CAAC,SAACD,SAAS,CAAK,CAC1B,sCACKA,SAAS,wBACXnB,OAAO,CAAGqB,gBAAgB,GAE/B,CAAC,CAAC,GACH,CACA7B,KAAK,CAAC,UAAM,CACX4B,YAAY,CAAC,SAACD,SAAS,CAAK,CAC1B,sCACKA,SAAS,wBACXnB,OAAO,CAAG,IAAI,GAEnB,CAAC,CAAC,CACJ,CAAC,CAAC,CACN,CAAC,CAAE,CAACA,OAAO,CAAEkB,OAAO,CAAC,CAAC,CAEtB,MAAOlB,QAAO,EAAIkB,OAAO,GAAK,CAAC,CAAGC,SAAS,CAACnB,OAAO,CAAC,CAAG,IAAI,CAC7D,CAEA;AACA,MAAO,SAASsB,yBAAwB,CAACtB,OAAkC,CAAW,2BACpF,GAAMuB,cAAa,CAAGN,gBAAgB,CAACjB,OAAO,CAAC,CAC/C,GAAMwB,oBAAmB,CAAGvC,4BAA4B,EAAE,CAC1D,GAAMwC,gBAAe,CAAGjD,mBAAmB,CAACgD,mBAAmB,CAAE,WAAW,CAAE,CAACD,aAAa,SAAbA,aAAa,iBAAbA,aAAa,CAAEG,KAAK,CAAC,CAAC,CACrG;AACA,MAAOC,QAAO,CAACJ,aAAa,EAAI,CAACE,eAAe,CAACG,OAAO,EAAI,wBAAAH,eAAe,CAACV,MAAM,gDAAtB,sBAAyB,CAAC,CAAC,IAAK,KAAK,CAAC,CACpG,CAEA,MAAO,SAASc,uBAAsB,CAAC7B,OAAkC,CAAqC,CAC5G,mBAAoB3B,YAAY,EAAE,CAA1B6C,OAAO,gBAAPA,OAAO,CACf,GAAMK,cAAa,CAAGN,gBAAgB,CAACjB,OAAO,CAAC,CAC/C,GAAM8B,SAAQ,CAAGR,wBAAwB,CAACtB,OAAO,CAAC,CAElD,GAAM+B,IAAG,CAAGb,OAAO,CAAGvC,GAAG,CAACuC,OAAO,CAAC,CAAGc,SAAS,CAC9C,GAAI,CAACD,GAAG,CAAE,MAAOC,UAAS,CAC1B,GAAI,CAACF,QAAQ,EAAI,CAACP,aAAa,CAAE,CAC/B,MAAOnD,eAAc,CAAC6D,aAAa,CAACF,GAAG,CAAExD,IAAI,CAAC2D,MAAM,CAAC,CAAC,CAAC,CAAC,CAC1D,CACA,MAAO9D,eAAc,CAAC6D,aAAa,CAACF,GAAG,CAAExD,IAAI,CAAC2D,MAAM,CAACX,aAAa,CAACY,MAAM,CAAC,CAAC,CAC7E,CAEA,MAAO,SAASC,iBAAgB,CAACpC,OAAkC,CAEjE,CACA;AACA,mBAA8B3B,YAAY,EAAE,CAApCgE,QAAQ,gBAARA,QAAQ,CAAEnB,OAAO,gBAAPA,OAAO,CACzB,GAAMoB,UAAS,CAAGrB,gBAAgB,CAACjB,OAAO,CAAC,CAE3C;AACA,GAAMuC,gBAAkD,CAAGV,sBAAsB,CAAC7B,OAAO,CAAC,CAC1F,GAAMwC,eAAc,CAAGzD,mBAAmB,EAAE,CAC5C,GAAMyC,oBAAmB,CAAGvC,4BAA4B,EAAE,CAE1D,GAAMwD,cAAa,0FAAG,2KAChB,CAACH,SAAS,EAAI,CAACtC,OAAO,EAAI,CAACqC,QAAQ,EAAI,CAACnB,OAAO,EAAI,CAACM,mBAAmB,kEAErEkB,IAAI,CAAG,CAACJ,SAAS,CAACZ,KAAK,CAAE1B,OAAO,CAAEsC,SAAS,CAACH,MAAM,CAAEG,SAAS,CAACK,KAAK,CAAC,iCAEnE,uBAAAnB,mBAAmB,CAACoB,WAAW,EAAC,OAAO,CAAC,6BAAIF,IAAI,SAAE,CAAC,CAAC,GAAC,CAACrD,IAAI,CAAC,SAACwD,iBAAiB,CAAK,CACvF,MAAOrB,oBAAmB,CACvBsB,KAAK,OADDtB,mBAAmB,CACdkB,IAAI,SAAE,CAAEK,KAAK,CAAE,IAAI,CAAEC,QAAQ,CAAElE,kBAAkB,CAAC+D,iBAAiB,CAAE,CAAC,GAAC,CAChFxD,IAAI,CAAC,SAAC4D,QAA6B,CAAK,CACvCT,cAAc,CAACS,QAAQ,CAAE,CACvBC,IAAI,CAAElE,eAAe,CAACmE,KAAK,CAC3BC,SAAS,CAAEpD,OAAO,CAClBqD,YAAY,CAAEd,eAAe,SAAfA,eAAe,iBAAfA,eAAe,CAAEe,QAAQ,CAACC,QAAQ,EAClD,CAAC,CAAC,CACF,MAAON,SAAQ,CAACO,IAAI,CACtB,CAAC,CAAC,CACN,CAAC,CAAC,wDACH,kBAjBKf,cAAa,0CAiBlB,CAED,MAAO,CAAEA,aAAa,CAAbA,aAAc,CAAC,CAC1B"},"metadata":{},"sourceType":"module"}