{"ast":null,"code":"'use strict';\n\nvar trim = require('trim');\nvar decimal = require('is-decimal');\nvar trimTrailingLines = require('trim-trailing-lines');\nvar interrupt = require('../util/interrupt');\nmodule.exports = paragraph;\nvar C_NEWLINE = '\\n';\nvar C_TAB = '\\t';\nvar C_SPACE = ' ';\nvar TAB_SIZE = 4;\n\n/* Tokenise paragraph. */\nfunction paragraph(eat, value, silent) {\n  var self = this;\n  var settings = self.options;\n  var commonmark = settings.commonmark;\n  var gfm = settings.gfm;\n  var tokenizers = self.blockTokenizers;\n  var interruptors = self.interruptParagraph;\n  var index = value.indexOf(C_NEWLINE);\n  var length = value.length;\n  var position;\n  var subvalue;\n  var character;\n  var size;\n  var now;\n  while (index < length) {\n    /* Eat everything if there’s no following newline. */\n    if (index === -1) {\n      index = length;\n      break;\n    }\n\n    /* Stop if the next character is NEWLINE. */\n    if (value.charAt(index + 1) === C_NEWLINE) {\n      break;\n    }\n\n    /* In commonmark-mode, following indented lines\n     * are part of the paragraph. */\n    if (commonmark) {\n      size = 0;\n      position = index + 1;\n      while (position < length) {\n        character = value.charAt(position);\n        if (character === C_TAB) {\n          size = TAB_SIZE;\n          break;\n        } else if (character === C_SPACE) {\n          size++;\n        } else {\n          break;\n        }\n        position++;\n      }\n      if (size >= TAB_SIZE) {\n        index = value.indexOf(C_NEWLINE, index + 1);\n        continue;\n      }\n    }\n    subvalue = value.slice(index + 1);\n\n    /* Check if the following code contains a possible\n     * block. */\n    if (interrupt(interruptors, tokenizers, self, [eat, subvalue, true])) {\n      break;\n    }\n\n    /* Break if the following line starts a list, when\n     * already in a list, or when in commonmark, or when\n     * in gfm mode and the bullet is *not* numeric. */\n    if (tokenizers.list.call(self, eat, subvalue, true) && (self.inList || commonmark || gfm && !decimal(trim.left(subvalue).charAt(0)))) {\n      break;\n    }\n    position = index;\n    index = value.indexOf(C_NEWLINE, index + 1);\n    if (index !== -1 && trim(value.slice(position, index)) === '') {\n      index = position;\n      break;\n    }\n  }\n  subvalue = value.slice(0, index);\n  if (trim(subvalue) === '') {\n    eat(subvalue);\n    return null;\n  }\n\n  /* istanbul ignore if - never used (yet) */\n  if (silent) {\n    return true;\n  }\n  now = eat.now();\n  subvalue = trimTrailingLines(subvalue);\n  return eat(subvalue)({\n    type: 'paragraph',\n    children: self.tokenizeInline(subvalue, now)\n  });\n}","map":{"version":3,"names":["trim","require","decimal","trimTrailingLines","interrupt","module","exports","paragraph","C_NEWLINE","C_TAB","C_SPACE","TAB_SIZE","eat","value","silent","self","settings","options","commonmark","gfm","tokenizers","blockTokenizers","interruptors","interruptParagraph","index","indexOf","length","position","subvalue","character","size","now","charAt","slice","list","call","inList","left","type","children","tokenizeInline"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/remark-parse/lib/tokenize/paragraph.js"],"sourcesContent":["'use strict';\n\nvar trim = require('trim');\nvar decimal = require('is-decimal');\nvar trimTrailingLines = require('trim-trailing-lines');\nvar interrupt = require('../util/interrupt');\n\nmodule.exports = paragraph;\n\nvar C_NEWLINE = '\\n';\nvar C_TAB = '\\t';\nvar C_SPACE = ' ';\n\nvar TAB_SIZE = 4;\n\n/* Tokenise paragraph. */\nfunction paragraph(eat, value, silent) {\n  var self = this;\n  var settings = self.options;\n  var commonmark = settings.commonmark;\n  var gfm = settings.gfm;\n  var tokenizers = self.blockTokenizers;\n  var interruptors = self.interruptParagraph;\n  var index = value.indexOf(C_NEWLINE);\n  var length = value.length;\n  var position;\n  var subvalue;\n  var character;\n  var size;\n  var now;\n\n  while (index < length) {\n    /* Eat everything if there’s no following newline. */\n    if (index === -1) {\n      index = length;\n      break;\n    }\n\n    /* Stop if the next character is NEWLINE. */\n    if (value.charAt(index + 1) === C_NEWLINE) {\n      break;\n    }\n\n    /* In commonmark-mode, following indented lines\n     * are part of the paragraph. */\n    if (commonmark) {\n      size = 0;\n      position = index + 1;\n\n      while (position < length) {\n        character = value.charAt(position);\n\n        if (character === C_TAB) {\n          size = TAB_SIZE;\n          break;\n        } else if (character === C_SPACE) {\n          size++;\n        } else {\n          break;\n        }\n\n        position++;\n      }\n\n      if (size >= TAB_SIZE) {\n        index = value.indexOf(C_NEWLINE, index + 1);\n        continue;\n      }\n    }\n\n    subvalue = value.slice(index + 1);\n\n    /* Check if the following code contains a possible\n     * block. */\n    if (interrupt(interruptors, tokenizers, self, [eat, subvalue, true])) {\n      break;\n    }\n\n    /* Break if the following line starts a list, when\n     * already in a list, or when in commonmark, or when\n     * in gfm mode and the bullet is *not* numeric. */\n    if (\n      tokenizers.list.call(self, eat, subvalue, true) &&\n      (\n        self.inList ||\n        commonmark ||\n        (gfm && !decimal(trim.left(subvalue).charAt(0)))\n      )\n    ) {\n      break;\n    }\n\n    position = index;\n    index = value.indexOf(C_NEWLINE, index + 1);\n\n    if (index !== -1 && trim(value.slice(position, index)) === '') {\n      index = position;\n      break;\n    }\n  }\n\n  subvalue = value.slice(0, index);\n\n  if (trim(subvalue) === '') {\n    eat(subvalue);\n\n    return null;\n  }\n\n  /* istanbul ignore if - never used (yet) */\n  if (silent) {\n    return true;\n  }\n\n  now = eat.now();\n  subvalue = trimTrailingLines(subvalue);\n\n  return eat(subvalue)({\n    type: 'paragraph',\n    children: self.tokenizeInline(subvalue, now)\n  });\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,IAAI,GAAGC,OAAO,CAAC,MAAM,CAAC;AAC1B,IAAIC,OAAO,GAAGD,OAAO,CAAC,YAAY,CAAC;AACnC,IAAIE,iBAAiB,GAAGF,OAAO,CAAC,qBAAqB,CAAC;AACtD,IAAIG,SAAS,GAAGH,OAAO,CAAC,mBAAmB,CAAC;AAE5CI,MAAM,CAACC,OAAO,GAAGC,SAAS;AAE1B,IAAIC,SAAS,GAAG,IAAI;AACpB,IAAIC,KAAK,GAAG,IAAI;AAChB,IAAIC,OAAO,GAAG,GAAG;AAEjB,IAAIC,QAAQ,GAAG,CAAC;;AAEhB;AACA,SAASJ,SAAS,CAACK,GAAG,EAAEC,KAAK,EAAEC,MAAM,EAAE;EACrC,IAAIC,IAAI,GAAG,IAAI;EACf,IAAIC,QAAQ,GAAGD,IAAI,CAACE,OAAO;EAC3B,IAAIC,UAAU,GAAGF,QAAQ,CAACE,UAAU;EACpC,IAAIC,GAAG,GAAGH,QAAQ,CAACG,GAAG;EACtB,IAAIC,UAAU,GAAGL,IAAI,CAACM,eAAe;EACrC,IAAIC,YAAY,GAAGP,IAAI,CAACQ,kBAAkB;EAC1C,IAAIC,KAAK,GAAGX,KAAK,CAACY,OAAO,CAACjB,SAAS,CAAC;EACpC,IAAIkB,MAAM,GAAGb,KAAK,CAACa,MAAM;EACzB,IAAIC,QAAQ;EACZ,IAAIC,QAAQ;EACZ,IAAIC,SAAS;EACb,IAAIC,IAAI;EACR,IAAIC,GAAG;EAEP,OAAOP,KAAK,GAAGE,MAAM,EAAE;IACrB;IACA,IAAIF,KAAK,KAAK,CAAC,CAAC,EAAE;MAChBA,KAAK,GAAGE,MAAM;MACd;IACF;;IAEA;IACA,IAAIb,KAAK,CAACmB,MAAM,CAACR,KAAK,GAAG,CAAC,CAAC,KAAKhB,SAAS,EAAE;MACzC;IACF;;IAEA;AACJ;IACI,IAAIU,UAAU,EAAE;MACdY,IAAI,GAAG,CAAC;MACRH,QAAQ,GAAGH,KAAK,GAAG,CAAC;MAEpB,OAAOG,QAAQ,GAAGD,MAAM,EAAE;QACxBG,SAAS,GAAGhB,KAAK,CAACmB,MAAM,CAACL,QAAQ,CAAC;QAElC,IAAIE,SAAS,KAAKpB,KAAK,EAAE;UACvBqB,IAAI,GAAGnB,QAAQ;UACf;QACF,CAAC,MAAM,IAAIkB,SAAS,KAAKnB,OAAO,EAAE;UAChCoB,IAAI,EAAE;QACR,CAAC,MAAM;UACL;QACF;QAEAH,QAAQ,EAAE;MACZ;MAEA,IAAIG,IAAI,IAAInB,QAAQ,EAAE;QACpBa,KAAK,GAAGX,KAAK,CAACY,OAAO,CAACjB,SAAS,EAAEgB,KAAK,GAAG,CAAC,CAAC;QAC3C;MACF;IACF;IAEAI,QAAQ,GAAGf,KAAK,CAACoB,KAAK,CAACT,KAAK,GAAG,CAAC,CAAC;;IAEjC;AACJ;IACI,IAAIpB,SAAS,CAACkB,YAAY,EAAEF,UAAU,EAAEL,IAAI,EAAE,CAACH,GAAG,EAAEgB,QAAQ,EAAE,IAAI,CAAC,CAAC,EAAE;MACpE;IACF;;IAEA;AACJ;AACA;IACI,IACER,UAAU,CAACc,IAAI,CAACC,IAAI,CAACpB,IAAI,EAAEH,GAAG,EAAEgB,QAAQ,EAAE,IAAI,CAAC,KAE7Cb,IAAI,CAACqB,MAAM,IACXlB,UAAU,IACTC,GAAG,IAAI,CAACjB,OAAO,CAACF,IAAI,CAACqC,IAAI,CAACT,QAAQ,CAAC,CAACI,MAAM,CAAC,CAAC,CAAC,CAAE,CACjD,EACD;MACA;IACF;IAEAL,QAAQ,GAAGH,KAAK;IAChBA,KAAK,GAAGX,KAAK,CAACY,OAAO,CAACjB,SAAS,EAAEgB,KAAK,GAAG,CAAC,CAAC;IAE3C,IAAIA,KAAK,KAAK,CAAC,CAAC,IAAIxB,IAAI,CAACa,KAAK,CAACoB,KAAK,CAACN,QAAQ,EAAEH,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;MAC7DA,KAAK,GAAGG,QAAQ;MAChB;IACF;EACF;EAEAC,QAAQ,GAAGf,KAAK,CAACoB,KAAK,CAAC,CAAC,EAAET,KAAK,CAAC;EAEhC,IAAIxB,IAAI,CAAC4B,QAAQ,CAAC,KAAK,EAAE,EAAE;IACzBhB,GAAG,CAACgB,QAAQ,CAAC;IAEb,OAAO,IAAI;EACb;;EAEA;EACA,IAAId,MAAM,EAAE;IACV,OAAO,IAAI;EACb;EAEAiB,GAAG,GAAGnB,GAAG,CAACmB,GAAG,EAAE;EACfH,QAAQ,GAAGzB,iBAAiB,CAACyB,QAAQ,CAAC;EAEtC,OAAOhB,GAAG,CAACgB,QAAQ,CAAC,CAAC;IACnBU,IAAI,EAAE,WAAW;IACjBC,QAAQ,EAAExB,IAAI,CAACyB,cAAc,CAACZ,QAAQ,EAAEG,GAAG;EAC7C,CAAC,CAAC;AACJ"},"metadata":{},"sourceType":"script"}