{"ast":null,"code":"import _createForOfIteratorHelper from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _regeneratorRuntime from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _toConsumableArray from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { Protocol } from '@uniswap/router-sdk';\nimport { CurrencyAmount, Token, TradeType } from '@uniswap/sdk-core';\nimport { FeeAmount } from '@uniswap/v3-sdk';\nimport _ from 'lodash';\nimport { MixedRouteWithValidQuote, usdGasTokensByChain, V2RouteWithValidQuote, V3RouteWithValidQuote } from '../routers';\nimport { ChainId, log, WRAPPED_NATIVE_CURRENCY } from '../util';\nimport { buildTrade } from './methodParameters';\nexport function getV2NativePool(_x, _x2) {\n  return _getV2NativePool.apply(this, arguments);\n}\nfunction _getV2NativePool() {\n  _getV2NativePool = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(token, poolProvider) {\n    var chainId, weth, poolAccessor, pool;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            chainId = token.chainId;\n            weth = WRAPPED_NATIVE_CURRENCY[chainId];\n            _context.next = 4;\n            return poolProvider.getPools([[weth, token]]);\n          case 4:\n            poolAccessor = _context.sent;\n            pool = poolAccessor.getPool(weth, token);\n            if (!(!pool || pool.reserve0.equalTo(0) || pool.reserve1.equalTo(0))) {\n              _context.next = 9;\n              break;\n            }\n            log.error({\n              weth: weth,\n              token: token,\n              reserve0: pool === null || pool === void 0 ? void 0 : pool.reserve0.toExact(),\n              reserve1: pool === null || pool === void 0 ? void 0 : pool.reserve1.toExact()\n            }, \"Could not find a valid WETH pool with \".concat(token.symbol, \" for computing gas costs.\"));\n            return _context.abrupt(\"return\", null);\n          case 9:\n            return _context.abrupt(\"return\", pool);\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getV2NativePool.apply(this, arguments);\n}\nexport function getHighestLiquidityV3NativePool(_x3, _x4) {\n  return _getHighestLiquidityV3NativePool.apply(this, arguments);\n}\nfunction _getHighestLiquidityV3NativePool() {\n  _getHighestLiquidityV3NativePool = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(token, poolProvider) {\n    var nativeCurrency, nativePools, poolAccessor, pools, maxPool;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            nativeCurrency = WRAPPED_NATIVE_CURRENCY[token.chainId];\n            nativePools = _([FeeAmount.HIGH, FeeAmount.MEDIUM, FeeAmount.LOW]).map(function (feeAmount) {\n              return [nativeCurrency, token, feeAmount];\n            }).value();\n            _context2.next = 4;\n            return poolProvider.getPools(nativePools);\n          case 4:\n            poolAccessor = _context2.sent;\n            pools = _([FeeAmount.HIGH, FeeAmount.MEDIUM, FeeAmount.LOW]).map(function (feeAmount) {\n              return poolAccessor.getPool(nativeCurrency, token, feeAmount);\n            }).compact().value();\n            if (!(pools.length == 0)) {\n              _context2.next = 9;\n              break;\n            }\n            log.error({\n              pools: pools\n            }, \"Could not find a \".concat(nativeCurrency.symbol, \" pool with \").concat(token.symbol, \" for computing gas costs.\"));\n            return _context2.abrupt(\"return\", null);\n          case 9:\n            maxPool = _.maxBy(pools, function (pool) {\n              return pool.liquidity;\n            });\n            return _context2.abrupt(\"return\", maxPool);\n          case 11:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getHighestLiquidityV3NativePool.apply(this, arguments);\n}\nexport function getHighestLiquidityV3USDPool(_x5, _x6) {\n  return _getHighestLiquidityV3USDPool.apply(this, arguments);\n}\nfunction _getHighestLiquidityV3USDPool() {\n  _getHighestLiquidityV3USDPool = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(chainId, poolProvider) {\n    var usdTokens, wrappedCurrency, usdPools, poolAccessor, pools, message, maxPool;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            usdTokens = usdGasTokensByChain[chainId];\n            wrappedCurrency = WRAPPED_NATIVE_CURRENCY[chainId];\n            if (usdTokens) {\n              _context3.next = 4;\n              break;\n            }\n            throw new Error(\"Could not find a USD token for computing gas costs on \".concat(chainId));\n          case 4:\n            usdPools = _([FeeAmount.HIGH, FeeAmount.MEDIUM, FeeAmount.LOW, FeeAmount.LOWEST]).flatMap(function (feeAmount) {\n              return _.map(usdTokens, function (usdToken) {\n                return [wrappedCurrency, usdToken, feeAmount];\n              });\n            }).value();\n            _context3.next = 7;\n            return poolProvider.getPools(usdPools);\n          case 7:\n            poolAccessor = _context3.sent;\n            pools = _([FeeAmount.HIGH, FeeAmount.MEDIUM, FeeAmount.LOW, FeeAmount.LOWEST]).flatMap(function (feeAmount) {\n              var pools = [];\n              var _iterator = _createForOfIteratorHelper(usdTokens),\n                _step;\n              try {\n                for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                  var usdToken = _step.value;\n                  var pool = poolAccessor.getPool(wrappedCurrency, usdToken, feeAmount);\n                  if (pool) {\n                    pools.push(pool);\n                  }\n                }\n              } catch (err) {\n                _iterator.e(err);\n              } finally {\n                _iterator.f();\n              }\n              return pools;\n            }).compact().value();\n            if (!(pools.length == 0)) {\n              _context3.next = 13;\n              break;\n            }\n            message = \"Could not find a USD/\".concat(wrappedCurrency.symbol, \" pool for computing gas costs.\");\n            log.error({\n              pools: pools\n            }, message);\n            throw new Error(message);\n          case 13:\n            maxPool = _.maxBy(pools, function (pool) {\n              return pool.liquidity;\n            });\n            return _context3.abrupt(\"return\", maxPool);\n          case 15:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _getHighestLiquidityV3USDPool.apply(this, arguments);\n}\nexport function getGasCostInUSD(usdPool, costNativeCurrency) {\n  var nativeCurrency = costNativeCurrency.currency;\n  // convert fee into usd\n  var nativeTokenPrice = usdPool.token0.address == nativeCurrency.address ? usdPool.token0Price : usdPool.token1Price;\n  var gasCostUSD = nativeTokenPrice.quote(costNativeCurrency);\n  return gasCostUSD;\n}\nexport function getGasCostInNativeCurrency(nativeCurrency, gasCostInWei) {\n  // wrap fee to native currency\n  var costNativeCurrency = CurrencyAmount.fromRawAmount(nativeCurrency, gasCostInWei.toString());\n  return costNativeCurrency;\n}\nexport function getGasCostInQuoteToken(_x7, _x8, _x9) {\n  return _getGasCostInQuoteToken.apply(this, arguments);\n}\nfunction _getGasCostInQuoteToken() {\n  _getGasCostInQuoteToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(quoteToken, nativePool, costNativeCurrency) {\n    var nativeTokenPrice, gasCostQuoteToken;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            nativeTokenPrice = nativePool.token0.address == quoteToken.address ? nativePool.token1Price : nativePool.token0Price;\n            gasCostQuoteToken = nativeTokenPrice.quote(costNativeCurrency);\n            return _context4.abrupt(\"return\", gasCostQuoteToken);\n          case 3:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _getGasCostInQuoteToken.apply(this, arguments);\n}\nexport function calculateArbitrumToL1FeeFromCalldata(calldata, gasData) {\n  var perL2TxFee = gasData.perL2TxFee,\n    perL1CalldataFee = gasData.perL1CalldataFee;\n  // calculates gas amounts based on bytes of calldata, use 0 as overhead.\n  var l1GasUsed = getL2ToL1GasUsed(calldata, BigNumber.from(0));\n  // multiply by the fee per calldata and add the flat l2 fee\n  var l1Fee = l1GasUsed.mul(perL1CalldataFee);\n  l1Fee = l1Fee.add(perL2TxFee);\n  return [l1GasUsed, l1Fee];\n}\nexport function calculateOptimismToL1FeeFromCalldata(calldata, gasData) {\n  var l1BaseFee = gasData.l1BaseFee,\n    scalar = gasData.scalar,\n    decimals = gasData.decimals,\n    overhead = gasData.overhead;\n  var l1GasUsed = getL2ToL1GasUsed(calldata, overhead);\n  // l1BaseFee is L1 Gas Price on etherscan\n  var l1Fee = l1GasUsed.mul(l1BaseFee);\n  var unscaled = l1Fee.mul(scalar);\n  // scaled = unscaled / (10 ** decimals)\n  var scaledConversion = BigNumber.from(10).pow(decimals);\n  var scaled = unscaled.div(scaledConversion);\n  return [l1GasUsed, scaled];\n}\n// based on the code from the optimism OVM_GasPriceOracle contract\nexport function getL2ToL1GasUsed(data, overhead) {\n  // data is hex encoded\n  var dataArr = data.slice(2).match(/.{1,2}/g);\n  var numBytes = dataArr.length;\n  var count = 0;\n  for (var i = 0; i < numBytes; i += 1) {\n    var byte = parseInt(dataArr[i], 16);\n    if (byte == 0) {\n      count += 4;\n    } else {\n      count += 16;\n    }\n  }\n  var unsigned = overhead.add(count);\n  var signedConversion = 68 * 16;\n  return unsigned.add(signedConversion);\n}\nexport function calculateGasUsed(_x10, _x11, _x12, _x13, _x14, _x15) {\n  return _calculateGasUsed.apply(this, arguments);\n}\nfunction _calculateGasUsed() {\n  _calculateGasUsed = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(chainId, route, simulatedGasUsed, v2PoolProvider, v3PoolProvider, l2GasData) {\n    var quoteToken, gasPriceWei, l2toL1FeeInWei, gasCostInWei, nativeCurrency, costNativeCurrency, usdPool, gasCostUSD, gasCostQuoteToken, nativePools, nativePool, quoteGasAdjusted;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            quoteToken = route.quote.currency.wrapped;\n            gasPriceWei = route.gasPriceWei; // calculate L2 to L1 security fee if relevant\n            l2toL1FeeInWei = BigNumber.from(0);\n            if ([ChainId.ARBITRUM_ONE, ChainId.ARBITRUM_RINKEBY].includes(chainId)) {\n              l2toL1FeeInWei = calculateArbitrumToL1FeeFromCalldata(route.methodParameters.calldata, l2GasData)[1];\n            } else if ([ChainId.OPTIMISM, ChainId.OPTIMISTIC_KOVAN].includes(chainId)) {\n              l2toL1FeeInWei = calculateOptimismToL1FeeFromCalldata(route.methodParameters.calldata, l2GasData)[1];\n            }\n            // add l2 to l1 fee and wrap fee to native currency\n            gasCostInWei = gasPriceWei.mul(simulatedGasUsed).add(l2toL1FeeInWei);\n            nativeCurrency = WRAPPED_NATIVE_CURRENCY[chainId];\n            costNativeCurrency = getGasCostInNativeCurrency(nativeCurrency, gasCostInWei);\n            _context5.next = 9;\n            return getHighestLiquidityV3USDPool(chainId, v3PoolProvider);\n          case 9:\n            usdPool = _context5.sent;\n            _context5.next = 12;\n            return getGasCostInUSD(usdPool, costNativeCurrency);\n          case 12:\n            gasCostUSD = _context5.sent;\n            gasCostQuoteToken = costNativeCurrency; // get fee in terms of quote token\n            if (quoteToken.equals(nativeCurrency)) {\n              _context5.next = 27;\n              break;\n            }\n            _context5.next = 17;\n            return Promise.all([getHighestLiquidityV3NativePool(quoteToken, v3PoolProvider), getV2NativePool(quoteToken, v2PoolProvider)]);\n          case 17:\n            nativePools = _context5.sent;\n            nativePool = nativePools.find(function (pool) {\n              return pool !== null;\n            });\n            if (nativePool) {\n              _context5.next = 24;\n              break;\n            }\n            log.info('Could not find any V2 or V3 pools to convert the cost into the quote token');\n            gasCostQuoteToken = CurrencyAmount.fromRawAmount(quoteToken, 0);\n            _context5.next = 27;\n            break;\n          case 24:\n            _context5.next = 26;\n            return getGasCostInQuoteToken(quoteToken, nativePool, costNativeCurrency);\n          case 26:\n            gasCostQuoteToken = _context5.sent;\n          case 27:\n            if (route.trade.tradeType == TradeType.EXACT_OUTPUT) {\n              // Exact output - need more of tokenIn to get the desired amount of tokenOut\n              quoteGasAdjusted = route.quote.add(gasCostQuoteToken);\n            } else {\n              // Exact input - can get less of tokenOut due to fees\n              quoteGasAdjusted = route.quote.subtract(gasCostQuoteToken);\n            }\n            return _context5.abrupt(\"return\", {\n              estimatedGasUsedUSD: gasCostUSD,\n              estimatedGasUsedQuoteToken: gasCostQuoteToken,\n              quoteGasAdjusted: quoteGasAdjusted\n            });\n          case 29:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n  return _calculateGasUsed.apply(this, arguments);\n}\nexport function initSwapRouteFromExisting(swapRoute, v2PoolProvider, v3PoolProvider, quoteGasAdjusted, estimatedGasUsed, estimatedGasUsedQuoteToken, estimatedGasUsedUSD) {\n  var currencyIn = swapRoute.trade.inputAmount.currency;\n  var currencyOut = swapRoute.trade.outputAmount.currency;\n  var tradeType = swapRoute.trade.tradeType.valueOf() ? TradeType.EXACT_OUTPUT : TradeType.EXACT_INPUT;\n  var routesWithValidQuote = swapRoute.route.map(function (route) {\n    switch (route.protocol) {\n      case Protocol.V3:\n        return new V3RouteWithValidQuote({\n          amount: CurrencyAmount.fromFractionalAmount(route.amount.currency, route.amount.numerator, route.amount.denominator),\n          rawQuote: BigNumber.from(route.rawQuote),\n          sqrtPriceX96AfterList: route.sqrtPriceX96AfterList.map(function (num) {\n            return BigNumber.from(num);\n          }),\n          initializedTicksCrossedList: _toConsumableArray(route.initializedTicksCrossedList),\n          quoterGasEstimate: BigNumber.from(route.gasEstimate),\n          percent: route.percent,\n          route: route.route,\n          gasModel: route.gasModel,\n          quoteToken: new Token(currencyIn.chainId, route.quoteToken.address, route.quoteToken.decimals, route.quoteToken.symbol, route.quoteToken.name),\n          tradeType: tradeType,\n          v3PoolProvider: v3PoolProvider\n        });\n      case Protocol.V2:\n        return new V2RouteWithValidQuote({\n          amount: CurrencyAmount.fromFractionalAmount(route.amount.currency, route.amount.numerator, route.amount.denominator),\n          rawQuote: BigNumber.from(route.rawQuote),\n          percent: route.percent,\n          route: route.route,\n          gasModel: route.gasModel,\n          quoteToken: new Token(currencyIn.chainId, route.quoteToken.address, route.quoteToken.decimals, route.quoteToken.symbol, route.quoteToken.name),\n          tradeType: tradeType,\n          v2PoolProvider: v2PoolProvider\n        });\n      case Protocol.MIXED:\n        return new MixedRouteWithValidQuote({\n          amount: CurrencyAmount.fromFractionalAmount(route.amount.currency, route.amount.numerator, route.amount.denominator),\n          rawQuote: BigNumber.from(route.rawQuote),\n          sqrtPriceX96AfterList: route.sqrtPriceX96AfterList.map(function (num) {\n            return BigNumber.from(num);\n          }),\n          initializedTicksCrossedList: _toConsumableArray(route.initializedTicksCrossedList),\n          quoterGasEstimate: BigNumber.from(route.gasEstimate),\n          percent: route.percent,\n          route: route.route,\n          mixedRouteGasModel: route.gasModel,\n          v2PoolProvider: v2PoolProvider,\n          quoteToken: new Token(currencyIn.chainId, route.quoteToken.address, route.quoteToken.decimals, route.quoteToken.symbol, route.quoteToken.name),\n          tradeType: tradeType,\n          v3PoolProvider: v3PoolProvider\n        });\n    }\n  });\n  var trade = buildTrade(currencyIn, currencyOut, tradeType, routesWithValidQuote);\n  return {\n    quote: swapRoute.quote,\n    quoteGasAdjusted: quoteGasAdjusted,\n    estimatedGasUsed: estimatedGasUsed,\n    estimatedGasUsedQuoteToken: estimatedGasUsedQuoteToken,\n    estimatedGasUsedUSD: estimatedGasUsedUSD,\n    gasPriceWei: BigNumber.from(swapRoute.gasPriceWei),\n    trade: trade,\n    route: routesWithValidQuote,\n    blockNumber: BigNumber.from(swapRoute.blockNumber),\n    methodParameters: swapRoute.methodParameters ? {\n      calldata: swapRoute.methodParameters.calldata,\n      value: swapRoute.methodParameters.value\n    } : undefined\n  };\n}","map":{"version":3,"sources":["../../../src/util/gas-factory-helpers.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { BigNumber } from '@ethersproject/bignumber';\nimport { Protocol } from '@uniswap/router-sdk';\nimport { CurrencyAmount, Token, TradeType } from '@uniswap/sdk-core';\nimport { FeeAmount } from '@uniswap/v3-sdk';\nimport _ from 'lodash';\nimport { MixedRouteWithValidQuote, usdGasTokensByChain, V2RouteWithValidQuote, V3RouteWithValidQuote, } from '../routers';\nimport { ChainId, log, WRAPPED_NATIVE_CURRENCY } from '../util';\nimport { buildTrade } from './methodParameters';\nexport async function getV2NativePool(token, poolProvider) {\n    const chainId = token.chainId;\n    const weth = WRAPPED_NATIVE_CURRENCY[chainId];\n    const poolAccessor = await poolProvider.getPools([[weth, token]]);\n    const pool = poolAccessor.getPool(weth, token);\n    if (!pool || pool.reserve0.equalTo(0) || pool.reserve1.equalTo(0)) {\n        log.error({\n            weth,\n            token,\n            reserve0: pool === null || pool === void 0 ? void 0 : pool.reserve0.toExact(),\n            reserve1: pool === null || pool === void 0 ? void 0 : pool.reserve1.toExact(),\n        }, `Could not find a valid WETH pool with ${token.symbol} for computing gas costs.`);\n        return null;\n    }\n    return pool;\n}\nexport async function getHighestLiquidityV3NativePool(token, poolProvider) {\n    const nativeCurrency = WRAPPED_NATIVE_CURRENCY[token.chainId];\n    const nativePools = _([FeeAmount.HIGH, FeeAmount.MEDIUM, FeeAmount.LOW])\n        .map((feeAmount) => {\n        return [nativeCurrency, token, feeAmount];\n    })\n        .value();\n    const poolAccessor = await poolProvider.getPools(nativePools);\n    const pools = _([FeeAmount.HIGH, FeeAmount.MEDIUM, FeeAmount.LOW])\n        .map((feeAmount) => {\n        return poolAccessor.getPool(nativeCurrency, token, feeAmount);\n    })\n        .compact()\n        .value();\n    if (pools.length == 0) {\n        log.error({ pools }, `Could not find a ${nativeCurrency.symbol} pool with ${token.symbol} for computing gas costs.`);\n        return null;\n    }\n    const maxPool = _.maxBy(pools, (pool) => pool.liquidity);\n    return maxPool;\n}\nexport async function getHighestLiquidityV3USDPool(chainId, poolProvider) {\n    const usdTokens = usdGasTokensByChain[chainId];\n    const wrappedCurrency = WRAPPED_NATIVE_CURRENCY[chainId];\n    if (!usdTokens) {\n        throw new Error(`Could not find a USD token for computing gas costs on ${chainId}`);\n    }\n    const usdPools = _([\n        FeeAmount.HIGH,\n        FeeAmount.MEDIUM,\n        FeeAmount.LOW,\n        FeeAmount.LOWEST,\n    ])\n        .flatMap((feeAmount) => {\n        return _.map(usdTokens, (usdToken) => [\n            wrappedCurrency,\n            usdToken,\n            feeAmount,\n        ]);\n    })\n        .value();\n    const poolAccessor = await poolProvider.getPools(usdPools);\n    const pools = _([\n        FeeAmount.HIGH,\n        FeeAmount.MEDIUM,\n        FeeAmount.LOW,\n        FeeAmount.LOWEST,\n    ])\n        .flatMap((feeAmount) => {\n        const pools = [];\n        for (const usdToken of usdTokens) {\n            const pool = poolAccessor.getPool(wrappedCurrency, usdToken, feeAmount);\n            if (pool) {\n                pools.push(pool);\n            }\n        }\n        return pools;\n    })\n        .compact()\n        .value();\n    if (pools.length == 0) {\n        const message = `Could not find a USD/${wrappedCurrency.symbol} pool for computing gas costs.`;\n        log.error({ pools }, message);\n        throw new Error(message);\n    }\n    const maxPool = _.maxBy(pools, (pool) => pool.liquidity);\n    return maxPool;\n}\nexport function getGasCostInUSD(usdPool, costNativeCurrency) {\n    const nativeCurrency = costNativeCurrency.currency;\n    // convert fee into usd\n    const nativeTokenPrice = usdPool.token0.address == nativeCurrency.address\n        ? usdPool.token0Price\n        : usdPool.token1Price;\n    const gasCostUSD = nativeTokenPrice.quote(costNativeCurrency);\n    return gasCostUSD;\n}\nexport function getGasCostInNativeCurrency(nativeCurrency, gasCostInWei) {\n    // wrap fee to native currency\n    const costNativeCurrency = CurrencyAmount.fromRawAmount(nativeCurrency, gasCostInWei.toString());\n    return costNativeCurrency;\n}\nexport async function getGasCostInQuoteToken(quoteToken, nativePool, costNativeCurrency) {\n    const nativeTokenPrice = nativePool.token0.address == quoteToken.address\n        ? nativePool.token1Price\n        : nativePool.token0Price;\n    const gasCostQuoteToken = nativeTokenPrice.quote(costNativeCurrency);\n    return gasCostQuoteToken;\n}\nexport function calculateArbitrumToL1FeeFromCalldata(calldata, gasData) {\n    const { perL2TxFee, perL1CalldataFee } = gasData;\n    // calculates gas amounts based on bytes of calldata, use 0 as overhead.\n    const l1GasUsed = getL2ToL1GasUsed(calldata, BigNumber.from(0));\n    // multiply by the fee per calldata and add the flat l2 fee\n    let l1Fee = l1GasUsed.mul(perL1CalldataFee);\n    l1Fee = l1Fee.add(perL2TxFee);\n    return [l1GasUsed, l1Fee];\n}\nexport function calculateOptimismToL1FeeFromCalldata(calldata, gasData) {\n    const { l1BaseFee, scalar, decimals, overhead } = gasData;\n    const l1GasUsed = getL2ToL1GasUsed(calldata, overhead);\n    // l1BaseFee is L1 Gas Price on etherscan\n    const l1Fee = l1GasUsed.mul(l1BaseFee);\n    const unscaled = l1Fee.mul(scalar);\n    // scaled = unscaled / (10 ** decimals)\n    const scaledConversion = BigNumber.from(10).pow(decimals);\n    const scaled = unscaled.div(scaledConversion);\n    return [l1GasUsed, scaled];\n}\n// based on the code from the optimism OVM_GasPriceOracle contract\nexport function getL2ToL1GasUsed(data, overhead) {\n    // data is hex encoded\n    const dataArr = data.slice(2).match(/.{1,2}/g);\n    const numBytes = dataArr.length;\n    let count = 0;\n    for (let i = 0; i < numBytes; i += 1) {\n        const byte = parseInt(dataArr[i], 16);\n        if (byte == 0) {\n            count += 4;\n        }\n        else {\n            count += 16;\n        }\n    }\n    const unsigned = overhead.add(count);\n    const signedConversion = 68 * 16;\n    return unsigned.add(signedConversion);\n}\nexport async function calculateGasUsed(chainId, route, simulatedGasUsed, v2PoolProvider, v3PoolProvider, l2GasData) {\n    const quoteToken = route.quote.currency.wrapped;\n    const gasPriceWei = route.gasPriceWei;\n    // calculate L2 to L1 security fee if relevant\n    let l2toL1FeeInWei = BigNumber.from(0);\n    if ([ChainId.ARBITRUM_ONE, ChainId.ARBITRUM_RINKEBY].includes(chainId)) {\n        l2toL1FeeInWei = calculateArbitrumToL1FeeFromCalldata(route.methodParameters.calldata, l2GasData)[1];\n    }\n    else if ([ChainId.OPTIMISM, ChainId.OPTIMISTIC_KOVAN].includes(chainId)) {\n        l2toL1FeeInWei = calculateOptimismToL1FeeFromCalldata(route.methodParameters.calldata, l2GasData)[1];\n    }\n    // add l2 to l1 fee and wrap fee to native currency\n    const gasCostInWei = gasPriceWei.mul(simulatedGasUsed).add(l2toL1FeeInWei);\n    const nativeCurrency = WRAPPED_NATIVE_CURRENCY[chainId];\n    const costNativeCurrency = getGasCostInNativeCurrency(nativeCurrency, gasCostInWei);\n    const usdPool = await getHighestLiquidityV3USDPool(chainId, v3PoolProvider);\n    const gasCostUSD = await getGasCostInUSD(usdPool, costNativeCurrency);\n    let gasCostQuoteToken = costNativeCurrency;\n    // get fee in terms of quote token\n    if (!quoteToken.equals(nativeCurrency)) {\n        const nativePools = await Promise.all([\n            getHighestLiquidityV3NativePool(quoteToken, v3PoolProvider),\n            getV2NativePool(quoteToken, v2PoolProvider),\n        ]);\n        const nativePool = nativePools.find((pool) => pool !== null);\n        if (!nativePool) {\n            log.info('Could not find any V2 or V3 pools to convert the cost into the quote token');\n            gasCostQuoteToken = CurrencyAmount.fromRawAmount(quoteToken, 0);\n        }\n        else {\n            gasCostQuoteToken = await getGasCostInQuoteToken(quoteToken, nativePool, costNativeCurrency);\n        }\n    }\n    // Adjust quote for gas fees\n    let quoteGasAdjusted;\n    if (route.trade.tradeType == TradeType.EXACT_OUTPUT) {\n        // Exact output - need more of tokenIn to get the desired amount of tokenOut\n        quoteGasAdjusted = route.quote.add(gasCostQuoteToken);\n    }\n    else {\n        // Exact input - can get less of tokenOut due to fees\n        quoteGasAdjusted = route.quote.subtract(gasCostQuoteToken);\n    }\n    return {\n        estimatedGasUsedUSD: gasCostUSD,\n        estimatedGasUsedQuoteToken: gasCostQuoteToken,\n        quoteGasAdjusted: quoteGasAdjusted,\n    };\n}\nexport function initSwapRouteFromExisting(swapRoute, v2PoolProvider, v3PoolProvider, quoteGasAdjusted, estimatedGasUsed, estimatedGasUsedQuoteToken, estimatedGasUsedUSD) {\n    const currencyIn = swapRoute.trade.inputAmount.currency;\n    const currencyOut = swapRoute.trade.outputAmount.currency;\n    const tradeType = swapRoute.trade.tradeType.valueOf()\n        ? TradeType.EXACT_OUTPUT\n        : TradeType.EXACT_INPUT;\n    const routesWithValidQuote = swapRoute.route.map((route) => {\n        switch (route.protocol) {\n            case Protocol.V3:\n                return new V3RouteWithValidQuote({\n                    amount: CurrencyAmount.fromFractionalAmount(route.amount.currency, route.amount.numerator, route.amount.denominator),\n                    rawQuote: BigNumber.from(route.rawQuote),\n                    sqrtPriceX96AfterList: route.sqrtPriceX96AfterList.map((num) => BigNumber.from(num)),\n                    initializedTicksCrossedList: [...route.initializedTicksCrossedList],\n                    quoterGasEstimate: BigNumber.from(route.gasEstimate),\n                    percent: route.percent,\n                    route: route.route,\n                    gasModel: route.gasModel,\n                    quoteToken: new Token(currencyIn.chainId, route.quoteToken.address, route.quoteToken.decimals, route.quoteToken.symbol, route.quoteToken.name),\n                    tradeType: tradeType,\n                    v3PoolProvider: v3PoolProvider,\n                });\n            case Protocol.V2:\n                return new V2RouteWithValidQuote({\n                    amount: CurrencyAmount.fromFractionalAmount(route.amount.currency, route.amount.numerator, route.amount.denominator),\n                    rawQuote: BigNumber.from(route.rawQuote),\n                    percent: route.percent,\n                    route: route.route,\n                    gasModel: route.gasModel,\n                    quoteToken: new Token(currencyIn.chainId, route.quoteToken.address, route.quoteToken.decimals, route.quoteToken.symbol, route.quoteToken.name),\n                    tradeType: tradeType,\n                    v2PoolProvider: v2PoolProvider,\n                });\n            case Protocol.MIXED:\n                return new MixedRouteWithValidQuote({\n                    amount: CurrencyAmount.fromFractionalAmount(route.amount.currency, route.amount.numerator, route.amount.denominator),\n                    rawQuote: BigNumber.from(route.rawQuote),\n                    sqrtPriceX96AfterList: route.sqrtPriceX96AfterList.map((num) => BigNumber.from(num)),\n                    initializedTicksCrossedList: [...route.initializedTicksCrossedList],\n                    quoterGasEstimate: BigNumber.from(route.gasEstimate),\n                    percent: route.percent,\n                    route: route.route,\n                    mixedRouteGasModel: route.gasModel,\n                    v2PoolProvider,\n                    quoteToken: new Token(currencyIn.chainId, route.quoteToken.address, route.quoteToken.decimals, route.quoteToken.symbol, route.quoteToken.name),\n                    tradeType: tradeType,\n                    v3PoolProvider: v3PoolProvider,\n                });\n        }\n    });\n    const trade = buildTrade(currencyIn, currencyOut, tradeType, routesWithValidQuote);\n    return {\n        quote: swapRoute.quote,\n        quoteGasAdjusted,\n        estimatedGasUsed,\n        estimatedGasUsedQuoteToken,\n        estimatedGasUsedUSD,\n        gasPriceWei: BigNumber.from(swapRoute.gasPriceWei),\n        trade,\n        route: routesWithValidQuote,\n        blockNumber: BigNumber.from(swapRoute.blockNumber),\n        methodParameters: swapRoute.methodParameters\n            ? {\n                calldata: swapRoute.methodParameters.calldata,\n                value: swapRoute.methodParameters.value,\n            }\n            : undefined,\n    };\n}\n//# sourceMappingURL=data:application/json;base64,"]},"metadata":{},"sourceType":"module"}