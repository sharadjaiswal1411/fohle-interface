{"ast":null,"code":"var _jsxFileName = \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/state/transactions/updater.tsx\",\n  _s = $RefreshSig$();\nimport { sendAnalyticsEvent } from '@uniswap/analytics';\nimport { EventName } from '@uniswap/analytics-events';\nimport { useWeb3React } from '@web3-react/core';\nimport { DEFAULT_TXN_DISMISS_MS, L2_TXN_DISMISS_MS } from 'constants/misc';\nimport LibUpdater from 'lib/hooks/transactions/updater';\nimport { formatPercentInBasisPointsNumber, formatToDecimal, getTokenAddress } from 'lib/utils/analytics';\nimport { useCallback, useMemo } from 'react';\nimport { useAppDispatch, useAppSelector } from 'state/hooks';\nimport { TransactionType } from 'state/transactions/types';\nimport { computeRealizedPriceImpact } from 'utils/prices';\nimport { L2_CHAIN_IDS } from '../../constants/chains';\nimport { useDerivedSwapInfo } from '../../state/swap/hooks';\nimport { useAddPopup } from '../application/hooks';\nimport { checkedTransaction, finalizeTransaction } from './reducer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst formatAnalyticsEventProperties = _ref => {\n  let {\n    trade,\n    hash,\n    allowedSlippage,\n    succeeded\n  } = _ref;\n  return {\n    estimated_network_fee_usd: trade.gasUseEstimateUSD ? formatToDecimal(trade.gasUseEstimateUSD, 2) : undefined,\n    transaction_hash: hash,\n    token_in_address: getTokenAddress(trade.inputAmount.currency),\n    token_out_address: getTokenAddress(trade.outputAmount.currency),\n    token_in_symbol: trade.inputAmount.currency.symbol,\n    token_out_symbol: trade.outputAmount.currency.symbol,\n    token_in_amount: formatToDecimal(trade.inputAmount, trade.inputAmount.currency.decimals),\n    token_out_amount: formatToDecimal(trade.outputAmount, trade.outputAmount.currency.decimals),\n    price_impact_basis_points: formatPercentInBasisPointsNumber(computeRealizedPriceImpact(trade)),\n    allowed_slippage_basis_points: formatPercentInBasisPointsNumber(allowedSlippage),\n    chain_id: trade.inputAmount.currency.chainId === trade.outputAmount.currency.chainId ? trade.inputAmount.currency.chainId : undefined,\n    swap_quote_block_number: trade.blockNumber,\n    succeeded\n  };\n};\nexport default function Updater() {\n  _s();\n  const {\n    chainId\n  } = useWeb3React();\n  const addPopup = useAddPopup();\n  // speed up popup dismisall time if on L2\n  const isL2 = Boolean(chainId && L2_CHAIN_IDS.includes(chainId));\n  const transactions = useAppSelector(state => state.transactions);\n  const {\n    trade: {\n      trade\n    },\n    allowedSlippage\n  } = useDerivedSwapInfo();\n  const dispatch = useAppDispatch();\n  const onCheck = useCallback(_ref2 => {\n    let {\n      chainId,\n      hash,\n      blockNumber\n    } = _ref2;\n    return dispatch(checkedTransaction({\n      chainId,\n      hash,\n      blockNumber\n    }));\n  }, [dispatch]);\n  const onReceipt = useCallback(_ref3 => {\n    var _transactions$chainId;\n    let {\n      chainId,\n      hash,\n      receipt\n    } = _ref3;\n    dispatch(finalizeTransaction({\n      chainId,\n      hash,\n      receipt: {\n        blockHash: receipt.blockHash,\n        blockNumber: receipt.blockNumber,\n        contractAddress: receipt.contractAddress,\n        from: receipt.from,\n        status: receipt.status,\n        to: receipt.to,\n        transactionHash: receipt.transactionHash,\n        transactionIndex: receipt.transactionIndex\n      }\n    }));\n    const tx = (_transactions$chainId = transactions[chainId]) === null || _transactions$chainId === void 0 ? void 0 : _transactions$chainId[hash];\n    if (tx.info.type === TransactionType.SWAP && trade) {\n      sendAnalyticsEvent(EventName.SWAP_TRANSACTION_COMPLETED, formatAnalyticsEventProperties({\n        trade,\n        hash,\n        allowedSlippage,\n        succeeded: receipt.status === 1\n      }));\n    }\n    addPopup({\n      txn: {\n        hash\n      }\n    }, hash, isL2 ? L2_TXN_DISMISS_MS : DEFAULT_TXN_DISMISS_MS);\n  }, [addPopup, allowedSlippage, dispatch, isL2, trade, transactions]);\n  const pendingTransactions = useMemo(() => {\n    var _transactions$chainId2;\n    return chainId ? (_transactions$chainId2 = transactions[chainId]) !== null && _transactions$chainId2 !== void 0 ? _transactions$chainId2 : {} : {};\n  }, [chainId, transactions]);\n  return /*#__PURE__*/_jsxDEV(LibUpdater, {\n    pendingTransactions: pendingTransactions,\n    onCheck: onCheck,\n    onReceipt: onReceipt\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 10\n  }, this);\n}\n_s(Updater, \"q6RBQaFdMOf4UTiwRzLhzHWQqK8=\", false, function () {\n  return [useWeb3React, useAddPopup, useAppSelector, useDerivedSwapInfo, useAppDispatch];\n});\n_c = Updater;\nvar _c;\n$RefreshReg$(_c, \"Updater\");","map":{"version":3,"names":["sendAnalyticsEvent","EventName","useWeb3React","DEFAULT_TXN_DISMISS_MS","L2_TXN_DISMISS_MS","LibUpdater","formatPercentInBasisPointsNumber","formatToDecimal","getTokenAddress","useCallback","useMemo","useAppDispatch","useAppSelector","TransactionType","computeRealizedPriceImpact","L2_CHAIN_IDS","useDerivedSwapInfo","useAddPopup","checkedTransaction","finalizeTransaction","formatAnalyticsEventProperties","trade","hash","allowedSlippage","succeeded","estimated_network_fee_usd","gasUseEstimateUSD","undefined","transaction_hash","token_in_address","inputAmount","currency","token_out_address","outputAmount","token_in_symbol","symbol","token_out_symbol","token_in_amount","decimals","token_out_amount","price_impact_basis_points","allowed_slippage_basis_points","chain_id","chainId","swap_quote_block_number","blockNumber","Updater","addPopup","isL2","Boolean","includes","transactions","state","dispatch","onCheck","onReceipt","receipt","blockHash","contractAddress","from","status","to","transactionHash","transactionIndex","tx","info","type","SWAP","SWAP_TRANSACTION_COMPLETED","txn","pendingTransactions"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/state/transactions/updater.tsx"],"sourcesContent":["import { sendAnalyticsEvent } from '@uniswap/analytics'\nimport { EventName } from '@uniswap/analytics-events'\nimport { Currency, Percent, TradeType } from '@uniswap/sdk-core'\nimport { useWeb3React } from '@web3-react/core'\nimport { DEFAULT_TXN_DISMISS_MS, L2_TXN_DISMISS_MS } from 'constants/misc'\nimport LibUpdater from 'lib/hooks/transactions/updater'\nimport { formatPercentInBasisPointsNumber, formatToDecimal, getTokenAddress } from 'lib/utils/analytics'\nimport { useCallback, useMemo } from 'react'\nimport { useAppDispatch, useAppSelector } from 'state/hooks'\nimport { InterfaceTrade } from 'state/routing/types'\nimport { TransactionType } from 'state/transactions/types'\nimport { computeRealizedPriceImpact } from 'utils/prices'\n\nimport { L2_CHAIN_IDS } from '../../constants/chains'\nimport { useDerivedSwapInfo } from '../../state/swap/hooks'\nimport { useAddPopup } from '../application/hooks'\nimport { checkedTransaction, finalizeTransaction } from './reducer'\nimport { SerializableTransactionReceipt } from './types'\n\ninterface AnalyticsEventProps {\n  trade: InterfaceTrade<Currency, Currency, TradeType>\n  hash: string | undefined\n  allowedSlippage: Percent\n  succeeded: boolean\n}\n\nconst formatAnalyticsEventProperties = ({ trade, hash, allowedSlippage, succeeded }: AnalyticsEventProps) => ({\n  estimated_network_fee_usd: trade.gasUseEstimateUSD ? formatToDecimal(trade.gasUseEstimateUSD, 2) : undefined,\n  transaction_hash: hash,\n  token_in_address: getTokenAddress(trade.inputAmount.currency),\n  token_out_address: getTokenAddress(trade.outputAmount.currency),\n  token_in_symbol: trade.inputAmount.currency.symbol,\n  token_out_symbol: trade.outputAmount.currency.symbol,\n  token_in_amount: formatToDecimal(trade.inputAmount, trade.inputAmount.currency.decimals),\n  token_out_amount: formatToDecimal(trade.outputAmount, trade.outputAmount.currency.decimals),\n  price_impact_basis_points: formatPercentInBasisPointsNumber(computeRealizedPriceImpact(trade)),\n  allowed_slippage_basis_points: formatPercentInBasisPointsNumber(allowedSlippage),\n  chain_id:\n    trade.inputAmount.currency.chainId === trade.outputAmount.currency.chainId\n      ? trade.inputAmount.currency.chainId\n      : undefined,\n  swap_quote_block_number: trade.blockNumber,\n  succeeded,\n})\n\nexport default function Updater() {\n  const { chainId } = useWeb3React()\n  const addPopup = useAddPopup()\n  // speed up popup dismisall time if on L2\n  const isL2 = Boolean(chainId && L2_CHAIN_IDS.includes(chainId))\n  const transactions = useAppSelector((state) => state.transactions)\n  const {\n    trade: { trade },\n    allowedSlippage,\n  } = useDerivedSwapInfo()\n\n  const dispatch = useAppDispatch()\n  const onCheck = useCallback(\n    ({ chainId, hash, blockNumber }: { chainId: number; hash: string; blockNumber: number }) =>\n      dispatch(checkedTransaction({ chainId, hash, blockNumber })),\n    [dispatch]\n  )\n  const onReceipt = useCallback(\n    ({ chainId, hash, receipt }: { chainId: number; hash: string; receipt: SerializableTransactionReceipt }) => {\n      dispatch(\n        finalizeTransaction({\n          chainId,\n          hash,\n          receipt: {\n            blockHash: receipt.blockHash,\n            blockNumber: receipt.blockNumber,\n            contractAddress: receipt.contractAddress,\n            from: receipt.from,\n            status: receipt.status,\n            to: receipt.to,\n            transactionHash: receipt.transactionHash,\n            transactionIndex: receipt.transactionIndex,\n          },\n        })\n      )\n\n      const tx = transactions[chainId]?.[hash]\n\n      if (tx.info.type === TransactionType.SWAP && trade) {\n        sendAnalyticsEvent(\n          EventName.SWAP_TRANSACTION_COMPLETED,\n          formatAnalyticsEventProperties({\n            trade,\n            hash,\n            allowedSlippage,\n            succeeded: receipt.status === 1,\n          })\n        )\n      }\n      addPopup(\n        {\n          txn: { hash },\n        },\n        hash,\n        isL2 ? L2_TXN_DISMISS_MS : DEFAULT_TXN_DISMISS_MS\n      )\n    },\n    [addPopup, allowedSlippage, dispatch, isL2, trade, transactions]\n  )\n\n  const pendingTransactions = useMemo(() => (chainId ? transactions[chainId] ?? {} : {}), [chainId, transactions])\n\n  return <LibUpdater pendingTransactions={pendingTransactions} onCheck={onCheck} onReceipt={onReceipt} />\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}