{"ast":null,"code":"const EXPLORER_HOSTNAMES = {\n  'etherscan.io': true,\n  'ropsten.etherscan.io': true,\n  'rinkeby.etherscan.io': true,\n  'kovan.etherscan.io': true,\n  'goerli.etherscan.io': true,\n  'optimistic.etherscan.io': true,\n  'goerli-optimism.etherscan.io': true,\n  'rinkeby-explorer.arbitrum.io': true,\n  'arbiscan.io': true\n};\n\n/**\n * Returns the anonymized version of the given href, i.e. one that does not leak user information\n * @param href the link to anonymize, i.e. remove any personal data from\n * @return string anonymized version of the given href\n */\nexport function anonymizeLink(href) {\n  try {\n    const url = new URL(href);\n    if (EXPLORER_HOSTNAMES[url.hostname]) {\n      const pathPieces = url.pathname.split('/');\n      const anonymizedPath = pathPieces.map(pc => /0x[a-fA-F0-9]+/.test(pc) ? '***' : pc).join('/');\n      return `${url.protocol}//${url.hostname}${anonymizedPath}`;\n    }\n    return href;\n  } catch (error) {\n    return href;\n  }\n}","map":{"version":3,"names":["EXPLORER_HOSTNAMES","anonymizeLink","href","url","URL","hostname","pathPieces","pathname","split","anonymizedPath","map","pc","test","join","protocol","error"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/utils/anonymizeLink.ts"],"sourcesContent":["const EXPLORER_HOSTNAMES: { [hostname: string]: true } = {\n  'etherscan.io': true,\n  'ropsten.etherscan.io': true,\n  'rinkeby.etherscan.io': true,\n  'kovan.etherscan.io': true,\n  'goerli.etherscan.io': true,\n  'optimistic.etherscan.io': true,\n  'goerli-optimism.etherscan.io': true,\n  'rinkeby-explorer.arbitrum.io': true,\n  'arbiscan.io': true,\n}\n\n/**\n * Returns the anonymized version of the given href, i.e. one that does not leak user information\n * @param href the link to anonymize, i.e. remove any personal data from\n * @return string anonymized version of the given href\n */\nexport function anonymizeLink(href: string): string {\n  try {\n    const url = new URL(href)\n    if (EXPLORER_HOSTNAMES[url.hostname]) {\n      const pathPieces = url.pathname.split('/')\n\n      const anonymizedPath = pathPieces.map((pc) => (/0x[a-fA-F0-9]+/.test(pc) ? '***' : pc)).join('/')\n\n      return `${url.protocol}//${url.hostname}${anonymizedPath}`\n    }\n    return href\n  } catch (error) {\n    return href\n  }\n}\n"],"mappings":"AAAA,MAAMA,kBAAgD,GAAG;EACvD,cAAc,EAAE,IAAI;EACpB,sBAAsB,EAAE,IAAI;EAC5B,sBAAsB,EAAE,IAAI;EAC5B,oBAAoB,EAAE,IAAI;EAC1B,qBAAqB,EAAE,IAAI;EAC3B,yBAAyB,EAAE,IAAI;EAC/B,8BAA8B,EAAE,IAAI;EACpC,8BAA8B,EAAE,IAAI;EACpC,aAAa,EAAE;AACjB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,aAAa,CAACC,IAAY,EAAU;EAClD,IAAI;IACF,MAAMC,GAAG,GAAG,IAAIC,GAAG,CAACF,IAAI,CAAC;IACzB,IAAIF,kBAAkB,CAACG,GAAG,CAACE,QAAQ,CAAC,EAAE;MACpC,MAAMC,UAAU,GAAGH,GAAG,CAACI,QAAQ,CAACC,KAAK,CAAC,GAAG,CAAC;MAE1C,MAAMC,cAAc,GAAGH,UAAU,CAACI,GAAG,CAAEC,EAAE,IAAM,gBAAgB,CAACC,IAAI,CAACD,EAAE,CAAC,GAAG,KAAK,GAAGA,EAAG,CAAC,CAACE,IAAI,CAAC,GAAG,CAAC;MAEjG,OAAQ,GAAEV,GAAG,CAACW,QAAS,KAAIX,GAAG,CAACE,QAAS,GAAEI,cAAe,EAAC;IAC5D;IACA,OAAOP,IAAI;EACb,CAAC,CAAC,OAAOa,KAAK,EAAE;IACd,OAAOb,IAAI;EACb;AACF"},"metadata":{},"sourceType":"module"}