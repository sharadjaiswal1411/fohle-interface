{"ast":null,"code":"import _classCallCheck from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Protocol } from '@uniswap/router-sdk';\nimport { TradeType } from '@uniswap/sdk-core';\nimport { Pool } from '@uniswap/v3-sdk';\nimport _ from 'lodash';\nimport { CurrencyAmount } from '../../../util/amounts';\nimport { routeToString } from '../../../util/routes';\n/**\n * Represents a quote for swapping on a V2 only route. Contains all information\n * such as the route used, the amount specified by the user, the type of quote\n * (exact in or exact out), the quote itself, and gas estimates.\n *\n * @export\n * @class V2RouteWithValidQuote\n */\nexport var V2RouteWithValidQuote = /*#__PURE__*/function () {\n  function V2RouteWithValidQuote(_ref) {\n    var amount = _ref.amount,\n      rawQuote = _ref.rawQuote,\n      percent = _ref.percent,\n      route = _ref.route,\n      gasModel = _ref.gasModel,\n      quoteToken = _ref.quoteToken,\n      tradeType = _ref.tradeType,\n      v2PoolProvider = _ref.v2PoolProvider;\n    _classCallCheck(this, V2RouteWithValidQuote);\n    this.protocol = Protocol.V2;\n    this.amount = amount;\n    this.rawQuote = rawQuote;\n    this.quote = CurrencyAmount.fromRawAmount(quoteToken, rawQuote.toString());\n    this.percent = percent;\n    this.route = route;\n    this.gasModel = gasModel;\n    this.quoteToken = quoteToken;\n    this.tradeType = tradeType;\n    var _this$gasModel$estima = this.gasModel.estimateGasCost(this),\n      gasEstimate = _this$gasModel$estima.gasEstimate,\n      gasCostInToken = _this$gasModel$estima.gasCostInToken,\n      gasCostInUSD = _this$gasModel$estima.gasCostInUSD;\n    this.gasCostInToken = gasCostInToken;\n    this.gasCostInUSD = gasCostInUSD;\n    this.gasEstimate = gasEstimate;\n    // If its exact out, we need to request *more* of the input token to account for the gas.\n    if (this.tradeType == TradeType.EXACT_INPUT) {\n      var quoteGasAdjusted = this.quote.subtract(gasCostInToken);\n      this.quoteAdjustedForGas = quoteGasAdjusted;\n    } else {\n      var _quoteGasAdjusted = this.quote.add(gasCostInToken);\n      this.quoteAdjustedForGas = _quoteGasAdjusted;\n    }\n    this.poolAddresses = _.map(route.pairs, function (p) {\n      return v2PoolProvider.getPoolAddress(p.token0, p.token1).poolAddress;\n    });\n    this.tokenPath = this.route.path;\n  }\n  _createClass(V2RouteWithValidQuote, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"\".concat(this.percent.toFixed(2), \"% QuoteGasAdj[\").concat(this.quoteAdjustedForGas.toExact(), \"] Quote[\").concat(this.quote.toExact(), \"] Gas[\").concat(this.gasEstimate.toString(), \"] = \").concat(routeToString(this.route));\n    }\n  }]);\n  return V2RouteWithValidQuote;\n}();\n/**\n * Represents a quote for swapping on a V3 only route. Contains all information\n * such as the route used, the amount specified by the user, the type of quote\n * (exact in or exact out), the quote itself, and gas estimates.\n *\n * @export\n * @class V3RouteWithValidQuote\n */\nexport var V3RouteWithValidQuote = /*#__PURE__*/function () {\n  function V3RouteWithValidQuote(_ref2) {\n    var amount = _ref2.amount,\n      rawQuote = _ref2.rawQuote,\n      sqrtPriceX96AfterList = _ref2.sqrtPriceX96AfterList,\n      initializedTicksCrossedList = _ref2.initializedTicksCrossedList,\n      quoterGasEstimate = _ref2.quoterGasEstimate,\n      percent = _ref2.percent,\n      route = _ref2.route,\n      gasModel = _ref2.gasModel,\n      quoteToken = _ref2.quoteToken,\n      tradeType = _ref2.tradeType,\n      v3PoolProvider = _ref2.v3PoolProvider;\n    _classCallCheck(this, V3RouteWithValidQuote);\n    this.protocol = Protocol.V3;\n    this.amount = amount;\n    this.rawQuote = rawQuote;\n    this.sqrtPriceX96AfterList = sqrtPriceX96AfterList;\n    this.initializedTicksCrossedList = initializedTicksCrossedList;\n    this.quoterGasEstimate = quoterGasEstimate;\n    this.quote = CurrencyAmount.fromRawAmount(quoteToken, rawQuote.toString());\n    this.percent = percent;\n    this.route = route;\n    this.gasModel = gasModel;\n    this.quoteToken = quoteToken;\n    this.tradeType = tradeType;\n    var _this$gasModel$estima2 = this.gasModel.estimateGasCost(this),\n      gasEstimate = _this$gasModel$estima2.gasEstimate,\n      gasCostInToken = _this$gasModel$estima2.gasCostInToken,\n      gasCostInUSD = _this$gasModel$estima2.gasCostInUSD;\n    this.gasCostInToken = gasCostInToken;\n    this.gasCostInUSD = gasCostInUSD;\n    this.gasEstimate = gasEstimate;\n    // If its exact out, we need to request *more* of the input token to account for the gas.\n    if (this.tradeType == TradeType.EXACT_INPUT) {\n      var quoteGasAdjusted = this.quote.subtract(gasCostInToken);\n      this.quoteAdjustedForGas = quoteGasAdjusted;\n    } else {\n      var _quoteGasAdjusted2 = this.quote.add(gasCostInToken);\n      this.quoteAdjustedForGas = _quoteGasAdjusted2;\n    }\n    this.poolAddresses = _.map(route.pools, function (p) {\n      return v3PoolProvider.getPoolAddress(p.token0, p.token1, p.fee).poolAddress;\n    });\n    this.tokenPath = this.route.tokenPath;\n  }\n  _createClass(V3RouteWithValidQuote, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"\".concat(this.percent.toFixed(2), \"% QuoteGasAdj[\").concat(this.quoteAdjustedForGas.toExact(), \"] Quote[\").concat(this.quote.toExact(), \"] Gas[\").concat(this.gasEstimate.toString(), \"] = \").concat(routeToString(this.route));\n    }\n  }]);\n  return V3RouteWithValidQuote;\n}();\n/**\n * Represents a quote for swapping on a Mixed Route. Contains all information\n * such as the route used, the amount specified by the user, the type of quote\n * (exact in or exact out), the quote itself, and gas estimates.\n *\n * @export\n * @class MixedRouteWithValidQuote\n */\nexport var MixedRouteWithValidQuote = /*#__PURE__*/function () {\n  function MixedRouteWithValidQuote(_ref3) {\n    var amount = _ref3.amount,\n      rawQuote = _ref3.rawQuote,\n      sqrtPriceX96AfterList = _ref3.sqrtPriceX96AfterList,\n      initializedTicksCrossedList = _ref3.initializedTicksCrossedList,\n      quoterGasEstimate = _ref3.quoterGasEstimate,\n      percent = _ref3.percent,\n      route = _ref3.route,\n      mixedRouteGasModel = _ref3.mixedRouteGasModel,\n      quoteToken = _ref3.quoteToken,\n      tradeType = _ref3.tradeType,\n      v3PoolProvider = _ref3.v3PoolProvider,\n      v2PoolProvider = _ref3.v2PoolProvider;\n    _classCallCheck(this, MixedRouteWithValidQuote);\n    this.protocol = Protocol.MIXED;\n    this.amount = amount;\n    this.rawQuote = rawQuote;\n    this.sqrtPriceX96AfterList = sqrtPriceX96AfterList;\n    this.initializedTicksCrossedList = initializedTicksCrossedList;\n    this.quoterGasEstimate = quoterGasEstimate;\n    this.quote = CurrencyAmount.fromRawAmount(quoteToken, rawQuote.toString());\n    this.percent = percent;\n    this.route = route;\n    this.gasModel = mixedRouteGasModel;\n    this.quoteToken = quoteToken;\n    this.tradeType = tradeType;\n    var _this$gasModel$estima3 = this.gasModel.estimateGasCost(this),\n      gasEstimate = _this$gasModel$estima3.gasEstimate,\n      gasCostInToken = _this$gasModel$estima3.gasCostInToken,\n      gasCostInUSD = _this$gasModel$estima3.gasCostInUSD;\n    this.gasCostInToken = gasCostInToken;\n    this.gasCostInUSD = gasCostInUSD;\n    this.gasEstimate = gasEstimate;\n    // If its exact out, we need to request *more* of the input token to account for the gas.\n    if (this.tradeType == TradeType.EXACT_INPUT) {\n      var quoteGasAdjusted = this.quote.subtract(gasCostInToken);\n      this.quoteAdjustedForGas = quoteGasAdjusted;\n    } else {\n      var _quoteGasAdjusted3 = this.quote.add(gasCostInToken);\n      this.quoteAdjustedForGas = _quoteGasAdjusted3;\n    }\n    this.poolAddresses = _.map(route.pools, function (p) {\n      return p instanceof Pool ? v3PoolProvider.getPoolAddress(p.token0, p.token1, p.fee).poolAddress : v2PoolProvider.getPoolAddress(p.token0, p.token1).poolAddress;\n    });\n    this.tokenPath = this.route.path;\n  }\n  _createClass(MixedRouteWithValidQuote, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"\".concat(this.percent.toFixed(2), \"% QuoteGasAdj[\").concat(this.quoteAdjustedForGas.toExact(), \"] Quote[\").concat(this.quote.toExact(), \"] Gas[\").concat(this.gasEstimate.toString(), \"] = \").concat(routeToString(this.route));\n    }\n  }]);\n  return MixedRouteWithValidQuote;\n}();","map":{"version":3,"sources":["../../../../../src/routers/alpha-router/entities/route-with-valid-quote.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Protocol } from '@uniswap/router-sdk';\nimport { TradeType } from '@uniswap/sdk-core';\nimport { Pool } from '@uniswap/v3-sdk';\nimport _ from 'lodash';\nimport { CurrencyAmount } from '../../../util/amounts';\nimport { routeToString } from '../../../util/routes';\n/**\n * Represents a quote for swapping on a V2 only route. Contains all information\n * such as the route used, the amount specified by the user, the type of quote\n * (exact in or exact out), the quote itself, and gas estimates.\n *\n * @export\n * @class V2RouteWithValidQuote\n */\nexport class V2RouteWithValidQuote {\n    constructor({ amount, rawQuote, percent, route, gasModel, quoteToken, tradeType, v2PoolProvider, }) {\n        this.protocol = Protocol.V2;\n        this.amount = amount;\n        this.rawQuote = rawQuote;\n        this.quote = CurrencyAmount.fromRawAmount(quoteToken, rawQuote.toString());\n        this.percent = percent;\n        this.route = route;\n        this.gasModel = gasModel;\n        this.quoteToken = quoteToken;\n        this.tradeType = tradeType;\n        const { gasEstimate, gasCostInToken, gasCostInUSD } = this.gasModel.estimateGasCost(this);\n        this.gasCostInToken = gasCostInToken;\n        this.gasCostInUSD = gasCostInUSD;\n        this.gasEstimate = gasEstimate;\n        // If its exact out, we need to request *more* of the input token to account for the gas.\n        if (this.tradeType == TradeType.EXACT_INPUT) {\n            const quoteGasAdjusted = this.quote.subtract(gasCostInToken);\n            this.quoteAdjustedForGas = quoteGasAdjusted;\n        }\n        else {\n            const quoteGasAdjusted = this.quote.add(gasCostInToken);\n            this.quoteAdjustedForGas = quoteGasAdjusted;\n        }\n        this.poolAddresses = _.map(route.pairs, (p) => v2PoolProvider.getPoolAddress(p.token0, p.token1).poolAddress);\n        this.tokenPath = this.route.path;\n    }\n    toString() {\n        return `${this.percent.toFixed(2)}% QuoteGasAdj[${this.quoteAdjustedForGas.toExact()}] Quote[${this.quote.toExact()}] Gas[${this.gasEstimate.toString()}] = ${routeToString(this.route)}`;\n    }\n}\n/**\n * Represents a quote for swapping on a V3 only route. Contains all information\n * such as the route used, the amount specified by the user, the type of quote\n * (exact in or exact out), the quote itself, and gas estimates.\n *\n * @export\n * @class V3RouteWithValidQuote\n */\nexport class V3RouteWithValidQuote {\n    constructor({ amount, rawQuote, sqrtPriceX96AfterList, initializedTicksCrossedList, quoterGasEstimate, percent, route, gasModel, quoteToken, tradeType, v3PoolProvider, }) {\n        this.protocol = Protocol.V3;\n        this.amount = amount;\n        this.rawQuote = rawQuote;\n        this.sqrtPriceX96AfterList = sqrtPriceX96AfterList;\n        this.initializedTicksCrossedList = initializedTicksCrossedList;\n        this.quoterGasEstimate = quoterGasEstimate;\n        this.quote = CurrencyAmount.fromRawAmount(quoteToken, rawQuote.toString());\n        this.percent = percent;\n        this.route = route;\n        this.gasModel = gasModel;\n        this.quoteToken = quoteToken;\n        this.tradeType = tradeType;\n        const { gasEstimate, gasCostInToken, gasCostInUSD } = this.gasModel.estimateGasCost(this);\n        this.gasCostInToken = gasCostInToken;\n        this.gasCostInUSD = gasCostInUSD;\n        this.gasEstimate = gasEstimate;\n        // If its exact out, we need to request *more* of the input token to account for the gas.\n        if (this.tradeType == TradeType.EXACT_INPUT) {\n            const quoteGasAdjusted = this.quote.subtract(gasCostInToken);\n            this.quoteAdjustedForGas = quoteGasAdjusted;\n        }\n        else {\n            const quoteGasAdjusted = this.quote.add(gasCostInToken);\n            this.quoteAdjustedForGas = quoteGasAdjusted;\n        }\n        this.poolAddresses = _.map(route.pools, (p) => v3PoolProvider.getPoolAddress(p.token0, p.token1, p.fee).poolAddress);\n        this.tokenPath = this.route.tokenPath;\n    }\n    toString() {\n        return `${this.percent.toFixed(2)}% QuoteGasAdj[${this.quoteAdjustedForGas.toExact()}] Quote[${this.quote.toExact()}] Gas[${this.gasEstimate.toString()}] = ${routeToString(this.route)}`;\n    }\n}\n/**\n * Represents a quote for swapping on a Mixed Route. Contains all information\n * such as the route used, the amount specified by the user, the type of quote\n * (exact in or exact out), the quote itself, and gas estimates.\n *\n * @export\n * @class MixedRouteWithValidQuote\n */\nexport class MixedRouteWithValidQuote {\n    constructor({ amount, rawQuote, sqrtPriceX96AfterList, initializedTicksCrossedList, quoterGasEstimate, percent, route, mixedRouteGasModel, quoteToken, tradeType, v3PoolProvider, v2PoolProvider, }) {\n        this.protocol = Protocol.MIXED;\n        this.amount = amount;\n        this.rawQuote = rawQuote;\n        this.sqrtPriceX96AfterList = sqrtPriceX96AfterList;\n        this.initializedTicksCrossedList = initializedTicksCrossedList;\n        this.quoterGasEstimate = quoterGasEstimate;\n        this.quote = CurrencyAmount.fromRawAmount(quoteToken, rawQuote.toString());\n        this.percent = percent;\n        this.route = route;\n        this.gasModel = mixedRouteGasModel;\n        this.quoteToken = quoteToken;\n        this.tradeType = tradeType;\n        const { gasEstimate, gasCostInToken, gasCostInUSD } = this.gasModel.estimateGasCost(this);\n        this.gasCostInToken = gasCostInToken;\n        this.gasCostInUSD = gasCostInUSD;\n        this.gasEstimate = gasEstimate;\n        // If its exact out, we need to request *more* of the input token to account for the gas.\n        if (this.tradeType == TradeType.EXACT_INPUT) {\n            const quoteGasAdjusted = this.quote.subtract(gasCostInToken);\n            this.quoteAdjustedForGas = quoteGasAdjusted;\n        }\n        else {\n            const quoteGasAdjusted = this.quote.add(gasCostInToken);\n            this.quoteAdjustedForGas = quoteGasAdjusted;\n        }\n        this.poolAddresses = _.map(route.pools, (p) => {\n            return p instanceof Pool\n                ? v3PoolProvider.getPoolAddress(p.token0, p.token1, p.fee).poolAddress\n                : v2PoolProvider.getPoolAddress(p.token0, p.token1).poolAddress;\n        });\n        this.tokenPath = this.route.path;\n    }\n    toString() {\n        return `${this.percent.toFixed(2)}% QuoteGasAdj[${this.quoteAdjustedForGas.toExact()}] Quote[${this.quote.toExact()}] Gas[${this.gasEstimate.toString()}] = ${routeToString(this.route)}`;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGUtd2l0aC12YWxpZC1xdW90ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9yb3V0ZXJzL2FscGhhLXJvdXRlci9lbnRpdGllcy9yb3V0ZS13aXRoLXZhbGlkLXF1b3RlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUMvQyxPQUFPLEVBQVMsU0FBUyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDckQsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3ZDLE9BQU8sQ0FBQyxNQUFNLFFBQVEsQ0FBQztBQUl2QixPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDdkQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBMERyRDs7Ozs7OztHQU9HO0FBQ0gsTUFBTSxPQUFPLHFCQUFxQjtJQTBCaEMsWUFBWSxFQUNWLE1BQU0sRUFDTixRQUFRLEVBQ1IsT0FBTyxFQUNQLEtBQUssRUFDTCxRQUFRLEVBQ1IsVUFBVSxFQUNWLFNBQVMsRUFDVCxjQUFjLEdBQ2M7UUFsQ2QsYUFBUSxHQUFHLFFBQVEsQ0FBQyxFQUFFLENBQUM7UUFtQ3JDLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxLQUFLLEdBQUcsY0FBYyxDQUFDLGFBQWEsQ0FBQyxVQUFVLEVBQUUsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFDM0UsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7UUFDdkIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7UUFDekIsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7UUFD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"]},"metadata":{},"sourceType":"module"}