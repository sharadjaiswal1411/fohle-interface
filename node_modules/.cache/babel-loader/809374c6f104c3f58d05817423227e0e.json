{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$(),\n  _s5 = $RefreshSig$(),\n  _s6 = $RefreshSig$();\nimport { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useActiveNetworkVersion } from 'state/application/hooks';\nimport { addPoolKeys } from 'state/pools/actions';\nimport { updatePoolData } from './actions';\nexport function useAllPoolData() {\n  _s();\n  const [network] = useActiveNetworkVersion();\n  return useSelector(state => {\n    var _state$pools$byAddres;\n    return (_state$pools$byAddres = state.pools.byAddress[network.id]) !== null && _state$pools$byAddres !== void 0 ? _state$pools$byAddres : {};\n  });\n}\n_s(useAllPoolData, \"xtBAJ31wFCxS9tX6S6nyQ/k4jpA=\", false, function () {\n  return [useActiveNetworkVersion, useSelector];\n});\nexport function useUpdatePoolData() {\n  _s2();\n  const dispatch = useDispatch();\n  const [network] = useActiveNetworkVersion();\n  return useCallback(pools => dispatch(updatePoolData({\n    pools,\n    networkId: network.id\n  })), [dispatch, network.id]);\n}\n_s2(useUpdatePoolData, \"2VwqZ7nBONFV5JB5NDKclu15JJ0=\", false, function () {\n  return [useDispatch, useActiveNetworkVersion];\n});\nexport function useAddPoolKeys() {\n  _s3();\n  const dispatch = useDispatch();\n  const [network] = useActiveNetworkVersion();\n  return useCallback(poolAddresses => dispatch(addPoolKeys({\n    poolAddresses,\n    networkId: network.id\n  })), [dispatch, network.id]);\n}\n_s3(useAddPoolKeys, \"2VwqZ7nBONFV5JB5NDKclu15JJ0=\", false, function () {\n  return [useDispatch, useActiveNetworkVersion];\n});\nexport function usePoolDatas(poolAddresses) {\n  _s4();\n  const allPoolData = useAllPoolData();\n  const addPoolKeys = useAddPoolKeys();\n  const untrackedAddresses = poolAddresses.reduce((accum, address) => {\n    if (!Object.keys(allPoolData).includes(address)) {\n      accum.push(address);\n    }\n    return accum;\n  }, []);\n  useEffect(() => {\n    if (untrackedAddresses) {\n      addPoolKeys(untrackedAddresses);\n    }\n    return;\n  }, [addPoolKeys, untrackedAddresses]);\n\n  // filter for pools with data\n  const poolsWithData = poolAddresses.map(address => {\n    var _allPoolData$address;\n    const poolData = (_allPoolData$address = allPoolData[address]) === null || _allPoolData$address === void 0 ? void 0 : _allPoolData$address.data;\n    return poolData !== null && poolData !== void 0 ? poolData : undefined;\n  }).filter(notEmpty);\n  return poolsWithData;\n}\n\n/**\n * Get top pools addresses that token is included in\n * If not loaded, fetch and store\n * @param address\n */\n_s4(usePoolDatas, \"rJaL3qE+XrZrwPMxvKwyzUsWDHY=\", false, function () {\n  return [useAllPoolData, useAddPoolKeys];\n});\nexport function usePoolChartData(address) {\n  _s5();\n  const dispatch = useDispatch();\n  const [activeNetwork] = useActiveNetworkVersion();\n  const pool = useSelector(state => {\n    var _state$pools$byAddres2;\n    return (_state$pools$byAddres2 = state.pools.byAddress[activeNetwork.id]) === null || _state$pools$byAddres2 === void 0 ? void 0 : _state$pools$byAddres2[address];\n  });\n  const chartData = pool === null || pool === void 0 ? void 0 : pool.chartData;\n  const [error, setError] = useState(false);\n  const {\n    dataClient\n  } = useClients();\n  useEffect(() => {\n    async function fetch() {\n      const {\n        error,\n        data\n      } = await fetchPoolChartData(address, dataClient);\n      if (!error && data) {\n        dispatch(updatePoolChartData({\n          poolAddress: address,\n          chartData: data,\n          networkId: activeNetwork.id\n        }));\n      }\n      if (error) {\n        setError(error);\n      }\n    }\n    if (!chartData && !error) {\n      fetch();\n    }\n  }, [address, dispatch, error, chartData, dataClient, activeNetwork.id]);\n\n  // return data\n  return chartData;\n}\n\n/**\n * Get all transactions on pool\n * @param address\n */\n_s5(usePoolChartData, \"2fFH9F+7Sa7oWeovIg2HwrV6DTM=\", true, function () {\n  return [useDispatch, useActiveNetworkVersion, useSelector];\n});\nexport function usePoolTransactions(address) {\n  _s6();\n  const dispatch = useDispatch();\n  const [activeNetwork] = useActiveNetworkVersion();\n  const pool = useSelector(state => {\n    var _state$pools$byAddres3;\n    return (_state$pools$byAddres3 = state.pools.byAddress[activeNetwork.id]) === null || _state$pools$byAddres3 === void 0 ? void 0 : _state$pools$byAddres3[address];\n  });\n  const transactions = pool === null || pool === void 0 ? void 0 : pool.transactions;\n  const [error, setError] = useState(false);\n  const {\n    dataClient\n  } = useClients();\n  useEffect(() => {\n    async function fetch() {\n      const {\n        error,\n        data\n      } = await fetchPoolTransactions(address, dataClient);\n      if (error) {\n        setError(true);\n      } else if (data) {\n        dispatch(updatePoolTransactions({\n          poolAddress: address,\n          transactions: data,\n          networkId: activeNetwork.id\n        }));\n      }\n    }\n    if (!transactions && !error) {\n      fetch();\n    }\n  }, [address, dispatch, error, transactions, dataClient, activeNetwork.id]);\n\n  // return data\n  return transactions;\n}\n_s6(usePoolTransactions, \"2fFH9F+7Sa7oWeovIg2HwrV6DTM=\", true, function () {\n  return [useDispatch, useActiveNetworkVersion, useSelector];\n});","map":{"version":3,"names":["useCallback","useDispatch","useSelector","useActiveNetworkVersion","addPoolKeys","updatePoolData","useAllPoolData","network","state","pools","byAddress","id","useUpdatePoolData","dispatch","networkId","useAddPoolKeys","poolAddresses","usePoolDatas","allPoolData","untrackedAddresses","reduce","accum","address","Object","keys","includes","push","useEffect","poolsWithData","map","poolData","data","undefined","filter","notEmpty","usePoolChartData","activeNetwork","pool","chartData","error","setError","useState","dataClient","useClients","fetch","fetchPoolChartData","updatePoolChartData","poolAddress","usePoolTransactions","transactions","fetchPoolTransactions","updatePoolTransactions"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/state/pools/hooks.ts"],"sourcesContent":["import { useCallback } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useActiveNetworkVersion } from 'state/application/hooks'\nimport { addPoolKeys } from 'state/pools/actions'\n\nimport { AppDispatch, AppState } from './../index'\nimport { updatePoolData } from './actions'\nimport { PoolData } from './reducer'\n\nexport function useAllPoolData(): {\n  [address: string]: { data: PoolData | undefined; lastUpdated: number | undefined }\n} {\n  const [network] = useActiveNetworkVersion()\n  return useSelector((state: AppState) => state.pools.byAddress[network.id] ?? {})\n}\n\nexport function useUpdatePoolData(): (pools: PoolData[]) => void {\n  const dispatch = useDispatch<AppDispatch>()\n  const [network] = useActiveNetworkVersion()\n  return useCallback(\n    (pools: PoolData[]) => dispatch(updatePoolData({ pools, networkId: network.id })),\n    [dispatch, network.id]\n  )\n}\n\nexport function useAddPoolKeys(): (addresses: string[]) => void {\n  const dispatch = useDispatch<AppDispatch>()\n  const [network] = useActiveNetworkVersion()\n  return useCallback(\n    (poolAddresses: string[]) => dispatch(addPoolKeys({ poolAddresses, networkId: network.id })),\n    [dispatch, network.id]\n  )\n}\n\nexport function usePoolDatas(poolAddresses: string[]): PoolData[] {\n  const allPoolData = useAllPoolData()\n  const addPoolKeys = useAddPoolKeys()\n\n  const untrackedAddresses = poolAddresses.reduce((accum: string[], address) => {\n    if (!Object.keys(allPoolData).includes(address)) {\n      accum.push(address)\n    }\n    return accum\n  }, [])\n\n  useEffect(() => {\n    if (untrackedAddresses) {\n      addPoolKeys(untrackedAddresses)\n    }\n    return\n  }, [addPoolKeys, untrackedAddresses])\n\n  // filter for pools with data\n  const poolsWithData = poolAddresses\n    .map((address) => {\n      const poolData = allPoolData[address]?.data\n      return poolData ?? undefined\n    })\n    .filter(notEmpty)\n\n  return poolsWithData\n}\n\n\n\n/**\n * Get top pools addresses that token is included in\n * If not loaded, fetch and store\n * @param address\n */\nexport function usePoolChartData(address: string): PoolChartEntry[] | undefined {\n  const dispatch = useDispatch<AppDispatch>()\n  const [activeNetwork] = useActiveNetworkVersion()\n\n  const pool = useSelector((state: AppState) => state.pools.byAddress[activeNetwork.id]?.[address])\n  const chartData = pool?.chartData\n  const [error, setError] = useState(false)\n  const { dataClient } = useClients()\n\n  useEffect(() => {\n    async function fetch() {\n      const { error, data } = await fetchPoolChartData(address, dataClient)\n      if (!error && data) {\n        dispatch(updatePoolChartData({ poolAddress: address, chartData: data, networkId: activeNetwork.id }))\n      }\n      if (error) {\n        setError(error)\n      }\n    }\n    if (!chartData && !error) {\n      fetch()\n    }\n  }, [address, dispatch, error, chartData, dataClient, activeNetwork.id])\n\n  // return data\n  return chartData\n}\n\n/**\n * Get all transactions on pool\n * @param address\n */\nexport function usePoolTransactions(address: string): Transaction[] | undefined {\n  const dispatch = useDispatch<AppDispatch>()\n  const [activeNetwork] = useActiveNetworkVersion()\n  const pool = useSelector((state: AppState) => state.pools.byAddress[activeNetwork.id]?.[address])\n  const transactions = pool?.transactions\n  const [error, setError] = useState(false)\n  const { dataClient } = useClients()\n\n  useEffect(() => {\n    async function fetch() {\n      const { error, data } = await fetchPoolTransactions(address, dataClient)\n      if (error) {\n        setError(true)\n      } else if (data) {\n        dispatch(updatePoolTransactions({ poolAddress: address, transactions: data, networkId: activeNetwork.id }))\n      }\n    }\n    if (!transactions && !error) {\n      fetch()\n    }\n  }, [address, dispatch, error, transactions, dataClient, activeNetwork.id])\n\n  // return data\n  return transactions\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}