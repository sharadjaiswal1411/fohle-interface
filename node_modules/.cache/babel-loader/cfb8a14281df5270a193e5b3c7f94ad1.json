{"ast":null,"code":"import _typeof from '@babel/runtime/helpers/typeof';\nvar validate = validate10;\nvar func2 = require(\"ajv/dist/runtime/ucs2length\").default;\nvar pattern0 = new RegExp(\"^[\\\\w ]+$\", \"u\");\nvar pattern4 = new RegExp(\"^[\\\\w]+$\", \"u\");\nvar pattern10 = new RegExp(\"^[ \\\\w]+$\", \"u\");\nvar pattern11 = new RegExp(\"^[ \\\\w\\\\.,:]+$\", \"u\");\nvar formats0 = require(\"ajv-formats/dist/formats\").fullFormats[\"date-time\"];\nvar formats2 = require(\"ajv-formats/dist/formats\").fullFormats.uri;\nvar pattern1 = new RegExp(\"^0x[a-fA-F0-9]{40}$\", \"u\");\nvar pattern2 = new RegExp(\"^[ \\\\w.'+\\\\-%/À-ÖØ-öø-ÿ:&\\\\[\\\\]\\\\(\\\\)]+$\", \"u\");\nvar pattern3 = new RegExp(\"^[a-zA-Z0-9+\\\\-%/$.]+$\", \"u\");\nfunction validate15(data) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    _ref$instancePath = _ref.instancePath,\n    instancePath = _ref$instancePath === void 0 ? \"\" : _ref$instancePath;\n  _ref.parentData;\n  _ref.parentDataProperty;\n  _ref.rootData;\n  var vErrors = null;\n  var errors = 0;\n  var _errs0 = errors;\n  var valid0 = false;\n  var _errs1 = errors;\n  var _errs3 = errors;\n  var valid2 = false;\n  var _errs4 = errors;\n  if (errors === _errs4) {\n    if (typeof data === \"string\") {\n      if (func2(data) > 42) {\n        var err0 = {\n          instancePath: instancePath,\n          schemaPath: \"#/definitions/ExtensionPrimitiveValue/anyOf/0/maxLength\",\n          keyword: \"maxLength\",\n          params: {\n            limit: 42\n          },\n          message: \"must NOT have more than 42 characters\"\n        };\n        if (vErrors === null) {\n          vErrors = [err0];\n        } else {\n          vErrors.push(err0);\n        }\n        errors++;\n      } else {\n        if (func2(data) < 1) {\n          var err1 = {\n            instancePath: instancePath,\n            schemaPath: \"#/definitions/ExtensionPrimitiveValue/anyOf/0/minLength\",\n            keyword: \"minLength\",\n            params: {\n              limit: 1\n            },\n            message: \"must NOT have fewer than 1 characters\"\n          };\n          if (vErrors === null) {\n            vErrors = [err1];\n          } else {\n            vErrors.push(err1);\n          }\n          errors++;\n        }\n      }\n    } else {\n      var err2 = {\n        instancePath: instancePath,\n        schemaPath: \"#/definitions/ExtensionPrimitiveValue/anyOf/0/type\",\n        keyword: \"type\",\n        params: {\n          type: \"string\"\n        },\n        message: \"must be string\"\n      };\n      if (vErrors === null) {\n        vErrors = [err2];\n      } else {\n        vErrors.push(err2);\n      }\n      errors++;\n    }\n  }\n  var _valid1 = _errs4 === errors;\n  valid2 = valid2 || _valid1;\n  if (!valid2) {\n    var _errs6 = errors;\n    if (typeof data !== \"boolean\") {\n      var err3 = {\n        instancePath: instancePath,\n        schemaPath: \"#/definitions/ExtensionPrimitiveValue/anyOf/1/type\",\n        keyword: \"type\",\n        params: {\n          type: \"boolean\"\n        },\n        message: \"must be boolean\"\n      };\n      if (vErrors === null) {\n        vErrors = [err3];\n      } else {\n        vErrors.push(err3);\n      }\n      errors++;\n    }\n    var _valid1 = _errs6 === errors;\n    valid2 = valid2 || _valid1;\n    if (!valid2) {\n      var _errs8 = errors;\n      if (!(typeof data == \"number\" && isFinite(data))) {\n        var err4 = {\n          instancePath: instancePath,\n          schemaPath: \"#/definitions/ExtensionPrimitiveValue/anyOf/2/type\",\n          keyword: \"type\",\n          params: {\n            type: \"number\"\n          },\n          message: \"must be number\"\n        };\n        if (vErrors === null) {\n          vErrors = [err4];\n        } else {\n          vErrors.push(err4);\n        }\n        errors++;\n      }\n      var _valid1 = _errs8 === errors;\n      valid2 = valid2 || _valid1;\n      if (!valid2) {\n        var _errs10 = errors;\n        if (data !== null) {\n          var err5 = {\n            instancePath: instancePath,\n            schemaPath: \"#/definitions/ExtensionPrimitiveValue/anyOf/3/type\",\n            keyword: \"type\",\n            params: {\n              type: \"null\"\n            },\n            message: \"must be null\"\n          };\n          if (vErrors === null) {\n            vErrors = [err5];\n          } else {\n            vErrors.push(err5);\n          }\n          errors++;\n        }\n        var _valid1 = _errs10 === errors;\n        valid2 = valid2 || _valid1;\n      }\n    }\n  }\n  if (!valid2) {\n    var err6 = {\n      instancePath: instancePath,\n      schemaPath: \"#/definitions/ExtensionPrimitiveValue/anyOf\",\n      keyword: \"anyOf\",\n      params: {},\n      message: \"must match a schema in anyOf\"\n    };\n    if (vErrors === null) {\n      vErrors = [err6];\n    } else {\n      vErrors.push(err6);\n    }\n    errors++;\n  } else {\n    errors = _errs3;\n    if (vErrors !== null) {\n      if (_errs3) {\n        vErrors.length = _errs3;\n      } else {\n        vErrors = null;\n      }\n    }\n  }\n  var _valid0 = _errs1 === errors;\n  valid0 = valid0 || _valid0;\n  if (!valid0) {\n    var err7 = {\n      instancePath: instancePath,\n      schemaPath: \"#/anyOf\",\n      keyword: \"anyOf\",\n      params: {},\n      message: \"must match a schema in anyOf\"\n    };\n    if (vErrors === null) {\n      vErrors = [err7];\n    } else {\n      vErrors.push(err7);\n    }\n    errors++;\n    validate15.errors = vErrors;\n    return false;\n  } else {\n    errors = _errs0;\n    if (vErrors !== null) {\n      if (_errs0) {\n        vErrors.length = _errs0;\n      } else {\n        vErrors = null;\n      }\n    }\n  }\n  validate15.errors = vErrors;\n  return errors === 0;\n}\nfunction validate14(data) {\n  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    _ref2$instancePath = _ref2.instancePath,\n    instancePath = _ref2$instancePath === void 0 ? \"\" : _ref2$instancePath;\n  _ref2.parentData;\n  _ref2.parentDataProperty;\n  var _ref2$rootData = _ref2.rootData,\n    rootData = _ref2$rootData === void 0 ? data : _ref2$rootData;\n  var vErrors = null;\n  var errors = 0;\n  var _errs0 = errors;\n  var valid0 = false;\n  var _errs1 = errors;\n  var _errs3 = errors;\n  var valid2 = false;\n  var _errs4 = errors;\n  if (errors === _errs4) {\n    if (typeof data === \"string\") {\n      if (func2(data) > 42) {\n        var err0 = {\n          instancePath: instancePath,\n          schemaPath: \"#/definitions/ExtensionPrimitiveValue/anyOf/0/maxLength\",\n          keyword: \"maxLength\",\n          params: {\n            limit: 42\n          },\n          message: \"must NOT have more than 42 characters\"\n        };\n        if (vErrors === null) {\n          vErrors = [err0];\n        } else {\n          vErrors.push(err0);\n        }\n        errors++;\n      } else {\n        if (func2(data) < 1) {\n          var err1 = {\n            instancePath: instancePath,\n            schemaPath: \"#/definitions/ExtensionPrimitiveValue/anyOf/0/minLength\",\n            keyword: \"minLength\",\n            params: {\n              limit: 1\n            },\n            message: \"must NOT have fewer than 1 characters\"\n          };\n          if (vErrors === null) {\n            vErrors = [err1];\n          } else {\n            vErrors.push(err1);\n          }\n          errors++;\n        }\n      }\n    } else {\n      var err2 = {\n        instancePath: instancePath,\n        schemaPath: \"#/definitions/ExtensionPrimitiveValue/anyOf/0/type\",\n        keyword: \"type\",\n        params: {\n          type: \"string\"\n        },\n        message: \"must be string\"\n      };\n      if (vErrors === null) {\n        vErrors = [err2];\n      } else {\n        vErrors.push(err2);\n      }\n      errors++;\n    }\n  }\n  var _valid1 = _errs4 === errors;\n  valid2 = valid2 || _valid1;\n  if (!valid2) {\n    var _errs6 = errors;\n    if (typeof data !== \"boolean\") {\n      var err3 = {\n        instancePath: instancePath,\n        schemaPath: \"#/definitions/ExtensionPrimitiveValue/anyOf/1/type\",\n        keyword: \"type\",\n        params: {\n          type: \"boolean\"\n        },\n        message: \"must be boolean\"\n      };\n      if (vErrors === null) {\n        vErrors = [err3];\n      } else {\n        vErrors.push(err3);\n      }\n      errors++;\n    }\n    var _valid1 = _errs6 === errors;\n    valid2 = valid2 || _valid1;\n    if (!valid2) {\n      var _errs8 = errors;\n      if (!(typeof data == \"number\" && isFinite(data))) {\n        var err4 = {\n          instancePath: instancePath,\n          schemaPath: \"#/definitions/ExtensionPrimitiveValue/anyOf/2/type\",\n          keyword: \"type\",\n          params: {\n            type: \"number\"\n          },\n          message: \"must be number\"\n        };\n        if (vErrors === null) {\n          vErrors = [err4];\n        } else {\n          vErrors.push(err4);\n        }\n        errors++;\n      }\n      var _valid1 = _errs8 === errors;\n      valid2 = valid2 || _valid1;\n      if (!valid2) {\n        var _errs10 = errors;\n        if (data !== null) {\n          var err5 = {\n            instancePath: instancePath,\n            schemaPath: \"#/definitions/ExtensionPrimitiveValue/anyOf/3/type\",\n            keyword: \"type\",\n            params: {\n              type: \"null\"\n            },\n            message: \"must be null\"\n          };\n          if (vErrors === null) {\n            vErrors = [err5];\n          } else {\n            vErrors.push(err5);\n          }\n          errors++;\n        }\n        var _valid1 = _errs10 === errors;\n        valid2 = valid2 || _valid1;\n      }\n    }\n  }\n  if (!valid2) {\n    var err6 = {\n      instancePath: instancePath,\n      schemaPath: \"#/definitions/ExtensionPrimitiveValue/anyOf\",\n      keyword: \"anyOf\",\n      params: {},\n      message: \"must match a schema in anyOf\"\n    };\n    if (vErrors === null) {\n      vErrors = [err6];\n    } else {\n      vErrors.push(err6);\n    }\n    errors++;\n  } else {\n    errors = _errs3;\n    if (vErrors !== null) {\n      if (_errs3) {\n        vErrors.length = _errs3;\n      } else {\n        vErrors = null;\n      }\n    }\n  }\n  var _valid0 = _errs1 === errors;\n  valid0 = valid0 || _valid0;\n  if (!valid0) {\n    var _errs12 = errors;\n    if (errors === _errs12) {\n      if (data && _typeof(data) == \"object\" && !Array.isArray(data)) {\n        if (Object.keys(data).length > 10) {\n          var err7 = {\n            instancePath: instancePath,\n            schemaPath: \"#/anyOf/1/maxProperties\",\n            keyword: \"maxProperties\",\n            params: {\n              limit: 10\n            },\n            message: \"must NOT have more than 10 properties\"\n          };\n          if (vErrors === null) {\n            vErrors = [err7];\n          } else {\n            vErrors.push(err7);\n          }\n          errors++;\n        } else {\n          for (var key0 in data) {\n            var _errs14 = errors;\n            var _errs15 = errors;\n            if (errors === _errs15) {\n              if (typeof key0 === \"string\") {\n                if (func2(key0) > 40) {\n                  var err8 = {\n                    instancePath: instancePath,\n                    schemaPath: \"#/definitions/ExtensionIdentifier/maxLength\",\n                    keyword: \"maxLength\",\n                    params: {\n                      limit: 40\n                    },\n                    message: \"must NOT have more than 40 characters\",\n                    propertyName: key0\n                  };\n                  if (vErrors === null) {\n                    vErrors = [err8];\n                  } else {\n                    vErrors.push(err8);\n                  }\n                  errors++;\n                } else {\n                  if (func2(key0) < 1) {\n                    var err9 = {\n                      instancePath: instancePath,\n                      schemaPath: \"#/definitions/ExtensionIdentifier/minLength\",\n                      keyword: \"minLength\",\n                      params: {\n                        limit: 1\n                      },\n                      message: \"must NOT have fewer than 1 characters\",\n                      propertyName: key0\n                    };\n                    if (vErrors === null) {\n                      vErrors = [err9];\n                    } else {\n                      vErrors.push(err9);\n                    }\n                    errors++;\n                  } else {\n                    if (!pattern4.test(key0)) {\n                      var err10 = {\n                        instancePath: instancePath,\n                        schemaPath: \"#/definitions/ExtensionIdentifier/pattern\",\n                        keyword: \"pattern\",\n                        params: {\n                          pattern: \"^[\\\\w]+$\"\n                        },\n                        message: \"must match pattern \\\"\" + \"^[\\\\w]+$\" + \"\\\"\",\n                        propertyName: key0\n                      };\n                      if (vErrors === null) {\n                        vErrors = [err10];\n                      } else {\n                        vErrors.push(err10);\n                      }\n                      errors++;\n                    }\n                  }\n                }\n              } else {\n                var err11 = {\n                  instancePath: instancePath,\n                  schemaPath: \"#/definitions/ExtensionIdentifier/type\",\n                  keyword: \"type\",\n                  params: {\n                    type: \"string\"\n                  },\n                  message: \"must be string\",\n                  propertyName: key0\n                };\n                if (vErrors === null) {\n                  vErrors = [err11];\n                } else {\n                  vErrors.push(err11);\n                }\n                errors++;\n              }\n            }\n            var valid3 = _errs14 === errors;\n            if (!valid3) {\n              var err12 = {\n                instancePath: instancePath,\n                schemaPath: \"#/anyOf/1/propertyNames\",\n                keyword: \"propertyNames\",\n                params: {\n                  propertyName: key0\n                },\n                message: \"property name must be valid\"\n              };\n              if (vErrors === null) {\n                vErrors = [err12];\n              } else {\n                vErrors.push(err12);\n              }\n              errors++;\n              break;\n            }\n          }\n          if (valid3) {\n            for (var key1 in data) {\n              var _errs18 = errors;\n              if (!validate15(data[key1], {\n                instancePath: instancePath + \"/\" + key1.replace(/~/g, \"~0\").replace(/\\//g, \"~1\"),\n                parentData: data,\n                parentDataProperty: key1,\n                rootData: rootData\n              })) {\n                vErrors = vErrors === null ? validate15.errors : vErrors.concat(validate15.errors);\n                errors = vErrors.length;\n              }\n              var valid5 = _errs18 === errors;\n              if (!valid5) {\n                break;\n              }\n            }\n          }\n        }\n      } else {\n        var err13 = {\n          instancePath: instancePath,\n          schemaPath: \"#/anyOf/1/type\",\n          keyword: \"type\",\n          params: {\n            type: \"object\"\n          },\n          message: \"must be object\"\n        };\n        if (vErrors === null) {\n          vErrors = [err13];\n        } else {\n          vErrors.push(err13);\n        }\n        errors++;\n      }\n    }\n    var _valid0 = _errs12 === errors;\n    valid0 = valid0 || _valid0;\n  }\n  if (!valid0) {\n    var err14 = {\n      instancePath: instancePath,\n      schemaPath: \"#/anyOf\",\n      keyword: \"anyOf\",\n      params: {},\n      message: \"must match a schema in anyOf\"\n    };\n    if (vErrors === null) {\n      vErrors = [err14];\n    } else {\n      vErrors.push(err14);\n    }\n    errors++;\n    validate14.errors = vErrors;\n    return false;\n  } else {\n    errors = _errs0;\n    if (vErrors !== null) {\n      if (_errs0) {\n        vErrors.length = _errs0;\n      } else {\n        vErrors = null;\n      }\n    }\n  }\n  validate14.errors = vErrors;\n  return errors === 0;\n}\nfunction validate13(data) {\n  var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    _ref3$instancePath = _ref3.instancePath,\n    instancePath = _ref3$instancePath === void 0 ? \"\" : _ref3$instancePath;\n  _ref3.parentData;\n  _ref3.parentDataProperty;\n  var _ref3$rootData = _ref3.rootData,\n    rootData = _ref3$rootData === void 0 ? data : _ref3$rootData;\n  var vErrors = null;\n  var errors = 0;\n  var _errs0 = errors;\n  var valid0 = false;\n  var _errs1 = errors;\n  var _errs3 = errors;\n  var valid2 = false;\n  var _errs4 = errors;\n  if (errors === _errs4) {\n    if (typeof data === \"string\") {\n      if (func2(data) > 42) {\n        var err0 = {\n          instancePath: instancePath,\n          schemaPath: \"#/definitions/ExtensionPrimitiveValue/anyOf/0/maxLength\",\n          keyword: \"maxLength\",\n          params: {\n            limit: 42\n          },\n          message: \"must NOT have more than 42 characters\"\n        };\n        if (vErrors === null) {\n          vErrors = [err0];\n        } else {\n          vErrors.push(err0);\n        }\n        errors++;\n      } else {\n        if (func2(data) < 1) {\n          var err1 = {\n            instancePath: instancePath,\n            schemaPath: \"#/definitions/ExtensionPrimitiveValue/anyOf/0/minLength\",\n            keyword: \"minLength\",\n            params: {\n              limit: 1\n            },\n            message: \"must NOT have fewer than 1 characters\"\n          };\n          if (vErrors === null) {\n            vErrors = [err1];\n          } else {\n            vErrors.push(err1);\n          }\n          errors++;\n        }\n      }\n    } else {\n      var err2 = {\n        instancePath: instancePath,\n        schemaPath: \"#/definitions/ExtensionPrimitiveValue/anyOf/0/type\",\n        keyword: \"type\",\n        params: {\n          type: \"string\"\n        },\n        message: \"must be string\"\n      };\n      if (vErrors === null) {\n        vErrors = [err2];\n      } else {\n        vErrors.push(err2);\n      }\n      errors++;\n    }\n  }\n  var _valid1 = _errs4 === errors;\n  valid2 = valid2 || _valid1;\n  if (!valid2) {\n    var _errs6 = errors;\n    if (typeof data !== \"boolean\") {\n      var err3 = {\n        instancePath: instancePath,\n        schemaPath: \"#/definitions/ExtensionPrimitiveValue/anyOf/1/type\",\n        keyword: \"type\",\n        params: {\n          type: \"boolean\"\n        },\n        message: \"must be boolean\"\n      };\n      if (vErrors === null) {\n        vErrors = [err3];\n      } else {\n        vErrors.push(err3);\n      }\n      errors++;\n    }\n    var _valid1 = _errs6 === errors;\n    valid2 = valid2 || _valid1;\n    if (!valid2) {\n      var _errs8 = errors;\n      if (!(typeof data == \"number\" && isFinite(data))) {\n        var err4 = {\n          instancePath: instancePath,\n          schemaPath: \"#/definitions/ExtensionPrimitiveValue/anyOf/2/type\",\n          keyword: \"type\",\n          params: {\n            type: \"number\"\n          },\n          message: \"must be number\"\n        };\n        if (vErrors === null) {\n          vErrors = [err4];\n        } else {\n          vErrors.push(err4);\n        }\n        errors++;\n      }\n      var _valid1 = _errs8 === errors;\n      valid2 = valid2 || _valid1;\n      if (!valid2) {\n        var _errs10 = errors;\n        if (data !== null) {\n          var err5 = {\n            instancePath: instancePath,\n            schemaPath: \"#/definitions/ExtensionPrimitiveValue/anyOf/3/type\",\n            keyword: \"type\",\n            params: {\n              type: \"null\"\n            },\n            message: \"must be null\"\n          };\n          if (vErrors === null) {\n            vErrors = [err5];\n          } else {\n            vErrors.push(err5);\n          }\n          errors++;\n        }\n        var _valid1 = _errs10 === errors;\n        valid2 = valid2 || _valid1;\n      }\n    }\n  }\n  if (!valid2) {\n    var err6 = {\n      instancePath: instancePath,\n      schemaPath: \"#/definitions/ExtensionPrimitiveValue/anyOf\",\n      keyword: \"anyOf\",\n      params: {},\n      message: \"must match a schema in anyOf\"\n    };\n    if (vErrors === null) {\n      vErrors = [err6];\n    } else {\n      vErrors.push(err6);\n    }\n    errors++;\n  } else {\n    errors = _errs3;\n    if (vErrors !== null) {\n      if (_errs3) {\n        vErrors.length = _errs3;\n      } else {\n        vErrors = null;\n      }\n    }\n  }\n  var _valid0 = _errs1 === errors;\n  valid0 = valid0 || _valid0;\n  if (!valid0) {\n    var _errs12 = errors;\n    if (errors === _errs12) {\n      if (data && _typeof(data) == \"object\" && !Array.isArray(data)) {\n        if (Object.keys(data).length > 10) {\n          var err7 = {\n            instancePath: instancePath,\n            schemaPath: \"#/anyOf/1/maxProperties\",\n            keyword: \"maxProperties\",\n            params: {\n              limit: 10\n            },\n            message: \"must NOT have more than 10 properties\"\n          };\n          if (vErrors === null) {\n            vErrors = [err7];\n          } else {\n            vErrors.push(err7);\n          }\n          errors++;\n        } else {\n          for (var key0 in data) {\n            var _errs14 = errors;\n            var _errs15 = errors;\n            if (errors === _errs15) {\n              if (typeof key0 === \"string\") {\n                if (func2(key0) > 40) {\n                  var err8 = {\n                    instancePath: instancePath,\n                    schemaPath: \"#/definitions/ExtensionIdentifier/maxLength\",\n                    keyword: \"maxLength\",\n                    params: {\n                      limit: 40\n                    },\n                    message: \"must NOT have more than 40 characters\",\n                    propertyName: key0\n                  };\n                  if (vErrors === null) {\n                    vErrors = [err8];\n                  } else {\n                    vErrors.push(err8);\n                  }\n                  errors++;\n                } else {\n                  if (func2(key0) < 1) {\n                    var err9 = {\n                      instancePath: instancePath,\n                      schemaPath: \"#/definitions/ExtensionIdentifier/minLength\",\n                      keyword: \"minLength\",\n                      params: {\n                        limit: 1\n                      },\n                      message: \"must NOT have fewer than 1 characters\",\n                      propertyName: key0\n                    };\n                    if (vErrors === null) {\n                      vErrors = [err9];\n                    } else {\n                      vErrors.push(err9);\n                    }\n                    errors++;\n                  } else {\n                    if (!pattern4.test(key0)) {\n                      var err10 = {\n                        instancePath: instancePath,\n                        schemaPath: \"#/definitions/ExtensionIdentifier/pattern\",\n                        keyword: \"pattern\",\n                        params: {\n                          pattern: \"^[\\\\w]+$\"\n                        },\n                        message: \"must match pattern \\\"\" + \"^[\\\\w]+$\" + \"\\\"\",\n                        propertyName: key0\n                      };\n                      if (vErrors === null) {\n                        vErrors = [err10];\n                      } else {\n                        vErrors.push(err10);\n                      }\n                      errors++;\n                    }\n                  }\n                }\n              } else {\n                var err11 = {\n                  instancePath: instancePath,\n                  schemaPath: \"#/definitions/ExtensionIdentifier/type\",\n                  keyword: \"type\",\n                  params: {\n                    type: \"string\"\n                  },\n                  message: \"must be string\",\n                  propertyName: key0\n                };\n                if (vErrors === null) {\n                  vErrors = [err11];\n                } else {\n                  vErrors.push(err11);\n                }\n                errors++;\n              }\n            }\n            var valid3 = _errs14 === errors;\n            if (!valid3) {\n              var err12 = {\n                instancePath: instancePath,\n                schemaPath: \"#/anyOf/1/propertyNames\",\n                keyword: \"propertyNames\",\n                params: {\n                  propertyName: key0\n                },\n                message: \"property name must be valid\"\n              };\n              if (vErrors === null) {\n                vErrors = [err12];\n              } else {\n                vErrors.push(err12);\n              }\n              errors++;\n              break;\n            }\n          }\n          if (valid3) {\n            for (var key1 in data) {\n              var _errs18 = errors;\n              if (!validate14(data[key1], {\n                instancePath: instancePath + \"/\" + key1.replace(/~/g, \"~0\").replace(/\\//g, \"~1\"),\n                parentData: data,\n                parentDataProperty: key1,\n                rootData: rootData\n              })) {\n                vErrors = vErrors === null ? validate14.errors : vErrors.concat(validate14.errors);\n                errors = vErrors.length;\n              }\n              var valid5 = _errs18 === errors;\n              if (!valid5) {\n                break;\n              }\n            }\n          }\n        }\n      } else {\n        var err13 = {\n          instancePath: instancePath,\n          schemaPath: \"#/anyOf/1/type\",\n          keyword: \"type\",\n          params: {\n            type: \"object\"\n          },\n          message: \"must be object\"\n        };\n        if (vErrors === null) {\n          vErrors = [err13];\n        } else {\n          vErrors.push(err13);\n        }\n        errors++;\n      }\n    }\n    var _valid0 = _errs12 === errors;\n    valid0 = valid0 || _valid0;\n  }\n  if (!valid0) {\n    var err14 = {\n      instancePath: instancePath,\n      schemaPath: \"#/anyOf\",\n      keyword: \"anyOf\",\n      params: {},\n      message: \"must match a schema in anyOf\"\n    };\n    if (vErrors === null) {\n      vErrors = [err14];\n    } else {\n      vErrors.push(err14);\n    }\n    errors++;\n    validate13.errors = vErrors;\n    return false;\n  } else {\n    errors = _errs0;\n    if (vErrors !== null) {\n      if (_errs0) {\n        vErrors.length = _errs0;\n      } else {\n        vErrors = null;\n      }\n    }\n  }\n  validate13.errors = vErrors;\n  return errors === 0;\n}\nfunction validate12(data) {\n  var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    _ref4$instancePath = _ref4.instancePath,\n    instancePath = _ref4$instancePath === void 0 ? \"\" : _ref4$instancePath;\n  _ref4.parentData;\n  _ref4.parentDataProperty;\n  var _ref4$rootData = _ref4.rootData,\n    rootData = _ref4$rootData === void 0 ? data : _ref4$rootData;\n  var vErrors = null;\n  var errors = 0;\n  if (errors === 0) {\n    if (data && _typeof(data) == \"object\" && !Array.isArray(data)) {\n      if (Object.keys(data).length > 10) {\n        validate12.errors = [{\n          instancePath: instancePath,\n          schemaPath: \"#/maxProperties\",\n          keyword: \"maxProperties\",\n          params: {\n            limit: 10\n          },\n          message: \"must NOT have more than 10 properties\"\n        }];\n        return false;\n      } else {\n        for (var key0 in data) {\n          var _errs1 = errors;\n          var _errs2 = errors;\n          if (errors === _errs2) {\n            if (typeof key0 === \"string\") {\n              if (func2(key0) > 40) {\n                var err0 = {\n                  instancePath: instancePath,\n                  schemaPath: \"#/definitions/ExtensionIdentifier/maxLength\",\n                  keyword: \"maxLength\",\n                  params: {\n                    limit: 40\n                  },\n                  message: \"must NOT have more than 40 characters\",\n                  propertyName: key0\n                };\n                if (vErrors === null) {\n                  vErrors = [err0];\n                } else {\n                  vErrors.push(err0);\n                }\n                errors++;\n              } else {\n                if (func2(key0) < 1) {\n                  var err1 = {\n                    instancePath: instancePath,\n                    schemaPath: \"#/definitions/ExtensionIdentifier/minLength\",\n                    keyword: \"minLength\",\n                    params: {\n                      limit: 1\n                    },\n                    message: \"must NOT have fewer than 1 characters\",\n                    propertyName: key0\n                  };\n                  if (vErrors === null) {\n                    vErrors = [err1];\n                  } else {\n                    vErrors.push(err1);\n                  }\n                  errors++;\n                } else {\n                  if (!pattern4.test(key0)) {\n                    var err2 = {\n                      instancePath: instancePath,\n                      schemaPath: \"#/definitions/ExtensionIdentifier/pattern\",\n                      keyword: \"pattern\",\n                      params: {\n                        pattern: \"^[\\\\w]+$\"\n                      },\n                      message: \"must match pattern \\\"\" + \"^[\\\\w]+$\" + \"\\\"\",\n                      propertyName: key0\n                    };\n                    if (vErrors === null) {\n                      vErrors = [err2];\n                    } else {\n                      vErrors.push(err2);\n                    }\n                    errors++;\n                  }\n                }\n              }\n            } else {\n              var err3 = {\n                instancePath: instancePath,\n                schemaPath: \"#/definitions/ExtensionIdentifier/type\",\n                keyword: \"type\",\n                params: {\n                  type: \"string\"\n                },\n                message: \"must be string\",\n                propertyName: key0\n              };\n              if (vErrors === null) {\n                vErrors = [err3];\n              } else {\n                vErrors.push(err3);\n              }\n              errors++;\n            }\n          }\n          var valid0 = _errs1 === errors;\n          if (!valid0) {\n            var err4 = {\n              instancePath: instancePath,\n              schemaPath: \"#/propertyNames\",\n              keyword: \"propertyNames\",\n              params: {\n                propertyName: key0\n              },\n              message: \"property name must be valid\"\n            };\n            if (vErrors === null) {\n              vErrors = [err4];\n            } else {\n              vErrors.push(err4);\n            }\n            errors++;\n            validate12.errors = vErrors;\n            return false;\n          }\n        }\n        if (valid0) {\n          for (var key1 in data) {\n            var _errs5 = errors;\n            if (!validate13(data[key1], {\n              instancePath: instancePath + \"/\" + key1.replace(/~/g, \"~0\").replace(/\\//g, \"~1\"),\n              parentData: data,\n              parentDataProperty: key1,\n              rootData: rootData\n            })) {\n              vErrors = vErrors === null ? validate13.errors : vErrors.concat(validate13.errors);\n              errors = vErrors.length;\n            }\n            var valid2 = _errs5 === errors;\n            if (!valid2) {\n              break;\n            }\n          }\n        }\n      }\n    } else {\n      validate12.errors = [{\n        instancePath: instancePath,\n        schemaPath: \"#/type\",\n        keyword: \"type\",\n        params: {\n          type: \"object\"\n        },\n        message: \"must be object\"\n      }];\n      return false;\n    }\n  }\n  validate12.errors = vErrors;\n  return errors === 0;\n}\nfunction validate11(data) {\n  var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    _ref5$instancePath = _ref5.instancePath,\n    instancePath = _ref5$instancePath === void 0 ? \"\" : _ref5$instancePath;\n  _ref5.parentData;\n  _ref5.parentDataProperty;\n  var _ref5$rootData = _ref5.rootData,\n    rootData = _ref5$rootData === void 0 ? data : _ref5$rootData;\n  var vErrors = null;\n  var errors = 0;\n  if (errors === 0) {\n    if (data && _typeof(data) == \"object\" && !Array.isArray(data)) {\n      var missing0;\n      if (data.chainId === undefined && (missing0 = \"chainId\") || data.address === undefined && (missing0 = \"address\") || data.decimals === undefined && (missing0 = \"decimals\") || data.name === undefined && (missing0 = \"name\") || data.symbol === undefined && (missing0 = \"symbol\")) {\n        validate11.errors = [{\n          instancePath: instancePath,\n          schemaPath: \"#/required\",\n          keyword: \"required\",\n          params: {\n            missingProperty: missing0\n          },\n          message: \"must have required property '\" + missing0 + \"'\"\n        }];\n        return false;\n      } else {\n        var _errs1 = errors;\n        for (var key0 in data) {\n          if (!(key0 === \"chainId\" || key0 === \"address\" || key0 === \"decimals\" || key0 === \"name\" || key0 === \"symbol\" || key0 === \"logoURI\" || key0 === \"tags\" || key0 === \"extensions\")) {\n            validate11.errors = [{\n              instancePath: instancePath,\n              schemaPath: \"#/additionalProperties\",\n              keyword: \"additionalProperties\",\n              params: {\n                additionalProperty: key0\n              },\n              message: \"must NOT have additional properties\"\n            }];\n            return false;\n          }\n        }\n        if (_errs1 === errors) {\n          if (data.chainId !== undefined) {\n            var data0 = data.chainId;\n            var _errs2 = errors;\n            if (!(typeof data0 == \"number\" && !(data0 % 1) && !isNaN(data0) && isFinite(data0))) {\n              validate11.errors = [{\n                instancePath: instancePath + \"/chainId\",\n                schemaPath: \"#/properties/chainId/type\",\n                keyword: \"type\",\n                params: {\n                  type: \"integer\"\n                },\n                message: \"must be integer\"\n              }];\n              return false;\n            }\n            if (errors === _errs2) {\n              if (typeof data0 == \"number\" && isFinite(data0)) {\n                if (data0 < 1 || isNaN(data0)) {\n                  validate11.errors = [{\n                    instancePath: instancePath + \"/chainId\",\n                    schemaPath: \"#/properties/chainId/minimum\",\n                    keyword: \"minimum\",\n                    params: {\n                      comparison: \">=\",\n                      limit: 1\n                    },\n                    message: \"must be >= 1\"\n                  }];\n                  return false;\n                }\n              }\n            }\n            var valid0 = _errs2 === errors;\n          } else {\n            var valid0 = true;\n          }\n          if (valid0) {\n            if (data.address !== undefined) {\n              var data1 = data.address;\n              var _errs4 = errors;\n              if (errors === _errs4) {\n                if (typeof data1 === \"string\") {\n                  if (!pattern1.test(data1)) {\n                    validate11.errors = [{\n                      instancePath: instancePath + \"/address\",\n                      schemaPath: \"#/properties/address/pattern\",\n                      keyword: \"pattern\",\n                      params: {\n                        pattern: \"^0x[a-fA-F0-9]{40}$\"\n                      },\n                      message: \"must match pattern \\\"\" + \"^0x[a-fA-F0-9]{40}$\" + \"\\\"\"\n                    }];\n                    return false;\n                  }\n                } else {\n                  validate11.errors = [{\n                    instancePath: instancePath + \"/address\",\n                    schemaPath: \"#/properties/address/type\",\n                    keyword: \"type\",\n                    params: {\n                      type: \"string\"\n                    },\n                    message: \"must be string\"\n                  }];\n                  return false;\n                }\n              }\n              var valid0 = _errs4 === errors;\n            } else {\n              var valid0 = true;\n            }\n            if (valid0) {\n              if (data.decimals !== undefined) {\n                var data2 = data.decimals;\n                var _errs6 = errors;\n                if (!(typeof data2 == \"number\" && !(data2 % 1) && !isNaN(data2) && isFinite(data2))) {\n                  validate11.errors = [{\n                    instancePath: instancePath + \"/decimals\",\n                    schemaPath: \"#/properties/decimals/type\",\n                    keyword: \"type\",\n                    params: {\n                      type: \"integer\"\n                    },\n                    message: \"must be integer\"\n                  }];\n                  return false;\n                }\n                if (errors === _errs6) {\n                  if (typeof data2 == \"number\" && isFinite(data2)) {\n                    if (data2 > 255 || isNaN(data2)) {\n                      validate11.errors = [{\n                        instancePath: instancePath + \"/decimals\",\n                        schemaPath: \"#/properties/decimals/maximum\",\n                        keyword: \"maximum\",\n                        params: {\n                          comparison: \"<=\",\n                          limit: 255\n                        },\n                        message: \"must be <= 255\"\n                      }];\n                      return false;\n                    } else {\n                      if (data2 < 0 || isNaN(data2)) {\n                        validate11.errors = [{\n                          instancePath: instancePath + \"/decimals\",\n                          schemaPath: \"#/properties/decimals/minimum\",\n                          keyword: \"minimum\",\n                          params: {\n                            comparison: \">=\",\n                            limit: 0\n                          },\n                          message: \"must be >= 0\"\n                        }];\n                        return false;\n                      }\n                    }\n                  }\n                }\n                var valid0 = _errs6 === errors;\n              } else {\n                var valid0 = true;\n              }\n              if (valid0) {\n                if (data.name !== undefined) {\n                  var data3 = data.name;\n                  var _errs8 = errors;\n                  if (errors === _errs8) {\n                    if (typeof data3 === \"string\") {\n                      if (func2(data3) > 40) {\n                        validate11.errors = [{\n                          instancePath: instancePath + \"/name\",\n                          schemaPath: \"#/properties/name/maxLength\",\n                          keyword: \"maxLength\",\n                          params: {\n                            limit: 40\n                          },\n                          message: \"must NOT have more than 40 characters\"\n                        }];\n                        return false;\n                      } else {\n                        if (func2(data3) < 1) {\n                          validate11.errors = [{\n                            instancePath: instancePath + \"/name\",\n                            schemaPath: \"#/properties/name/minLength\",\n                            keyword: \"minLength\",\n                            params: {\n                              limit: 1\n                            },\n                            message: \"must NOT have fewer than 1 characters\"\n                          }];\n                          return false;\n                        } else {\n                          if (!pattern2.test(data3)) {\n                            validate11.errors = [{\n                              instancePath: instancePath + \"/name\",\n                              schemaPath: \"#/properties/name/pattern\",\n                              keyword: \"pattern\",\n                              params: {\n                                pattern: \"^[ \\\\w.'+\\\\-%/À-ÖØ-öø-ÿ:&\\\\[\\\\]\\\\(\\\\)]+$\"\n                              },\n                              message: \"must match pattern \\\"\" + \"^[ \\\\w.'+\\\\-%/À-ÖØ-öø-ÿ:&\\\\[\\\\]\\\\(\\\\)]+$\" + \"\\\"\"\n                            }];\n                            return false;\n                          }\n                        }\n                      }\n                    } else {\n                      validate11.errors = [{\n                        instancePath: instancePath + \"/name\",\n                        schemaPath: \"#/properties/name/type\",\n                        keyword: \"type\",\n                        params: {\n                          type: \"string\"\n                        },\n                        message: \"must be string\"\n                      }];\n                      return false;\n                    }\n                  }\n                  var valid0 = _errs8 === errors;\n                } else {\n                  var valid0 = true;\n                }\n                if (valid0) {\n                  if (data.symbol !== undefined) {\n                    var data4 = data.symbol;\n                    var _errs10 = errors;\n                    if (errors === _errs10) {\n                      if (typeof data4 === \"string\") {\n                        if (func2(data4) > 20) {\n                          validate11.errors = [{\n                            instancePath: instancePath + \"/symbol\",\n                            schemaPath: \"#/properties/symbol/maxLength\",\n                            keyword: \"maxLength\",\n                            params: {\n                              limit: 20\n                            },\n                            message: \"must NOT have more than 20 characters\"\n                          }];\n                          return false;\n                        } else {\n                          if (func2(data4) < 1) {\n                            validate11.errors = [{\n                              instancePath: instancePath + \"/symbol\",\n                              schemaPath: \"#/properties/symbol/minLength\",\n                              keyword: \"minLength\",\n                              params: {\n                                limit: 1\n                              },\n                              message: \"must NOT have fewer than 1 characters\"\n                            }];\n                            return false;\n                          } else {\n                            if (!pattern3.test(data4)) {\n                              validate11.errors = [{\n                                instancePath: instancePath + \"/symbol\",\n                                schemaPath: \"#/properties/symbol/pattern\",\n                                keyword: \"pattern\",\n                                params: {\n                                  pattern: \"^[a-zA-Z0-9+\\\\-%/$.]+$\"\n                                },\n                                message: \"must match pattern \\\"\" + \"^[a-zA-Z0-9+\\\\-%/$.]+$\" + \"\\\"\"\n                              }];\n                              return false;\n                            }\n                          }\n                        }\n                      } else {\n                        validate11.errors = [{\n                          instancePath: instancePath + \"/symbol\",\n                          schemaPath: \"#/properties/symbol/type\",\n                          keyword: \"type\",\n                          params: {\n                            type: \"string\"\n                          },\n                          message: \"must be string\"\n                        }];\n                        return false;\n                      }\n                    }\n                    var valid0 = _errs10 === errors;\n                  } else {\n                    var valid0 = true;\n                  }\n                  if (valid0) {\n                    if (data.logoURI !== undefined) {\n                      var data5 = data.logoURI;\n                      var _errs12 = errors;\n                      if (errors === _errs12) {\n                        if (errors === _errs12) {\n                          if (typeof data5 === \"string\") {\n                            if (!formats2(data5)) {\n                              validate11.errors = [{\n                                instancePath: instancePath + \"/logoURI\",\n                                schemaPath: \"#/properties/logoURI/format\",\n                                keyword: \"format\",\n                                params: {\n                                  format: \"uri\"\n                                },\n                                message: \"must match format \\\"\" + \"uri\" + \"\\\"\"\n                              }];\n                              return false;\n                            }\n                          } else {\n                            validate11.errors = [{\n                              instancePath: instancePath + \"/logoURI\",\n                              schemaPath: \"#/properties/logoURI/type\",\n                              keyword: \"type\",\n                              params: {\n                                type: \"string\"\n                              },\n                              message: \"must be string\"\n                            }];\n                            return false;\n                          }\n                        }\n                      }\n                      var valid0 = _errs12 === errors;\n                    } else {\n                      var valid0 = true;\n                    }\n                    if (valid0) {\n                      if (data.tags !== undefined) {\n                        var data6 = data.tags;\n                        var _errs14 = errors;\n                        if (errors === _errs14) {\n                          if (Array.isArray(data6)) {\n                            if (data6.length > 10) {\n                              validate11.errors = [{\n                                instancePath: instancePath + \"/tags\",\n                                schemaPath: \"#/properties/tags/maxItems\",\n                                keyword: \"maxItems\",\n                                params: {\n                                  limit: 10\n                                },\n                                message: \"must NOT have more than 10 items\"\n                              }];\n                              return false;\n                            } else {\n                              var valid1 = true;\n                              var len0 = data6.length;\n                              for (var i0 = 0; i0 < len0; i0++) {\n                                var data7 = data6[i0];\n                                var _errs16 = errors;\n                                var _errs17 = errors;\n                                if (errors === _errs17) {\n                                  if (typeof data7 === \"string\") {\n                                    if (func2(data7) > 10) {\n                                      validate11.errors = [{\n                                        instancePath: instancePath + \"/tags/\" + i0,\n                                        schemaPath: \"#/definitions/TagIdentifier/maxLength\",\n                                        keyword: \"maxLength\",\n                                        params: {\n                                          limit: 10\n                                        },\n                                        message: \"must NOT have more than 10 characters\"\n                                      }];\n                                      return false;\n                                    } else {\n                                      if (func2(data7) < 1) {\n                                        validate11.errors = [{\n                                          instancePath: instancePath + \"/tags/\" + i0,\n                                          schemaPath: \"#/definitions/TagIdentifier/minLength\",\n                                          keyword: \"minLength\",\n                                          params: {\n                                            limit: 1\n                                          },\n                                          message: \"must NOT have fewer than 1 characters\"\n                                        }];\n                                        return false;\n                                      } else {\n                                        if (!pattern4.test(data7)) {\n                                          validate11.errors = [{\n                                            instancePath: instancePath + \"/tags/\" + i0,\n                                            schemaPath: \"#/definitions/TagIdentifier/pattern\",\n                                            keyword: \"pattern\",\n                                            params: {\n                                              pattern: \"^[\\\\w]+$\"\n                                            },\n                                            message: \"must match pattern \\\"\" + \"^[\\\\w]+$\" + \"\\\"\"\n                                          }];\n                                          return false;\n                                        }\n                                      }\n                                    }\n                                  } else {\n                                    validate11.errors = [{\n                                      instancePath: instancePath + \"/tags/\" + i0,\n                                      schemaPath: \"#/definitions/TagIdentifier/type\",\n                                      keyword: \"type\",\n                                      params: {\n                                        type: \"string\"\n                                      },\n                                      message: \"must be string\"\n                                    }];\n                                    return false;\n                                  }\n                                }\n                                var valid1 = _errs16 === errors;\n                                if (!valid1) {\n                                  break;\n                                }\n                              }\n                            }\n                          } else {\n                            validate11.errors = [{\n                              instancePath: instancePath + \"/tags\",\n                              schemaPath: \"#/properties/tags/type\",\n                              keyword: \"type\",\n                              params: {\n                                type: \"array\"\n                              },\n                              message: \"must be array\"\n                            }];\n                            return false;\n                          }\n                        }\n                        var valid0 = _errs14 === errors;\n                      } else {\n                        var valid0 = true;\n                      }\n                      if (valid0) {\n                        if (data.extensions !== undefined) {\n                          var _errs19 = errors;\n                          if (!validate12(data.extensions, {\n                            instancePath: instancePath + \"/extensions\",\n                            parentData: data,\n                            parentDataProperty: \"extensions\",\n                            rootData: rootData\n                          })) {\n                            vErrors = vErrors === null ? validate12.errors : vErrors.concat(validate12.errors);\n                            errors = vErrors.length;\n                          }\n                          var valid0 = _errs19 === errors;\n                        } else {\n                          var valid0 = true;\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    } else {\n      validate11.errors = [{\n        instancePath: instancePath,\n        schemaPath: \"#/type\",\n        keyword: \"type\",\n        params: {\n          type: \"object\"\n        },\n        message: \"must be object\"\n      }];\n      return false;\n    }\n  }\n  validate11.errors = vErrors;\n  return errors === 0;\n}\nfunction validate10(data) {\n  var _ref6 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    _ref6$instancePath = _ref6.instancePath,\n    instancePath = _ref6$instancePath === void 0 ? \"\" : _ref6$instancePath;\n  _ref6.parentData;\n  _ref6.parentDataProperty;\n  var _ref6$rootData = _ref6.rootData,\n    rootData = _ref6$rootData === void 0 ? data : _ref6$rootData;\n  var vErrors = null;\n  var errors = 0;\n  if (errors === 0) {\n    if (data && _typeof(data) == \"object\" && !Array.isArray(data)) {\n      var missing0;\n      if (data.tokens === undefined && (missing0 = \"tokens\")) {\n        validate10.errors = [{\n          instancePath: instancePath,\n          schemaPath: \"#/required\",\n          keyword: \"required\",\n          params: {\n            missingProperty: missing0\n          },\n          message: \"must have required property '\" + missing0 + \"'\"\n        }];\n        return false;\n      } else {\n        var _errs1 = errors;\n        for (var key0 in data) {\n          if (!(key0 === \"name\" || key0 === \"timestamp\" || key0 === \"version\" || key0 === \"tokens\" || key0 === \"keywords\" || key0 === \"tags\" || key0 === \"logoURI\")) {\n            validate10.errors = [{\n              instancePath: instancePath,\n              schemaPath: \"#/additionalProperties\",\n              keyword: \"additionalProperties\",\n              params: {\n                additionalProperty: key0\n              },\n              message: \"must NOT have additional properties\"\n            }];\n            return false;\n          }\n        }\n        if (_errs1 === errors) {\n          if (data.name !== undefined) {\n            var data0 = data.name;\n            var _errs2 = errors;\n            if (errors === _errs2) {\n              if (typeof data0 === \"string\") {\n                if (func2(data0) > 30) {\n                  validate10.errors = [{\n                    instancePath: instancePath + \"/name\",\n                    schemaPath: \"#/properties/name/maxLength\",\n                    keyword: \"maxLength\",\n                    params: {\n                      limit: 30\n                    },\n                    message: \"must NOT have more than 30 characters\"\n                  }];\n                  return false;\n                } else {\n                  if (func2(data0) < 1) {\n                    validate10.errors = [{\n                      instancePath: instancePath + \"/name\",\n                      schemaPath: \"#/properties/name/minLength\",\n                      keyword: \"minLength\",\n                      params: {\n                        limit: 1\n                      },\n                      message: \"must NOT have fewer than 1 characters\"\n                    }];\n                    return false;\n                  } else {\n                    if (!pattern0.test(data0)) {\n                      validate10.errors = [{\n                        instancePath: instancePath + \"/name\",\n                        schemaPath: \"#/properties/name/pattern\",\n                        keyword: \"pattern\",\n                        params: {\n                          pattern: \"^[\\\\w ]+$\"\n                        },\n                        message: \"must match pattern \\\"\" + \"^[\\\\w ]+$\" + \"\\\"\"\n                      }];\n                      return false;\n                    }\n                  }\n                }\n              } else {\n                validate10.errors = [{\n                  instancePath: instancePath + \"/name\",\n                  schemaPath: \"#/properties/name/type\",\n                  keyword: \"type\",\n                  params: {\n                    type: \"string\"\n                  },\n                  message: \"must be string\"\n                }];\n                return false;\n              }\n            }\n            var valid0 = _errs2 === errors;\n          } else {\n            var valid0 = true;\n          }\n          if (valid0) {\n            if (data.timestamp !== undefined) {\n              var data1 = data.timestamp;\n              var _errs4 = errors;\n              if (errors === _errs4) {\n                if (errors === _errs4) {\n                  if (typeof data1 === \"string\") {\n                    if (!formats0.validate(data1)) {\n                      validate10.errors = [{\n                        instancePath: instancePath + \"/timestamp\",\n                        schemaPath: \"#/properties/timestamp/format\",\n                        keyword: \"format\",\n                        params: {\n                          format: \"date-time\"\n                        },\n                        message: \"must match format \\\"\" + \"date-time\" + \"\\\"\"\n                      }];\n                      return false;\n                    }\n                  } else {\n                    validate10.errors = [{\n                      instancePath: instancePath + \"/timestamp\",\n                      schemaPath: \"#/properties/timestamp/type\",\n                      keyword: \"type\",\n                      params: {\n                        type: \"string\"\n                      },\n                      message: \"must be string\"\n                    }];\n                    return false;\n                  }\n                }\n              }\n              var valid0 = _errs4 === errors;\n            } else {\n              var valid0 = true;\n            }\n            if (valid0) {\n              if (data.version !== undefined) {\n                var data2 = data.version;\n                var _errs6 = errors;\n                var _errs7 = errors;\n                if (errors === _errs7) {\n                  if (data2 && _typeof(data2) == \"object\" && !Array.isArray(data2)) {\n                    var missing1;\n                    if (data2.major === undefined && (missing1 = \"major\") || data2.minor === undefined && (missing1 = \"minor\") || data2.patch === undefined && (missing1 = \"patch\")) {\n                      validate10.errors = [{\n                        instancePath: instancePath + \"/version\",\n                        schemaPath: \"#/definitions/Version/required\",\n                        keyword: \"required\",\n                        params: {\n                          missingProperty: missing1\n                        },\n                        message: \"must have required property '\" + missing1 + \"'\"\n                      }];\n                      return false;\n                    } else {\n                      var _errs9 = errors;\n                      for (var key1 in data2) {\n                        if (!(key1 === \"major\" || key1 === \"minor\" || key1 === \"patch\")) {\n                          validate10.errors = [{\n                            instancePath: instancePath + \"/version\",\n                            schemaPath: \"#/definitions/Version/additionalProperties\",\n                            keyword: \"additionalProperties\",\n                            params: {\n                              additionalProperty: key1\n                            },\n                            message: \"must NOT have additional properties\"\n                          }];\n                          return false;\n                        }\n                      }\n                      if (_errs9 === errors) {\n                        if (data2.major !== undefined) {\n                          var data3 = data2.major;\n                          var _errs10 = errors;\n                          if (!(typeof data3 == \"number\" && !(data3 % 1) && !isNaN(data3) && isFinite(data3))) {\n                            validate10.errors = [{\n                              instancePath: instancePath + \"/version/major\",\n                              schemaPath: \"#/definitions/Version/properties/major/type\",\n                              keyword: \"type\",\n                              params: {\n                                type: \"integer\"\n                              },\n                              message: \"must be integer\"\n                            }];\n                            return false;\n                          }\n                          if (errors === _errs10) {\n                            if (typeof data3 == \"number\" && isFinite(data3)) {\n                              if (data3 < 0 || isNaN(data3)) {\n                                validate10.errors = [{\n                                  instancePath: instancePath + \"/version/major\",\n                                  schemaPath: \"#/definitions/Version/properties/major/minimum\",\n                                  keyword: \"minimum\",\n                                  params: {\n                                    comparison: \">=\",\n                                    limit: 0\n                                  },\n                                  message: \"must be >= 0\"\n                                }];\n                                return false;\n                              }\n                            }\n                          }\n                          var valid2 = _errs10 === errors;\n                        } else {\n                          var valid2 = true;\n                        }\n                        if (valid2) {\n                          if (data2.minor !== undefined) {\n                            var data4 = data2.minor;\n                            var _errs12 = errors;\n                            if (!(typeof data4 == \"number\" && !(data4 % 1) && !isNaN(data4) && isFinite(data4))) {\n                              validate10.errors = [{\n                                instancePath: instancePath + \"/version/minor\",\n                                schemaPath: \"#/definitions/Version/properties/minor/type\",\n                                keyword: \"type\",\n                                params: {\n                                  type: \"integer\"\n                                },\n                                message: \"must be integer\"\n                              }];\n                              return false;\n                            }\n                            if (errors === _errs12) {\n                              if (typeof data4 == \"number\" && isFinite(data4)) {\n                                if (data4 < 0 || isNaN(data4)) {\n                                  validate10.errors = [{\n                                    instancePath: instancePath + \"/version/minor\",\n                                    schemaPath: \"#/definitions/Version/properties/minor/minimum\",\n                                    keyword: \"minimum\",\n                                    params: {\n                                      comparison: \">=\",\n                                      limit: 0\n                                    },\n                                    message: \"must be >= 0\"\n                                  }];\n                                  return false;\n                                }\n                              }\n                            }\n                            var valid2 = _errs12 === errors;\n                          } else {\n                            var valid2 = true;\n                          }\n                          if (valid2) {\n                            if (data2.patch !== undefined) {\n                              var data5 = data2.patch;\n                              var _errs14 = errors;\n                              if (!(typeof data5 == \"number\" && !(data5 % 1) && !isNaN(data5) && isFinite(data5))) {\n                                validate10.errors = [{\n                                  instancePath: instancePath + \"/version/patch\",\n                                  schemaPath: \"#/definitions/Version/properties/patch/type\",\n                                  keyword: \"type\",\n                                  params: {\n                                    type: \"integer\"\n                                  },\n                                  message: \"must be integer\"\n                                }];\n                                return false;\n                              }\n                              if (errors === _errs14) {\n                                if (typeof data5 == \"number\" && isFinite(data5)) {\n                                  if (data5 < 0 || isNaN(data5)) {\n                                    validate10.errors = [{\n                                      instancePath: instancePath + \"/version/patch\",\n                                      schemaPath: \"#/definitions/Version/properties/patch/minimum\",\n                                      keyword: \"minimum\",\n                                      params: {\n                                        comparison: \">=\",\n                                        limit: 0\n                                      },\n                                      message: \"must be >= 0\"\n                                    }];\n                                    return false;\n                                  }\n                                }\n                              }\n                              var valid2 = _errs14 === errors;\n                            } else {\n                              var valid2 = true;\n                            }\n                          }\n                        }\n                      }\n                    }\n                  } else {\n                    validate10.errors = [{\n                      instancePath: instancePath + \"/version\",\n                      schemaPath: \"#/definitions/Version/type\",\n                      keyword: \"type\",\n                      params: {\n                        type: \"object\"\n                      },\n                      message: \"must be object\"\n                    }];\n                    return false;\n                  }\n                }\n                var valid0 = _errs6 === errors;\n              } else {\n                var valid0 = true;\n              }\n              if (valid0) {\n                if (data.tokens !== undefined) {\n                  var data6 = data.tokens;\n                  var _errs16 = errors;\n                  if (errors === _errs16) {\n                    if (Array.isArray(data6)) {\n                      if (data6.length > 10000) {\n                        validate10.errors = [{\n                          instancePath: instancePath + \"/tokens\",\n                          schemaPath: \"#/properties/tokens/maxItems\",\n                          keyword: \"maxItems\",\n                          params: {\n                            limit: 10000\n                          },\n                          message: \"must NOT have more than 10000 items\"\n                        }];\n                        return false;\n                      } else {\n                        if (data6.length < 1) {\n                          validate10.errors = [{\n                            instancePath: instancePath + \"/tokens\",\n                            schemaPath: \"#/properties/tokens/minItems\",\n                            keyword: \"minItems\",\n                            params: {\n                              limit: 1\n                            },\n                            message: \"must NOT have fewer than 1 items\"\n                          }];\n                          return false;\n                        } else {\n                          var valid3 = true;\n                          var len0 = data6.length;\n                          for (var i0 = 0; i0 < len0; i0++) {\n                            var _errs18 = errors;\n                            if (!validate11(data6[i0], {\n                              instancePath: instancePath + \"/tokens/\" + i0,\n                              parentData: data6,\n                              parentDataProperty: i0,\n                              rootData: rootData\n                            })) {\n                              vErrors = vErrors === null ? validate11.errors : vErrors.concat(validate11.errors);\n                              errors = vErrors.length;\n                            }\n                            var valid3 = _errs18 === errors;\n                            if (!valid3) {\n                              break;\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      validate10.errors = [{\n                        instancePath: instancePath + \"/tokens\",\n                        schemaPath: \"#/properties/tokens/type\",\n                        keyword: \"type\",\n                        params: {\n                          type: \"array\"\n                        },\n                        message: \"must be array\"\n                      }];\n                      return false;\n                    }\n                  }\n                  var valid0 = _errs16 === errors;\n                } else {\n                  var valid0 = true;\n                }\n                if (valid0) {\n                  if (data.keywords !== undefined) {\n                    var data8 = data.keywords;\n                    var _errs19 = errors;\n                    if (errors === _errs19) {\n                      if (Array.isArray(data8)) {\n                        if (data8.length > 20) {\n                          validate10.errors = [{\n                            instancePath: instancePath + \"/keywords\",\n                            schemaPath: \"#/properties/keywords/maxItems\",\n                            keyword: \"maxItems\",\n                            params: {\n                              limit: 20\n                            },\n                            message: \"must NOT have more than 20 items\"\n                          }];\n                          return false;\n                        } else {\n                          var valid4 = true;\n                          var len1 = data8.length;\n                          for (var i1 = 0; i1 < len1; i1++) {\n                            var data9 = data8[i1];\n                            var _errs21 = errors;\n                            if (errors === _errs21) {\n                              if (typeof data9 === \"string\") {\n                                if (func2(data9) > 20) {\n                                  validate10.errors = [{\n                                    instancePath: instancePath + \"/keywords/\" + i1,\n                                    schemaPath: \"#/properties/keywords/items/maxLength\",\n                                    keyword: \"maxLength\",\n                                    params: {\n                                      limit: 20\n                                    },\n                                    message: \"must NOT have more than 20 characters\"\n                                  }];\n                                  return false;\n                                } else {\n                                  if (func2(data9) < 1) {\n                                    validate10.errors = [{\n                                      instancePath: instancePath + \"/keywords/\" + i1,\n                                      schemaPath: \"#/properties/keywords/items/minLength\",\n                                      keyword: \"minLength\",\n                                      params: {\n                                        limit: 1\n                                      },\n                                      message: \"must NOT have fewer than 1 characters\"\n                                    }];\n                                    return false;\n                                  } else {\n                                    if (!pattern0.test(data9)) {\n                                      validate10.errors = [{\n                                        instancePath: instancePath + \"/keywords/\" + i1,\n                                        schemaPath: \"#/properties/keywords/items/pattern\",\n                                        keyword: \"pattern\",\n                                        params: {\n                                          pattern: \"^[\\\\w ]+$\"\n                                        },\n                                        message: \"must match pattern \\\"\" + \"^[\\\\w ]+$\" + \"\\\"\"\n                                      }];\n                                      return false;\n                                    }\n                                  }\n                                }\n                              } else {\n                                validate10.errors = [{\n                                  instancePath: instancePath + \"/keywords/\" + i1,\n                                  schemaPath: \"#/properties/keywords/items/type\",\n                                  keyword: \"type\",\n                                  params: {\n                                    type: \"string\"\n                                  },\n                                  message: \"must be string\"\n                                }];\n                                return false;\n                              }\n                            }\n                            var valid4 = _errs21 === errors;\n                            if (!valid4) {\n                              break;\n                            }\n                          }\n                          if (valid4) {\n                            var i2 = data8.length;\n                            var j0;\n                            if (i2 > 1) {\n                              var indices0 = {};\n                              for (; i2--;) {\n                                var item0 = data8[i2];\n                                if (typeof item0 !== \"string\") {\n                                  continue;\n                                }\n                                if (typeof indices0[item0] == \"number\") {\n                                  j0 = indices0[item0];\n                                  validate10.errors = [{\n                                    instancePath: instancePath + \"/keywords\",\n                                    schemaPath: \"#/properties/keywords/uniqueItems\",\n                                    keyword: \"uniqueItems\",\n                                    params: {\n                                      i: i2,\n                                      j: j0\n                                    },\n                                    message: \"must NOT have duplicate items (items ## \" + j0 + \" and \" + i2 + \" are identical)\"\n                                  }];\n                                  return false;\n                                }\n                                indices0[item0] = i2;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        validate10.errors = [{\n                          instancePath: instancePath + \"/keywords\",\n                          schemaPath: \"#/properties/keywords/type\",\n                          keyword: \"type\",\n                          params: {\n                            type: \"array\"\n                          },\n                          message: \"must be array\"\n                        }];\n                        return false;\n                      }\n                    }\n                    var valid0 = _errs19 === errors;\n                  } else {\n                    var valid0 = true;\n                  }\n                  if (valid0) {\n                    if (data.tags !== undefined) {\n                      var data10 = data.tags;\n                      var _errs23 = errors;\n                      if (errors === _errs23) {\n                        if (data10 && _typeof(data10) == \"object\" && !Array.isArray(data10)) {\n                          if (Object.keys(data10).length > 20) {\n                            validate10.errors = [{\n                              instancePath: instancePath + \"/tags\",\n                              schemaPath: \"#/properties/tags/maxProperties\",\n                              keyword: \"maxProperties\",\n                              params: {\n                                limit: 20\n                              },\n                              message: \"must NOT have more than 20 properties\"\n                            }];\n                            return false;\n                          } else {\n                            for (var key2 in data10) {\n                              var _errs25 = errors;\n                              var _errs26 = errors;\n                              if (errors === _errs26) {\n                                if (typeof key2 === \"string\") {\n                                  if (func2(key2) > 10) {\n                                    var err0 = {\n                                      instancePath: instancePath + \"/tags\",\n                                      schemaPath: \"#/definitions/TagIdentifier/maxLength\",\n                                      keyword: \"maxLength\",\n                                      params: {\n                                        limit: 10\n                                      },\n                                      message: \"must NOT have more than 10 characters\",\n                                      propertyName: key2\n                                    };\n                                    if (vErrors === null) {\n                                      vErrors = [err0];\n                                    } else {\n                                      vErrors.push(err0);\n                                    }\n                                    errors++;\n                                  } else {\n                                    if (func2(key2) < 1) {\n                                      var err1 = {\n                                        instancePath: instancePath + \"/tags\",\n                                        schemaPath: \"#/definitions/TagIdentifier/minLength\",\n                                        keyword: \"minLength\",\n                                        params: {\n                                          limit: 1\n                                        },\n                                        message: \"must NOT have fewer than 1 characters\",\n                                        propertyName: key2\n                                      };\n                                      if (vErrors === null) {\n                                        vErrors = [err1];\n                                      } else {\n                                        vErrors.push(err1);\n                                      }\n                                      errors++;\n                                    } else {\n                                      if (!pattern4.test(key2)) {\n                                        var err2 = {\n                                          instancePath: instancePath + \"/tags\",\n                                          schemaPath: \"#/definitions/TagIdentifier/pattern\",\n                                          keyword: \"pattern\",\n                                          params: {\n                                            pattern: \"^[\\\\w]+$\"\n                                          },\n                                          message: \"must match pattern \\\"\" + \"^[\\\\w]+$\" + \"\\\"\",\n                                          propertyName: key2\n                                        };\n                                        if (vErrors === null) {\n                                          vErrors = [err2];\n                                        } else {\n                                          vErrors.push(err2);\n                                        }\n                                        errors++;\n                                      }\n                                    }\n                                  }\n                                } else {\n                                  var err3 = {\n                                    instancePath: instancePath + \"/tags\",\n                                    schemaPath: \"#/definitions/TagIdentifier/type\",\n                                    keyword: \"type\",\n                                    params: {\n                                      type: \"string\"\n                                    },\n                                    message: \"must be string\",\n                                    propertyName: key2\n                                  };\n                                  if (vErrors === null) {\n                                    vErrors = [err3];\n                                  } else {\n                                    vErrors.push(err3);\n                                  }\n                                  errors++;\n                                }\n                              }\n                              var valid6 = _errs25 === errors;\n                              if (!valid6) {\n                                var err4 = {\n                                  instancePath: instancePath + \"/tags\",\n                                  schemaPath: \"#/properties/tags/propertyNames\",\n                                  keyword: \"propertyNames\",\n                                  params: {\n                                    propertyName: key2\n                                  },\n                                  message: \"property name must be valid\"\n                                };\n                                if (vErrors === null) {\n                                  vErrors = [err4];\n                                } else {\n                                  vErrors.push(err4);\n                                }\n                                errors++;\n                                validate10.errors = vErrors;\n                                return false;\n                              }\n                            }\n                            if (valid6) {\n                              for (var key3 in data10) {\n                                var data11 = data10[key3];\n                                var _errs29 = errors;\n                                var _errs30 = errors;\n                                if (errors === _errs30) {\n                                  if (data11 && _typeof(data11) == \"object\" && !Array.isArray(data11)) {\n                                    var missing2 = void 0;\n                                    if (data11.name === undefined && (missing2 = \"name\") || data11.description === undefined && (missing2 = \"description\")) {\n                                      validate10.errors = [{\n                                        instancePath: instancePath + \"/tags/\" + key3.replace(/~/g, \"~0\").replace(/\\//g, \"~1\"),\n                                        schemaPath: \"#/definitions/TagDefinition/required\",\n                                        keyword: \"required\",\n                                        params: {\n                                          missingProperty: missing2\n                                        },\n                                        message: \"must have required property '\" + missing2 + \"'\"\n                                      }];\n                                      return false;\n                                    } else {\n                                      var _errs32 = errors;\n                                      for (var key4 in data11) {\n                                        if (!(key4 === \"name\" || key4 === \"description\")) {\n                                          validate10.errors = [{\n                                            instancePath: instancePath + \"/tags/\" + key3.replace(/~/g, \"~0\").replace(/\\//g, \"~1\"),\n                                            schemaPath: \"#/definitions/TagDefinition/additionalProperties\",\n                                            keyword: \"additionalProperties\",\n                                            params: {\n                                              additionalProperty: key4\n                                            },\n                                            message: \"must NOT have additional properties\"\n                                          }];\n                                          return false;\n                                        }\n                                      }\n                                      if (_errs32 === errors) {\n                                        if (data11.name !== undefined) {\n                                          var data12 = data11.name;\n                                          var _errs33 = errors;\n                                          if (errors === _errs33) {\n                                            if (typeof data12 === \"string\") {\n                                              if (func2(data12) > 20) {\n                                                validate10.errors = [{\n                                                  instancePath: instancePath + \"/tags/\" + key3.replace(/~/g, \"~0\").replace(/\\//g, \"~1\") + \"/name\",\n                                                  schemaPath: \"#/definitions/TagDefinition/properties/name/maxLength\",\n                                                  keyword: \"maxLength\",\n                                                  params: {\n                                                    limit: 20\n                                                  },\n                                                  message: \"must NOT have more than 20 characters\"\n                                                }];\n                                                return false;\n                                              } else {\n                                                if (func2(data12) < 1) {\n                                                  validate10.errors = [{\n                                                    instancePath: instancePath + \"/tags/\" + key3.replace(/~/g, \"~0\").replace(/\\//g, \"~1\") + \"/name\",\n                                                    schemaPath: \"#/definitions/TagDefinition/properties/name/minLength\",\n                                                    keyword: \"minLength\",\n                                                    params: {\n                                                      limit: 1\n                                                    },\n                                                    message: \"must NOT have fewer than 1 characters\"\n                                                  }];\n                                                  return false;\n                                                } else {\n                                                  if (!pattern10.test(data12)) {\n                                                    validate10.errors = [{\n                                                      instancePath: instancePath + \"/tags/\" + key3.replace(/~/g, \"~0\").replace(/\\//g, \"~1\") + \"/name\",\n                                                      schemaPath: \"#/definitions/TagDefinition/properties/name/pattern\",\n                                                      keyword: \"pattern\",\n                                                      params: {\n                                                        pattern: \"^[ \\\\w]+$\"\n                                                      },\n                                                      message: \"must match pattern \\\"\" + \"^[ \\\\w]+$\" + \"\\\"\"\n                                                    }];\n                                                    return false;\n                                                  }\n                                                }\n                                              }\n                                            } else {\n                                              validate10.errors = [{\n                                                instancePath: instancePath + \"/tags/\" + key3.replace(/~/g, \"~0\").replace(/\\//g, \"~1\") + \"/name\",\n                                                schemaPath: \"#/definitions/TagDefinition/properties/name/type\",\n                                                keyword: \"type\",\n                                                params: {\n                                                  type: \"string\"\n                                                },\n                                                message: \"must be string\"\n                                              }];\n                                              return false;\n                                            }\n                                          }\n                                          var valid10 = _errs33 === errors;\n                                        } else {\n                                          var valid10 = true;\n                                        }\n                                        if (valid10) {\n                                          if (data11.description !== undefined) {\n                                            var data13 = data11.description;\n                                            var _errs35 = errors;\n                                            if (errors === _errs35) {\n                                              if (typeof data13 === \"string\") {\n                                                if (func2(data13) > 200) {\n                                                  validate10.errors = [{\n                                                    instancePath: instancePath + \"/tags/\" + key3.replace(/~/g, \"~0\").replace(/\\//g, \"~1\") + \"/description\",\n                                                    schemaPath: \"#/definitions/TagDefinition/properties/description/maxLength\",\n                                                    keyword: \"maxLength\",\n                                                    params: {\n                                                      limit: 200\n                                                    },\n                                                    message: \"must NOT have more than 200 characters\"\n                                                  }];\n                                                  return false;\n                                                } else {\n                                                  if (func2(data13) < 1) {\n                                                    validate10.errors = [{\n                                                      instancePath: instancePath + \"/tags/\" + key3.replace(/~/g, \"~0\").replace(/\\//g, \"~1\") + \"/description\",\n                                                      schemaPath: \"#/definitions/TagDefinition/properties/description/minLength\",\n                                                      keyword: \"minLength\",\n                                                      params: {\n                                                        limit: 1\n                                                      },\n                                                      message: \"must NOT have fewer than 1 characters\"\n                                                    }];\n                                                    return false;\n                                                  } else {\n                                                    if (!pattern11.test(data13)) {\n                                                      validate10.errors = [{\n                                                        instancePath: instancePath + \"/tags/\" + key3.replace(/~/g, \"~0\").replace(/\\//g, \"~1\") + \"/description\",\n                                                        schemaPath: \"#/definitions/TagDefinition/properties/description/pattern\",\n                                                        keyword: \"pattern\",\n                                                        params: {\n                                                          pattern: \"^[ \\\\w\\\\.,:]+$\"\n                                                        },\n                                                        message: \"must match pattern \\\"\" + \"^[ \\\\w\\\\.,:]+$\" + \"\\\"\"\n                                                      }];\n                                                      return false;\n                                                    }\n                                                  }\n                                                }\n                                              } else {\n                                                validate10.errors = [{\n                                                  instancePath: instancePath + \"/tags/\" + key3.replace(/~/g, \"~0\").replace(/\\//g, \"~1\") + \"/description\",\n                                                  schemaPath: \"#/definitions/TagDefinition/properties/description/type\",\n                                                  keyword: \"type\",\n                                                  params: {\n                                                    type: \"string\"\n                                                  },\n                                                  message: \"must be string\"\n                                                }];\n                                                return false;\n                                              }\n                                            }\n                                            var valid10 = _errs35 === errors;\n                                          } else {\n                                            var valid10 = true;\n                                          }\n                                        }\n                                      }\n                                    }\n                                  } else {\n                                    validate10.errors = [{\n                                      instancePath: instancePath + \"/tags/\" + key3.replace(/~/g, \"~0\").replace(/\\//g, \"~1\"),\n                                      schemaPath: \"#/definitions/TagDefinition/type\",\n                                      keyword: \"type\",\n                                      params: {\n                                        type: \"object\"\n                                      },\n                                      message: \"must be object\"\n                                    }];\n                                    return false;\n                                  }\n                                }\n                                var valid8 = _errs29 === errors;\n                                if (!valid8) {\n                                  break;\n                                }\n                              }\n                            }\n                          }\n                        } else {\n                          validate10.errors = [{\n                            instancePath: instancePath + \"/tags\",\n                            schemaPath: \"#/properties/tags/type\",\n                            keyword: \"type\",\n                            params: {\n                              type: \"object\"\n                            },\n                            message: \"must be object\"\n                          }];\n                          return false;\n                        }\n                      }\n                      var valid0 = _errs23 === errors;\n                    } else {\n                      var valid0 = true;\n                    }\n                    if (valid0) {\n                      if (data.logoURI !== undefined) {\n                        var data14 = data.logoURI;\n                        var _errs37 = errors;\n                        if (errors === _errs37) {\n                          if (errors === _errs37) {\n                            if (typeof data14 === \"string\") {\n                              if (!formats2(data14)) {\n                                validate10.errors = [{\n                                  instancePath: instancePath + \"/logoURI\",\n                                  schemaPath: \"#/properties/logoURI/format\",\n                                  keyword: \"format\",\n                                  params: {\n                                    format: \"uri\"\n                                  },\n                                  message: \"must match format \\\"\" + \"uri\" + \"\\\"\"\n                                }];\n                                return false;\n                              }\n                            } else {\n                              validate10.errors = [{\n                                instancePath: instancePath + \"/logoURI\",\n                                schemaPath: \"#/properties/logoURI/type\",\n                                keyword: \"type\",\n                                params: {\n                                  type: \"string\"\n                                },\n                                message: \"must be string\"\n                              }];\n                              return false;\n                            }\n                          }\n                        }\n                        var valid0 = _errs37 === errors;\n                      } else {\n                        var valid0 = true;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    } else {\n      validate10.errors = [{\n        instancePath: instancePath,\n        schemaPath: \"#/type\",\n        keyword: \"type\",\n        params: {\n          type: \"object\"\n        },\n        message: \"must be object\"\n      }];\n      return false;\n    }\n  }\n  validate10.errors = vErrors;\n  return errors === 0;\n}\nexport { validate10 as default, validate };","map":{"version":3,"names":["_typeof","validate","validate10","func2","require","default","pattern0","RegExp","pattern4","pattern10","pattern11","formats0","fullFormats","formats2","uri","pattern1","pattern2","pattern3","validate15","data","_ref","arguments","length","undefined","_ref$instancePath","instancePath","parentData","parentDataProperty","rootData","vErrors","errors","_errs0","valid0","_errs1","_errs3","valid2","_errs4","err0","schemaPath","keyword","params","limit","message","push","err1","err2","type","_valid1","_errs6","err3","_errs8","isFinite","err4","_errs10","err5","err6","_valid0","err7","validate14","_ref2","_ref2$instancePath","_ref2$rootData","_errs12","Array","isArray","Object","keys","key0","_errs14","_errs15","err8","propertyName","err9","test","err10","pattern","err11","valid3","err12","key1","_errs18","replace","concat","valid5","err13","err14","validate13","_ref3","_ref3$instancePath","_ref3$rootData","validate12","_ref4","_ref4$instancePath","_ref4$rootData","_errs2","_errs5","validate11","_ref5","_ref5$instancePath","_ref5$rootData","missing0","chainId","address","decimals","name","symbol","missingProperty","additionalProperty","data0","isNaN","comparison","data1","data2","data3","data4","logoURI","data5","format","tags","data6","valid1","len0","i0","data7","_errs16","_errs17","extensions","_errs19","_ref6","_ref6$instancePath","_ref6$rootData","tokens","timestamp","version","_errs7","missing1","major","minor","patch","_errs9","keywords","data8","valid4","len1","i1","data9","_errs21","i2","j0","indices0","item0","i","j","data10","_errs23","key2","_errs25","_errs26","valid6","key3","data11","_errs29","_errs30","missing2","description","_errs32","key4","data12","_errs33","valid10","data13","_errs35","valid8","data14","_errs37"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/@uniswap/widgets/dist/validateTokens-bc6da707.js"],"sourcesContent":["import _typeof from '@babel/runtime/helpers/typeof';\n\nvar validate = validate10;\n\nvar func2 = require(\"ajv/dist/runtime/ucs2length\").default;\n\nvar pattern0 = new RegExp(\"^[\\\\w ]+$\", \"u\");\nvar pattern4 = new RegExp(\"^[\\\\w]+$\", \"u\");\nvar pattern10 = new RegExp(\"^[ \\\\w]+$\", \"u\");\nvar pattern11 = new RegExp(\"^[ \\\\w\\\\.,:]+$\", \"u\");\n\nvar formats0 = require(\"ajv-formats/dist/formats\").fullFormats[\"date-time\"];\n\nvar formats2 = require(\"ajv-formats/dist/formats\").fullFormats.uri;\nvar pattern1 = new RegExp(\"^0x[a-fA-F0-9]{40}$\", \"u\");\nvar pattern2 = new RegExp(\"^[ \\\\w.'+\\\\-%/À-ÖØ-öø-ÿ:&\\\\[\\\\]\\\\(\\\\)]+$\", \"u\");\nvar pattern3 = new RegExp(\"^[a-zA-Z0-9+\\\\-%/$.]+$\", \"u\");\n\nfunction validate15(data) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$instancePath = _ref.instancePath,\n      instancePath = _ref$instancePath === void 0 ? \"\" : _ref$instancePath;\n      _ref.parentData;\n      _ref.parentDataProperty;\n      _ref.rootData;\n\n  var vErrors = null;\n  var errors = 0;\n  var _errs0 = errors;\n  var valid0 = false;\n  var _errs1 = errors;\n  var _errs3 = errors;\n  var valid2 = false;\n  var _errs4 = errors;\n\n  if (errors === _errs4) {\n    if (typeof data === \"string\") {\n      if (func2(data) > 42) {\n        var err0 = {\n          instancePath: instancePath,\n          schemaPath: \"#/definitions/ExtensionPrimitiveValue/anyOf/0/maxLength\",\n          keyword: \"maxLength\",\n          params: {\n            limit: 42\n          },\n          message: \"must NOT have more than 42 characters\"\n        };\n\n        if (vErrors === null) {\n          vErrors = [err0];\n        } else {\n          vErrors.push(err0);\n        }\n\n        errors++;\n      } else {\n        if (func2(data) < 1) {\n          var err1 = {\n            instancePath: instancePath,\n            schemaPath: \"#/definitions/ExtensionPrimitiveValue/anyOf/0/minLength\",\n            keyword: \"minLength\",\n            params: {\n              limit: 1\n            },\n            message: \"must NOT have fewer than 1 characters\"\n          };\n\n          if (vErrors === null) {\n            vErrors = [err1];\n          } else {\n            vErrors.push(err1);\n          }\n\n          errors++;\n        }\n      }\n    } else {\n      var err2 = {\n        instancePath: instancePath,\n        schemaPath: \"#/definitions/ExtensionPrimitiveValue/anyOf/0/type\",\n        keyword: \"type\",\n        params: {\n          type: \"string\"\n        },\n        message: \"must be string\"\n      };\n\n      if (vErrors === null) {\n        vErrors = [err2];\n      } else {\n        vErrors.push(err2);\n      }\n\n      errors++;\n    }\n  }\n\n  var _valid1 = _errs4 === errors;\n\n  valid2 = valid2 || _valid1;\n\n  if (!valid2) {\n    var _errs6 = errors;\n\n    if (typeof data !== \"boolean\") {\n      var err3 = {\n        instancePath: instancePath,\n        schemaPath: \"#/definitions/ExtensionPrimitiveValue/anyOf/1/type\",\n        keyword: \"type\",\n        params: {\n          type: \"boolean\"\n        },\n        message: \"must be boolean\"\n      };\n\n      if (vErrors === null) {\n        vErrors = [err3];\n      } else {\n        vErrors.push(err3);\n      }\n\n      errors++;\n    }\n\n    var _valid1 = _errs6 === errors;\n\n    valid2 = valid2 || _valid1;\n\n    if (!valid2) {\n      var _errs8 = errors;\n\n      if (!(typeof data == \"number\" && isFinite(data))) {\n        var err4 = {\n          instancePath: instancePath,\n          schemaPath: \"#/definitions/ExtensionPrimitiveValue/anyOf/2/type\",\n          keyword: \"type\",\n          params: {\n            type: \"number\"\n          },\n          message: \"must be number\"\n        };\n\n        if (vErrors === null) {\n          vErrors = [err4];\n        } else {\n          vErrors.push(err4);\n        }\n\n        errors++;\n      }\n\n      var _valid1 = _errs8 === errors;\n\n      valid2 = valid2 || _valid1;\n\n      if (!valid2) {\n        var _errs10 = errors;\n\n        if (data !== null) {\n          var err5 = {\n            instancePath: instancePath,\n            schemaPath: \"#/definitions/ExtensionPrimitiveValue/anyOf/3/type\",\n            keyword: \"type\",\n            params: {\n              type: \"null\"\n            },\n            message: \"must be null\"\n          };\n\n          if (vErrors === null) {\n            vErrors = [err5];\n          } else {\n            vErrors.push(err5);\n          }\n\n          errors++;\n        }\n\n        var _valid1 = _errs10 === errors;\n\n        valid2 = valid2 || _valid1;\n      }\n    }\n  }\n\n  if (!valid2) {\n    var err6 = {\n      instancePath: instancePath,\n      schemaPath: \"#/definitions/ExtensionPrimitiveValue/anyOf\",\n      keyword: \"anyOf\",\n      params: {},\n      message: \"must match a schema in anyOf\"\n    };\n\n    if (vErrors === null) {\n      vErrors = [err6];\n    } else {\n      vErrors.push(err6);\n    }\n\n    errors++;\n  } else {\n    errors = _errs3;\n\n    if (vErrors !== null) {\n      if (_errs3) {\n        vErrors.length = _errs3;\n      } else {\n        vErrors = null;\n      }\n    }\n  }\n\n  var _valid0 = _errs1 === errors;\n\n  valid0 = valid0 || _valid0;\n\n  if (!valid0) {\n    var err7 = {\n      instancePath: instancePath,\n      schemaPath: \"#/anyOf\",\n      keyword: \"anyOf\",\n      params: {},\n      message: \"must match a schema in anyOf\"\n    };\n\n    if (vErrors === null) {\n      vErrors = [err7];\n    } else {\n      vErrors.push(err7);\n    }\n\n    errors++;\n    validate15.errors = vErrors;\n    return false;\n  } else {\n    errors = _errs0;\n\n    if (vErrors !== null) {\n      if (_errs0) {\n        vErrors.length = _errs0;\n      } else {\n        vErrors = null;\n      }\n    }\n  }\n\n  validate15.errors = vErrors;\n  return errors === 0;\n}\n\nfunction validate14(data) {\n  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref2$instancePath = _ref2.instancePath,\n      instancePath = _ref2$instancePath === void 0 ? \"\" : _ref2$instancePath;\n      _ref2.parentData;\n      _ref2.parentDataProperty;\n      var _ref2$rootData = _ref2.rootData,\n      rootData = _ref2$rootData === void 0 ? data : _ref2$rootData;\n\n  var vErrors = null;\n  var errors = 0;\n  var _errs0 = errors;\n  var valid0 = false;\n  var _errs1 = errors;\n  var _errs3 = errors;\n  var valid2 = false;\n  var _errs4 = errors;\n\n  if (errors === _errs4) {\n    if (typeof data === \"string\") {\n      if (func2(data) > 42) {\n        var err0 = {\n          instancePath: instancePath,\n          schemaPath: \"#/definitions/ExtensionPrimitiveValue/anyOf/0/maxLength\",\n          keyword: \"maxLength\",\n          params: {\n            limit: 42\n          },\n          message: \"must NOT have more than 42 characters\"\n        };\n\n        if (vErrors === null) {\n          vErrors = [err0];\n        } else {\n          vErrors.push(err0);\n        }\n\n        errors++;\n      } else {\n        if (func2(data) < 1) {\n          var err1 = {\n            instancePath: instancePath,\n            schemaPath: \"#/definitions/ExtensionPrimitiveValue/anyOf/0/minLength\",\n            keyword: \"minLength\",\n            params: {\n              limit: 1\n            },\n            message: \"must NOT have fewer than 1 characters\"\n          };\n\n          if (vErrors === null) {\n            vErrors = [err1];\n          } else {\n            vErrors.push(err1);\n          }\n\n          errors++;\n        }\n      }\n    } else {\n      var err2 = {\n        instancePath: instancePath,\n        schemaPath: \"#/definitions/ExtensionPrimitiveValue/anyOf/0/type\",\n        keyword: \"type\",\n        params: {\n          type: \"string\"\n        },\n        message: \"must be string\"\n      };\n\n      if (vErrors === null) {\n        vErrors = [err2];\n      } else {\n        vErrors.push(err2);\n      }\n\n      errors++;\n    }\n  }\n\n  var _valid1 = _errs4 === errors;\n\n  valid2 = valid2 || _valid1;\n\n  if (!valid2) {\n    var _errs6 = errors;\n\n    if (typeof data !== \"boolean\") {\n      var err3 = {\n        instancePath: instancePath,\n        schemaPath: \"#/definitions/ExtensionPrimitiveValue/anyOf/1/type\",\n        keyword: \"type\",\n        params: {\n          type: \"boolean\"\n        },\n        message: \"must be boolean\"\n      };\n\n      if (vErrors === null) {\n        vErrors = [err3];\n      } else {\n        vErrors.push(err3);\n      }\n\n      errors++;\n    }\n\n    var _valid1 = _errs6 === errors;\n\n    valid2 = valid2 || _valid1;\n\n    if (!valid2) {\n      var _errs8 = errors;\n\n      if (!(typeof data == \"number\" && isFinite(data))) {\n        var err4 = {\n          instancePath: instancePath,\n          schemaPath: \"#/definitions/ExtensionPrimitiveValue/anyOf/2/type\",\n          keyword: \"type\",\n          params: {\n            type: \"number\"\n          },\n          message: \"must be number\"\n        };\n\n        if (vErrors === null) {\n          vErrors = [err4];\n        } else {\n          vErrors.push(err4);\n        }\n\n        errors++;\n      }\n\n      var _valid1 = _errs8 === errors;\n\n      valid2 = valid2 || _valid1;\n\n      if (!valid2) {\n        var _errs10 = errors;\n\n        if (data !== null) {\n          var err5 = {\n            instancePath: instancePath,\n            schemaPath: \"#/definitions/ExtensionPrimitiveValue/anyOf/3/type\",\n            keyword: \"type\",\n            params: {\n              type: \"null\"\n            },\n            message: \"must be null\"\n          };\n\n          if (vErrors === null) {\n            vErrors = [err5];\n          } else {\n            vErrors.push(err5);\n          }\n\n          errors++;\n        }\n\n        var _valid1 = _errs10 === errors;\n\n        valid2 = valid2 || _valid1;\n      }\n    }\n  }\n\n  if (!valid2) {\n    var err6 = {\n      instancePath: instancePath,\n      schemaPath: \"#/definitions/ExtensionPrimitiveValue/anyOf\",\n      keyword: \"anyOf\",\n      params: {},\n      message: \"must match a schema in anyOf\"\n    };\n\n    if (vErrors === null) {\n      vErrors = [err6];\n    } else {\n      vErrors.push(err6);\n    }\n\n    errors++;\n  } else {\n    errors = _errs3;\n\n    if (vErrors !== null) {\n      if (_errs3) {\n        vErrors.length = _errs3;\n      } else {\n        vErrors = null;\n      }\n    }\n  }\n\n  var _valid0 = _errs1 === errors;\n\n  valid0 = valid0 || _valid0;\n\n  if (!valid0) {\n    var _errs12 = errors;\n\n    if (errors === _errs12) {\n      if (data && _typeof(data) == \"object\" && !Array.isArray(data)) {\n        if (Object.keys(data).length > 10) {\n          var err7 = {\n            instancePath: instancePath,\n            schemaPath: \"#/anyOf/1/maxProperties\",\n            keyword: \"maxProperties\",\n            params: {\n              limit: 10\n            },\n            message: \"must NOT have more than 10 properties\"\n          };\n\n          if (vErrors === null) {\n            vErrors = [err7];\n          } else {\n            vErrors.push(err7);\n          }\n\n          errors++;\n        } else {\n          for (var key0 in data) {\n            var _errs14 = errors;\n            var _errs15 = errors;\n\n            if (errors === _errs15) {\n              if (typeof key0 === \"string\") {\n                if (func2(key0) > 40) {\n                  var err8 = {\n                    instancePath: instancePath,\n                    schemaPath: \"#/definitions/ExtensionIdentifier/maxLength\",\n                    keyword: \"maxLength\",\n                    params: {\n                      limit: 40\n                    },\n                    message: \"must NOT have more than 40 characters\",\n                    propertyName: key0\n                  };\n\n                  if (vErrors === null) {\n                    vErrors = [err8];\n                  } else {\n                    vErrors.push(err8);\n                  }\n\n                  errors++;\n                } else {\n                  if (func2(key0) < 1) {\n                    var err9 = {\n                      instancePath: instancePath,\n                      schemaPath: \"#/definitions/ExtensionIdentifier/minLength\",\n                      keyword: \"minLength\",\n                      params: {\n                        limit: 1\n                      },\n                      message: \"must NOT have fewer than 1 characters\",\n                      propertyName: key0\n                    };\n\n                    if (vErrors === null) {\n                      vErrors = [err9];\n                    } else {\n                      vErrors.push(err9);\n                    }\n\n                    errors++;\n                  } else {\n                    if (!pattern4.test(key0)) {\n                      var err10 = {\n                        instancePath: instancePath,\n                        schemaPath: \"#/definitions/ExtensionIdentifier/pattern\",\n                        keyword: \"pattern\",\n                        params: {\n                          pattern: \"^[\\\\w]+$\"\n                        },\n                        message: \"must match pattern \\\"\" + \"^[\\\\w]+$\" + \"\\\"\",\n                        propertyName: key0\n                      };\n\n                      if (vErrors === null) {\n                        vErrors = [err10];\n                      } else {\n                        vErrors.push(err10);\n                      }\n\n                      errors++;\n                    }\n                  }\n                }\n              } else {\n                var err11 = {\n                  instancePath: instancePath,\n                  schemaPath: \"#/definitions/ExtensionIdentifier/type\",\n                  keyword: \"type\",\n                  params: {\n                    type: \"string\"\n                  },\n                  message: \"must be string\",\n                  propertyName: key0\n                };\n\n                if (vErrors === null) {\n                  vErrors = [err11];\n                } else {\n                  vErrors.push(err11);\n                }\n\n                errors++;\n              }\n            }\n\n            var valid3 = _errs14 === errors;\n\n            if (!valid3) {\n              var err12 = {\n                instancePath: instancePath,\n                schemaPath: \"#/anyOf/1/propertyNames\",\n                keyword: \"propertyNames\",\n                params: {\n                  propertyName: key0\n                },\n                message: \"property name must be valid\"\n              };\n\n              if (vErrors === null) {\n                vErrors = [err12];\n              } else {\n                vErrors.push(err12);\n              }\n\n              errors++;\n              break;\n            }\n          }\n\n          if (valid3) {\n            for (var key1 in data) {\n              var _errs18 = errors;\n\n              if (!validate15(data[key1], {\n                instancePath: instancePath + \"/\" + key1.replace(/~/g, \"~0\").replace(/\\//g, \"~1\"),\n                parentData: data,\n                parentDataProperty: key1,\n                rootData: rootData\n              })) {\n                vErrors = vErrors === null ? validate15.errors : vErrors.concat(validate15.errors);\n                errors = vErrors.length;\n              }\n\n              var valid5 = _errs18 === errors;\n\n              if (!valid5) {\n                break;\n              }\n            }\n          }\n        }\n      } else {\n        var err13 = {\n          instancePath: instancePath,\n          schemaPath: \"#/anyOf/1/type\",\n          keyword: \"type\",\n          params: {\n            type: \"object\"\n          },\n          message: \"must be object\"\n        };\n\n        if (vErrors === null) {\n          vErrors = [err13];\n        } else {\n          vErrors.push(err13);\n        }\n\n        errors++;\n      }\n    }\n\n    var _valid0 = _errs12 === errors;\n\n    valid0 = valid0 || _valid0;\n  }\n\n  if (!valid0) {\n    var err14 = {\n      instancePath: instancePath,\n      schemaPath: \"#/anyOf\",\n      keyword: \"anyOf\",\n      params: {},\n      message: \"must match a schema in anyOf\"\n    };\n\n    if (vErrors === null) {\n      vErrors = [err14];\n    } else {\n      vErrors.push(err14);\n    }\n\n    errors++;\n    validate14.errors = vErrors;\n    return false;\n  } else {\n    errors = _errs0;\n\n    if (vErrors !== null) {\n      if (_errs0) {\n        vErrors.length = _errs0;\n      } else {\n        vErrors = null;\n      }\n    }\n  }\n\n  validate14.errors = vErrors;\n  return errors === 0;\n}\n\nfunction validate13(data) {\n  var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref3$instancePath = _ref3.instancePath,\n      instancePath = _ref3$instancePath === void 0 ? \"\" : _ref3$instancePath;\n      _ref3.parentData;\n      _ref3.parentDataProperty;\n      var _ref3$rootData = _ref3.rootData,\n      rootData = _ref3$rootData === void 0 ? data : _ref3$rootData;\n\n  var vErrors = null;\n  var errors = 0;\n  var _errs0 = errors;\n  var valid0 = false;\n  var _errs1 = errors;\n  var _errs3 = errors;\n  var valid2 = false;\n  var _errs4 = errors;\n\n  if (errors === _errs4) {\n    if (typeof data === \"string\") {\n      if (func2(data) > 42) {\n        var err0 = {\n          instancePath: instancePath,\n          schemaPath: \"#/definitions/ExtensionPrimitiveValue/anyOf/0/maxLength\",\n          keyword: \"maxLength\",\n          params: {\n            limit: 42\n          },\n          message: \"must NOT have more than 42 characters\"\n        };\n\n        if (vErrors === null) {\n          vErrors = [err0];\n        } else {\n          vErrors.push(err0);\n        }\n\n        errors++;\n      } else {\n        if (func2(data) < 1) {\n          var err1 = {\n            instancePath: instancePath,\n            schemaPath: \"#/definitions/ExtensionPrimitiveValue/anyOf/0/minLength\",\n            keyword: \"minLength\",\n            params: {\n              limit: 1\n            },\n            message: \"must NOT have fewer than 1 characters\"\n          };\n\n          if (vErrors === null) {\n            vErrors = [err1];\n          } else {\n            vErrors.push(err1);\n          }\n\n          errors++;\n        }\n      }\n    } else {\n      var err2 = {\n        instancePath: instancePath,\n        schemaPath: \"#/definitions/ExtensionPrimitiveValue/anyOf/0/type\",\n        keyword: \"type\",\n        params: {\n          type: \"string\"\n        },\n        message: \"must be string\"\n      };\n\n      if (vErrors === null) {\n        vErrors = [err2];\n      } else {\n        vErrors.push(err2);\n      }\n\n      errors++;\n    }\n  }\n\n  var _valid1 = _errs4 === errors;\n\n  valid2 = valid2 || _valid1;\n\n  if (!valid2) {\n    var _errs6 = errors;\n\n    if (typeof data !== \"boolean\") {\n      var err3 = {\n        instancePath: instancePath,\n        schemaPath: \"#/definitions/ExtensionPrimitiveValue/anyOf/1/type\",\n        keyword: \"type\",\n        params: {\n          type: \"boolean\"\n        },\n        message: \"must be boolean\"\n      };\n\n      if (vErrors === null) {\n        vErrors = [err3];\n      } else {\n        vErrors.push(err3);\n      }\n\n      errors++;\n    }\n\n    var _valid1 = _errs6 === errors;\n\n    valid2 = valid2 || _valid1;\n\n    if (!valid2) {\n      var _errs8 = errors;\n\n      if (!(typeof data == \"number\" && isFinite(data))) {\n        var err4 = {\n          instancePath: instancePath,\n          schemaPath: \"#/definitions/ExtensionPrimitiveValue/anyOf/2/type\",\n          keyword: \"type\",\n          params: {\n            type: \"number\"\n          },\n          message: \"must be number\"\n        };\n\n        if (vErrors === null) {\n          vErrors = [err4];\n        } else {\n          vErrors.push(err4);\n        }\n\n        errors++;\n      }\n\n      var _valid1 = _errs8 === errors;\n\n      valid2 = valid2 || _valid1;\n\n      if (!valid2) {\n        var _errs10 = errors;\n\n        if (data !== null) {\n          var err5 = {\n            instancePath: instancePath,\n            schemaPath: \"#/definitions/ExtensionPrimitiveValue/anyOf/3/type\",\n            keyword: \"type\",\n            params: {\n              type: \"null\"\n            },\n            message: \"must be null\"\n          };\n\n          if (vErrors === null) {\n            vErrors = [err5];\n          } else {\n            vErrors.push(err5);\n          }\n\n          errors++;\n        }\n\n        var _valid1 = _errs10 === errors;\n\n        valid2 = valid2 || _valid1;\n      }\n    }\n  }\n\n  if (!valid2) {\n    var err6 = {\n      instancePath: instancePath,\n      schemaPath: \"#/definitions/ExtensionPrimitiveValue/anyOf\",\n      keyword: \"anyOf\",\n      params: {},\n      message: \"must match a schema in anyOf\"\n    };\n\n    if (vErrors === null) {\n      vErrors = [err6];\n    } else {\n      vErrors.push(err6);\n    }\n\n    errors++;\n  } else {\n    errors = _errs3;\n\n    if (vErrors !== null) {\n      if (_errs3) {\n        vErrors.length = _errs3;\n      } else {\n        vErrors = null;\n      }\n    }\n  }\n\n  var _valid0 = _errs1 === errors;\n\n  valid0 = valid0 || _valid0;\n\n  if (!valid0) {\n    var _errs12 = errors;\n\n    if (errors === _errs12) {\n      if (data && _typeof(data) == \"object\" && !Array.isArray(data)) {\n        if (Object.keys(data).length > 10) {\n          var err7 = {\n            instancePath: instancePath,\n            schemaPath: \"#/anyOf/1/maxProperties\",\n            keyword: \"maxProperties\",\n            params: {\n              limit: 10\n            },\n            message: \"must NOT have more than 10 properties\"\n          };\n\n          if (vErrors === null) {\n            vErrors = [err7];\n          } else {\n            vErrors.push(err7);\n          }\n\n          errors++;\n        } else {\n          for (var key0 in data) {\n            var _errs14 = errors;\n            var _errs15 = errors;\n\n            if (errors === _errs15) {\n              if (typeof key0 === \"string\") {\n                if (func2(key0) > 40) {\n                  var err8 = {\n                    instancePath: instancePath,\n                    schemaPath: \"#/definitions/ExtensionIdentifier/maxLength\",\n                    keyword: \"maxLength\",\n                    params: {\n                      limit: 40\n                    },\n                    message: \"must NOT have more than 40 characters\",\n                    propertyName: key0\n                  };\n\n                  if (vErrors === null) {\n                    vErrors = [err8];\n                  } else {\n                    vErrors.push(err8);\n                  }\n\n                  errors++;\n                } else {\n                  if (func2(key0) < 1) {\n                    var err9 = {\n                      instancePath: instancePath,\n                      schemaPath: \"#/definitions/ExtensionIdentifier/minLength\",\n                      keyword: \"minLength\",\n                      params: {\n                        limit: 1\n                      },\n                      message: \"must NOT have fewer than 1 characters\",\n                      propertyName: key0\n                    };\n\n                    if (vErrors === null) {\n                      vErrors = [err9];\n                    } else {\n                      vErrors.push(err9);\n                    }\n\n                    errors++;\n                  } else {\n                    if (!pattern4.test(key0)) {\n                      var err10 = {\n                        instancePath: instancePath,\n                        schemaPath: \"#/definitions/ExtensionIdentifier/pattern\",\n                        keyword: \"pattern\",\n                        params: {\n                          pattern: \"^[\\\\w]+$\"\n                        },\n                        message: \"must match pattern \\\"\" + \"^[\\\\w]+$\" + \"\\\"\",\n                        propertyName: key0\n                      };\n\n                      if (vErrors === null) {\n                        vErrors = [err10];\n                      } else {\n                        vErrors.push(err10);\n                      }\n\n                      errors++;\n                    }\n                  }\n                }\n              } else {\n                var err11 = {\n                  instancePath: instancePath,\n                  schemaPath: \"#/definitions/ExtensionIdentifier/type\",\n                  keyword: \"type\",\n                  params: {\n                    type: \"string\"\n                  },\n                  message: \"must be string\",\n                  propertyName: key0\n                };\n\n                if (vErrors === null) {\n                  vErrors = [err11];\n                } else {\n                  vErrors.push(err11);\n                }\n\n                errors++;\n              }\n            }\n\n            var valid3 = _errs14 === errors;\n\n            if (!valid3) {\n              var err12 = {\n                instancePath: instancePath,\n                schemaPath: \"#/anyOf/1/propertyNames\",\n                keyword: \"propertyNames\",\n                params: {\n                  propertyName: key0\n                },\n                message: \"property name must be valid\"\n              };\n\n              if (vErrors === null) {\n                vErrors = [err12];\n              } else {\n                vErrors.push(err12);\n              }\n\n              errors++;\n              break;\n            }\n          }\n\n          if (valid3) {\n            for (var key1 in data) {\n              var _errs18 = errors;\n\n              if (!validate14(data[key1], {\n                instancePath: instancePath + \"/\" + key1.replace(/~/g, \"~0\").replace(/\\//g, \"~1\"),\n                parentData: data,\n                parentDataProperty: key1,\n                rootData: rootData\n              })) {\n                vErrors = vErrors === null ? validate14.errors : vErrors.concat(validate14.errors);\n                errors = vErrors.length;\n              }\n\n              var valid5 = _errs18 === errors;\n\n              if (!valid5) {\n                break;\n              }\n            }\n          }\n        }\n      } else {\n        var err13 = {\n          instancePath: instancePath,\n          schemaPath: \"#/anyOf/1/type\",\n          keyword: \"type\",\n          params: {\n            type: \"object\"\n          },\n          message: \"must be object\"\n        };\n\n        if (vErrors === null) {\n          vErrors = [err13];\n        } else {\n          vErrors.push(err13);\n        }\n\n        errors++;\n      }\n    }\n\n    var _valid0 = _errs12 === errors;\n\n    valid0 = valid0 || _valid0;\n  }\n\n  if (!valid0) {\n    var err14 = {\n      instancePath: instancePath,\n      schemaPath: \"#/anyOf\",\n      keyword: \"anyOf\",\n      params: {},\n      message: \"must match a schema in anyOf\"\n    };\n\n    if (vErrors === null) {\n      vErrors = [err14];\n    } else {\n      vErrors.push(err14);\n    }\n\n    errors++;\n    validate13.errors = vErrors;\n    return false;\n  } else {\n    errors = _errs0;\n\n    if (vErrors !== null) {\n      if (_errs0) {\n        vErrors.length = _errs0;\n      } else {\n        vErrors = null;\n      }\n    }\n  }\n\n  validate13.errors = vErrors;\n  return errors === 0;\n}\n\nfunction validate12(data) {\n  var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref4$instancePath = _ref4.instancePath,\n      instancePath = _ref4$instancePath === void 0 ? \"\" : _ref4$instancePath;\n      _ref4.parentData;\n      _ref4.parentDataProperty;\n      var _ref4$rootData = _ref4.rootData,\n      rootData = _ref4$rootData === void 0 ? data : _ref4$rootData;\n\n  var vErrors = null;\n  var errors = 0;\n\n  if (errors === 0) {\n    if (data && _typeof(data) == \"object\" && !Array.isArray(data)) {\n      if (Object.keys(data).length > 10) {\n        validate12.errors = [{\n          instancePath: instancePath,\n          schemaPath: \"#/maxProperties\",\n          keyword: \"maxProperties\",\n          params: {\n            limit: 10\n          },\n          message: \"must NOT have more than 10 properties\"\n        }];\n        return false;\n      } else {\n        for (var key0 in data) {\n          var _errs1 = errors;\n          var _errs2 = errors;\n\n          if (errors === _errs2) {\n            if (typeof key0 === \"string\") {\n              if (func2(key0) > 40) {\n                var err0 = {\n                  instancePath: instancePath,\n                  schemaPath: \"#/definitions/ExtensionIdentifier/maxLength\",\n                  keyword: \"maxLength\",\n                  params: {\n                    limit: 40\n                  },\n                  message: \"must NOT have more than 40 characters\",\n                  propertyName: key0\n                };\n\n                if (vErrors === null) {\n                  vErrors = [err0];\n                } else {\n                  vErrors.push(err0);\n                }\n\n                errors++;\n              } else {\n                if (func2(key0) < 1) {\n                  var err1 = {\n                    instancePath: instancePath,\n                    schemaPath: \"#/definitions/ExtensionIdentifier/minLength\",\n                    keyword: \"minLength\",\n                    params: {\n                      limit: 1\n                    },\n                    message: \"must NOT have fewer than 1 characters\",\n                    propertyName: key0\n                  };\n\n                  if (vErrors === null) {\n                    vErrors = [err1];\n                  } else {\n                    vErrors.push(err1);\n                  }\n\n                  errors++;\n                } else {\n                  if (!pattern4.test(key0)) {\n                    var err2 = {\n                      instancePath: instancePath,\n                      schemaPath: \"#/definitions/ExtensionIdentifier/pattern\",\n                      keyword: \"pattern\",\n                      params: {\n                        pattern: \"^[\\\\w]+$\"\n                      },\n                      message: \"must match pattern \\\"\" + \"^[\\\\w]+$\" + \"\\\"\",\n                      propertyName: key0\n                    };\n\n                    if (vErrors === null) {\n                      vErrors = [err2];\n                    } else {\n                      vErrors.push(err2);\n                    }\n\n                    errors++;\n                  }\n                }\n              }\n            } else {\n              var err3 = {\n                instancePath: instancePath,\n                schemaPath: \"#/definitions/ExtensionIdentifier/type\",\n                keyword: \"type\",\n                params: {\n                  type: \"string\"\n                },\n                message: \"must be string\",\n                propertyName: key0\n              };\n\n              if (vErrors === null) {\n                vErrors = [err3];\n              } else {\n                vErrors.push(err3);\n              }\n\n              errors++;\n            }\n          }\n\n          var valid0 = _errs1 === errors;\n\n          if (!valid0) {\n            var err4 = {\n              instancePath: instancePath,\n              schemaPath: \"#/propertyNames\",\n              keyword: \"propertyNames\",\n              params: {\n                propertyName: key0\n              },\n              message: \"property name must be valid\"\n            };\n\n            if (vErrors === null) {\n              vErrors = [err4];\n            } else {\n              vErrors.push(err4);\n            }\n\n            errors++;\n            validate12.errors = vErrors;\n            return false;\n          }\n        }\n\n        if (valid0) {\n          for (var key1 in data) {\n            var _errs5 = errors;\n\n            if (!validate13(data[key1], {\n              instancePath: instancePath + \"/\" + key1.replace(/~/g, \"~0\").replace(/\\//g, \"~1\"),\n              parentData: data,\n              parentDataProperty: key1,\n              rootData: rootData\n            })) {\n              vErrors = vErrors === null ? validate13.errors : vErrors.concat(validate13.errors);\n              errors = vErrors.length;\n            }\n\n            var valid2 = _errs5 === errors;\n\n            if (!valid2) {\n              break;\n            }\n          }\n        }\n      }\n    } else {\n      validate12.errors = [{\n        instancePath: instancePath,\n        schemaPath: \"#/type\",\n        keyword: \"type\",\n        params: {\n          type: \"object\"\n        },\n        message: \"must be object\"\n      }];\n      return false;\n    }\n  }\n\n  validate12.errors = vErrors;\n  return errors === 0;\n}\n\nfunction validate11(data) {\n  var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref5$instancePath = _ref5.instancePath,\n      instancePath = _ref5$instancePath === void 0 ? \"\" : _ref5$instancePath;\n      _ref5.parentData;\n      _ref5.parentDataProperty;\n      var _ref5$rootData = _ref5.rootData,\n      rootData = _ref5$rootData === void 0 ? data : _ref5$rootData;\n\n  var vErrors = null;\n  var errors = 0;\n\n  if (errors === 0) {\n    if (data && _typeof(data) == \"object\" && !Array.isArray(data)) {\n      var missing0;\n\n      if (data.chainId === undefined && (missing0 = \"chainId\") || data.address === undefined && (missing0 = \"address\") || data.decimals === undefined && (missing0 = \"decimals\") || data.name === undefined && (missing0 = \"name\") || data.symbol === undefined && (missing0 = \"symbol\")) {\n        validate11.errors = [{\n          instancePath: instancePath,\n          schemaPath: \"#/required\",\n          keyword: \"required\",\n          params: {\n            missingProperty: missing0\n          },\n          message: \"must have required property '\" + missing0 + \"'\"\n        }];\n        return false;\n      } else {\n        var _errs1 = errors;\n\n        for (var key0 in data) {\n          if (!(key0 === \"chainId\" || key0 === \"address\" || key0 === \"decimals\" || key0 === \"name\" || key0 === \"symbol\" || key0 === \"logoURI\" || key0 === \"tags\" || key0 === \"extensions\")) {\n            validate11.errors = [{\n              instancePath: instancePath,\n              schemaPath: \"#/additionalProperties\",\n              keyword: \"additionalProperties\",\n              params: {\n                additionalProperty: key0\n              },\n              message: \"must NOT have additional properties\"\n            }];\n            return false;\n          }\n        }\n\n        if (_errs1 === errors) {\n          if (data.chainId !== undefined) {\n            var data0 = data.chainId;\n            var _errs2 = errors;\n\n            if (!(typeof data0 == \"number\" && !(data0 % 1) && !isNaN(data0) && isFinite(data0))) {\n              validate11.errors = [{\n                instancePath: instancePath + \"/chainId\",\n                schemaPath: \"#/properties/chainId/type\",\n                keyword: \"type\",\n                params: {\n                  type: \"integer\"\n                },\n                message: \"must be integer\"\n              }];\n              return false;\n            }\n\n            if (errors === _errs2) {\n              if (typeof data0 == \"number\" && isFinite(data0)) {\n                if (data0 < 1 || isNaN(data0)) {\n                  validate11.errors = [{\n                    instancePath: instancePath + \"/chainId\",\n                    schemaPath: \"#/properties/chainId/minimum\",\n                    keyword: \"minimum\",\n                    params: {\n                      comparison: \">=\",\n                      limit: 1\n                    },\n                    message: \"must be >= 1\"\n                  }];\n                  return false;\n                }\n              }\n            }\n\n            var valid0 = _errs2 === errors;\n          } else {\n            var valid0 = true;\n          }\n\n          if (valid0) {\n            if (data.address !== undefined) {\n              var data1 = data.address;\n              var _errs4 = errors;\n\n              if (errors === _errs4) {\n                if (typeof data1 === \"string\") {\n                  if (!pattern1.test(data1)) {\n                    validate11.errors = [{\n                      instancePath: instancePath + \"/address\",\n                      schemaPath: \"#/properties/address/pattern\",\n                      keyword: \"pattern\",\n                      params: {\n                        pattern: \"^0x[a-fA-F0-9]{40}$\"\n                      },\n                      message: \"must match pattern \\\"\" + \"^0x[a-fA-F0-9]{40}$\" + \"\\\"\"\n                    }];\n                    return false;\n                  }\n                } else {\n                  validate11.errors = [{\n                    instancePath: instancePath + \"/address\",\n                    schemaPath: \"#/properties/address/type\",\n                    keyword: \"type\",\n                    params: {\n                      type: \"string\"\n                    },\n                    message: \"must be string\"\n                  }];\n                  return false;\n                }\n              }\n\n              var valid0 = _errs4 === errors;\n            } else {\n              var valid0 = true;\n            }\n\n            if (valid0) {\n              if (data.decimals !== undefined) {\n                var data2 = data.decimals;\n                var _errs6 = errors;\n\n                if (!(typeof data2 == \"number\" && !(data2 % 1) && !isNaN(data2) && isFinite(data2))) {\n                  validate11.errors = [{\n                    instancePath: instancePath + \"/decimals\",\n                    schemaPath: \"#/properties/decimals/type\",\n                    keyword: \"type\",\n                    params: {\n                      type: \"integer\"\n                    },\n                    message: \"must be integer\"\n                  }];\n                  return false;\n                }\n\n                if (errors === _errs6) {\n                  if (typeof data2 == \"number\" && isFinite(data2)) {\n                    if (data2 > 255 || isNaN(data2)) {\n                      validate11.errors = [{\n                        instancePath: instancePath + \"/decimals\",\n                        schemaPath: \"#/properties/decimals/maximum\",\n                        keyword: \"maximum\",\n                        params: {\n                          comparison: \"<=\",\n                          limit: 255\n                        },\n                        message: \"must be <= 255\"\n                      }];\n                      return false;\n                    } else {\n                      if (data2 < 0 || isNaN(data2)) {\n                        validate11.errors = [{\n                          instancePath: instancePath + \"/decimals\",\n                          schemaPath: \"#/properties/decimals/minimum\",\n                          keyword: \"minimum\",\n                          params: {\n                            comparison: \">=\",\n                            limit: 0\n                          },\n                          message: \"must be >= 0\"\n                        }];\n                        return false;\n                      }\n                    }\n                  }\n                }\n\n                var valid0 = _errs6 === errors;\n              } else {\n                var valid0 = true;\n              }\n\n              if (valid0) {\n                if (data.name !== undefined) {\n                  var data3 = data.name;\n                  var _errs8 = errors;\n\n                  if (errors === _errs8) {\n                    if (typeof data3 === \"string\") {\n                      if (func2(data3) > 40) {\n                        validate11.errors = [{\n                          instancePath: instancePath + \"/name\",\n                          schemaPath: \"#/properties/name/maxLength\",\n                          keyword: \"maxLength\",\n                          params: {\n                            limit: 40\n                          },\n                          message: \"must NOT have more than 40 characters\"\n                        }];\n                        return false;\n                      } else {\n                        if (func2(data3) < 1) {\n                          validate11.errors = [{\n                            instancePath: instancePath + \"/name\",\n                            schemaPath: \"#/properties/name/minLength\",\n                            keyword: \"minLength\",\n                            params: {\n                              limit: 1\n                            },\n                            message: \"must NOT have fewer than 1 characters\"\n                          }];\n                          return false;\n                        } else {\n                          if (!pattern2.test(data3)) {\n                            validate11.errors = [{\n                              instancePath: instancePath + \"/name\",\n                              schemaPath: \"#/properties/name/pattern\",\n                              keyword: \"pattern\",\n                              params: {\n                                pattern: \"^[ \\\\w.'+\\\\-%/À-ÖØ-öø-ÿ:&\\\\[\\\\]\\\\(\\\\)]+$\"\n                              },\n                              message: \"must match pattern \\\"\" + \"^[ \\\\w.'+\\\\-%/À-ÖØ-öø-ÿ:&\\\\[\\\\]\\\\(\\\\)]+$\" + \"\\\"\"\n                            }];\n                            return false;\n                          }\n                        }\n                      }\n                    } else {\n                      validate11.errors = [{\n                        instancePath: instancePath + \"/name\",\n                        schemaPath: \"#/properties/name/type\",\n                        keyword: \"type\",\n                        params: {\n                          type: \"string\"\n                        },\n                        message: \"must be string\"\n                      }];\n                      return false;\n                    }\n                  }\n\n                  var valid0 = _errs8 === errors;\n                } else {\n                  var valid0 = true;\n                }\n\n                if (valid0) {\n                  if (data.symbol !== undefined) {\n                    var data4 = data.symbol;\n                    var _errs10 = errors;\n\n                    if (errors === _errs10) {\n                      if (typeof data4 === \"string\") {\n                        if (func2(data4) > 20) {\n                          validate11.errors = [{\n                            instancePath: instancePath + \"/symbol\",\n                            schemaPath: \"#/properties/symbol/maxLength\",\n                            keyword: \"maxLength\",\n                            params: {\n                              limit: 20\n                            },\n                            message: \"must NOT have more than 20 characters\"\n                          }];\n                          return false;\n                        } else {\n                          if (func2(data4) < 1) {\n                            validate11.errors = [{\n                              instancePath: instancePath + \"/symbol\",\n                              schemaPath: \"#/properties/symbol/minLength\",\n                              keyword: \"minLength\",\n                              params: {\n                                limit: 1\n                              },\n                              message: \"must NOT have fewer than 1 characters\"\n                            }];\n                            return false;\n                          } else {\n                            if (!pattern3.test(data4)) {\n                              validate11.errors = [{\n                                instancePath: instancePath + \"/symbol\",\n                                schemaPath: \"#/properties/symbol/pattern\",\n                                keyword: \"pattern\",\n                                params: {\n                                  pattern: \"^[a-zA-Z0-9+\\\\-%/$.]+$\"\n                                },\n                                message: \"must match pattern \\\"\" + \"^[a-zA-Z0-9+\\\\-%/$.]+$\" + \"\\\"\"\n                              }];\n                              return false;\n                            }\n                          }\n                        }\n                      } else {\n                        validate11.errors = [{\n                          instancePath: instancePath + \"/symbol\",\n                          schemaPath: \"#/properties/symbol/type\",\n                          keyword: \"type\",\n                          params: {\n                            type: \"string\"\n                          },\n                          message: \"must be string\"\n                        }];\n                        return false;\n                      }\n                    }\n\n                    var valid0 = _errs10 === errors;\n                  } else {\n                    var valid0 = true;\n                  }\n\n                  if (valid0) {\n                    if (data.logoURI !== undefined) {\n                      var data5 = data.logoURI;\n                      var _errs12 = errors;\n\n                      if (errors === _errs12) {\n                        if (errors === _errs12) {\n                          if (typeof data5 === \"string\") {\n                            if (!formats2(data5)) {\n                              validate11.errors = [{\n                                instancePath: instancePath + \"/logoURI\",\n                                schemaPath: \"#/properties/logoURI/format\",\n                                keyword: \"format\",\n                                params: {\n                                  format: \"uri\"\n                                },\n                                message: \"must match format \\\"\" + \"uri\" + \"\\\"\"\n                              }];\n                              return false;\n                            }\n                          } else {\n                            validate11.errors = [{\n                              instancePath: instancePath + \"/logoURI\",\n                              schemaPath: \"#/properties/logoURI/type\",\n                              keyword: \"type\",\n                              params: {\n                                type: \"string\"\n                              },\n                              message: \"must be string\"\n                            }];\n                            return false;\n                          }\n                        }\n                      }\n\n                      var valid0 = _errs12 === errors;\n                    } else {\n                      var valid0 = true;\n                    }\n\n                    if (valid0) {\n                      if (data.tags !== undefined) {\n                        var data6 = data.tags;\n                        var _errs14 = errors;\n\n                        if (errors === _errs14) {\n                          if (Array.isArray(data6)) {\n                            if (data6.length > 10) {\n                              validate11.errors = [{\n                                instancePath: instancePath + \"/tags\",\n                                schemaPath: \"#/properties/tags/maxItems\",\n                                keyword: \"maxItems\",\n                                params: {\n                                  limit: 10\n                                },\n                                message: \"must NOT have more than 10 items\"\n                              }];\n                              return false;\n                            } else {\n                              var valid1 = true;\n                              var len0 = data6.length;\n\n                              for (var i0 = 0; i0 < len0; i0++) {\n                                var data7 = data6[i0];\n                                var _errs16 = errors;\n                                var _errs17 = errors;\n\n                                if (errors === _errs17) {\n                                  if (typeof data7 === \"string\") {\n                                    if (func2(data7) > 10) {\n                                      validate11.errors = [{\n                                        instancePath: instancePath + \"/tags/\" + i0,\n                                        schemaPath: \"#/definitions/TagIdentifier/maxLength\",\n                                        keyword: \"maxLength\",\n                                        params: {\n                                          limit: 10\n                                        },\n                                        message: \"must NOT have more than 10 characters\"\n                                      }];\n                                      return false;\n                                    } else {\n                                      if (func2(data7) < 1) {\n                                        validate11.errors = [{\n                                          instancePath: instancePath + \"/tags/\" + i0,\n                                          schemaPath: \"#/definitions/TagIdentifier/minLength\",\n                                          keyword: \"minLength\",\n                                          params: {\n                                            limit: 1\n                                          },\n                                          message: \"must NOT have fewer than 1 characters\"\n                                        }];\n                                        return false;\n                                      } else {\n                                        if (!pattern4.test(data7)) {\n                                          validate11.errors = [{\n                                            instancePath: instancePath + \"/tags/\" + i0,\n                                            schemaPath: \"#/definitions/TagIdentifier/pattern\",\n                                            keyword: \"pattern\",\n                                            params: {\n                                              pattern: \"^[\\\\w]+$\"\n                                            },\n                                            message: \"must match pattern \\\"\" + \"^[\\\\w]+$\" + \"\\\"\"\n                                          }];\n                                          return false;\n                                        }\n                                      }\n                                    }\n                                  } else {\n                                    validate11.errors = [{\n                                      instancePath: instancePath + \"/tags/\" + i0,\n                                      schemaPath: \"#/definitions/TagIdentifier/type\",\n                                      keyword: \"type\",\n                                      params: {\n                                        type: \"string\"\n                                      },\n                                      message: \"must be string\"\n                                    }];\n                                    return false;\n                                  }\n                                }\n\n                                var valid1 = _errs16 === errors;\n\n                                if (!valid1) {\n                                  break;\n                                }\n                              }\n                            }\n                          } else {\n                            validate11.errors = [{\n                              instancePath: instancePath + \"/tags\",\n                              schemaPath: \"#/properties/tags/type\",\n                              keyword: \"type\",\n                              params: {\n                                type: \"array\"\n                              },\n                              message: \"must be array\"\n                            }];\n                            return false;\n                          }\n                        }\n\n                        var valid0 = _errs14 === errors;\n                      } else {\n                        var valid0 = true;\n                      }\n\n                      if (valid0) {\n                        if (data.extensions !== undefined) {\n                          var _errs19 = errors;\n\n                          if (!validate12(data.extensions, {\n                            instancePath: instancePath + \"/extensions\",\n                            parentData: data,\n                            parentDataProperty: \"extensions\",\n                            rootData: rootData\n                          })) {\n                            vErrors = vErrors === null ? validate12.errors : vErrors.concat(validate12.errors);\n                            errors = vErrors.length;\n                          }\n\n                          var valid0 = _errs19 === errors;\n                        } else {\n                          var valid0 = true;\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    } else {\n      validate11.errors = [{\n        instancePath: instancePath,\n        schemaPath: \"#/type\",\n        keyword: \"type\",\n        params: {\n          type: \"object\"\n        },\n        message: \"must be object\"\n      }];\n      return false;\n    }\n  }\n\n  validate11.errors = vErrors;\n  return errors === 0;\n}\n\nfunction validate10(data) {\n  var _ref6 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref6$instancePath = _ref6.instancePath,\n      instancePath = _ref6$instancePath === void 0 ? \"\" : _ref6$instancePath;\n      _ref6.parentData;\n      _ref6.parentDataProperty;\n      var _ref6$rootData = _ref6.rootData,\n      rootData = _ref6$rootData === void 0 ? data : _ref6$rootData;\n  var vErrors = null;\n  var errors = 0;\n\n  if (errors === 0) {\n    if (data && _typeof(data) == \"object\" && !Array.isArray(data)) {\n      var missing0;\n\n      if (data.tokens === undefined && (missing0 = \"tokens\")) {\n        validate10.errors = [{\n          instancePath: instancePath,\n          schemaPath: \"#/required\",\n          keyword: \"required\",\n          params: {\n            missingProperty: missing0\n          },\n          message: \"must have required property '\" + missing0 + \"'\"\n        }];\n        return false;\n      } else {\n        var _errs1 = errors;\n\n        for (var key0 in data) {\n          if (!(key0 === \"name\" || key0 === \"timestamp\" || key0 === \"version\" || key0 === \"tokens\" || key0 === \"keywords\" || key0 === \"tags\" || key0 === \"logoURI\")) {\n            validate10.errors = [{\n              instancePath: instancePath,\n              schemaPath: \"#/additionalProperties\",\n              keyword: \"additionalProperties\",\n              params: {\n                additionalProperty: key0\n              },\n              message: \"must NOT have additional properties\"\n            }];\n            return false;\n          }\n        }\n\n        if (_errs1 === errors) {\n          if (data.name !== undefined) {\n            var data0 = data.name;\n            var _errs2 = errors;\n\n            if (errors === _errs2) {\n              if (typeof data0 === \"string\") {\n                if (func2(data0) > 30) {\n                  validate10.errors = [{\n                    instancePath: instancePath + \"/name\",\n                    schemaPath: \"#/properties/name/maxLength\",\n                    keyword: \"maxLength\",\n                    params: {\n                      limit: 30\n                    },\n                    message: \"must NOT have more than 30 characters\"\n                  }];\n                  return false;\n                } else {\n                  if (func2(data0) < 1) {\n                    validate10.errors = [{\n                      instancePath: instancePath + \"/name\",\n                      schemaPath: \"#/properties/name/minLength\",\n                      keyword: \"minLength\",\n                      params: {\n                        limit: 1\n                      },\n                      message: \"must NOT have fewer than 1 characters\"\n                    }];\n                    return false;\n                  } else {\n                    if (!pattern0.test(data0)) {\n                      validate10.errors = [{\n                        instancePath: instancePath + \"/name\",\n                        schemaPath: \"#/properties/name/pattern\",\n                        keyword: \"pattern\",\n                        params: {\n                          pattern: \"^[\\\\w ]+$\"\n                        },\n                        message: \"must match pattern \\\"\" + \"^[\\\\w ]+$\" + \"\\\"\"\n                      }];\n                      return false;\n                    }\n                  }\n                }\n              } else {\n                validate10.errors = [{\n                  instancePath: instancePath + \"/name\",\n                  schemaPath: \"#/properties/name/type\",\n                  keyword: \"type\",\n                  params: {\n                    type: \"string\"\n                  },\n                  message: \"must be string\"\n                }];\n                return false;\n              }\n            }\n\n            var valid0 = _errs2 === errors;\n          } else {\n            var valid0 = true;\n          }\n\n          if (valid0) {\n            if (data.timestamp !== undefined) {\n              var data1 = data.timestamp;\n              var _errs4 = errors;\n\n              if (errors === _errs4) {\n                if (errors === _errs4) {\n                  if (typeof data1 === \"string\") {\n                    if (!formats0.validate(data1)) {\n                      validate10.errors = [{\n                        instancePath: instancePath + \"/timestamp\",\n                        schemaPath: \"#/properties/timestamp/format\",\n                        keyword: \"format\",\n                        params: {\n                          format: \"date-time\"\n                        },\n                        message: \"must match format \\\"\" + \"date-time\" + \"\\\"\"\n                      }];\n                      return false;\n                    }\n                  } else {\n                    validate10.errors = [{\n                      instancePath: instancePath + \"/timestamp\",\n                      schemaPath: \"#/properties/timestamp/type\",\n                      keyword: \"type\",\n                      params: {\n                        type: \"string\"\n                      },\n                      message: \"must be string\"\n                    }];\n                    return false;\n                  }\n                }\n              }\n\n              var valid0 = _errs4 === errors;\n            } else {\n              var valid0 = true;\n            }\n\n            if (valid0) {\n              if (data.version !== undefined) {\n                var data2 = data.version;\n                var _errs6 = errors;\n                var _errs7 = errors;\n\n                if (errors === _errs7) {\n                  if (data2 && _typeof(data2) == \"object\" && !Array.isArray(data2)) {\n                    var missing1;\n\n                    if (data2.major === undefined && (missing1 = \"major\") || data2.minor === undefined && (missing1 = \"minor\") || data2.patch === undefined && (missing1 = \"patch\")) {\n                      validate10.errors = [{\n                        instancePath: instancePath + \"/version\",\n                        schemaPath: \"#/definitions/Version/required\",\n                        keyword: \"required\",\n                        params: {\n                          missingProperty: missing1\n                        },\n                        message: \"must have required property '\" + missing1 + \"'\"\n                      }];\n                      return false;\n                    } else {\n                      var _errs9 = errors;\n\n                      for (var key1 in data2) {\n                        if (!(key1 === \"major\" || key1 === \"minor\" || key1 === \"patch\")) {\n                          validate10.errors = [{\n                            instancePath: instancePath + \"/version\",\n                            schemaPath: \"#/definitions/Version/additionalProperties\",\n                            keyword: \"additionalProperties\",\n                            params: {\n                              additionalProperty: key1\n                            },\n                            message: \"must NOT have additional properties\"\n                          }];\n                          return false;\n                        }\n                      }\n\n                      if (_errs9 === errors) {\n                        if (data2.major !== undefined) {\n                          var data3 = data2.major;\n                          var _errs10 = errors;\n\n                          if (!(typeof data3 == \"number\" && !(data3 % 1) && !isNaN(data3) && isFinite(data3))) {\n                            validate10.errors = [{\n                              instancePath: instancePath + \"/version/major\",\n                              schemaPath: \"#/definitions/Version/properties/major/type\",\n                              keyword: \"type\",\n                              params: {\n                                type: \"integer\"\n                              },\n                              message: \"must be integer\"\n                            }];\n                            return false;\n                          }\n\n                          if (errors === _errs10) {\n                            if (typeof data3 == \"number\" && isFinite(data3)) {\n                              if (data3 < 0 || isNaN(data3)) {\n                                validate10.errors = [{\n                                  instancePath: instancePath + \"/version/major\",\n                                  schemaPath: \"#/definitions/Version/properties/major/minimum\",\n                                  keyword: \"minimum\",\n                                  params: {\n                                    comparison: \">=\",\n                                    limit: 0\n                                  },\n                                  message: \"must be >= 0\"\n                                }];\n                                return false;\n                              }\n                            }\n                          }\n\n                          var valid2 = _errs10 === errors;\n                        } else {\n                          var valid2 = true;\n                        }\n\n                        if (valid2) {\n                          if (data2.minor !== undefined) {\n                            var data4 = data2.minor;\n                            var _errs12 = errors;\n\n                            if (!(typeof data4 == \"number\" && !(data4 % 1) && !isNaN(data4) && isFinite(data4))) {\n                              validate10.errors = [{\n                                instancePath: instancePath + \"/version/minor\",\n                                schemaPath: \"#/definitions/Version/properties/minor/type\",\n                                keyword: \"type\",\n                                params: {\n                                  type: \"integer\"\n                                },\n                                message: \"must be integer\"\n                              }];\n                              return false;\n                            }\n\n                            if (errors === _errs12) {\n                              if (typeof data4 == \"number\" && isFinite(data4)) {\n                                if (data4 < 0 || isNaN(data4)) {\n                                  validate10.errors = [{\n                                    instancePath: instancePath + \"/version/minor\",\n                                    schemaPath: \"#/definitions/Version/properties/minor/minimum\",\n                                    keyword: \"minimum\",\n                                    params: {\n                                      comparison: \">=\",\n                                      limit: 0\n                                    },\n                                    message: \"must be >= 0\"\n                                  }];\n                                  return false;\n                                }\n                              }\n                            }\n\n                            var valid2 = _errs12 === errors;\n                          } else {\n                            var valid2 = true;\n                          }\n\n                          if (valid2) {\n                            if (data2.patch !== undefined) {\n                              var data5 = data2.patch;\n                              var _errs14 = errors;\n\n                              if (!(typeof data5 == \"number\" && !(data5 % 1) && !isNaN(data5) && isFinite(data5))) {\n                                validate10.errors = [{\n                                  instancePath: instancePath + \"/version/patch\",\n                                  schemaPath: \"#/definitions/Version/properties/patch/type\",\n                                  keyword: \"type\",\n                                  params: {\n                                    type: \"integer\"\n                                  },\n                                  message: \"must be integer\"\n                                }];\n                                return false;\n                              }\n\n                              if (errors === _errs14) {\n                                if (typeof data5 == \"number\" && isFinite(data5)) {\n                                  if (data5 < 0 || isNaN(data5)) {\n                                    validate10.errors = [{\n                                      instancePath: instancePath + \"/version/patch\",\n                                      schemaPath: \"#/definitions/Version/properties/patch/minimum\",\n                                      keyword: \"minimum\",\n                                      params: {\n                                        comparison: \">=\",\n                                        limit: 0\n                                      },\n                                      message: \"must be >= 0\"\n                                    }];\n                                    return false;\n                                  }\n                                }\n                              }\n\n                              var valid2 = _errs14 === errors;\n                            } else {\n                              var valid2 = true;\n                            }\n                          }\n                        }\n                      }\n                    }\n                  } else {\n                    validate10.errors = [{\n                      instancePath: instancePath + \"/version\",\n                      schemaPath: \"#/definitions/Version/type\",\n                      keyword: \"type\",\n                      params: {\n                        type: \"object\"\n                      },\n                      message: \"must be object\"\n                    }];\n                    return false;\n                  }\n                }\n\n                var valid0 = _errs6 === errors;\n              } else {\n                var valid0 = true;\n              }\n\n              if (valid0) {\n                if (data.tokens !== undefined) {\n                  var data6 = data.tokens;\n                  var _errs16 = errors;\n\n                  if (errors === _errs16) {\n                    if (Array.isArray(data6)) {\n                      if (data6.length > 10000) {\n                        validate10.errors = [{\n                          instancePath: instancePath + \"/tokens\",\n                          schemaPath: \"#/properties/tokens/maxItems\",\n                          keyword: \"maxItems\",\n                          params: {\n                            limit: 10000\n                          },\n                          message: \"must NOT have more than 10000 items\"\n                        }];\n                        return false;\n                      } else {\n                        if (data6.length < 1) {\n                          validate10.errors = [{\n                            instancePath: instancePath + \"/tokens\",\n                            schemaPath: \"#/properties/tokens/minItems\",\n                            keyword: \"minItems\",\n                            params: {\n                              limit: 1\n                            },\n                            message: \"must NOT have fewer than 1 items\"\n                          }];\n                          return false;\n                        } else {\n                          var valid3 = true;\n                          var len0 = data6.length;\n\n                          for (var i0 = 0; i0 < len0; i0++) {\n                            var _errs18 = errors;\n\n                            if (!validate11(data6[i0], {\n                              instancePath: instancePath + \"/tokens/\" + i0,\n                              parentData: data6,\n                              parentDataProperty: i0,\n                              rootData: rootData\n                            })) {\n                              vErrors = vErrors === null ? validate11.errors : vErrors.concat(validate11.errors);\n                              errors = vErrors.length;\n                            }\n\n                            var valid3 = _errs18 === errors;\n\n                            if (!valid3) {\n                              break;\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      validate10.errors = [{\n                        instancePath: instancePath + \"/tokens\",\n                        schemaPath: \"#/properties/tokens/type\",\n                        keyword: \"type\",\n                        params: {\n                          type: \"array\"\n                        },\n                        message: \"must be array\"\n                      }];\n                      return false;\n                    }\n                  }\n\n                  var valid0 = _errs16 === errors;\n                } else {\n                  var valid0 = true;\n                }\n\n                if (valid0) {\n                  if (data.keywords !== undefined) {\n                    var data8 = data.keywords;\n                    var _errs19 = errors;\n\n                    if (errors === _errs19) {\n                      if (Array.isArray(data8)) {\n                        if (data8.length > 20) {\n                          validate10.errors = [{\n                            instancePath: instancePath + \"/keywords\",\n                            schemaPath: \"#/properties/keywords/maxItems\",\n                            keyword: \"maxItems\",\n                            params: {\n                              limit: 20\n                            },\n                            message: \"must NOT have more than 20 items\"\n                          }];\n                          return false;\n                        } else {\n                          var valid4 = true;\n                          var len1 = data8.length;\n\n                          for (var i1 = 0; i1 < len1; i1++) {\n                            var data9 = data8[i1];\n                            var _errs21 = errors;\n\n                            if (errors === _errs21) {\n                              if (typeof data9 === \"string\") {\n                                if (func2(data9) > 20) {\n                                  validate10.errors = [{\n                                    instancePath: instancePath + \"/keywords/\" + i1,\n                                    schemaPath: \"#/properties/keywords/items/maxLength\",\n                                    keyword: \"maxLength\",\n                                    params: {\n                                      limit: 20\n                                    },\n                                    message: \"must NOT have more than 20 characters\"\n                                  }];\n                                  return false;\n                                } else {\n                                  if (func2(data9) < 1) {\n                                    validate10.errors = [{\n                                      instancePath: instancePath + \"/keywords/\" + i1,\n                                      schemaPath: \"#/properties/keywords/items/minLength\",\n                                      keyword: \"minLength\",\n                                      params: {\n                                        limit: 1\n                                      },\n                                      message: \"must NOT have fewer than 1 characters\"\n                                    }];\n                                    return false;\n                                  } else {\n                                    if (!pattern0.test(data9)) {\n                                      validate10.errors = [{\n                                        instancePath: instancePath + \"/keywords/\" + i1,\n                                        schemaPath: \"#/properties/keywords/items/pattern\",\n                                        keyword: \"pattern\",\n                                        params: {\n                                          pattern: \"^[\\\\w ]+$\"\n                                        },\n                                        message: \"must match pattern \\\"\" + \"^[\\\\w ]+$\" + \"\\\"\"\n                                      }];\n                                      return false;\n                                    }\n                                  }\n                                }\n                              } else {\n                                validate10.errors = [{\n                                  instancePath: instancePath + \"/keywords/\" + i1,\n                                  schemaPath: \"#/properties/keywords/items/type\",\n                                  keyword: \"type\",\n                                  params: {\n                                    type: \"string\"\n                                  },\n                                  message: \"must be string\"\n                                }];\n                                return false;\n                              }\n                            }\n\n                            var valid4 = _errs21 === errors;\n\n                            if (!valid4) {\n                              break;\n                            }\n                          }\n\n                          if (valid4) {\n                            var i2 = data8.length;\n                            var j0;\n\n                            if (i2 > 1) {\n                              var indices0 = {};\n\n                              for (; i2--;) {\n                                var item0 = data8[i2];\n\n                                if (typeof item0 !== \"string\") {\n                                  continue;\n                                }\n\n                                if (typeof indices0[item0] == \"number\") {\n                                  j0 = indices0[item0];\n                                  validate10.errors = [{\n                                    instancePath: instancePath + \"/keywords\",\n                                    schemaPath: \"#/properties/keywords/uniqueItems\",\n                                    keyword: \"uniqueItems\",\n                                    params: {\n                                      i: i2,\n                                      j: j0\n                                    },\n                                    message: \"must NOT have duplicate items (items ## \" + j0 + \" and \" + i2 + \" are identical)\"\n                                  }];\n                                  return false;\n                                }\n\n                                indices0[item0] = i2;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        validate10.errors = [{\n                          instancePath: instancePath + \"/keywords\",\n                          schemaPath: \"#/properties/keywords/type\",\n                          keyword: \"type\",\n                          params: {\n                            type: \"array\"\n                          },\n                          message: \"must be array\"\n                        }];\n                        return false;\n                      }\n                    }\n\n                    var valid0 = _errs19 === errors;\n                  } else {\n                    var valid0 = true;\n                  }\n\n                  if (valid0) {\n                    if (data.tags !== undefined) {\n                      var data10 = data.tags;\n                      var _errs23 = errors;\n\n                      if (errors === _errs23) {\n                        if (data10 && _typeof(data10) == \"object\" && !Array.isArray(data10)) {\n                          if (Object.keys(data10).length > 20) {\n                            validate10.errors = [{\n                              instancePath: instancePath + \"/tags\",\n                              schemaPath: \"#/properties/tags/maxProperties\",\n                              keyword: \"maxProperties\",\n                              params: {\n                                limit: 20\n                              },\n                              message: \"must NOT have more than 20 properties\"\n                            }];\n                            return false;\n                          } else {\n                            for (var key2 in data10) {\n                              var _errs25 = errors;\n                              var _errs26 = errors;\n\n                              if (errors === _errs26) {\n                                if (typeof key2 === \"string\") {\n                                  if (func2(key2) > 10) {\n                                    var err0 = {\n                                      instancePath: instancePath + \"/tags\",\n                                      schemaPath: \"#/definitions/TagIdentifier/maxLength\",\n                                      keyword: \"maxLength\",\n                                      params: {\n                                        limit: 10\n                                      },\n                                      message: \"must NOT have more than 10 characters\",\n                                      propertyName: key2\n                                    };\n\n                                    if (vErrors === null) {\n                                      vErrors = [err0];\n                                    } else {\n                                      vErrors.push(err0);\n                                    }\n\n                                    errors++;\n                                  } else {\n                                    if (func2(key2) < 1) {\n                                      var err1 = {\n                                        instancePath: instancePath + \"/tags\",\n                                        schemaPath: \"#/definitions/TagIdentifier/minLength\",\n                                        keyword: \"minLength\",\n                                        params: {\n                                          limit: 1\n                                        },\n                                        message: \"must NOT have fewer than 1 characters\",\n                                        propertyName: key2\n                                      };\n\n                                      if (vErrors === null) {\n                                        vErrors = [err1];\n                                      } else {\n                                        vErrors.push(err1);\n                                      }\n\n                                      errors++;\n                                    } else {\n                                      if (!pattern4.test(key2)) {\n                                        var err2 = {\n                                          instancePath: instancePath + \"/tags\",\n                                          schemaPath: \"#/definitions/TagIdentifier/pattern\",\n                                          keyword: \"pattern\",\n                                          params: {\n                                            pattern: \"^[\\\\w]+$\"\n                                          },\n                                          message: \"must match pattern \\\"\" + \"^[\\\\w]+$\" + \"\\\"\",\n                                          propertyName: key2\n                                        };\n\n                                        if (vErrors === null) {\n                                          vErrors = [err2];\n                                        } else {\n                                          vErrors.push(err2);\n                                        }\n\n                                        errors++;\n                                      }\n                                    }\n                                  }\n                                } else {\n                                  var err3 = {\n                                    instancePath: instancePath + \"/tags\",\n                                    schemaPath: \"#/definitions/TagIdentifier/type\",\n                                    keyword: \"type\",\n                                    params: {\n                                      type: \"string\"\n                                    },\n                                    message: \"must be string\",\n                                    propertyName: key2\n                                  };\n\n                                  if (vErrors === null) {\n                                    vErrors = [err3];\n                                  } else {\n                                    vErrors.push(err3);\n                                  }\n\n                                  errors++;\n                                }\n                              }\n\n                              var valid6 = _errs25 === errors;\n\n                              if (!valid6) {\n                                var err4 = {\n                                  instancePath: instancePath + \"/tags\",\n                                  schemaPath: \"#/properties/tags/propertyNames\",\n                                  keyword: \"propertyNames\",\n                                  params: {\n                                    propertyName: key2\n                                  },\n                                  message: \"property name must be valid\"\n                                };\n\n                                if (vErrors === null) {\n                                  vErrors = [err4];\n                                } else {\n                                  vErrors.push(err4);\n                                }\n\n                                errors++;\n                                validate10.errors = vErrors;\n                                return false;\n                              }\n                            }\n\n                            if (valid6) {\n                              for (var key3 in data10) {\n                                var data11 = data10[key3];\n                                var _errs29 = errors;\n                                var _errs30 = errors;\n\n                                if (errors === _errs30) {\n                                  if (data11 && _typeof(data11) == \"object\" && !Array.isArray(data11)) {\n                                    var missing2 = void 0;\n\n                                    if (data11.name === undefined && (missing2 = \"name\") || data11.description === undefined && (missing2 = \"description\")) {\n                                      validate10.errors = [{\n                                        instancePath: instancePath + \"/tags/\" + key3.replace(/~/g, \"~0\").replace(/\\//g, \"~1\"),\n                                        schemaPath: \"#/definitions/TagDefinition/required\",\n                                        keyword: \"required\",\n                                        params: {\n                                          missingProperty: missing2\n                                        },\n                                        message: \"must have required property '\" + missing2 + \"'\"\n                                      }];\n                                      return false;\n                                    } else {\n                                      var _errs32 = errors;\n\n                                      for (var key4 in data11) {\n                                        if (!(key4 === \"name\" || key4 === \"description\")) {\n                                          validate10.errors = [{\n                                            instancePath: instancePath + \"/tags/\" + key3.replace(/~/g, \"~0\").replace(/\\//g, \"~1\"),\n                                            schemaPath: \"#/definitions/TagDefinition/additionalProperties\",\n                                            keyword: \"additionalProperties\",\n                                            params: {\n                                              additionalProperty: key4\n                                            },\n                                            message: \"must NOT have additional properties\"\n                                          }];\n                                          return false;\n                                        }\n                                      }\n\n                                      if (_errs32 === errors) {\n                                        if (data11.name !== undefined) {\n                                          var data12 = data11.name;\n                                          var _errs33 = errors;\n\n                                          if (errors === _errs33) {\n                                            if (typeof data12 === \"string\") {\n                                              if (func2(data12) > 20) {\n                                                validate10.errors = [{\n                                                  instancePath: instancePath + \"/tags/\" + key3.replace(/~/g, \"~0\").replace(/\\//g, \"~1\") + \"/name\",\n                                                  schemaPath: \"#/definitions/TagDefinition/properties/name/maxLength\",\n                                                  keyword: \"maxLength\",\n                                                  params: {\n                                                    limit: 20\n                                                  },\n                                                  message: \"must NOT have more than 20 characters\"\n                                                }];\n                                                return false;\n                                              } else {\n                                                if (func2(data12) < 1) {\n                                                  validate10.errors = [{\n                                                    instancePath: instancePath + \"/tags/\" + key3.replace(/~/g, \"~0\").replace(/\\//g, \"~1\") + \"/name\",\n                                                    schemaPath: \"#/definitions/TagDefinition/properties/name/minLength\",\n                                                    keyword: \"minLength\",\n                                                    params: {\n                                                      limit: 1\n                                                    },\n                                                    message: \"must NOT have fewer than 1 characters\"\n                                                  }];\n                                                  return false;\n                                                } else {\n                                                  if (!pattern10.test(data12)) {\n                                                    validate10.errors = [{\n                                                      instancePath: instancePath + \"/tags/\" + key3.replace(/~/g, \"~0\").replace(/\\//g, \"~1\") + \"/name\",\n                                                      schemaPath: \"#/definitions/TagDefinition/properties/name/pattern\",\n                                                      keyword: \"pattern\",\n                                                      params: {\n                                                        pattern: \"^[ \\\\w]+$\"\n                                                      },\n                                                      message: \"must match pattern \\\"\" + \"^[ \\\\w]+$\" + \"\\\"\"\n                                                    }];\n                                                    return false;\n                                                  }\n                                                }\n                                              }\n                                            } else {\n                                              validate10.errors = [{\n                                                instancePath: instancePath + \"/tags/\" + key3.replace(/~/g, \"~0\").replace(/\\//g, \"~1\") + \"/name\",\n                                                schemaPath: \"#/definitions/TagDefinition/properties/name/type\",\n                                                keyword: \"type\",\n                                                params: {\n                                                  type: \"string\"\n                                                },\n                                                message: \"must be string\"\n                                              }];\n                                              return false;\n                                            }\n                                          }\n\n                                          var valid10 = _errs33 === errors;\n                                        } else {\n                                          var valid10 = true;\n                                        }\n\n                                        if (valid10) {\n                                          if (data11.description !== undefined) {\n                                            var data13 = data11.description;\n                                            var _errs35 = errors;\n\n                                            if (errors === _errs35) {\n                                              if (typeof data13 === \"string\") {\n                                                if (func2(data13) > 200) {\n                                                  validate10.errors = [{\n                                                    instancePath: instancePath + \"/tags/\" + key3.replace(/~/g, \"~0\").replace(/\\//g, \"~1\") + \"/description\",\n                                                    schemaPath: \"#/definitions/TagDefinition/properties/description/maxLength\",\n                                                    keyword: \"maxLength\",\n                                                    params: {\n                                                      limit: 200\n                                                    },\n                                                    message: \"must NOT have more than 200 characters\"\n                                                  }];\n                                                  return false;\n                                                } else {\n                                                  if (func2(data13) < 1) {\n                                                    validate10.errors = [{\n                                                      instancePath: instancePath + \"/tags/\" + key3.replace(/~/g, \"~0\").replace(/\\//g, \"~1\") + \"/description\",\n                                                      schemaPath: \"#/definitions/TagDefinition/properties/description/minLength\",\n                                                      keyword: \"minLength\",\n                                                      params: {\n                                                        limit: 1\n                                                      },\n                                                      message: \"must NOT have fewer than 1 characters\"\n                                                    }];\n                                                    return false;\n                                                  } else {\n                                                    if (!pattern11.test(data13)) {\n                                                      validate10.errors = [{\n                                                        instancePath: instancePath + \"/tags/\" + key3.replace(/~/g, \"~0\").replace(/\\//g, \"~1\") + \"/description\",\n                                                        schemaPath: \"#/definitions/TagDefinition/properties/description/pattern\",\n                                                        keyword: \"pattern\",\n                                                        params: {\n                                                          pattern: \"^[ \\\\w\\\\.,:]+$\"\n                                                        },\n                                                        message: \"must match pattern \\\"\" + \"^[ \\\\w\\\\.,:]+$\" + \"\\\"\"\n                                                      }];\n                                                      return false;\n                                                    }\n                                                  }\n                                                }\n                                              } else {\n                                                validate10.errors = [{\n                                                  instancePath: instancePath + \"/tags/\" + key3.replace(/~/g, \"~0\").replace(/\\//g, \"~1\") + \"/description\",\n                                                  schemaPath: \"#/definitions/TagDefinition/properties/description/type\",\n                                                  keyword: \"type\",\n                                                  params: {\n                                                    type: \"string\"\n                                                  },\n                                                  message: \"must be string\"\n                                                }];\n                                                return false;\n                                              }\n                                            }\n\n                                            var valid10 = _errs35 === errors;\n                                          } else {\n                                            var valid10 = true;\n                                          }\n                                        }\n                                      }\n                                    }\n                                  } else {\n                                    validate10.errors = [{\n                                      instancePath: instancePath + \"/tags/\" + key3.replace(/~/g, \"~0\").replace(/\\//g, \"~1\"),\n                                      schemaPath: \"#/definitions/TagDefinition/type\",\n                                      keyword: \"type\",\n                                      params: {\n                                        type: \"object\"\n                                      },\n                                      message: \"must be object\"\n                                    }];\n                                    return false;\n                                  }\n                                }\n\n                                var valid8 = _errs29 === errors;\n\n                                if (!valid8) {\n                                  break;\n                                }\n                              }\n                            }\n                          }\n                        } else {\n                          validate10.errors = [{\n                            instancePath: instancePath + \"/tags\",\n                            schemaPath: \"#/properties/tags/type\",\n                            keyword: \"type\",\n                            params: {\n                              type: \"object\"\n                            },\n                            message: \"must be object\"\n                          }];\n                          return false;\n                        }\n                      }\n\n                      var valid0 = _errs23 === errors;\n                    } else {\n                      var valid0 = true;\n                    }\n\n                    if (valid0) {\n                      if (data.logoURI !== undefined) {\n                        var data14 = data.logoURI;\n                        var _errs37 = errors;\n\n                        if (errors === _errs37) {\n                          if (errors === _errs37) {\n                            if (typeof data14 === \"string\") {\n                              if (!formats2(data14)) {\n                                validate10.errors = [{\n                                  instancePath: instancePath + \"/logoURI\",\n                                  schemaPath: \"#/properties/logoURI/format\",\n                                  keyword: \"format\",\n                                  params: {\n                                    format: \"uri\"\n                                  },\n                                  message: \"must match format \\\"\" + \"uri\" + \"\\\"\"\n                                }];\n                                return false;\n                              }\n                            } else {\n                              validate10.errors = [{\n                                instancePath: instancePath + \"/logoURI\",\n                                schemaPath: \"#/properties/logoURI/type\",\n                                keyword: \"type\",\n                                params: {\n                                  type: \"string\"\n                                },\n                                message: \"must be string\"\n                              }];\n                              return false;\n                            }\n                          }\n                        }\n\n                        var valid0 = _errs37 === errors;\n                      } else {\n                        var valid0 = true;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    } else {\n      validate10.errors = [{\n        instancePath: instancePath,\n        schemaPath: \"#/type\",\n        keyword: \"type\",\n        params: {\n          type: \"object\"\n        },\n        message: \"must be object\"\n      }];\n      return false;\n    }\n  }\n\n  validate10.errors = vErrors;\n  return errors === 0;\n}\n\nexport { validate10 as default, validate };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}