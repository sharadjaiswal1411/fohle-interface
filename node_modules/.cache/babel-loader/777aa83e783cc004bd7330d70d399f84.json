{"ast":null,"code":"import _slicedToArray from\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _defineProperty from\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";var _QUOTE_GAS_OVERRIDES;import{CurrencyAmount,TradeType}from'@uniswap/sdk-core';import{SwapQuoter}from'@uniswap/v3-sdk';import{useWeb3React}from'@web3-react/core';import{SupportedChainId}from'constants/chains';import JSBI from'jsbi';import{useSingleContractWithCallData}from'lib/hooks/multicall';import{useMemo}from'react';import{InterfaceTrade,TradeState}from'state/routing/types';import{isCelo}from'../constants/tokens';import{useAllV3Routes}from'./useAllV3Routes';import{useQuoter}from'./useContract';var QUOTE_GAS_OVERRIDES=(_QUOTE_GAS_OVERRIDES={},_defineProperty(_QUOTE_GAS_OVERRIDES,SupportedChainId.ARBITRUM_ONE,25000000),_defineProperty(_QUOTE_GAS_OVERRIDES,SupportedChainId.ARBITRUM_RINKEBY,25000000),_defineProperty(_QUOTE_GAS_OVERRIDES,SupportedChainId.CELO,50000000),_defineProperty(_QUOTE_GAS_OVERRIDES,SupportedChainId.CELO_ALFAJORES,50000000),_defineProperty(_QUOTE_GAS_OVERRIDES,SupportedChainId.POLYGON,40000000),_defineProperty(_QUOTE_GAS_OVERRIDES,SupportedChainId.POLYGON_MUMBAI,40000000),_QUOTE_GAS_OVERRIDES);var DEFAULT_GAS_QUOTE=2000000;/**\n * Returns the best v3 trade for a desired swap\n * @param tradeType whether the swap is an exact in/out\n * @param amountSpecified the exact amount to swap in/out\n * @param otherCurrency the desired output/payment currency\n */export function useClientSideV3Trade(tradeType,amountSpecified,otherCurrency){var _QUOTE_GAS_OVERRIDES$;var _ref=tradeType===TradeType.EXACT_INPUT?[amountSpecified===null||amountSpecified===void 0?void 0:amountSpecified.currency,otherCurrency]:[otherCurrency,amountSpecified===null||amountSpecified===void 0?void 0:amountSpecified.currency],_ref2=_slicedToArray(_ref,2),currencyIn=_ref2[0],currencyOut=_ref2[1];var _useAllV3Routes=useAllV3Routes(currencyIn,currencyOut),routes=_useAllV3Routes.routes,routesLoading=_useAllV3Routes.loading;var _useWeb3React=useWeb3React(),chainId=_useWeb3React.chainId;// Chains deployed using the deploy-v3 script only deploy QuoterV2.\nvar useQuoterV2=useMemo(function(){return Boolean(chainId&&isCelo(chainId));},[chainId]);var quoter=useQuoter(useQuoterV2);var callData=useMemo(function(){return amountSpecified?routes.map(function(route){return SwapQuoter.quoteCallParameters(route,amountSpecified,tradeType,{useQuoterV2:useQuoterV2}).calldata;}):[];},[amountSpecified,routes,tradeType,useQuoterV2]);var quotesResults=useSingleContractWithCallData(quoter,callData,{gasRequired:chainId?(_QUOTE_GAS_OVERRIDES$=QUOTE_GAS_OVERRIDES[chainId])!==null&&_QUOTE_GAS_OVERRIDES$!==void 0?_QUOTE_GAS_OVERRIDES$:DEFAULT_GAS_QUOTE:undefined});return useMemo(function(){if(!amountSpecified||!currencyIn||!currencyOut||quotesResults.some(function(_ref3){var valid=_ref3.valid;return!valid;})||(// skip when tokens are the same\ntradeType===TradeType.EXACT_INPUT?amountSpecified.currency.equals(currencyOut):amountSpecified.currency.equals(currencyIn))){return{state:TradeState.INVALID,trade:undefined};}if(routesLoading||quotesResults.some(function(_ref4){var loading=_ref4.loading;return loading;})){return{state:TradeState.LOADING,trade:undefined};}var _quotesResults$reduce=quotesResults.reduce(function(currentBest,_ref5,i){var result=_ref5.result;if(!result)return currentBest;// overwrite the current best if it's not defined or if this route is better\nif(tradeType===TradeType.EXACT_INPUT){var _amountOut=CurrencyAmount.fromRawAmount(currencyOut,result.amountOut.toString());if(currentBest.amountOut===null||JSBI.lessThan(currentBest.amountOut.quotient,_amountOut.quotient)){return{bestRoute:routes[i],amountIn:amountSpecified,amountOut:_amountOut};}}else{var _amountIn=CurrencyAmount.fromRawAmount(currencyIn,result.amountIn.toString());if(currentBest.amountIn===null||JSBI.greaterThan(currentBest.amountIn.quotient,_amountIn.quotient)){return{bestRoute:routes[i],amountIn:_amountIn,amountOut:amountSpecified};}}return currentBest;},{bestRoute:null,amountIn:null,amountOut:null}),bestRoute=_quotesResults$reduce.bestRoute,amountIn=_quotesResults$reduce.amountIn,amountOut=_quotesResults$reduce.amountOut;if(!bestRoute||!amountIn||!amountOut){return{state:TradeState.NO_ROUTE_FOUND,trade:undefined};}return{state:TradeState.VALID,trade:new InterfaceTrade({v2Routes:[],v3Routes:[{routev3:bestRoute,inputAmount:amountIn,outputAmount:amountOut}],tradeType:tradeType})};},[amountSpecified,currencyIn,currencyOut,quotesResults,routes,routesLoading,tradeType]);}","map":{"version":3,"names":["CurrencyAmount","TradeType","SwapQuoter","useWeb3React","SupportedChainId","JSBI","useSingleContractWithCallData","useMemo","InterfaceTrade","TradeState","isCelo","useAllV3Routes","useQuoter","QUOTE_GAS_OVERRIDES","ARBITRUM_ONE","ARBITRUM_RINKEBY","CELO","CELO_ALFAJORES","POLYGON","POLYGON_MUMBAI","DEFAULT_GAS_QUOTE","useClientSideV3Trade","tradeType","amountSpecified","otherCurrency","EXACT_INPUT","currency","currencyIn","currencyOut","routes","routesLoading","loading","chainId","useQuoterV2","Boolean","quoter","callData","map","route","quoteCallParameters","calldata","quotesResults","gasRequired","undefined","some","valid","equals","state","INVALID","trade","LOADING","reduce","currentBest","i","result","amountOut","fromRawAmount","toString","lessThan","quotient","bestRoute","amountIn","greaterThan","NO_ROUTE_FOUND","VALID","v2Routes","v3Routes","routev3","inputAmount","outputAmount"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/hooks/useClientSideV3Trade.ts"],"sourcesContent":["import { Currency, CurrencyAmount, TradeType } from '@uniswap/sdk-core'\nimport { Route, SwapQuoter } from '@uniswap/v3-sdk'\nimport { useWeb3React } from '@web3-react/core'\nimport { SupportedChainId } from 'constants/chains'\nimport JSBI from 'jsbi'\nimport { useSingleContractWithCallData } from 'lib/hooks/multicall'\nimport { useMemo } from 'react'\nimport { InterfaceTrade, TradeState } from 'state/routing/types'\n\nimport { isCelo } from '../constants/tokens'\nimport { useAllV3Routes } from './useAllV3Routes'\nimport { useQuoter } from './useContract'\n\nconst QUOTE_GAS_OVERRIDES: { [chainId: number]: number } = {\n  [SupportedChainId.ARBITRUM_ONE]: 25_000_000,\n  [SupportedChainId.ARBITRUM_RINKEBY]: 25_000_000,\n  [SupportedChainId.CELO]: 50_000_000,\n  [SupportedChainId.CELO_ALFAJORES]: 50_000_000,\n  [SupportedChainId.POLYGON]: 40_000_000,\n  [SupportedChainId.POLYGON_MUMBAI]: 40_000_000,\n}\n\nconst DEFAULT_GAS_QUOTE = 2_000_000\n\n/**\n * Returns the best v3 trade for a desired swap\n * @param tradeType whether the swap is an exact in/out\n * @param amountSpecified the exact amount to swap in/out\n * @param otherCurrency the desired output/payment currency\n */\nexport function useClientSideV3Trade<TTradeType extends TradeType>(\n  tradeType: TTradeType,\n  amountSpecified?: CurrencyAmount<Currency>,\n  otherCurrency?: Currency\n): { state: TradeState; trade: InterfaceTrade<Currency, Currency, TTradeType> | undefined } {\n  const [currencyIn, currencyOut] =\n    tradeType === TradeType.EXACT_INPUT\n      ? [amountSpecified?.currency, otherCurrency]\n      : [otherCurrency, amountSpecified?.currency]\n  const { routes, loading: routesLoading } = useAllV3Routes(currencyIn, currencyOut)\n\n  const { chainId } = useWeb3React()\n  // Chains deployed using the deploy-v3 script only deploy QuoterV2.\n  const useQuoterV2 = useMemo(() => Boolean(chainId && isCelo(chainId)), [chainId])\n  const quoter = useQuoter(useQuoterV2)\n  const callData = useMemo(\n    () =>\n      amountSpecified\n        ? routes.map(\n            (route) => SwapQuoter.quoteCallParameters(route, amountSpecified, tradeType, { useQuoterV2 }).calldata\n          )\n        : [],\n    [amountSpecified, routes, tradeType, useQuoterV2]\n  )\n\n  const quotesResults = useSingleContractWithCallData(quoter, callData, {\n    gasRequired: chainId ? QUOTE_GAS_OVERRIDES[chainId] ?? DEFAULT_GAS_QUOTE : undefined,\n  })\n\n  return useMemo(() => {\n    if (\n      !amountSpecified ||\n      !currencyIn ||\n      !currencyOut ||\n      quotesResults.some(({ valid }) => !valid) ||\n      // skip when tokens are the same\n      (tradeType === TradeType.EXACT_INPUT\n        ? amountSpecified.currency.equals(currencyOut)\n        : amountSpecified.currency.equals(currencyIn))\n    ) {\n      return {\n        state: TradeState.INVALID,\n        trade: undefined,\n      }\n    }\n\n    if (routesLoading || quotesResults.some(({ loading }) => loading)) {\n      return {\n        state: TradeState.LOADING,\n        trade: undefined,\n      }\n    }\n\n    const { bestRoute, amountIn, amountOut } = quotesResults.reduce(\n      (\n        currentBest: {\n          bestRoute: Route<Currency, Currency> | null\n          amountIn: CurrencyAmount<Currency> | null\n          amountOut: CurrencyAmount<Currency> | null\n        },\n        { result },\n        i\n      ) => {\n        if (!result) return currentBest\n\n        // overwrite the current best if it's not defined or if this route is better\n        if (tradeType === TradeType.EXACT_INPUT) {\n          const amountOut = CurrencyAmount.fromRawAmount(currencyOut, result.amountOut.toString())\n          if (currentBest.amountOut === null || JSBI.lessThan(currentBest.amountOut.quotient, amountOut.quotient)) {\n            return {\n              bestRoute: routes[i],\n              amountIn: amountSpecified,\n              amountOut,\n            }\n          }\n        } else {\n          const amountIn = CurrencyAmount.fromRawAmount(currencyIn, result.amountIn.toString())\n          if (currentBest.amountIn === null || JSBI.greaterThan(currentBest.amountIn.quotient, amountIn.quotient)) {\n            return {\n              bestRoute: routes[i],\n              amountIn,\n              amountOut: amountSpecified,\n            }\n          }\n        }\n\n        return currentBest\n      },\n      {\n        bestRoute: null,\n        amountIn: null,\n        amountOut: null,\n      }\n    )\n\n    if (!bestRoute || !amountIn || !amountOut) {\n      return {\n        state: TradeState.NO_ROUTE_FOUND,\n        trade: undefined,\n      }\n    }\n\n    return {\n      state: TradeState.VALID,\n      trade: new InterfaceTrade({\n        v2Routes: [],\n        v3Routes: [\n          {\n            routev3: bestRoute,\n            inputAmount: amountIn,\n            outputAmount: amountOut,\n          },\n        ],\n        tradeType,\n      }),\n    }\n  }, [amountSpecified, currencyIn, currencyOut, quotesResults, routes, routesLoading, tradeType])\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}