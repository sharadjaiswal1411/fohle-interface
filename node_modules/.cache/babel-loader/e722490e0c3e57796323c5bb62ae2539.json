{"ast":null,"code":"import { BigNumber } from '@ethersproject/bignumber';\nimport retry from 'async-retry';\nimport axios from 'axios';\nimport { log } from '../util/log';\nimport { IGasPriceProvider } from './gas-price-provider';\nexport class ETHGasStationInfoProvider extends IGasPriceProvider {\n  constructor(url) {\n    super();\n    this.url = url;\n  }\n  async getGasPrice() {\n    log.info(`About to get gas prices from gas station ${this.url}`);\n    const response = await retry(async () => {\n      return axios.get(this.url);\n    }, {\n      retries: 1\n    });\n    const {\n      data: gasPriceResponse,\n      status\n    } = response;\n    if (status != 200) {\n      log.error({\n        response\n      }, `Unabled to get gas price from ${this.url}.`);\n      throw new Error(`Unable to get gas price from ${this.url}`);\n    }\n    log.info({\n      gasPriceResponse\n    }, 'Gas price response from API. About to parse \"fast\" to big number');\n    // Gas prices from ethgasstation are in GweiX10.\n    const gasPriceWei = BigNumber.from(gasPriceResponse.fast).div(BigNumber.from(10)).mul(BigNumber.from(10).pow(9));\n    log.info(`Gas price in wei: ${gasPriceWei} as of block ${gasPriceResponse.blockNum}`);\n    return {\n      gasPriceWei: gasPriceWei\n    };\n  }\n}","map":{"version":3,"sources":["../../../src/providers/eth-gas-station-info-gas-price-provider.ts"],"names":[],"mappings":"AAAA,SAAS,SAAS,QAAQ,0BAA0B;AACpD,OAAO,KAAK,MAAM,aAAa;AAC/B,OAAO,KAAK,MAAM,OAAO;AAEzB,SAAS,GAAG,QAAQ,aAAa;AAEjC,SAAmB,iBAAiB,QAAQ,sBAAsB;AAiBlE,OAAM,MAAO,yBAA0B,SAAQ,iBAAiB,CAAA;EAE9D,WAAA,CAAY,GAAW,EAAA;IACrB,KAAK,EAAE;IACP,IAAI,CAAC,GAAG,GAAG,GAAG;EAChB;EAEO,MAAM,WAAW,GAAA;IACtB,GAAG,CAAC,IAAI,CAAC,4CAA4C,IAAI,CAAC,GAAG,EAAE,CAAC;IAChE,MAAM,QAAQ,GAAG,MAAM,KAAK,CAC1B,YAAW;MACT,OAAO,KAAK,CAAC,GAAG,CAAwB,IAAI,CAAC,GAAG,CAAC;IACnD,CAAC,EACD;MAAE,OAAO,EAAE;IAAC,CAAE,CACf;IAED,MAAM;MAAE,IAAI,EAAE,gBAAgB;MAAE;IAAM,CAAE,GAAG,QAAQ;IAEnD,IAAI,MAAM,IAAI,GAAG,EAAE;MACjB,GAAG,CAAC,KAAK,CAAC;QAAE;MAAQ,CAAE,EAAE,iCAAiC,IAAI,CAAC,GAAG,GAAG,CAAC;MAErE,MAAM,IAAI,KAAK,CAAC,gCAAgC,IAAI,CAAC,GAAG,EAAE,CAAC;IAC5D;IAED,GAAG,CAAC,IAAI,CACN;MAAE;IAAgB,CAAE,EACpB,kEAAkE,CACnE;IAED;IACA,MAAM,WAAW,GAAG,SAAS,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CACtD,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CACvB,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAEjC,GAAG,CAAC,IAAI,CACN,qBAAqB,WAAW,gBAAgB,gBAAgB,CAAC,QAAQ,EAAE,CAC5E;IAED,OAAO;MAAE,WAAW,EAAE;IAAW,CAAE;EACrC;AACD","sourceRoot":"","sourcesContent":["import { BigNumber } from '@ethersproject/bignumber';\nimport retry from 'async-retry';\nimport axios from 'axios';\nimport { log } from '../util/log';\nimport { IGasPriceProvider } from './gas-price-provider';\nexport class ETHGasStationInfoProvider extends IGasPriceProvider {\n    constructor(url) {\n        super();\n        this.url = url;\n    }\n    async getGasPrice() {\n        log.info(`About to get gas prices from gas station ${this.url}`);\n        const response = await retry(async () => {\n            return axios.get(this.url);\n        }, { retries: 1 });\n        const { data: gasPriceResponse, status } = response;\n        if (status != 200) {\n            log.error({ response }, `Unabled to get gas price from ${this.url}.`);\n            throw new Error(`Unable to get gas price from ${this.url}`);\n        }\n        log.info({ gasPriceResponse }, 'Gas price response from API. About to parse \"fast\" to big number');\n        // Gas prices from ethgasstation are in GweiX10.\n        const gasPriceWei = BigNumber.from(gasPriceResponse.fast)\n            .div(BigNumber.from(10))\n            .mul(BigNumber.from(10).pow(9));\n        log.info(`Gas price in wei: ${gasPriceWei} as of block ${gasPriceResponse.blockNum}`);\n        return { gasPriceWei: gasPriceWei };\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXRoLWdhcy1zdGF0aW9uLWluZm8tZ2FzLXByaWNlLXByb3ZpZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3Byb3ZpZGVycy9ldGgtZ2FzLXN0YXRpb24taW5mby1nYXMtcHJpY2UtcHJvdmlkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ3JELE9BQU8sS0FBSyxNQUFNLGFBQWEsQ0FBQztBQUNoQyxPQUFPLEtBQUssTUFBTSxPQUFPLENBQUM7QUFFMUIsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUVsQyxPQUFPLEVBQVksaUJBQWlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQWlCbkUsTUFBTSxPQUFPLHlCQUEwQixTQUFRLGlCQUFpQjtJQUU5RCxZQUFZLEdBQVc7UUFDckIsS0FBSyxFQUFFLENBQUM7UUFDUixJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztJQUNqQixDQUFDO0lBRU0sS0FBSyxDQUFDLFdBQVc7UUFDdEIsR0FBRyxDQUFDLElBQUksQ0FBQyw0Q0FBNEMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDakUsTUFBTSxRQUFRLEdBQUcsTUFBTSxLQUFLLENBQzFCLEtBQUssSUFBSSxFQUFFO1lBQ1QsT0FBTyxLQUFLLENBQUMsR0FBRyxDQUF3QixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDcEQsQ0FBQyxFQUNELEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxDQUNmLENBQUM7UUFFRixNQUFNLEVBQUUsSUFBSSxFQUFFLGdCQUFnQixFQUFFLE1BQU0sRUFBRSxHQUFHLFFBQVEsQ0FBQztRQUVwRCxJQUFJLE1BQU0sSUFBSSxHQUFHLEVBQUU7WUFDakIsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLFFBQVEsRUFBRSxFQUFFLGlDQUFpQyxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQztZQUV0RSxNQUFNLElBQUksS0FBSyxDQUFDLGdDQUFnQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztTQUM3RDtRQUVELEdBQUcsQ0FBQyxJQUFJLENBQ04sRUFBRSxnQkFBZ0IsRUFBRSxFQUNwQixrRUFBa0UsQ0FDbkUsQ0FBQztRQUVGLGdEQUFnRDtRQUNoRCxNQUFNLFdBQVcsR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQzthQUN0RCxHQUFHLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQzthQUN2QixHQUFHLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUVsQyxHQUFHLENBQUMsSUFBSSxDQUNOLHFCQUFxQixXQUFXLGdCQUFnQixnQkFBZ0IsQ0FBQyxRQUFRLEVBQUUsQ0FDNUUsQ0FBQztRQUVGLE9BQU8sRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFLENBQUM7SUFDdEMsQ0FBQztDQUNGIn0="]},"metadata":{},"sourceType":"module"}