{"ast":null,"code":"import dayjs from 'dayjs';\n\n/**\n * Used to get large amounts of data when\n * @param query\n * @param localClient\n * @param vars - any variables that are passed in every query\n * @param values - the keys that are used as the values to map over if\n * @param skipCount - amount of entities to skip per query\n */\nexport async function splitQuery(query, client, vars, values) {\n  let skipCount = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1000;\n  let fetchedData = {};\n  let allFound = false;\n  let skip = 0;\n  try {\n    while (!allFound) {\n      let end = values.length;\n      if (skip + skipCount < values.length) {\n        end = skip + skipCount;\n      }\n      const sliced = values.slice(skip, end);\n      const result = await client.query({\n        query: query(...vars, sliced),\n        fetchPolicy: 'network-only'\n      });\n      fetchedData = {\n        ...fetchedData,\n        ...result.data\n      };\n      if (Object.keys(result.data).length < skipCount || skip + skipCount > values.length) {\n        allFound = true;\n      } else {\n        skip += skipCount;\n      }\n    }\n    return fetchedData;\n  } catch (e) {\n    console.log(e);\n    return undefined;\n  }\n}\nexport function useDeltaTimestamps() {\n  const utcCurrentTime = dayjs();\n  const t1 = utcCurrentTime.subtract(1, 'day').startOf('minute').unix();\n  const t2 = utcCurrentTime.subtract(2, 'day').startOf('minute').unix();\n  const tWeek = utcCurrentTime.subtract(1, 'week').startOf('minute').unix();\n  return [t1, t2, tWeek];\n}","map":{"version":3,"names":["dayjs","splitQuery","query","client","vars","values","skipCount","fetchedData","allFound","skip","end","length","sliced","slice","result","fetchPolicy","data","Object","keys","e","console","log","undefined","useDeltaTimestamps","utcCurrentTime","t1","subtract","startOf","unix","t2","tWeek"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/utils/queries.ts"],"sourcesContent":["import { ApolloClient, NormalizedCacheObject } from '@apollo/client'\nimport dayjs from 'dayjs'\n\n/**\n * Used to get large amounts of data when\n * @param query\n * @param localClient\n * @param vars - any variables that are passed in every query\n * @param values - the keys that are used as the values to map over if\n * @param skipCount - amount of entities to skip per query\n */\nexport async function splitQuery<Type>(\n  query: any,\n  client: ApolloClient<NormalizedCacheObject>,\n  vars: any[],\n  values: any[],\n  skipCount = 1000\n) {\n  let fetchedData = {}\n  let allFound = false\n  let skip = 0\n  try {\n    while (!allFound) {\n      let end = values.length\n      if (skip + skipCount < values.length) {\n        end = skip + skipCount\n      }\n      const sliced = values.slice(skip, end)\n      const result = await client.query<Type>({\n        query: query(...vars, sliced),\n        fetchPolicy: 'network-only',\n      })\n      fetchedData = {\n        ...fetchedData,\n        ...result.data,\n      }\n      if (Object.keys(result.data).length < skipCount || skip + skipCount > values.length) {\n        allFound = true\n      } else {\n        skip += skipCount\n      }\n    }\n    return fetchedData\n  } catch (e) {\n    console.log(e)\n    return undefined\n  }\n}\n\nexport function useDeltaTimestamps(): [number, number, number] {\n  const utcCurrentTime = dayjs()\n  const t1 = utcCurrentTime.subtract(1, 'day').startOf('minute').unix()\n  const t2 = utcCurrentTime.subtract(2, 'day').startOf('minute').unix()\n  const tWeek = utcCurrentTime.subtract(1, 'week').startOf('minute').unix()\n  return [t1, t2, tWeek]\n}\n"],"mappings":"AACA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeC,UAAU,CAC9BC,KAAU,EACVC,MAA2C,EAC3CC,IAAW,EACXC,MAAa,EAEb;EAAA,IADAC,SAAS,uEAAG,IAAI;EAEhB,IAAIC,WAAW,GAAG,CAAC,CAAC;EACpB,IAAIC,QAAQ,GAAG,KAAK;EACpB,IAAIC,IAAI,GAAG,CAAC;EACZ,IAAI;IACF,OAAO,CAACD,QAAQ,EAAE;MAChB,IAAIE,GAAG,GAAGL,MAAM,CAACM,MAAM;MACvB,IAAIF,IAAI,GAAGH,SAAS,GAAGD,MAAM,CAACM,MAAM,EAAE;QACpCD,GAAG,GAAGD,IAAI,GAAGH,SAAS;MACxB;MACA,MAAMM,MAAM,GAAGP,MAAM,CAACQ,KAAK,CAACJ,IAAI,EAAEC,GAAG,CAAC;MACtC,MAAMI,MAAM,GAAG,MAAMX,MAAM,CAACD,KAAK,CAAO;QACtCA,KAAK,EAAEA,KAAK,CAAC,GAAGE,IAAI,EAAEQ,MAAM,CAAC;QAC7BG,WAAW,EAAE;MACf,CAAC,CAAC;MACFR,WAAW,GAAG;QACZ,GAAGA,WAAW;QACd,GAAGO,MAAM,CAACE;MACZ,CAAC;MACD,IAAIC,MAAM,CAACC,IAAI,CAACJ,MAAM,CAACE,IAAI,CAAC,CAACL,MAAM,GAAGL,SAAS,IAAIG,IAAI,GAAGH,SAAS,GAAGD,MAAM,CAACM,MAAM,EAAE;QACnFH,QAAQ,GAAG,IAAI;MACjB,CAAC,MAAM;QACLC,IAAI,IAAIH,SAAS;MACnB;IACF;IACA,OAAOC,WAAW;EACpB,CAAC,CAAC,OAAOY,CAAC,EAAE;IACVC,OAAO,CAACC,GAAG,CAACF,CAAC,CAAC;IACd,OAAOG,SAAS;EAClB;AACF;AAEA,OAAO,SAASC,kBAAkB,GAA6B;EAC7D,MAAMC,cAAc,GAAGxB,KAAK,EAAE;EAC9B,MAAMyB,EAAE,GAAGD,cAAc,CAACE,QAAQ,CAAC,CAAC,EAAE,KAAK,CAAC,CAACC,OAAO,CAAC,QAAQ,CAAC,CAACC,IAAI,EAAE;EACrE,MAAMC,EAAE,GAAGL,cAAc,CAACE,QAAQ,CAAC,CAAC,EAAE,KAAK,CAAC,CAACC,OAAO,CAAC,QAAQ,CAAC,CAACC,IAAI,EAAE;EACrE,MAAME,KAAK,GAAGN,cAAc,CAACE,QAAQ,CAAC,CAAC,EAAE,MAAM,CAAC,CAACC,OAAO,CAAC,QAAQ,CAAC,CAACC,IAAI,EAAE;EACzE,OAAO,CAACH,EAAE,EAAEI,EAAE,EAAEC,KAAK,CAAC;AACxB"},"metadata":{},"sourceType":"module"}