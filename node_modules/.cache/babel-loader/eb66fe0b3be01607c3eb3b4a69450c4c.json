{"ast":null,"code":"export const fetchRoute = async _ref => {\n  let {\n    toSell,\n    toBuy,\n    senderAddress\n  } = _ref;\n  const url = `${process.env.REACT_APP_TEMP_API_URL}/nft/route`;\n  const payload = {\n    sell: [...toSell].map(x => buildRouteItem(x)),\n    buy: [...toBuy].filter(x => x.tokenType !== 'Dust').map(x => buildRouteItem(x)),\n    sender: senderAddress\n  };\n  const r = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(payload)\n  });\n  const data = await r.json();\n  return data;\n};\nconst buildRouteItem = item => {\n  var _item$name;\n  return {\n    id: item.id,\n    symbol: item.priceInfo.baseAsset,\n    name: (_item$name = item.name) !== null && _item$name !== void 0 ? _item$name : '',\n    decimals: parseFloat(item.priceInfo.baseDecimals),\n    address: item.address,\n    tokenType: item.tokenType,\n    tokenId: item.tokenId,\n    marketplace: item.marketplace,\n    collectionName: item.collectionName,\n    amount: 1,\n    priceInfo: {\n      basePrice: item.priceInfo.basePrice,\n      baseAsset: item.priceInfo.baseAsset,\n      ETHPrice: item.priceInfo.ETHPrice\n    }\n  };\n};","map":{"version":3,"names":["fetchRoute","toSell","toBuy","senderAddress","url","process","env","REACT_APP_TEMP_API_URL","payload","sell","map","x","buildRouteItem","buy","filter","tokenType","sender","r","fetch","method","headers","body","JSON","stringify","data","json","item","id","symbol","priceInfo","baseAsset","name","decimals","parseFloat","baseDecimals","address","tokenId","marketplace","collectionName","amount","basePrice","ETHPrice"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/nft/queries/genie/RouteFetcher.ts"],"sourcesContent":["import { NftStandard } from 'graphql/data/__generated__/types-and-hooks'\nimport { GenieAsset, RouteResponse } from 'nft/types'\n\nexport const fetchRoute = async ({\n  toSell,\n  toBuy,\n  senderAddress,\n}: {\n  toSell: any\n  toBuy: any\n  senderAddress: string\n}): Promise<RouteResponse> => {\n  const url = `${process.env.REACT_APP_TEMP_API_URL}/nft/route`\n  const payload = {\n    sell: [...toSell].map((x) => buildRouteItem(x)),\n    buy: [...toBuy].filter((x) => x.tokenType !== 'Dust').map((x) => buildRouteItem(x)),\n    sender: senderAddress,\n  }\n\n  const r = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(payload),\n  })\n  const data = await r.json()\n\n  return data\n}\n\ntype ApiPriceInfo = {\n  basePrice: string\n  baseAsset: string\n  ETHPrice: string\n}\n\ntype RouteItem = {\n  id?: string\n  symbol?: string\n  name: string\n  decimals: number\n  address: string\n  priceInfo: ApiPriceInfo\n  tokenType?: NftStandard\n  tokenId: string\n  amount: number\n  marketplace?: string\n  collectionName?: string\n}\n\nconst buildRouteItem = (item: GenieAsset): RouteItem => {\n  return {\n    id: item.id,\n    symbol: item.priceInfo.baseAsset,\n    name: item.name ?? '',\n    decimals: parseFloat(item.priceInfo.baseDecimals),\n    address: item.address,\n    tokenType: item.tokenType,\n    tokenId: item.tokenId,\n    marketplace: item.marketplace,\n    collectionName: item.collectionName,\n    amount: 1,\n    priceInfo: {\n      basePrice: item.priceInfo.basePrice,\n      baseAsset: item.priceInfo.baseAsset,\n      ETHPrice: item.priceInfo.ETHPrice,\n    },\n  }\n}\n"],"mappings":"AAGA,OAAO,MAAMA,UAAU,GAAG,cAQI;EAAA,IARG;IAC/BC,MAAM;IACNC,KAAK;IACLC;EAKF,CAAC;EACC,MAAMC,GAAG,GAAI,GAAEC,OAAO,CAACC,GAAG,CAACC,sBAAuB,YAAW;EAC7D,MAAMC,OAAO,GAAG;IACdC,IAAI,EAAE,CAAC,GAAGR,MAAM,CAAC,CAACS,GAAG,CAAEC,CAAC,IAAKC,cAAc,CAACD,CAAC,CAAC,CAAC;IAC/CE,GAAG,EAAE,CAAC,GAAGX,KAAK,CAAC,CAACY,MAAM,CAAEH,CAAC,IAAKA,CAAC,CAACI,SAAS,KAAK,MAAM,CAAC,CAACL,GAAG,CAAEC,CAAC,IAAKC,cAAc,CAACD,CAAC,CAAC,CAAC;IACnFK,MAAM,EAAEb;EACV,CAAC;EAED,MAAMc,CAAC,GAAG,MAAMC,KAAK,CAACd,GAAG,EAAE;IACzBe,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACf,OAAO;EAC9B,CAAC,CAAC;EACF,MAAMgB,IAAI,GAAG,MAAMP,CAAC,CAACQ,IAAI,EAAE;EAE3B,OAAOD,IAAI;AACb,CAAC;AAsBD,MAAMZ,cAAc,GAAIc,IAAgB,IAAgB;EAAA;EACtD,OAAO;IACLC,EAAE,EAAED,IAAI,CAACC,EAAE;IACXC,MAAM,EAAEF,IAAI,CAACG,SAAS,CAACC,SAAS;IAChCC,IAAI,gBAAEL,IAAI,CAACK,IAAI,mDAAI,EAAE;IACrBC,QAAQ,EAAEC,UAAU,CAACP,IAAI,CAACG,SAAS,CAACK,YAAY,CAAC;IACjDC,OAAO,EAAET,IAAI,CAACS,OAAO;IACrBpB,SAAS,EAAEW,IAAI,CAACX,SAAS;IACzBqB,OAAO,EAAEV,IAAI,CAACU,OAAO;IACrBC,WAAW,EAAEX,IAAI,CAACW,WAAW;IAC7BC,cAAc,EAAEZ,IAAI,CAACY,cAAc;IACnCC,MAAM,EAAE,CAAC;IACTV,SAAS,EAAE;MACTW,SAAS,EAAEd,IAAI,CAACG,SAAS,CAACW,SAAS;MACnCV,SAAS,EAAEJ,IAAI,CAACG,SAAS,CAACC,SAAS;MACnCW,QAAQ,EAAEf,IAAI,CAACG,SAAS,CAACY;IAC3B;EACF,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"module"}