{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { PluginType } from '@amplitude/analytics-types';\nimport { getAnalyticsConnector } from '../analytics-connector';\nvar IdentityEventSender = /** @class */function () {\n  function IdentityEventSender() {\n    this.name = 'identity';\n    this.type = PluginType.BEFORE;\n    this.identityStore = getAnalyticsConnector().identityStore;\n  }\n  IdentityEventSender.prototype.execute = function (context) {\n    return __awaiter(this, void 0, void 0, function () {\n      var userProperties;\n      return __generator(this, function (_a) {\n        userProperties = context.user_properties;\n        if (userProperties) {\n          this.identityStore.editIdentity().updateUserProperties(userProperties).commit();\n        }\n        return [2 /*return*/, context];\n      });\n    });\n  };\n  IdentityEventSender.prototype.setup = function (_) {\n    return Promise.resolve(undefined);\n  };\n  return IdentityEventSender;\n}();\nexport { IdentityEventSender };","map":{"version":3,"sources":["../../../src/plugins/identity.ts"],"names":[],"mappings":";AAAA,SAAsC,UAAU,QAAQ,4BAA4B;AACpF,SAAS,qBAAqB,QAAQ,wBAAwB;AAE9D,IAAA,mBAAA,GAAA,aAAA,YAAA;EAAA,SAAA,mBAAA,GAAA;IACE,IAAA,CAAA,IAAI,GAAG,UAAU;IACjB,IAAA,CAAA,IAAI,GAAG,UAAU,CAAC,MAAe;IAEjC,IAAA,CAAA,aAAa,GAAG,qBAAqB,EAAE,CAAC,aAAa;EAavD;EAXQ,mBAAA,CAAA,SAAA,CAAA,OAAO,GAAb,UAAc,OAAc,EAAA;;;;QACpB,cAAc,GAAG,OAAO,CAAC,eAAsC;QACrE,IAAI,cAAc,EAAE;UAClB,IAAI,CAAC,aAAa,CAAC,YAAY,EAAE,CAAC,oBAAoB,CAAC,cAAc,CAAC,CAAC,MAAM,EAAE;QAChF;QACD,OAAA,CAAA,CAAA,CAAA,YAAO,OAAO,CAAA;;;GACf;EAED,mBAAA,CAAA,SAAA,CAAA,KAAK,GAAL,UAAM,CAAS,EAAA;IACb,OAAO,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC;EACnC,CAAC;EACH,OAAA,mBAAC;AAAD,CAAC,EAAA","sourcesContent":["import { BeforePlugin, Config, Event, PluginType } from '@amplitude/analytics-types';\nimport { getAnalyticsConnector } from '../analytics-connector';\n\nexport class IdentityEventSender implements BeforePlugin {\n  name = 'identity';\n  type = PluginType.BEFORE as const;\n\n  identityStore = getAnalyticsConnector().identityStore;\n\n  async execute(context: Event): Promise<Event> {\n    const userProperties = context.user_properties as Record<string, any>;\n    if (userProperties) {\n      this.identityStore.editIdentity().updateUserProperties(userProperties).commit();\n    }\n    return context;\n  }\n\n  setup(_: Config): Promise<undefined> {\n    return Promise.resolve(undefined);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}