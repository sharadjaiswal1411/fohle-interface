{"ast":null,"code":"import JSBI from 'jsbi';\nimport { CurrencyAmount, sqrt, Token, Price, TradeType, Fraction, computePriceImpact, sortedInsert, validateAndParseAddress } from '@uniswap/sdk-core';\nimport invariant from 'tiny-invariant';\nimport { keccak256, pack } from '@ethersproject/solidity';\nimport { getCreate2Address } from '@ethersproject/address';\nvar FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f';\nvar INIT_CODE_HASH = '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f';\nvar MINIMUM_LIQUIDITY = /*#__PURE__*/JSBI.BigInt(1000); // exports for internal consumption\n\nvar ZERO = /*#__PURE__*/JSBI.BigInt(0);\nvar ONE = /*#__PURE__*/JSBI.BigInt(1);\nvar FIVE = /*#__PURE__*/JSBI.BigInt(5);\nvar _997 = /*#__PURE__*/JSBI.BigInt(997);\nvar _1000 = /*#__PURE__*/JSBI.BigInt(1000);\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nfunction _construct(Parent, args, Class) {\n  if (_isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) _setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n  return _construct.apply(null, arguments);\n}\nfunction _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}\nfunction _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !_isNativeFunction(Class)) return Class;\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n      _cache.set(Class, Wrapper);\n    }\n    function Wrapper() {\n      return _construct(Class, arguments, _getPrototypeOf(this).constructor);\n    }\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return _setPrototypeOf(Wrapper, Class);\n  };\n  return _wrapNativeSuper(Class);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it;\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      return function () {\n        if (i >= o.length) return {\n          done: true\n        };\n        return {\n          done: false,\n          value: o[i++]\n        };\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  it = o[Symbol.iterator]();\n  return it.next.bind(it);\n}\n\n// see https://stackoverflow.com/a/41102306\nvar CAN_SET_PROTOTYPE = ('setPrototypeOf' in Object);\n/**\r\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\r\n * obtained by sending any amount of input.\r\n */\n\nvar InsufficientReservesError = /*#__PURE__*/function (_Error) {\n  _inheritsLoose(InsufficientReservesError, _Error);\n  function InsufficientReservesError() {\n    var _this;\n    _this = _Error.call(this) || this;\n    _this.isInsufficientReservesError = true;\n    _this.name = _this.constructor.name;\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(_assertThisInitialized(_this), (this instanceof InsufficientReservesError ? this.constructor : void 0).prototype);\n    return _this;\n  }\n  return InsufficientReservesError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n/**\r\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\r\n * than the price of a single unit of output after fees.\r\n */\n\nvar InsufficientInputAmountError = /*#__PURE__*/function (_Error2) {\n  _inheritsLoose(InsufficientInputAmountError, _Error2);\n  function InsufficientInputAmountError() {\n    var _this2;\n    _this2 = _Error2.call(this) || this;\n    _this2.isInsufficientInputAmountError = true;\n    _this2.name = _this2.constructor.name;\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(_assertThisInitialized(_this2), (this instanceof InsufficientInputAmountError ? this.constructor : void 0).prototype);\n    return _this2;\n  }\n  return InsufficientInputAmountError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\nvar computePairAddress = function computePairAddress(_ref) {\n  var factoryAddress = _ref.factoryAddress,\n    tokenA = _ref.tokenA,\n    tokenB = _ref.tokenB;\n  var _ref2 = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA],\n    token0 = _ref2[0],\n    token1 = _ref2[1]; // does safety checks\n\n  return getCreate2Address(factoryAddress, keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])]), INIT_CODE_HASH);\n};\nvar Pair = /*#__PURE__*/function () {\n  function Pair(currencyAmountA, tokenAmountB) {\n    var tokenAmounts = currencyAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n    ? [currencyAmountA, tokenAmountB] : [tokenAmountB, currencyAmountA];\n    this.liquidityToken = new Token(tokenAmounts[0].currency.chainId, Pair.getAddress(tokenAmounts[0].currency, tokenAmounts[1].currency), 18, 'UNI-V2', 'Uniswap V2');\n    this.tokenAmounts = tokenAmounts;\n  }\n  Pair.getAddress = function getAddress(tokenA, tokenB) {\n    return computePairAddress({\n      factoryAddress: FACTORY_ADDRESS,\n      tokenA: tokenA,\n      tokenB: tokenB\n    });\n  }\n  /**\r\n   * Returns true if the token is either token0 or token1\r\n   * @param token to check\r\n   */;\n\n  var _proto = Pair.prototype;\n  _proto.involvesToken = function involvesToken(token) {\n    return token.equals(this.token0) || token.equals(this.token1);\n  }\n  /**\r\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\r\n   */;\n\n  /**\r\n   * Return the price of the given token in terms of the other token in the pair.\r\n   * @param token token to return price of\r\n   */\n  _proto.priceOf = function priceOf(token) {\n    !this.involvesToken(token) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n    return token.equals(this.token0) ? this.token0Price : this.token1Price;\n  }\n  /**\r\n   * Returns the chain ID of the tokens in the pair.\r\n   */;\n\n  _proto.reserveOf = function reserveOf(token) {\n    !this.involvesToken(token) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1;\n  };\n  _proto.getOutputAmount = function getOutputAmount(inputAmount) {\n    !this.involvesToken(inputAmount.currency) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n    if (JSBI.equal(this.reserve0.quotient, ZERO) || JSBI.equal(this.reserve1.quotient, ZERO)) {\n      throw new InsufficientReservesError();\n    }\n    var inputReserve = this.reserveOf(inputAmount.currency);\n    var outputReserve = this.reserveOf(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0);\n    var inputAmountWithFee = JSBI.multiply(inputAmount.quotient, _997);\n    var numerator = JSBI.multiply(inputAmountWithFee, outputReserve.quotient);\n    var denominator = JSBI.add(JSBI.multiply(inputReserve.quotient, _1000), inputAmountWithFee);\n    var outputAmount = CurrencyAmount.fromRawAmount(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0, JSBI.divide(numerator, denominator));\n    if (JSBI.equal(outputAmount.quotient, ZERO)) {\n      throw new InsufficientInputAmountError();\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))];\n  };\n  _proto.getInputAmount = function getInputAmount(outputAmount) {\n    !this.involvesToken(outputAmount.currency) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n    if (JSBI.equal(this.reserve0.quotient, ZERO) || JSBI.equal(this.reserve1.quotient, ZERO) || JSBI.greaterThanOrEqual(outputAmount.quotient, this.reserveOf(outputAmount.currency).quotient)) {\n      throw new InsufficientReservesError();\n    }\n    var outputReserve = this.reserveOf(outputAmount.currency);\n    var inputReserve = this.reserveOf(outputAmount.currency.equals(this.token0) ? this.token1 : this.token0);\n    var numerator = JSBI.multiply(JSBI.multiply(inputReserve.quotient, outputAmount.quotient), _1000);\n    var denominator = JSBI.multiply(JSBI.subtract(outputReserve.quotient, outputAmount.quotient), _997);\n    var inputAmount = CurrencyAmount.fromRawAmount(outputAmount.currency.equals(this.token0) ? this.token1 : this.token0, JSBI.add(JSBI.divide(numerator, denominator), ONE));\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))];\n  };\n  _proto.getLiquidityMinted = function getLiquidityMinted(totalSupply, tokenAmountA, tokenAmountB) {\n    !totalSupply.currency.equals(this.liquidityToken) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'LIQUIDITY') : invariant(false) : void 0;\n    var tokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n    ? [tokenAmountA, tokenAmountB] : [tokenAmountB, tokenAmountA];\n    !(tokenAmounts[0].currency.equals(this.token0) && tokenAmounts[1].currency.equals(this.token1)) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n    var liquidity;\n    if (JSBI.equal(totalSupply.quotient, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].quotient, tokenAmounts[1].quotient)), MINIMUM_LIQUIDITY);\n    } else {\n      var amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].quotient, totalSupply.quotient), this.reserve0.quotient);\n      var amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].quotient, totalSupply.quotient), this.reserve1.quotient);\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1;\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError();\n    }\n    return CurrencyAmount.fromRawAmount(this.liquidityToken, liquidity);\n  };\n  _proto.getLiquidityValue = function getLiquidityValue(token, totalSupply, liquidity, feeOn, kLast) {\n    if (feeOn === void 0) {\n      feeOn = false;\n    }\n    !this.involvesToken(token) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n    !totalSupply.currency.equals(this.liquidityToken) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOTAL_SUPPLY') : invariant(false) : void 0;\n    !liquidity.currency.equals(this.liquidityToken) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'LIQUIDITY') : invariant(false) : void 0;\n    !JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'LIQUIDITY') : invariant(false) : void 0;\n    var totalSupplyAdjusted;\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply;\n    } else {\n      !!!kLast ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'K_LAST') : invariant(false) : void 0;\n      var kLastParsed = JSBI.BigInt(kLast);\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        var rootK = sqrt(JSBI.multiply(this.reserve0.quotient, this.reserve1.quotient));\n        var rootKLast = sqrt(kLastParsed);\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          var numerator = JSBI.multiply(totalSupply.quotient, JSBI.subtract(rootK, rootKLast));\n          var denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast);\n          var feeLiquidity = JSBI.divide(numerator, denominator);\n          totalSupplyAdjusted = totalSupply.add(CurrencyAmount.fromRawAmount(this.liquidityToken, feeLiquidity));\n        } else {\n          totalSupplyAdjusted = totalSupply;\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply;\n      }\n    }\n    return CurrencyAmount.fromRawAmount(token, JSBI.divide(JSBI.multiply(liquidity.quotient, this.reserveOf(token).quotient), totalSupplyAdjusted.quotient));\n  };\n  _createClass(Pair, [{\n    key: \"token0Price\",\n    get: function get() {\n      var result = this.tokenAmounts[1].divide(this.tokenAmounts[0]);\n      return new Price(this.token0, this.token1, result.denominator, result.numerator);\n    }\n    /**\r\n     * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\r\n     */\n  }, {\n    key: \"token1Price\",\n    get: function get() {\n      var result = this.tokenAmounts[0].divide(this.tokenAmounts[1]);\n      return new Price(this.token1, this.token0, result.denominator, result.numerator);\n    }\n  }, {\n    key: \"chainId\",\n    get: function get() {\n      return this.token0.chainId;\n    }\n  }, {\n    key: \"token0\",\n    get: function get() {\n      return this.tokenAmounts[0].currency;\n    }\n  }, {\n    key: \"token1\",\n    get: function get() {\n      return this.tokenAmounts[1].currency;\n    }\n  }, {\n    key: \"reserve0\",\n    get: function get() {\n      return this.tokenAmounts[0];\n    }\n  }, {\n    key: \"reserve1\",\n    get: function get() {\n      return this.tokenAmounts[1];\n    }\n  }]);\n  return Pair;\n}();\nvar Route = /*#__PURE__*/function () {\n  function Route(pairs, input, output) {\n    this._midPrice = null;\n    !(pairs.length > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'PAIRS') : invariant(false) : void 0;\n    var chainId = pairs[0].chainId;\n    !pairs.every(function (pair) {\n      return pair.chainId === chainId;\n    }) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'CHAIN_IDS') : invariant(false) : void 0;\n    var wrappedInput = input.wrapped;\n    !pairs[0].involvesToken(wrappedInput) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'INPUT') : invariant(false) : void 0;\n    !(typeof output === 'undefined' || pairs[pairs.length - 1].involvesToken(output.wrapped)) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'OUTPUT') : invariant(false) : void 0;\n    var path = [wrappedInput];\n    for (var _iterator = _createForOfIteratorHelperLoose(pairs.entries()), _step; !(_step = _iterator()).done;) {\n      var _step$value = _step.value,\n        i = _step$value[0],\n        pair = _step$value[1];\n      var currentInput = path[i];\n      !(currentInput.equals(pair.token0) || currentInput.equals(pair.token1)) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'PATH') : invariant(false) : void 0;\n      var _output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0;\n      path.push(_output);\n    }\n    this.pairs = pairs;\n    this.path = path;\n    this.input = input;\n    this.output = output;\n  }\n  _createClass(Route, [{\n    key: \"midPrice\",\n    get: function get() {\n      if (this._midPrice !== null) return this._midPrice;\n      var prices = [];\n      for (var _iterator2 = _createForOfIteratorHelperLoose(this.pairs.entries()), _step2; !(_step2 = _iterator2()).done;) {\n        var _step2$value = _step2.value,\n          i = _step2$value[0],\n          pair = _step2$value[1];\n        prices.push(this.path[i].equals(pair.token0) ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.quotient, pair.reserve1.quotient) : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.quotient, pair.reserve0.quotient));\n      }\n      var reduced = prices.slice(1).reduce(function (accumulator, currentValue) {\n        return accumulator.multiply(currentValue);\n      }, prices[0]);\n      return this._midPrice = new Price(this.input, this.output, reduced.denominator, reduced.numerator);\n    }\n  }, {\n    key: \"chainId\",\n    get: function get() {\n      return this.pairs[0].chainId;\n    }\n  }]);\n  return Route;\n}();\n\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\n\nfunction inputOutputComparator(a, b) {\n  // must have same input and output token for comparison\n  !a.inputAmount.currency.equals(b.inputAmount.currency) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'INPUT_CURRENCY') : invariant(false) : void 0;\n  !a.outputAmount.currency.equals(b.outputAmount.currency) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'OUTPUT_CURRENCY') : invariant(false) : void 0;\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0;\n    } // trade A requires less input than trade B, so A should come first\n\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1;\n    } else {\n      return 1;\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1;\n    } else {\n      return -1;\n    }\n  }\n} // extension of the input output comparator that also considers other dimensions of the trade in ranking them\n\nfunction tradeComparator(a, b) {\n  var ioComp = inputOutputComparator(a, b);\n  if (ioComp !== 0) {\n    return ioComp;\n  } // consider lowest slippage next, since these are less likely to fail\n\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1;\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1;\n  } // finally consider the number of hops since each hop costs gas\n\n  return a.route.path.length - b.route.path.length;\n}\n/**\r\n * Represents a trade executed against a list of pairs.\r\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\r\n */\n\nvar Trade = /*#__PURE__*/function () {\n  function Trade(route, amount, tradeType) {\n    this.route = route;\n    this.tradeType = tradeType;\n    var tokenAmounts = new Array(route.path.length);\n    if (tradeType === TradeType.EXACT_INPUT) {\n      !amount.currency.equals(route.input) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'INPUT') : invariant(false) : void 0;\n      tokenAmounts[0] = amount.wrapped;\n      for (var i = 0; i < route.path.length - 1; i++) {\n        var pair = route.pairs[i];\n        var _pair$getOutputAmount = pair.getOutputAmount(tokenAmounts[i]),\n          outputAmount = _pair$getOutputAmount[0];\n        tokenAmounts[i + 1] = outputAmount;\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator);\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(route.output, tokenAmounts[tokenAmounts.length - 1].numerator, tokenAmounts[tokenAmounts.length - 1].denominator);\n    } else {\n      !amount.currency.equals(route.output) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'OUTPUT') : invariant(false) : void 0;\n      tokenAmounts[tokenAmounts.length - 1] = amount.wrapped;\n      for (var _i = route.path.length - 1; _i > 0; _i--) {\n        var _pair = route.pairs[_i - 1];\n        var _pair$getInputAmount = _pair.getInputAmount(tokenAmounts[_i]),\n          inputAmount = _pair$getInputAmount[0];\n        tokenAmounts[_i - 1] = inputAmount;\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(route.input, tokenAmounts[0].numerator, tokenAmounts[0].denominator);\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(route.output, amount.numerator, amount.denominator);\n    }\n    this.executionPrice = new Price(this.inputAmount.currency, this.outputAmount.currency, this.inputAmount.quotient, this.outputAmount.quotient);\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount);\n  }\n  /**\r\n   * Constructs an exact in trade with the given amount in and route\r\n   * @param route route of the exact in trade\r\n   * @param amountIn the amount being passed in\r\n   */\n\n  Trade.exactIn = function exactIn(route, amountIn) {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT);\n  }\n  /**\r\n   * Constructs an exact out trade with the given amount out and route\r\n   * @param route route of the exact out trade\r\n   * @param amountOut the amount returned by the trade\r\n   */;\n\n  Trade.exactOut = function exactOut(route, amountOut) {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT);\n  }\n  /**\r\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\r\n   */;\n\n  var _proto = Trade.prototype;\n  _proto.minimumAmountOut = function minimumAmountOut(slippageTolerance) {\n    !!slippageTolerance.lessThan(ZERO) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'SLIPPAGE_TOLERANCE') : invariant(false) : void 0;\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount;\n    } else {\n      var slippageAdjustedAmountOut = new Fraction(ONE).add(slippageTolerance).invert().multiply(this.outputAmount.quotient).quotient;\n      return CurrencyAmount.fromRawAmount(this.outputAmount.currency, slippageAdjustedAmountOut);\n    }\n  }\n  /**\r\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\r\n   */;\n\n  _proto.maximumAmountIn = function maximumAmountIn(slippageTolerance) {\n    !!slippageTolerance.lessThan(ZERO) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'SLIPPAGE_TOLERANCE') : invariant(false) : void 0;\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount;\n    } else {\n      var slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.quotient).quotient;\n      return CurrencyAmount.fromRawAmount(this.inputAmount.currency, slippageAdjustedAmountIn);\n    }\n  }\n  /**\r\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\r\n   * amount to an output token, making at most `maxHops` hops.\r\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pairs the pairs to consider in finding the best trade\r\n   * @param nextAmountIn exact amount of input currency to spend\r\n   * @param currencyOut the desired currency out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\r\n   * @param currentPairs used in recursion; the current list of pairs\r\n   * @param currencyAmountIn used in recursion; the original value of the currencyAmountIn parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   */;\n\n  Trade.bestTradeExactIn = function bestTradeExactIn(pairs, currencyAmountIn, currencyOut, _temp,\n  // used in recursion.\n  currentPairs, nextAmountIn, bestTrades) {\n    var _ref = _temp === void 0 ? {} : _temp,\n      _ref$maxNumResults = _ref.maxNumResults,\n      maxNumResults = _ref$maxNumResults === void 0 ? 3 : _ref$maxNumResults,\n      _ref$maxHops = _ref.maxHops,\n      maxHops = _ref$maxHops === void 0 ? 3 : _ref$maxHops;\n    if (currentPairs === void 0) {\n      currentPairs = [];\n    }\n    if (nextAmountIn === void 0) {\n      nextAmountIn = currencyAmountIn;\n    }\n    if (bestTrades === void 0) {\n      bestTrades = [];\n    }\n    !(pairs.length > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'PAIRS') : invariant(false) : void 0;\n    !(maxHops > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'MAX_HOPS') : invariant(false) : void 0;\n    !(currencyAmountIn === nextAmountIn || currentPairs.length > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'INVALID_RECURSION') : invariant(false) : void 0;\n    var amountIn = nextAmountIn.wrapped;\n    var tokenOut = currencyOut.wrapped;\n    for (var i = 0; i < pairs.length; i++) {\n      var pair = pairs[i]; // pair irrelevant\n\n      if (!pair.token0.equals(amountIn.currency) && !pair.token1.equals(amountIn.currency)) continue;\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue;\n      var amountOut = void 0;\n      try {\n        ;\n        var _pair$getOutputAmount2 = pair.getOutputAmount(amountIn);\n        amountOut = _pair$getOutputAmount2[0];\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue;\n        }\n        throw error;\n      } // we have arrived at the output token, so this is the final trade of one of the paths\n\n      if (amountOut.currency.equals(tokenOut)) {\n        sortedInsert(bestTrades, new Trade(new Route([].concat(currentPairs, [pair]), currencyAmountIn.currency, currencyOut), currencyAmountIn, TradeType.EXACT_INPUT), maxNumResults, tradeComparator);\n      } else if (maxHops > 1 && pairs.length > 1) {\n        var pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length)); // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n\n        Trade.bestTradeExactIn(pairsExcludingThisPair, currencyAmountIn, currencyOut, {\n          maxNumResults: maxNumResults,\n          maxHops: maxHops - 1\n        }, [].concat(currentPairs, [pair]), amountOut, bestTrades);\n      }\n    }\n    return bestTrades;\n  }\n  /**\r\n   * Return the execution price after accounting for slippage tolerance\r\n   * @param slippageTolerance the allowed tolerated slippage\r\n   */;\n\n  _proto.worstExecutionPrice = function worstExecutionPrice(slippageTolerance) {\n    return new Price(this.inputAmount.currency, this.outputAmount.currency, this.maximumAmountIn(slippageTolerance).quotient, this.minimumAmountOut(slippageTolerance).quotient);\n  }\n  /**\r\n   * similar to the above method but instead targets a fixed output amount\r\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\r\n   * to an output token amount, making at most `maxHops` hops\r\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pairs the pairs to consider in finding the best trade\r\n   * @param currencyIn the currency to spend\r\n   * @param nextAmountOut the exact amount of currency out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\r\n   * @param currentPairs used in recursion; the current list of pairs\r\n   * @param currencyAmountOut used in recursion; the original value of the currencyAmountOut parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   */;\n\n  Trade.bestTradeExactOut = function bestTradeExactOut(pairs, currencyIn, currencyAmountOut, _temp2,\n  // used in recursion.\n  currentPairs, nextAmountOut, bestTrades) {\n    var _ref2 = _temp2 === void 0 ? {} : _temp2,\n      _ref2$maxNumResults = _ref2.maxNumResults,\n      maxNumResults = _ref2$maxNumResults === void 0 ? 3 : _ref2$maxNumResults,\n      _ref2$maxHops = _ref2.maxHops,\n      maxHops = _ref2$maxHops === void 0 ? 3 : _ref2$maxHops;\n    if (currentPairs === void 0) {\n      currentPairs = [];\n    }\n    if (nextAmountOut === void 0) {\n      nextAmountOut = currencyAmountOut;\n    }\n    if (bestTrades === void 0) {\n      bestTrades = [];\n    }\n    !(pairs.length > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'PAIRS') : invariant(false) : void 0;\n    !(maxHops > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'MAX_HOPS') : invariant(false) : void 0;\n    !(currencyAmountOut === nextAmountOut || currentPairs.length > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'INVALID_RECURSION') : invariant(false) : void 0;\n    var amountOut = nextAmountOut.wrapped;\n    var tokenIn = currencyIn.wrapped;\n    for (var i = 0; i < pairs.length; i++) {\n      var pair = pairs[i]; // pair irrelevant\n\n      if (!pair.token0.equals(amountOut.currency) && !pair.token1.equals(amountOut.currency)) continue;\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue;\n      var amountIn = void 0;\n      try {\n        ;\n        var _pair$getInputAmount2 = pair.getInputAmount(amountOut);\n        amountIn = _pair$getInputAmount2[0];\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue;\n        }\n        throw error;\n      } // we have arrived at the input token, so this is the first trade of one of the paths\n\n      if (amountIn.currency.equals(tokenIn)) {\n        sortedInsert(bestTrades, new Trade(new Route([pair].concat(currentPairs), currencyIn, currencyAmountOut.currency), currencyAmountOut, TradeType.EXACT_OUTPUT), maxNumResults, tradeComparator);\n      } else if (maxHops > 1 && pairs.length > 1) {\n        var pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length)); // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n\n        Trade.bestTradeExactOut(pairsExcludingThisPair, currencyIn, currencyAmountOut, {\n          maxNumResults: maxNumResults,\n          maxHops: maxHops - 1\n        }, [pair].concat(currentPairs), amountIn, bestTrades);\n      }\n    }\n    return bestTrades;\n  };\n  return Trade;\n}();\nfunction toHex(currencyAmount) {\n  return \"0x\" + currencyAmount.quotient.toString(16);\n}\nvar ZERO_HEX = '0x0';\n/**\r\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\r\n */\n\nvar Router = /*#__PURE__*/function () {\n  /**\r\n   * Cannot be constructed.\r\n   */\n  function Router() {}\n  /**\r\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\r\n   * @param trade to produce call parameters for\r\n   * @param options options for the call parameters\r\n   */\n\n  Router.swapCallParameters = function swapCallParameters(trade, options) {\n    var etherIn = trade.inputAmount.currency.isNative;\n    var etherOut = trade.outputAmount.currency.isNative; // the router does not support both ether in and out\n\n    !!(etherIn && etherOut) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'ETHER_IN_OUT') : invariant(false) : void 0;\n    !(!('ttl' in options) || options.ttl > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TTL') : invariant(false) : void 0;\n    var to = validateAndParseAddress(options.recipient);\n    var amountIn = toHex(trade.maximumAmountIn(options.allowedSlippage));\n    var amountOut = toHex(trade.minimumAmountOut(options.allowedSlippage));\n    var path = trade.route.path.map(function (token) {\n      return token.address;\n    });\n    var deadline = 'ttl' in options ? \"0x\" + (Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16) : \"0x\" + options.deadline.toString(16);\n    var useFeeOnTransfer = Boolean(options.feeOnTransfer);\n    var methodName;\n    var args;\n    var value;\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'; // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n\n          args = [amountOut, path, to, deadline];\n          value = amountIn;\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'; // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n\n          args = [amountIn, amountOut, path, to, deadline];\n          value = ZERO_HEX;\n        } else {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens' : 'swapExactTokensForTokens'; // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n\n          args = [amountIn, amountOut, path, to, deadline];\n          value = ZERO_HEX;\n        }\n        break;\n      case TradeType.EXACT_OUTPUT:\n        !!useFeeOnTransfer ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'EXACT_OUT_FOT') : invariant(false) : void 0;\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'; // (uint amountOut, address[] calldata path, address to, uint deadline)\n\n          args = [amountOut, path, to, deadline];\n          value = amountIn;\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'; // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n\n          args = [amountOut, amountIn, path, to, deadline];\n          value = ZERO_HEX;\n        } else {\n          methodName = 'swapTokensForExactTokens'; // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n\n          args = [amountOut, amountIn, path, to, deadline];\n          value = ZERO_HEX;\n        }\n        break;\n    }\n    return {\n      methodName: methodName,\n      args: args,\n      value: value\n    };\n  };\n  return Router;\n}();\nexport { FACTORY_ADDRESS, INIT_CODE_HASH, InsufficientInputAmountError, InsufficientReservesError, MINIMUM_LIQUIDITY, Pair, Route, Router, Trade, computePairAddress, inputOutputComparator, tradeComparator };","map":{"version":3,"sources":["../src/constants.ts","../src/errors.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/trade.ts","../src/router.ts"],"names":["FACTORY_ADDRESS","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","FIVE","_997","_1000","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","Error","name","constructor","setPrototypeOf","prototype","InsufficientInputAmountError","computePairAddress","factoryAddress","tokenA","tokenB","token0","token1","sortsBefore","getCreate2Address","keccak256","pack","address","Pair","getAddress","currencyAmountA","tokenAmountB","tokenAmounts","currency","liquidityToken","Token","chainId","involvesToken","token","equals","result","divide","Price","denominator","numerator","priceOf","token0Price","token1Price","reserveOf","reserve0","reserve1","getOutputAmount","inputAmount","equal","quotient","inputReserve","outputReserve","inputAmountWithFee","multiply","add","outputAmount","CurrencyAmount","fromRawAmount","subtract","getInputAmount","greaterThanOrEqual","getLiquidityMinted","totalSupply","tokenAmountA","liquidity","sqrt","amount0","amount1","lessThanOrEqual","greaterThan","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","pairs","input","output","length","every","pair","wrappedInput","wrapped","path","i","entries","currentInput","push","_midPrice","prices","reduced","slice","reduce","accumulator","currentValue","inputOutputComparator","a","b","equalTo","lessThan","tradeComparator","ioComp","priceImpact","route","Trade","exactIn","amountIn","TradeType","EXACT_INPUT","exactOut","amountOut","EXACT_OUTPUT","amount","tradeType","Array","fromFractionalAmount","executionPrice","computePriceImpact","midPrice","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","Fraction","invert","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","maxNumResults","maxHops","currentPairs","nextAmountIn","bestTrades","tokenOut","error","isInsufficientInputAmountError","sortedInsert","pairsExcludingThisPair","concat","worstExecutionPrice","bestTradeExactOut","currencyIn","currencyAmountOut","nextAmountOut","tokenIn","isInsufficientReservesError","toHex","currencyAmount","toString","ZERO_HEX","Router","swapCallParameters","trade","options","etherIn","isNative","etherOut","ttl","to","validateAndParseAddress","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","methodName","args","value"],"mappings":";;;;;IAEaA,eAAe,GAAG,4CAAA;IAElBC,cAAc,GAAG,oEAAA;IAEjBC,iBAAiB,GAAA,aAAGC,IAAI,CAACC,MAALD,CAAY,IAAZA,CAAAA,CAAAA,CAAAA;;AAG1B,IAAME,IAAI,GAAA,aAAGF,IAAI,CAACC,MAALD,CAAY,CAAZA,CAAb;AACA,IAAMG,GAAG,GAAA,aAAGH,IAAI,CAACC,MAALD,CAAY,CAAZA,CAAZ;AACA,IAAMI,IAAI,GAAA,aAAGJ,IAAI,CAACC,MAALD,CAAY,CAAZA,CAAb;AACA,IAAMK,IAAI,GAAA,aAAGL,IAAI,CAACC,MAALD,CAAY,GAAZA,CAAb;AACA,IAAMM,KAAK,GAAA,aAAGN,IAAI,CAACC,MAALD,CAAY,IAAZA,CAAd;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACbP;AACA,IAAMO,iBAAiB,IAAG,gBAAA,IAAoBC,MAAvB,CAAvB;AAEA;;;;;AAIA,IAAaC,yBAAb,GAAA,aAAA,UAAA,MAAA,EAAA;EAAA,cAAA,CAAA,yBAAA,EAAA,MAAA,CAAA;EAGE,SAAA,yBAAA,GAAA;;IACE,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,CAAA,IAAA,IAAA;IAHc,KAAA,CAAA,2BAAA,GAAoC,IAApC;IAId,KAAA,CAAKE,IAAL,GAAY,KAAA,CAAKC,WAAL,CAAiBD,IAA7B;IACA,IAAIJ,iBAAJ,EAAuBC,MAAM,CAACK,cAAPL,CAAAA,sBAAAA,CAAAA,KAAAA,CAAAA,EAA4B,CAAA,IAAA,YAAA,yBAAA,GAAA,IAAA,CAAA,WAAA,GAAA,KAAA,CAAA,EAAWM,SAAvCN,CAAAA;;EACxB;EAPH,OAAA,yBAAA;AAAA,CAAA,EAAA,aAAA,gBAAA,CAA+CE,KAA/C,CAAA,CAAA;AAUA;;;;;AAIA,IAAaK,4BAAb,GAAA,aAAA,UAAA,OAAA,EAAA;EAAA,cAAA,CAAA,4BAAA,EAAA,OAAA,CAAA;EAGE,SAAA,4BAAA,GAAA;;IACE,MAAA,GAAA,OAAA,CAAA,IAAA,CAAA,IAAA,CAAA,IAAA,IAAA;IAHc,MAAA,CAAA,8BAAA,GAAuC,IAAvC;IAId,MAAA,CAAKJ,IAAL,GAAY,MAAA,CAAKC,WAAL,CAAiBD,IAA7B;IACA,IAAIJ,iBAAJ,EAAuBC,MAAM,CAACK,cAAPL,CAAAA,sBAAAA,CAAAA,MAAAA,CAAAA,EAA4B,CAAA,IAAA,YAAA,4BAAA,GAAA,IAAA,CAAA,WAAA,GAAA,KAAA,CAAA,EAAWM,SAAvCN,CAAAA;;EACxB;EAPH,OAAA,4BAAA;AAAA,CAAA,EAAA,aAAA,gBAAA,CAAkDE,KAAlD,CAAA,CAAA;ICZaM,kBAAkB,GAAG,SAArBA,kBAAqB,CAAA,IAAA,EAAA;MAChCC,cAAAA,GAAAA,IAAAA,CAAAA,cAAAA;IACAC,MAAAA,GAAAA,IAAAA,CAAAA,MAAAA;IACAC,MAAAA,GAAAA,IAAAA,CAAAA,MAAAA;cAMyBD,MAAM,CAACI,WAAPJ,CAAmBC,MAAnBD,CAAAA,GAA6B,CAACA,MAAD,EAASC,MAAT,CAA7BD,GAAgD,CAACC,MAAD,EAASD,MAAT,CAAA;IAAlEE,MAAAA,GAAAA,KAAAA,CAAAA,CAAAA,CAAAA;IAAQC,MAAAA,GAAAA,KAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA;;EACf,OAAOE,iBAAiB,CACtBN,cADsB,EAEtBO,SAAS,CAAC,CAAC,OAAD,CAAD,EAAY,CAACC,IAAI,CAAC,CAAC,SAAD,EAAY,SAAZ,CAAD,EAAyB,CAACL,MAAM,CAACM,OAAR,EAAiBL,MAAM,CAACK,OAAxB,CAAzB,CAAL,CAAZ,CAFa,EAGtB5B,cAHsB,CAAxB;AAKD,CAfM;AAgBP,IAAa6B,IAAb,GAAA,aAAA,YAAA;EAQE,SAAA,IAAA,CAAmBE,eAAnB,EAA2DC,YAA3D,EAAA;IACE,IAAMC,YAAY,GAAG,eAAe,CAACC,QAAhB,CAAyBV,WAAzB,CAAqCQ,YAAY,CAACE,QAAlD,CAAA,CAAA;IAAA,EACjB,CAACH,eAAD,EAAkBC,YAAlB,CADiB,GAEjB,CAACA,YAAD,EAAeD,eAAf,CAFJ;IAGA,IAAA,CAAKI,cAAL,GAAsB,IAAIC,KAAJ,CACpBH,YAAY,CAAC,CAAD,CAAZA,CAAgBC,QAAhBD,CAAyBI,OADL,EAEpBR,IAAI,CAACC,UAALD,CAAgBI,YAAY,CAAC,CAAD,CAAZA,CAAgBC,QAAhCL,EAA0CI,YAAY,CAAC,CAAD,CAAZA,CAAgBC,QAA1DL,CAFoB,EAGpB,EAHoB,EAIpB,QAJoB,EAKpB,YALoB,CAAtB;IAOA,IAAA,CAAKI,YAAL,GAAoBA,YAApB;EACD;EApBH,IAAA,CAIgBH,UAJhB,GAIS,SAAA,UAAA,CAAkBV,MAAlB,EAAiCC,MAAjC,EAAA;IACL,OAAOH,kBAAkB,CAAC;MAAEC,cAAc,EAAEpB,eAAlB;MAAmCqB,MAAM,EAANA,MAAnC;MAA2CC,MAAM,EAANA;IAA3C,CAAD,CAAzB;EACD;EAgBD;;;KAAA;;EAtBF,IAAA,MAAA,GAAA,IAAA,CAAA,SAAA;EAAA,MAAA,CA0BSiB,aA1BT,GA0BSA,SAAAA,aAAAA,CAAcC,KAAdD,EAAAA;IACL,OAAOC,KAAK,CAACC,MAAND,CAAa,IAAA,CAAKjB,MAAlBiB,CAAAA,IAA6BA,KAAK,CAACC,MAAND,CAAa,IAAA,CAAKhB,MAAlBgB,CAApC;EACD;EAED;;KAAA;;EAgBA;;;;EA9CF,MAAA,CAkDSO,OAlDT,GAkDSA,SAAAA,OAAAA,CAAQP,KAARO,EAAAA;IACL,CAAU,IAAA,CAAKR,aAAL,CAAmBC,KAAnB,CAAV,GAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,GAAA,SAAS,CAAA,KAAA,EAA4B,OAA5B,CAAT,GAAA,SAAS,CAAA,KAAA,CAAT,GAAA,KAAA,CAAA;IACA,OAAOA,KAAK,CAACC,MAAND,CAAa,IAAA,CAAKjB,MAAlBiB,CAAAA,GAA4B,IAAA,CAAKQ,WAAjCR,GAA+C,IAAA,CAAKS,WAA3D;EACD;EAED;;KAAA;;EAvDF,MAAA,CA8ESC,SA9ET,GA8ESA,SAAAA,SAAAA,CAAUV,KAAVU,EAAAA;IACL,CAAU,IAAA,CAAKX,aAAL,CAAmBC,KAAnB,CAAV,GAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,GAAA,SAAS,CAAA,KAAA,EAA4B,OAA5B,CAAT,GAAA,SAAS,CAAA,KAAA,CAAT,GAAA,KAAA,CAAA;IACA,OAAOA,KAAK,CAACC,MAAND,CAAa,IAAA,CAAKjB,MAAlBiB,CAAAA,GAA4B,IAAA,CAAKW,QAAjCX,GAA4C,IAAA,CAAKY,QAAxD;EACD,CAjFH;EAAA,MAAA,CAmFSC,eAnFT,GAmFSA,SAAAA,eAAAA,CAAgBC,WAAhBD,EAAAA;IACL,CAAU,IAAA,CAAKd,aAAL,CAAmBe,WAAW,CAACnB,QAA/B,CAAV,GAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,GAAA,SAAS,CAAA,KAAA,EAA2C,OAA3C,CAAT,GAAA,SAAS,CAAA,KAAA,CAAT,GAAA,KAAA,CAAA;IACA,IAAIhC,IAAI,CAACoD,KAALpD,CAAW,IAAA,CAAKgD,QAAL,CAAcK,QAAzBrD,EAAmCE,IAAnCF,CAAAA,IAA4CA,IAAI,CAACoD,KAALpD,CAAW,IAAA,CAAKiD,QAAL,CAAcI,QAAzBrD,EAAmCE,IAAnCF,CAAhD,EAA0F;MACxF,MAAM,IAAIS,yBAAJ,EAAN;IACD;IACD,IAAM6C,YAAY,GAAG,IAAA,CAAKP,SAAL,CAAeI,WAAW,CAACnB,QAA3B,CAArB;IACA,IAAMuB,aAAa,GAAG,IAAA,CAAKR,SAAL,CAAeI,WAAW,CAACnB,QAAZmB,CAAqBb,MAArBa,CAA4B,IAAA,CAAK/B,MAAjC+B,CAAAA,GAA2C,IAAA,CAAK9B,MAAhD8B,GAAyD,IAAA,CAAK/B,MAA7E,CAAtB;IACA,IAAMoC,kBAAkB,GAAGxD,IAAI,CAACyD,QAALzD,CAAcmD,WAAW,CAACE,QAA1BrD,EAAoCK,IAApCL,CAA3B;IACA,IAAM2C,SAAS,GAAG3C,IAAI,CAACyD,QAALzD,CAAcwD,kBAAdxD,EAAkCuD,aAAa,CAACF,QAAhDrD,CAAlB;IACA,IAAM0C,WAAW,GAAG1C,IAAI,CAAC0D,GAAL1D,CAASA,IAAI,CAACyD,QAALzD,CAAcsD,YAAY,CAACD,QAA3BrD,EAAqCM,KAArCN,CAATA,EAAsDwD,kBAAtDxD,CAApB;IACA,IAAM2D,YAAY,GAAGC,cAAc,CAACC,aAAfD,CACnBT,WAAW,CAACnB,QAAZmB,CAAqBb,MAArBa,CAA4B,IAAA,CAAK/B,MAAjC+B,CAAAA,GAA2C,IAAA,CAAK9B,MAAhD8B,GAAyD,IAAA,CAAK/B,MAD3CwC,EAEnB5D,IAAI,CAACwC,MAALxC,CAAY2C,SAAZ3C,EAAuB0C,WAAvB1C,CAFmB4D,CAArB;IAIA,IAAI5D,IAAI,CAACoD,KAALpD,CAAW2D,YAAY,CAACN,QAAxBrD,EAAkCE,IAAlCF,CAAJ,EAA6C;MAC3C,MAAM,IAAIe,4BAAJ,EAAN;IACD;IACD,OAAO,CAAC4C,YAAD,EAAe,IAAIhC,IAAJ,CAAS2B,YAAY,CAACI,GAAbJ,CAAiBH,WAAjBG,CAAT,EAAwCC,aAAa,CAACO,QAAdP,CAAuBI,YAAvBJ,CAAxC,CAAf,CAAP;EACD,CArGH;EAAA,MAAA,CAuGSQ,cAvGT,GAuGSA,SAAAA,cAAAA,CAAeJ,YAAfI,EAAAA;IACL,CAAU,IAAA,CAAK3B,aAAL,CAAmBuB,YAAY,CAAC3B,QAAhC,CAAV,GAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,GAAA,SAAS,CAAA,KAAA,EAA4C,OAA5C,CAAT,GAAA,SAAS,CAAA,KAAA,CAAT,GAAA,KAAA,CAAA;IACA,IACEhC,IAAI,CAACoD,KAALpD,CAAW,IAAA,CAAKgD,QAAL,CAAcK,QAAzBrD,EAAmCE,IAAnCF,CAAAA,IACAA,IAAI,CAACoD,KAALpD,CAAW,IAAA,CAAKiD,QAAL,CAAcI,QAAzBrD,EAAmCE,IAAnCF,CADAA,IAEAA,IAAI,CAACgE,kBAALhE,CAAwB2D,YAAY,CAACN,QAArCrD,EAA+C,IAAA,CAAK+C,SAAL,CAAeY,YAAY,CAAC3B,QAA5B,CAAA,CAAsCqB,QAArFrD,CAHF,EAIE;MACA,MAAM,IAAIS,yBAAJ,EAAN;IACD;IAED,IAAM8C,aAAa,GAAG,IAAA,CAAKR,SAAL,CAAeY,YAAY,CAAC3B,QAA5B,CAAtB;IACA,IAAMsB,YAAY,GAAG,IAAA,CAAKP,SAAL,CAAeY,YAAY,CAAC3B,QAAb2B,CAAsBrB,MAAtBqB,CAA6B,IAAA,CAAKvC,MAAlCuC,CAAAA,GAA4C,IAAA,CAAKtC,MAAjDsC,GAA0D,IAAA,CAAKvC,MAA9E,CAArB;IACA,IAAMuB,SAAS,GAAG3C,IAAI,CAACyD,QAALzD,CAAcA,IAAI,CAACyD,QAALzD,CAAcsD,YAAY,CAACD,QAA3BrD,EAAqC2D,YAAY,CAACN,QAAlDrD,CAAdA,EAA2EM,KAA3EN,CAAlB;IACA,IAAM0C,WAAW,GAAG1C,IAAI,CAACyD,QAALzD,CAAcA,IAAI,CAAC8D,QAAL9D,CAAcuD,aAAa,CAACF,QAA5BrD,EAAsC2D,YAAY,CAACN,QAAnDrD,CAAdA,EAA4EK,IAA5EL,CAApB;IACA,IAAMmD,WAAW,GAAGS,cAAc,CAACC,aAAfD,CAClBD,YAAY,CAAC3B,QAAb2B,CAAsBrB,MAAtBqB,CAA6B,IAAA,CAAKvC,MAAlCuC,CAAAA,GAA4C,IAAA,CAAKtC,MAAjDsC,GAA0D,IAAA,CAAKvC,MAD7CwC,EAElB5D,IAAI,CAAC0D,GAAL1D,CAASA,IAAI,CAACwC,MAALxC,CAAY2C,SAAZ3C,EAAuB0C,WAAvB1C,CAATA,EAA8CG,GAA9CH,CAFkB4D,CAApB;IAIA,OAAO,CAACT,WAAD,EAAc,IAAIxB,IAAJ,CAAS2B,YAAY,CAACI,GAAbJ,CAAiBH,WAAjBG,CAAT,EAAwCC,aAAa,CAACO,QAAdP,CAAuBI,YAAvBJ,CAAxC,CAAd,CAAP;EACD,CA1HH;EAAA,MAAA,CA4HSU,kBA5HT,GA4HSA,SAAAA,kBAAAA,CACLC,WADKD,EAELE,YAFKF,EAGLnC,YAHKmC,EAAAA;IAKL,CAAUC,WAAW,CAAClC,QAAZkC,CAAqB5B,MAArB4B,CAA4B,IAAA,CAAKjC,cAAjCiC,CAAV,GAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,GAAA,SAAS,CAAA,KAAA,EAAmD,WAAnD,CAAT,GAAA,SAAS,CAAA,KAAA,CAAT,GAAA,KAAA,CAAA;IACA,IAAMnC,YAAY,GAAG,YAAY,CAACC,QAAb,CAAsBV,WAAtB,CAAkCQ,YAAY,CAACE,QAA/C,CAAA,CAAA;IAAA,EACjB,CAACmC,YAAD,EAAerC,YAAf,CADiB,GAEjB,CAACA,YAAD,EAAeqC,YAAf,CAFJ;IAGA,EAAUpC,YAAY,CAAC,CAAD,CAAZA,CAAgBC,QAAhBD,CAAyBO,MAAzBP,CAAgC,IAAA,CAAKX,MAArCW,CAAAA,IAAgDA,YAAY,CAAC,CAAD,CAAZA,CAAgBC,QAAhBD,CAAyBO,MAAzBP,CAAgC,IAAA,CAAKV,MAArCU,CAA1D,CAAA,GAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,GAAA,SAAS,CAAA,KAAA,EAA+F,OAA/F,CAAT,GAAA,SAAS,CAAA,KAAA,CAAT,GAAA,KAAA,CAAA;IAEA,IAAIqC,SAAJ;IACA,IAAIpE,IAAI,CAACoD,KAALpD,CAAWkE,WAAW,CAACb,QAAvBrD,EAAiCE,IAAjCF,CAAJ,EAA4C;MAC1CoE,SAAS,GAAGpE,IAAI,CAAC8D,QAAL9D,CACVqE,IAAI,CAACrE,IAAI,CAACyD,QAALzD,CAAc+B,YAAY,CAAC,CAAD,CAAZA,CAAgBsB,QAA9BrD,EAAwC+B,YAAY,CAAC,CAAD,CAAZA,CAAgBsB,QAAxDrD,CAAD,CADMA,EAEVD,iBAFUC,CAAZoE;IAID,CALD,MAKO;MACL,IAAME,OAAO,GAAGtE,IAAI,CAACwC,MAALxC,CAAYA,IAAI,CAACyD,QAALzD,CAAc+B,YAAY,CAAC,CAAD,CAAZA,CAAgBsB,QAA9BrD,EAAwCkE,WAAW,CAACb,QAApDrD,CAAZA,EAA2E,IAAA,CAAKgD,QAAL,CAAcK,QAAzFrD,CAAhB;MACA,IAAMuE,OAAO,GAAGvE,IAAI,CAACwC,MAALxC,CAAYA,IAAI,CAACyD,QAALzD,CAAc+B,YAAY,CAAC,CAAD,CAAZA,CAAgBsB,QAA9BrD,EAAwCkE,WAAW,CAACb,QAApDrD,CAAZA,EAA2E,IAAA,CAAKiD,QAAL,CAAcI,QAAzFrD,CAAhB;MACAoE,SAAS,GAAGpE,IAAI,CAACwE,eAALxE,CAAqBsE,OAArBtE,EAA8BuE,OAA9BvE,CAAAA,GAAyCsE,OAAzCtE,GAAmDuE,OAA/DH;IACD;IACD,IAAI,CAACpE,IAAI,CAACyE,WAALzE,CAAiBoE,SAAjBpE,EAA4BE,IAA5BF,CAAL,EAAwC;MACtC,MAAM,IAAIe,4BAAJ,EAAN;IACD;IACD,OAAO6C,cAAc,CAACC,aAAfD,CAA6B,IAAA,CAAK3B,cAAlC2B,EAAkDQ,SAAlDR,CAAP;EACD,CAtJH;EAAA,MAAA,CAwJSc,iBAxJT,GAwJSA,SAAAA,iBAAAA,CACLrC,KADKqC,EAELR,WAFKQ,EAGLN,SAHKM,EAILC,KAJKD,EAKLE,KALKF,EAAAA;QAILC,KAAAA,KAAAA,KAAAA,CAAAA,EAAAA;MAAAA,KAAAA,GAAiB,KAAA;;IAGjB,CAAU,IAAA,CAAKvC,aAAL,CAAmBC,KAAnB,CAAV,GAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,GAAA,SAAS,CAAA,KAAA,EAA4B,OAA5B,CAAT,GAAA,SAAS,CAAA,KAAA,CAAT,GAAA,KAAA,CAAA;IACA,CAAU6B,WAAW,CAAClC,QAAZkC,CAAqB5B,MAArB4B,CAA4B,IAAA,CAAKjC,cAAjCiC,CAAV,GAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,GAAA,SAAS,CAAA,KAAA,EAAmD,cAAnD,CAAT,GAAA,SAAS,CAAA,KAAA,CAAT,GAAA,KAAA,CAAA;IACA,CAAUE,SAAS,CAACpC,QAAVoC,CAAmB9B,MAAnB8B,CAA0B,IAAA,CAAKnC,cAA/BmC,CAAV,GAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,GAAA,SAAS,CAAA,KAAA,EAAiD,WAAjD,CAAT,GAAA,SAAS,CAAA,KAAA,CAAT,GAAA,KAAA,CAAA;IACA,CAAUpE,IAAI,CAACwE,eAALxE,CAAqBoE,SAAS,CAACf,QAA/BrD,EAAyCkE,WAAW,CAACb,QAArDrD,CAAV,GAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,GAAA,SAAS,CAAA,KAAA,EAAiE,WAAjE,CAAT,GAAA,SAAS,CAAA,KAAA,CAAT,GAAA,KAAA,CAAA;IAEA,IAAI6E,mBAAJ;IACA,IAAI,CAACF,KAAL,EAAY;MACVE,mBAAmB,GAAGX,WAAtBW;IACD,CAFD,MAEO;MACL,CAAU,CAAC,CAACD,KAAZ,GAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,GAAA,SAAS,CAAA,KAAA,EAAU,QAAV,CAAT,GAAA,SAAS,CAAA,KAAA,CAAT,GAAA,KAAA,CAAA;MACA,IAAME,WAAW,GAAG9E,IAAI,CAACC,MAALD,CAAY4E,KAAZ5E,CAApB;MACA,IAAI,CAACA,IAAI,CAACoD,KAALpD,CAAW8E,WAAX9E,EAAwBE,IAAxBF,CAAL,EAAoC;QAClC,IAAM+E,KAAK,GAAGV,IAAI,CAACrE,IAAI,CAACyD,QAALzD,CAAc,IAAA,CAAKgD,QAAL,CAAcK,QAA5BrD,EAAsC,IAAA,CAAKiD,QAAL,CAAcI,QAApDrD,CAAD,CAAlB;QACA,IAAMgF,SAAS,GAAGX,IAAI,CAACS,WAAD,CAAtB;QACA,IAAI9E,IAAI,CAACyE,WAALzE,CAAiB+E,KAAjB/E,EAAwBgF,SAAxBhF,CAAJ,EAAwC;UACtC,IAAM2C,SAAS,GAAG3C,IAAI,CAACyD,QAALzD,CAAckE,WAAW,CAACb,QAA1BrD,EAAoCA,IAAI,CAAC8D,QAAL9D,CAAc+E,KAAd/E,EAAqBgF,SAArBhF,CAApCA,CAAlB;UACA,IAAM0C,WAAW,GAAG1C,IAAI,CAAC0D,GAAL1D,CAASA,IAAI,CAACyD,QAALzD,CAAc+E,KAAd/E,EAAqBI,IAArBJ,CAATA,EAAqCgF,SAArChF,CAApB;UACA,IAAMiF,YAAY,GAAGjF,IAAI,CAACwC,MAALxC,CAAY2C,SAAZ3C,EAAuB0C,WAAvB1C,CAArB;UACA6E,mBAAmB,GAAGX,WAAW,CAACR,GAAZQ,CAAgBN,cAAc,CAACC,aAAfD,CAA6B,IAAA,CAAK3B,cAAlC2B,EAAkDqB,YAAlDrB,CAAhBM,CAAtBW;QACD,CALD,MAKO;UACLA,mBAAmB,GAAGX,WAAtBW;QACD;MACF,CAXD,MAWO;QACLA,mBAAmB,GAAGX,WAAtBW;MACD;IACF;IAED,OAAOjB,cAAc,CAACC,aAAfD,CACLvB,KADKuB,EAEL5D,IAAI,CAACwC,MAALxC,CAAYA,IAAI,CAACyD,QAALzD,CAAcoE,SAAS,CAACf,QAAxBrD,EAAkC,IAAA,CAAK+C,SAAL,CAAeV,KAAf,CAAA,CAAsBgB,QAAxDrD,CAAZA,EAA+E6E,mBAAmB,CAACxB,QAAnGrD,CAFK4D,CAAP;EAID,CA9LH;EAAA,YAAA,CAAA,IAAA,EAAA,CAAA;IAAA,GAAA,EAAA,aAAA;IAAA,GAAA,EAiCE,SAAA,GAAA,GAAA;MACE,IAAMrB,MAAM,GAAG,IAAA,CAAKR,YAAL,CAAkB,CAAlB,CAAA,CAAqBS,MAArB,CAA4B,IAAA,CAAKT,YAAL,CAAkB,CAAlB,CAA5B,CAAf;MACA,OAAO,IAAIU,KAAJ,CAAU,IAAA,CAAKrB,MAAf,EAAuB,IAAA,CAAKC,MAA5B,EAAoCkB,MAAM,CAACG,WAA3C,EAAwDH,MAAM,CAACI,SAA/D,CAAP;IACD;IAED;;;EAtCF,CAAA,EAAA;IAAA,GAAA,EAAA,aAAA;IAAA,GAAA,EAyCE,SAAA,GAAA,GAAA;MACE,IAAMJ,MAAM,GAAG,IAAA,CAAKR,YAAL,CAAkB,CAAlB,CAAA,CAAqBS,MAArB,CAA4B,IAAA,CAAKT,YAAL,CAAkB,CAAlB,CAA5B,CAAf;MACA,OAAO,IAAIU,KAAJ,CAAU,IAAA,CAAKpB,MAAf,EAAuB,IAAA,CAAKD,MAA5B,EAAoCmB,MAAM,CAACG,WAA3C,EAAwDH,MAAM,CAACI,SAA/D,CAAP;IACD;EA5CH,CAAA,EAAA;IAAA,GAAA,EAAA,SAAA;IAAA,GAAA,EA0DE,SAAA,GAAA,GAAA;MACE,OAAO,IAAA,CAAKvB,MAAL,CAAYe,OAAnB;IACD;EA5DH,CAAA,EAAA;IAAA,GAAA,EAAA,QAAA;IAAA,GAAA,EA8DE,SAAA,GAAA,GAAA;MACE,OAAO,IAAA,CAAKJ,YAAL,CAAkB,CAAlB,CAAA,CAAqBC,QAA5B;IACD;EAhEH,CAAA,EAAA;IAAA,GAAA,EAAA,QAAA;IAAA,GAAA,EAkEE,SAAA,GAAA,GAAA;MACE,OAAO,IAAA,CAAKD,YAAL,CAAkB,CAAlB,CAAA,CAAqBC,QAA5B;IACD;EApEH,CAAA,EAAA;IAAA,GAAA,EAAA,UAAA;IAAA,GAAA,EAsEE,SAAA,GAAA,GAAA;MACE,OAAO,IAAA,CAAKD,YAAL,CAAkB,CAAlB,CAAP;IACD;EAxEH,CAAA,EAAA;IAAA,GAAA,EAAA,UAAA;IAAA,GAAA,EA0EE,SAAA,GAAA,GAAA;MACE,OAAO,IAAA,CAAKA,YAAL,CAAkB,CAAlB,CAAP;IACD;EA5EH,CAAA,CAAA,CAAA;EAAA,OAAA,IAAA;AAAA,CAAA,EAAA;ICpBamD,KAAb,GAAA,aAAA,YAAA;EAME,SAAA,KAAA,CAAmBC,KAAnB,EAAkCC,KAAlC,EAAiDC,MAAjD,EAAA;IA0BQ,IAAA,CAAA,SAAA,GAA2C,IAA3C;IAzBN,EAAUF,KAAK,CAACG,MAANH,GAAe,CAAzB,CAAA,GAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,GAAA,SAAS,CAAA,KAAA,EAAmB,OAAnB,CAAT,GAAA,SAAS,CAAA,KAAA,CAAT,GAAA,KAAA,CAAA;IACA,IAAMhD,OAAO,GAAWgD,KAAK,CAAC,CAAD,CAALA,CAAShD,OAAjC;IACA,CACEgD,KAAK,CAACI,KAANJ,CAAY,UAAA,IAAI,EAAA;MAAA,OAAIK,IAAI,CAACrD,OAALqD,KAAiBrD,OAArB;IAAA,CAAhBgD,CADF,GAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,GAAA,SAAS,CAAA,KAAA,EAEP,WAFO,CAAT,GAAA,SAAS,CAAA,KAAA,CAAT,GAAA,KAAA,CAAA;IAKA,IAAMM,YAAY,GAAGL,KAAK,CAACM,OAA3B;IACA,CAAUP,KAAK,CAAC,CAAD,CAALA,CAAS/C,aAAT+C,CAAuBM,YAAvBN,CAAV,GAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,GAAA,SAAS,CAAA,KAAA,EAAuC,OAAvC,CAAT,GAAA,SAAS,CAAA,KAAA,CAAT,GAAA,KAAA,CAAA;IACA,EAAU,OAAOE,MAAP,KAAkB,WAAlB,IAAiCF,KAAK,CAACA,KAAK,CAACG,MAANH,GAAe,CAAhB,CAALA,CAAwB/C,aAAxB+C,CAAsCE,MAAM,CAACK,OAA7CP,CAA3C,CAAA,GAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,GAAA,SAAS,CAAA,KAAA,EAAyF,QAAzF,CAAT,GAAA,SAAS,CAAA,KAAA,CAAT,GAAA,KAAA,CAAA;IAEA,IAAMQ,IAAI,GAAY,CAACF,YAAD,CAAtB;IACA,KAAA,IAAA,SAAA,GAAA,+BAAA,CAAwBN,KAAK,CAACU,OAANV,EAAxB,CAAA,EAAA,KAAA,EAAA,CAAA,CAAA,KAAA,GAAA,SAAA,EAAA,EAAA,IAAA,GAAyC;MAAA,IAAA,WAAA,GAAA,KAAA,CAAA,KAAA;QAA7BS,CAA6B,GAAA,WAAA,CAAA,CAAA,CAAA;QAA1BJ,IAA0B,GAAA,WAAA,CAAA,CAAA,CAAA;MACvC,IAAMM,YAAY,GAAGH,IAAI,CAACC,CAAD,CAAzB;MACA,EAAUE,YAAY,CAACxD,MAAbwD,CAAoBN,IAAI,CAACpE,MAAzB0E,CAAAA,IAAoCA,YAAY,CAACxD,MAAbwD,CAAoBN,IAAI,CAACnE,MAAzByE,CAA9C,CAAA,GAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,GAAA,SAAS,CAAA,KAAA,EAAuE,MAAvE,CAAT,GAAA,SAAS,CAAA,KAAA,CAAT,GAAA,KAAA,CAAA;MACA,IAAMT,OAAM,GAAGS,YAAY,CAACxD,MAAbwD,CAAoBN,IAAI,CAACpE,MAAzB0E,CAAAA,GAAmCN,IAAI,CAACnE,MAAxCyE,GAAiDN,IAAI,CAACpE,MAArE;MACAuE,IAAI,CAACI,IAALJ,CAAUN,OAAVM,CAAAA;IACD;IAED,IAAA,CAAKR,KAAL,GAAaA,KAAb;IACA,IAAA,CAAKQ,IAAL,GAAYA,IAAZ;IACA,IAAA,CAAKP,KAAL,GAAaA,KAAb;IACA,IAAA,CAAKC,MAAL,GAAcA,MAAd;EACD;EA9BH,YAAA,CAAA,KAAA,EAAA,CAAA;IAAA,GAAA,EAAA,UAAA;IAAA,GAAA,EAkCE,SAAA,GAAA,GAAA;MACE,IAAI,IAAA,CAAKW,SAAL,KAAmB,IAAvB,EAA6B,OAAO,IAAA,CAAKA,SAAZ;MAC7B,IAAMC,MAAM,GAAgC,EAA5C;MACA,KAAA,IAAA,UAAA,GAAA,+BAAA,CAAwB,IAAA,CAAKd,KAAL,CAAWU,OAAX,EAAxB,CAAA,EAAA,MAAA,EAAA,CAAA,CAAA,MAAA,GAAA,UAAA,EAAA,EAAA,IAAA,GAA8C;QAAA,IAAA,YAAA,GAAA,MAAA,CAAA,KAAA;UAAlCD,CAAkC,GAAA,YAAA,CAAA,CAAA,CAAA;UAA/BJ,IAA+B,GAAA,YAAA,CAAA,CAAA,CAAA;QAC5CS,MAAM,CAACF,IAAPE,CACE,IAAA,CAAKN,IAAL,CAAUC,CAAV,CAAA,CAAatD,MAAb,CAAoBkD,IAAI,CAACpE,MAAzB,CAAA,GACI,IAAIqB,KAAJ,CAAU+C,IAAI,CAACxC,QAALwC,CAAcxD,QAAxB,EAAkCwD,IAAI,CAACvC,QAALuC,CAAcxD,QAAhD,EAA0DwD,IAAI,CAACxC,QAALwC,CAAcnC,QAAxE,EAAkFmC,IAAI,CAACvC,QAALuC,CAAcnC,QAAhG,CADJ,GAEI,IAAIZ,KAAJ,CAAU+C,IAAI,CAACvC,QAALuC,CAAcxD,QAAxB,EAAkCwD,IAAI,CAACxC,QAALwC,CAAcxD,QAAhD,EAA0DwD,IAAI,CAACvC,QAALuC,CAAcnC,QAAxE,EAAkFmC,IAAI,CAACxC,QAALwC,CAAcnC,QAAhG,CAHN4C,CAAAA;MAKD;MACD,IAAMC,OAAO,GAAG,MAAM,CAACC,KAAP,CAAa,CAAb,CAAA,CAAgBC,MAAhB,CAAuB,UAACC,WAAD,EAAcC,YAAd,EAAA;QAAA,OAA+BD,WAAW,CAAC5C,QAAZ4C,CAAqBC,YAArBD,CAA/B;MAAA,CAAvB,EAA0FJ,MAAM,CAAC,CAAD,CAAhG,CAAhB;MACA,OAAQ,IAAA,CAAKD,SAAL,GAAiB,IAAIvD,KAAJ,CAAU,IAAA,CAAK2C,KAAf,EAAsB,IAAA,CAAKC,MAA3B,EAAmCa,OAAO,CAACxD,WAA3C,EAAwDwD,OAAO,CAACvD,SAAhE,CAAzB;IACD;EA9CH,CAAA,EAAA;IAAA,GAAA,EAAA,SAAA;IAAA,GAAA,EAgDE,SAAA,GAAA,GAAA;MACE,OAAO,IAAA,CAAKwC,KAAL,CAAW,CAAX,CAAA,CAAchD,OAArB;IACD;EAlDH,CAAA,CAAA,CAAA;EAAA,OAAA,KAAA;AAAA,CAAA,EAAA;;ACmBA;;AACA,SAAgBoE,qBAAAA,CACdC,CAAAA,EACAC,CAAAA,EAAAA;EAEA;EACA,CAAUD,CAAC,CAACrD,WAAFqD,CAAcxE,QAAdwE,CAAuBlE,MAAvBkE,CAA8BC,CAAC,CAACtD,WAAFsD,CAAczE,QAA5CwE,CAAV,GAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,GAAA,SAAS,CAAA,KAAA,EAAwD,gBAAxD,CAAT,GAAA,SAAS,CAAA,KAAA,CAAT,GAAA,KAAA,CAAA;EACA,CAAUA,CAAC,CAAC7C,YAAF6C,CAAexE,QAAfwE,CAAwBlE,MAAxBkE,CAA+BC,CAAC,CAAC9C,YAAF8C,CAAezE,QAA9CwE,CAAV,GAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,GAAA,SAAS,CAAA,KAAA,EAA0D,iBAA1D,CAAT,GAAA,SAAS,CAAA,KAAA,CAAT,GAAA,KAAA,CAAA;EACA,IAAIA,CAAC,CAAC7C,YAAF6C,CAAeE,OAAfF,CAAuBC,CAAC,CAAC9C,YAAzB6C,CAAJ,EAA4C;IAC1C,IAAIA,CAAC,CAACrD,WAAFqD,CAAcE,OAAdF,CAAsBC,CAAC,CAACtD,WAAxBqD,CAAJ,EAA0C;MACxC,OAAO,CAAP;IACD,CAHyC,CAAA;;IAK1C,IAAIA,CAAC,CAACrD,WAAFqD,CAAcG,QAAdH,CAAuBC,CAAC,CAACtD,WAAzBqD,CAAJ,EAA2C;MACzC,OAAO,CAAC,CAAR;IACD,CAFD,MAEO;MACL,OAAO,CAAP;IACD;EACF,CAVD,MAUO;IACL;IACA,IAAIA,CAAC,CAAC7C,YAAF6C,CAAeG,QAAfH,CAAwBC,CAAC,CAAC9C,YAA1B6C,CAAJ,EAA6C;MAC3C,OAAO,CAAP;IACD,CAFD,MAEO;MACL,OAAO,CAAC,CAAR;IACD;EACF;AACF,CAAA,CAAA;;AAGD,SAAgBI,eAAAA,CACdJ,CAAAA,EACAC,CAAAA,EAAAA;EAEA,IAAMI,MAAM,GAAGN,qBAAqB,CAACC,CAAD,EAAIC,CAAJ,CAApC;EACA,IAAII,MAAM,KAAK,CAAf,EAAkB;IAChB,OAAOA,MAAP;EACD,CAAA,CAAA;;EAGD,IAAIL,CAAC,CAACM,WAAFN,CAAcG,QAAdH,CAAuBC,CAAC,CAACK,WAAzBN,CAAJ,EAA2C;IACzC,OAAO,CAAC,CAAR;EACD,CAFD,MAEO,IAAIA,CAAC,CAACM,WAAFN,CAAc/B,WAAd+B,CAA0BC,CAAC,CAACK,WAA5BN,CAAJ,EAA8C;IACnD,OAAO,CAAP;EACD,CAAA,CAAA;;EAGD,OAAOA,CAAC,CAACO,KAAFP,CAAQb,IAARa,CAAalB,MAAbkB,GAAsBC,CAAC,CAACM,KAAFN,CAAQd,IAARc,CAAanB,MAA1C;AACD;AASD;;;;;AAIA,IAAa0B,KAAb,GAAA,aAAA,YAAA;EAkDE,SAAA,KAAA,CACED,KADF,EAEES,MAFF,EAGEC,SAHF,EAAA;IAKE,IAAA,CAAKV,KAAL,GAAaA,KAAb;IACA,IAAA,CAAKU,SAAL,GAAiBA,SAAjB;IAEA,IAAM1F,YAAY,GAA4B,IAAI2F,KAAJ,CAAUX,KAAK,CAACpB,IAANoB,CAAWzB,MAArB,CAA9C;IACA,IAAImC,SAAS,KAAKN,SAAS,CAACC,WAA5B,EAAyC;MACvC,CAAUI,MAAM,CAACxF,QAAPwF,CAAgBlF,MAAhBkF,CAAuBT,KAAK,CAAC3B,KAA7BoC,CAAV,GAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,GAAA,SAAS,CAAA,KAAA,EAAsC,OAAtC,CAAT,GAAA,SAAS,CAAA,KAAA,CAAT,GAAA,KAAA,CAAA;MACAzF,YAAY,CAAC,CAAD,CAAZA,GAAkByF,MAAM,CAAC9B,OAAzB3D;MACA,KAAK,IAAI6D,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGmB,KAAK,CAACpB,IAANoB,CAAWzB,MAAXyB,GAAoB,CAAxC,EAA2CnB,CAAC,EAA5C,EAAgD;QAC9C,IAAMJ,IAAI,GAAGuB,KAAK,CAAC5B,KAAN4B,CAAYnB,CAAZmB,CAAb;QAD8C,IAAA,qBAAA,GAEvBvB,IAAI,CAACtC,eAALsC,CAAqBzD,YAAY,CAAC6D,CAAD,CAAjCJ,CAFuB;UAEvC7B,YAFuC,GAAA,qBAAA,CAAA,CAAA,CAAA;QAG9C5B,YAAY,CAAC6D,CAAC,GAAG,CAAL,CAAZ7D,GAAsB4B,YAAtB5B;MACD;MACD,IAAA,CAAKoB,WAAL,GAAmBS,cAAc,CAAC+D,oBAAf/D,CAAoCmD,KAAK,CAAC3B,KAA1CxB,EAAiD4D,MAAM,CAAC7E,SAAxDiB,EAAmE4D,MAAM,CAAC9E,WAA1EkB,CAAnB;MACA,IAAA,CAAKD,YAAL,GAAoBC,cAAc,CAAC+D,oBAAf/D,CAClBmD,KAAK,CAAC1B,MADYzB,EAElB7B,YAAY,CAACA,YAAY,CAACuD,MAAbvD,GAAsB,CAAvB,CAAZA,CAAsCY,SAFpBiB,EAGlB7B,YAAY,CAACA,YAAY,CAACuD,MAAbvD,GAAsB,CAAvB,CAAZA,CAAsCW,WAHpBkB,CAApB;IAKD,CAdD,MAcO;MACL,CAAU4D,MAAM,CAACxF,QAAPwF,CAAgBlF,MAAhBkF,CAAuBT,KAAK,CAAC1B,MAA7BmC,CAAV,GAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,GAAA,SAAS,CAAA,KAAA,EAAuC,QAAvC,CAAT,GAAA,SAAS,CAAA,KAAA,CAAT,GAAA,KAAA,CAAA;MACAzF,YAAY,CAACA,YAAY,CAACuD,MAAbvD,GAAsB,CAAvB,CAAZA,GAAwCyF,MAAM,CAAC9B,OAA/C3D;MACA,KAAK,IAAI6D,EAAC,GAAGmB,KAAK,CAACpB,IAANoB,CAAWzB,MAAXyB,GAAoB,CAAjC,EAAoCnB,EAAC,GAAG,CAAxC,EAA2CA,EAAC,EAA5C,EAAgD;QAC9C,IAAMJ,KAAI,GAAGuB,KAAK,CAAC5B,KAAN4B,CAAYnB,EAAC,GAAG,CAAhBmB,CAAb;QAD8C,IAAA,oBAAA,GAExBvB,KAAI,CAACzB,cAALyB,CAAoBzD,YAAY,CAAC6D,EAAD,CAAhCJ,CAFwB;UAEvCrC,WAFuC,GAAA,oBAAA,CAAA,CAAA,CAAA;QAG9CpB,YAAY,CAAC6D,EAAC,GAAG,CAAL,CAAZ7D,GAAsBoB,WAAtBpB;MACD;MACD,IAAA,CAAKoB,WAAL,GAAmBS,cAAc,CAAC+D,oBAAf/D,CACjBmD,KAAK,CAAC3B,KADWxB,EAEjB7B,YAAY,CAAC,CAAD,CAAZA,CAAgBY,SAFCiB,EAGjB7B,YAAY,CAAC,CAAD,CAAZA,CAAgBW,WAHCkB,CAAnB;MAKA,IAAA,CAAKD,YAAL,GAAoBC,cAAc,CAAC+D,oBAAf/D,CAAoCmD,KAAK,CAAC1B,MAA1CzB,EAAkD4D,MAAM,CAAC7E,SAAzDiB,EAAoE4D,MAAM,CAAC9E,WAA3EkB,CAApB;IACD;IACD,IAAA,CAAKgE,cAAL,GAAsB,IAAInF,KAAJ,CACpB,IAAA,CAAKU,WAAL,CAAiBnB,QADG,EAEpB,IAAA,CAAK2B,YAAL,CAAkB3B,QAFE,EAGpB,IAAA,CAAKmB,WAAL,CAAiBE,QAHG,EAIpB,IAAA,CAAKM,YAAL,CAAkBN,QAJE,CAAtB;IAMA,IAAA,CAAKyD,WAAL,GAAmBe,kBAAkB,CAACd,KAAK,CAACe,QAAP,EAAiB,IAAA,CAAK3E,WAAtB,EAAmC,IAAA,CAAKQ,YAAxC,CAArC;EACD;EArED;;;;;;EA1BF,KAAA,CA+BgBsD,OA/BhB,GA+BS,SAAA,OAAA,CACLF,KADK,EAELG,QAFK,EAAA;IAIL,OAAO,IAAIF,KAAJ,CAAUD,KAAV,EAAiBG,QAAjB,EAA2BC,SAAS,CAACC,WAArC,CAAP;EACD;EAED;;;;KAAA;;EAtCF,KAAA,CA2CgBC,QA3ChB,GA2CS,SAAA,QAAA,CACLN,KADK,EAELO,SAFK,EAAA;IAIL,OAAO,IAAIN,KAAJ,CAAUD,KAAV,EAAiBO,SAAjB,EAA4BH,SAAS,CAACI,YAAtC,CAAP;EACD;EAiDD;;;KAAA;;EAjGF,IAAA,MAAA,GAAA,KAAA,CAAA,SAAA;EAAA,MAAA,CAqGSQ,gBArGT,GAqGSA,SAAAA,gBAAAA,CAAiBC,iBAAjBD,EAAAA;IACL,CAAU,CAACC,iBAAiB,CAACrB,QAAlBqB,CAA2B9H,IAA3B8H,CAAX,GAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,GAAA,SAAS,CAAA,KAAA,EAAoC,oBAApC,CAAT,GAAA,SAAS,CAAA,KAAA,CAAT,GAAA,KAAA,CAAA;IACA,IAAI,IAAA,CAAKP,SAAL,KAAmBN,SAAS,CAACI,YAAjC,EAA+C;MAC7C,OAAO,IAAA,CAAK5D,YAAZ;IACD,CAFD,MAEO;MACL,IAAMsE,yBAAyB,GAAG,IAAIC,QAAJ,CAAa/H,GAAb,CAAA,CAC/BuD,GAD+B,CAC3BsE,iBAD2B,CAAA,CAE/BG,MAF+B,EAAA,CAG/B1E,QAH+B,CAGtB,IAAA,CAAKE,YAAL,CAAkBN,QAHI,CAAA,CAGMA,QAHxC;MAIA,OAAOO,cAAc,CAACC,aAAfD,CAA6B,IAAA,CAAKD,YAAL,CAAkB3B,QAA/C4B,EAAyDqE,yBAAzDrE,CAAP;IACD;EACF;EAED;;;KAAA;;EAlHF,MAAA,CAsHSwE,eAtHT,GAsHSA,SAAAA,eAAAA,CAAgBJ,iBAAhBI,EAAAA;IACL,CAAU,CAACJ,iBAAiB,CAACrB,QAAlBqB,CAA2B9H,IAA3B8H,CAAX,GAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,GAAA,SAAS,CAAA,KAAA,EAAoC,oBAApC,CAAT,GAAA,SAAS,CAAA,KAAA,CAAT,GAAA,KAAA,CAAA;IACA,IAAI,IAAA,CAAKP,SAAL,KAAmBN,SAAS,CAACC,WAAjC,EAA8C;MAC5C,OAAO,IAAA,CAAKjE,WAAZ;IACD,CAFD,MAEO;MACL,IAAMkF,wBAAwB,GAAG,IAAIH,QAAJ,CAAa/H,GAAb,CAAA,CAAkBuD,GAAlB,CAAsBsE,iBAAtB,CAAA,CAAyCvE,QAAzC,CAAkD,IAAA,CAAKN,WAAL,CAAiBE,QAAnE,CAAA,CAC9BA,QADH;MAEA,OAAOO,cAAc,CAACC,aAAfD,CAA6B,IAAA,CAAKT,WAAL,CAAiBnB,QAA9C4B,EAAwDyE,wBAAxDzE,CAAP;IACD;EACF;EAED;;;;;;;;;;;;;KAAA;;EAjIF,KAAA,CA+IgB0E,gBA/IhB,GA+IS,SAAA,gBAAA,CACLnD,KADK,EAELoD,gBAFK,EAGLC,WAHK,EAAA,KAAA;EAAA;EAMLG,YANK,EAOLC,YAPK,EAQLC,UARK,EAAA;kCAIkD,CAAA,CAAA,GAAA,KAAA;gCAArDJ,aAAAA;MAAAA,aAAAA,GAAAA,kBAAAA,KAAAA,KAAAA,CAAAA,GAAgB,CAAA,GAAA,kBAAA;0BAAGC,OAAAA;MAAAA,OAAAA,GAAAA,YAAAA,KAAAA,KAAAA,CAAAA,GAAU,CAAA,GAAA,YAAA;QAE/BC,YAAAA,KAAAA,KAAAA,CAAAA,EAAAA;MAAAA,YAAAA,GAAuB,EAAA;;QACvBC,YAAAA,KAAAA,KAAAA,CAAAA,EAAAA;MAAAA,YAAAA,GAAyCL,gBAAAA;;QACzCM,UAAAA,KAAAA,KAAAA,CAAAA,EAAAA;MAAAA,UAAAA,GAA8D,EAAA;;IAE9D,EAAU1D,KAAK,CAACG,MAANH,GAAe,CAAzB,CAAA,GAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,GAAA,SAAS,CAAA,KAAA,EAAmB,OAAnB,CAAT,GAAA,SAAS,CAAA,KAAA,CAAT,GAAA,KAAA,CAAA;IACA,EAAUuD,OAAO,GAAG,CAApB,CAAA,GAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,GAAA,SAAS,CAAA,KAAA,EAAc,UAAd,CAAT,GAAA,SAAS,CAAA,KAAA,CAAT,GAAA,KAAA,CAAA;IACA,EAAUH,gBAAgB,KAAKK,YAArBL,IAAqCI,YAAY,CAACrD,MAAbqD,GAAsB,CAArE,CAAA,GAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,GAAA,SAAS,CAAA,KAAA,EAA+D,mBAA/D,CAAT,GAAA,SAAS,CAAA,KAAA,CAAT,GAAA,KAAA,CAAA;IAEA,IAAMzB,QAAQ,GAAG0B,YAAY,CAAClD,OAA9B;IACA,IAAMoD,QAAQ,GAAGN,WAAW,CAAC9C,OAA7B;IACA,KAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,KAAK,CAACG,MAA1B,EAAkCM,CAAC,EAAnC,EAAuC;MACrC,IAAMJ,IAAI,GAAGL,KAAK,CAACS,CAAD,CAAlB,CADqC,CAAA;;MAGrC,IAAI,CAACJ,IAAI,CAACpE,MAALoE,CAAYlD,MAAZkD,CAAmB0B,QAAQ,CAAClF,QAA5BwD,CAAD,IAA0C,CAACA,IAAI,CAACnE,MAALmE,CAAYlD,MAAZkD,CAAmB0B,QAAQ,CAAClF,QAA5BwD,CAA/C,EAAsF;MACtF,IAAIA,IAAI,CAACxC,QAALwC,CAAckB,OAAdlB,CAAsBtF,IAAtBsF,CAAAA,IAA+BA,IAAI,CAACvC,QAALuC,CAAckB,OAAdlB,CAAsBtF,IAAtBsF,CAAnC,EAAgE;MAEhE,IAAI8B,SAAgC,GAAA,KAAA,CAApC;MACA,IAAI;QACF;QADE,IAAA,sBAAA,GACa9B,IAAI,CAACtC,eAALsC,CAAqB0B,QAArB1B,CADb;QACA8B,SADA,GAAA,sBAAA,CAAA,CAAA,CAAA;MAEH,CAFD,CAEE,OAAOyB,KAAP,EAAc;QACd;QACA,IAAIA,KAAK,CAACC,8BAAV,EAA0C;UACxC;QACD;QACD,MAAMD,KAAN;MACD,CAfoC,CAAA;;MAiBrC,IAAIzB,SAAS,CAACtF,QAAVsF,CAAmBhF,MAAnBgF,CAA0BwB,QAA1BxB,CAAJ,EAAyC;QACvC2B,YAAY,CACVJ,UADU,EAEV,IAAI7B,KAAJ,CACE,IAAI9B,KAAJ,CAAA,EAAA,CAAA,MAAA,CAAcyD,YAAd,EAAA,CAA4BnD,IAA5B,CAAA,CAAA,EAAmC+C,gBAAgB,CAACvG,QAApD,EAA8DwG,WAA9D,CADF,EAEED,gBAFF,EAGEpB,SAAS,CAACC,WAHZ,CAFU,EAOVqB,aAPU,EAQV7B,eARU,CAAZqC;MAUD,CAXD,MAWO,IAAIP,OAAO,GAAG,CAAVA,IAAevD,KAAK,CAACG,MAANH,GAAe,CAAlC,EAAqC;QAC1C,IAAM+D,sBAAsB,GAAG/D,KAAK,CAACgB,KAANhB,CAAY,CAAZA,EAAeS,CAAfT,CAAAA,CAAkBgE,MAAlBhE,CAAyBA,KAAK,CAACgB,KAANhB,CAAYS,CAAC,GAAG,CAAhBT,EAAmBA,KAAK,CAACG,MAAzBH,CAAzBA,CAA/B,CAD0C,CAAA;;QAI1C6B,KAAK,CAACsB,gBAANtB,CACEkC,sBADFlC,EAEEuB,gBAFFvB,EAGEwB,WAHFxB,EAIE;UACEyB,aAAa,EAAbA,aADF;UAEEC,OAAO,EAAEA,OAAO,GAAG;QAFrB,CAJF1B,EAAAA,EAAAA,CAAAA,MAAAA,CAQM2B,YARN3B,EAAAA,CAQoBxB,IARpBwB,CAAAA,CAAAA,EASEM,SATFN,EAUE6B,UAVF7B,CAAAA;MAYD;IACF;IAED,OAAO6B,UAAP;EACD;EAED;;;KAAA;;EAjNF,MAAA,CAqNSO,mBArNT,GAqNSA,SAAAA,mBAAAA,CAAoBpB,iBAApBoB,EAAAA;IACL,OAAO,IAAI3G,KAAJ,CACL,IAAA,CAAKU,WAAL,CAAiBnB,QADZ,EAEL,IAAA,CAAK2B,YAAL,CAAkB3B,QAFb,EAGL,IAAA,CAAKoG,eAAL,CAAqBJ,iBAArB,CAAA,CAAwC3E,QAHnC,EAIL,IAAA,CAAK0E,gBAAL,CAAsBC,iBAAtB,CAAA,CAAyC3E,QAJpC,CAAP;EAMD;EAED;;;;;;;;;;;;;;KAAA;;EA9NF,KAAA,CA6OgBgG,iBA7OhB,GA6OS,SAAA,iBAAA,CACLlE,KADK,EAELmE,UAFK,EAGLC,iBAHK,EAAA,MAAA;EAAA;EAMLZ,YANK,EAOLa,aAPK,EAQLX,UARK,EAAA;oCAIkD,CAAA,CAAA,GAAA,MAAA;kCAArDJ,aAAAA;MAAAA,aAAAA,GAAAA,mBAAAA,KAAAA,KAAAA,CAAAA,GAAgB,CAAA,GAAA,mBAAA;4BAAGC,OAAAA;MAAAA,OAAAA,GAAAA,aAAAA,KAAAA,KAAAA,CAAAA,GAAU,CAAA,GAAA,aAAA;QAE/BC,YAAAA,KAAAA,KAAAA,CAAAA,EAAAA;MAAAA,YAAAA,GAAuB,EAAA;;QACvBa,aAAAA,KAAAA,KAAAA,CAAAA,EAAAA;MAAAA,aAAAA,GAA0CD,iBAAAA;;QAC1CV,UAAAA,KAAAA,KAAAA,CAAAA,EAAAA;MAAAA,UAAAA,GAA+D,EAAA;;IAE/D,EAAU1D,KAAK,CAACG,MAANH,GAAe,CAAzB,CAAA,GAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,GAAA,SAAS,CAAA,KAAA,EAAmB,OAAnB,CAAT,GAAA,SAAS,CAAA,KAAA,CAAT,GAAA,KAAA,CAAA;IACA,EAAUuD,OAAO,GAAG,CAApB,CAAA,GAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,GAAA,SAAS,CAAA,KAAA,EAAc,UAAd,CAAT,GAAA,SAAS,CAAA,KAAA,CAAT,GAAA,KAAA,CAAA;IACA,EAAUa,iBAAiB,KAAKC,aAAtBD,IAAuCZ,YAAY,CAACrD,MAAbqD,GAAsB,CAAvE,CAAA,GAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,GAAA,SAAS,CAAA,KAAA,EAAiE,mBAAjE,CAAT,GAAA,SAAS,CAAA,KAAA,CAAT,GAAA,KAAA,CAAA;IAEA,IAAMrB,SAAS,GAAGkC,aAAa,CAAC9D,OAAhC;IACA,IAAM+D,OAAO,GAAGH,UAAU,CAAC5D,OAA3B;IACA,KAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,KAAK,CAACG,MAA1B,EAAkCM,CAAC,EAAnC,EAAuC;MACrC,IAAMJ,IAAI,GAAGL,KAAK,CAACS,CAAD,CAAlB,CADqC,CAAA;;MAGrC,IAAI,CAACJ,IAAI,CAACpE,MAALoE,CAAYlD,MAAZkD,CAAmB8B,SAAS,CAACtF,QAA7BwD,CAAD,IAA2C,CAACA,IAAI,CAACnE,MAALmE,CAAYlD,MAAZkD,CAAmB8B,SAAS,CAACtF,QAA7BwD,CAAhD,EAAwF;MACxF,IAAIA,IAAI,CAACxC,QAALwC,CAAckB,OAAdlB,CAAsBtF,IAAtBsF,CAAAA,IAA+BA,IAAI,CAACvC,QAALuC,CAAckB,OAAdlB,CAAsBtF,IAAtBsF,CAAnC,EAAgE;MAEhE,IAAI0B,QAA+B,GAAA,KAAA,CAAnC;MACA,IAAI;QACF;QADE,IAAA,qBAAA,GACY1B,IAAI,CAACzB,cAALyB,CAAoB8B,SAApB9B,CADZ;QACA0B,QADA,GAAA,qBAAA,CAAA,CAAA,CAAA;MAEH,CAFD,CAEE,OAAO6B,KAAP,EAAc;QACd;QACA,IAAIA,KAAK,CAACW,2BAAV,EAAuC;UACrC;QACD;QACD,MAAMX,KAAN;MACD,CAfoC,CAAA;;MAiBrC,IAAI7B,QAAQ,CAAClF,QAATkF,CAAkB5E,MAAlB4E,CAAyBuC,OAAzBvC,CAAJ,EAAuC;QACrC+B,YAAY,CACVJ,UADU,EAEV,IAAI7B,KAAJ,CACE,IAAI9B,KAAJ,CAAA,CAAWM,IAAX,CAAA,CAAA,MAAA,CAAoBmD,YAApB,CAAA,EAAmCW,UAAnC,EAA+CC,iBAAiB,CAACvH,QAAjE,CADF,EAEEuH,iBAFF,EAGEpC,SAAS,CAACI,YAHZ,CAFU,EAOVkB,aAPU,EAQV7B,eARU,CAAZqC;MAUD,CAXD,MAWO,IAAIP,OAAO,GAAG,CAAVA,IAAevD,KAAK,CAACG,MAANH,GAAe,CAAlC,EAAqC;QAC1C,IAAM+D,sBAAsB,GAAG/D,KAAK,CAACgB,KAANhB,CAAY,CAAZA,EAAeS,CAAfT,CAAAA,CAAkBgE,MAAlBhE,CAAyBA,KAAK,CAACgB,KAANhB,CAAYS,CAAC,GAAG,CAAhBT,EAAmBA,KAAK,CAACG,MAAzBH,CAAzBA,CAA/B,CAD0C,CAAA;;QAI1C6B,KAAK,CAACqC,iBAANrC,CACEkC,sBADFlC,EAEEsC,UAFFtC,EAGEuC,iBAHFvC,EAIE;UACEyB,aAAa,EAAbA,aADF;UAEEC,OAAO,EAAEA,OAAO,GAAG;QAFrB,CAJF1B,EAAAA,CAQGxB,IARHwB,CAAAA,CAAAA,MAAAA,CAQY2B,YARZ3B,CAAAA,EASEE,QATFF,EAUE6B,UAVF7B,CAAAA;MAYD;IACF;IAED,OAAO6B,UAAP;EACD,CA7SH;EAAA,OAAA,KAAA;AAAA,CAAA,EAAA;AC7BA,SAASc,KAAT,CAAeC,cAAf,EAAA;EACE,OAAA,IAAA,GAAYA,cAAc,CAACvG,QAAfuG,CAAwBC,QAAxBD,CAAiC,EAAjCA,CAAZ;AACD;AAED,IAAME,QAAQ,GAAG,KAAjB;AAEA;;;;AAGA,IAAsBC,MAAtB,GAAA,aAAA,YAAA;EACE;;;EAGA,SAAA,MAAA,GAAA,CAAA;EACA;;;;;;EALF,MAAA,CAUgBC,kBAVhB,GAUS,SAAA,kBAAA,CACLC,KADK,EAELC,OAFK,EAAA;IAIL,IAAMC,OAAO,GAAGF,KAAK,CAAC9G,WAAN8G,CAAkBjI,QAAlBiI,CAA2BG,QAA3C;IACA,IAAMC,QAAQ,GAAGJ,KAAK,CAACtG,YAANsG,CAAmBjI,QAAnBiI,CAA4BG,QAA7C,CAAA,CAAA;;IAEA,CAAU,EAAED,OAAO,IAAIE,QAAb,CAAV,GAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,GAAA,SAAS,CAAA,KAAA,EAAyB,cAAzB,CAAT,GAAA,SAAS,CAAA,KAAA,CAAT,GAAA,KAAA,CAAA;IACA,EAAU,EAAE,KAAA,IAASH,OAAX,CAAA,IAAuBA,OAAO,CAACI,GAARJ,GAAc,CAA/C,CAAA,GAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,GAAA,SAAS,CAAA,KAAA,EAAyC,KAAzC,CAAT,GAAA,SAAS,CAAA,KAAA,CAAT,GAAA,KAAA,CAAA;IAEA,IAAMK,EAAE,GAAWC,uBAAuB,CAACN,OAAO,CAACO,SAAT,CAA1C;IACA,IAAMvD,QAAQ,GAAWyC,KAAK,CAACM,KAAK,CAAC7B,eAAN6B,CAAsBC,OAAO,CAACQ,eAA9BT,CAAD,CAA9B;IACA,IAAM3C,SAAS,GAAWqC,KAAK,CAACM,KAAK,CAAClC,gBAANkC,CAAuBC,OAAO,CAACQ,eAA/BT,CAAD,CAA/B;IACA,IAAMtE,IAAI,GAAa,KAAK,CAACoB,KAAN,CAAYpB,IAAZ,CAAiBgF,GAAjB,CAAqB,UAACtI,KAAD,EAAA;MAAA,OAAkBA,KAAK,CAACX,OAAxB;IAAA,CAArB,CAAvB;IACA,IAAMkJ,QAAQ,GACZ,KAAA,IAASV,OAAT,GAAA,IAAA,GACS,CAACW,IAAI,CAACC,KAALD,CAAW,IAAIE,IAAJ,EAAA,CAAWC,OAAX,EAAA,GAAuB,IAAlCH,CAAAA,GAA0CX,OAAO,CAACI,GAAnD,EAAwDT,QAAxD,CAAiE,EAAjE,CADT,GAAA,IAAA,GAESK,OAAO,CAACU,QAARV,CAAiBL,QAAjBK,CAA0B,EAA1BA,CAHX;IAKA,IAAMe,gBAAgB,GAAGC,OAAO,CAAChB,OAAO,CAACiB,aAAT,CAAhC;IAEA,IAAIC,UAAJ;IACA,IAAIC,IAAJ;IACA,IAAIC,KAAJ;IACA,QAAQrB,KAAK,CAACxC,SAAd;MACE,KAAKN,SAAS,CAACC,WAAf;QACE,IAAI+C,OAAJ,EAAa;UACXiB,UAAU,GAAGH,gBAAgB,GAAG,oDAAH,GAA0D,uBAAvFG,CADW,CAAA;;UAGXC,IAAI,GAAG,CAAC/D,SAAD,EAAY3B,IAAZ,EAAkB4E,EAAlB,EAAsBK,QAAtB,CAAPS;UACAC,KAAK,GAAGpE,QAARoE;QACD,CALD,MAKO,IAAIjB,QAAJ,EAAc;UACnBe,UAAU,GAAGH,gBAAgB,GAAG,oDAAH,GAA0D,uBAAvFG,CADmB,CAAA;;UAGnBC,IAAI,GAAG,CAACnE,QAAD,EAAWI,SAAX,EAAsB3B,IAAtB,EAA4B4E,EAA5B,EAAgCK,QAAhC,CAAPS;UACAC,KAAK,GAAGxB,QAARwB;QACD,CALM,MAKA;UACLF,UAAU,GAAGH,gBAAgB,GACzB,uDADyB,GAEzB,0BAFJG,CADK,CAAA;;UAKLC,IAAI,GAAG,CAACnE,QAAD,EAAWI,SAAX,EAAsB3B,IAAtB,EAA4B4E,EAA5B,EAAgCK,QAAhC,CAAPS;UACAC,KAAK,GAAGxB,QAARwB;QACD;QACD;MACF,KAAKnE,SAAS,CAACI,YAAf;QACE,CAAU,CAAC0D,gBAAX,GAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,GAAA,SAAS,CAAA,KAAA,EAAoB,eAApB,CAAT,GAAA,SAAS,CAAA,KAAA,CAAT,GAAA,KAAA,CAAA;QACA,IAAId,OAAJ,EAAa;UACXiB,UAAU,GAAG,uBAAbA,CADW,CAAA;;UAGXC,IAAI,GAAG,CAAC/D,SAAD,EAAY3B,IAAZ,EAAkB4E,EAAlB,EAAsBK,QAAtB,CAAPS;UACAC,KAAK,GAAGpE,QAARoE;QACD,CALD,MAKO,IAAIjB,QAAJ,EAAc;UACnBe,UAAU,GAAG,uBAAbA,CADmB,CAAA;;UAGnBC,IAAI,GAAG,CAAC/D,SAAD,EAAYJ,QAAZ,EAAsBvB,IAAtB,EAA4B4E,EAA5B,EAAgCK,QAAhC,CAAPS;UACAC,KAAK,GAAGxB,QAARwB;QACD,CALM,MAKA;UACLF,UAAU,GAAG,0BAAbA,CADK,CAAA;;UAGLC,IAAI,GAAG,CAAC/D,SAAD,EAAYJ,QAAZ,EAAsBvB,IAAtB,EAA4B4E,EAA5B,EAAgCK,QAAhC,CAAPS;UACAC,KAAK,GAAGxB,QAARwB;QACD;QACD;IAAA;IAEJ,OAAO;MACLF,UAAU,EAAVA,UADK;MAELC,IAAI,EAAJA,IAFK;MAGLC,KAAK,EAALA;IAHK,CAAP;EAKD,CAhFH;EAAA,OAAA,MAAA;AAAA,CAAA,EAAA","sourcesContent":["import JSBI from 'jsbi'\n\nexport const FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\n\nexport const INIT_CODE_HASH = '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const FIVE = JSBI.BigInt(5)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import { BigintIsh, Price, sqrt, Token, CurrencyAmount } from '@uniswap/sdk-core'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport { FACTORY_ADDRESS, INIT_CODE_HASH, MINIMUM_LIQUIDITY, FIVE, _997, _1000, ONE, ZERO } from '../constants'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\n\nexport const computePairAddress = ({\n  factoryAddress,\n  tokenA,\n  tokenB\n}: {\n  factoryAddress: string\n  tokenA: Token\n  tokenB: Token\n}): string => {\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n  return getCreate2Address(\n    factoryAddress,\n    keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])]),\n    INIT_CODE_HASH\n  )\n}\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [CurrencyAmount<Token>, CurrencyAmount<Token>]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    return computePairAddress({ factoryAddress: FACTORY_ADDRESS, tokenA, tokenB })\n  }\n\n  public constructor(currencyAmountA: CurrencyAmount<Token>, tokenAmountB: CurrencyAmount<Token>) {\n    const tokenAmounts = currencyAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [currencyAmountA, tokenAmountB]\n      : [tokenAmountB, currencyAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].currency.chainId,\n      Pair.getAddress(tokenAmounts[0].currency, tokenAmounts[1].currency),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = tokenAmounts as [CurrencyAmount<Token>, CurrencyAmount<Token>]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[1].divide(this.tokenAmounts[0])\n    return new Price(this.token0, this.token1, result.denominator, result.numerator)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[0].divide(this.tokenAmounts[1])\n    return new Price(this.token1, this.token0, result.denominator, result.numerator)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price<Token, Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): number {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].currency\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].currency\n  }\n\n  public get reserve0(): CurrencyAmount<Token> {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): CurrencyAmount<Token> {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(inputAmount.currency), 'TOKEN')\n    if (JSBI.equal(this.reserve0.quotient, ZERO) || JSBI.equal(this.reserve1.quotient, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.currency)\n    const outputReserve = this.reserveOf(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.quotient, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.quotient)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.quotient, _1000), inputAmountWithFee)\n    const outputAmount = CurrencyAmount.fromRawAmount(\n      inputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.quotient, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(outputAmount.currency), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.quotient, ZERO) ||\n      JSBI.equal(this.reserve1.quotient, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.quotient, this.reserveOf(outputAmount.currency).quotient)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.currency)\n    const inputReserve = this.reserveOf(outputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.quotient, outputAmount.quotient), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.quotient, outputAmount.quotient), _997)\n    const inputAmount = CurrencyAmount.fromRawAmount(\n      outputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: CurrencyAmount<Token>,\n    tokenAmountA: CurrencyAmount<Token>,\n    tokenAmountB: CurrencyAmount<Token>\n  ): CurrencyAmount<Token> {\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].currency.equals(this.token0) && tokenAmounts[1].currency.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.quotient, ZERO)) {\n      liquidity = JSBI.subtract(\n        sqrt(JSBI.multiply(tokenAmounts[0].quotient, tokenAmounts[1].quotient)),\n        MINIMUM_LIQUIDITY\n      )\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].quotient, totalSupply.quotient), this.reserve0.quotient)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].quotient, totalSupply.quotient), this.reserve1.quotient)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return CurrencyAmount.fromRawAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: CurrencyAmount<Token>,\n    liquidity: CurrencyAmount<Token>,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: CurrencyAmount<Token>\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = JSBI.BigInt(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.quotient, this.reserve1.quotient))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.quotient, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(CurrencyAmount.fromRawAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return CurrencyAmount.fromRawAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.quotient, this.reserveOf(token).quotient), totalSupplyAdjusted.quotient)\n    )\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { Currency, Price, Token } from '@uniswap/sdk-core'\n\nimport { Pair } from './pair'\n\nexport class Route<TInput extends Currency, TOutput extends Currency> {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: TInput\n  public readonly output: TOutput\n\n  public constructor(pairs: Pair[], input: TInput, output: TOutput) {\n    invariant(pairs.length > 0, 'PAIRS')\n    const chainId: number = pairs[0].chainId\n    invariant(\n      pairs.every(pair => pair.chainId === chainId),\n      'CHAIN_IDS'\n    )\n\n    const wrappedInput = input.wrapped\n    invariant(pairs[0].involvesToken(wrappedInput), 'INPUT')\n    invariant(typeof output === 'undefined' || pairs[pairs.length - 1].involvesToken(output.wrapped), 'OUTPUT')\n\n    const path: Token[] = [wrappedInput]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.input = input\n    this.output = output\n  }\n\n  private _midPrice: Price<TInput, TOutput> | null = null\n\n  public get midPrice(): Price<TInput, TOutput> {\n    if (this._midPrice !== null) return this._midPrice\n    const prices: Price<Currency, Currency>[] = []\n    for (const [i, pair] of this.pairs.entries()) {\n      prices.push(\n        this.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.quotient, pair.reserve1.quotient)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.quotient, pair.reserve0.quotient)\n      )\n    }\n    const reduced = prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n    return (this._midPrice = new Price(this.input, this.output, reduced.denominator, reduced.numerator))\n  }\n\n  public get chainId(): number {\n    return this.pairs[0].chainId\n  }\n}\n","import {\n  computePriceImpact,\n  Token,\n  Currency,\n  CurrencyAmount,\n  Fraction,\n  Percent,\n  Price,\n  sortedInsert,\n  TradeType\n} from '@uniswap/sdk-core'\nimport { ONE, ZERO } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Pair } from './pair'\nimport { Route } from './route'\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput<TInput extends Currency, TOutput extends Currency> {\n  readonly inputAmount: CurrencyAmount<TInput>\n  readonly outputAmount: CurrencyAmount<TOutput>\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator<TInput extends Currency, TOutput extends Currency>(\n  a: InputOutput<TInput, TOutput>,\n  b: InputOutput<TInput, TOutput>\n): number {\n  // must have same input and output token for comparison\n  invariant(a.inputAmount.currency.equals(b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(a.outputAmount.currency.equals(b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n  a: Trade<TInput, TOutput, TTradeType>,\n  b: Trade<TInput, TOutput, TTradeType>\n) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType> {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through and the input/output currencies.\n   */\n  public readonly route: Route<TInput, TOutput>\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TTradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount<TInput>\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount<TOutput>\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price<TInput, TOutput>\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountIn: CurrencyAmount<TInput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT> {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountOut: CurrencyAmount<TOutput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT> {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(\n    route: Route<TInput, TOutput>,\n    amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>,\n    tradeType: TTradeType\n  ) {\n    this.route = route\n    this.tradeType = tradeType\n\n    const tokenAmounts: CurrencyAmount<Token>[] = new Array(route.path.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(amount.currency.equals(route.input), 'INPUT')\n      tokenAmounts[0] = amount.wrapped\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount] = pair.getOutputAmount(tokenAmounts[i])\n        tokenAmounts[i + 1] = outputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator)\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(\n        route.output,\n        tokenAmounts[tokenAmounts.length - 1].numerator,\n        tokenAmounts[tokenAmounts.length - 1].denominator\n      )\n    } else {\n      invariant(amount.currency.equals(route.output), 'OUTPUT')\n      tokenAmounts[tokenAmounts.length - 1] = amount.wrapped\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount] = pair.getInputAmount(tokenAmounts[i])\n        tokenAmounts[i - 1] = inputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(\n        route.input,\n        tokenAmounts[0].numerator,\n        tokenAmounts[0].denominator\n      )\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(route.output, amount.numerator, amount.denominator)\n    }\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.quotient,\n      this.outputAmount.quotient\n    )\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount<TOutput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.quotient).quotient\n      return CurrencyAmount.fromRawAmount(this.outputAmount.currency, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount<TInput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.quotient)\n        .quotient\n      return CurrencyAmount.fromRawAmount(this.inputAmount.currency, slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param nextAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount<TInput>,\n    currencyOut: TOutput,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountIn: CurrencyAmount<Currency> = currencyAmountIn,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountIn === nextAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountIn = nextAmountIn.wrapped\n    const tokenOut = currencyOut.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.currency) && !pair.token1.equals(amountIn.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: CurrencyAmount<Token>\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.currency.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], currencyAmountIn.currency, currencyOut),\n            currencyAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          currencyAmountIn,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          amountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * Return the execution price after accounting for slippage tolerance\n   * @param slippageTolerance the allowed tolerated slippage\n   */\n  public worstExecutionPrice(slippageTolerance: Percent): Price<TInput, TOutput> {\n    return new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.maximumAmountIn(slippageTolerance).quotient,\n      this.minimumAmountOut(slippageTolerance).quotient\n    )\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param nextAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[],\n    currencyIn: TInput,\n    currencyAmountOut: CurrencyAmount<TOutput>,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountOut: CurrencyAmount<Currency> = currencyAmountOut,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountOut === nextAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountOut = nextAmountOut.wrapped\n    const tokenIn = currencyIn.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.currency) && !pair.token1.equals(amountOut.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: CurrencyAmount<Token>\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.currency.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, currencyAmountOut.currency),\n            currencyAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          currencyAmountOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          amountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { Token, Currency, CurrencyAmount, Percent, TradeType, validateAndParseAddress } from '@uniswap/sdk-core'\nimport { Trade } from './entities'\nimport invariant from 'tiny-invariant'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount<Currency>) {\n  return `0x${currencyAmount.quotient.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(\n    trade: Trade<Currency, Currency, TradeType>,\n    options: TradeOptions | TradeOptionsDeadline\n  ): SwapParameters {\n    const etherIn = trade.inputAmount.currency.isNative\n    const etherOut = trade.outputAmount.currency.isNative\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map((token: Token) => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}