{"ast":null,"code":"import { DEFAULT_LOCALE, SUPPORTED_LOCALES } from 'constants/locales';\nexport default function formatLocaleNumber(_ref) {\n  let {\n    number,\n    locale,\n    sigFigs,\n    fixedDecimals,\n    options = {}\n  } = _ref;\n  let localeArg;\n  if (!locale || locale && !SUPPORTED_LOCALES.includes(locale)) {\n    localeArg = DEFAULT_LOCALE;\n  } else {\n    localeArg = [locale, DEFAULT_LOCALE];\n  }\n  options.minimumFractionDigits = options.minimumFractionDigits || fixedDecimals;\n  options.maximumFractionDigits = options.maximumFractionDigits || fixedDecimals;\n\n  // Fixed decimals should override significant figures.\n  options.maximumSignificantDigits = options.maximumSignificantDigits || fixedDecimals ? undefined : sigFigs;\n  let numberString;\n  if (typeof number === 'number') {\n    numberString = fixedDecimals ? parseFloat(number.toFixed(fixedDecimals)) : number;\n  } else {\n    const baseString = parseFloat(number.toSignificant(sigFigs));\n    numberString = fixedDecimals ? parseFloat(baseString.toFixed(fixedDecimals)) : baseString;\n  }\n  return numberString.toLocaleString(localeArg, options);\n}","map":{"version":3,"names":["DEFAULT_LOCALE","SUPPORTED_LOCALES","formatLocaleNumber","number","locale","sigFigs","fixedDecimals","options","localeArg","includes","minimumFractionDigits","maximumFractionDigits","maximumSignificantDigits","undefined","numberString","parseFloat","toFixed","baseString","toSignificant","toLocaleString"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/lib/utils/formatLocaleNumber.ts"],"sourcesContent":["import { Currency, CurrencyAmount, Price } from '@uniswap/sdk-core'\nimport { DEFAULT_LOCALE, SUPPORTED_LOCALES } from 'constants/locales'\n\ninterface FormatLocaleNumberArgs {\n  number: CurrencyAmount<Currency> | Price<Currency, Currency> | number\n  locale: string | null | undefined\n  options?: Intl.NumberFormatOptions\n  sigFigs?: number\n  fixedDecimals?: number\n}\n\nexport default function formatLocaleNumber({\n  number,\n  locale,\n  sigFigs,\n  fixedDecimals,\n  options = {},\n}: FormatLocaleNumberArgs): string {\n  let localeArg: string | string[]\n  if (!locale || (locale && !SUPPORTED_LOCALES.includes(locale))) {\n    localeArg = DEFAULT_LOCALE\n  } else {\n    localeArg = [locale, DEFAULT_LOCALE]\n  }\n  options.minimumFractionDigits = options.minimumFractionDigits || fixedDecimals\n  options.maximumFractionDigits = options.maximumFractionDigits || fixedDecimals\n\n  // Fixed decimals should override significant figures.\n  options.maximumSignificantDigits = options.maximumSignificantDigits || fixedDecimals ? undefined : sigFigs\n\n  let numberString: number\n  if (typeof number === 'number') {\n    numberString = fixedDecimals ? parseFloat(number.toFixed(fixedDecimals)) : number\n  } else {\n    const baseString = parseFloat(number.toSignificant(sigFigs))\n    numberString = fixedDecimals ? parseFloat(baseString.toFixed(fixedDecimals)) : baseString\n  }\n\n  return numberString.toLocaleString(localeArg, options)\n}\n"],"mappings":"AACA,SAASA,cAAc,EAAEC,iBAAiB,QAAQ,mBAAmB;AAUrE,eAAe,SAASC,kBAAkB,OAMP;EAAA,IANQ;IACzCC,MAAM;IACNC,MAAM;IACNC,OAAO;IACPC,aAAa;IACbC,OAAO,GAAG,CAAC;EACW,CAAC;EACvB,IAAIC,SAA4B;EAChC,IAAI,CAACJ,MAAM,IAAKA,MAAM,IAAI,CAACH,iBAAiB,CAACQ,QAAQ,CAACL,MAAM,CAAE,EAAE;IAC9DI,SAAS,GAAGR,cAAc;EAC5B,CAAC,MAAM;IACLQ,SAAS,GAAG,CAACJ,MAAM,EAAEJ,cAAc,CAAC;EACtC;EACAO,OAAO,CAACG,qBAAqB,GAAGH,OAAO,CAACG,qBAAqB,IAAIJ,aAAa;EAC9EC,OAAO,CAACI,qBAAqB,GAAGJ,OAAO,CAACI,qBAAqB,IAAIL,aAAa;;EAE9E;EACAC,OAAO,CAACK,wBAAwB,GAAGL,OAAO,CAACK,wBAAwB,IAAIN,aAAa,GAAGO,SAAS,GAAGR,OAAO;EAE1G,IAAIS,YAAoB;EACxB,IAAI,OAAOX,MAAM,KAAK,QAAQ,EAAE;IAC9BW,YAAY,GAAGR,aAAa,GAAGS,UAAU,CAACZ,MAAM,CAACa,OAAO,CAACV,aAAa,CAAC,CAAC,GAAGH,MAAM;EACnF,CAAC,MAAM;IACL,MAAMc,UAAU,GAAGF,UAAU,CAACZ,MAAM,CAACe,aAAa,CAACb,OAAO,CAAC,CAAC;IAC5DS,YAAY,GAAGR,aAAa,GAAGS,UAAU,CAACE,UAAU,CAACD,OAAO,CAACV,aAAa,CAAC,CAAC,GAAGW,UAAU;EAC3F;EAEA,OAAOH,YAAY,CAACK,cAAc,CAACX,SAAS,EAAED,OAAO,CAAC;AACxD"},"metadata":{},"sourceType":"module"}