{"ast":null,"code":"import { BigNumber } from '@ethersproject/bignumber';\nimport { formatEther } from '@ethersproject/units';\nimport { getTotalNftValue } from 'nft/utils';\nexport const parseTransactionResponse = (transactionResponse, ethPrice) => {\n  let nftsPurchased = [];\n  let nftsNotPurchased = [];\n  let showPurchasedModal = false;\n  let showRefundModal = false;\n  let totalPurchaseValue = BigNumber.from(0);\n  let totalRefundValue = BigNumber.from(0);\n  let totalUSDRefund = 0;\n  let txFeeFiat = 0;\n  if (transactionResponse !== undefined) {\n    const {\n      nftsPurchased: purchasedNfts,\n      nftsNotPurchased: notPurchasedNfts,\n      txReceipt\n    } = transactionResponse;\n    if (nftsPurchased && nftsNotPurchased && txReceipt) {\n      nftsPurchased = purchasedNfts;\n      nftsNotPurchased = notPurchasedNfts;\n      showPurchasedModal = nftsPurchased.length >= 1;\n      showRefundModal = nftsNotPurchased.length >= 1;\n      totalPurchaseValue = getTotalNftValue(nftsPurchased);\n      totalRefundValue = getTotalNftValue(nftsNotPurchased);\n      totalUSDRefund = totalRefundValue && parseFloat(formatEther(totalRefundValue)) * ethPrice;\n      const txFee = BigNumber.from(txReceipt ? txReceipt.gasUsed : 0).mul(BigNumber.from(txReceipt ? txReceipt.effectiveGasPrice : 0));\n      txFeeFiat = parseFloat(formatEther(txFee)) * ethPrice;\n    }\n  }\n  return {\n    nftsPurchased,\n    nftsNotPurchased,\n    showPurchasedModal,\n    showRefundModal,\n    totalPurchaseValue,\n    totalRefundValue,\n    totalUSDRefund,\n    txFeeFiat\n  };\n};\n\n// Given the length of the array of successfully purchased NFTs, returns the maxHeight and maxWidth of each asset preview\nexport const getSuccessfulImageSize = (numSuccessful, isMobile) => {\n  const sizeModifier = isMobile ? 2 : 1;\n  if (numSuccessful === 1) {\n    return 474 / sizeModifier;\n  } else if (numSuccessful === 2) {\n    return 280 / sizeModifier;\n  } else if (numSuccessful === 3 || numSuccessful >= 5 && numSuccessful < 7) {\n    return 184 / sizeModifier;\n  } else if (numSuccessful === 4 || numSuccessful >= 7 && numSuccessful < 13) {\n    return 136 / sizeModifier;\n  } else if (numSuccessful >= 13 && numSuccessful < 21) {\n    return 108 / sizeModifier;\n  } else return isMobile ? 39 : 64;\n};","map":{"version":3,"names":["BigNumber","formatEther","getTotalNftValue","parseTransactionResponse","transactionResponse","ethPrice","nftsPurchased","nftsNotPurchased","showPurchasedModal","showRefundModal","totalPurchaseValue","from","totalRefundValue","totalUSDRefund","txFeeFiat","undefined","purchasedNfts","notPurchasedNfts","txReceipt","length","parseFloat","txFee","gasUsed","mul","effectiveGasPrice","getSuccessfulImageSize","numSuccessful","isMobile","sizeModifier"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/nft/utils/transactionResponse.ts"],"sourcesContent":["import { BigNumber } from '@ethersproject/bignumber'\nimport { formatEther } from '@ethersproject/units'\nimport { TxResponse, UpdatedGenieAsset } from 'nft/types'\nimport { getTotalNftValue } from 'nft/utils'\n\nexport const parseTransactionResponse = (transactionResponse: TxResponse | undefined, ethPrice: number) => {\n  let nftsPurchased: UpdatedGenieAsset[] = []\n  let nftsNotPurchased: UpdatedGenieAsset[] = []\n  let showPurchasedModal = false\n  let showRefundModal = false\n  let totalPurchaseValue = BigNumber.from(0)\n  let totalRefundValue = BigNumber.from(0)\n  let totalUSDRefund = 0\n  let txFeeFiat = 0\n\n  if (transactionResponse !== undefined) {\n    const { nftsPurchased: purchasedNfts, nftsNotPurchased: notPurchasedNfts, txReceipt } = transactionResponse\n    if (nftsPurchased && nftsNotPurchased && txReceipt) {\n      nftsPurchased = purchasedNfts\n      nftsNotPurchased = notPurchasedNfts\n      showPurchasedModal = nftsPurchased.length >= 1\n      showRefundModal = nftsNotPurchased.length >= 1\n      totalPurchaseValue = getTotalNftValue(nftsPurchased)\n      totalRefundValue = getTotalNftValue(nftsNotPurchased)\n      totalUSDRefund = totalRefundValue && parseFloat(formatEther(totalRefundValue)) * ethPrice\n      const txFee = BigNumber.from(txReceipt ? txReceipt.gasUsed : 0).mul(\n        BigNumber.from(txReceipt ? txReceipt.effectiveGasPrice : 0)\n      )\n      txFeeFiat = parseFloat(formatEther(txFee)) * ethPrice\n    }\n  }\n\n  return {\n    nftsPurchased,\n    nftsNotPurchased,\n    showPurchasedModal,\n    showRefundModal,\n    totalPurchaseValue,\n    totalRefundValue,\n    totalUSDRefund,\n    txFeeFiat,\n  }\n}\n\n// Given the length of the array of successfully purchased NFTs, returns the maxHeight and maxWidth of each asset preview\nexport const getSuccessfulImageSize = (numSuccessful: number, isMobile: boolean) => {\n  const sizeModifier = isMobile ? 2 : 1\n  if (numSuccessful === 1) {\n    return 474 / sizeModifier\n  } else if (numSuccessful === 2) {\n    return 280 / sizeModifier\n  } else if (numSuccessful === 3 || (numSuccessful >= 5 && numSuccessful < 7)) {\n    return 184 / sizeModifier\n  } else if (numSuccessful === 4 || (numSuccessful >= 7 && numSuccessful < 13)) {\n    return 136 / sizeModifier\n  } else if (numSuccessful >= 13 && numSuccessful < 21) {\n    return 108 / sizeModifier\n  } else return isMobile ? 39 : 64\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,0BAA0B;AACpD,SAASC,WAAW,QAAQ,sBAAsB;AAElD,SAASC,gBAAgB,QAAQ,WAAW;AAE5C,OAAO,MAAMC,wBAAwB,GAAG,CAACC,mBAA2C,EAAEC,QAAgB,KAAK;EACzG,IAAIC,aAAkC,GAAG,EAAE;EAC3C,IAAIC,gBAAqC,GAAG,EAAE;EAC9C,IAAIC,kBAAkB,GAAG,KAAK;EAC9B,IAAIC,eAAe,GAAG,KAAK;EAC3B,IAAIC,kBAAkB,GAAGV,SAAS,CAACW,IAAI,CAAC,CAAC,CAAC;EAC1C,IAAIC,gBAAgB,GAAGZ,SAAS,CAACW,IAAI,CAAC,CAAC,CAAC;EACxC,IAAIE,cAAc,GAAG,CAAC;EACtB,IAAIC,SAAS,GAAG,CAAC;EAEjB,IAAIV,mBAAmB,KAAKW,SAAS,EAAE;IACrC,MAAM;MAAET,aAAa,EAAEU,aAAa;MAAET,gBAAgB,EAAEU,gBAAgB;MAAEC;IAAU,CAAC,GAAGd,mBAAmB;IAC3G,IAAIE,aAAa,IAAIC,gBAAgB,IAAIW,SAAS,EAAE;MAClDZ,aAAa,GAAGU,aAAa;MAC7BT,gBAAgB,GAAGU,gBAAgB;MACnCT,kBAAkB,GAAGF,aAAa,CAACa,MAAM,IAAI,CAAC;MAC9CV,eAAe,GAAGF,gBAAgB,CAACY,MAAM,IAAI,CAAC;MAC9CT,kBAAkB,GAAGR,gBAAgB,CAACI,aAAa,CAAC;MACpDM,gBAAgB,GAAGV,gBAAgB,CAACK,gBAAgB,CAAC;MACrDM,cAAc,GAAGD,gBAAgB,IAAIQ,UAAU,CAACnB,WAAW,CAACW,gBAAgB,CAAC,CAAC,GAAGP,QAAQ;MACzF,MAAMgB,KAAK,GAAGrB,SAAS,CAACW,IAAI,CAACO,SAAS,GAAGA,SAAS,CAACI,OAAO,GAAG,CAAC,CAAC,CAACC,GAAG,CACjEvB,SAAS,CAACW,IAAI,CAACO,SAAS,GAAGA,SAAS,CAACM,iBAAiB,GAAG,CAAC,CAAC,CAC5D;MACDV,SAAS,GAAGM,UAAU,CAACnB,WAAW,CAACoB,KAAK,CAAC,CAAC,GAAGhB,QAAQ;IACvD;EACF;EAEA,OAAO;IACLC,aAAa;IACbC,gBAAgB;IAChBC,kBAAkB;IAClBC,eAAe;IACfC,kBAAkB;IAClBE,gBAAgB;IAChBC,cAAc;IACdC;EACF,CAAC;AACH,CAAC;;AAED;AACA,OAAO,MAAMW,sBAAsB,GAAG,CAACC,aAAqB,EAAEC,QAAiB,KAAK;EAClF,MAAMC,YAAY,GAAGD,QAAQ,GAAG,CAAC,GAAG,CAAC;EACrC,IAAID,aAAa,KAAK,CAAC,EAAE;IACvB,OAAO,GAAG,GAAGE,YAAY;EAC3B,CAAC,MAAM,IAAIF,aAAa,KAAK,CAAC,EAAE;IAC9B,OAAO,GAAG,GAAGE,YAAY;EAC3B,CAAC,MAAM,IAAIF,aAAa,KAAK,CAAC,IAAKA,aAAa,IAAI,CAAC,IAAIA,aAAa,GAAG,CAAE,EAAE;IAC3E,OAAO,GAAG,GAAGE,YAAY;EAC3B,CAAC,MAAM,IAAIF,aAAa,KAAK,CAAC,IAAKA,aAAa,IAAI,CAAC,IAAIA,aAAa,GAAG,EAAG,EAAE;IAC5E,OAAO,GAAG,GAAGE,YAAY;EAC3B,CAAC,MAAM,IAAIF,aAAa,IAAI,EAAE,IAAIA,aAAa,GAAG,EAAE,EAAE;IACpD,OAAO,GAAG,GAAGE,YAAY;EAC3B,CAAC,MAAM,OAAOD,QAAQ,GAAG,EAAE,GAAG,EAAE;AAClC,CAAC"},"metadata":{},"sourceType":"module"}