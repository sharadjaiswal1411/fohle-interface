{"ast":null,"code":"import _createClass from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport './_version.js';\n/**\n * `PrecacheFallbackPlugin` allows you to specify an \"offline fallback\"\n * response to be used when a given strategy is unable to generate a response.\n *\n * It does this by intercepting the `handlerDidError` plugin callback\n * and returning a precached response, taking the expected revision parameter\n * into account automatically.\n *\n * Unless you explicitly pass in a `PrecacheController` instance to the\n * constructor, the default instance will be used. Generally speaking, most\n * developers will end up using the default.\n *\n * @memberof module:workbox-precaching\n */\nvar PrecacheFallbackPlugin = /*#__PURE__*/_createClass(\n/**\n * Constructs a new PrecacheFallbackPlugin with the associated fallbackURL.\n *\n * @param {Object} config\n * @param {string} config.fallbackURL A precached URL to use as the fallback\n *     if the associated strategy can't generate a response.\n * @param {PrecacheController} [config.precacheController] An optional\n *     PrecacheController instance. If not provided, the default\n *     PrecacheController will be used.\n */\nfunction PrecacheFallbackPlugin(_ref) {\n  var _this = this;\n  var fallbackURL = _ref.fallbackURL,\n    precacheController = _ref.precacheController;\n  _classCallCheck(this, PrecacheFallbackPlugin);\n  /**\n   * @return {Promise<Response>} The precache response for the fallback URL.\n   *\n   * @private\n   */\n  this.handlerDidError = function () {\n    return _this._precacheController.matchPrecache(_this._fallbackURL);\n  };\n  this._fallbackURL = fallbackURL;\n  this._precacheController = precacheController || getOrCreatePrecacheController();\n});\nexport { PrecacheFallbackPlugin };","map":{"version":3,"names":["getOrCreatePrecacheController","PrecacheFallbackPlugin","fallbackURL","precacheController","handlerDidError","_precacheController","matchPrecache","_fallbackURL"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/workbox-precaching/PrecacheFallbackPlugin.js"],"sourcesContent":["/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport './_version.js';\n/**\n * `PrecacheFallbackPlugin` allows you to specify an \"offline fallback\"\n * response to be used when a given strategy is unable to generate a response.\n *\n * It does this by intercepting the `handlerDidError` plugin callback\n * and returning a precached response, taking the expected revision parameter\n * into account automatically.\n *\n * Unless you explicitly pass in a `PrecacheController` instance to the\n * constructor, the default instance will be used. Generally speaking, most\n * developers will end up using the default.\n *\n * @memberof module:workbox-precaching\n */\nclass PrecacheFallbackPlugin {\n    /**\n     * Constructs a new PrecacheFallbackPlugin with the associated fallbackURL.\n     *\n     * @param {Object} config\n     * @param {string} config.fallbackURL A precached URL to use as the fallback\n     *     if the associated strategy can't generate a response.\n     * @param {PrecacheController} [config.precacheController] An optional\n     *     PrecacheController instance. If not provided, the default\n     *     PrecacheController will be used.\n     */\n    constructor({ fallbackURL, precacheController }) {\n        /**\n         * @return {Promise<Response>} The precache response for the fallback URL.\n         *\n         * @private\n         */\n        this.handlerDidError = () => this._precacheController.matchPrecache(this._fallbackURL);\n        this._fallbackURL = fallbackURL;\n        this._precacheController = precacheController ||\n            getOrCreatePrecacheController();\n    }\n}\nexport { PrecacheFallbackPlugin };\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,6BAA6B,QAAQ,0CAA0C;AACxF,OAAO,eAAe;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA,IAcMC,sBAAsB;AACxB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,sCAAiD;EAAA;EAAA,IAAnCC,WAAW,QAAXA,WAAW;IAAEC,kBAAkB,QAAlBA,kBAAkB;EAAA;EACzC;AACR;AACA;AACA;AACA;EACQ,IAAI,CAACC,eAAe,GAAG;IAAA,OAAM,KAAI,CAACC,mBAAmB,CAACC,aAAa,CAAC,KAAI,CAACC,YAAY,CAAC;EAAA;EACtF,IAAI,CAACA,YAAY,GAAGL,WAAW;EAC/B,IAAI,CAACG,mBAAmB,GAAGF,kBAAkB,IACzCH,6BAA6B,EAAE;AACvC,CAAC;AAEL,SAASC,sBAAsB"},"metadata":{},"sourceType":"module"}