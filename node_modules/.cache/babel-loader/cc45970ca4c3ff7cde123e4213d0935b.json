{"ast":null,"code":"/**\n * Mnemonist Iterable Function\n * ============================\n *\n * Harmonized iteration helpers over mixed iterable targets.\n */\nvar forEach = require('obliterator/foreach');\nvar typed = require('./typed-arrays.js');\n\n/**\n * Function used to determine whether the given object supports array-like\n * random access.\n *\n * @param  {any} target - Target object.\n * @return {boolean}\n */\nfunction isArrayLike(target) {\n  return Array.isArray(target) || typed.isTypedArray(target);\n}\n\n/**\n * Function used to guess the length of the structure over which we are going\n * to iterate.\n *\n * @param  {any} target - Target object.\n * @return {number|undefined}\n */\nfunction guessLength(target) {\n  if (typeof target.length === 'number') return target.length;\n  if (typeof target.size === 'number') return target.size;\n  return;\n}\n\n/**\n * Function used to convert an iterable to an array.\n *\n * @param  {any}   target - Iteration target.\n * @return {array}\n */\nfunction toArray(target) {\n  var l = guessLength(target);\n  var array = typeof l === 'number' ? new Array(l) : [];\n  var i = 0;\n\n  // TODO: we could optimize when given target is array like\n  forEach(target, function (value) {\n    array[i++] = value;\n  });\n  return array;\n}\n\n/**\n * Same as above but returns a supplementary indices array.\n *\n * @param  {any}   target - Iteration target.\n * @return {array}\n */\nfunction toArrayWithIndices(target) {\n  var l = guessLength(target);\n  var IndexArray = typeof l === 'number' ? typed.getPointerArray(l) : Array;\n  var array = typeof l === 'number' ? new Array(l) : [];\n  var indices = typeof l === 'number' ? new IndexArray(l) : [];\n  var i = 0;\n\n  // TODO: we could optimize when given target is array like\n  forEach(target, function (value) {\n    array[i] = value;\n    indices[i] = i++;\n  });\n  return [array, indices];\n}\n\n/**\n * Exporting.\n */\nexports.isArrayLike = isArrayLike;\nexports.guessLength = guessLength;\nexports.toArray = toArray;\nexports.toArrayWithIndices = toArrayWithIndices;","map":{"version":3,"names":["forEach","require","typed","isArrayLike","target","Array","isArray","isTypedArray","guessLength","length","size","toArray","l","array","i","value","toArrayWithIndices","IndexArray","getPointerArray","indices","exports"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/mnemonist/utils/iterables.js"],"sourcesContent":["/**\n * Mnemonist Iterable Function\n * ============================\n *\n * Harmonized iteration helpers over mixed iterable targets.\n */\nvar forEach = require('obliterator/foreach');\n\nvar typed = require('./typed-arrays.js');\n\n/**\n * Function used to determine whether the given object supports array-like\n * random access.\n *\n * @param  {any} target - Target object.\n * @return {boolean}\n */\nfunction isArrayLike(target) {\n  return Array.isArray(target) || typed.isTypedArray(target);\n}\n\n/**\n * Function used to guess the length of the structure over which we are going\n * to iterate.\n *\n * @param  {any} target - Target object.\n * @return {number|undefined}\n */\nfunction guessLength(target) {\n  if (typeof target.length === 'number')\n    return target.length;\n\n  if (typeof target.size === 'number')\n    return target.size;\n\n  return;\n}\n\n/**\n * Function used to convert an iterable to an array.\n *\n * @param  {any}   target - Iteration target.\n * @return {array}\n */\nfunction toArray(target) {\n  var l = guessLength(target);\n\n  var array = typeof l === 'number' ? new Array(l) : [];\n\n  var i = 0;\n\n  // TODO: we could optimize when given target is array like\n  forEach(target, function(value) {\n    array[i++] = value;\n  });\n\n  return array;\n}\n\n/**\n * Same as above but returns a supplementary indices array.\n *\n * @param  {any}   target - Iteration target.\n * @return {array}\n */\nfunction toArrayWithIndices(target) {\n  var l = guessLength(target);\n\n  var IndexArray = typeof l === 'number' ?\n    typed.getPointerArray(l) :\n    Array;\n\n  var array = typeof l === 'number' ? new Array(l) : [];\n  var indices = typeof l === 'number' ? new IndexArray(l) : [];\n\n  var i = 0;\n\n  // TODO: we could optimize when given target is array like\n  forEach(target, function(value) {\n    array[i] = value;\n    indices[i] = i++;\n  });\n\n  return [array, indices];\n}\n\n/**\n * Exporting.\n */\nexports.isArrayLike = isArrayLike;\nexports.guessLength = guessLength;\nexports.toArray = toArray;\nexports.toArrayWithIndices = toArrayWithIndices;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,OAAO,GAAGC,OAAO,CAAC,qBAAqB,CAAC;AAE5C,IAAIC,KAAK,GAAGD,OAAO,CAAC,mBAAmB,CAAC;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,WAAW,CAACC,MAAM,EAAE;EAC3B,OAAOC,KAAK,CAACC,OAAO,CAACF,MAAM,CAAC,IAAIF,KAAK,CAACK,YAAY,CAACH,MAAM,CAAC;AAC5D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASI,WAAW,CAACJ,MAAM,EAAE;EAC3B,IAAI,OAAOA,MAAM,CAACK,MAAM,KAAK,QAAQ,EACnC,OAAOL,MAAM,CAACK,MAAM;EAEtB,IAAI,OAAOL,MAAM,CAACM,IAAI,KAAK,QAAQ,EACjC,OAAON,MAAM,CAACM,IAAI;EAEpB;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,OAAO,CAACP,MAAM,EAAE;EACvB,IAAIQ,CAAC,GAAGJ,WAAW,CAACJ,MAAM,CAAC;EAE3B,IAAIS,KAAK,GAAG,OAAOD,CAAC,KAAK,QAAQ,GAAG,IAAIP,KAAK,CAACO,CAAC,CAAC,GAAG,EAAE;EAErD,IAAIE,CAAC,GAAG,CAAC;;EAET;EACAd,OAAO,CAACI,MAAM,EAAE,UAASW,KAAK,EAAE;IAC9BF,KAAK,CAACC,CAAC,EAAE,CAAC,GAAGC,KAAK;EACpB,CAAC,CAAC;EAEF,OAAOF,KAAK;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASG,kBAAkB,CAACZ,MAAM,EAAE;EAClC,IAAIQ,CAAC,GAAGJ,WAAW,CAACJ,MAAM,CAAC;EAE3B,IAAIa,UAAU,GAAG,OAAOL,CAAC,KAAK,QAAQ,GACpCV,KAAK,CAACgB,eAAe,CAACN,CAAC,CAAC,GACxBP,KAAK;EAEP,IAAIQ,KAAK,GAAG,OAAOD,CAAC,KAAK,QAAQ,GAAG,IAAIP,KAAK,CAACO,CAAC,CAAC,GAAG,EAAE;EACrD,IAAIO,OAAO,GAAG,OAAOP,CAAC,KAAK,QAAQ,GAAG,IAAIK,UAAU,CAACL,CAAC,CAAC,GAAG,EAAE;EAE5D,IAAIE,CAAC,GAAG,CAAC;;EAET;EACAd,OAAO,CAACI,MAAM,EAAE,UAASW,KAAK,EAAE;IAC9BF,KAAK,CAACC,CAAC,CAAC,GAAGC,KAAK;IAChBI,OAAO,CAACL,CAAC,CAAC,GAAGA,CAAC,EAAE;EAClB,CAAC,CAAC;EAEF,OAAO,CAACD,KAAK,EAAEM,OAAO,CAAC;AACzB;;AAEA;AACA;AACA;AACAC,OAAO,CAACjB,WAAW,GAAGA,WAAW;AACjCiB,OAAO,CAACZ,WAAW,GAAGA,WAAW;AACjCY,OAAO,CAACT,OAAO,GAAGA,OAAO;AACzBS,OAAO,CAACJ,kBAAkB,GAAGA,kBAAkB"},"metadata":{},"sourceType":"script"}