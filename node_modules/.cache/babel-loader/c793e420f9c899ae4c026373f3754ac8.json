{"ast":null,"code":"import { Token } from '@uniswap/sdk-core';\nimport axios from 'axios';\nimport _ from 'lodash';\nimport { log } from '../util/log';\nimport { metric, MetricLoggerUnit } from '../util/metric';\nexport class CachingTokenListProvider {\n  /**\n   * Creates an instance of CachingTokenListProvider.\n   * Token metadata (e.g. symbol and decimals) generally don't change so can be cached indefinitely.\n   *\n   * @param chainId The chain id to use.\n   * @param tokenList The token list to get the tokens from.\n   * @param tokenCache Cache instance to hold cached tokens.\n   */\n  constructor(chainId, tokenList, tokenCache) {\n    this.tokenCache = tokenCache;\n    this.CACHE_KEY = tokenInfo => `token-list-token-${this.chainId}/${this.tokenList.name}/${this.tokenList.timestamp}/${this.tokenList.version}/${tokenInfo.address.toLowerCase()}/${tokenInfo.decimals}/${tokenInfo.symbol}/${tokenInfo.name}`;\n    this.chainId = chainId;\n    this.tokenList = tokenList;\n    this.chainToTokenInfos = _.reduce(this.tokenList.tokens, (result, tokenInfo) => {\n      const chainId = tokenInfo.chainId.toString();\n      if (!result[chainId]) {\n        result[chainId] = [];\n      }\n      result[chainId].push(tokenInfo);\n      return result;\n    }, {});\n    this.chainSymbolToTokenInfo = _.mapValues(this.chainToTokenInfos, tokenInfos => _.keyBy(tokenInfos, 'symbol'));\n    this.chainAddressToTokenInfo = _.mapValues(this.chainToTokenInfos, tokenInfos => _.keyBy(tokenInfos, tokenInfo => tokenInfo.address.toLowerCase()));\n  }\n  static async fromTokenListURI(chainId, tokenListURI, tokenCache) {\n    const now = Date.now();\n    const tokenList = await this.buildTokenList(tokenListURI);\n    metric.putMetric('TokenListLoad', Date.now() - now, MetricLoggerUnit.Milliseconds);\n    return new CachingTokenListProvider(chainId, tokenList, tokenCache);\n  }\n  static async buildTokenList(tokenListURI) {\n    log.info(`Getting tokenList from ${tokenListURI}.`);\n    const response = await axios.get(tokenListURI);\n    log.info(`Got tokenList from ${tokenListURI}.`);\n    const {\n      data: tokenList,\n      status\n    } = response;\n    if (status != 200) {\n      log.error({\n        response\n      }, `Unabled to get token list from ${tokenListURI}.`);\n      throw new Error(`Unable to get token list from ${tokenListURI}`);\n    }\n    return tokenList;\n  }\n  static async fromTokenList(chainId, tokenList, tokenCache) {\n    const now = Date.now();\n    const tokenProvider = new CachingTokenListProvider(chainId, tokenList, tokenCache);\n    metric.putMetric('TokenListLoad', Date.now() - now, MetricLoggerUnit.Milliseconds);\n    return tokenProvider;\n  }\n  async getTokens(_addresses) {\n    const addressToToken = {};\n    const symbolToToken = {};\n    for (const address of _addresses) {\n      const token = await this.getTokenByAddress(address);\n      if (!token) {\n        continue;\n      }\n      addressToToken[address.toLowerCase()] = token;\n      if (!token.symbol) {\n        continue;\n      }\n      symbolToToken[token.symbol.toLowerCase()] = token;\n    }\n    return {\n      getTokenByAddress: address => addressToToken[address.toLowerCase()],\n      getTokenBySymbol: symbol => symbolToToken[symbol.toLowerCase()],\n      getAllTokens: () => {\n        return Object.values(addressToToken);\n      }\n    };\n  }\n  async getTokenBySymbol(_symbol) {\n    let symbol = _symbol;\n    // We consider ETH as a regular ERC20 Token throughout this package. We don't use the NativeCurrency object from the sdk.\n    // When we build the calldata for swapping we insert wrapping/unwrapping as needed.\n    if (_symbol == 'ETH') {\n      symbol = 'WETH';\n    }\n    if (!this.chainSymbolToTokenInfo[this.chainId.toString()]) {\n      return undefined;\n    }\n    const tokenInfo = this.chainSymbolToTokenInfo[this.chainId.toString()][symbol];\n    if (!tokenInfo) {\n      return undefined;\n    }\n    const token = await this.buildToken(tokenInfo);\n    return token;\n  }\n  async getTokenByAddress(address) {\n    if (!this.chainAddressToTokenInfo[this.chainId.toString()]) {\n      return undefined;\n    }\n    const tokenInfo = this.chainAddressToTokenInfo[this.chainId.toString()][address.toLowerCase()];\n    if (!tokenInfo) {\n      return undefined;\n    }\n    const token = await this.buildToken(tokenInfo);\n    return token;\n  }\n  async buildToken(tokenInfo) {\n    const cacheKey = this.CACHE_KEY(tokenInfo);\n    const cachedToken = await this.tokenCache.get(cacheKey);\n    if (cachedToken) {\n      return cachedToken;\n    }\n    const token = new Token(this.chainId, tokenInfo.address, tokenInfo.decimals, tokenInfo.symbol, tokenInfo.name);\n    await this.tokenCache.set(cacheKey, token);\n    return token;\n  }\n}","map":{"version":3,"sources":["../../../src/providers/caching-token-list-provider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Token } from '@uniswap/sdk-core';\nimport axios from 'axios';\nimport _ from 'lodash';\nimport { log } from '../util/log';\nimport { metric, MetricLoggerUnit } from '../util/metric';\nexport class CachingTokenListProvider {\n    /**\n     * Creates an instance of CachingTokenListProvider.\n     * Token metadata (e.g. symbol and decimals) generally don't change so can be cached indefinitely.\n     *\n     * @param chainId The chain id to use.\n     * @param tokenList The token list to get the tokens from.\n     * @param tokenCache Cache instance to hold cached tokens.\n     */\n    constructor(chainId, tokenList, tokenCache) {\n        this.tokenCache = tokenCache;\n        this.CACHE_KEY = (tokenInfo) => `token-list-token-${this.chainId}/${this.tokenList.name}/${this.tokenList.timestamp}/${this.tokenList.version}/${tokenInfo.address.toLowerCase()}/${tokenInfo.decimals}/${tokenInfo.symbol}/${tokenInfo.name}`;\n        this.chainId = chainId;\n        this.tokenList = tokenList;\n        this.chainToTokenInfos = _.reduce(this.tokenList.tokens, (result, tokenInfo) => {\n            const chainId = tokenInfo.chainId.toString();\n            if (!result[chainId]) {\n                result[chainId] = [];\n            }\n            result[chainId].push(tokenInfo);\n            return result;\n        }, {});\n        this.chainSymbolToTokenInfo = _.mapValues(this.chainToTokenInfos, (tokenInfos) => _.keyBy(tokenInfos, 'symbol'));\n        this.chainAddressToTokenInfo = _.mapValues(this.chainToTokenInfos, (tokenInfos) => _.keyBy(tokenInfos, (tokenInfo) => tokenInfo.address.toLowerCase()));\n    }\n    static async fromTokenListURI(chainId, tokenListURI, tokenCache) {\n        const now = Date.now();\n        const tokenList = await this.buildTokenList(tokenListURI);\n        metric.putMetric('TokenListLoad', Date.now() - now, MetricLoggerUnit.Milliseconds);\n        return new CachingTokenListProvider(chainId, tokenList, tokenCache);\n    }\n    static async buildTokenList(tokenListURI) {\n        log.info(`Getting tokenList from ${tokenListURI}.`);\n        const response = await axios.get(tokenListURI);\n        log.info(`Got tokenList from ${tokenListURI}.`);\n        const { data: tokenList, status } = response;\n        if (status != 200) {\n            log.error({ response }, `Unabled to get token list from ${tokenListURI}.`);\n            throw new Error(`Unable to get token list from ${tokenListURI}`);\n        }\n        return tokenList;\n    }\n    static async fromTokenList(chainId, tokenList, tokenCache) {\n        const now = Date.now();\n        const tokenProvider = new CachingTokenListProvider(chainId, tokenList, tokenCache);\n        metric.putMetric('TokenListLoad', Date.now() - now, MetricLoggerUnit.Milliseconds);\n        return tokenProvider;\n    }\n    async getTokens(_addresses) {\n        const addressToToken = {};\n        const symbolToToken = {};\n        for (const address of _addresses) {\n            const token = await this.getTokenByAddress(address);\n            if (!token) {\n                continue;\n            }\n            addressToToken[address.toLowerCase()] = token;\n            if (!token.symbol) {\n                continue;\n            }\n            symbolToToken[token.symbol.toLowerCase()] = token;\n        }\n        return {\n            getTokenByAddress: (address) => addressToToken[address.toLowerCase()],\n            getTokenBySymbol: (symbol) => symbolToToken[symbol.toLowerCase()],\n            getAllTokens: () => {\n                return Object.values(addressToToken);\n            },\n        };\n    }\n    async getTokenBySymbol(_symbol) {\n        let symbol = _symbol;\n        // We consider ETH as a regular ERC20 Token throughout this package. We don't use the NativeCurrency object from the sdk.\n        // When we build the calldata for swapping we insert wrapping/unwrapping as needed.\n        if (_symbol == 'ETH') {\n            symbol = 'WETH';\n        }\n        if (!this.chainSymbolToTokenInfo[this.chainId.toString()]) {\n            return undefined;\n        }\n        const tokenInfo = this.chainSymbolToTokenInfo[this.chainId.toString()][symbol];\n        if (!tokenInfo) {\n            return undefined;\n        }\n        const token = await this.buildToken(tokenInfo);\n        return token;\n    }\n    async getTokenByAddress(address) {\n        if (!this.chainAddressToTokenInfo[this.chainId.toString()]) {\n            return undefined;\n        }\n        const tokenInfo = this.chainAddressToTokenInfo[this.chainId.toString()][address.toLowerCase()];\n        if (!tokenInfo) {\n            return undefined;\n        }\n        const token = await this.buildToken(tokenInfo);\n        return token;\n    }\n    async buildToken(tokenInfo) {\n        const cacheKey = this.CACHE_KEY(tokenInfo);\n        const cachedToken = await this.tokenCache.get(cacheKey);\n        if (cachedToken) {\n            return cachedToken;\n        }\n        const token = new Token(this.chainId, tokenInfo.address, tokenInfo.decimals, tokenInfo.symbol, tokenInfo.name);\n        await this.tokenCache.set(cacheKey, token);\n        return token;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGluZy10b2tlbi1saXN0LXByb3ZpZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3Byb3ZpZGVycy9jYWNoaW5nLXRva2VuLWxpc3QtcHJvdmlkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRTFDLE9BQU8sS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUMxQixPQUFPLENBQUMsTUFBTSxRQUFRLENBQUM7QUFHdkIsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUNsQyxPQUFPLEVBQUUsTUFBTSxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFzQjFELE1BQU0sT0FBTyx3QkFBd0I7SUFnQm5DOzs7Ozs7O09BT0c7SUFDSCxZQUNFLE9BQXlCLEVBQ3pCLFNBQW9CLEVBQ1osVUFBeUI7UUFBekIsZUFBVSxHQUFWLFVBQVUsQ0FBZTtRQXhCM0IsY0FBUyxHQUFHLENBQUMsU0FBb0IsRUFBRSxFQUFFLENBQzNDLG9CQUFvQixJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxJQUNyRCxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQ2pCLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLElBQUksU0FBUyxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsSUFDM0QsU0FBUyxDQUFDLFFBQ1osSUFBSSxTQUFTLENBQUMsTUFBTSxJQUFJLFNBQVMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQXFCekMsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7UUFDdkIsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFFM0IsSUFBSSxDQUFDLGlCQUFpQixHQUFHLENBQUMsQ0FBQyxNQUFNLENBQy9CLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUNyQixDQUFDLE1BQTRCLEVBQUUs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"]},"metadata":{},"sourceType":"module"}