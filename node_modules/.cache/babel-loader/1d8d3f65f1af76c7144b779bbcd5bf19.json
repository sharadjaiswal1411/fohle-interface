{"ast":null,"code":"var _s = $RefreshSig$();\nimport TokenLogoLookupTable from 'constants/TokenLogoLookupTable';\nimport { chainIdToNetworkName, getNativeLogoURI } from 'lib/hooks/useCurrencyLogoURIs';\nimport uriToHttp from 'lib/utils/uriToHttp';\nimport { useCallback, useEffect, useState } from 'react';\nimport { isAddress } from 'utils';\nconst BAD_SRCS = {};\n\n// Converts uri's into fetchable urls\nfunction parseLogoSources(uris) {\n  const urls = [];\n  uris.forEach(uri => urls.push(...uriToHttp(uri)));\n  return urls;\n}\n\n// Parses uri's, favors non-coingecko images, and improves coingecko logo quality\nfunction prioritizeLogoSources(uris) {\n  const parsedUris = uris.map(uri => uriToHttp(uri)).flat(1);\n  const preferredUris = [];\n\n  // Consolidate duplicate coingecko urls into one fallback source\n  let coingeckoUrl = undefined;\n  parsedUris.forEach(uri => {\n    if (uri.startsWith('https://assets.coingecko')) {\n      if (!coingeckoUrl) {\n        coingeckoUrl = uri.replace(/small|thumb/g, 'large');\n      }\n    } else {\n      preferredUris.push(uri);\n    }\n  });\n  // Places coingecko urls in the back of the source array\n  return coingeckoUrl ? [...preferredUris, coingeckoUrl] : preferredUris;\n}\nfunction getInitialUrl(address, chainId, isNative) {\n  if (chainId && isNative) return getNativeLogoURI(chainId);\n  const networkName = chainId ? chainIdToNetworkName(chainId) : 'ethereum';\n  const checksummedAddress = isAddress(address);\n  if (checksummedAddress) {\n    return `https://raw.githubusercontent.com/Uniswap/assets/master/blockchains/${networkName}/assets/${checksummedAddress}/logo.png`;\n  } else {\n    return undefined;\n  }\n}\nexport default function useAssetLogoSource(address, chainId, isNative, backupImg) {\n  _s();\n  const [current, setCurrent] = useState(getInitialUrl(address, chainId, isNative));\n  const [fallbackSrcs, setFallbackSrcs] = useState(undefined);\n  useEffect(() => {\n    setCurrent(getInitialUrl(address, chainId, isNative));\n    setFallbackSrcs(undefined);\n  }, [address, chainId, isNative]);\n  const nextSrc = useCallback(() => {\n    if (current) {\n      BAD_SRCS[current] = true;\n    }\n    // Parses and stores logo sources from tokenlists if assets repo url fails\n    if (!fallbackSrcs) {\n      var _TokenLogoLookupTable;\n      const uris = (_TokenLogoLookupTable = TokenLogoLookupTable.getIcons(address)) !== null && _TokenLogoLookupTable !== void 0 ? _TokenLogoLookupTable : [];\n      if (backupImg) uris.push(backupImg);\n      const tokenListIcons = prioritizeLogoSources(parseLogoSources(uris));\n      setCurrent(tokenListIcons.find(src => !BAD_SRCS[src]));\n      setFallbackSrcs(tokenListIcons);\n    } else {\n      setCurrent(fallbackSrcs.find(src => !BAD_SRCS[src]));\n    }\n  }, [current, fallbackSrcs, address, backupImg]);\n  return [current, nextSrc];\n}\n_s(useAssetLogoSource, \"WPeDqI4ZKZ19tTBKAe5JIamV+B4=\");","map":{"version":3,"names":["TokenLogoLookupTable","chainIdToNetworkName","getNativeLogoURI","uriToHttp","useCallback","useEffect","useState","isAddress","BAD_SRCS","parseLogoSources","uris","urls","forEach","uri","push","prioritizeLogoSources","parsedUris","map","flat","preferredUris","coingeckoUrl","undefined","startsWith","replace","getInitialUrl","address","chainId","isNative","networkName","checksummedAddress","useAssetLogoSource","backupImg","current","setCurrent","fallbackSrcs","setFallbackSrcs","nextSrc","getIcons","tokenListIcons","find","src"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/hooks/useAssetLogoSource.ts"],"sourcesContent":["import TokenLogoLookupTable from 'constants/TokenLogoLookupTable'\nimport { chainIdToNetworkName, getNativeLogoURI } from 'lib/hooks/useCurrencyLogoURIs'\nimport uriToHttp from 'lib/utils/uriToHttp'\nimport { useCallback, useEffect, useState } from 'react'\nimport { isAddress } from 'utils'\n\nconst BAD_SRCS: { [tokenAddress: string]: true } = {}\n\n// Converts uri's into fetchable urls\nfunction parseLogoSources(uris: string[]) {\n  const urls: string[] = []\n  uris.forEach((uri) => urls.push(...uriToHttp(uri)))\n  return urls\n}\n\n// Parses uri's, favors non-coingecko images, and improves coingecko logo quality\nfunction prioritizeLogoSources(uris: string[]) {\n  const parsedUris = uris.map((uri) => uriToHttp(uri)).flat(1)\n  const preferredUris: string[] = []\n\n  // Consolidate duplicate coingecko urls into one fallback source\n  let coingeckoUrl: string | undefined = undefined\n\n  parsedUris.forEach((uri) => {\n    if (uri.startsWith('https://assets.coingecko')) {\n      if (!coingeckoUrl) {\n        coingeckoUrl = uri.replace(/small|thumb/g, 'large')\n      }\n    } else {\n      preferredUris.push(uri)\n    }\n  })\n  // Places coingecko urls in the back of the source array\n  return coingeckoUrl ? [...preferredUris, coingeckoUrl] : preferredUris\n}\n\nfunction getInitialUrl(address?: string | null, chainId?: number | null, isNative?: boolean) {\n  if (chainId && isNative) return getNativeLogoURI(chainId)\n\n  const networkName = chainId ? chainIdToNetworkName(chainId) : 'ethereum'\n  const checksummedAddress = isAddress(address)\n  if (checksummedAddress) {\n    return `https://raw.githubusercontent.com/Uniswap/assets/master/blockchains/${networkName}/assets/${checksummedAddress}/logo.png`\n  } else {\n    return undefined\n  }\n}\n\nexport default function useAssetLogoSource(\n  address?: string | null,\n  chainId?: number | null,\n  isNative?: boolean,\n  backupImg?: string | null\n): [string | undefined, () => void] {\n  const [current, setCurrent] = useState<string | undefined>(getInitialUrl(address, chainId, isNative))\n  const [fallbackSrcs, setFallbackSrcs] = useState<string[] | undefined>(undefined)\n\n  useEffect(() => {\n    setCurrent(getInitialUrl(address, chainId, isNative))\n    setFallbackSrcs(undefined)\n  }, [address, chainId, isNative])\n\n  const nextSrc = useCallback(() => {\n    if (current) {\n      BAD_SRCS[current] = true\n    }\n    // Parses and stores logo sources from tokenlists if assets repo url fails\n    if (!fallbackSrcs) {\n      const uris = TokenLogoLookupTable.getIcons(address) ?? []\n      if (backupImg) uris.push(backupImg)\n      const tokenListIcons = prioritizeLogoSources(parseLogoSources(uris))\n\n      setCurrent(tokenListIcons.find((src) => !BAD_SRCS[src]))\n      setFallbackSrcs(tokenListIcons)\n    } else {\n      setCurrent(fallbackSrcs.find((src) => !BAD_SRCS[src]))\n    }\n  }, [current, fallbackSrcs, address, backupImg])\n\n  return [current, nextSrc]\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}