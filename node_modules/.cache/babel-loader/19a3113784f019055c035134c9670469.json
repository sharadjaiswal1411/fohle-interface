{"ast":null,"code":"var _s = $RefreshSig$();\nimport gql from 'graphql-tag';\nimport { useMemo } from 'react';\nimport { useCollectionQuery } from '../__generated__/types-and-hooks';\ngql`\n  query Collection($addresses: [String!]!) {\n    nftCollections(filter: { addresses: $addresses }) {\n      edges {\n        cursor\n        node {\n          bannerImage {\n            url\n          }\n          collectionId\n          description\n          discordUrl\n          homepageUrl\n          image {\n            url\n          }\n          instagramName\n          isVerified\n          name\n          numAssets\n          twitterName\n          nftContracts {\n            address\n            chain\n            name\n            standard\n            symbol\n            totalSupply\n          }\n          traits {\n            name\n            values\n            stats {\n              name\n              value\n              assets\n              listings\n            }\n          }\n          markets(currencies: ETH) {\n            floorPrice {\n              currency\n              value\n            }\n            owners\n            totalVolume {\n              value\n              currency\n            }\n            listings {\n              value\n            }\n            volume(duration: DAY) {\n              value\n              currency\n            }\n            volumePercentChange(duration: DAY) {\n              value\n              currency\n            }\n            floorPricePercentChange(duration: DAY) {\n              value\n              currency\n            }\n            marketplaces {\n              marketplace\n              listings\n              floorPrice\n            }\n          }\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n`;\nexport function useCollection(address) {\n  _s();\n  var _queryData$nftCollect, _queryData$nftCollect2, _queryData$nftCollect3, _queryCollection$mark;\n  const {\n    data: queryData,\n    loading\n  } = useCollectionQuery({\n    variables: {\n      addresses: address\n    }\n  });\n  const queryCollection = queryData === null || queryData === void 0 ? void 0 : (_queryData$nftCollect = queryData.nftCollections) === null || _queryData$nftCollect === void 0 ? void 0 : (_queryData$nftCollect2 = _queryData$nftCollect.edges) === null || _queryData$nftCollect2 === void 0 ? void 0 : (_queryData$nftCollect3 = _queryData$nftCollect2[0]) === null || _queryData$nftCollect3 === void 0 ? void 0 : _queryData$nftCollect3.node;\n  const market = queryCollection === null || queryCollection === void 0 ? void 0 : (_queryCollection$mark = queryCollection.markets) === null || _queryCollection$mark === void 0 ? void 0 : _queryCollection$mark[0];\n  const traits = useMemo(() => {\n    return {};\n  }, []);\n  if (queryCollection === null || queryCollection === void 0 ? void 0 : queryCollection.traits) {\n    queryCollection === null || queryCollection === void 0 ? void 0 : queryCollection.traits.forEach(trait => {\n      if (trait.name && trait.stats) {\n        traits[trait.name] = trait.stats.map(stats => {\n          return {\n            trait_type: stats.name,\n            trait_value: stats.value,\n            trait_count: stats.assets\n          };\n        });\n      }\n    });\n  }\n  return useMemo(() => {\n    var _queryCollection$nftC, _queryCollection$nftC2, _queryCollection$bann, _market$floorPrice, _market$volume, _market$volumePercent, _market$floorPricePer, _queryCollection$bann2, _market$listings, _market$totalVolume, _market$marketplaces, _queryCollection$imag, _queryCollection$imag2;\n    return {\n      data: {\n        address,\n        isVerified: queryCollection === null || queryCollection === void 0 ? void 0 : queryCollection.isVerified,\n        name: queryCollection === null || queryCollection === void 0 ? void 0 : queryCollection.name,\n        description: queryCollection === null || queryCollection === void 0 ? void 0 : queryCollection.description,\n        standard: queryCollection === null || queryCollection === void 0 ? void 0 : (_queryCollection$nftC = queryCollection.nftContracts) === null || _queryCollection$nftC === void 0 ? void 0 : (_queryCollection$nftC2 = _queryCollection$nftC[0]) === null || _queryCollection$nftC2 === void 0 ? void 0 : _queryCollection$nftC2.standard,\n        bannerImageUrl: queryCollection === null || queryCollection === void 0 ? void 0 : (_queryCollection$bann = queryCollection.bannerImage) === null || _queryCollection$bann === void 0 ? void 0 : _queryCollection$bann.url,\n        stats: {\n          num_owners: market === null || market === void 0 ? void 0 : market.owners,\n          floor_price: market === null || market === void 0 ? void 0 : (_market$floorPrice = market.floorPrice) === null || _market$floorPrice === void 0 ? void 0 : _market$floorPrice.value,\n          one_day_volume: market === null || market === void 0 ? void 0 : (_market$volume = market.volume) === null || _market$volume === void 0 ? void 0 : _market$volume.value,\n          one_day_change: market === null || market === void 0 ? void 0 : (_market$volumePercent = market.volumePercentChange) === null || _market$volumePercent === void 0 ? void 0 : _market$volumePercent.value,\n          one_day_floor_change: market === null || market === void 0 ? void 0 : (_market$floorPricePer = market.floorPricePercentChange) === null || _market$floorPricePer === void 0 ? void 0 : _market$floorPricePer.value,\n          banner_image_url: queryCollection === null || queryCollection === void 0 ? void 0 : (_queryCollection$bann2 = queryCollection.bannerImage) === null || _queryCollection$bann2 === void 0 ? void 0 : _queryCollection$bann2.url,\n          total_supply: queryCollection === null || queryCollection === void 0 ? void 0 : queryCollection.numAssets,\n          total_listings: market === null || market === void 0 ? void 0 : (_market$listings = market.listings) === null || _market$listings === void 0 ? void 0 : _market$listings.value,\n          total_volume: market === null || market === void 0 ? void 0 : (_market$totalVolume = market.totalVolume) === null || _market$totalVolume === void 0 ? void 0 : _market$totalVolume.value\n        },\n        traits,\n        marketplaceCount: market === null || market === void 0 ? void 0 : (_market$marketplaces = market.marketplaces) === null || _market$marketplaces === void 0 ? void 0 : _market$marketplaces.map(market => {\n          var _market$marketplace$t, _market$marketplace, _market$listings2, _market$floorPrice2;\n          return {\n            marketplace: (_market$marketplace$t = (_market$marketplace = market.marketplace) === null || _market$marketplace === void 0 ? void 0 : _market$marketplace.toLowerCase()) !== null && _market$marketplace$t !== void 0 ? _market$marketplace$t : '',\n            count: (_market$listings2 = market.listings) !== null && _market$listings2 !== void 0 ? _market$listings2 : 0,\n            floorPrice: (_market$floorPrice2 = market.floorPrice) !== null && _market$floorPrice2 !== void 0 ? _market$floorPrice2 : 0\n          };\n        }),\n        imageUrl: (_queryCollection$imag = queryCollection === null || queryCollection === void 0 ? void 0 : (_queryCollection$imag2 = queryCollection.image) === null || _queryCollection$imag2 === void 0 ? void 0 : _queryCollection$imag2.url) !== null && _queryCollection$imag !== void 0 ? _queryCollection$imag : '',\n        twitterUrl: queryCollection === null || queryCollection === void 0 ? void 0 : queryCollection.twitterName,\n        instagram: queryCollection === null || queryCollection === void 0 ? void 0 : queryCollection.instagramName,\n        discordUrl: queryCollection === null || queryCollection === void 0 ? void 0 : queryCollection.discordUrl,\n        externalUrl: queryCollection === null || queryCollection === void 0 ? void 0 : queryCollection.homepageUrl,\n        rarityVerified: false // TODO update when backend supports\n        // isFoundation: boolean, // TODO ask backend to add\n      },\n\n      loading\n    };\n  }, [address, loading, market, queryCollection, traits]);\n}\n_s(useCollection, \"cuuilPBMN2BqzZmIMhRmec21LfE=\", false, function () {\n  return [useCollectionQuery];\n});","map":{"version":3,"names":["gql","useMemo","useCollectionQuery","useCollection","address","data","queryData","loading","variables","addresses","queryCollection","nftCollections","edges","node","market","markets","traits","forEach","trait","name","stats","map","trait_type","trait_value","value","trait_count","assets","isVerified","description","standard","nftContracts","bannerImageUrl","bannerImage","url","num_owners","owners","floor_price","floorPrice","one_day_volume","volume","one_day_change","volumePercentChange","one_day_floor_change","floorPricePercentChange","banner_image_url","total_supply","numAssets","total_listings","listings","total_volume","totalVolume","marketplaceCount","marketplaces","marketplace","toLowerCase","count","imageUrl","image","twitterUrl","twitterName","instagram","instagramName","discordUrl","externalUrl","homepageUrl","rarityVerified"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/graphql/data/nft/Collection.ts"],"sourcesContent":["import gql from 'graphql-tag'\nimport { GenieCollection, Trait } from 'nft/types'\nimport { useMemo } from 'react'\n\nimport { NftCollection, useCollectionQuery } from '../__generated__/types-and-hooks'\n\ngql`\n  query Collection($addresses: [String!]!) {\n    nftCollections(filter: { addresses: $addresses }) {\n      edges {\n        cursor\n        node {\n          bannerImage {\n            url\n          }\n          collectionId\n          description\n          discordUrl\n          homepageUrl\n          image {\n            url\n          }\n          instagramName\n          isVerified\n          name\n          numAssets\n          twitterName\n          nftContracts {\n            address\n            chain\n            name\n            standard\n            symbol\n            totalSupply\n          }\n          traits {\n            name\n            values\n            stats {\n              name\n              value\n              assets\n              listings\n            }\n          }\n          markets(currencies: ETH) {\n            floorPrice {\n              currency\n              value\n            }\n            owners\n            totalVolume {\n              value\n              currency\n            }\n            listings {\n              value\n            }\n            volume(duration: DAY) {\n              value\n              currency\n            }\n            volumePercentChange(duration: DAY) {\n              value\n              currency\n            }\n            floorPricePercentChange(duration: DAY) {\n              value\n              currency\n            }\n            marketplaces {\n              marketplace\n              listings\n              floorPrice\n            }\n          }\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n`\n\ninterface useCollectionReturnProps {\n  data: GenieCollection\n  loading: boolean\n}\n\nexport function useCollection(address: string): useCollectionReturnProps {\n  const { data: queryData, loading } = useCollectionQuery({\n    variables: {\n      addresses: address,\n    },\n  })\n\n  const queryCollection = queryData?.nftCollections?.edges?.[0]?.node as NonNullable<NftCollection>\n  const market = queryCollection?.markets?.[0]\n  const traits = useMemo(() => {\n    return {} as Record<string, Trait[]>\n  }, [])\n  if (queryCollection?.traits) {\n    queryCollection?.traits.forEach((trait) => {\n      if (trait.name && trait.stats) {\n        traits[trait.name] = trait.stats.map((stats) => {\n          return {\n            trait_type: stats.name,\n            trait_value: stats.value,\n            trait_count: stats.assets,\n          } as Trait\n        })\n      }\n    })\n  }\n  return useMemo(() => {\n    return {\n      data: {\n        address,\n        isVerified: queryCollection?.isVerified,\n        name: queryCollection?.name,\n        description: queryCollection?.description,\n        standard: queryCollection?.nftContracts?.[0]?.standard,\n        bannerImageUrl: queryCollection?.bannerImage?.url,\n        stats: {\n          num_owners: market?.owners,\n          floor_price: market?.floorPrice?.value,\n          one_day_volume: market?.volume?.value,\n          one_day_change: market?.volumePercentChange?.value,\n          one_day_floor_change: market?.floorPricePercentChange?.value,\n          banner_image_url: queryCollection?.bannerImage?.url,\n          total_supply: queryCollection?.numAssets,\n          total_listings: market?.listings?.value,\n          total_volume: market?.totalVolume?.value,\n        },\n        traits,\n        marketplaceCount: market?.marketplaces?.map((market) => {\n          return {\n            marketplace: market.marketplace?.toLowerCase() ?? '',\n            count: market.listings ?? 0,\n            floorPrice: market.floorPrice ?? 0,\n          }\n        }),\n        imageUrl: queryCollection?.image?.url ?? '',\n        twitterUrl: queryCollection?.twitterName,\n        instagram: queryCollection?.instagramName,\n        discordUrl: queryCollection?.discordUrl,\n        externalUrl: queryCollection?.homepageUrl,\n        rarityVerified: false, // TODO update when backend supports\n        // isFoundation: boolean, // TODO ask backend to add\n      },\n      loading,\n    }\n  }, [address, loading, market, queryCollection, traits])\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}