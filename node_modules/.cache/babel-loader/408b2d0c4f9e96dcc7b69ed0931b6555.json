{"ast":null,"code":"import _slicedToArray from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _createForOfIteratorHelper from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _regeneratorRuntime from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { TradeType } from '@uniswap/sdk-core';\nimport { InsufficientInputAmountError, InsufficientReservesError } from '@uniswap/v2-sdk';\nimport { log } from '../../util/log';\nimport { routeToString } from '../../util/routes';\n/**\n * Computes quotes for V2 off-chain. Quotes are computed using the balances\n * of the pools within each route provided.\n *\n * @export\n * @class V2QuoteProvider\n */\nexport var V2QuoteProvider = /*#__PURE__*/function () {\n  /* eslint-disable @typescript-eslint/no-empty-function */\n  function V2QuoteProvider() {\n    _classCallCheck(this, V2QuoteProvider);\n  }\n  /* eslint-enable @typescript-eslint/no-empty-function */\n  _createClass(V2QuoteProvider, [{\n    key: \"getQuotesManyExactIn\",\n    value: function () {\n      var _getQuotesManyExactIn = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(amountIns, routes) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", this.getQuotes(amountIns, routes, TradeType.EXACT_INPUT));\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function getQuotesManyExactIn(_x, _x2) {\n        return _getQuotesManyExactIn.apply(this, arguments);\n      }\n      return getQuotesManyExactIn;\n    }()\n  }, {\n    key: \"getQuotesManyExactOut\",\n    value: function () {\n      var _getQuotesManyExactOut = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(amountOuts, routes) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", this.getQuotes(amountOuts, routes, TradeType.EXACT_OUTPUT));\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function getQuotesManyExactOut(_x3, _x4) {\n        return _getQuotesManyExactOut.apply(this, arguments);\n      }\n      return getQuotesManyExactOut;\n    }()\n  }, {\n    key: \"getQuotes\",\n    value: function () {\n      var _getQuotes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(amounts, routes, tradeType) {\n        var routesWithQuotes, debugStrs, _iterator, _step, route, amountQuotes, insufficientInputAmountErrorCount, insufficientReservesErrorCount, _iterator2, _step2, amount, outputAmount, _iterator3, _step3, pair, _pair$getOutputAmount, _pair$getOutputAmount2, outputAmountNew, inputAmount, i, _pair, _pair$getInputAmount, _pair$getInputAmount2;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                routesWithQuotes = [];\n                debugStrs = [];\n                _iterator = _createForOfIteratorHelper(routes);\n                _context3.prev = 3;\n                _iterator.s();\n              case 5:\n                if ((_step = _iterator.n()).done) {\n                  _context3.next = 46;\n                  break;\n                }\n                route = _step.value;\n                amountQuotes = [];\n                insufficientInputAmountErrorCount = 0;\n                insufficientReservesErrorCount = 0;\n                _iterator2 = _createForOfIteratorHelper(amounts);\n                _context3.prev = 11;\n                _iterator2.s();\n              case 13:\n                if ((_step2 = _iterator2.n()).done) {\n                  _context3.next = 34;\n                  break;\n                }\n                amount = _step2.value;\n                _context3.prev = 15;\n                if (tradeType == TradeType.EXACT_INPUT) {\n                  outputAmount = amount.wrapped;\n                  _iterator3 = _createForOfIteratorHelper(route.pairs);\n                  try {\n                    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                      pair = _step3.value;\n                      _pair$getOutputAmount = pair.getOutputAmount(outputAmount), _pair$getOutputAmount2 = _slicedToArray(_pair$getOutputAmount, 1), outputAmountNew = _pair$getOutputAmount2[0];\n                      outputAmount = outputAmountNew;\n                    }\n                  } catch (err) {\n                    _iterator3.e(err);\n                  } finally {\n                    _iterator3.f();\n                  }\n                  amountQuotes.push({\n                    amount: amount,\n                    quote: BigNumber.from(outputAmount.quotient.toString())\n                  });\n                } else {\n                  inputAmount = amount.wrapped;\n                  for (i = route.pairs.length - 1; i >= 0; i--) {\n                    _pair = route.pairs[i];\n                    _pair$getInputAmount = _pair.getInputAmount(inputAmount);\n                    _pair$getInputAmount2 = _slicedToArray(_pair$getInputAmount, 1);\n                    inputAmount = _pair$getInputAmount2[0];\n                  }\n                  amountQuotes.push({\n                    amount: amount,\n                    quote: BigNumber.from(inputAmount.quotient.toString())\n                  });\n                }\n                _context3.next = 32;\n                break;\n              case 19:\n                _context3.prev = 19;\n                _context3.t0 = _context3[\"catch\"](15);\n                if (!(_context3.t0 instanceof InsufficientInputAmountError)) {\n                  _context3.next = 26;\n                  break;\n                }\n                insufficientInputAmountErrorCount = insufficientInputAmountErrorCount + 1;\n                amountQuotes.push({\n                  amount: amount,\n                  quote: null\n                });\n                _context3.next = 32;\n                break;\n              case 26:\n                if (!(_context3.t0 instanceof InsufficientReservesError)) {\n                  _context3.next = 31;\n                  break;\n                }\n                insufficientReservesErrorCount = insufficientReservesErrorCount + 1;\n                amountQuotes.push({\n                  amount: amount,\n                  quote: null\n                });\n                _context3.next = 32;\n                break;\n              case 31:\n                throw _context3.t0;\n              case 32:\n                _context3.next = 13;\n                break;\n              case 34:\n                _context3.next = 39;\n                break;\n              case 36:\n                _context3.prev = 36;\n                _context3.t1 = _context3[\"catch\"](11);\n                _iterator2.e(_context3.t1);\n              case 39:\n                _context3.prev = 39;\n                _iterator2.f();\n                return _context3.finish(39);\n              case 42:\n                if (insufficientInputAmountErrorCount > 0 || insufficientReservesErrorCount > 0) {\n                  debugStrs.push(\"\".concat([routeToString(route)], \" Input: \").concat(insufficientInputAmountErrorCount, \" Reserves: \").concat(insufficientReservesErrorCount, \" }\"));\n                }\n                routesWithQuotes.push([route, amountQuotes]);\n              case 44:\n                _context3.next = 5;\n                break;\n              case 46:\n                _context3.next = 51;\n                break;\n              case 48:\n                _context3.prev = 48;\n                _context3.t2 = _context3[\"catch\"](3);\n                _iterator.e(_context3.t2);\n              case 51:\n                _context3.prev = 51;\n                _iterator.f();\n                return _context3.finish(51);\n              case 54:\n                if (debugStrs.length > 0) {\n                  log.info({\n                    debugStrs: debugStrs\n                  }, \"Failed quotes for V2 routes\");\n                }\n                return _context3.abrupt(\"return\", {\n                  routesWithQuotes: routesWithQuotes\n                });\n              case 56:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, null, [[3, 48, 51, 54], [11, 36, 39, 42], [15, 19]]);\n      }));\n      function getQuotes(_x5, _x6, _x7) {\n        return _getQuotes.apply(this, arguments);\n      }\n      return getQuotes;\n    }()\n  }]);\n  return V2QuoteProvider;\n}();","map":{"version":3,"sources":["../../../../src/providers/v2/quote-provider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { BigNumber } from '@ethersproject/bignumber';\nimport { TradeType } from '@uniswap/sdk-core';\nimport { InsufficientInputAmountError, InsufficientReservesError, } from '@uniswap/v2-sdk';\nimport { log } from '../../util/log';\nimport { routeToString } from '../../util/routes';\n/**\n * Computes quotes for V2 off-chain. Quotes are computed using the balances\n * of the pools within each route provided.\n *\n * @export\n * @class V2QuoteProvider\n */\nexport class V2QuoteProvider {\n    /* eslint-disable @typescript-eslint/no-empty-function */\n    constructor() { }\n    /* eslint-enable @typescript-eslint/no-empty-function */\n    async getQuotesManyExactIn(amountIns, routes) {\n        return this.getQuotes(amountIns, routes, TradeType.EXACT_INPUT);\n    }\n    async getQuotesManyExactOut(amountOuts, routes) {\n        return this.getQuotes(amountOuts, routes, TradeType.EXACT_OUTPUT);\n    }\n    async getQuotes(amounts, routes, tradeType) {\n        const routesWithQuotes = [];\n        const debugStrs = [];\n        for (const route of routes) {\n            const amountQuotes = [];\n            let insufficientInputAmountErrorCount = 0;\n            let insufficientReservesErrorCount = 0;\n            for (const amount of amounts) {\n                try {\n                    if (tradeType == TradeType.EXACT_INPUT) {\n                        let outputAmount = amount.wrapped;\n                        for (const pair of route.pairs) {\n                            const [outputAmountNew] = pair.getOutputAmount(outputAmount);\n                            outputAmount = outputAmountNew;\n                        }\n                        amountQuotes.push({\n                            amount,\n                            quote: BigNumber.from(outputAmount.quotient.toString()),\n                        });\n                    }\n                    else {\n                        let inputAmount = amount.wrapped;\n                        for (let i = route.pairs.length - 1; i >= 0; i--) {\n                            const pair = route.pairs[i];\n                            [inputAmount] = pair.getInputAmount(inputAmount);\n                        }\n                        amountQuotes.push({\n                            amount,\n                            quote: BigNumber.from(inputAmount.quotient.toString()),\n                        });\n                    }\n                }\n                catch (err) {\n                    // Can fail to get quotes, e.g. throws InsufficientReservesError or InsufficientInputAmountError.\n                    if (err instanceof InsufficientInputAmountError) {\n                        insufficientInputAmountErrorCount =\n                            insufficientInputAmountErrorCount + 1;\n                        amountQuotes.push({ amount, quote: null });\n                    }\n                    else if (err instanceof InsufficientReservesError) {\n                        insufficientReservesErrorCount = insufficientReservesErrorCount + 1;\n                        amountQuotes.push({ amount, quote: null });\n                    }\n                    else {\n                        throw err;\n                    }\n                }\n            }\n            if (insufficientInputAmountErrorCount > 0 ||\n                insufficientReservesErrorCount > 0) {\n                debugStrs.push(`${[\n                    routeToString(route),\n                ]} Input: ${insufficientInputAmountErrorCount} Reserves: ${insufficientReservesErrorCount} }`);\n            }\n            routesWithQuotes.push([route, amountQuotes]);\n        }\n        if (debugStrs.length > 0) {\n            log.info({ debugStrs }, `Failed quotes for V2 routes`);\n        }\n        return {\n            routesWithQuotes,\n        };\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVvdGUtcHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvcHJvdmlkZXJzL3YyL3F1b3RlLXByb3ZpZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNyRCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDOUMsT0FBTyxFQUNMLDRCQUE0QixFQUM1Qix5QkFBeUIsR0FDMUIsTUFBTSxpQkFBaUIsQ0FBQztBQUl6QixPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDckMsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBc0JsRDs7Ozs7O0dBTUc7QUFDSCxNQUFNLE9BQU8sZUFBZTtJQUMxQix5REFBeUQ7SUFDekQsZ0JBQWUsQ0FBQztJQUNoQix3REFBd0Q7SUFFakQsS0FBSyxDQUFDLG9CQUFvQixDQUMvQixTQUEyQixFQUMzQixNQUFpQjtRQUVqQixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFLE1BQU0sRUFBRSxTQUFTLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDbEUsQ0FBQztJQUVNLEtBQUssQ0FBQyxxQkFBcUIsQ0FDaEMsVUFBNEIsRUFDNUIsTUFBaUI7UUFFakIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsRUFBRSxNQUFNLEVBQUUsU0FBUyxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3BFLENBQUM7SUFFTyxLQUFLLENBQUMsU0FBUyxDQUNyQixPQUF5QixFQUN6QixNQUFpQixFQUNqQixTQUFvQjtRQUVwQixNQUFNLGdCQUFnQixHQUF3QixFQUFFLENBQUM7UUFFakQsTUFBTSxTQUFTLEdBQWEsRUFBRSxDQUFDO1FBQy9CLEtBQUssTUFBTSxLQUFLLElBQUksTUFBTSxFQUFFO1lBQzFCLE1BQU0sWUFBWSxHQUFvQixFQUFF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"]},"metadata":{},"sourceType":"module"}