{"ast":null,"code":"import _toConsumableArray from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { getCurrentHub, addGlobalEventProcessor } from '@sentry/core';\nimport { isInstanceOf } from '@sentry/utils';\nimport { exceptionFromError } from '../eventbuilder.js';\nvar DEFAULT_KEY = 'cause';\nvar DEFAULT_LIMIT = 5;\n\n/** Adds SDK info to an event. */\nvar LinkedErrors = /*#__PURE__*/function () {\n  /**\n   * @inheritDoc\n   */\n\n  /**\n   * @inheritDoc\n   */\n\n  /**\n   * @inheritDoc\n   */\n  function LinkedErrors() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, LinkedErrors);\n    ;\n    LinkedErrors.prototype.__init.call(this);\n    this._key = options.key || DEFAULT_KEY;\n    this._limit = options.limit || DEFAULT_LIMIT;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  _createClass(LinkedErrors, [{\n    key: \"__init\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __init() {\n      this.name = LinkedErrors.id;\n    }\n  }, {\n    key: \"setupOnce\",\n    value: function setupOnce() {\n      var client = getCurrentHub().getClient();\n      if (!client) {\n        return;\n      }\n      addGlobalEventProcessor(function (event, hint) {\n        var self = getCurrentHub().getIntegration(LinkedErrors);\n        return self ? _handler(client.getOptions().stackParser, self._key, self._limit, event, hint) : event;\n      });\n    }\n  }], [{\n    key: \"__initStatic\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __initStatic() {\n      this.id = 'LinkedErrors';\n    }\n  }]);\n  return LinkedErrors;\n}();\nLinkedErrors.__initStatic();\n\n/**\n * @inheritDoc\n */\nfunction _handler(parser, key, limit, event, hint) {\n  if (!event.exception || !event.exception.values || !hint || !isInstanceOf(hint.originalException, Error)) {\n    return event;\n  }\n  var linkedErrors = _walkErrorTree(parser, limit, hint.originalException, key);\n  event.exception.values = [].concat(_toConsumableArray(linkedErrors), _toConsumableArray(event.exception.values));\n  return event;\n}\n\n/**\n * JSDOC\n */\nfunction _walkErrorTree(parser, limit, error, key) {\n  var stack = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n  if (!isInstanceOf(error[key], Error) || stack.length + 1 >= limit) {\n    return stack;\n  }\n  var exception = exceptionFromError(parser, error[key]);\n  return _walkErrorTree(parser, limit, error[key], key, [exception].concat(_toConsumableArray(stack)));\n}\nexport { LinkedErrors, _handler, _walkErrorTree };","map":{"version":3,"sources":["../../../../src/integrations/linkederrors.ts"],"names":[],"mappings":";;;;;;AAOA,IAAA,WAAA,GAAA,OAAA;AACA,IAAA,aAAA,GAAA,CAAA;;AAOA;AAAA,IACA,YAAA;EAWA;AACA;AACA;;EAGA;AACA;AACA;;EAGA;AACA;AACA;EACA,wBAAA;IAAA,IAAA,OAAA,uEAAA,CAAA,CAAA;IAAA;IAAA;IAAA,YAAA,CAAA,SAAA,CAAA,MAAA,CAAA,IAAA,CAAA,IAAA,CAAA;IACA,IAAA,CAAA,IAAA,GAAA,OAAA,CAAA,GAAA,IAAA,WAAA;IACA,IAAA,CAAA,MAAA,GAAA,OAAA,CAAA,KAAA,IAAA,aAAA;EACA;;EAEA;AACA;AACA;EAFA;IAAA;IAAA;IAvBA;AACA;AACA;IACA,kBAAA;MAAA,IAAA,CAAA,IAAA,GAAA,YAAA,CAAA,EAAA;IAAA;EAAA;IAAA;IAAA,OAuBA,qBAAA;MACA,IAAA,MAAA,GAAA,aAAA,EAAA,CAAA,SAAA,EAAA;MACA,IAAA,CAAA,MAAA,EAAA;QACA;MACA;MACA,uBAAA,CAAA,UAAA,KAAA,EAAA,IAAA,EAAA;QACA,IAAA,IAAA,GAAA,aAAA,EAAA,CAAA,cAAA,CAAA,YAAA,CAAA;QACA,OAAA,IAAA,GAAA,QAAA,CAAA,MAAA,CAAA,UAAA,EAAA,CAAA,WAAA,EAAA,IAAA,CAAA,IAAA,EAAA,IAAA,CAAA,MAAA,EAAA,KAAA,EAAA,IAAA,CAAA,GAAA,KAAA;MACA,CAAA,CAAA;IACA;EAAA;IAAA;IAAA;IAxCA;AACA;AACA;IACA,wBAAA;MAAA,IAAA,CAAA,EAAA,GAAA,cAAA;IAAA;EAAA;EAAA;AAAA;AAsCA,YAAA,CAAA,YAAA,EAAA;;AAEA;AACA;AACA;AACA,SAAA,QAAA,CACA,MAAA,EACA,GAAA,EACA,KAAA,EACA,KAAA,EACA,IAAA,EACA;EACA,IAAA,CAAA,KAAA,CAAA,SAAA,IAAA,CAAA,KAAA,CAAA,SAAA,CAAA,MAAA,IAAA,CAAA,IAAA,IAAA,CAAA,YAAA,CAAA,IAAA,CAAA,iBAAA,EAAA,KAAA,CAAA,EAAA;IACA,OAAA,KAAA;EACA;EACA,IAAA,YAAA,GAAA,cAAA,CAAA,MAAA,EAAA,KAAA,EAAA,IAAA,CAAA,iBAAA,EAAA,GAAA,CAAA;EACA,KAAA,CAAA,SAAA,CAAA,MAAA,gCAAA,YAAA,sBAAA,KAAA,CAAA,SAAA,CAAA,MAAA,EAAA;EACA,OAAA,KAAA;AACA;;AAEA;AACA;AACA;AACA,SAAA,cAAA,CACA,MAAA,EACA,KAAA,EACA,KAAA,EACA,GAAA,EAEA;EAAA,IADA,KAAA,uEAAA,EAAA;EAEA,IAAA,CAAA,YAAA,CAAA,KAAA,CAAA,GAAA,CAAA,EAAA,KAAA,CAAA,IAAA,KAAA,CAAA,MAAA,GAAA,CAAA,IAAA,KAAA,EAAA;IACA,OAAA,KAAA;EACA;EACA,IAAA,SAAA,GAAA,kBAAA,CAAA,MAAA,EAAA,KAAA,CAAA,GAAA,CAAA,CAAA;EACA,OAAA,cAAA,CAAA,MAAA,EAAA,KAAA,EAAA,KAAA,CAAA,GAAA,CAAA,EAAA,GAAA,GAAA,SAAA,4BAAA,KAAA,GAAA;AACA","sourcesContent":["import { addGlobalEventProcessor, getCurrentHub } from '@sentry/core';\nimport { Event, EventHint, Exception, ExtendedError, Integration, StackParser } from '@sentry/types';\nimport { isInstanceOf } from '@sentry/utils';\n\nimport { BrowserClient } from '../client';\nimport { exceptionFromError } from '../eventbuilder';\n\nconst DEFAULT_KEY = 'cause';\nconst DEFAULT_LIMIT = 5;\n\ninterface LinkedErrorsOptions {\n  key: string;\n  limit: number;\n}\n\n/** Adds SDK info to an event. */\nexport class LinkedErrors implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'LinkedErrors';\n\n  /**\n   * @inheritDoc\n   */\n  public readonly name: string = LinkedErrors.id;\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _key: LinkedErrorsOptions['key'];\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _limit: LinkedErrorsOptions['limit'];\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options: Partial<LinkedErrorsOptions> = {}) {\n    this._key = options.key || DEFAULT_KEY;\n    this._limit = options.limit || DEFAULT_LIMIT;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    const client = getCurrentHub().getClient<BrowserClient>();\n    if (!client) {\n      return;\n    }\n    addGlobalEventProcessor((event: Event, hint?: EventHint) => {\n      const self = getCurrentHub().getIntegration(LinkedErrors);\n      return self ? _handler(client.getOptions().stackParser, self._key, self._limit, event, hint) : event;\n    });\n  }\n}\n\n/**\n * @inheritDoc\n */\nexport function _handler(\n  parser: StackParser,\n  key: string,\n  limit: number,\n  event: Event,\n  hint?: EventHint,\n): Event | null {\n  if (!event.exception || !event.exception.values || !hint || !isInstanceOf(hint.originalException, Error)) {\n    return event;\n  }\n  const linkedErrors = _walkErrorTree(parser, limit, hint.originalException as ExtendedError, key);\n  event.exception.values = [...linkedErrors, ...event.exception.values];\n  return event;\n}\n\n/**\n * JSDOC\n */\nexport function _walkErrorTree(\n  parser: StackParser,\n  limit: number,\n  error: ExtendedError,\n  key: string,\n  stack: Exception[] = [],\n): Exception[] {\n  if (!isInstanceOf(error[key], Error) || stack.length + 1 >= limit) {\n    return stack;\n  }\n  const exception = exceptionFromError(parser, error[key]);\n  return _walkErrorTree(parser, limit, error[key], key, [exception, ...stack]);\n}\n"]},"metadata":{},"sourceType":"module"}