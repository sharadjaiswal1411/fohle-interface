{"ast":null,"code":"var _s = $RefreshSig$();\nimport { sendAnalyticsEvent, useTrace } from '@uniswap/analytics';\nimport { EventName, SectionName } from '@uniswap/analytics-events';\nimport { TradeType, TransactionType as WidgetTransactionType } from '@uniswap/widgets';\nimport { useWeb3React } from '@web3-react/core';\nimport { WrapType } from 'hooks/useWrapCallback';\nimport { formatSwapSignedAnalyticsEventProperties, formatToDecimal, getTokenAddress } from 'lib/utils/analytics';\nimport { useCallback, useMemo } from 'react';\nimport { useTransactionAdder } from 'state/transactions/hooks';\nimport { TransactionType as AppTransactionType } from 'state/transactions/types';\nimport { currencyId } from 'utils/currencyId';\n\n/** Integrates the Widget's transactions, showing the widget's transactions in the app. */\nexport function useSyncWidgetTransactions() {\n  _s();\n  const trace = useTrace({\n    section: SectionName.WIDGET\n  });\n  const {\n    chainId\n  } = useWeb3React();\n  const addTransaction = useTransactionAdder();\n  const onTxSubmit = useCallback((_hash, transaction) => {\n    const {\n      type,\n      response\n    } = transaction.info;\n    if (!type || !response) {\n      return;\n    } else if (type === WidgetTransactionType.WRAP || type === WidgetTransactionType.UNWRAP) {\n      const {\n        type,\n        amount: transactionAmount\n      } = transaction.info;\n      const eventProperties = {\n        // get this info from widget handlers\n        token_in_address: getTokenAddress(transactionAmount.currency),\n        token_out_address: getTokenAddress(transactionAmount.currency.wrapped),\n        token_in_symbol: transactionAmount.currency.symbol,\n        token_out_symbol: transactionAmount.currency.wrapped.symbol,\n        chain_id: transactionAmount.currency.chainId,\n        amount: transactionAmount ? formatToDecimal(transactionAmount, transactionAmount === null || transactionAmount === void 0 ? void 0 : transactionAmount.currency.decimals) : undefined,\n        type: type === WidgetTransactionType.WRAP ? WrapType.WRAP : WrapType.UNWRAP,\n        ...trace\n      };\n      sendAnalyticsEvent(EventName.WRAP_TOKEN_TXN_SUBMITTED, eventProperties);\n      const {\n        amount\n      } = transaction.info;\n      addTransaction(response, {\n        type: AppTransactionType.WRAP,\n        unwrapped: type === WidgetTransactionType.UNWRAP,\n        currencyAmountRaw: amount.quotient.toString(),\n        chainId\n      });\n    } else if (type === WidgetTransactionType.SWAP) {\n      var _transaction$receipt$, _transaction$receipt;\n      const {\n        slippageTolerance,\n        trade,\n        tradeType\n      } = transaction.info;\n      const eventProperties = {\n        ...formatSwapSignedAnalyticsEventProperties({\n          trade,\n          txHash: (_transaction$receipt$ = (_transaction$receipt = transaction.receipt) === null || _transaction$receipt === void 0 ? void 0 : _transaction$receipt.transactionHash) !== null && _transaction$receipt$ !== void 0 ? _transaction$receipt$ : ''\n        }),\n        ...trace\n      };\n      sendAnalyticsEvent(EventName.SWAP_SIGNED, eventProperties);\n      const baseTxInfo = {\n        type: AppTransactionType.SWAP,\n        tradeType,\n        inputCurrencyId: currencyId(trade.inputAmount.currency),\n        outputCurrencyId: currencyId(trade.outputAmount.currency)\n      };\n      if (tradeType === TradeType.EXACT_OUTPUT) {\n        addTransaction(response, {\n          ...baseTxInfo,\n          maximumInputCurrencyAmountRaw: trade.maximumAmountIn(slippageTolerance).quotient.toString(),\n          outputCurrencyAmountRaw: trade.outputAmount.quotient.toString(),\n          expectedInputCurrencyAmountRaw: trade.inputAmount.quotient.toString()\n        });\n      } else {\n        addTransaction(response, {\n          ...baseTxInfo,\n          inputCurrencyAmountRaw: trade.inputAmount.quotient.toString(),\n          expectedOutputCurrencyAmountRaw: trade.outputAmount.quotient.toString(),\n          minimumOutputCurrencyAmountRaw: trade.minimumAmountOut(slippageTolerance).quotient.toString()\n        });\n      }\n    }\n  }, [addTransaction, chainId, trace]);\n  const txHandlers = useMemo(() => ({\n    onTxSubmit\n  }), [onTxSubmit]);\n  return {\n    transactions: {\n      ...txHandlers\n    }\n  };\n}\n_s(useSyncWidgetTransactions, \"F3j+SY7Zbu+AfVCB4myyaa2YViY=\", false, function () {\n  return [useTrace, useWeb3React, useTransactionAdder];\n});","map":{"version":3,"names":["sendAnalyticsEvent","useTrace","EventName","SectionName","TradeType","TransactionType","WidgetTransactionType","useWeb3React","WrapType","formatSwapSignedAnalyticsEventProperties","formatToDecimal","getTokenAddress","useCallback","useMemo","useTransactionAdder","AppTransactionType","currencyId","useSyncWidgetTransactions","trace","section","WIDGET","chainId","addTransaction","onTxSubmit","_hash","transaction","type","response","info","WRAP","UNWRAP","amount","transactionAmount","eventProperties","token_in_address","currency","token_out_address","wrapped","token_in_symbol","symbol","token_out_symbol","chain_id","decimals","undefined","WRAP_TOKEN_TXN_SUBMITTED","unwrapped","currencyAmountRaw","quotient","toString","SWAP","slippageTolerance","trade","tradeType","txHash","receipt","transactionHash","SWAP_SIGNED","baseTxInfo","inputCurrencyId","inputAmount","outputCurrencyId","outputAmount","EXACT_OUTPUT","maximumInputCurrencyAmountRaw","maximumAmountIn","outputCurrencyAmountRaw","expectedInputCurrencyAmountRaw","inputCurrencyAmountRaw","expectedOutputCurrencyAmountRaw","minimumOutputCurrencyAmountRaw","minimumAmountOut","txHandlers","transactions"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/components/Widget/transactions.ts"],"sourcesContent":["import { sendAnalyticsEvent, useTrace } from '@uniswap/analytics'\nimport { EventName, SectionName } from '@uniswap/analytics-events'\nimport {\n  TradeType,\n  Transaction,\n  TransactionEventHandlers,\n  TransactionInfo,\n  TransactionType as WidgetTransactionType,\n} from '@uniswap/widgets'\nimport { useWeb3React } from '@web3-react/core'\nimport { WrapType } from 'hooks/useWrapCallback'\nimport { formatSwapSignedAnalyticsEventProperties, formatToDecimal, getTokenAddress } from 'lib/utils/analytics'\nimport { useCallback, useMemo } from 'react'\nimport { useTransactionAdder } from 'state/transactions/hooks'\nimport {\n  ExactInputSwapTransactionInfo,\n  ExactOutputSwapTransactionInfo,\n  TransactionType as AppTransactionType,\n  WrapTransactionInfo,\n} from 'state/transactions/types'\nimport { currencyId } from 'utils/currencyId'\n\n/** Integrates the Widget's transactions, showing the widget's transactions in the app. */\nexport function useSyncWidgetTransactions() {\n  const trace = useTrace({ section: SectionName.WIDGET })\n\n  const { chainId } = useWeb3React()\n  const addTransaction = useTransactionAdder()\n\n  const onTxSubmit = useCallback(\n    (_hash: string, transaction: Transaction<TransactionInfo>) => {\n      const { type, response } = transaction.info\n\n      if (!type || !response) {\n        return\n      } else if (type === WidgetTransactionType.WRAP || type === WidgetTransactionType.UNWRAP) {\n        const { type, amount: transactionAmount } = transaction.info\n\n        const eventProperties = {\n          // get this info from widget handlers\n          token_in_address: getTokenAddress(transactionAmount.currency),\n          token_out_address: getTokenAddress(transactionAmount.currency.wrapped),\n          token_in_symbol: transactionAmount.currency.symbol,\n          token_out_symbol: transactionAmount.currency.wrapped.symbol,\n          chain_id: transactionAmount.currency.chainId,\n          amount: transactionAmount\n            ? formatToDecimal(transactionAmount, transactionAmount?.currency.decimals)\n            : undefined,\n          type: type === WidgetTransactionType.WRAP ? WrapType.WRAP : WrapType.UNWRAP,\n          ...trace,\n        }\n        sendAnalyticsEvent(EventName.WRAP_TOKEN_TXN_SUBMITTED, eventProperties)\n        const { amount } = transaction.info\n        addTransaction(response, {\n          type: AppTransactionType.WRAP,\n          unwrapped: type === WidgetTransactionType.UNWRAP,\n          currencyAmountRaw: amount.quotient.toString(),\n          chainId,\n        } as WrapTransactionInfo)\n      } else if (type === WidgetTransactionType.SWAP) {\n        const { slippageTolerance, trade, tradeType } = transaction.info\n\n        const eventProperties = {\n          ...formatSwapSignedAnalyticsEventProperties({\n            trade,\n            txHash: transaction.receipt?.transactionHash ?? '',\n          }),\n          ...trace,\n        }\n        sendAnalyticsEvent(EventName.SWAP_SIGNED, eventProperties)\n        const baseTxInfo = {\n          type: AppTransactionType.SWAP,\n          tradeType,\n          inputCurrencyId: currencyId(trade.inputAmount.currency),\n          outputCurrencyId: currencyId(trade.outputAmount.currency),\n        }\n        if (tradeType === TradeType.EXACT_OUTPUT) {\n          addTransaction(response, {\n            ...baseTxInfo,\n            maximumInputCurrencyAmountRaw: trade.maximumAmountIn(slippageTolerance).quotient.toString(),\n            outputCurrencyAmountRaw: trade.outputAmount.quotient.toString(),\n            expectedInputCurrencyAmountRaw: trade.inputAmount.quotient.toString(),\n          } as ExactOutputSwapTransactionInfo)\n        } else {\n          addTransaction(response, {\n            ...baseTxInfo,\n            inputCurrencyAmountRaw: trade.inputAmount.quotient.toString(),\n            expectedOutputCurrencyAmountRaw: trade.outputAmount.quotient.toString(),\n            minimumOutputCurrencyAmountRaw: trade.minimumAmountOut(slippageTolerance).quotient.toString(),\n          } as ExactInputSwapTransactionInfo)\n        }\n      }\n    },\n    [addTransaction, chainId, trace]\n  )\n\n  const txHandlers: TransactionEventHandlers = useMemo(() => ({ onTxSubmit }), [onTxSubmit])\n\n  return { transactions: { ...txHandlers } }\n}\n"],"mappings":";AAAA,SAASA,kBAAkB,EAAEC,QAAQ,QAAQ,oBAAoB;AACjE,SAASC,SAAS,EAAEC,WAAW,QAAQ,2BAA2B;AAClE,SACEC,SAAS,EAITC,eAAe,IAAIC,qBAAqB,QACnC,kBAAkB;AACzB,SAASC,YAAY,QAAQ,kBAAkB;AAC/C,SAASC,QAAQ,QAAQ,uBAAuB;AAChD,SAASC,wCAAwC,EAAEC,eAAe,EAAEC,eAAe,QAAQ,qBAAqB;AAChH,SAASC,WAAW,EAAEC,OAAO,QAAQ,OAAO;AAC5C,SAASC,mBAAmB,QAAQ,0BAA0B;AAC9D,SAGET,eAAe,IAAIU,kBAAkB,QAEhC,0BAA0B;AACjC,SAASC,UAAU,QAAQ,kBAAkB;;AAE7C;AACA,OAAO,SAASC,yBAAyB,GAAG;EAAA;EAC1C,MAAMC,KAAK,GAAGjB,QAAQ,CAAC;IAAEkB,OAAO,EAAEhB,WAAW,CAACiB;EAAO,CAAC,CAAC;EAEvD,MAAM;IAAEC;EAAQ,CAAC,GAAGd,YAAY,EAAE;EAClC,MAAMe,cAAc,GAAGR,mBAAmB,EAAE;EAE5C,MAAMS,UAAU,GAAGX,WAAW,CAC5B,CAACY,KAAa,EAAEC,WAAyC,KAAK;IAC5D,MAAM;MAAEC,IAAI;MAAEC;IAAS,CAAC,GAAGF,WAAW,CAACG,IAAI;IAE3C,IAAI,CAACF,IAAI,IAAI,CAACC,QAAQ,EAAE;MACtB;IACF,CAAC,MAAM,IAAID,IAAI,KAAKpB,qBAAqB,CAACuB,IAAI,IAAIH,IAAI,KAAKpB,qBAAqB,CAACwB,MAAM,EAAE;MACvF,MAAM;QAAEJ,IAAI;QAAEK,MAAM,EAAEC;MAAkB,CAAC,GAAGP,WAAW,CAACG,IAAI;MAE5D,MAAMK,eAAe,GAAG;QACtB;QACAC,gBAAgB,EAAEvB,eAAe,CAACqB,iBAAiB,CAACG,QAAQ,CAAC;QAC7DC,iBAAiB,EAAEzB,eAAe,CAACqB,iBAAiB,CAACG,QAAQ,CAACE,OAAO,CAAC;QACtEC,eAAe,EAAEN,iBAAiB,CAACG,QAAQ,CAACI,MAAM;QAClDC,gBAAgB,EAAER,iBAAiB,CAACG,QAAQ,CAACE,OAAO,CAACE,MAAM;QAC3DE,QAAQ,EAAET,iBAAiB,CAACG,QAAQ,CAACd,OAAO;QAC5CU,MAAM,EAAEC,iBAAiB,GACrBtB,eAAe,CAACsB,iBAAiB,EAAEA,iBAAiB,aAAjBA,iBAAiB,uBAAjBA,iBAAiB,CAAEG,QAAQ,CAACO,QAAQ,CAAC,GACxEC,SAAS;QACbjB,IAAI,EAAEA,IAAI,KAAKpB,qBAAqB,CAACuB,IAAI,GAAGrB,QAAQ,CAACqB,IAAI,GAAGrB,QAAQ,CAACsB,MAAM;QAC3E,GAAGZ;MACL,CAAC;MACDlB,kBAAkB,CAACE,SAAS,CAAC0C,wBAAwB,EAAEX,eAAe,CAAC;MACvE,MAAM;QAAEF;MAAO,CAAC,GAAGN,WAAW,CAACG,IAAI;MACnCN,cAAc,CAACK,QAAQ,EAAE;QACvBD,IAAI,EAAEX,kBAAkB,CAACc,IAAI;QAC7BgB,SAAS,EAAEnB,IAAI,KAAKpB,qBAAqB,CAACwB,MAAM;QAChDgB,iBAAiB,EAAEf,MAAM,CAACgB,QAAQ,CAACC,QAAQ,EAAE;QAC7C3B;MACF,CAAC,CAAwB;IAC3B,CAAC,MAAM,IAAIK,IAAI,KAAKpB,qBAAqB,CAAC2C,IAAI,EAAE;MAAA;MAC9C,MAAM;QAAEC,iBAAiB;QAAEC,KAAK;QAAEC;MAAU,CAAC,GAAG3B,WAAW,CAACG,IAAI;MAEhE,MAAMK,eAAe,GAAG;QACtB,GAAGxB,wCAAwC,CAAC;UAC1C0C,KAAK;UACLE,MAAM,mDAAE5B,WAAW,CAAC6B,OAAO,yDAAnB,qBAAqBC,eAAe,yEAAI;QAClD,CAAC,CAAC;QACF,GAAGrC;MACL,CAAC;MACDlB,kBAAkB,CAACE,SAAS,CAACsD,WAAW,EAAEvB,eAAe,CAAC;MAC1D,MAAMwB,UAAU,GAAG;QACjB/B,IAAI,EAAEX,kBAAkB,CAACkC,IAAI;QAC7BG,SAAS;QACTM,eAAe,EAAE1C,UAAU,CAACmC,KAAK,CAACQ,WAAW,CAACxB,QAAQ,CAAC;QACvDyB,gBAAgB,EAAE5C,UAAU,CAACmC,KAAK,CAACU,YAAY,CAAC1B,QAAQ;MAC1D,CAAC;MACD,IAAIiB,SAAS,KAAKhD,SAAS,CAAC0D,YAAY,EAAE;QACxCxC,cAAc,CAACK,QAAQ,EAAE;UACvB,GAAG8B,UAAU;UACbM,6BAA6B,EAAEZ,KAAK,CAACa,eAAe,CAACd,iBAAiB,CAAC,CAACH,QAAQ,CAACC,QAAQ,EAAE;UAC3FiB,uBAAuB,EAAEd,KAAK,CAACU,YAAY,CAACd,QAAQ,CAACC,QAAQ,EAAE;UAC/DkB,8BAA8B,EAAEf,KAAK,CAACQ,WAAW,CAACZ,QAAQ,CAACC,QAAQ;QACrE,CAAC,CAAmC;MACtC,CAAC,MAAM;QACL1B,cAAc,CAACK,QAAQ,EAAE;UACvB,GAAG8B,UAAU;UACbU,sBAAsB,EAAEhB,KAAK,CAACQ,WAAW,CAACZ,QAAQ,CAACC,QAAQ,EAAE;UAC7DoB,+BAA+B,EAAEjB,KAAK,CAACU,YAAY,CAACd,QAAQ,CAACC,QAAQ,EAAE;UACvEqB,8BAA8B,EAAElB,KAAK,CAACmB,gBAAgB,CAACpB,iBAAiB,CAAC,CAACH,QAAQ,CAACC,QAAQ;QAC7F,CAAC,CAAkC;MACrC;IACF;EACF,CAAC,EACD,CAAC1B,cAAc,EAAED,OAAO,EAAEH,KAAK,CAAC,CACjC;EAED,MAAMqD,UAAoC,GAAG1D,OAAO,CAAC,OAAO;IAAEU;EAAW,CAAC,CAAC,EAAE,CAACA,UAAU,CAAC,CAAC;EAE1F,OAAO;IAAEiD,YAAY,EAAE;MAAE,GAAGD;IAAW;EAAE,CAAC;AAC5C;AAAC,GA5EetD,yBAAyB;EAAA,QACzBhB,QAAQ,EAEFM,YAAY,EACTO,mBAAmB;AAAA"},"metadata":{},"sourceType":"module"}