{"ast":null,"code":"import _objectSpread from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { configureScope } from '@sentry/browser';\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nvar ACTION_BREADCRUMB_CATEGORY = 'redux.action';\nvar ACTION_BREADCRUMB_TYPE = 'info';\nvar defaultOptions = {\n  actionTransformer: function actionTransformer(action) {\n    return action;\n  },\n  stateTransformer: function stateTransformer(state) {\n    return state || null;\n  }\n};\n\n/**\n * Creates an enhancer that would be passed to Redux's createStore to log actions and the latest state to Sentry.\n *\n * @param enhancerOptions Options to pass to the enhancer\n */\nfunction createReduxEnhancer(enhancerOptions) {\n  // Note: We return an any type as to not have type conflicts.\n  var options = _objectSpread(_objectSpread({}, defaultOptions), enhancerOptions);\n  return function (next) {\n    return function (reducer, initialState) {\n      var sentryReducer = function sentryReducer(state, action) {\n        var newState = reducer(state, action);\n        configureScope(function (scope) {\n          /* Action breadcrumbs */\n          var transformedAction = options.actionTransformer(action);\n          if (typeof transformedAction !== 'undefined' && transformedAction !== null) {\n            scope.addBreadcrumb({\n              category: ACTION_BREADCRUMB_CATEGORY,\n              data: transformedAction,\n              type: ACTION_BREADCRUMB_TYPE\n            });\n          }\n\n          /* Set latest state to scope */\n          var transformedState = options.stateTransformer(newState);\n          if (typeof transformedState !== 'undefined' && transformedState !== null) {\n            scope.setContext('state', {\n              state: {\n                type: 'redux',\n                value: transformedState\n              }\n            });\n          } else {\n            scope.setContext('state', null);\n          }\n\n          /* Allow user to configure scope with latest state */\n          // eslint-disable-next-line @typescript-eslint/unbound-method\n          var configureScopeWithState = options.configureScopeWithState;\n          if (typeof configureScopeWithState === 'function') {\n            configureScopeWithState(scope, newState);\n          }\n        });\n        return newState;\n      };\n      return next(sentryReducer, initialState);\n    };\n  };\n}\nexport { createReduxEnhancer };","map":{"version":3,"sources":["../../src/redux.ts"],"names":[],"mappings":";;;AAAA;;AAoEA,IAAA,0BAAA,GAAA,cAAA;AACA,IAAA,sBAAA,GAAA,MAAA;AAEA,IAAA,cAAA,GAAA;EACA,iBAAA,EAAA,2BAAA,MAAA;IAAA,OAAA,MAAA;EAAA;EACA,gBAAA,EAAA,0BAAA,KAAA;IAAA,OAAA,KAAA,IAAA,IAAA;EAAA;AACA,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAA,mBAAA,CAAA,eAAA,EAAA;EACA;EACA,IAAA,OAAA,mCACA,cAAA,GACA,eAAA,CACA;EAEA,OAAA,UAAA,IAAA;IAAA,OACA,UAAA,OAAA,EAAA,YAAA,EAAA;MACA,IAAA,aAAA,GAAA,SAAA,aAAA,CAAA,KAAA,EAAA,MAAA,EAAA;QACA,IAAA,QAAA,GAAA,OAAA,CAAA,KAAA,EAAA,MAAA,CAAA;QAEA,cAAA,CAAA,UAAA,KAAA,EAAA;UACA;UACA,IAAA,iBAAA,GAAA,OAAA,CAAA,iBAAA,CAAA,MAAA,CAAA;UACA,IAAA,OAAA,iBAAA,KAAA,WAAA,IAAA,iBAAA,KAAA,IAAA,EAAA;YACA,KAAA,CAAA,aAAA,CAAA;cACA,QAAA,EAAA,0BAAA;cACA,IAAA,EAAA,iBAAA;cACA,IAAA,EAAA;YACA,CAAA,CAAA;UACA;;UAEA;UACA,IAAA,gBAAA,GAAA,OAAA,CAAA,gBAAA,CAAA,QAAA,CAAA;UACA,IAAA,OAAA,gBAAA,KAAA,WAAA,IAAA,gBAAA,KAAA,IAAA,EAAA;YACA,KAAA,CAAA,UAAA,CAAA,OAAA,EAAA;cAAA,KAAA,EAAA;gBAAA,IAAA,EAAA,OAAA;gBAAA,KAAA,EAAA;cAAA;YAAA,CAAA,CAAA;UACA,CAAA,MAAA;YACA,KAAA,CAAA,UAAA,CAAA,OAAA,EAAA,IAAA,CAAA;UACA;;UAEA;UACA;UACA,IAAA,uBAAA,GAAA,OAAA,CAAA,uBAAA;UACA,IAAA,OAAA,uBAAA,KAAA,UAAA,EAAA;YACA,uBAAA,CAAA,KAAA,EAAA,QAAA,CAAA;UACA;QACA,CAAA,CAAA;QAEA,OAAA,QAAA;MACA,CAAA;MAEA,OAAA,IAAA,CAAA,aAAA,EAAA,YAAA,CAAA;IACA,CAAA;EAAA;AACA","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { configureScope } from '@sentry/browser';\nimport { Scope } from '@sentry/types';\n\ninterface Action<T = any> {\n  type: T;\n}\n\ninterface AnyAction extends Action {\n  [extraProps: string]: any;\n}\n\ntype Reducer<S = any, A extends Action = AnyAction> = (state: S | undefined, action: A) => S;\n\ntype Dispatch<A extends Action = AnyAction> = <T extends A>(action: T, ...extraArgs: any[]) => T;\n\ntype ExtendState<State, Extension> = [Extension] extends [never] ? State : State & Extension;\n\ntype Unsubscribe = () => void;\n\ninterface Store<S = any, A extends Action = AnyAction, StateExt = never, Ext = Record<string, unknown>> {\n  dispatch: Dispatch<A>;\n  getState(): S;\n  subscribe(listener: () => void): Unsubscribe;\n  replaceReducer<NewState, NewActions extends Action>(\n    nextReducer: Reducer<NewState, NewActions>,\n  ): Store<ExtendState<NewState, StateExt>, NewActions, StateExt, Ext> & Ext;\n}\n\ndeclare const $CombinedState: unique symbol;\n\ntype CombinedState<S> = { readonly [$CombinedState]?: undefined } & S;\n\ntype PreloadedState<S> = Required<S> extends {\n  [$CombinedState]: undefined;\n}\n  ? S extends CombinedState<infer S1>\n    ? { [K in keyof S1]?: S1[K] extends Record<string, unknown> ? PreloadedState<S1[K]> : S1[K] }\n    : never\n  : { [K in keyof S]: S[K] extends string | number | boolean | symbol ? S[K] : PreloadedState<S[K]> };\n\ntype StoreEnhancerStoreCreator<Ext = Record<string, unknown>, StateExt = never> = <\n  S = any,\n  A extends Action = AnyAction,\n>(\n  reducer: Reducer<S, A>,\n  preloadedState?: PreloadedState<S>,\n) => Store<ExtendState<S, StateExt>, A, StateExt, Ext> & Ext;\n\nexport interface SentryEnhancerOptions<S = any> {\n  /**\n   * Transforms the state before attaching it to an event.\n   * Use this to remove any private data before sending it to Sentry.\n   * Return null to not attach the state.\n   */\n  stateTransformer(state: S | undefined): (S & any) | null;\n  /**\n   * Transforms the action before sending it as a breadcrumb.\n   * Use this to remove any private data before sending it to Sentry.\n   * Return null to not send the breadcrumb.\n   */\n  actionTransformer(action: AnyAction): AnyAction | null;\n  /**\n   * Called on every state update, configure the Sentry Scope with the redux state.\n   */\n  configureScopeWithState?(scope: Scope, state: S): void;\n}\n\nconst ACTION_BREADCRUMB_CATEGORY = 'redux.action';\nconst ACTION_BREADCRUMB_TYPE = 'info';\n\nconst defaultOptions: SentryEnhancerOptions = {\n  actionTransformer: action => action,\n  stateTransformer: state => state || null,\n};\n\n/**\n * Creates an enhancer that would be passed to Redux's createStore to log actions and the latest state to Sentry.\n *\n * @param enhancerOptions Options to pass to the enhancer\n */\nfunction createReduxEnhancer(enhancerOptions?: Partial<SentryEnhancerOptions>): any {\n  // Note: We return an any type as to not have type conflicts.\n  const options = {\n    ...defaultOptions,\n    ...enhancerOptions,\n  };\n\n  return (next: StoreEnhancerStoreCreator): StoreEnhancerStoreCreator =>\n    <S = any, A extends Action = AnyAction>(reducer: Reducer<S, A>, initialState?: PreloadedState<S>) => {\n      const sentryReducer: Reducer<S, A> = (state, action): S => {\n        const newState = reducer(state, action);\n\n        configureScope(scope => {\n          /* Action breadcrumbs */\n          const transformedAction = options.actionTransformer(action);\n          if (typeof transformedAction !== 'undefined' && transformedAction !== null) {\n            scope.addBreadcrumb({\n              category: ACTION_BREADCRUMB_CATEGORY,\n              data: transformedAction,\n              type: ACTION_BREADCRUMB_TYPE,\n            });\n          }\n\n          /* Set latest state to scope */\n          const transformedState = options.stateTransformer(newState);\n          if (typeof transformedState !== 'undefined' && transformedState !== null) {\n            scope.setContext('state', { state: { type: 'redux', value: transformedState } });\n          } else {\n            scope.setContext('state', null);\n          }\n\n          /* Allow user to configure scope with latest state */\n          // eslint-disable-next-line @typescript-eslint/unbound-method\n          const { configureScopeWithState } = options;\n          if (typeof configureScopeWithState === 'function') {\n            configureScopeWithState(scope, newState);\n          }\n        });\n\n        return newState;\n      };\n\n      return next(sentryReducer, initialState);\n    };\n}\n\nexport { createReduxEnhancer };\n"]},"metadata":{},"sourceType":"module"}