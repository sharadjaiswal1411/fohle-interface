{"ast":null,"code":"\"use strict\";\n\n// Copyright (c) 2018-2022 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\nvar _regeneratorRuntime = require(\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\nvar _toConsumableArray = require(\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\nvar _asyncToGenerator = require(\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decrypt = exports.encrypt = void 0;\nvar rxjs_1 = require(\"rxjs\");\nvar util_1 = require(\"../util\");\n/**\n *\n * @param plainText string to be encrypted\n * @param secret hex representation of 32-byte secret\n * returns hex string representation of bytes in the order: initialization vector (iv),\n * auth tag, encrypted plaintext. IV is 12 bytes. Auth tag is 16 bytes. Remaining bytes are the\n * encrypted plainText.\n */\nfunction encrypt(_x, _x2) {\n  return _encrypt.apply(this, arguments);\n}\nfunction _encrypt() {\n  _encrypt = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(plainText, secret) {\n    var ivBytes, secretKey, enc, encryptedResult, tagLength, authTag, encryptedPlaintext, authTagBytes, encryptedPlaintextBytes, concatted;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(secret.length !== 64)) {\n              _context2.next = 2;\n              break;\n            }\n            throw Error(\"secret must be 256 bits\");\n          case 2:\n            ivBytes = crypto.getRandomValues(new Uint8Array(12));\n            _context2.next = 5;\n            return crypto.subtle.importKey(\"raw\", (0, util_1.hexStringToUint8Array)(secret), {\n              name: \"aes-gcm\"\n            }, false, [\"encrypt\", \"decrypt\"]);\n          case 5:\n            secretKey = _context2.sent;\n            enc = new TextEncoder(); // Will return encrypted plainText with auth tag (ie MAC or checksum) appended at the end\n            _context2.next = 9;\n            return window.crypto.subtle.encrypt({\n              name: \"AES-GCM\",\n              iv: ivBytes\n            }, secretKey, enc.encode(plainText));\n          case 9:\n            encryptedResult = _context2.sent;\n            tagLength = 16;\n            authTag = encryptedResult.slice(encryptedResult.byteLength - tagLength);\n            encryptedPlaintext = encryptedResult.slice(0, encryptedResult.byteLength - tagLength);\n            authTagBytes = new Uint8Array(authTag);\n            encryptedPlaintextBytes = new Uint8Array(encryptedPlaintext);\n            concatted = new Uint8Array([].concat(_toConsumableArray(ivBytes), _toConsumableArray(authTagBytes), _toConsumableArray(encryptedPlaintextBytes)));\n            return _context2.abrupt(\"return\", (0, util_1.uint8ArrayToHex)(concatted));\n          case 17:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _encrypt.apply(this, arguments);\n}\nexports.encrypt = encrypt;\n/**\n *\n * @param cipherText hex string representation of bytes in the order: initialization vector (iv),\n * auth tag, encrypted plaintext. IV is 12 bytes. Auth tag is 16 bytes.\n * @param secret hex string representation of 32-byte secret\n *\n * TODO: Update rxjs for promises\n */\nfunction decrypt(cipherText, secret) {\n  if (secret.length !== 64) throw Error(\"secret must be 256 bits\");\n  return new rxjs_1.Observable(function (subscriber) {\n    void _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var secretKey, encrypted, ivBytes, authTagBytes, encryptedPlaintextBytes, concattedBytes, algo, decrypted, decoder;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return crypto.subtle.importKey(\"raw\", (0, util_1.hexStringToUint8Array)(secret), {\n                name: \"aes-gcm\"\n              }, false, [\"encrypt\", \"decrypt\"]);\n            case 2:\n              secretKey = _context.sent;\n              encrypted = (0, util_1.hexStringToUint8Array)(cipherText);\n              ivBytes = encrypted.slice(0, 12);\n              authTagBytes = encrypted.slice(12, 28);\n              encryptedPlaintextBytes = encrypted.slice(28);\n              concattedBytes = new Uint8Array([].concat(_toConsumableArray(encryptedPlaintextBytes), _toConsumableArray(authTagBytes)));\n              algo = {\n                name: \"AES-GCM\",\n                iv: new Uint8Array(ivBytes)\n              };\n              _context.prev = 9;\n              _context.next = 12;\n              return window.crypto.subtle.decrypt(algo, secretKey, concattedBytes);\n            case 12:\n              decrypted = _context.sent;\n              decoder = new TextDecoder();\n              subscriber.next(decoder.decode(decrypted));\n              subscriber.complete();\n              _context.next = 21;\n              break;\n            case 18:\n              _context.prev = 18;\n              _context.t0 = _context[\"catch\"](9);\n              subscriber.error(_context.t0);\n            case 21:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[9, 18]]);\n    }))();\n  });\n}\nexports.decrypt = decrypt;","map":{"version":3,"names":["Object","defineProperty","exports","value","decrypt","encrypt","rxjs_1","require","util_1","plainText","secret","length","Error","ivBytes","crypto","getRandomValues","Uint8Array","subtle","importKey","hexStringToUint8Array","name","secretKey","enc","TextEncoder","window","iv","encode","encryptedResult","tagLength","authTag","slice","byteLength","encryptedPlaintext","authTagBytes","encryptedPlaintextBytes","concatted","uint8ArrayToHex","cipherText","Observable","subscriber","encrypted","concattedBytes","algo","decrypted","decoder","TextDecoder","next","decode","complete","error"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/@coinbase/wallet-sdk/dist/relay/aes256gcm.js"],"sourcesContent":["\"use strict\";\n// Copyright (c) 2018-2022 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decrypt = exports.encrypt = void 0;\nconst rxjs_1 = require(\"rxjs\");\nconst util_1 = require(\"../util\");\n/**\n *\n * @param plainText string to be encrypted\n * @param secret hex representation of 32-byte secret\n * returns hex string representation of bytes in the order: initialization vector (iv),\n * auth tag, encrypted plaintext. IV is 12 bytes. Auth tag is 16 bytes. Remaining bytes are the\n * encrypted plainText.\n */\nasync function encrypt(plainText, secret) {\n    if (secret.length !== 64)\n        throw Error(`secret must be 256 bits`);\n    const ivBytes = crypto.getRandomValues(new Uint8Array(12));\n    const secretKey = await crypto.subtle.importKey(\"raw\", (0, util_1.hexStringToUint8Array)(secret), { name: \"aes-gcm\" }, false, [\"encrypt\", \"decrypt\"]);\n    const enc = new TextEncoder();\n    // Will return encrypted plainText with auth tag (ie MAC or checksum) appended at the end\n    const encryptedResult = await window.crypto.subtle.encrypt({\n        name: \"AES-GCM\",\n        iv: ivBytes,\n    }, secretKey, enc.encode(plainText));\n    const tagLength = 16;\n    const authTag = encryptedResult.slice(encryptedResult.byteLength - tagLength);\n    const encryptedPlaintext = encryptedResult.slice(0, encryptedResult.byteLength - tagLength);\n    const authTagBytes = new Uint8Array(authTag);\n    const encryptedPlaintextBytes = new Uint8Array(encryptedPlaintext);\n    const concatted = new Uint8Array([\n        ...ivBytes,\n        ...authTagBytes,\n        ...encryptedPlaintextBytes,\n    ]);\n    return (0, util_1.uint8ArrayToHex)(concatted);\n}\nexports.encrypt = encrypt;\n/**\n *\n * @param cipherText hex string representation of bytes in the order: initialization vector (iv),\n * auth tag, encrypted plaintext. IV is 12 bytes. Auth tag is 16 bytes.\n * @param secret hex string representation of 32-byte secret\n *\n * TODO: Update rxjs for promises\n */\nfunction decrypt(cipherText, secret) {\n    if (secret.length !== 64)\n        throw Error(`secret must be 256 bits`);\n    return new rxjs_1.Observable(subscriber => {\n        void (async function () {\n            const secretKey = await crypto.subtle.importKey(\"raw\", (0, util_1.hexStringToUint8Array)(secret), { name: \"aes-gcm\" }, false, [\"encrypt\", \"decrypt\"]);\n            const encrypted = (0, util_1.hexStringToUint8Array)(cipherText);\n            const ivBytes = encrypted.slice(0, 12);\n            const authTagBytes = encrypted.slice(12, 28);\n            const encryptedPlaintextBytes = encrypted.slice(28);\n            const concattedBytes = new Uint8Array([\n                ...encryptedPlaintextBytes,\n                ...authTagBytes,\n            ]);\n            const algo = {\n                name: \"AES-GCM\",\n                iv: new Uint8Array(ivBytes),\n            };\n            try {\n                const decrypted = await window.crypto.subtle.decrypt(algo, secretKey, concattedBytes);\n                const decoder = new TextDecoder();\n                subscriber.next(decoder.decode(decrypted));\n                subscriber.complete();\n            }\n            catch (err) {\n                subscriber.error(err);\n            }\n        })();\n    });\n}\nexports.decrypt = decrypt;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}