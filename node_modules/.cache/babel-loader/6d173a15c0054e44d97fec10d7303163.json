{"ast":null,"code":"import { isString } from './is.js';\nimport { getGlobalObject } from './worldwide.js';\n\n// eslint-disable-next-line deprecation/deprecation\nvar WINDOW = getGlobalObject();\n\n/**\n * Given a child DOM element, returns a query-selector statement describing that\n * and its ancestors\n * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nfunction htmlTreeAsString(elem, keyAttrs) {\n  // try/catch both:\n  // - accessing event.target (see getsentry/raven-js#838, #768)\n  // - `htmlTreeAsString` because it's complex, and just accessing the DOM incorrectly\n  // - can throw an exception in some circumstances.\n  try {\n    var currentElem = elem;\n    var MAX_TRAVERSE_HEIGHT = 5;\n    var MAX_OUTPUT_LEN = 80;\n    var out = [];\n    var height = 0;\n    var len = 0;\n    var separator = ' > ';\n    var sepLength = separator.length;\n    var nextStr;\n\n    // eslint-disable-next-line no-plusplus\n    while (currentElem && height++ < MAX_TRAVERSE_HEIGHT) {\n      nextStr = _htmlElementAsString(currentElem, keyAttrs);\n      // bail out if\n      // - nextStr is the 'html' element\n      // - the length of the string that would be created exceeds MAX_OUTPUT_LEN\n      //   (ignore this limit if we are on the first iteration)\n      if (nextStr === 'html' || height > 1 && len + out.length * sepLength + nextStr.length >= MAX_OUTPUT_LEN) {\n        break;\n      }\n      out.push(nextStr);\n      len += nextStr.length;\n      currentElem = currentElem.parentNode;\n    }\n    return out.reverse().join(separator);\n  } catch (_oO) {\n    return '<unknown>';\n  }\n}\n\n/**\n * Returns a simple, query-selector representation of a DOM element\n * e.g. [HTMLElement] => input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nfunction _htmlElementAsString(el, keyAttrs) {\n  var elem = el;\n  var out = [];\n  var className;\n  var classes;\n  var key;\n  var attr;\n  var i;\n  if (!elem || !elem.tagName) {\n    return '';\n  }\n  out.push(elem.tagName.toLowerCase());\n\n  // Pairs of attribute keys defined in `serializeAttribute` and their values on element.\n  var keyAttrPairs = keyAttrs && keyAttrs.length ? keyAttrs.filter(function (keyAttr) {\n    return elem.getAttribute(keyAttr);\n  }).map(function (keyAttr) {\n    return [keyAttr, elem.getAttribute(keyAttr)];\n  }) : null;\n  if (keyAttrPairs && keyAttrPairs.length) {\n    keyAttrPairs.forEach(function (keyAttrPair) {\n      out.push(\"[\".concat(keyAttrPair[0], \"=\\\"\").concat(keyAttrPair[1], \"\\\"]\"));\n    });\n  } else {\n    if (elem.id) {\n      out.push(\"#\".concat(elem.id));\n    }\n\n    // eslint-disable-next-line prefer-const\n    className = elem.className;\n    if (className && isString(className)) {\n      classes = className.split(/\\s+/);\n      for (i = 0; i < classes.length; i++) {\n        out.push(\".\".concat(classes[i]));\n      }\n    }\n  }\n  var allowedAttrs = ['type', 'name', 'title', 'alt'];\n  for (i = 0; i < allowedAttrs.length; i++) {\n    key = allowedAttrs[i];\n    attr = elem.getAttribute(key);\n    if (attr) {\n      out.push(\"[\".concat(key, \"=\\\"\").concat(attr, \"\\\"]\"));\n    }\n  }\n  return out.join('');\n}\n\n/**\n * A safe form of location.href\n */\nfunction getLocationHref() {\n  try {\n    return WINDOW.document.location.href;\n  } catch (oO) {\n    return '';\n  }\n}\n\n/**\n * Gets a DOM element by using document.querySelector.\n *\n * This wrapper will first check for the existance of the function before\n * actually calling it so that we don't have to take care of this check,\n * every time we want to access the DOM.\n *\n * Reason: DOM/querySelector is not available in all environments.\n *\n * We have to cast to any because utils can be consumed by a variety of environments,\n * and we don't want to break TS users. If you know what element will be selected by\n * `document.querySelector`, specify it as part of the generic call. For example,\n * `const element = getDomElement<Element>('selector');`\n *\n * @param selector the selector string passed on to document.querySelector\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction getDomElement(selector) {\n  if (WINDOW.document && WINDOW.document.querySelector) {\n    return WINDOW.document.querySelector(selector);\n  }\n  return null;\n}\nexport { getDomElement, getLocationHref, htmlTreeAsString };","map":{"version":3,"sources":["../../src/browser.ts"],"names":[],"mappings":"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","sourcesContent":["import { isString } from './is';\nimport { getGlobalObject } from './worldwide';\n\n// eslint-disable-next-line deprecation/deprecation\nconst WINDOW = getGlobalObject<Window>();\n\n/**\n * Given a child DOM element, returns a query-selector statement describing that\n * and its ancestors\n * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nexport function htmlTreeAsString(elem: unknown, keyAttrs?: string[]): string {\n  type SimpleNode = {\n    parentNode: SimpleNode;\n  } | null;\n\n  // try/catch both:\n  // - accessing event.target (see getsentry/raven-js#838, #768)\n  // - `htmlTreeAsString` because it's complex, and just accessing the DOM incorrectly\n  // - can throw an exception in some circumstances.\n  try {\n    let currentElem = elem as SimpleNode;\n    const MAX_TRAVERSE_HEIGHT = 5;\n    const MAX_OUTPUT_LEN = 80;\n    const out = [];\n    let height = 0;\n    let len = 0;\n    const separator = ' > ';\n    const sepLength = separator.length;\n    let nextStr;\n\n    // eslint-disable-next-line no-plusplus\n    while (currentElem && height++ < MAX_TRAVERSE_HEIGHT) {\n      nextStr = _htmlElementAsString(currentElem, keyAttrs);\n      // bail out if\n      // - nextStr is the 'html' element\n      // - the length of the string that would be created exceeds MAX_OUTPUT_LEN\n      //   (ignore this limit if we are on the first iteration)\n      if (nextStr === 'html' || (height > 1 && len + out.length * sepLength + nextStr.length >= MAX_OUTPUT_LEN)) {\n        break;\n      }\n\n      out.push(nextStr);\n\n      len += nextStr.length;\n      currentElem = currentElem.parentNode;\n    }\n\n    return out.reverse().join(separator);\n  } catch (_oO) {\n    return '<unknown>';\n  }\n}\n\n/**\n * Returns a simple, query-selector representation of a DOM element\n * e.g. [HTMLElement] => input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nfunction _htmlElementAsString(el: unknown, keyAttrs?: string[]): string {\n  const elem = el as {\n    tagName?: string;\n    id?: string;\n    className?: string;\n    getAttribute(key: string): string;\n  };\n\n  const out = [];\n  let className;\n  let classes;\n  let key;\n  let attr;\n  let i;\n\n  if (!elem || !elem.tagName) {\n    return '';\n  }\n\n  out.push(elem.tagName.toLowerCase());\n\n  // Pairs of attribute keys defined in `serializeAttribute` and their values on element.\n  const keyAttrPairs =\n    keyAttrs && keyAttrs.length\n      ? keyAttrs.filter(keyAttr => elem.getAttribute(keyAttr)).map(keyAttr => [keyAttr, elem.getAttribute(keyAttr)])\n      : null;\n\n  if (keyAttrPairs && keyAttrPairs.length) {\n    keyAttrPairs.forEach(keyAttrPair => {\n      out.push(`[${keyAttrPair[0]}=\"${keyAttrPair[1]}\"]`);\n    });\n  } else {\n    if (elem.id) {\n      out.push(`#${elem.id}`);\n    }\n\n    // eslint-disable-next-line prefer-const\n    className = elem.className;\n    if (className && isString(className)) {\n      classes = className.split(/\\s+/);\n      for (i = 0; i < classes.length; i++) {\n        out.push(`.${classes[i]}`);\n      }\n    }\n  }\n  const allowedAttrs = ['type', 'name', 'title', 'alt'];\n  for (i = 0; i < allowedAttrs.length; i++) {\n    key = allowedAttrs[i];\n    attr = elem.getAttribute(key);\n    if (attr) {\n      out.push(`[${key}=\"${attr}\"]`);\n    }\n  }\n  return out.join('');\n}\n\n/**\n * A safe form of location.href\n */\nexport function getLocationHref(): string {\n  try {\n    return WINDOW.document.location.href;\n  } catch (oO) {\n    return '';\n  }\n}\n\n/**\n * Gets a DOM element by using document.querySelector.\n *\n * This wrapper will first check for the existance of the function before\n * actually calling it so that we don't have to take care of this check,\n * every time we want to access the DOM.\n *\n * Reason: DOM/querySelector is not available in all environments.\n *\n * We have to cast to any because utils can be consumed by a variety of environments,\n * and we don't want to break TS users. If you know what element will be selected by\n * `document.querySelector`, specify it as part of the generic call. For example,\n * `const element = getDomElement<Element>('selector');`\n *\n * @param selector the selector string passed on to document.querySelector\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function getDomElement<E = any>(selector: string): E | null {\n  if (WINDOW.document && WINDOW.document.querySelector) {\n    return WINDOW.document.querySelector(selector) as unknown as E;\n  }\n  return null;\n}\n"]},"metadata":{},"sourceType":"module"}