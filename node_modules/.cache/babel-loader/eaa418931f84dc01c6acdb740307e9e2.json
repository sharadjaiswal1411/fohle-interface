{"ast":null,"code":"import{TradeType}from'@uniswap/sdk-core';import{useMemo}from'react';/**\n * Returns query arguments for the Routing API query or undefined if the\n * query should be skipped. Input arguments do not need to be memoized, as they will\n * be destructured.\n */export function useRoutingAPIArguments(_ref){var tokenIn=_ref.tokenIn,tokenOut=_ref.tokenOut,amount=_ref.amount,tradeType=_ref.tradeType,routerPreference=_ref.routerPreference;return useMemo(function(){return!tokenIn||!tokenOut||!amount||tokenIn.equals(tokenOut)?undefined:{amount:amount.quotient.toString(),tokenInAddress:tokenIn.wrapped.address,tokenInChainId:tokenIn.wrapped.chainId,tokenInDecimals:tokenIn.wrapped.decimals,tokenInSymbol:tokenIn.wrapped.symbol,tokenOutAddress:tokenOut.wrapped.address,tokenOutChainId:tokenOut.wrapped.chainId,tokenOutDecimals:tokenOut.wrapped.decimals,tokenOutSymbol:tokenOut.wrapped.symbol,routerPreference:routerPreference,type:tradeType===TradeType.EXACT_INPUT?'exactIn':'exactOut'};},[amount,routerPreference,tokenIn,tokenOut,tradeType]);}","map":{"version":3,"names":["TradeType","useMemo","useRoutingAPIArguments","tokenIn","tokenOut","amount","tradeType","routerPreference","equals","undefined","quotient","toString","tokenInAddress","wrapped","address","tokenInChainId","chainId","tokenInDecimals","decimals","tokenInSymbol","symbol","tokenOutAddress","tokenOutChainId","tokenOutDecimals","tokenOutSymbol","type","EXACT_INPUT"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/lib/hooks/routing/useRoutingAPIArguments.ts"],"sourcesContent":["import { Currency, CurrencyAmount, TradeType } from '@uniswap/sdk-core'\nimport { useMemo } from 'react'\nimport { RouterPreference } from 'state/routing/slice'\n\n/**\n * Returns query arguments for the Routing API query or undefined if the\n * query should be skipped. Input arguments do not need to be memoized, as they will\n * be destructured.\n */\nexport function useRoutingAPIArguments({\n  tokenIn,\n  tokenOut,\n  amount,\n  tradeType,\n  routerPreference,\n}: {\n  tokenIn: Currency | undefined\n  tokenOut: Currency | undefined\n  amount: CurrencyAmount<Currency> | undefined\n  tradeType: TradeType\n  routerPreference: RouterPreference\n}) {\n  return useMemo(\n    () =>\n      !tokenIn || !tokenOut || !amount || tokenIn.equals(tokenOut)\n        ? undefined\n        : {\n            amount: amount.quotient.toString(),\n            tokenInAddress: tokenIn.wrapped.address,\n            tokenInChainId: tokenIn.wrapped.chainId,\n            tokenInDecimals: tokenIn.wrapped.decimals,\n            tokenInSymbol: tokenIn.wrapped.symbol,\n            tokenOutAddress: tokenOut.wrapped.address,\n            tokenOutChainId: tokenOut.wrapped.chainId,\n            tokenOutDecimals: tokenOut.wrapped.decimals,\n            tokenOutSymbol: tokenOut.wrapped.symbol,\n            routerPreference,\n            type: (tradeType === TradeType.EXACT_INPUT ? 'exactIn' : 'exactOut') as 'exactIn' | 'exactOut',\n          },\n    [amount, routerPreference, tokenIn, tokenOut, tradeType]\n  )\n}\n"],"mappings":"AAAA,OAAmCA,SAAS,KAAQ,mBAAmB,CACvE,OAASC,OAAO,KAAQ,OAAO,CAG/B;AACA;AACA;AACA;AACA,GACA,MAAO,SAASC,uBAAsB,MAYnC,IAXDC,QAAO,MAAPA,OAAO,CACPC,QAAQ,MAARA,QAAQ,CACRC,MAAM,MAANA,MAAM,CACNC,SAAS,MAATA,SAAS,CACTC,gBAAgB,MAAhBA,gBAAgB,CAQhB,MAAON,QAAO,CACZ,iBACE,CAACE,OAAO,EAAI,CAACC,QAAQ,EAAI,CAACC,MAAM,EAAIF,OAAO,CAACK,MAAM,CAACJ,QAAQ,CAAC,CACxDK,SAAS,CACT,CACEJ,MAAM,CAAEA,MAAM,CAACK,QAAQ,CAACC,QAAQ,EAAE,CAClCC,cAAc,CAAET,OAAO,CAACU,OAAO,CAACC,OAAO,CACvCC,cAAc,CAAEZ,OAAO,CAACU,OAAO,CAACG,OAAO,CACvCC,eAAe,CAAEd,OAAO,CAACU,OAAO,CAACK,QAAQ,CACzCC,aAAa,CAAEhB,OAAO,CAACU,OAAO,CAACO,MAAM,CACrCC,eAAe,CAAEjB,QAAQ,CAACS,OAAO,CAACC,OAAO,CACzCQ,eAAe,CAAElB,QAAQ,CAACS,OAAO,CAACG,OAAO,CACzCO,gBAAgB,CAAEnB,QAAQ,CAACS,OAAO,CAACK,QAAQ,CAC3CM,cAAc,CAAEpB,QAAQ,CAACS,OAAO,CAACO,MAAM,CACvCb,gBAAgB,CAAhBA,gBAAgB,CAChBkB,IAAI,CAAGnB,SAAS,GAAKN,SAAS,CAAC0B,WAAW,CAAG,SAAS,CAAG,UAC3D,CAAC,GACP,CAACrB,MAAM,CAAEE,gBAAgB,CAAEJ,OAAO,CAAEC,QAAQ,CAAEE,SAAS,CAAC,CACzD,CACH"},"metadata":{},"sourceType":"module"}