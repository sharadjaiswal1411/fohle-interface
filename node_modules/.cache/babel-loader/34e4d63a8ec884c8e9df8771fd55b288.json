{"ast":null,"code":"import { Fraction } from '@uniswap/sdk-core';\nimport { DEFAULT_LOCALE } from 'constants/locales';\nimport JSBI from 'jsbi';\nimport formatLocaleNumber from 'lib/utils/formatLocaleNumber';\nexport function formatCurrencyAmount(amount, sigFigs) {\n  let locale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_LOCALE;\n  let fixedDecimals = arguments.length > 3 ? arguments[3] : undefined;\n  if (!amount) {\n    return '-';\n  }\n  if (JSBI.equal(amount.quotient, JSBI.BigInt(0))) {\n    return '0';\n  }\n  if (amount.divide(amount.decimalScale).lessThan(new Fraction(1, 100000))) {\n    return `<${formatLocaleNumber({\n      number: 0.00001,\n      locale\n    })}`;\n  }\n  return formatLocaleNumber({\n    number: amount,\n    locale,\n    sigFigs,\n    fixedDecimals\n  });\n}\nexport function formatPrice(price, sigFigs) {\n  let locale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_LOCALE;\n  if (!price) {\n    return '-';\n  }\n  if (parseFloat(price.toFixed(sigFigs)) < 0.0001) {\n    return `<${formatLocaleNumber({\n      number: 0.00001,\n      locale\n    })}`;\n  }\n  return formatLocaleNumber({\n    number: price,\n    locale,\n    sigFigs\n  });\n}","map":{"version":3,"names":["Fraction","DEFAULT_LOCALE","JSBI","formatLocaleNumber","formatCurrencyAmount","amount","sigFigs","locale","fixedDecimals","equal","quotient","BigInt","divide","decimalScale","lessThan","number","formatPrice","price","parseFloat","toFixed"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/utils/formatCurrencyAmount.ts"],"sourcesContent":["import { Currency, CurrencyAmount, Fraction, Price } from '@uniswap/sdk-core'\nimport { DEFAULT_LOCALE, SupportedLocale } from 'constants/locales'\nimport JSBI from 'jsbi'\nimport formatLocaleNumber from 'lib/utils/formatLocaleNumber'\n\nexport function formatCurrencyAmount(\n  amount: CurrencyAmount<Currency> | undefined,\n  sigFigs: number,\n  locale: SupportedLocale = DEFAULT_LOCALE,\n  fixedDecimals?: number\n): string {\n  if (!amount) {\n    return '-'\n  }\n\n  if (JSBI.equal(amount.quotient, JSBI.BigInt(0))) {\n    return '0'\n  }\n\n  if (amount.divide(amount.decimalScale).lessThan(new Fraction(1, 100000))) {\n    return `<${formatLocaleNumber({ number: 0.00001, locale })}`\n  }\n\n  return formatLocaleNumber({ number: amount, locale, sigFigs, fixedDecimals })\n}\n\nexport function formatPrice(\n  price: Price<Currency, Currency> | undefined,\n  sigFigs: number,\n  locale: SupportedLocale = DEFAULT_LOCALE\n): string {\n  if (!price) {\n    return '-'\n  }\n\n  if (parseFloat(price.toFixed(sigFigs)) < 0.0001) {\n    return `<${formatLocaleNumber({ number: 0.00001, locale })}`\n  }\n\n  return formatLocaleNumber({ number: price, locale, sigFigs })\n}\n"],"mappings":"AAAA,SAAmCA,QAAQ,QAAe,mBAAmB;AAC7E,SAASC,cAAc,QAAyB,mBAAmB;AACnE,OAAOC,IAAI,MAAM,MAAM;AACvB,OAAOC,kBAAkB,MAAM,8BAA8B;AAE7D,OAAO,SAASC,oBAAoB,CAClCC,MAA4C,EAC5CC,OAAe,EAGP;EAAA,IAFRC,MAAuB,uEAAGN,cAAc;EAAA,IACxCO,aAAsB;EAEtB,IAAI,CAACH,MAAM,EAAE;IACX,OAAO,GAAG;EACZ;EAEA,IAAIH,IAAI,CAACO,KAAK,CAACJ,MAAM,CAACK,QAAQ,EAAER,IAAI,CAACS,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE;IAC/C,OAAO,GAAG;EACZ;EAEA,IAAIN,MAAM,CAACO,MAAM,CAACP,MAAM,CAACQ,YAAY,CAAC,CAACC,QAAQ,CAAC,IAAId,QAAQ,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,EAAE;IACxE,OAAQ,IAAGG,kBAAkB,CAAC;MAAEY,MAAM,EAAE,OAAO;MAAER;IAAO,CAAC,CAAE,EAAC;EAC9D;EAEA,OAAOJ,kBAAkB,CAAC;IAAEY,MAAM,EAAEV,MAAM;IAAEE,MAAM;IAAED,OAAO;IAAEE;EAAc,CAAC,CAAC;AAC/E;AAEA,OAAO,SAASQ,WAAW,CACzBC,KAA4C,EAC5CX,OAAe,EAEP;EAAA,IADRC,MAAuB,uEAAGN,cAAc;EAExC,IAAI,CAACgB,KAAK,EAAE;IACV,OAAO,GAAG;EACZ;EAEA,IAAIC,UAAU,CAACD,KAAK,CAACE,OAAO,CAACb,OAAO,CAAC,CAAC,GAAG,MAAM,EAAE;IAC/C,OAAQ,IAAGH,kBAAkB,CAAC;MAAEY,MAAM,EAAE,OAAO;MAAER;IAAO,CAAC,CAAE,EAAC;EAC9D;EAEA,OAAOJ,kBAAkB,CAAC;IAAEY,MAAM,EAAEE,KAAK;IAAEV,MAAM;IAAED;EAAQ,CAAC,CAAC;AAC/D"},"metadata":{},"sourceType":"module"}