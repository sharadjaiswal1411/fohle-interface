{"ast":null,"code":"import createLinearScale from './scales/linear';\nimport createLogScale from './scales/log';\nimport createPowScale from './scales/power';\nimport createSqrtScale from './scales/squareRoot';\nimport createSymlogScale from './scales/symlog';\nimport createTimeScale from './scales/time';\nimport createUtcScale from './scales/utc';\nimport createQuantileScale from './scales/quantile';\nimport createQuantizeScale from './scales/quantize';\nimport createThresholdScale from './scales/threshold';\nimport createOrdinalScale from './scales/ordinal';\nimport createPointScale from './scales/point';\nimport createBandScale from './scales/band'; // Overload function for more strict typing, e.g.,\n// If the config is a linear config then a ScaleLinear will be returned\n// instead of a union type of all scales.\n\n// Actual implementation\nfunction createScale(config) {\n  if (typeof config !== 'undefined' && 'type' in config) {\n    switch (config.type) {\n      case 'linear':\n        return createLinearScale(config);\n      case 'log':\n        return createLogScale(config);\n      case 'pow':\n        return createPowScale(config);\n      case 'sqrt':\n        return createSqrtScale(config);\n      case 'symlog':\n        return createSymlogScale(config);\n      case 'time':\n        return createTimeScale(config);\n      case 'utc':\n        return createUtcScale(config);\n      case 'quantile':\n        return createQuantileScale(config);\n      case 'quantize':\n        return createQuantizeScale(config);\n      case 'threshold':\n        return createThresholdScale(config);\n      case 'ordinal':\n        return createOrdinalScale(config);\n      case 'point':\n        return createPointScale(config);\n      case 'band':\n        return createBandScale(config);\n      default:\n    }\n  } // If type is not specified, fallback to linear scale\n\n  return createLinearScale(config);\n}\nexport default createScale;","map":{"version":3,"names":["createLinearScale","createLogScale","createPowScale","createSqrtScale","createSymlogScale","createTimeScale","createUtcScale","createQuantileScale","createQuantizeScale","createThresholdScale","createOrdinalScale","createPointScale","createBandScale","createScale","config","type"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/@visx/scale/esm/createScale.js"],"sourcesContent":["import createLinearScale from './scales/linear';\nimport createLogScale from './scales/log';\nimport createPowScale from './scales/power';\nimport createSqrtScale from './scales/squareRoot';\nimport createSymlogScale from './scales/symlog';\nimport createTimeScale from './scales/time';\nimport createUtcScale from './scales/utc';\nimport createQuantileScale from './scales/quantile';\nimport createQuantizeScale from './scales/quantize';\nimport createThresholdScale from './scales/threshold';\nimport createOrdinalScale from './scales/ordinal';\nimport createPointScale from './scales/point';\nimport createBandScale from './scales/band'; // Overload function for more strict typing, e.g.,\n// If the config is a linear config then a ScaleLinear will be returned\n// instead of a union type of all scales.\n\n// Actual implementation\nfunction createScale(config) {\n  if (typeof config !== 'undefined' && 'type' in config) {\n    switch (config.type) {\n      case 'linear':\n        return createLinearScale(config);\n\n      case 'log':\n        return createLogScale(config);\n\n      case 'pow':\n        return createPowScale(config);\n\n      case 'sqrt':\n        return createSqrtScale(config);\n\n      case 'symlog':\n        return createSymlogScale(config);\n\n      case 'time':\n        return createTimeScale(config);\n\n      case 'utc':\n        return createUtcScale(config);\n\n      case 'quantile':\n        return createQuantileScale(config);\n\n      case 'quantize':\n        return createQuantizeScale(config);\n\n      case 'threshold':\n        return createThresholdScale(config);\n\n      case 'ordinal':\n        return createOrdinalScale(config);\n\n      case 'point':\n        return createPointScale(config);\n\n      case 'band':\n        return createBandScale(config);\n\n      default:\n    }\n  } // If type is not specified, fallback to linear scale\n\n\n  return createLinearScale(config);\n}\n\nexport default createScale;"],"mappings":"AAAA,OAAOA,iBAAiB,MAAM,iBAAiB;AAC/C,OAAOC,cAAc,MAAM,cAAc;AACzC,OAAOC,cAAc,MAAM,gBAAgB;AAC3C,OAAOC,eAAe,MAAM,qBAAqB;AACjD,OAAOC,iBAAiB,MAAM,iBAAiB;AAC/C,OAAOC,eAAe,MAAM,eAAe;AAC3C,OAAOC,cAAc,MAAM,cAAc;AACzC,OAAOC,mBAAmB,MAAM,mBAAmB;AACnD,OAAOC,mBAAmB,MAAM,mBAAmB;AACnD,OAAOC,oBAAoB,MAAM,oBAAoB;AACrD,OAAOC,kBAAkB,MAAM,kBAAkB;AACjD,OAAOC,gBAAgB,MAAM,gBAAgB;AAC7C,OAAOC,eAAe,MAAM,eAAe,CAAC,CAAC;AAC7C;AACA;;AAEA;AACA,SAASC,WAAW,CAACC,MAAM,EAAE;EAC3B,IAAI,OAAOA,MAAM,KAAK,WAAW,IAAI,MAAM,IAAIA,MAAM,EAAE;IACrD,QAAQA,MAAM,CAACC,IAAI;MACjB,KAAK,QAAQ;QACX,OAAOf,iBAAiB,CAACc,MAAM,CAAC;MAElC,KAAK,KAAK;QACR,OAAOb,cAAc,CAACa,MAAM,CAAC;MAE/B,KAAK,KAAK;QACR,OAAOZ,cAAc,CAACY,MAAM,CAAC;MAE/B,KAAK,MAAM;QACT,OAAOX,eAAe,CAACW,MAAM,CAAC;MAEhC,KAAK,QAAQ;QACX,OAAOV,iBAAiB,CAACU,MAAM,CAAC;MAElC,KAAK,MAAM;QACT,OAAOT,eAAe,CAACS,MAAM,CAAC;MAEhC,KAAK,KAAK;QACR,OAAOR,cAAc,CAACQ,MAAM,CAAC;MAE/B,KAAK,UAAU;QACb,OAAOP,mBAAmB,CAACO,MAAM,CAAC;MAEpC,KAAK,UAAU;QACb,OAAON,mBAAmB,CAACM,MAAM,CAAC;MAEpC,KAAK,WAAW;QACd,OAAOL,oBAAoB,CAACK,MAAM,CAAC;MAErC,KAAK,SAAS;QACZ,OAAOJ,kBAAkB,CAACI,MAAM,CAAC;MAEnC,KAAK,OAAO;QACV,OAAOH,gBAAgB,CAACG,MAAM,CAAC;MAEjC,KAAK,MAAM;QACT,OAAOF,eAAe,CAACE,MAAM,CAAC;MAEhC;IAAQ;EAEZ,CAAC,CAAC;;EAGF,OAAOd,iBAAiB,CAACc,MAAM,CAAC;AAClC;AAEA,eAAeD,WAAW"},"metadata":{},"sourceType":"module"}