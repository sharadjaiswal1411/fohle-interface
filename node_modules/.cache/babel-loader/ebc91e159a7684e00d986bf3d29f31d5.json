{"ast":null,"code":"var _s = $RefreshSig$();\nimport { formatEther } from '@ethersproject/units';\nimport { useQuery } from 'react-query';\nexport let Currency;\n(function (Currency) {\n  Currency[\"ETH\"] = \"ETH\";\n  Currency[\"LOOKS\"] = \"LOOKS\";\n  Currency[\"MATIC\"] = \"MATIC\";\n})(Currency || (Currency = {}));\nexport const fetchPrice = async function () {\n  let currency = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Currency.ETH;\n  try {\n    const response = await fetch(`https://api.coinbase.com/v2/exchange-rates?currency=${currency}`);\n    return response.json().then(j => j.data.rates.USD);\n  } catch (e) {\n    console.error(e);\n    return;\n  }\n};\nexport function useUsdPrice(asset) {\n  _s();\n  var _asset$priceInfo, _asset$priceInfo2;\n  const {\n    data: fetchedPriceData\n  } = useQuery(['fetchPrice', {}], () => fetchPrice(), {});\n  return fetchedPriceData && (asset === null || asset === void 0 ? void 0 : (_asset$priceInfo = asset.priceInfo) === null || _asset$priceInfo === void 0 ? void 0 : _asset$priceInfo.ETHPrice) ? (parseFloat(formatEther(asset === null || asset === void 0 ? void 0 : (_asset$priceInfo2 = asset.priceInfo) === null || _asset$priceInfo2 === void 0 ? void 0 : _asset$priceInfo2.ETHPrice)) * fetchedPriceData).toString() : '';\n}\n_s(useUsdPrice, \"0cfHoLVhZf0inkoV4J0SbTFEgzQ=\", false, function () {\n  return [useQuery];\n});","map":{"version":3,"names":["formatEther","useQuery","Currency","fetchPrice","currency","ETH","response","fetch","json","then","j","data","rates","USD","e","console","error","useUsdPrice","asset","fetchedPriceData","priceInfo","ETHPrice","parseFloat","toString"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/nft/utils/fetchPrice.ts"],"sourcesContent":["import { formatEther } from '@ethersproject/units'\nimport { GenieAsset } from 'nft/types'\nimport { useQuery } from 'react-query'\n\nexport enum Currency {\n  ETH = 'ETH',\n  LOOKS = 'LOOKS',\n  MATIC = 'MATIC',\n}\n\nexport const fetchPrice = async (currency: Currency = Currency.ETH): Promise<number | undefined> => {\n  try {\n    const response = await fetch(`https://api.coinbase.com/v2/exchange-rates?currency=${currency}`)\n    return response.json().then((j) => j.data.rates.USD)\n  } catch (e) {\n    console.error(e)\n    return\n  }\n}\n\nexport function useUsdPrice(asset: GenieAsset): string | undefined {\n  const { data: fetchedPriceData } = useQuery(['fetchPrice', {}], () => fetchPrice(), {})\n\n  return fetchedPriceData && asset?.priceInfo?.ETHPrice\n    ? (parseFloat(formatEther(asset?.priceInfo?.ETHPrice)) * fetchedPriceData).toString()\n    : ''\n}\n"],"mappings":";AAAA,SAASA,WAAW,QAAQ,sBAAsB;AAElD,SAASC,QAAQ,QAAQ,aAAa;AAEtC,WAAYC,QAAQ;AAInB,WAJWA,QAAQ;EAARA,QAAQ;EAARA,QAAQ;EAARA,QAAQ;AAAA,GAARA,QAAQ,KAARA,QAAQ;AAMpB,OAAO,MAAMC,UAAU,GAAG,kBAA0E;EAAA,IAAnEC,QAAkB,uEAAGF,QAAQ,CAACG,GAAG;EAChE,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,uDAAsDH,QAAS,EAAC,CAAC;IAC/F,OAAOE,QAAQ,CAACE,IAAI,EAAE,CAACC,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACC,IAAI,CAACC,KAAK,CAACC,GAAG,CAAC;EACtD,CAAC,CAAC,OAAOC,CAAC,EAAE;IACVC,OAAO,CAACC,KAAK,CAACF,CAAC,CAAC;IAChB;EACF;AACF,CAAC;AAED,OAAO,SAASG,WAAW,CAACC,KAAiB,EAAsB;EAAA;EAAA;EACjE,MAAM;IAAEP,IAAI,EAAEQ;EAAiB,CAAC,GAAGlB,QAAQ,CAAC,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC,EAAE,MAAME,UAAU,EAAE,EAAE,CAAC,CAAC,CAAC;EAEvF,OAAOgB,gBAAgB,KAAID,KAAK,aAALA,KAAK,2CAALA,KAAK,CAAEE,SAAS,qDAAhB,iBAAkBC,QAAQ,IACjD,CAACC,UAAU,CAACtB,WAAW,CAACkB,KAAK,aAALA,KAAK,4CAALA,KAAK,CAAEE,SAAS,sDAAhB,kBAAkBC,QAAQ,CAAC,CAAC,GAAGF,gBAAgB,EAAEI,QAAQ,EAAE,GACnF,EAAE;AACR;AAAC,GANeN,WAAW;EAAA,QACUhB,QAAQ;AAAA"},"metadata":{},"sourceType":"module"}