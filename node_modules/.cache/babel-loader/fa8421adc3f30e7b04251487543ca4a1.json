{"ast":null,"code":"var _s = $RefreshSig$();\nimport { usePoolActiveLiquidity } from 'hooks/usePoolTickData';\nimport { useCallback, useMemo } from 'react';\nexport function useDensityChartData(_ref) {\n  _s();\n  let {\n    currencyA,\n    currencyB,\n    feeAmount\n  } = _ref;\n  const {\n    isLoading,\n    error,\n    data\n  } = usePoolActiveLiquidity(currencyA, currencyB, feeAmount);\n  const formatData = useCallback(() => {\n    if (!(data === null || data === void 0 ? void 0 : data.length)) {\n      return undefined;\n    }\n    const newData = [];\n    for (let i = 0; i < data.length; i++) {\n      const t = data[i];\n      const chartEntry = {\n        activeLiquidity: parseFloat(t.liquidityActive.toString()),\n        price0: parseFloat(t.price0)\n      };\n      if (chartEntry.activeLiquidity > 0) {\n        newData.push(chartEntry);\n      }\n    }\n    return newData;\n  }, [data]);\n  return useMemo(() => {\n    return {\n      isLoading,\n      error,\n      formattedData: !isLoading ? formatData() : undefined\n    };\n  }, [isLoading, error, formatData]);\n}\n_s(useDensityChartData, \"njjiEeUkcC3Gd99HmWwVc9l3odE=\", false, function () {\n  return [usePoolActiveLiquidity];\n});","map":{"version":3,"names":["usePoolActiveLiquidity","useCallback","useMemo","useDensityChartData","currencyA","currencyB","feeAmount","isLoading","error","data","formatData","length","undefined","newData","i","t","chartEntry","activeLiquidity","parseFloat","liquidityActive","toString","price0","push","formattedData"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/components/LiquidityChartRangeInput/hooks.ts"],"sourcesContent":["import { Currency } from '@uniswap/sdk-core'\nimport { FeeAmount } from '@uniswap/v3-sdk'\nimport { TickProcessed, usePoolActiveLiquidity } from 'hooks/usePoolTickData'\nimport { useCallback, useMemo } from 'react'\n\nimport { ChartEntry } from './types'\n\nexport function useDensityChartData({\n  currencyA,\n  currencyB,\n  feeAmount,\n}: {\n  currencyA: Currency | undefined\n  currencyB: Currency | undefined\n  feeAmount: FeeAmount | undefined\n}) {\n  const { isLoading, error, data } = usePoolActiveLiquidity(currencyA, currencyB, feeAmount)\n\n  const formatData = useCallback(() => {\n    if (!data?.length) {\n      return undefined\n    }\n\n    const newData: ChartEntry[] = []\n\n    for (let i = 0; i < data.length; i++) {\n      const t: TickProcessed = data[i]\n\n      const chartEntry = {\n        activeLiquidity: parseFloat(t.liquidityActive.toString()),\n        price0: parseFloat(t.price0),\n      }\n\n      if (chartEntry.activeLiquidity > 0) {\n        newData.push(chartEntry)\n      }\n    }\n\n    return newData\n  }, [data])\n\n  return useMemo(() => {\n    return {\n      isLoading,\n      error,\n      formattedData: !isLoading ? formatData() : undefined,\n    }\n  }, [isLoading, error, formatData])\n}\n"],"mappings":";AAEA,SAAwBA,sBAAsB,QAAQ,uBAAuB;AAC7E,SAASC,WAAW,EAAEC,OAAO,QAAQ,OAAO;AAI5C,OAAO,SAASC,mBAAmB,OAQhC;EAAA;EAAA,IARiC;IAClCC,SAAS;IACTC,SAAS;IACTC;EAKF,CAAC;EACC,MAAM;IAAEC,SAAS;IAAEC,KAAK;IAAEC;EAAK,CAAC,GAAGT,sBAAsB,CAACI,SAAS,EAAEC,SAAS,EAAEC,SAAS,CAAC;EAE1F,MAAMI,UAAU,GAAGT,WAAW,CAAC,MAAM;IACnC,IAAI,EAACQ,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEE,MAAM,GAAE;MACjB,OAAOC,SAAS;IAClB;IAEA,MAAMC,OAAqB,GAAG,EAAE;IAEhC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,IAAI,CAACE,MAAM,EAAEG,CAAC,EAAE,EAAE;MACpC,MAAMC,CAAgB,GAAGN,IAAI,CAACK,CAAC,CAAC;MAEhC,MAAME,UAAU,GAAG;QACjBC,eAAe,EAAEC,UAAU,CAACH,CAAC,CAACI,eAAe,CAACC,QAAQ,EAAE,CAAC;QACzDC,MAAM,EAAEH,UAAU,CAACH,CAAC,CAACM,MAAM;MAC7B,CAAC;MAED,IAAIL,UAAU,CAACC,eAAe,GAAG,CAAC,EAAE;QAClCJ,OAAO,CAACS,IAAI,CAACN,UAAU,CAAC;MAC1B;IACF;IAEA,OAAOH,OAAO;EAChB,CAAC,EAAE,CAACJ,IAAI,CAAC,CAAC;EAEV,OAAOP,OAAO,CAAC,MAAM;IACnB,OAAO;MACLK,SAAS;MACTC,KAAK;MACLe,aAAa,EAAE,CAAChB,SAAS,GAAGG,UAAU,EAAE,GAAGE;IAC7C,CAAC;EACH,CAAC,EAAE,CAACL,SAAS,EAAEC,KAAK,EAAEE,UAAU,CAAC,CAAC;AACpC;AAAC,GAzCeP,mBAAmB;EAAA,QASEH,sBAAsB;AAAA"},"metadata":{},"sourceType":"module"}