{"ast":null,"code":"import _objectSpread from\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _taggedTemplateLiteral from\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject,_templateObject2,_templateObject3,_templateObject4,_templateObject5,_templateObject6,_templateObject7,_templateObject8;import{gql}from'@apollo/client';import*as Apollo from'@apollo/client';var defaultOptions={};/** All built-in and custom scalars, mapped to their actual values */export var ActivityType;(function(ActivityType){ActivityType[\"Approve\"]=\"APPROVE\";ActivityType[\"Borrow\"]=\"BORROW\";ActivityType[\"Burn\"]=\"BURN\";ActivityType[\"Cancel\"]=\"CANCEL\";ActivityType[\"Claim\"]=\"CLAIM\";ActivityType[\"Deployment\"]=\"DEPLOYMENT\";ActivityType[\"Lend\"]=\"LEND\";ActivityType[\"Mint\"]=\"MINT\";ActivityType[\"Nft\"]=\"NFT\";ActivityType[\"Receive\"]=\"RECEIVE\";ActivityType[\"Repay\"]=\"REPAY\";ActivityType[\"Send\"]=\"SEND\";ActivityType[\"Stake\"]=\"STAKE\";ActivityType[\"Swap\"]=\"SWAP\";ActivityType[\"Staking\"]=\"Staking\";ActivityType[\"Unknown\"]=\"UNKNOWN\";ActivityType[\"Unstake\"]=\"UNSTAKE\";ActivityType[\"Withdraw\"]=\"WITHDRAW\";ActivityType[\"Market\"]=\"market\";ActivityType[\"Money\"]=\"money\";})(ActivityType||(ActivityType={}));export var Chain;(function(Chain){Chain[\"Arbitrum\"]=\"ARBITRUM\";Chain[\"Celo\"]=\"CELO\";Chain[\"Ethereum\"]=\"ETHEREUM\";Chain[\"EthereumGoerli\"]=\"ETHEREUM_GOERLI\";Chain[\"Optimism\"]=\"OPTIMISM\";Chain[\"Polygon\"]=\"POLYGON\";})(Chain||(Chain={}));export var Currency;(function(Currency){Currency[\"Eth\"]=\"ETH\";Currency[\"Usd\"]=\"USD\";})(Currency||(Currency={}));export var HighLow;(function(HighLow){HighLow[\"High\"]=\"HIGH\";HighLow[\"Low\"]=\"LOW\";})(HighLow||(HighLow={}));export var HistoryDuration;(function(HistoryDuration){HistoryDuration[\"Day\"]=\"DAY\";HistoryDuration[\"Hour\"]=\"HOUR\";HistoryDuration[\"Max\"]=\"MAX\";HistoryDuration[\"Month\"]=\"MONTH\";HistoryDuration[\"Week\"]=\"WEEK\";HistoryDuration[\"Year\"]=\"YEAR\";})(HistoryDuration||(HistoryDuration={}));/**   TODO: deprecate this enum */export var MarketSortableField;(function(MarketSortableField){MarketSortableField[\"MarketCap\"]=\"MARKET_CAP\";MarketSortableField[\"Volume\"]=\"VOLUME\";})(MarketSortableField||(MarketSortableField={}));export var NftAssetSortableField;(function(NftAssetSortableField){NftAssetSortableField[\"Price\"]=\"PRICE\";NftAssetSortableField[\"Rarity\"]=\"RARITY\";})(NftAssetSortableField||(NftAssetSortableField={}));export var NftMarketSortableField;(function(NftMarketSortableField){NftMarketSortableField[\"FloorPrice\"]=\"FLOOR_PRICE\";NftMarketSortableField[\"Volume\"]=\"VOLUME\";})(NftMarketSortableField||(NftMarketSortableField={}));export var NftMarketplace;(function(NftMarketplace){NftMarketplace[\"Cryptopunks\"]=\"CRYPTOPUNKS\";NftMarketplace[\"Foundation\"]=\"FOUNDATION\";NftMarketplace[\"Looksrare\"]=\"LOOKSRARE\";NftMarketplace[\"Nft20\"]=\"NFT20\";NftMarketplace[\"Nftx\"]=\"NFTX\";NftMarketplace[\"Opensea\"]=\"OPENSEA\";NftMarketplace[\"Sudoswap\"]=\"SUDOSWAP\";NftMarketplace[\"X2Y2\"]=\"X2Y2\";})(NftMarketplace||(NftMarketplace={}));export var NftRarityProvider;(function(NftRarityProvider){NftRarityProvider[\"RaritySniper\"]=\"RARITY_SNIPER\";})(NftRarityProvider||(NftRarityProvider={}));export var NftStandard;(function(NftStandard){NftStandard[\"Erc721\"]=\"ERC721\";NftStandard[\"Erc1155\"]=\"ERC1155\";NftStandard[\"Noncompliant\"]=\"NONCOMPLIANT\";})(NftStandard||(NftStandard={}));export var OrderStatus;(function(OrderStatus){OrderStatus[\"Cancelled\"]=\"CANCELLED\";OrderStatus[\"Executed\"]=\"EXECUTED\";OrderStatus[\"Expired\"]=\"EXPIRED\";OrderStatus[\"Valid\"]=\"VALID\";})(OrderStatus||(OrderStatus={}));export var OrderType;(function(OrderType){OrderType[\"Listing\"]=\"LISTING\";OrderType[\"Offer\"]=\"OFFER\";})(OrderType||(OrderType={}));export var SafetyLevel;(function(SafetyLevel){SafetyLevel[\"Blocked\"]=\"BLOCKED\";SafetyLevel[\"MediumWarning\"]=\"MEDIUM_WARNING\";SafetyLevel[\"StrongWarning\"]=\"STRONG_WARNING\";SafetyLevel[\"Verified\"]=\"VERIFIED\";})(SafetyLevel||(SafetyLevel={}));export var TokenSortableField;(function(TokenSortableField){TokenSortableField[\"MarketCap\"]=\"MARKET_CAP\";TokenSortableField[\"Popularity\"]=\"POPULARITY\";TokenSortableField[\"TotalValueLocked\"]=\"TOTAL_VALUE_LOCKED\";TokenSortableField[\"Volume\"]=\"VOLUME\";})(TokenSortableField||(TokenSortableField={}));export var TokenStandard;(function(TokenStandard){TokenStandard[\"Erc20\"]=\"ERC20\";TokenStandard[\"Erc1155\"]=\"ERC1155\";TokenStandard[\"Native\"]=\"NATIVE\";})(TokenStandard||(TokenStandard={}));export var TransactionDirection;(function(TransactionDirection){TransactionDirection[\"In\"]=\"IN\";TransactionDirection[\"Out\"]=\"OUT\";TransactionDirection[\"Self\"]=\"SELF\";})(TransactionDirection||(TransactionDirection={}));export var TransactionStatus;(function(TransactionStatus){TransactionStatus[\"Confirmed\"]=\"CONFIRMED\";TransactionStatus[\"Failed\"]=\"FAILED\";TransactionStatus[\"Pending\"]=\"PENDING\";})(TransactionStatus||(TransactionStatus={}));export var TokenDocument=gql(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n    query Token($contract: ContractInput!) {\\n  tokens(contracts: [$contract]) {\\n    id\\n    decimals\\n    name\\n    chain\\n    address\\n    symbol\\n    market(currency: USD) {\\n      totalValueLocked {\\n        value\\n        currency\\n      }\\n      price {\\n        value\\n        currency\\n      }\\n      volume24H: volume(duration: DAY) {\\n        value\\n        currency\\n      }\\n      priceHigh52W: priceHighLow(duration: YEAR, highLow: HIGH) {\\n        value\\n      }\\n      priceLow52W: priceHighLow(duration: YEAR, highLow: LOW) {\\n        value\\n      }\\n    }\\n    project {\\n      description\\n      homepageUrl\\n      twitterName\\n      logoUrl\\n      tokens {\\n        chain\\n        address\\n      }\\n    }\\n  }\\n}\\n    \"])));/**\n * __useTokenQuery__\n *\n * To run a query within a React component, call `useTokenQuery` and pass it any options that fit your needs.\n * When your component renders, `useTokenQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTokenQuery({\n *   variables: {\n *      contract: // value for 'contract'\n *   },\n * });\n */export function useTokenQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useQuery(TokenDocument,options);}export function useTokenLazyQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useLazyQuery(TokenDocument,options);}export var TokenPriceDocument=gql(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n    query TokenPrice($contract: ContractInput!, $duration: HistoryDuration!) {\\n  tokens(contracts: [$contract]) {\\n    market(currency: USD) {\\n      price {\\n        value\\n      }\\n      priceHistory(duration: $duration) {\\n        timestamp\\n        value\\n      }\\n    }\\n  }\\n}\\n    \"])));/**\n * __useTokenPriceQuery__\n *\n * To run a query within a React component, call `useTokenPriceQuery` and pass it any options that fit your needs.\n * When your component renders, `useTokenPriceQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTokenPriceQuery({\n *   variables: {\n *      contract: // value for 'contract'\n *      duration: // value for 'duration'\n *   },\n * });\n */export function useTokenPriceQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useQuery(TokenPriceDocument,options);}export function useTokenPriceLazyQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useLazyQuery(TokenPriceDocument,options);}export var TopTokens100Document=gql(_templateObject3||(_templateObject3=_taggedTemplateLiteral([\"\\n    query TopTokens100($duration: HistoryDuration!, $chain: Chain!) {\\n  topTokens(pageSize: 100, page: 1, chain: $chain) {\\n    id\\n    name\\n    chain\\n    address\\n    symbol\\n    market(currency: USD) {\\n      totalValueLocked {\\n        value\\n        currency\\n      }\\n      price {\\n        value\\n        currency\\n      }\\n      pricePercentChange(duration: $duration) {\\n        currency\\n        value\\n      }\\n      volume(duration: $duration) {\\n        value\\n        currency\\n      }\\n    }\\n    project {\\n      logoUrl\\n    }\\n  }\\n}\\n    \"])));/**\n * __useTopTokens100Query__\n *\n * To run a query within a React component, call `useTopTokens100Query` and pass it any options that fit your needs.\n * When your component renders, `useTopTokens100Query` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTopTokens100Query({\n *   variables: {\n *      duration: // value for 'duration'\n *      chain: // value for 'chain'\n *   },\n * });\n */export function useTopTokens100Query(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useQuery(TopTokens100Document,options);}export function useTopTokens100LazyQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useLazyQuery(TopTokens100Document,options);}export var TopTokensSparklineDocument=gql(_templateObject4||(_templateObject4=_taggedTemplateLiteral([\"\\n    query TopTokensSparkline($duration: HistoryDuration!, $chain: Chain!) {\\n  topTokens(pageSize: 100, page: 1, chain: $chain) {\\n    address\\n    market(currency: USD) {\\n      priceHistory(duration: $duration) {\\n        timestamp\\n        value\\n      }\\n    }\\n  }\\n}\\n    \"])));/**\n * __useTopTokensSparklineQuery__\n *\n * To run a query within a React component, call `useTopTokensSparklineQuery` and pass it any options that fit your needs.\n * When your component renders, `useTopTokensSparklineQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTopTokensSparklineQuery({\n *   variables: {\n *      duration: // value for 'duration'\n *      chain: // value for 'chain'\n *   },\n * });\n */export function useTopTokensSparklineQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useQuery(TopTokensSparklineDocument,options);}export function useTopTokensSparklineLazyQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useLazyQuery(TopTokensSparklineDocument,options);}export var AssetDocument=gql(_templateObject5||(_templateObject5=_taggedTemplateLiteral([\"\\n    query Asset($address: String!, $orderBy: NftAssetSortableField, $asc: Boolean, $filter: NftAssetsFilterInput, $first: Int, $after: String, $last: Int, $before: String) {\\n  nftAssets(\\n    address: $address\\n    orderBy: $orderBy\\n    asc: $asc\\n    filter: $filter\\n    first: $first\\n    after: $after\\n    last: $last\\n    before: $before\\n  ) {\\n    edges {\\n      node {\\n        id\\n        name\\n        ownerAddress\\n        image {\\n          url\\n        }\\n        smallImage {\\n          url\\n        }\\n        originalImage {\\n          url\\n        }\\n        tokenId\\n        description\\n        animationUrl\\n        suspiciousFlag\\n        collection {\\n          name\\n          isVerified\\n          image {\\n            url\\n          }\\n          creator {\\n            address\\n            profileImage {\\n              url\\n            }\\n            isVerified\\n          }\\n          nftContracts {\\n            address\\n            standard\\n          }\\n        }\\n        listings(first: 1) {\\n          edges {\\n            node {\\n              address\\n              createdAt\\n              endAt\\n              id\\n              maker\\n              marketplace\\n              marketplaceUrl\\n              orderHash\\n              price {\\n                currency\\n                value\\n              }\\n              quantity\\n              startAt\\n              status\\n              taker\\n              tokenId\\n              type\\n              protocolParameters\\n            }\\n            cursor\\n          }\\n        }\\n        rarities {\\n          provider\\n          rank\\n          score\\n        }\\n        metadataUrl\\n      }\\n      cursor\\n    }\\n    totalCount\\n    pageInfo {\\n      endCursor\\n      hasNextPage\\n      hasPreviousPage\\n      startCursor\\n    }\\n  }\\n}\\n    \"])));/**\n * __useAssetQuery__\n *\n * To run a query within a React component, call `useAssetQuery` and pass it any options that fit your needs.\n * When your component renders, `useAssetQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAssetQuery({\n *   variables: {\n *      address: // value for 'address'\n *      orderBy: // value for 'orderBy'\n *      asc: // value for 'asc'\n *      filter: // value for 'filter'\n *      first: // value for 'first'\n *      after: // value for 'after'\n *      last: // value for 'last'\n *      before: // value for 'before'\n *   },\n * });\n */export function useAssetQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useQuery(AssetDocument,options);}export function useAssetLazyQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useLazyQuery(AssetDocument,options);}export var CollectionDocument=gql(_templateObject6||(_templateObject6=_taggedTemplateLiteral([\"\\n    query Collection($addresses: [String!]!) {\\n  nftCollections(filter: {addresses: $addresses}) {\\n    edges {\\n      cursor\\n      node {\\n        bannerImage {\\n          url\\n        }\\n        collectionId\\n        description\\n        discordUrl\\n        homepageUrl\\n        image {\\n          url\\n        }\\n        instagramName\\n        isVerified\\n        name\\n        numAssets\\n        twitterName\\n        nftContracts {\\n          address\\n          chain\\n          name\\n          standard\\n          symbol\\n          totalSupply\\n        }\\n        traits {\\n          name\\n          values\\n          stats {\\n            name\\n            value\\n            assets\\n            listings\\n          }\\n        }\\n        markets(currencies: ETH) {\\n          floorPrice {\\n            currency\\n            value\\n          }\\n          owners\\n          totalVolume {\\n            value\\n            currency\\n          }\\n          listings {\\n            value\\n          }\\n          volume(duration: DAY) {\\n            value\\n            currency\\n          }\\n          volumePercentChange(duration: DAY) {\\n            value\\n            currency\\n          }\\n          floorPricePercentChange(duration: DAY) {\\n            value\\n            currency\\n          }\\n          marketplaces {\\n            marketplace\\n            listings\\n            floorPrice\\n          }\\n        }\\n      }\\n    }\\n    pageInfo {\\n      endCursor\\n      hasNextPage\\n      hasPreviousPage\\n      startCursor\\n    }\\n  }\\n}\\n    \"])));/**\n * __useCollectionQuery__\n *\n * To run a query within a React component, call `useCollectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useCollectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCollectionQuery({\n *   variables: {\n *      addresses: // value for 'addresses'\n *   },\n * });\n */export function useCollectionQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useQuery(CollectionDocument,options);}export function useCollectionLazyQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useLazyQuery(CollectionDocument,options);}export var DetailsDocument=gql(_templateObject7||(_templateObject7=_taggedTemplateLiteral([\"\\n    query Details($address: String!, $tokenId: String!) {\\n  nftAssets(address: $address, filter: {listed: false, tokenIds: [$tokenId]}) {\\n    edges {\\n      node {\\n        id\\n        name\\n        ownerAddress\\n        image {\\n          url\\n        }\\n        smallImage {\\n          url\\n        }\\n        originalImage {\\n          url\\n        }\\n        tokenId\\n        description\\n        animationUrl\\n        suspiciousFlag\\n        creator {\\n          address\\n          profileImage {\\n            url\\n          }\\n          isVerified\\n        }\\n        collection {\\n          name\\n          isVerified\\n          numAssets\\n          twitterName\\n          discordUrl\\n          homepageUrl\\n          image {\\n            url\\n          }\\n          nftContracts {\\n            address\\n            standard\\n          }\\n          description\\n        }\\n        listings(first: 1) {\\n          edges {\\n            node {\\n              address\\n              createdAt\\n              endAt\\n              id\\n              maker\\n              marketplace\\n              marketplaceUrl\\n              orderHash\\n              price {\\n                currency\\n                value\\n              }\\n              quantity\\n              startAt\\n              status\\n              taker\\n              tokenId\\n              type\\n              protocolParameters\\n            }\\n            cursor\\n          }\\n        }\\n        rarities {\\n          provider\\n          rank\\n          score\\n        }\\n        metadataUrl\\n        traits {\\n          name\\n          value\\n        }\\n      }\\n    }\\n  }\\n}\\n    \"])));/**\n * __useDetailsQuery__\n *\n * To run a query within a React component, call `useDetailsQuery` and pass it any options that fit your needs.\n * When your component renders, `useDetailsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useDetailsQuery({\n *   variables: {\n *      address: // value for 'address'\n *      tokenId: // value for 'tokenId'\n *   },\n * });\n */export function useDetailsQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useQuery(DetailsDocument,options);}export function useDetailsLazyQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useLazyQuery(DetailsDocument,options);}export var NftBalanceDocument=gql(_templateObject8||(_templateObject8=_taggedTemplateLiteral([\"\\n    query NftBalance($ownerAddress: String!, $filter: NftBalancesFilterInput, $first: Int, $after: String, $last: Int, $before: String) {\\n  nftBalances(\\n    ownerAddress: $ownerAddress\\n    filter: $filter\\n    first: $first\\n    after: $after\\n    last: $last\\n    before: $before\\n  ) {\\n    edges {\\n      node {\\n        ownedAsset {\\n          id\\n          animationUrl\\n          collection {\\n            isVerified\\n            image {\\n              url\\n            }\\n            name\\n            nftContracts {\\n              address\\n              chain\\n              name\\n              standard\\n              symbol\\n              totalSupply\\n            }\\n            markets(currencies: ETH) {\\n              floorPrice {\\n                value\\n              }\\n            }\\n          }\\n          description\\n          flaggedBy\\n          image {\\n            url\\n          }\\n          originalImage {\\n            url\\n          }\\n          name\\n          ownerAddress\\n          smallImage {\\n            url\\n          }\\n          suspiciousFlag\\n          tokenId\\n          thumbnail {\\n            url\\n          }\\n          listings(first: 1) {\\n            edges {\\n              node {\\n                price {\\n                  value\\n                  currency\\n                }\\n                createdAt\\n                marketplace\\n                endAt\\n              }\\n            }\\n          }\\n        }\\n        listedMarketplaces\\n        listingFees {\\n          payoutAddress\\n          basisPoints\\n        }\\n        lastPrice {\\n          currency\\n          timestamp\\n          value\\n        }\\n      }\\n    }\\n    pageInfo {\\n      endCursor\\n      hasNextPage\\n      hasPreviousPage\\n      startCursor\\n    }\\n  }\\n}\\n    \"])));/**\n * __useNftBalanceQuery__\n *\n * To run a query within a React component, call `useNftBalanceQuery` and pass it any options that fit your needs.\n * When your component renders, `useNftBalanceQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useNftBalanceQuery({\n *   variables: {\n *      ownerAddress: // value for 'ownerAddress'\n *      filter: // value for 'filter'\n *      first: // value for 'first'\n *      after: // value for 'after'\n *      last: // value for 'last'\n *      before: // value for 'before'\n *   },\n * });\n */export function useNftBalanceQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useQuery(NftBalanceDocument,options);}export function useNftBalanceLazyQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useLazyQuery(NftBalanceDocument,options);}","map":{"version":3,"names":["gql","Apollo","defaultOptions","ActivityType","Chain","Currency","HighLow","HistoryDuration","MarketSortableField","NftAssetSortableField","NftMarketSortableField","NftMarketplace","NftRarityProvider","NftStandard","OrderStatus","OrderType","SafetyLevel","TokenSortableField","TokenStandard","TransactionDirection","TransactionStatus","TokenDocument","useTokenQuery","baseOptions","options","useQuery","useTokenLazyQuery","useLazyQuery","TokenPriceDocument","useTokenPriceQuery","useTokenPriceLazyQuery","TopTokens100Document","useTopTokens100Query","useTopTokens100LazyQuery","TopTokensSparklineDocument","useTopTokensSparklineQuery","useTopTokensSparklineLazyQuery","AssetDocument","useAssetQuery","useAssetLazyQuery","CollectionDocument","useCollectionQuery","useCollectionLazyQuery","DetailsDocument","useDetailsQuery","useDetailsLazyQuery","NftBalanceDocument","useNftBalanceQuery","useNftBalanceLazyQuery"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/graphql/data/__generated__/types-and-hooks.ts"],"sourcesContent":["import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T;\nexport type InputMaybe<T> = T;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nconst defaultOptions = {} as const;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /**\n   * The `AWSJSON` scalar type provided by AWS AppSync, represents a JSON string that\n   * complies with [RFC 8259](https://tools.ietf.org/html/rfc8259).  Maps like\n   * \"**{\\\\\"upvotes\\\\\": 10}**\", lists like \"**[1,2,3]**\", and scalar values like\n   * \"**\\\\\"AWSJSON example string\\\\\"**\", \"**1**\", and \"**true**\" are accepted as\n   * valid JSON and will automatically be parsed and loaded in the resolver mapping\n   * templates as Maps, Lists, or Scalar values rather than as the literal input\n   * strings.  Invalid JSON strings like \"**{a: 1}**\", \"**{'a': 1}**\" and \"**Unquoted\n   * string**\" will throw GraphQL validation errors.\n   */\n  AWSJSON: any;\n};\n\nexport enum ActivityType {\n  Approve = 'APPROVE',\n  Borrow = 'BORROW',\n  Burn = 'BURN',\n  Cancel = 'CANCEL',\n  Claim = 'CLAIM',\n  Deployment = 'DEPLOYMENT',\n  Lend = 'LEND',\n  Mint = 'MINT',\n  Nft = 'NFT',\n  Receive = 'RECEIVE',\n  Repay = 'REPAY',\n  Send = 'SEND',\n  Stake = 'STAKE',\n  Swap = 'SWAP',\n  Staking = 'Staking',\n  Unknown = 'UNKNOWN',\n  Unstake = 'UNSTAKE',\n  Withdraw = 'WITHDRAW',\n  Market = 'market',\n  Money = 'money'\n}\n\nexport type Amount = IAmount & {\n  __typename?: 'Amount';\n  currency?: Maybe<Currency>;\n  id: Scalars['ID'];\n  value: Scalars['Float'];\n};\n\nexport type AmountChange = {\n  __typename?: 'AmountChange';\n  absolute?: Maybe<Amount>;\n  id: Scalars['ID'];\n  percentage?: Maybe<Amount>;\n};\n\nexport type AssetActivity = {\n  __typename?: 'AssetActivity';\n  assetChanges: Array<Maybe<AssetChange>>;\n  chain: Chain;\n  gasUsed?: Maybe<Scalars['Float']>;\n  id: Scalars['ID'];\n  timestamp: Scalars['Int'];\n  transaction: Transaction;\n  type: ActivityType;\n};\n\nexport type AssetChange = NftApproval | NftApproveForAll | NftTransfer | TokenApproval | TokenTransfer;\n\nexport enum Chain {\n  Arbitrum = 'ARBITRUM',\n  Celo = 'CELO',\n  Ethereum = 'ETHEREUM',\n  EthereumGoerli = 'ETHEREUM_GOERLI',\n  Optimism = 'OPTIMISM',\n  Polygon = 'POLYGON'\n}\n\nexport type ContractInput = {\n  address?: InputMaybe<Scalars['String']>;\n  chain: Chain;\n};\n\nexport enum Currency {\n  Eth = 'ETH',\n  Usd = 'USD'\n}\n\nexport type Dimensions = {\n  __typename?: 'Dimensions';\n  height?: Maybe<Scalars['Float']>;\n  id: Scalars['ID'];\n  width?: Maybe<Scalars['Float']>;\n};\n\nexport enum HighLow {\n  High = 'HIGH',\n  Low = 'LOW'\n}\n\nexport enum HistoryDuration {\n  Day = 'DAY',\n  Hour = 'HOUR',\n  Max = 'MAX',\n  Month = 'MONTH',\n  Week = 'WEEK',\n  Year = 'YEAR'\n}\n\nexport type IAmount = {\n  currency?: Maybe<Currency>;\n  value: Scalars['Float'];\n};\n\nexport type IContract = {\n  address?: Maybe<Scalars['String']>;\n  chain: Chain;\n};\n\nexport type Image = {\n  __typename?: 'Image';\n  dimensions?: Maybe<Dimensions>;\n  id: Scalars['ID'];\n  url: Scalars['String'];\n};\n\n/**   TODO: deprecate this enum */\nexport enum MarketSortableField {\n  MarketCap = 'MARKET_CAP',\n  Volume = 'VOLUME'\n}\n\nexport type NftApproval = {\n  __typename?: 'NftApproval';\n  approvedAddress: Scalars['String'];\n  /**   can be erc20 or erc1155 */\n  asset: NftAsset;\n  id: Scalars['ID'];\n  nftStandard: NftStandard;\n};\n\nexport type NftApproveForAll = {\n  __typename?: 'NftApproveForAll';\n  approved: Scalars['Boolean'];\n  /**   can be erc721 or erc1155 */\n  asset: NftAsset;\n  id: Scalars['ID'];\n  nftStandard: NftStandard;\n  operatorAddress: Scalars['String'];\n};\n\nexport type NftAsset = {\n  __typename?: 'NftAsset';\n  animationUrl?: Maybe<Scalars['String']>;\n  collection?: Maybe<NftCollection>;\n  creator?: Maybe<NftProfile>;\n  description?: Maybe<Scalars['String']>;\n  flaggedBy?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  image?: Maybe<Image>;\n  imageUrl?: Maybe<Scalars['String']>;\n  listings?: Maybe<NftOrderConnection>;\n  metadataUrl?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  nftContract?: Maybe<NftContract>;\n  originalImage?: Maybe<Image>;\n  /**   TODO: may need to be array to support erc1155 cases. not needed at the moment so will revisit. */\n  ownerAddress?: Maybe<Scalars['String']>;\n  rarities?: Maybe<Array<NftAssetRarity>>;\n  smallImage?: Maybe<Image>;\n  smallImageUrl?: Maybe<Scalars['String']>;\n  suspiciousFlag?: Maybe<Scalars['Boolean']>;\n  thumbnail?: Maybe<Image>;\n  thumbnailUrl?: Maybe<Scalars['String']>;\n  tokenId: Scalars['String'];\n  traits?: Maybe<Array<NftAssetTrait>>;\n};\n\n\nexport type NftAssetListingsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  asc?: InputMaybe<Scalars['Boolean']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\nexport type NftAssetConnection = {\n  __typename?: 'NftAssetConnection';\n  edges: Array<NftAssetEdge>;\n  pageInfo: PageInfo;\n  totalCount?: Maybe<Scalars['Int']>;\n};\n\nexport type NftAssetEdge = {\n  __typename?: 'NftAssetEdge';\n  cursor: Scalars['String'];\n  node: NftAsset;\n};\n\nexport type NftAssetInput = {\n  address: Scalars['String'];\n  tokenId: Scalars['String'];\n};\n\nexport type NftAssetRarity = {\n  __typename?: 'NftAssetRarity';\n  id: Scalars['ID'];\n  provider?: Maybe<NftRarityProvider>;\n  rank?: Maybe<Scalars['Int']>;\n  score?: Maybe<Scalars['Float']>;\n};\n\nexport enum NftAssetSortableField {\n  Price = 'PRICE',\n  Rarity = 'RARITY'\n}\n\nexport type NftAssetTrait = {\n  __typename?: 'NftAssetTrait';\n  id: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n  rarity?: Maybe<Scalars['Float']>;\n  value?: Maybe<Scalars['String']>;\n};\n\nexport type NftAssetTraitInput = {\n  name: Scalars['String'];\n  values: Array<Scalars['String']>;\n};\n\nexport type NftAssetsFilterInput = {\n  listed?: InputMaybe<Scalars['Boolean']>;\n  marketplaces?: InputMaybe<Array<NftMarketplace>>;\n  maxPrice?: InputMaybe<Scalars['String']>;\n  minPrice?: InputMaybe<Scalars['String']>;\n  tokenIds?: InputMaybe<Array<Scalars['String']>>;\n  tokenSearchQuery?: InputMaybe<Scalars['String']>;\n  traits?: InputMaybe<Array<NftAssetTraitInput>>;\n};\n\nexport type NftBalance = {\n  __typename?: 'NftBalance';\n  id: Scalars['ID'];\n  lastPrice?: Maybe<TimestampedAmount>;\n  listedMarketplaces?: Maybe<Array<NftMarketplace>>;\n  listingFees?: Maybe<Array<Maybe<NftFee>>>;\n  ownedAsset?: Maybe<NftAsset>;\n};\n\nexport type NftBalanceConnection = {\n  __typename?: 'NftBalanceConnection';\n  edges: Array<NftBalanceEdge>;\n  pageInfo: PageInfo;\n};\n\nexport type NftBalanceEdge = {\n  __typename?: 'NftBalanceEdge';\n  cursor: Scalars['String'];\n  node: NftBalance;\n};\n\nexport type NftBalancesFilterInput = {\n  addresses?: InputMaybe<Array<Scalars['String']>>;\n  assets?: InputMaybe<Array<NftAssetInput>>;\n};\n\nexport type NftCollection = {\n  __typename?: 'NftCollection';\n  bannerImage?: Maybe<Image>;\n  /**\n   *  TODO: support querying for collection assets here\n   * assets(page: Int, pageSize: Int, orderBy: NftAssetSortableField): [NftAsset]\n   */\n  bannerImageUrl?: Maybe<Scalars['String']>;\n  collectionId: Scalars['String'];\n  creator?: Maybe<NftProfile>;\n  description?: Maybe<Scalars['String']>;\n  discordUrl?: Maybe<Scalars['String']>;\n  homepageUrl?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  image?: Maybe<Image>;\n  imageUrl?: Maybe<Scalars['String']>;\n  instagramName?: Maybe<Scalars['String']>;\n  isVerified?: Maybe<Scalars['Boolean']>;\n  markets?: Maybe<Array<NftCollectionMarket>>;\n  name?: Maybe<Scalars['String']>;\n  nftContracts?: Maybe<Array<NftContract>>;\n  numAssets?: Maybe<Scalars['Int']>;\n  openseaUrl?: Maybe<Scalars['String']>;\n  traits?: Maybe<Array<NftCollectionTrait>>;\n  twitterName?: Maybe<Scalars['String']>;\n};\n\n\nexport type NftCollectionMarketsArgs = {\n  currencies: Array<Currency>;\n};\n\nexport type NftCollectionConnection = {\n  __typename?: 'NftCollectionConnection';\n  edges: Array<NftCollectionEdge>;\n  pageInfo: PageInfo;\n};\n\nexport type NftCollectionEdge = {\n  __typename?: 'NftCollectionEdge';\n  cursor: Scalars['String'];\n  node: NftCollection;\n};\n\nexport type NftCollectionMarket = {\n  __typename?: 'NftCollectionMarket';\n  floorPrice?: Maybe<TimestampedAmount>;\n  floorPricePercentChange?: Maybe<TimestampedAmount>;\n  id: Scalars['ID'];\n  listings?: Maybe<TimestampedAmount>;\n  marketplaces?: Maybe<Array<NftCollectionMarketplace>>;\n  nftContracts?: Maybe<Array<NftContract>>;\n  owners?: Maybe<Scalars['Int']>;\n  sales?: Maybe<TimestampedAmount>;\n  totalVolume?: Maybe<TimestampedAmount>;\n  volume?: Maybe<TimestampedAmount>;\n  volume24h?: Maybe<Amount>;\n  volumePercentChange?: Maybe<TimestampedAmount>;\n};\n\n\nexport type NftCollectionMarketFloorPricePercentChangeArgs = {\n  duration?: InputMaybe<HistoryDuration>;\n};\n\n\nexport type NftCollectionMarketMarketplacesArgs = {\n  marketplaces?: InputMaybe<Array<NftMarketplace>>;\n};\n\n\nexport type NftCollectionMarketSalesArgs = {\n  duration?: InputMaybe<HistoryDuration>;\n};\n\n\nexport type NftCollectionMarketVolumeArgs = {\n  duration?: InputMaybe<HistoryDuration>;\n};\n\n\nexport type NftCollectionMarketVolumePercentChangeArgs = {\n  duration?: InputMaybe<HistoryDuration>;\n};\n\nexport type NftCollectionMarketplace = {\n  __typename?: 'NftCollectionMarketplace';\n  floorPrice?: Maybe<Scalars['Float']>;\n  id: Scalars['ID'];\n  listings?: Maybe<Scalars['Int']>;\n  marketplace?: Maybe<NftMarketplace>;\n};\n\nexport type NftCollectionTrait = {\n  __typename?: 'NftCollectionTrait';\n  id: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n  stats?: Maybe<Array<NftCollectionTraitStats>>;\n  values?: Maybe<Array<Scalars['String']>>;\n};\n\nexport type NftCollectionTraitStats = {\n  __typename?: 'NftCollectionTraitStats';\n  assets?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n  listings?: Maybe<Scalars['Int']>;\n  name?: Maybe<Scalars['String']>;\n  value?: Maybe<Scalars['String']>;\n};\n\nexport type NftCollectionsFilterInput = {\n  addresses?: InputMaybe<Array<Scalars['String']>>;\n};\n\nexport type NftContract = IContract & {\n  __typename?: 'NftContract';\n  address: Scalars['String'];\n  chain: Chain;\n  id: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n  standard?: Maybe<NftStandard>;\n  symbol?: Maybe<Scalars['String']>;\n  totalSupply?: Maybe<Scalars['Int']>;\n};\n\nexport type NftFee = {\n  __typename?: 'NftFee';\n  basisPoints: Scalars['Int'];\n  id: Scalars['ID'];\n  payoutAddress: Scalars['String'];\n};\n\nexport enum NftMarketSortableField {\n  FloorPrice = 'FLOOR_PRICE',\n  Volume = 'VOLUME'\n}\n\nexport enum NftMarketplace {\n  Cryptopunks = 'CRYPTOPUNKS',\n  Foundation = 'FOUNDATION',\n  Looksrare = 'LOOKSRARE',\n  Nft20 = 'NFT20',\n  Nftx = 'NFTX',\n  Opensea = 'OPENSEA',\n  Sudoswap = 'SUDOSWAP',\n  X2Y2 = 'X2Y2'\n}\n\nexport type NftOrder = {\n  __typename?: 'NftOrder';\n  address: Scalars['String'];\n  auctionType?: Maybe<Scalars['String']>;\n  createdAt: Scalars['Float'];\n  endAt?: Maybe<Scalars['Float']>;\n  id: Scalars['ID'];\n  maker: Scalars['String'];\n  marketplace: NftMarketplace;\n  marketplaceUrl: Scalars['String'];\n  orderHash?: Maybe<Scalars['String']>;\n  price: Amount;\n  protocolParameters?: Maybe<Scalars['AWSJSON']>;\n  quantity: Scalars['Int'];\n  startAt: Scalars['Float'];\n  status: OrderStatus;\n  taker?: Maybe<Scalars['String']>;\n  tokenId?: Maybe<Scalars['String']>;\n  type: OrderType;\n};\n\nexport type NftOrderConnection = {\n  __typename?: 'NftOrderConnection';\n  edges: Array<NftOrderEdge>;\n  pageInfo: PageInfo;\n};\n\nexport type NftOrderEdge = {\n  __typename?: 'NftOrderEdge';\n  cursor: Scalars['String'];\n  node: NftOrder;\n};\n\nexport type NftProfile = {\n  __typename?: 'NftProfile';\n  address: Scalars['String'];\n  id: Scalars['ID'];\n  isVerified?: Maybe<Scalars['Boolean']>;\n  profileImage?: Maybe<Image>;\n  username?: Maybe<Scalars['String']>;\n};\n\nexport enum NftRarityProvider {\n  RaritySniper = 'RARITY_SNIPER'\n}\n\nexport enum NftStandard {\n  Erc721 = 'ERC721',\n  Erc1155 = 'ERC1155',\n  Noncompliant = 'NONCOMPLIANT'\n}\n\nexport type NftTransfer = {\n  __typename?: 'NftTransfer';\n  asset: NftAsset;\n  direction: TransactionDirection;\n  id: Scalars['ID'];\n  nftStandard: NftStandard;\n  recipient: Scalars['String'];\n  sender: Scalars['String'];\n};\n\nexport enum OrderStatus {\n  Cancelled = 'CANCELLED',\n  Executed = 'EXECUTED',\n  Expired = 'EXPIRED',\n  Valid = 'VALID'\n}\n\nexport enum OrderType {\n  Listing = 'LISTING',\n  Offer = 'OFFER'\n}\n\nexport type PageInfo = {\n  __typename?: 'PageInfo';\n  endCursor?: Maybe<Scalars['String']>;\n  hasNextPage?: Maybe<Scalars['Boolean']>;\n  hasPreviousPage?: Maybe<Scalars['Boolean']>;\n  startCursor?: Maybe<Scalars['String']>;\n};\n\nexport type Portfolio = {\n  __typename?: 'Portfolio';\n  assetActivities?: Maybe<Array<Maybe<AssetActivity>>>;\n  id: Scalars['ID'];\n  /**   TODO: (michael.zhang) replace with paginated query */\n  nftBalances?: Maybe<Array<Maybe<NftBalance>>>;\n  ownerAddress: Scalars['String'];\n  tokenBalances?: Maybe<Array<Maybe<TokenBalance>>>;\n  tokensTotalDenominatedValue?: Maybe<Amount>;\n  tokensTotalDenominatedValueChange?: Maybe<AmountChange>;\n  tokensTotalDenominatedValueHistory?: Maybe<Array<Maybe<TimestampedAmount>>>;\n};\n\n\nexport type PortfolioAssetActivitiesArgs = {\n  page?: InputMaybe<Scalars['Int']>;\n  pageSize?: InputMaybe<Scalars['Int']>;\n};\n\n\nexport type PortfolioTokensTotalDenominatedValueChangeArgs = {\n  duration?: InputMaybe<HistoryDuration>;\n};\n\n\nexport type PortfolioTokensTotalDenominatedValueHistoryArgs = {\n  duration?: InputMaybe<HistoryDuration>;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  assetActivities?: Maybe<Array<Maybe<AssetActivity>>>;\n  nftAssets?: Maybe<NftAssetConnection>;\n  nftBalances?: Maybe<NftBalanceConnection>;\n  nftCollections?: Maybe<NftCollectionConnection>;\n  nftCollectionsById?: Maybe<Array<Maybe<NftCollection>>>;\n  portfolios?: Maybe<Array<Maybe<Portfolio>>>;\n  searchTokenProjects?: Maybe<Array<Maybe<TokenProject>>>;\n  searchTokens?: Maybe<Array<Maybe<Token>>>;\n  token?: Maybe<Token>;\n  tokenProjects?: Maybe<Array<Maybe<TokenProject>>>;\n  tokens?: Maybe<Array<Maybe<Token>>>;\n  topTokens?: Maybe<Array<Maybe<Token>>>;\n};\n\n\nexport type QueryAssetActivitiesArgs = {\n  address: Scalars['String'];\n  page?: InputMaybe<Scalars['Int']>;\n  pageSize?: InputMaybe<Scalars['Int']>;\n};\n\n\nexport type QueryNftAssetsArgs = {\n  address: Scalars['String'];\n  after?: InputMaybe<Scalars['String']>;\n  asc?: InputMaybe<Scalars['Boolean']>;\n  before?: InputMaybe<Scalars['String']>;\n  chain?: InputMaybe<Chain>;\n  filter?: InputMaybe<NftAssetsFilterInput>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  orderBy?: InputMaybe<NftAssetSortableField>;\n};\n\n\nexport type QueryNftBalancesArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  chain?: InputMaybe<Chain>;\n  filter?: InputMaybe<NftBalancesFilterInput>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  ownerAddress: Scalars['String'];\n};\n\n\nexport type QueryNftCollectionsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  filter?: InputMaybe<NftCollectionsFilterInput>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\nexport type QueryNftCollectionsByIdArgs = {\n  collectionIds?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;\n};\n\n\nexport type QueryPortfoliosArgs = {\n  ownerAddresses: Array<Scalars['String']>;\n  useAltDataSource?: InputMaybe<Scalars['Boolean']>;\n};\n\n\nexport type QuerySearchTokenProjectsArgs = {\n  searchQuery: Scalars['String'];\n};\n\n\nexport type QuerySearchTokensArgs = {\n  searchQuery: Scalars['String'];\n};\n\n\nexport type QueryTokenArgs = {\n  address?: InputMaybe<Scalars['String']>;\n  chain: Chain;\n};\n\n\nexport type QueryTokenProjectsArgs = {\n  contracts: Array<ContractInput>;\n};\n\n\nexport type QueryTokensArgs = {\n  contracts: Array<ContractInput>;\n};\n\n\nexport type QueryTopTokensArgs = {\n  chain?: InputMaybe<Chain>;\n  orderBy?: InputMaybe<TokenSortableField>;\n  page?: InputMaybe<Scalars['Int']>;\n  pageSize?: InputMaybe<Scalars['Int']>;\n};\n\nexport enum SafetyLevel {\n  Blocked = 'BLOCKED',\n  MediumWarning = 'MEDIUM_WARNING',\n  StrongWarning = 'STRONG_WARNING',\n  Verified = 'VERIFIED'\n}\n\nexport type TimestampedAmount = IAmount & {\n  __typename?: 'TimestampedAmount';\n  currency?: Maybe<Currency>;\n  id: Scalars['ID'];\n  timestamp: Scalars['Int'];\n  value: Scalars['Float'];\n};\n\nexport type Token = IContract & {\n  __typename?: 'Token';\n  address?: Maybe<Scalars['String']>;\n  chain: Chain;\n  decimals?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n  market?: Maybe<TokenMarket>;\n  name?: Maybe<Scalars['String']>;\n  project?: Maybe<TokenProject>;\n  standard?: Maybe<TokenStandard>;\n  symbol?: Maybe<Scalars['String']>;\n};\n\n\nexport type TokenMarketArgs = {\n  currency?: InputMaybe<Currency>;\n};\n\nexport type TokenApproval = {\n  __typename?: 'TokenApproval';\n  approvedAddress: Scalars['String'];\n  /**   can be erc20 or erc1155 */\n  asset: Token;\n  id: Scalars['ID'];\n  quantity: Scalars['String'];\n  tokenStandard: TokenStandard;\n};\n\nexport type TokenBalance = {\n  __typename?: 'TokenBalance';\n  blockNumber?: Maybe<Scalars['Int']>;\n  blockTimestamp?: Maybe<Scalars['Int']>;\n  denominatedValue?: Maybe<Amount>;\n  id: Scalars['ID'];\n  ownerAddress: Scalars['String'];\n  quantity?: Maybe<Scalars['Float']>;\n  token?: Maybe<Token>;\n  tokenProjectMarket?: Maybe<TokenProjectMarket>;\n};\n\nexport type TokenMarket = {\n  __typename?: 'TokenMarket';\n  id: Scalars['ID'];\n  price?: Maybe<Amount>;\n  priceHighLow?: Maybe<Amount>;\n  priceHistory?: Maybe<Array<Maybe<TimestampedAmount>>>;\n  pricePercentChange?: Maybe<Amount>;\n  token: Token;\n  totalValueLocked?: Maybe<Amount>;\n  volume?: Maybe<Amount>;\n};\n\n\nexport type TokenMarketPriceHighLowArgs = {\n  duration: HistoryDuration;\n  highLow: HighLow;\n};\n\n\nexport type TokenMarketPriceHistoryArgs = {\n  duration: HistoryDuration;\n};\n\n\nexport type TokenMarketPricePercentChangeArgs = {\n  duration: HistoryDuration;\n};\n\n\nexport type TokenMarketVolumeArgs = {\n  duration: HistoryDuration;\n};\n\nexport type TokenProject = {\n  __typename?: 'TokenProject';\n  description?: Maybe<Scalars['String']>;\n  homepageUrl?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  isSpam?: Maybe<Scalars['Boolean']>;\n  logo?: Maybe<Image>;\n  logoUrl?: Maybe<Scalars['String']>;\n  markets?: Maybe<Array<Maybe<TokenProjectMarket>>>;\n  name?: Maybe<Scalars['String']>;\n  safetyLevel?: Maybe<SafetyLevel>;\n  smallLogo?: Maybe<Image>;\n  spamCode?: Maybe<Scalars['Int']>;\n  tokens: Array<Token>;\n  twitterName?: Maybe<Scalars['String']>;\n};\n\n\nexport type TokenProjectMarketsArgs = {\n  currencies: Array<Currency>;\n};\n\nexport type TokenProjectMarket = {\n  __typename?: 'TokenProjectMarket';\n  currency: Currency;\n  fullyDilutedMarketCap?: Maybe<Amount>;\n  id: Scalars['ID'];\n  marketCap?: Maybe<Amount>;\n  price?: Maybe<Amount>;\n  priceHighLow?: Maybe<Amount>;\n  priceHistory?: Maybe<Array<Maybe<TimestampedAmount>>>;\n  pricePercentChange?: Maybe<Amount>;\n  pricePercentChange24h?: Maybe<Amount>;\n  tokenProject: TokenProject;\n  volume?: Maybe<Amount>;\n  volume24h?: Maybe<Amount>;\n};\n\n\nexport type TokenProjectMarketPriceHighLowArgs = {\n  duration: HistoryDuration;\n  highLow: HighLow;\n};\n\n\nexport type TokenProjectMarketPriceHistoryArgs = {\n  duration: HistoryDuration;\n};\n\n\nexport type TokenProjectMarketPricePercentChangeArgs = {\n  duration: HistoryDuration;\n};\n\n\nexport type TokenProjectMarketVolumeArgs = {\n  duration: HistoryDuration;\n};\n\nexport enum TokenSortableField {\n  MarketCap = 'MARKET_CAP',\n  Popularity = 'POPULARITY',\n  TotalValueLocked = 'TOTAL_VALUE_LOCKED',\n  Volume = 'VOLUME'\n}\n\nexport enum TokenStandard {\n  Erc20 = 'ERC20',\n  Erc1155 = 'ERC1155',\n  Native = 'NATIVE'\n}\n\nexport type TokenTransfer = {\n  __typename?: 'TokenTransfer';\n  asset: Token;\n  direction: TransactionDirection;\n  id: Scalars['ID'];\n  quantity: Scalars['String'];\n  recipient: Scalars['String'];\n  sender: Scalars['String'];\n  tokenStandard: TokenStandard;\n  transactedValue?: Maybe<Amount>;\n};\n\nexport type Transaction = {\n  __typename?: 'Transaction';\n  blockNumber: Scalars['Int'];\n  from: Scalars['String'];\n  gasLimit?: Maybe<Scalars['Float']>;\n  hash: Scalars['String'];\n  id: Scalars['ID'];\n  maxFeePerGas?: Maybe<Scalars['Float']>;\n  nonce: Scalars['Int'];\n  status: TransactionStatus;\n  to: Scalars['String'];\n};\n\nexport enum TransactionDirection {\n  In = 'IN',\n  Out = 'OUT',\n  Self = 'SELF'\n}\n\nexport enum TransactionStatus {\n  Confirmed = 'CONFIRMED',\n  Failed = 'FAILED',\n  Pending = 'PENDING'\n}\n\nexport type TokenQueryVariables = Exact<{\n  contract: ContractInput;\n}>;\n\n\nexport type TokenQuery = { __typename?: 'Query', tokens?: Array<{ __typename?: 'Token', id: string, decimals?: number, name?: string, chain: Chain, address?: string, symbol?: string, market?: { __typename?: 'TokenMarket', totalValueLocked?: { __typename?: 'Amount', value: number, currency?: Currency }, price?: { __typename?: 'Amount', value: number, currency?: Currency }, volume24H?: { __typename?: 'Amount', value: number, currency?: Currency }, priceHigh52W?: { __typename?: 'Amount', value: number }, priceLow52W?: { __typename?: 'Amount', value: number } }, project?: { __typename?: 'TokenProject', description?: string, homepageUrl?: string, twitterName?: string, logoUrl?: string, tokens: Array<{ __typename?: 'Token', chain: Chain, address?: string }> } }> };\n\nexport type TokenPriceQueryVariables = Exact<{\n  contract: ContractInput;\n  duration: HistoryDuration;\n}>;\n\n\nexport type TokenPriceQuery = { __typename?: 'Query', tokens?: Array<{ __typename?: 'Token', market?: { __typename?: 'TokenMarket', price?: { __typename?: 'Amount', value: number }, priceHistory?: Array<{ __typename?: 'TimestampedAmount', timestamp: number, value: number }> } }> };\n\nexport type TopTokens100QueryVariables = Exact<{\n  duration: HistoryDuration;\n  chain: Chain;\n}>;\n\n\nexport type TopTokens100Query = { __typename?: 'Query', topTokens?: Array<{ __typename?: 'Token', id: string, name?: string, chain: Chain, address?: string, symbol?: string, market?: { __typename?: 'TokenMarket', totalValueLocked?: { __typename?: 'Amount', value: number, currency?: Currency }, price?: { __typename?: 'Amount', value: number, currency?: Currency }, pricePercentChange?: { __typename?: 'Amount', currency?: Currency, value: number }, volume?: { __typename?: 'Amount', value: number, currency?: Currency } }, project?: { __typename?: 'TokenProject', logoUrl?: string } }> };\n\nexport type TopTokensSparklineQueryVariables = Exact<{\n  duration: HistoryDuration;\n  chain: Chain;\n}>;\n\n\nexport type TopTokensSparklineQuery = { __typename?: 'Query', topTokens?: Array<{ __typename?: 'Token', address?: string, market?: { __typename?: 'TokenMarket', priceHistory?: Array<{ __typename?: 'TimestampedAmount', timestamp: number, value: number }> } }> };\n\nexport type AssetQueryVariables = Exact<{\n  address: Scalars['String'];\n  orderBy?: InputMaybe<NftAssetSortableField>;\n  asc?: InputMaybe<Scalars['Boolean']>;\n  filter?: InputMaybe<NftAssetsFilterInput>;\n  first?: InputMaybe<Scalars['Int']>;\n  after?: InputMaybe<Scalars['String']>;\n  last?: InputMaybe<Scalars['Int']>;\n  before?: InputMaybe<Scalars['String']>;\n}>;\n\n\nexport type AssetQuery = { __typename?: 'Query', nftAssets?: { __typename?: 'NftAssetConnection', totalCount?: number, edges: Array<{ __typename?: 'NftAssetEdge', cursor: string, node: { __typename?: 'NftAsset', id: string, name?: string, ownerAddress?: string, tokenId: string, description?: string, animationUrl?: string, suspiciousFlag?: boolean, metadataUrl?: string, image?: { __typename?: 'Image', url: string }, smallImage?: { __typename?: 'Image', url: string }, originalImage?: { __typename?: 'Image', url: string }, collection?: { __typename?: 'NftCollection', name?: string, isVerified?: boolean, image?: { __typename?: 'Image', url: string }, creator?: { __typename?: 'NftProfile', address: string, isVerified?: boolean, profileImage?: { __typename?: 'Image', url: string } }, nftContracts?: Array<{ __typename?: 'NftContract', address: string, standard?: NftStandard }> }, listings?: { __typename?: 'NftOrderConnection', edges: Array<{ __typename?: 'NftOrderEdge', cursor: string, node: { __typename?: 'NftOrder', address: string, createdAt: number, endAt?: number, id: string, maker: string, marketplace: NftMarketplace, marketplaceUrl: string, orderHash?: string, quantity: number, startAt: number, status: OrderStatus, taker?: string, tokenId?: string, type: OrderType, protocolParameters?: any, price: { __typename?: 'Amount', currency?: Currency, value: number } } }> }, rarities?: Array<{ __typename?: 'NftAssetRarity', provider?: NftRarityProvider, rank?: number, score?: number }> } }>, pageInfo: { __typename?: 'PageInfo', endCursor?: string, hasNextPage?: boolean, hasPreviousPage?: boolean, startCursor?: string } } };\n\nexport type CollectionQueryVariables = Exact<{\n  addresses: Array<Scalars['String']> | Scalars['String'];\n}>;\n\n\nexport type CollectionQuery = { __typename?: 'Query', nftCollections?: { __typename?: 'NftCollectionConnection', edges: Array<{ __typename?: 'NftCollectionEdge', cursor: string, node: { __typename?: 'NftCollection', collectionId: string, description?: string, discordUrl?: string, homepageUrl?: string, instagramName?: string, isVerified?: boolean, name?: string, numAssets?: number, twitterName?: string, bannerImage?: { __typename?: 'Image', url: string }, image?: { __typename?: 'Image', url: string }, nftContracts?: Array<{ __typename?: 'NftContract', address: string, chain: Chain, name?: string, standard?: NftStandard, symbol?: string, totalSupply?: number }>, traits?: Array<{ __typename?: 'NftCollectionTrait', name?: string, values?: Array<string>, stats?: Array<{ __typename?: 'NftCollectionTraitStats', name?: string, value?: string, assets?: number, listings?: number }> }>, markets?: Array<{ __typename?: 'NftCollectionMarket', owners?: number, floorPrice?: { __typename?: 'TimestampedAmount', currency?: Currency, value: number }, totalVolume?: { __typename?: 'TimestampedAmount', value: number, currency?: Currency }, listings?: { __typename?: 'TimestampedAmount', value: number }, volume?: { __typename?: 'TimestampedAmount', value: number, currency?: Currency }, volumePercentChange?: { __typename?: 'TimestampedAmount', value: number, currency?: Currency }, floorPricePercentChange?: { __typename?: 'TimestampedAmount', value: number, currency?: Currency }, marketplaces?: Array<{ __typename?: 'NftCollectionMarketplace', marketplace?: NftMarketplace, listings?: number, floorPrice?: number }> }> } }>, pageInfo: { __typename?: 'PageInfo', endCursor?: string, hasNextPage?: boolean, hasPreviousPage?: boolean, startCursor?: string } } };\n\nexport type DetailsQueryVariables = Exact<{\n  address: Scalars['String'];\n  tokenId: Scalars['String'];\n}>;\n\n\nexport type DetailsQuery = { __typename?: 'Query', nftAssets?: { __typename?: 'NftAssetConnection', edges: Array<{ __typename?: 'NftAssetEdge', node: { __typename?: 'NftAsset', id: string, name?: string, ownerAddress?: string, tokenId: string, description?: string, animationUrl?: string, suspiciousFlag?: boolean, metadataUrl?: string, image?: { __typename?: 'Image', url: string }, smallImage?: { __typename?: 'Image', url: string }, originalImage?: { __typename?: 'Image', url: string }, creator?: { __typename?: 'NftProfile', address: string, isVerified?: boolean, profileImage?: { __typename?: 'Image', url: string } }, collection?: { __typename?: 'NftCollection', name?: string, isVerified?: boolean, numAssets?: number, twitterName?: string, discordUrl?: string, homepageUrl?: string, description?: string, image?: { __typename?: 'Image', url: string }, nftContracts?: Array<{ __typename?: 'NftContract', address: string, standard?: NftStandard }> }, listings?: { __typename?: 'NftOrderConnection', edges: Array<{ __typename?: 'NftOrderEdge', cursor: string, node: { __typename?: 'NftOrder', address: string, createdAt: number, endAt?: number, id: string, maker: string, marketplace: NftMarketplace, marketplaceUrl: string, orderHash?: string, quantity: number, startAt: number, status: OrderStatus, taker?: string, tokenId?: string, type: OrderType, protocolParameters?: any, price: { __typename?: 'Amount', currency?: Currency, value: number } } }> }, rarities?: Array<{ __typename?: 'NftAssetRarity', provider?: NftRarityProvider, rank?: number, score?: number }>, traits?: Array<{ __typename?: 'NftAssetTrait', name?: string, value?: string }> } }> } };\n\nexport type NftBalanceQueryVariables = Exact<{\n  ownerAddress: Scalars['String'];\n  filter?: InputMaybe<NftBalancesFilterInput>;\n  first?: InputMaybe<Scalars['Int']>;\n  after?: InputMaybe<Scalars['String']>;\n  last?: InputMaybe<Scalars['Int']>;\n  before?: InputMaybe<Scalars['String']>;\n}>;\n\n\nexport type NftBalanceQuery = { __typename?: 'Query', nftBalances?: { __typename?: 'NftBalanceConnection', edges: Array<{ __typename?: 'NftBalanceEdge', node: { __typename?: 'NftBalance', listedMarketplaces?: Array<NftMarketplace>, ownedAsset?: { __typename?: 'NftAsset', id: string, animationUrl?: string, description?: string, flaggedBy?: string, name?: string, ownerAddress?: string, suspiciousFlag?: boolean, tokenId: string, collection?: { __typename?: 'NftCollection', isVerified?: boolean, name?: string, image?: { __typename?: 'Image', url: string }, nftContracts?: Array<{ __typename?: 'NftContract', address: string, chain: Chain, name?: string, standard?: NftStandard, symbol?: string, totalSupply?: number }>, markets?: Array<{ __typename?: 'NftCollectionMarket', floorPrice?: { __typename?: 'TimestampedAmount', value: number } }> }, image?: { __typename?: 'Image', url: string }, originalImage?: { __typename?: 'Image', url: string }, smallImage?: { __typename?: 'Image', url: string }, thumbnail?: { __typename?: 'Image', url: string }, listings?: { __typename?: 'NftOrderConnection', edges: Array<{ __typename?: 'NftOrderEdge', node: { __typename?: 'NftOrder', createdAt: number, marketplace: NftMarketplace, endAt?: number, price: { __typename?: 'Amount', value: number, currency?: Currency } } }> } }, listingFees?: Array<{ __typename?: 'NftFee', payoutAddress: string, basisPoints: number }>, lastPrice?: { __typename?: 'TimestampedAmount', currency?: Currency, timestamp: number, value: number } } }>, pageInfo: { __typename?: 'PageInfo', endCursor?: string, hasNextPage?: boolean, hasPreviousPage?: boolean, startCursor?: string } } };\n\n\nexport const TokenDocument = gql`\n    query Token($contract: ContractInput!) {\n  tokens(contracts: [$contract]) {\n    id\n    decimals\n    name\n    chain\n    address\n    symbol\n    market(currency: USD) {\n      totalValueLocked {\n        value\n        currency\n      }\n      price {\n        value\n        currency\n      }\n      volume24H: volume(duration: DAY) {\n        value\n        currency\n      }\n      priceHigh52W: priceHighLow(duration: YEAR, highLow: HIGH) {\n        value\n      }\n      priceLow52W: priceHighLow(duration: YEAR, highLow: LOW) {\n        value\n      }\n    }\n    project {\n      description\n      homepageUrl\n      twitterName\n      logoUrl\n      tokens {\n        chain\n        address\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useTokenQuery__\n *\n * To run a query within a React component, call `useTokenQuery` and pass it any options that fit your needs.\n * When your component renders, `useTokenQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTokenQuery({\n *   variables: {\n *      contract: // value for 'contract'\n *   },\n * });\n */\nexport function useTokenQuery(baseOptions: Apollo.QueryHookOptions<TokenQuery, TokenQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<TokenQuery, TokenQueryVariables>(TokenDocument, options);\n      }\nexport function useTokenLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<TokenQuery, TokenQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<TokenQuery, TokenQueryVariables>(TokenDocument, options);\n        }\nexport type TokenQueryHookResult = ReturnType<typeof useTokenQuery>;\nexport type TokenLazyQueryHookResult = ReturnType<typeof useTokenLazyQuery>;\nexport type TokenQueryResult = Apollo.QueryResult<TokenQuery, TokenQueryVariables>;\nexport const TokenPriceDocument = gql`\n    query TokenPrice($contract: ContractInput!, $duration: HistoryDuration!) {\n  tokens(contracts: [$contract]) {\n    market(currency: USD) {\n      price {\n        value\n      }\n      priceHistory(duration: $duration) {\n        timestamp\n        value\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useTokenPriceQuery__\n *\n * To run a query within a React component, call `useTokenPriceQuery` and pass it any options that fit your needs.\n * When your component renders, `useTokenPriceQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTokenPriceQuery({\n *   variables: {\n *      contract: // value for 'contract'\n *      duration: // value for 'duration'\n *   },\n * });\n */\nexport function useTokenPriceQuery(baseOptions: Apollo.QueryHookOptions<TokenPriceQuery, TokenPriceQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<TokenPriceQuery, TokenPriceQueryVariables>(TokenPriceDocument, options);\n      }\nexport function useTokenPriceLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<TokenPriceQuery, TokenPriceQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<TokenPriceQuery, TokenPriceQueryVariables>(TokenPriceDocument, options);\n        }\nexport type TokenPriceQueryHookResult = ReturnType<typeof useTokenPriceQuery>;\nexport type TokenPriceLazyQueryHookResult = ReturnType<typeof useTokenPriceLazyQuery>;\nexport type TokenPriceQueryResult = Apollo.QueryResult<TokenPriceQuery, TokenPriceQueryVariables>;\nexport const TopTokens100Document = gql`\n    query TopTokens100($duration: HistoryDuration!, $chain: Chain!) {\n  topTokens(pageSize: 100, page: 1, chain: $chain) {\n    id\n    name\n    chain\n    address\n    symbol\n    market(currency: USD) {\n      totalValueLocked {\n        value\n        currency\n      }\n      price {\n        value\n        currency\n      }\n      pricePercentChange(duration: $duration) {\n        currency\n        value\n      }\n      volume(duration: $duration) {\n        value\n        currency\n      }\n    }\n    project {\n      logoUrl\n    }\n  }\n}\n    `;\n\n/**\n * __useTopTokens100Query__\n *\n * To run a query within a React component, call `useTopTokens100Query` and pass it any options that fit your needs.\n * When your component renders, `useTopTokens100Query` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTopTokens100Query({\n *   variables: {\n *      duration: // value for 'duration'\n *      chain: // value for 'chain'\n *   },\n * });\n */\nexport function useTopTokens100Query(baseOptions: Apollo.QueryHookOptions<TopTokens100Query, TopTokens100QueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<TopTokens100Query, TopTokens100QueryVariables>(TopTokens100Document, options);\n      }\nexport function useTopTokens100LazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<TopTokens100Query, TopTokens100QueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<TopTokens100Query, TopTokens100QueryVariables>(TopTokens100Document, options);\n        }\nexport type TopTokens100QueryHookResult = ReturnType<typeof useTopTokens100Query>;\nexport type TopTokens100LazyQueryHookResult = ReturnType<typeof useTopTokens100LazyQuery>;\nexport type TopTokens100QueryResult = Apollo.QueryResult<TopTokens100Query, TopTokens100QueryVariables>;\nexport const TopTokensSparklineDocument = gql`\n    query TopTokensSparkline($duration: HistoryDuration!, $chain: Chain!) {\n  topTokens(pageSize: 100, page: 1, chain: $chain) {\n    address\n    market(currency: USD) {\n      priceHistory(duration: $duration) {\n        timestamp\n        value\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useTopTokensSparklineQuery__\n *\n * To run a query within a React component, call `useTopTokensSparklineQuery` and pass it any options that fit your needs.\n * When your component renders, `useTopTokensSparklineQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTopTokensSparklineQuery({\n *   variables: {\n *      duration: // value for 'duration'\n *      chain: // value for 'chain'\n *   },\n * });\n */\nexport function useTopTokensSparklineQuery(baseOptions: Apollo.QueryHookOptions<TopTokensSparklineQuery, TopTokensSparklineQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<TopTokensSparklineQuery, TopTokensSparklineQueryVariables>(TopTokensSparklineDocument, options);\n      }\nexport function useTopTokensSparklineLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<TopTokensSparklineQuery, TopTokensSparklineQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<TopTokensSparklineQuery, TopTokensSparklineQueryVariables>(TopTokensSparklineDocument, options);\n        }\nexport type TopTokensSparklineQueryHookResult = ReturnType<typeof useTopTokensSparklineQuery>;\nexport type TopTokensSparklineLazyQueryHookResult = ReturnType<typeof useTopTokensSparklineLazyQuery>;\nexport type TopTokensSparklineQueryResult = Apollo.QueryResult<TopTokensSparklineQuery, TopTokensSparklineQueryVariables>;\nexport const AssetDocument = gql`\n    query Asset($address: String!, $orderBy: NftAssetSortableField, $asc: Boolean, $filter: NftAssetsFilterInput, $first: Int, $after: String, $last: Int, $before: String) {\n  nftAssets(\n    address: $address\n    orderBy: $orderBy\n    asc: $asc\n    filter: $filter\n    first: $first\n    after: $after\n    last: $last\n    before: $before\n  ) {\n    edges {\n      node {\n        id\n        name\n        ownerAddress\n        image {\n          url\n        }\n        smallImage {\n          url\n        }\n        originalImage {\n          url\n        }\n        tokenId\n        description\n        animationUrl\n        suspiciousFlag\n        collection {\n          name\n          isVerified\n          image {\n            url\n          }\n          creator {\n            address\n            profileImage {\n              url\n            }\n            isVerified\n          }\n          nftContracts {\n            address\n            standard\n          }\n        }\n        listings(first: 1) {\n          edges {\n            node {\n              address\n              createdAt\n              endAt\n              id\n              maker\n              marketplace\n              marketplaceUrl\n              orderHash\n              price {\n                currency\n                value\n              }\n              quantity\n              startAt\n              status\n              taker\n              tokenId\n              type\n              protocolParameters\n            }\n            cursor\n          }\n        }\n        rarities {\n          provider\n          rank\n          score\n        }\n        metadataUrl\n      }\n      cursor\n    }\n    totalCount\n    pageInfo {\n      endCursor\n      hasNextPage\n      hasPreviousPage\n      startCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useAssetQuery__\n *\n * To run a query within a React component, call `useAssetQuery` and pass it any options that fit your needs.\n * When your component renders, `useAssetQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAssetQuery({\n *   variables: {\n *      address: // value for 'address'\n *      orderBy: // value for 'orderBy'\n *      asc: // value for 'asc'\n *      filter: // value for 'filter'\n *      first: // value for 'first'\n *      after: // value for 'after'\n *      last: // value for 'last'\n *      before: // value for 'before'\n *   },\n * });\n */\nexport function useAssetQuery(baseOptions: Apollo.QueryHookOptions<AssetQuery, AssetQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<AssetQuery, AssetQueryVariables>(AssetDocument, options);\n      }\nexport function useAssetLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AssetQuery, AssetQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<AssetQuery, AssetQueryVariables>(AssetDocument, options);\n        }\nexport type AssetQueryHookResult = ReturnType<typeof useAssetQuery>;\nexport type AssetLazyQueryHookResult = ReturnType<typeof useAssetLazyQuery>;\nexport type AssetQueryResult = Apollo.QueryResult<AssetQuery, AssetQueryVariables>;\nexport const CollectionDocument = gql`\n    query Collection($addresses: [String!]!) {\n  nftCollections(filter: {addresses: $addresses}) {\n    edges {\n      cursor\n      node {\n        bannerImage {\n          url\n        }\n        collectionId\n        description\n        discordUrl\n        homepageUrl\n        image {\n          url\n        }\n        instagramName\n        isVerified\n        name\n        numAssets\n        twitterName\n        nftContracts {\n          address\n          chain\n          name\n          standard\n          symbol\n          totalSupply\n        }\n        traits {\n          name\n          values\n          stats {\n            name\n            value\n            assets\n            listings\n          }\n        }\n        markets(currencies: ETH) {\n          floorPrice {\n            currency\n            value\n          }\n          owners\n          totalVolume {\n            value\n            currency\n          }\n          listings {\n            value\n          }\n          volume(duration: DAY) {\n            value\n            currency\n          }\n          volumePercentChange(duration: DAY) {\n            value\n            currency\n          }\n          floorPricePercentChange(duration: DAY) {\n            value\n            currency\n          }\n          marketplaces {\n            marketplace\n            listings\n            floorPrice\n          }\n        }\n      }\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n      hasPreviousPage\n      startCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useCollectionQuery__\n *\n * To run a query within a React component, call `useCollectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useCollectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCollectionQuery({\n *   variables: {\n *      addresses: // value for 'addresses'\n *   },\n * });\n */\nexport function useCollectionQuery(baseOptions: Apollo.QueryHookOptions<CollectionQuery, CollectionQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<CollectionQuery, CollectionQueryVariables>(CollectionDocument, options);\n      }\nexport function useCollectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CollectionQuery, CollectionQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<CollectionQuery, CollectionQueryVariables>(CollectionDocument, options);\n        }\nexport type CollectionQueryHookResult = ReturnType<typeof useCollectionQuery>;\nexport type CollectionLazyQueryHookResult = ReturnType<typeof useCollectionLazyQuery>;\nexport type CollectionQueryResult = Apollo.QueryResult<CollectionQuery, CollectionQueryVariables>;\nexport const DetailsDocument = gql`\n    query Details($address: String!, $tokenId: String!) {\n  nftAssets(address: $address, filter: {listed: false, tokenIds: [$tokenId]}) {\n    edges {\n      node {\n        id\n        name\n        ownerAddress\n        image {\n          url\n        }\n        smallImage {\n          url\n        }\n        originalImage {\n          url\n        }\n        tokenId\n        description\n        animationUrl\n        suspiciousFlag\n        creator {\n          address\n          profileImage {\n            url\n          }\n          isVerified\n        }\n        collection {\n          name\n          isVerified\n          numAssets\n          twitterName\n          discordUrl\n          homepageUrl\n          image {\n            url\n          }\n          nftContracts {\n            address\n            standard\n          }\n          description\n        }\n        listings(first: 1) {\n          edges {\n            node {\n              address\n              createdAt\n              endAt\n              id\n              maker\n              marketplace\n              marketplaceUrl\n              orderHash\n              price {\n                currency\n                value\n              }\n              quantity\n              startAt\n              status\n              taker\n              tokenId\n              type\n              protocolParameters\n            }\n            cursor\n          }\n        }\n        rarities {\n          provider\n          rank\n          score\n        }\n        metadataUrl\n        traits {\n          name\n          value\n        }\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useDetailsQuery__\n *\n * To run a query within a React component, call `useDetailsQuery` and pass it any options that fit your needs.\n * When your component renders, `useDetailsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useDetailsQuery({\n *   variables: {\n *      address: // value for 'address'\n *      tokenId: // value for 'tokenId'\n *   },\n * });\n */\nexport function useDetailsQuery(baseOptions: Apollo.QueryHookOptions<DetailsQuery, DetailsQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<DetailsQuery, DetailsQueryVariables>(DetailsDocument, options);\n      }\nexport function useDetailsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<DetailsQuery, DetailsQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<DetailsQuery, DetailsQueryVariables>(DetailsDocument, options);\n        }\nexport type DetailsQueryHookResult = ReturnType<typeof useDetailsQuery>;\nexport type DetailsLazyQueryHookResult = ReturnType<typeof useDetailsLazyQuery>;\nexport type DetailsQueryResult = Apollo.QueryResult<DetailsQuery, DetailsQueryVariables>;\nexport const NftBalanceDocument = gql`\n    query NftBalance($ownerAddress: String!, $filter: NftBalancesFilterInput, $first: Int, $after: String, $last: Int, $before: String) {\n  nftBalances(\n    ownerAddress: $ownerAddress\n    filter: $filter\n    first: $first\n    after: $after\n    last: $last\n    before: $before\n  ) {\n    edges {\n      node {\n        ownedAsset {\n          id\n          animationUrl\n          collection {\n            isVerified\n            image {\n              url\n            }\n            name\n            nftContracts {\n              address\n              chain\n              name\n              standard\n              symbol\n              totalSupply\n            }\n            markets(currencies: ETH) {\n              floorPrice {\n                value\n              }\n            }\n          }\n          description\n          flaggedBy\n          image {\n            url\n          }\n          originalImage {\n            url\n          }\n          name\n          ownerAddress\n          smallImage {\n            url\n          }\n          suspiciousFlag\n          tokenId\n          thumbnail {\n            url\n          }\n          listings(first: 1) {\n            edges {\n              node {\n                price {\n                  value\n                  currency\n                }\n                createdAt\n                marketplace\n                endAt\n              }\n            }\n          }\n        }\n        listedMarketplaces\n        listingFees {\n          payoutAddress\n          basisPoints\n        }\n        lastPrice {\n          currency\n          timestamp\n          value\n        }\n      }\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n      hasPreviousPage\n      startCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useNftBalanceQuery__\n *\n * To run a query within a React component, call `useNftBalanceQuery` and pass it any options that fit your needs.\n * When your component renders, `useNftBalanceQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useNftBalanceQuery({\n *   variables: {\n *      ownerAddress: // value for 'ownerAddress'\n *      filter: // value for 'filter'\n *      first: // value for 'first'\n *      after: // value for 'after'\n *      last: // value for 'last'\n *      before: // value for 'before'\n *   },\n * });\n */\nexport function useNftBalanceQuery(baseOptions: Apollo.QueryHookOptions<NftBalanceQuery, NftBalanceQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<NftBalanceQuery, NftBalanceQueryVariables>(NftBalanceDocument, options);\n      }\nexport function useNftBalanceLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<NftBalanceQuery, NftBalanceQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<NftBalanceQuery, NftBalanceQueryVariables>(NftBalanceDocument, options);\n        }\nexport type NftBalanceQueryHookResult = ReturnType<typeof useNftBalanceQuery>;\nexport type NftBalanceLazyQueryHookResult = ReturnType<typeof useNftBalanceLazyQuery>;\nexport type NftBalanceQueryResult = Apollo.QueryResult<NftBalanceQuery, NftBalanceQueryVariables>;"],"mappings":"kfAAA,OAASA,GAAG,KAAQ,gBAAgB,CACpC,MAAO,GAAKC,OAAM,KAAM,gBAAgB,CAMxC,GAAMC,eAAc,CAAG,CAAC,CAAU,CAClC,qEAoBA,UAAYC,aAAY,CAqBvB,UArBWA,YAAY,EAAZA,YAAY,sBAAZA,YAAY,oBAAZA,YAAY,gBAAZA,YAAY,oBAAZA,YAAY,kBAAZA,YAAY,4BAAZA,YAAY,gBAAZA,YAAY,gBAAZA,YAAY,cAAZA,YAAY,sBAAZA,YAAY,kBAAZA,YAAY,gBAAZA,YAAY,kBAAZA,YAAY,gBAAZA,YAAY,sBAAZA,YAAY,sBAAZA,YAAY,sBAAZA,YAAY,wBAAZA,YAAY,oBAAZA,YAAY,qBAAZA,YAAY,GAAZA,YAAY,MAkDxB,UAAYC,MAAK,CAOhB,UAPWA,KAAK,EAALA,KAAK,wBAALA,KAAK,gBAALA,KAAK,wBAALA,KAAK,qCAALA,KAAK,wBAALA,KAAK,yBAALA,KAAK,GAALA,KAAK,MAcjB,UAAYC,SAAQ,CAGnB,UAHWA,QAAQ,EAARA,QAAQ,cAARA,QAAQ,iBAARA,QAAQ,GAARA,QAAQ,MAYpB,UAAYC,QAAO,CAGlB,UAHWA,OAAO,EAAPA,OAAO,gBAAPA,OAAO,iBAAPA,OAAO,GAAPA,OAAO,MAKnB,UAAYC,gBAAe,CAO1B,UAPWA,eAAe,EAAfA,eAAe,cAAfA,eAAe,gBAAfA,eAAe,cAAfA,eAAe,kBAAfA,eAAe,gBAAfA,eAAe,mBAAfA,eAAe,GAAfA,eAAe,MA0B3B,kCACA,UAAYC,oBAAmB,CAG9B,UAHWA,mBAAmB,EAAnBA,mBAAmB,2BAAnBA,mBAAmB,uBAAnBA,mBAAmB,GAAnBA,mBAAmB,MAsF/B,UAAYC,sBAAqB,CAGhC,UAHWA,qBAAqB,EAArBA,qBAAqB,kBAArBA,qBAAqB,uBAArBA,qBAAqB,GAArBA,qBAAqB,MA0LjC,UAAYC,uBAAsB,CAGjC,UAHWA,sBAAsB,EAAtBA,sBAAsB,6BAAtBA,sBAAsB,uBAAtBA,sBAAsB,GAAtBA,sBAAsB,MAKlC,UAAYC,eAAc,CASzB,UATWA,cAAc,EAAdA,cAAc,8BAAdA,cAAc,4BAAdA,cAAc,0BAAdA,cAAc,kBAAdA,cAAc,gBAAdA,cAAc,sBAAdA,cAAc,wBAAdA,cAAc,mBAAdA,cAAc,GAAdA,cAAc,MAqD1B,UAAYC,kBAAiB,CAE5B,UAFWA,iBAAiB,EAAjBA,iBAAiB,oCAAjBA,iBAAiB,GAAjBA,iBAAiB,MAI7B,UAAYC,YAAW,CAItB,UAJWA,WAAW,EAAXA,WAAW,oBAAXA,WAAW,sBAAXA,WAAW,mCAAXA,WAAW,GAAXA,WAAW,MAgBvB,UAAYC,YAAW,CAKtB,UALWA,WAAW,EAAXA,WAAW,0BAAXA,WAAW,wBAAXA,WAAW,sBAAXA,WAAW,qBAAXA,WAAW,GAAXA,WAAW,MAOvB,UAAYC,UAAS,CAGpB,UAHWA,SAAS,EAATA,SAAS,sBAATA,SAAS,qBAATA,SAAS,GAATA,SAAS,MA+IrB,UAAYC,YAAW,CAKtB,UALWA,WAAW,EAAXA,WAAW,sBAAXA,WAAW,mCAAXA,WAAW,mCAAXA,WAAW,2BAAXA,WAAW,GAAXA,WAAW,MAmJvB,UAAYC,mBAAkB,CAK7B,UALWA,kBAAkB,EAAlBA,kBAAkB,2BAAlBA,kBAAkB,4BAAlBA,kBAAkB,0CAAlBA,kBAAkB,uBAAlBA,kBAAkB,GAAlBA,kBAAkB,MAO9B,UAAYC,cAAa,CAIxB,UAJWA,aAAa,EAAbA,aAAa,kBAAbA,aAAa,sBAAbA,aAAa,uBAAbA,aAAa,GAAbA,aAAa,MA+BzB,UAAYC,qBAAoB,CAI/B,UAJWA,oBAAoB,EAApBA,oBAAoB,YAApBA,oBAAoB,cAApBA,oBAAoB,mBAApBA,oBAAoB,GAApBA,oBAAoB,MAMhC,UAAYC,kBAAiB,CAI5B,UAJWA,iBAAiB,EAAjBA,iBAAiB,0BAAjBA,iBAAiB,oBAAjBA,iBAAiB,yBAAjBA,iBAAiB,GAAjBA,iBAAiB,MA+E7B,MAAO,IAAMC,cAAa,CAAGrB,GAAG,qyBAyC3B,CAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAASsB,cAAa,CAACC,WAAqE,CAAE,CAC7F,GAAMC,QAAO,gCAAOtB,cAAc,EAAKqB,WAAW,CAAC,CACnD,MAAOtB,OAAM,CAACwB,QAAQ,CAAkCJ,aAAa,CAAEG,OAAO,CAAC,CACjF,CACN,MAAO,SAASE,kBAAiB,CAACH,WAA0E,CAAE,CACpG,GAAMC,QAAO,gCAAOtB,cAAc,EAAKqB,WAAW,CAAC,CACnD,MAAOtB,OAAM,CAAC0B,YAAY,CAAkCN,aAAa,CAAEG,OAAO,CAAC,CACrF,CAIR,MAAO,IAAMI,mBAAkB,CAAG5B,GAAG,sWAchC,CAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS6B,mBAAkB,CAACN,WAA+E,CAAE,CAC5G,GAAMC,QAAO,gCAAOtB,cAAc,EAAKqB,WAAW,CAAC,CACnD,MAAOtB,OAAM,CAACwB,QAAQ,CAA4CG,kBAAkB,CAAEJ,OAAO,CAAC,CAChG,CACN,MAAO,SAASM,uBAAsB,CAACP,WAAoF,CAAE,CACnH,GAAMC,QAAO,gCAAOtB,cAAc,EAAKqB,WAAW,CAAC,CACnD,MAAOtB,OAAM,CAAC0B,YAAY,CAA4CC,kBAAkB,CAAEJ,OAAO,CAAC,CACpG,CAIR,MAAO,IAAMO,qBAAoB,CAAG/B,GAAG,onBA+BlC,CAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAASgC,qBAAoB,CAACT,WAAmF,CAAE,CAClH,GAAMC,QAAO,gCAAOtB,cAAc,EAAKqB,WAAW,CAAC,CACnD,MAAOtB,OAAM,CAACwB,QAAQ,CAAgDM,oBAAoB,CAAEP,OAAO,CAAC,CACtG,CACN,MAAO,SAASS,yBAAwB,CAACV,WAAwF,CAAE,CACzH,GAAMC,QAAO,gCAAOtB,cAAc,EAAKqB,WAAW,CAAC,CACnD,MAAOtB,OAAM,CAAC0B,YAAY,CAAgDI,oBAAoB,CAAEP,OAAO,CAAC,CAC1G,CAIR,MAAO,IAAMU,2BAA0B,CAAGlC,GAAG,2VAYxC,CAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAASmC,2BAA0B,CAACZ,WAA+F,CAAE,CACpI,GAAMC,QAAO,gCAAOtB,cAAc,EAAKqB,WAAW,CAAC,CACnD,MAAOtB,OAAM,CAACwB,QAAQ,CAA4DS,0BAA0B,CAAEV,OAAO,CAAC,CACxH,CACN,MAAO,SAASY,+BAA8B,CAACb,WAAoG,CAAE,CAC3I,GAAMC,QAAO,gCAAOtB,cAAc,EAAKqB,WAAW,CAAC,CACnD,MAAOtB,OAAM,CAAC0B,YAAY,CAA4DO,0BAA0B,CAAEV,OAAO,CAAC,CAC5H,CAIR,MAAO,IAAMa,cAAa,CAAGrC,GAAG,i3DA4F3B,CAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAASsC,cAAa,CAACf,WAAqE,CAAE,CAC7F,GAAMC,QAAO,gCAAOtB,cAAc,EAAKqB,WAAW,CAAC,CACnD,MAAOtB,OAAM,CAACwB,QAAQ,CAAkCY,aAAa,CAAEb,OAAO,CAAC,CACjF,CACN,MAAO,SAASe,kBAAiB,CAAChB,WAA0E,CAAE,CACpG,GAAMC,QAAO,gCAAOtB,cAAc,EAAKqB,WAAW,CAAC,CACnD,MAAOtB,OAAM,CAAC0B,YAAY,CAAkCU,aAAa,CAAEb,OAAO,CAAC,CACrF,CAIR,MAAO,IAAMgB,mBAAkB,CAAGxC,GAAG,klDAgFhC,CAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAASyC,mBAAkB,CAAClB,WAA+E,CAAE,CAC5G,GAAMC,QAAO,gCAAOtB,cAAc,EAAKqB,WAAW,CAAC,CACnD,MAAOtB,OAAM,CAACwB,QAAQ,CAA4Ce,kBAAkB,CAAEhB,OAAO,CAAC,CAChG,CACN,MAAO,SAASkB,uBAAsB,CAACnB,WAAoF,CAAE,CACnH,GAAMC,QAAO,gCAAOtB,cAAc,EAAKqB,WAAW,CAAC,CACnD,MAAOtB,OAAM,CAAC0B,YAAY,CAA4Ca,kBAAkB,CAAEhB,OAAO,CAAC,CACpG,CAIR,MAAO,IAAMmB,gBAAe,CAAG3C,GAAG,wrDAoF7B,CAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS4C,gBAAe,CAACrB,WAAyE,CAAE,CACnG,GAAMC,QAAO,gCAAOtB,cAAc,EAAKqB,WAAW,CAAC,CACnD,MAAOtB,OAAM,CAACwB,QAAQ,CAAsCkB,eAAe,CAAEnB,OAAO,CAAC,CACvF,CACN,MAAO,SAASqB,oBAAmB,CAACtB,WAA8E,CAAE,CAC1G,GAAMC,QAAO,gCAAOtB,cAAc,EAAKqB,WAAW,CAAC,CACnD,MAAOtB,OAAM,CAAC0B,YAAY,CAAsCgB,eAAe,CAAEnB,OAAO,CAAC,CAC3F,CAIR,MAAO,IAAMsB,mBAAkB,CAAG9C,GAAG,u0DAuFhC,CAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS+C,mBAAkB,CAACxB,WAA+E,CAAE,CAC5G,GAAMC,QAAO,gCAAOtB,cAAc,EAAKqB,WAAW,CAAC,CACnD,MAAOtB,OAAM,CAACwB,QAAQ,CAA4CqB,kBAAkB,CAAEtB,OAAO,CAAC,CAChG,CACN,MAAO,SAASwB,uBAAsB,CAACzB,WAAoF,CAAE,CACnH,GAAMC,QAAO,gCAAOtB,cAAc,EAAKqB,WAAW,CAAC,CACnD,MAAOtB,OAAM,CAAC0B,YAAY,CAA4CmB,kBAAkB,CAAEtB,OAAO,CAAC,CACpG"},"metadata":{},"sourceType":"module"}