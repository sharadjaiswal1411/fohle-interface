{"ast":null,"code":"import React, { useRef, useState } from 'react';\nimport { useIsomorphicLayoutEffect } from '@reach/utils';\nimport { createPortal } from 'react-dom';\n\n/**\r\n * Welcome to @reach/portal!\r\n *\r\n * Creates and appends a DOM node to the end of `document.body` and renders a\r\n * React tree into it. Useful for rendering a natural React element hierarchy\r\n * with a different DOM hierarchy to prevent parent styles from clipping or\r\n * hiding content (for popovers, dropdowns, and modals).\r\n *\r\n * @see Docs   https://reacttraining.com/reach-ui/portal\r\n * @see Source https://github.com/reach/reach-ui/tree/main/packages/portal\r\n * @see React  https://reactjs.org/docs/portals.html\r\n */\n/**\r\n * Portal\r\n *\r\n * @see Docs https://reacttraining.com/reach-ui/portal#portal\r\n */\n\nvar Portal = function Portal(_ref) {\n  var children = _ref.children,\n    _ref$type = _ref.type,\n    type = _ref$type === void 0 ? \"reach-portal\" : _ref$type;\n  var mountNode = useRef(null);\n  var portalNode = useRef(null);\n  var _useState = useState(),\n    forceUpdate = _useState[1];\n  useIsomorphicLayoutEffect(function () {\n    // This ref may be null when a hot-loader replaces components on the page\n    if (!mountNode.current) return; // It's possible that the content of the portal has, itself, been portaled.\n    // In that case, it's important to append to the correct document element.\n\n    var ownerDocument = mountNode.current.ownerDocument;\n    portalNode.current = ownerDocument === null || ownerDocument === void 0 ? void 0 : ownerDocument.createElement(type);\n    ownerDocument.body.appendChild(portalNode.current);\n    forceUpdate({});\n    return function () {\n      if (portalNode.current && portalNode.current.ownerDocument) {\n        portalNode.current.ownerDocument.body.removeChild(portalNode.current);\n      }\n    };\n  }, [type]);\n  return portalNode.current ? createPortal(children, portalNode.current) : React.createElement(\"span\", {\n    ref: mountNode\n  });\n};\nif (process.env.NODE_ENV !== \"production\") {\n  Portal.displayName = \"Portal\";\n}\nexport default Portal;","map":{"version":3,"sources":["../src/index.tsx"],"names":["Portal","children","type","mountNode","useRef","portalNode","forceUpdate","useState","useIsomorphicLayoutEffect","current","ownerDocument","createElement","body","appendChild","removeChild","createPortal","ref","displayName"],"mappings":";;;;AAAA;;;;;;;;;;;;AAiBA;;;;;;IAKMA,MAAM,GAA0B,SAAhCA,MAAgC,CAAA,IAAA,EAAA;MAAGC,QAAAA,GAAAA,IAAAA,CAAAA,QAAAA;qBAAUC,IAAAA;IAAAA,IAAAA,GAAAA,SAAAA,KAAAA,KAAAA,CAAAA,GAAO,cAAA,GAAA,SAAA;EACxD,IAAIC,SAAS,GAAGC,MAAM,CAAwB,IAAxB,CAAtB;EACA,IAAIC,UAAU,GAAGD,MAAM,CAAqB,IAArB,CAAvB;kBACsBG,QAAQ,EAAA;IAAvBD,WAAAA,GAAAA,SAAAA,CAAAA,CAAAA,CAAAA;EAEPE,yBAAyB,CAAC,YAAA;IACxB;IACA,IAAI,CAACL,SAAS,CAACM,OAAf,EAAwB,OAAA,CAAA;IAExB;;IACA,IAAMC,aAAa,GAAGP,SAAS,CAACM,OAAVN,CAAmBO,aAAzC;IACAL,UAAU,CAACI,OAAXJ,GAAqBK,aAArBL,KAAAA,IAAAA,IAAqBK,aAArBL,KAAAA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAqBK,aAAa,CAAEC,aAAfD,CAA6BR,IAA7BQ,CAArBL;IACAK,aAAc,CAACE,IAAfF,CAAoBG,WAApBH,CAAgCL,UAAU,CAACI,OAA3CC,CAAAA;IACAJ,WAAW,CAAC,CAAA,CAAD,CAAXA;IACA,OAAO,YAAA;MACL,IAAID,UAAU,CAACI,OAAXJ,IAAsBA,UAAU,CAACI,OAAXJ,CAAmBK,aAA7C,EAA4D;QAC1DL,UAAU,CAACI,OAAXJ,CAAmBK,aAAnBL,CAAiCO,IAAjCP,CAAsCS,WAAtCT,CAAkDA,UAAU,CAACI,OAA7DJ,CAAAA;MACD;IACF,CAJD;EAKD,CAdwB,EActB,CAACH,IAAD,CAdsB,CAAzBM;EAgBA,OAAOH,UAAU,CAACI,OAAXJ,GACLU,YAAY,CAACd,QAAD,EAAWI,UAAU,CAACI,OAAtB,CADPJ,GAGL,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;IAAMW,GAAG,EAAEb;GAAX,CAHF;AAKD,CAAA;AAoBD,IAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,EAAa;EACXH,MAAM,CAACiB,WAAPjB,GAAqB,QAArBA;AACD","sourcesContent":["/**\n * Welcome to @reach/portal!\n *\n * Creates and appends a DOM node to the end of `document.body` and renders a\n * React tree into it. Useful for rendering a natural React element hierarchy\n * with a different DOM hierarchy to prevent parent styles from clipping or\n * hiding content (for popovers, dropdowns, and modals).\n *\n * @see Docs   https://reacttraining.com/reach-ui/portal\n * @see Source https://github.com/reach/reach-ui/tree/main/packages/portal\n * @see React  https://reactjs.org/docs/portals.html\n */\n\nimport React, { useRef, useState } from \"react\";\nimport { useIsomorphicLayoutEffect } from \"@reach/utils\";\nimport { createPortal } from \"react-dom\";\n\n/**\n * Portal\n *\n * @see Docs https://reacttraining.com/reach-ui/portal#portal\n */\nconst Portal: React.FC<PortalProps> = ({ children, type = \"reach-portal\" }) => {\n  let mountNode = useRef<HTMLDivElement | null>(null);\n  let portalNode = useRef<HTMLElement | null>(null);\n  let [, forceUpdate] = useState();\n\n  useIsomorphicLayoutEffect(() => {\n    // This ref may be null when a hot-loader replaces components on the page\n    if (!mountNode.current) return;\n    // It's possible that the content of the portal has, itself, been portaled.\n    // In that case, it's important to append to the correct document element.\n    const ownerDocument = mountNode.current!.ownerDocument;\n    portalNode.current = ownerDocument?.createElement(type)!;\n    ownerDocument!.body.appendChild(portalNode.current);\n    forceUpdate({});\n    return () => {\n      if (portalNode.current && portalNode.current.ownerDocument) {\n        portalNode.current.ownerDocument.body.removeChild(portalNode.current);\n      }\n    };\n  }, [type]);\n\n  return portalNode.current ? (\n    createPortal(children, portalNode.current)\n  ) : (\n    <span ref={mountNode} />\n  );\n};\n\n/**\n * @see Docs https://reacttraining.com/reach-ui/portal#portal-props\n */\nexport type PortalProps = {\n  /**\n   * Regular React children.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/portal#portal-children\n   */\n  children: React.ReactNode;\n  /**\n   * The DOM element type to render.\n   *\n   * @see Docs https://reacttraining.com/reach-ui/portal#portal-type\n   */\n  type?: string;\n};\n\nif (__DEV__) {\n  Portal.displayName = \"Portal\";\n}\n\nexport default Portal;\n"]},"metadata":{},"sourceType":"module"}