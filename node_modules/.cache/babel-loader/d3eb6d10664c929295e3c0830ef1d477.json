{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$(),\n  _s5 = $RefreshSig$();\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { hexZeroPad } from '@ethersproject/bytes';\nimport { namehash } from '@ethersproject/hash';\nimport { useWeb3React } from '@web3-react/core';\nimport { useSingleCallResult } from 'lib/hooks/multicall';\nimport uriToHttp from 'lib/utils/uriToHttp';\nimport { useEffect, useMemo, useState } from 'react';\nimport { safeNamehash } from 'utils/safeNamehash';\nimport { isAddress } from '../utils';\nimport isZero from '../utils/isZero';\nimport { useENSRegistrarContract, useENSResolverContract, useERC721Contract, useERC1155Contract } from './useContract';\nimport useDebounce from './useDebounce';\nimport useENSName from './useENSName';\n\n/**\n * Returns the ENS avatar URI, if available.\n * Spec: https://gist.github.com/Arachnid/9db60bd75277969ee1689c8742b75182.\n */\nexport default function useENSAvatar(address) {\n  _s();\n  let enforceOwnership = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  const debouncedAddress = useDebounce(address, 200);\n  const node = useMemo(() => {\n    if (!debouncedAddress || !isAddress(debouncedAddress)) return undefined;\n    return namehash(`${debouncedAddress.toLowerCase().substr(2)}.addr.reverse`);\n  }, [debouncedAddress]);\n  const addressAvatar = useAvatarFromNode(node);\n  const ENSName = useENSName(address).ENSName;\n  const nameAvatar = useAvatarFromNode(ENSName === null ? undefined : safeNamehash(ENSName));\n  let avatar = addressAvatar.avatar || nameAvatar.avatar;\n  const nftAvatar = useAvatarFromNFT(avatar, enforceOwnership);\n  avatar = nftAvatar.avatar || avatar;\n  const http = avatar && uriToHttp(avatar)[0];\n  const changed = debouncedAddress !== address;\n  return useMemo(() => ({\n    avatar: changed ? null : http !== null && http !== void 0 ? http : null,\n    loading: changed || addressAvatar.loading || nameAvatar.loading || nftAvatar.loading\n  }), [addressAvatar.loading, changed, http, nameAvatar.loading, nftAvatar.loading]);\n}\n_s(useENSAvatar, \"kPqadEJJYXkc1pn3HmgR3c/pQo0=\", false, function () {\n  return [useDebounce, useAvatarFromNode, useENSName, useAvatarFromNode, useAvatarFromNFT];\n});\nfunction useAvatarFromNode(node) {\n  _s2();\n  var _resolverAddress$resu;\n  const nodeArgument = useMemo(() => [node], [node]);\n  const textArgument = useMemo(() => [node, 'avatar'], [node]);\n  const registrarContract = useENSRegistrarContract(false);\n  const resolverAddress = useSingleCallResult(registrarContract, 'resolver', nodeArgument);\n  const resolverAddressResult = (_resolverAddress$resu = resolverAddress.result) === null || _resolverAddress$resu === void 0 ? void 0 : _resolverAddress$resu[0];\n  const resolverContract = useENSResolverContract(resolverAddressResult && !isZero(resolverAddressResult) ? resolverAddressResult : undefined, false);\n  const avatar = useSingleCallResult(resolverContract, 'text', textArgument);\n  return useMemo(() => {\n    var _avatar$result;\n    return {\n      avatar: (_avatar$result = avatar.result) === null || _avatar$result === void 0 ? void 0 : _avatar$result[0],\n      loading: resolverAddress.loading || avatar.loading\n    };\n  }, [avatar.loading, avatar.result, resolverAddress.loading]);\n}\n_s2(useAvatarFromNode, \"CAccaDqfuiWTPuzsSvy0wlA1c/Q=\", false, function () {\n  return [useENSRegistrarContract, useSingleCallResult, useENSResolverContract, useSingleCallResult];\n});\nfunction useAvatarFromNFT() {\n  _s3();\n  var _parts$1$split, _parts$, _parts$2$split, _parts$2;\n  let nftUri = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  let enforceOwnership = arguments.length > 1 ? arguments[1] : undefined;\n  const parts = nftUri.toLowerCase().split(':');\n  const protocol = parts[0];\n  // ignore the chain from eip155\n  // TODO: when we are able, pull only from the specified chain\n  const [, erc] = (_parts$1$split = (_parts$ = parts[1]) === null || _parts$ === void 0 ? void 0 : _parts$.split('/')) !== null && _parts$1$split !== void 0 ? _parts$1$split : [];\n  const [contractAddress, id] = (_parts$2$split = (_parts$2 = parts[2]) === null || _parts$2 === void 0 ? void 0 : _parts$2.split('/')) !== null && _parts$2$split !== void 0 ? _parts$2$split : [];\n  const isERC721 = protocol === 'eip155' && erc === 'erc721';\n  const isERC1155 = protocol === 'eip155' && erc === 'erc1155';\n  const erc721 = useERC721Uri(isERC721 ? contractAddress : undefined, id, enforceOwnership);\n  const erc1155 = useERC1155Uri(isERC1155 ? contractAddress : undefined, id, enforceOwnership);\n  const uri = erc721.uri || erc1155.uri;\n  const http = uri && uriToHttp(uri)[0];\n  const [loading, setLoading] = useState(false);\n  const [avatar, setAvatar] = useState(undefined);\n  useEffect(() => {\n    setAvatar(undefined);\n    if (http) {\n      setLoading(true);\n      fetch(http).then(res => res.json()).then(_ref => {\n        let {\n          image\n        } = _ref;\n        setAvatar(image);\n      }).catch(e => console.warn(e)).finally(() => {\n        setLoading(false);\n      });\n    }\n  }, [http]);\n  return useMemo(() => ({\n    avatar,\n    loading: erc721.loading || erc1155.loading || loading\n  }), [avatar, erc1155.loading, erc721.loading, loading]);\n}\n_s3(useAvatarFromNFT, \"U9booG3oVmc10wR1Yu6HvEmz+/I=\", false, function () {\n  return [useERC721Uri, useERC1155Uri];\n});\nfunction useERC721Uri(contractAddress, id, enforceOwnership) {\n  _s4();\n  const idArgument = useMemo(() => [id], [id]);\n  const {\n    account\n  } = useWeb3React();\n  const contract = useERC721Contract(contractAddress);\n  const owner = useSingleCallResult(contract, 'ownerOf', idArgument);\n  const uri = useSingleCallResult(contract, 'tokenURI', idArgument);\n  return useMemo(() => {\n    var _owner$result, _uri$result;\n    return {\n      uri: !enforceOwnership || account === ((_owner$result = owner.result) === null || _owner$result === void 0 ? void 0 : _owner$result[0]) ? (_uri$result = uri.result) === null || _uri$result === void 0 ? void 0 : _uri$result[0] : undefined,\n      loading: owner.loading || uri.loading\n    };\n  }, [account, enforceOwnership, owner.loading, owner.result, uri.loading, uri.result]);\n}\n_s4(useERC721Uri, \"fT51rftgI2LTTP1Wch2u9OJyINc=\", false, function () {\n  return [useWeb3React, useERC721Contract, useSingleCallResult, useSingleCallResult];\n});\nfunction useERC1155Uri(contractAddress, id, enforceOwnership) {\n  _s5();\n  const {\n    account\n  } = useWeb3React();\n  const idArgument = useMemo(() => [id], [id]);\n  const accountArgument = useMemo(() => [account || '', id], [account, id]);\n  const contract = useERC1155Contract(contractAddress);\n  const balance = useSingleCallResult(contract, 'balanceOf', accountArgument);\n  const uri = useSingleCallResult(contract, 'uri', idArgument);\n  // ERC-1155 allows a generic {id} in the URL, so prepare to replace if relevant,\n  //   in lowercase hexadecimal (with no 0x prefix) and leading zero padded to 64 hex characters.\n  const idHex = id ? hexZeroPad(BigNumber.from(id).toHexString(), 32).substring(2) : id;\n  return useMemo(() => {\n    var _balance$result, _uri$result2, _uri$result2$;\n    return {\n      uri: !enforceOwnership || ((_balance$result = balance.result) === null || _balance$result === void 0 ? void 0 : _balance$result[0]) > 0 ? (_uri$result2 = uri.result) === null || _uri$result2 === void 0 ? void 0 : (_uri$result2$ = _uri$result2[0]) === null || _uri$result2$ === void 0 ? void 0 : _uri$result2$.replaceAll('{id}', idHex) : undefined,\n      loading: balance.loading || uri.loading\n    };\n  }, [balance.loading, balance.result, enforceOwnership, uri.loading, uri.result, idHex]);\n}\n_s5(useERC1155Uri, \"qDJc2vfuuXhBcLAQy8dsm1uJRfc=\", false, function () {\n  return [useWeb3React, useERC1155Contract, useSingleCallResult, useSingleCallResult];\n});","map":{"version":3,"names":["BigNumber","hexZeroPad","namehash","useWeb3React","useSingleCallResult","uriToHttp","useEffect","useMemo","useState","safeNamehash","isAddress","isZero","useENSRegistrarContract","useENSResolverContract","useERC721Contract","useERC1155Contract","useDebounce","useENSName","useENSAvatar","address","enforceOwnership","debouncedAddress","node","undefined","toLowerCase","substr","addressAvatar","useAvatarFromNode","ENSName","nameAvatar","avatar","nftAvatar","useAvatarFromNFT","http","changed","loading","nodeArgument","textArgument","registrarContract","resolverAddress","resolverAddressResult","result","resolverContract","nftUri","parts","split","protocol","erc","contractAddress","id","isERC721","isERC1155","erc721","useERC721Uri","erc1155","useERC1155Uri","uri","setLoading","setAvatar","fetch","then","res","json","image","catch","e","console","warn","finally","idArgument","account","contract","owner","accountArgument","balance","idHex","from","toHexString","substring","replaceAll"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/hooks/useENSAvatar.ts"],"sourcesContent":["import { BigNumber } from '@ethersproject/bignumber'\nimport { hexZeroPad } from '@ethersproject/bytes'\nimport { namehash } from '@ethersproject/hash'\nimport { useWeb3React } from '@web3-react/core'\nimport { useSingleCallResult } from 'lib/hooks/multicall'\nimport uriToHttp from 'lib/utils/uriToHttp'\nimport { useEffect, useMemo, useState } from 'react'\nimport { safeNamehash } from 'utils/safeNamehash'\n\nimport { isAddress } from '../utils'\nimport isZero from '../utils/isZero'\nimport { useENSRegistrarContract, useENSResolverContract, useERC721Contract, useERC1155Contract } from './useContract'\nimport useDebounce from './useDebounce'\nimport useENSName from './useENSName'\n\n/**\n * Returns the ENS avatar URI, if available.\n * Spec: https://gist.github.com/Arachnid/9db60bd75277969ee1689c8742b75182.\n */\nexport default function useENSAvatar(\n  address?: string,\n  enforceOwnership = true\n): { avatar: string | null; loading: boolean } {\n  const debouncedAddress = useDebounce(address, 200)\n  const node = useMemo(() => {\n    if (!debouncedAddress || !isAddress(debouncedAddress)) return undefined\n    return namehash(`${debouncedAddress.toLowerCase().substr(2)}.addr.reverse`)\n  }, [debouncedAddress])\n\n  const addressAvatar = useAvatarFromNode(node)\n  const ENSName = useENSName(address).ENSName\n  const nameAvatar = useAvatarFromNode(ENSName === null ? undefined : safeNamehash(ENSName))\n  let avatar = addressAvatar.avatar || nameAvatar.avatar\n\n  const nftAvatar = useAvatarFromNFT(avatar, enforceOwnership)\n  avatar = nftAvatar.avatar || avatar\n\n  const http = avatar && uriToHttp(avatar)[0]\n\n  const changed = debouncedAddress !== address\n  return useMemo(\n    () => ({\n      avatar: changed ? null : http ?? null,\n      loading: changed || addressAvatar.loading || nameAvatar.loading || nftAvatar.loading,\n    }),\n    [addressAvatar.loading, changed, http, nameAvatar.loading, nftAvatar.loading]\n  )\n}\n\nfunction useAvatarFromNode(node?: string): { avatar?: string; loading: boolean } {\n  const nodeArgument = useMemo(() => [node], [node])\n  const textArgument = useMemo(() => [node, 'avatar'], [node])\n  const registrarContract = useENSRegistrarContract(false)\n  const resolverAddress = useSingleCallResult(registrarContract, 'resolver', nodeArgument)\n  const resolverAddressResult = resolverAddress.result?.[0]\n  const resolverContract = useENSResolverContract(\n    resolverAddressResult && !isZero(resolverAddressResult) ? resolverAddressResult : undefined,\n    false\n  )\n  const avatar = useSingleCallResult(resolverContract, 'text', textArgument)\n\n  return useMemo(\n    () => ({\n      avatar: avatar.result?.[0],\n      loading: resolverAddress.loading || avatar.loading,\n    }),\n    [avatar.loading, avatar.result, resolverAddress.loading]\n  )\n}\n\nfunction useAvatarFromNFT(nftUri = '', enforceOwnership: boolean): { avatar?: string; loading: boolean } {\n  const parts = nftUri.toLowerCase().split(':')\n  const protocol = parts[0]\n  // ignore the chain from eip155\n  // TODO: when we are able, pull only from the specified chain\n  const [, erc] = parts[1]?.split('/') ?? []\n  const [contractAddress, id] = parts[2]?.split('/') ?? []\n  const isERC721 = protocol === 'eip155' && erc === 'erc721'\n  const isERC1155 = protocol === 'eip155' && erc === 'erc1155'\n  const erc721 = useERC721Uri(isERC721 ? contractAddress : undefined, id, enforceOwnership)\n  const erc1155 = useERC1155Uri(isERC1155 ? contractAddress : undefined, id, enforceOwnership)\n  const uri = erc721.uri || erc1155.uri\n  const http = uri && uriToHttp(uri)[0]\n\n  const [loading, setLoading] = useState(false)\n  const [avatar, setAvatar] = useState(undefined)\n  useEffect(() => {\n    setAvatar(undefined)\n    if (http) {\n      setLoading(true)\n      fetch(http)\n        .then((res) => res.json())\n        .then(({ image }) => {\n          setAvatar(image)\n        })\n        .catch((e) => console.warn(e))\n        .finally(() => {\n          setLoading(false)\n        })\n    }\n  }, [http])\n\n  return useMemo(\n    () => ({ avatar, loading: erc721.loading || erc1155.loading || loading }),\n    [avatar, erc1155.loading, erc721.loading, loading]\n  )\n}\n\nfunction useERC721Uri(\n  contractAddress: string | undefined,\n  id: string | undefined,\n  enforceOwnership: boolean\n): { uri?: string; loading: boolean } {\n  const idArgument = useMemo(() => [id], [id])\n  const { account } = useWeb3React()\n  const contract = useERC721Contract(contractAddress)\n  const owner = useSingleCallResult(contract, 'ownerOf', idArgument)\n  const uri = useSingleCallResult(contract, 'tokenURI', idArgument)\n  return useMemo(\n    () => ({\n      uri: !enforceOwnership || account === owner.result?.[0] ? uri.result?.[0] : undefined,\n      loading: owner.loading || uri.loading,\n    }),\n    [account, enforceOwnership, owner.loading, owner.result, uri.loading, uri.result]\n  )\n}\n\nfunction useERC1155Uri(\n  contractAddress: string | undefined,\n  id: string | undefined,\n  enforceOwnership: boolean\n): { uri?: string; loading: boolean } {\n  const { account } = useWeb3React()\n  const idArgument = useMemo(() => [id], [id])\n  const accountArgument = useMemo(() => [account || '', id], [account, id])\n  const contract = useERC1155Contract(contractAddress)\n  const balance = useSingleCallResult(contract, 'balanceOf', accountArgument)\n  const uri = useSingleCallResult(contract, 'uri', idArgument)\n  // ERC-1155 allows a generic {id} in the URL, so prepare to replace if relevant,\n  //   in lowercase hexadecimal (with no 0x prefix) and leading zero padded to 64 hex characters.\n  const idHex = id ? hexZeroPad(BigNumber.from(id).toHexString(), 32).substring(2) : id\n  return useMemo(\n    () => ({\n      uri: !enforceOwnership || balance.result?.[0] > 0 ? uri.result?.[0]?.replaceAll('{id}', idHex) : undefined,\n      loading: balance.loading || uri.loading,\n    }),\n    [balance.loading, balance.result, enforceOwnership, uri.loading, uri.result, idHex]\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}