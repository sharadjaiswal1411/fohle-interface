{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { splitSignature } from '@ethersproject/bytes';\nimport { useWeb3React } from '@web3-react/core';\nimport JSBI from 'jsbi';\nimport { useSingleCallResult } from 'lib/hooks/multicall';\nimport { useMemo, useState } from 'react';\nimport { SWAP_ROUTER_ADDRESSES } from '../constants/addresses';\nimport { DAI, UNI, USDC_MAINNET } from '../constants/tokens';\nimport { useEIP2612Contract } from './useContract';\nimport useIsArgentWallet from './useIsArgentWallet';\nexport let PermitType;\n\n// 20 minutes to submit after signing\n(function (PermitType) {\n  PermitType[PermitType[\"AMOUNT\"] = 1] = \"AMOUNT\";\n  PermitType[PermitType[\"ALLOWED\"] = 2] = \"ALLOWED\";\n})(PermitType || (PermitType = {}));\nconst PERMIT_VALIDITY_BUFFER = 20 * 60;\n// todo: read this information from extensions on token lists or elsewhere (permit registry?)\nconst PERMITTABLE_TOKENS = {\n  1: {\n    [USDC_MAINNET.address]: {\n      type: PermitType.AMOUNT,\n      name: 'USD Coin',\n      version: '2'\n    },\n    [DAI.address]: {\n      type: PermitType.ALLOWED,\n      name: 'Dai Stablecoin',\n      version: '1'\n    },\n    [UNI[1].address]: {\n      type: PermitType.AMOUNT,\n      name: 'Uniswap'\n    }\n  },\n  4: {\n    '0xc7AD46e0b8a400Bb3C915120d284AafbA8fc4735': {\n      type: PermitType.ALLOWED,\n      name: 'Dai Stablecoin',\n      version: '1'\n    },\n    [UNI[4].address]: {\n      type: PermitType.AMOUNT,\n      name: 'Uniswap'\n    }\n  },\n  3: {\n    [UNI[3].address]: {\n      type: PermitType.AMOUNT,\n      name: 'Uniswap'\n    },\n    '0x07865c6E87B9F70255377e024ace6630C1Eaa37F': {\n      type: PermitType.AMOUNT,\n      name: 'USD Coin',\n      version: '2'\n    }\n  },\n  5: {\n    [UNI[5].address]: {\n      type: PermitType.AMOUNT,\n      name: 'Uniswap'\n    }\n  },\n  42: {\n    [UNI[42].address]: {\n      type: PermitType.AMOUNT,\n      name: 'Uniswap'\n    }\n  }\n};\nexport let UseERC20PermitState;\n(function (UseERC20PermitState) {\n  UseERC20PermitState[UseERC20PermitState[\"NOT_APPLICABLE\"] = 0] = \"NOT_APPLICABLE\";\n  UseERC20PermitState[UseERC20PermitState[\"LOADING\"] = 1] = \"LOADING\";\n  UseERC20PermitState[UseERC20PermitState[\"NOT_SIGNED\"] = 2] = \"NOT_SIGNED\";\n  UseERC20PermitState[UseERC20PermitState[\"SIGNED\"] = 3] = \"SIGNED\";\n})(UseERC20PermitState || (UseERC20PermitState = {}));\nconst EIP712_DOMAIN_TYPE = [{\n  name: 'name',\n  type: 'string'\n}, {\n  name: 'version',\n  type: 'string'\n}, {\n  name: 'chainId',\n  type: 'uint256'\n}, {\n  name: 'verifyingContract',\n  type: 'address'\n}];\nconst EIP712_DOMAIN_TYPE_NO_VERSION = [{\n  name: 'name',\n  type: 'string'\n}, {\n  name: 'chainId',\n  type: 'uint256'\n}, {\n  name: 'verifyingContract',\n  type: 'address'\n}];\nconst EIP2612_TYPE = [{\n  name: 'owner',\n  type: 'address'\n}, {\n  name: 'spender',\n  type: 'address'\n}, {\n  name: 'value',\n  type: 'uint256'\n}, {\n  name: 'nonce',\n  type: 'uint256'\n}, {\n  name: 'deadline',\n  type: 'uint256'\n}];\nconst PERMIT_ALLOWED_TYPE = [{\n  name: 'holder',\n  type: 'address'\n}, {\n  name: 'spender',\n  type: 'address'\n}, {\n  name: 'nonce',\n  type: 'uint256'\n}, {\n  name: 'expiry',\n  type: 'uint256'\n}, {\n  name: 'allowed',\n  type: 'bool'\n}];\nexport function useERC20Permit(currencyAmount, spender, transactionDeadline, overridePermitInfo) {\n  _s();\n  var _currencyAmount$curre, _PERMITTABLE_TOKENS$c;\n  const {\n    account,\n    chainId,\n    provider\n  } = useWeb3React();\n  const tokenAddress = (currencyAmount === null || currencyAmount === void 0 ? void 0 : (_currencyAmount$curre = currencyAmount.currency) === null || _currencyAmount$curre === void 0 ? void 0 : _currencyAmount$curre.isToken) ? currencyAmount.currency.address : undefined;\n  const eip2612Contract = useEIP2612Contract(tokenAddress);\n  const isArgentWallet = useIsArgentWallet();\n  const nonceInputs = useMemo(() => [account !== null && account !== void 0 ? account : undefined], [account]);\n  const tokenNonceState = useSingleCallResult(eip2612Contract, 'nonces', nonceInputs);\n  const permitInfo = overridePermitInfo !== null && overridePermitInfo !== void 0 ? overridePermitInfo : chainId && tokenAddress ? (_PERMITTABLE_TOKENS$c = PERMITTABLE_TOKENS[chainId]) === null || _PERMITTABLE_TOKENS$c === void 0 ? void 0 : _PERMITTABLE_TOKENS$c[tokenAddress] : undefined;\n  const [signatureData, setSignatureData] = useState(null);\n  return useMemo(() => {\n    var _tokenNonceState$resu, _tokenNonceState$resu2;\n    if (isArgentWallet || !currencyAmount || !eip2612Contract || !account || !chainId || !transactionDeadline || !provider || !tokenNonceState.valid || !tokenAddress || !spender || !permitInfo) {\n      return {\n        state: UseERC20PermitState.NOT_APPLICABLE,\n        signatureData: null,\n        gatherPermitSignature: null\n      };\n    }\n    const nonceNumber = (_tokenNonceState$resu = tokenNonceState.result) === null || _tokenNonceState$resu === void 0 ? void 0 : (_tokenNonceState$resu2 = _tokenNonceState$resu[0]) === null || _tokenNonceState$resu2 === void 0 ? void 0 : _tokenNonceState$resu2.toNumber();\n    if (tokenNonceState.loading || typeof nonceNumber !== 'number') {\n      return {\n        state: UseERC20PermitState.LOADING,\n        signatureData: null,\n        gatherPermitSignature: null\n      };\n    }\n    const isSignatureDataValid = signatureData && signatureData.owner === account && signatureData.deadline >= transactionDeadline.toNumber() && signatureData.tokenAddress === tokenAddress && signatureData.nonce === nonceNumber && signatureData.spender === spender && ('allowed' in signatureData || JSBI.greaterThanOrEqual(JSBI.BigInt(signatureData.amount), currencyAmount.quotient));\n    return {\n      state: isSignatureDataValid ? UseERC20PermitState.SIGNED : UseERC20PermitState.NOT_SIGNED,\n      signatureData: isSignatureDataValid ? signatureData : null,\n      gatherPermitSignature: async function gatherPermitSignature() {\n        const allowed = permitInfo.type === PermitType.ALLOWED;\n        const signatureDeadline = transactionDeadline.toNumber() + PERMIT_VALIDITY_BUFFER;\n        const value = currencyAmount.quotient.toString();\n        const message = allowed ? {\n          holder: account,\n          spender,\n          allowed,\n          nonce: nonceNumber,\n          expiry: signatureDeadline\n        } : {\n          owner: account,\n          spender,\n          value,\n          nonce: nonceNumber,\n          deadline: signatureDeadline\n        };\n        const domain = permitInfo.version ? {\n          name: permitInfo.name,\n          version: permitInfo.version,\n          verifyingContract: tokenAddress,\n          chainId\n        } : {\n          name: permitInfo.name,\n          verifyingContract: tokenAddress,\n          chainId\n        };\n        const data = JSON.stringify({\n          types: {\n            EIP712Domain: permitInfo.version ? EIP712_DOMAIN_TYPE : EIP712_DOMAIN_TYPE_NO_VERSION,\n            Permit: allowed ? PERMIT_ALLOWED_TYPE : EIP2612_TYPE\n          },\n          domain,\n          primaryType: 'Permit',\n          message\n        });\n        return provider.send('eth_signTypedData_v4', [account, data]).then(splitSignature).then(signature => {\n          setSignatureData({\n            v: signature.v,\n            r: signature.r,\n            s: signature.s,\n            deadline: signatureDeadline,\n            ...(allowed ? {\n              allowed\n            } : {\n              amount: value\n            }),\n            nonce: nonceNumber,\n            chainId,\n            owner: account,\n            spender,\n            tokenAddress,\n            permitType: permitInfo.type\n          });\n        });\n      }\n    };\n  }, [currencyAmount, eip2612Contract, account, chainId, isArgentWallet, transactionDeadline, provider, tokenNonceState.loading, tokenNonceState.valid, tokenNonceState.result, tokenAddress, spender, permitInfo, signatureData]);\n}\n_s(useERC20Permit, \"B6vMHqSFAQgTpnUEwXuLvDCaypw=\", false, function () {\n  return [useWeb3React, useEIP2612Contract, useIsArgentWallet, useSingleCallResult];\n});\nexport function useERC20PermitFromTrade(trade, allowedSlippage, transactionDeadline) {\n  _s2();\n  const {\n    chainId\n  } = useWeb3React();\n  const swapRouterAddress = chainId ? SWAP_ROUTER_ADDRESSES[chainId] : undefined;\n  const amountToApprove = useMemo(() => trade ? trade.maximumAmountIn(allowedSlippage) : undefined, [trade, allowedSlippage]);\n  return useERC20Permit(amountToApprove, swapRouterAddress, transactionDeadline, null);\n}\n_s2(useERC20PermitFromTrade, \"AZJkh9aXCyuBj0wNEnYABKyCVXs=\", false, function () {\n  return [useWeb3React, useERC20Permit];\n});","map":{"version":3,"names":["splitSignature","useWeb3React","JSBI","useSingleCallResult","useMemo","useState","SWAP_ROUTER_ADDRESSES","DAI","UNI","USDC_MAINNET","useEIP2612Contract","useIsArgentWallet","PermitType","PERMIT_VALIDITY_BUFFER","PERMITTABLE_TOKENS","address","type","AMOUNT","name","version","ALLOWED","UseERC20PermitState","EIP712_DOMAIN_TYPE","EIP712_DOMAIN_TYPE_NO_VERSION","EIP2612_TYPE","PERMIT_ALLOWED_TYPE","useERC20Permit","currencyAmount","spender","transactionDeadline","overridePermitInfo","account","chainId","provider","tokenAddress","currency","isToken","undefined","eip2612Contract","isArgentWallet","nonceInputs","tokenNonceState","permitInfo","signatureData","setSignatureData","valid","state","NOT_APPLICABLE","gatherPermitSignature","nonceNumber","result","toNumber","loading","LOADING","isSignatureDataValid","owner","deadline","nonce","greaterThanOrEqual","BigInt","amount","quotient","SIGNED","NOT_SIGNED","allowed","signatureDeadline","value","toString","message","holder","expiry","domain","verifyingContract","data","JSON","stringify","types","EIP712Domain","Permit","primaryType","send","then","signature","v","r","s","permitType","useERC20PermitFromTrade","trade","allowedSlippage","swapRouterAddress","amountToApprove","maximumAmountIn"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/hooks/useERC20Permit.ts"],"sourcesContent":["import { BigNumber } from '@ethersproject/bignumber'\nimport { splitSignature } from '@ethersproject/bytes'\nimport { Trade } from '@uniswap/router-sdk'\nimport { Currency, CurrencyAmount, Percent, TradeType } from '@uniswap/sdk-core'\nimport { useWeb3React } from '@web3-react/core'\nimport JSBI from 'jsbi'\nimport { useSingleCallResult } from 'lib/hooks/multicall'\nimport { useMemo, useState } from 'react'\n\nimport { SWAP_ROUTER_ADDRESSES } from '../constants/addresses'\nimport { DAI, UNI, USDC_MAINNET } from '../constants/tokens'\nimport { useEIP2612Contract } from './useContract'\nimport useIsArgentWallet from './useIsArgentWallet'\n\nexport enum PermitType {\n  AMOUNT = 1,\n  ALLOWED = 2,\n}\n\n// 20 minutes to submit after signing\nconst PERMIT_VALIDITY_BUFFER = 20 * 60\n\nexport interface PermitInfo {\n  type: PermitType\n  name: string\n  // version is optional, and if omitted, will not be included in the domain\n  version?: string\n}\n\n// todo: read this information from extensions on token lists or elsewhere (permit registry?)\nconst PERMITTABLE_TOKENS: {\n  [chainId: number]: {\n    [checksummedTokenAddress: string]: PermitInfo\n  }\n} = {\n  1: {\n    [USDC_MAINNET.address]: { type: PermitType.AMOUNT, name: 'USD Coin', version: '2' },\n    [DAI.address]: { type: PermitType.ALLOWED, name: 'Dai Stablecoin', version: '1' },\n    [UNI[1].address]: { type: PermitType.AMOUNT, name: 'Uniswap' },\n  },\n  4: {\n    '0xc7AD46e0b8a400Bb3C915120d284AafbA8fc4735': { type: PermitType.ALLOWED, name: 'Dai Stablecoin', version: '1' },\n    [UNI[4].address]: { type: PermitType.AMOUNT, name: 'Uniswap' },\n  },\n  3: {\n    [UNI[3].address]: { type: PermitType.AMOUNT, name: 'Uniswap' },\n    '0x07865c6E87B9F70255377e024ace6630C1Eaa37F': { type: PermitType.AMOUNT, name: 'USD Coin', version: '2' },\n  },\n  5: {\n    [UNI[5].address]: { type: PermitType.AMOUNT, name: 'Uniswap' },\n  },\n  42: {\n    [UNI[42].address]: { type: PermitType.AMOUNT, name: 'Uniswap' },\n  },\n}\n\nexport enum UseERC20PermitState {\n  // returned for any reason, e.g. it is an argent wallet, or the currency does not support it\n  NOT_APPLICABLE,\n  LOADING,\n  NOT_SIGNED,\n  SIGNED,\n}\n\ninterface BaseSignatureData {\n  v: number\n  r: string\n  s: string\n  deadline: number\n  nonce: number\n  owner: string\n  spender: string\n  chainId: number\n  tokenAddress: string\n  permitType: PermitType\n}\n\ninterface StandardSignatureData extends BaseSignatureData {\n  amount: string\n}\n\ninterface AllowedSignatureData extends BaseSignatureData {\n  allowed: true\n}\n\nexport type SignatureData = StandardSignatureData | AllowedSignatureData\n\nconst EIP712_DOMAIN_TYPE = [\n  { name: 'name', type: 'string' },\n  { name: 'version', type: 'string' },\n  { name: 'chainId', type: 'uint256' },\n  { name: 'verifyingContract', type: 'address' },\n]\n\nconst EIP712_DOMAIN_TYPE_NO_VERSION = [\n  { name: 'name', type: 'string' },\n  { name: 'chainId', type: 'uint256' },\n  { name: 'verifyingContract', type: 'address' },\n]\n\nconst EIP2612_TYPE = [\n  { name: 'owner', type: 'address' },\n  { name: 'spender', type: 'address' },\n  { name: 'value', type: 'uint256' },\n  { name: 'nonce', type: 'uint256' },\n  { name: 'deadline', type: 'uint256' },\n]\n\nconst PERMIT_ALLOWED_TYPE = [\n  { name: 'holder', type: 'address' },\n  { name: 'spender', type: 'address' },\n  { name: 'nonce', type: 'uint256' },\n  { name: 'expiry', type: 'uint256' },\n  { name: 'allowed', type: 'bool' },\n]\n\nexport function useERC20Permit(\n  currencyAmount: CurrencyAmount<Currency> | null | undefined,\n  spender: string | null | undefined,\n  transactionDeadline: BigNumber | undefined,\n  overridePermitInfo: PermitInfo | undefined | null\n): {\n  signatureData: SignatureData | null\n  state: UseERC20PermitState\n  gatherPermitSignature: null | (() => Promise<void>)\n} {\n  const { account, chainId, provider } = useWeb3React()\n  const tokenAddress = currencyAmount?.currency?.isToken ? currencyAmount.currency.address : undefined\n  const eip2612Contract = useEIP2612Contract(tokenAddress)\n  const isArgentWallet = useIsArgentWallet()\n  const nonceInputs = useMemo(() => [account ?? undefined], [account])\n  const tokenNonceState = useSingleCallResult(eip2612Contract, 'nonces', nonceInputs)\n  const permitInfo =\n    overridePermitInfo ?? (chainId && tokenAddress ? PERMITTABLE_TOKENS[chainId]?.[tokenAddress] : undefined)\n\n  const [signatureData, setSignatureData] = useState<SignatureData | null>(null)\n\n  return useMemo(() => {\n    if (\n      isArgentWallet ||\n      !currencyAmount ||\n      !eip2612Contract ||\n      !account ||\n      !chainId ||\n      !transactionDeadline ||\n      !provider ||\n      !tokenNonceState.valid ||\n      !tokenAddress ||\n      !spender ||\n      !permitInfo\n    ) {\n      return {\n        state: UseERC20PermitState.NOT_APPLICABLE,\n        signatureData: null,\n        gatherPermitSignature: null,\n      }\n    }\n\n    const nonceNumber = tokenNonceState.result?.[0]?.toNumber()\n    if (tokenNonceState.loading || typeof nonceNumber !== 'number') {\n      return {\n        state: UseERC20PermitState.LOADING,\n        signatureData: null,\n        gatherPermitSignature: null,\n      }\n    }\n\n    const isSignatureDataValid =\n      signatureData &&\n      signatureData.owner === account &&\n      signatureData.deadline >= transactionDeadline.toNumber() &&\n      signatureData.tokenAddress === tokenAddress &&\n      signatureData.nonce === nonceNumber &&\n      signatureData.spender === spender &&\n      ('allowed' in signatureData ||\n        JSBI.greaterThanOrEqual(JSBI.BigInt(signatureData.amount), currencyAmount.quotient))\n\n    return {\n      state: isSignatureDataValid ? UseERC20PermitState.SIGNED : UseERC20PermitState.NOT_SIGNED,\n      signatureData: isSignatureDataValid ? signatureData : null,\n      gatherPermitSignature: async function gatherPermitSignature() {\n        const allowed = permitInfo.type === PermitType.ALLOWED\n        const signatureDeadline = transactionDeadline.toNumber() + PERMIT_VALIDITY_BUFFER\n        const value = currencyAmount.quotient.toString()\n\n        const message = allowed\n          ? {\n              holder: account,\n              spender,\n              allowed,\n              nonce: nonceNumber,\n              expiry: signatureDeadline,\n            }\n          : {\n              owner: account,\n              spender,\n              value,\n              nonce: nonceNumber,\n              deadline: signatureDeadline,\n            }\n        const domain = permitInfo.version\n          ? {\n              name: permitInfo.name,\n              version: permitInfo.version,\n              verifyingContract: tokenAddress,\n              chainId,\n            }\n          : {\n              name: permitInfo.name,\n              verifyingContract: tokenAddress,\n              chainId,\n            }\n        const data = JSON.stringify({\n          types: {\n            EIP712Domain: permitInfo.version ? EIP712_DOMAIN_TYPE : EIP712_DOMAIN_TYPE_NO_VERSION,\n            Permit: allowed ? PERMIT_ALLOWED_TYPE : EIP2612_TYPE,\n          },\n          domain,\n          primaryType: 'Permit',\n          message,\n        })\n\n        return provider\n          .send('eth_signTypedData_v4', [account, data])\n          .then(splitSignature)\n          .then((signature) => {\n            setSignatureData({\n              v: signature.v,\n              r: signature.r,\n              s: signature.s,\n              deadline: signatureDeadline,\n              ...(allowed ? { allowed } : { amount: value }),\n              nonce: nonceNumber,\n              chainId,\n              owner: account,\n              spender,\n              tokenAddress,\n              permitType: permitInfo.type,\n            })\n          })\n      },\n    }\n  }, [\n    currencyAmount,\n    eip2612Contract,\n    account,\n    chainId,\n    isArgentWallet,\n    transactionDeadline,\n    provider,\n    tokenNonceState.loading,\n    tokenNonceState.valid,\n    tokenNonceState.result,\n    tokenAddress,\n    spender,\n    permitInfo,\n    signatureData,\n  ])\n}\n\nexport function useERC20PermitFromTrade(\n  trade: Trade<Currency, Currency, TradeType> | undefined,\n  allowedSlippage: Percent,\n  transactionDeadline: BigNumber | undefined\n) {\n  const { chainId } = useWeb3React()\n  const swapRouterAddress = chainId ? SWAP_ROUTER_ADDRESSES[chainId] : undefined\n  const amountToApprove = useMemo(\n    () => (trade ? trade.maximumAmountIn(allowedSlippage) : undefined),\n    [trade, allowedSlippage]\n  )\n\n  return useERC20Permit(amountToApprove, swapRouterAddress, transactionDeadline, null)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}