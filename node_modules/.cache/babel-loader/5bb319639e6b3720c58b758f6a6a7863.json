{"ast":null,"code":"import _objectSpread from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _regeneratorRuntime from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _createForOfIteratorHelper from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _toConsumableArray from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheMatchIgnoreParams } from 'workbox-core/_private/cacheMatchIgnoreParams.js';\nimport { Deferred } from 'workbox-core/_private/Deferred.js';\nimport { executeQuotaErrorCallbacks } from 'workbox-core/_private/executeQuotaErrorCallbacks.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { timeout } from 'workbox-core/_private/timeout.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport './_version.js';\nfunction toRequest(input) {\n  return typeof input === 'string' ? new Request(input) : input;\n}\n/**\n * A class created every time a Strategy instance instance calls\n * [handle()]{@link module:workbox-strategies.Strategy~handle} or\n * [handleAll()]{@link module:workbox-strategies.Strategy~handleAll} that wraps all fetch and\n * cache actions around plugin callbacks and keeps track of when the strategy\n * is \"done\" (i.e. all added `event.waitUntil()` promises have resolved).\n *\n * @memberof module:workbox-strategies\n */\nvar StrategyHandler = /*#__PURE__*/function () {\n  /**\n   * Creates a new instance associated with the passed strategy and event\n   * that's handling the request.\n   *\n   * The constructor also initializes the state that will be passed to each of\n   * the plugins handling this request.\n   *\n   * @param {module:workbox-strategies.Strategy} strategy\n   * @param {Object} options\n   * @param {Request|string} options.request A request to run this strategy for.\n   * @param {ExtendableEvent} options.event The event associated with the\n   *     request.\n   * @param {URL} [options.url]\n   * @param {*} [options.params]\n   *     [match callback]{@link module:workbox-routing~matchCallback},\n   *     (if applicable).\n   */\n  function StrategyHandler(strategy, options) {\n    _classCallCheck(this, StrategyHandler);\n    this._cacheKeys = {};\n    /**\n     * The request the strategy is performing (passed to the strategy's\n     * `handle()` or `handleAll()` method).\n     * @name request\n     * @instance\n     * @type {Request}\n     * @memberof module:workbox-strategies.StrategyHandler\n     */\n    /**\n     * The event associated with this request.\n     * @name event\n     * @instance\n     * @type {ExtendableEvent}\n     * @memberof module:workbox-strategies.StrategyHandler\n     */\n    /**\n     * A `URL` instance of `request.url` (if passed to the strategy's\n     * `handle()` or `handleAll()` method).\n     * Note: the `url` param will be present if the strategy was invoked\n     * from a workbox `Route` object.\n     * @name url\n     * @instance\n     * @type {URL|undefined}\n     * @memberof module:workbox-strategies.StrategyHandler\n     */\n    /**\n     * A `param` value (if passed to the strategy's\n     * `handle()` or `handleAll()` method).\n     * Note: the `param` param will be present if the strategy was invoked\n     * from a workbox `Route` object and the\n     * [match callback]{@link module:workbox-routing~matchCallback} returned\n     * a truthy value (it will be that value).\n     * @name params\n     * @instance\n     * @type {*|undefined}\n     * @memberof module:workbox-strategies.StrategyHandler\n     */\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isInstance(options.event, ExtendableEvent, {\n        moduleName: 'workbox-strategies',\n        className: 'StrategyHandler',\n        funcName: 'constructor',\n        paramName: 'options.event'\n      });\n    }\n    Object.assign(this, options);\n    this.event = options.event;\n    this._strategy = strategy;\n    this._handlerDeferred = new Deferred();\n    this._extendLifetimePromises = [];\n    // Copy the plugins list (since it's mutable on the strategy),\n    // so any mutations don't affect this handler instance.\n    this._plugins = _toConsumableArray(strategy.plugins);\n    this._pluginStateMap = new Map();\n    var _iterator = _createForOfIteratorHelper(this._plugins),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var plugin = _step.value;\n        this._pluginStateMap.set(plugin, {});\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    this.event.waitUntil(this._handlerDeferred.promise);\n  }\n  /**\n   * Fetches a given request (and invokes any applicable plugin callback\n   * methods) using the `fetchOptions` (for non-navigation requests) and\n   * `plugins` defined on the `Strategy` object.\n   *\n   * The following plugin lifecycle methods are invoked when using this method:\n   * - `requestWillFetch()`\n   * - `fetchDidSucceed()`\n   * - `fetchDidFail()`\n   *\n   * @param {Request|string} input The URL or request to fetch.\n   * @return {Promise<Response>}\n   */\n  _createClass(StrategyHandler, [{\n    key: \"fetch\",\n    value: function (_fetch) {\n      function fetch(_x) {\n        return _fetch.apply(this, arguments);\n      }\n      fetch.toString = function () {\n        return _fetch.toString();\n      };\n      return fetch;\n    }(\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(input) {\n        var event, request, possiblePreloadResponse, originalRequest, _iterator2, _step2, cb, pluginFilteredRequest, fetchResponse, _iterator3, _step3, callback;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                event = this.event;\n                request = toRequest(input);\n                if (!(request.mode === 'navigate' && event instanceof FetchEvent && event.preloadResponse)) {\n                  _context.next = 9;\n                  break;\n                }\n                _context.next = 5;\n                return event.preloadResponse;\n              case 5:\n                possiblePreloadResponse = _context.sent;\n                if (!possiblePreloadResponse) {\n                  _context.next = 9;\n                  break;\n                }\n                if (process.env.NODE_ENV !== 'production') {\n                  logger.log(\"Using a preloaded navigation response for \" + \"'\".concat(getFriendlyURL(request.url), \"'\"));\n                }\n                return _context.abrupt(\"return\", possiblePreloadResponse);\n              case 9:\n                // If there is a fetchDidFail plugin, we need to save a clone of the\n                // original request before it's either modified by a requestWillFetch\n                // plugin or before the original request's body is consumed via fetch().\n                originalRequest = this.hasCallback('fetchDidFail') ? request.clone() : null;\n                _context.prev = 10;\n                _iterator2 = _createForOfIteratorHelper(this.iterateCallbacks('requestWillFetch'));\n                _context.prev = 12;\n                _iterator2.s();\n              case 14:\n                if ((_step2 = _iterator2.n()).done) {\n                  _context.next = 21;\n                  break;\n                }\n                cb = _step2.value;\n                _context.next = 18;\n                return cb({\n                  request: request.clone(),\n                  event: event\n                });\n              case 18:\n                request = _context.sent;\n              case 19:\n                _context.next = 14;\n                break;\n              case 21:\n                _context.next = 26;\n                break;\n              case 23:\n                _context.prev = 23;\n                _context.t0 = _context[\"catch\"](12);\n                _iterator2.e(_context.t0);\n              case 26:\n                _context.prev = 26;\n                _iterator2.f();\n                return _context.finish(26);\n              case 29:\n                _context.next = 34;\n                break;\n              case 31:\n                _context.prev = 31;\n                _context.t1 = _context[\"catch\"](10);\n                throw new WorkboxError('plugin-error-request-will-fetch', {\n                  thrownError: _context.t1\n                });\n              case 34:\n                // The request can be altered by plugins with `requestWillFetch` making\n                // the original request (most likely from a `fetch` event) different\n                // from the Request we make. Pass both to `fetchDidFail` to aid debugging.\n                pluginFilteredRequest = request.clone();\n                _context.prev = 35;\n                _context.next = 38;\n                return fetch(request, request.mode === 'navigate' ? undefined : this._strategy.fetchOptions);\n              case 38:\n                fetchResponse = _context.sent;\n                if (process.env.NODE_ENV !== 'production') {\n                  logger.debug(\"Network request for \" + \"'\".concat(getFriendlyURL(request.url), \"' returned a response with \") + \"status '\".concat(fetchResponse.status, \"'.\"));\n                }\n                _iterator3 = _createForOfIteratorHelper(this.iterateCallbacks('fetchDidSucceed'));\n                _context.prev = 41;\n                _iterator3.s();\n              case 43:\n                if ((_step3 = _iterator3.n()).done) {\n                  _context.next = 50;\n                  break;\n                }\n                callback = _step3.value;\n                _context.next = 47;\n                return callback({\n                  event: event,\n                  request: pluginFilteredRequest,\n                  response: fetchResponse\n                });\n              case 47:\n                fetchResponse = _context.sent;\n              case 48:\n                _context.next = 43;\n                break;\n              case 50:\n                _context.next = 55;\n                break;\n              case 52:\n                _context.prev = 52;\n                _context.t2 = _context[\"catch\"](41);\n                _iterator3.e(_context.t2);\n              case 55:\n                _context.prev = 55;\n                _iterator3.f();\n                return _context.finish(55);\n              case 58:\n                return _context.abrupt(\"return\", fetchResponse);\n              case 61:\n                _context.prev = 61;\n                _context.t3 = _context[\"catch\"](35);\n                if (process.env.NODE_ENV !== 'production') {\n                  logger.log(\"Network request for \" + \"'\".concat(getFriendlyURL(request.url), \"' threw an error.\"), _context.t3);\n                }\n                // `originalRequest` will only exist if a `fetchDidFail` callback\n                // is being used (see above).\n                if (!originalRequest) {\n                  _context.next = 67;\n                  break;\n                }\n                _context.next = 67;\n                return this.runCallbacks('fetchDidFail', {\n                  error: _context.t3,\n                  event: event,\n                  originalRequest: originalRequest.clone(),\n                  request: pluginFilteredRequest.clone()\n                });\n              case 67:\n                throw _context.t3;\n              case 68:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[10, 31], [12, 23, 26, 29], [35, 61], [41, 52, 55, 58]]);\n      }));\n      return function (_x2) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n    /**\n     * Calls `this.fetch()` and (in the background) runs `this.cachePut()` on\n     * the response generated by `this.fetch()`.\n     *\n     * The call to `this.cachePut()` automatically invokes `this.waitUntil()`,\n     * so you do not have to manually call `waitUntil()` on the event.\n     *\n     * @param {Request|string} input The request or URL to fetch and cache.\n     * @return {Promise<Response>}\n     */\n    )\n  }, {\n    key: \"fetchAndCachePut\",\n    value: function () {\n      var _fetchAndCachePut = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(input) {\n        var response, responseClone;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.fetch(input);\n              case 2:\n                response = _context2.sent;\n                responseClone = response.clone();\n                this.waitUntil(this.cachePut(input, responseClone));\n                return _context2.abrupt(\"return\", response);\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function fetchAndCachePut(_x3) {\n        return _fetchAndCachePut.apply(this, arguments);\n      }\n      return fetchAndCachePut;\n    }()\n    /**\n     * Matches a request from the cache (and invokes any applicable plugin\n     * callback methods) using the `cacheName`, `matchOptions`, and `plugins`\n     * defined on the strategy object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - cacheKeyWillByUsed()\n     * - cachedResponseWillByUsed()\n     *\n     * @param {Request|string} key The Request or URL to use as the cache key.\n     * @return {Promise<Response|undefined>} A matching response, if found.\n     */\n  }, {\n    key: \"cacheMatch\",\n    value: function () {\n      var _cacheMatch = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(key) {\n        var request, cachedResponse, _this$_strategy, cacheName, matchOptions, effectiveRequest, multiMatchOptions, _iterator4, _step4, callback;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                request = toRequest(key);\n                _this$_strategy = this._strategy, cacheName = _this$_strategy.cacheName, matchOptions = _this$_strategy.matchOptions;\n                _context3.next = 4;\n                return this.getCacheKey(request, 'read');\n              case 4:\n                effectiveRequest = _context3.sent;\n                multiMatchOptions = _objectSpread(_objectSpread({}, matchOptions), {\n                  cacheName: cacheName\n                });\n                _context3.next = 8;\n                return caches.match(effectiveRequest, multiMatchOptions);\n              case 8:\n                cachedResponse = _context3.sent;\n                if (process.env.NODE_ENV !== 'production') {\n                  if (cachedResponse) {\n                    logger.debug(\"Found a cached response in '\".concat(cacheName, \"'.\"));\n                  } else {\n                    logger.debug(\"No cached response found in '\".concat(cacheName, \"'.\"));\n                  }\n                }\n                _iterator4 = _createForOfIteratorHelper(this.iterateCallbacks('cachedResponseWillBeUsed'));\n                _context3.prev = 11;\n                _iterator4.s();\n              case 13:\n                if ((_step4 = _iterator4.n()).done) {\n                  _context3.next = 23;\n                  break;\n                }\n                callback = _step4.value;\n                _context3.next = 17;\n                return callback({\n                  cacheName: cacheName,\n                  matchOptions: matchOptions,\n                  cachedResponse: cachedResponse,\n                  request: effectiveRequest,\n                  event: this.event\n                });\n              case 17:\n                _context3.t0 = _context3.sent;\n                if (_context3.t0) {\n                  _context3.next = 20;\n                  break;\n                }\n                _context3.t0 = undefined;\n              case 20:\n                cachedResponse = _context3.t0;\n              case 21:\n                _context3.next = 13;\n                break;\n              case 23:\n                _context3.next = 28;\n                break;\n              case 25:\n                _context3.prev = 25;\n                _context3.t1 = _context3[\"catch\"](11);\n                _iterator4.e(_context3.t1);\n              case 28:\n                _context3.prev = 28;\n                _iterator4.f();\n                return _context3.finish(28);\n              case 31:\n                return _context3.abrupt(\"return\", cachedResponse);\n              case 32:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[11, 25, 28, 31]]);\n      }));\n      function cacheMatch(_x4) {\n        return _cacheMatch.apply(this, arguments);\n      }\n      return cacheMatch;\n    }()\n    /**\n     * Puts a request/response pair in the cache (and invokes any applicable\n     * plugin callback methods) using the `cacheName` and `plugins` defined on\n     * the strategy object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - cacheKeyWillByUsed()\n     * - cacheWillUpdate()\n     * - cacheDidUpdate()\n     *\n     * @param {Request|string} key The request or URL to use as the cache key.\n     * @param {Response} response The response to cache.\n     * @return {Promise<boolean>} `false` if a cacheWillUpdate caused the response\n     * not be cached, and `true` otherwise.\n     */\n  }, {\n    key: \"cachePut\",\n    value: function () {\n      var _cachePut = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(key, response) {\n        var request, effectiveRequest, responseToCache, _this$_strategy2, cacheName, matchOptions, cache, hasCacheUpdateCallback, oldResponse, _iterator5, _step5, callback;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                request = toRequest(key); // Run in the next task to avoid blocking other cache reads.\n                // https://github.com/w3c/ServiceWorker/issues/1397\n                _context4.next = 3;\n                return timeout(0);\n              case 3:\n                _context4.next = 5;\n                return this.getCacheKey(request, 'write');\n              case 5:\n                effectiveRequest = _context4.sent;\n                if (!(process.env.NODE_ENV !== 'production')) {\n                  _context4.next = 9;\n                  break;\n                }\n                if (!(effectiveRequest.method && effectiveRequest.method !== 'GET')) {\n                  _context4.next = 9;\n                  break;\n                }\n                throw new WorkboxError('attempt-to-cache-non-get-request', {\n                  url: getFriendlyURL(effectiveRequest.url),\n                  method: effectiveRequest.method\n                });\n              case 9:\n                if (response) {\n                  _context4.next = 12;\n                  break;\n                }\n                if (process.env.NODE_ENV !== 'production') {\n                  logger.error(\"Cannot cache non-existent response for \" + \"'\".concat(getFriendlyURL(effectiveRequest.url), \"'.\"));\n                }\n                throw new WorkboxError('cache-put-with-no-response', {\n                  url: getFriendlyURL(effectiveRequest.url)\n                });\n              case 12:\n                _context4.next = 14;\n                return this._ensureResponseSafeToCache(response);\n              case 14:\n                responseToCache = _context4.sent;\n                if (responseToCache) {\n                  _context4.next = 18;\n                  break;\n                }\n                if (process.env.NODE_ENV !== 'production') {\n                  logger.debug(\"Response '\".concat(getFriendlyURL(effectiveRequest.url), \"' \") + \"will not be cached.\", responseToCache);\n                }\n                return _context4.abrupt(\"return\", false);\n              case 18:\n                _this$_strategy2 = this._strategy, cacheName = _this$_strategy2.cacheName, matchOptions = _this$_strategy2.matchOptions;\n                _context4.next = 21;\n                return self.caches.open(cacheName);\n              case 21:\n                cache = _context4.sent;\n                hasCacheUpdateCallback = this.hasCallback('cacheDidUpdate');\n                if (!hasCacheUpdateCallback) {\n                  _context4.next = 29;\n                  break;\n                }\n                _context4.next = 26;\n                return cacheMatchIgnoreParams(\n                // TODO(philipwalton): the `__WB_REVISION__` param is a precaching\n                // feature. Consider into ways to only add this behavior if using\n                // precaching.\n                cache, effectiveRequest.clone(), ['__WB_REVISION__'], matchOptions);\n              case 26:\n                _context4.t0 = _context4.sent;\n                _context4.next = 30;\n                break;\n              case 29:\n                _context4.t0 = null;\n              case 30:\n                oldResponse = _context4.t0;\n                if (process.env.NODE_ENV !== 'production') {\n                  logger.debug(\"Updating the '\".concat(cacheName, \"' cache with a new Response \") + \"for \".concat(getFriendlyURL(effectiveRequest.url), \".\"));\n                }\n                _context4.prev = 32;\n                _context4.next = 35;\n                return cache.put(effectiveRequest, hasCacheUpdateCallback ? responseToCache.clone() : responseToCache);\n              case 35:\n                _context4.next = 43;\n                break;\n              case 37:\n                _context4.prev = 37;\n                _context4.t1 = _context4[\"catch\"](32);\n                if (!(_context4.t1.name === 'QuotaExceededError')) {\n                  _context4.next = 42;\n                  break;\n                }\n                _context4.next = 42;\n                return executeQuotaErrorCallbacks();\n              case 42:\n                throw _context4.t1;\n              case 43:\n                _iterator5 = _createForOfIteratorHelper(this.iterateCallbacks('cacheDidUpdate'));\n                _context4.prev = 44;\n                _iterator5.s();\n              case 46:\n                if ((_step5 = _iterator5.n()).done) {\n                  _context4.next = 52;\n                  break;\n                }\n                callback = _step5.value;\n                _context4.next = 50;\n                return callback({\n                  cacheName: cacheName,\n                  oldResponse: oldResponse,\n                  newResponse: responseToCache.clone(),\n                  request: effectiveRequest,\n                  event: this.event\n                });\n              case 50:\n                _context4.next = 46;\n                break;\n              case 52:\n                _context4.next = 57;\n                break;\n              case 54:\n                _context4.prev = 54;\n                _context4.t2 = _context4[\"catch\"](44);\n                _iterator5.e(_context4.t2);\n              case 57:\n                _context4.prev = 57;\n                _iterator5.f();\n                return _context4.finish(57);\n              case 60:\n                return _context4.abrupt(\"return\", true);\n              case 61:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[32, 37], [44, 54, 57, 60]]);\n      }));\n      function cachePut(_x5, _x6) {\n        return _cachePut.apply(this, arguments);\n      }\n      return cachePut;\n    }()\n    /**\n     * Checks the list of plugins for the `cacheKeyWillBeUsed` callback, and\n     * executes any of those callbacks found in sequence. The final `Request`\n     * object returned by the last plugin is treated as the cache key for cache\n     * reads and/or writes. If no `cacheKeyWillBeUsed` plugin callbacks have\n     * been registered, the passed request is returned unmodified\n     *\n     * @param {Request} request\n     * @param {string} mode\n     * @return {Promise<Request>}\n     */\n  }, {\n    key: \"getCacheKey\",\n    value: function () {\n      var _getCacheKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(request, mode) {\n        var effectiveRequest, _iterator6, _step6, callback;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (this._cacheKeys[mode]) {\n                  _context5.next = 23;\n                  break;\n                }\n                effectiveRequest = request;\n                _iterator6 = _createForOfIteratorHelper(this.iterateCallbacks('cacheKeyWillBeUsed'));\n                _context5.prev = 3;\n                _iterator6.s();\n              case 5:\n                if ((_step6 = _iterator6.n()).done) {\n                  _context5.next = 14;\n                  break;\n                }\n                callback = _step6.value;\n                _context5.t0 = toRequest;\n                _context5.next = 10;\n                return callback({\n                  mode: mode,\n                  request: effectiveRequest,\n                  event: this.event,\n                  params: this.params\n                });\n              case 10:\n                _context5.t1 = _context5.sent;\n                effectiveRequest = (0, _context5.t0)(_context5.t1);\n              case 12:\n                _context5.next = 5;\n                break;\n              case 14:\n                _context5.next = 19;\n                break;\n              case 16:\n                _context5.prev = 16;\n                _context5.t2 = _context5[\"catch\"](3);\n                _iterator6.e(_context5.t2);\n              case 19:\n                _context5.prev = 19;\n                _iterator6.f();\n                return _context5.finish(19);\n              case 22:\n                this._cacheKeys[mode] = effectiveRequest;\n              case 23:\n                return _context5.abrupt(\"return\", this._cacheKeys[mode]);\n              case 24:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this, [[3, 16, 19, 22]]);\n      }));\n      function getCacheKey(_x7, _x8) {\n        return _getCacheKey.apply(this, arguments);\n      }\n      return getCacheKey;\n    }()\n    /**\n     * Returns true if the strategy has at least one plugin with the given\n     * callback.\n     *\n     * @param {string} name The name of the callback to check for.\n     * @return {boolean}\n     */\n  }, {\n    key: \"hasCallback\",\n    value: function hasCallback(name) {\n      var _iterator7 = _createForOfIteratorHelper(this._strategy.plugins),\n        _step7;\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var plugin = _step7.value;\n          if (name in plugin) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n      return false;\n    }\n    /**\n     * Runs all plugin callbacks matching the given name, in order, passing the\n     * given param object (merged ith the current plugin state) as the only\n     * argument.\n     *\n     * Note: since this method runs all plugins, it's not suitable for cases\n     * where the return value of a callback needs to be applied prior to calling\n     * the next callback. See\n     * [`iterateCallbacks()`]{@link module:workbox-strategies.StrategyHandler#iterateCallbacks}\n     * below for how to handle that case.\n     *\n     * @param {string} name The name of the callback to run within each plugin.\n     * @param {Object} param The object to pass as the first (and only) param\n     *     when executing each callback. This object will be merged with the\n     *     current plugin state prior to callback execution.\n     */\n  }, {\n    key: \"runCallbacks\",\n    value: function () {\n      var _runCallbacks = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(name, param) {\n        var _iterator8, _step8, callback;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _iterator8 = _createForOfIteratorHelper(this.iterateCallbacks(name));\n                _context6.prev = 1;\n                _iterator8.s();\n              case 3:\n                if ((_step8 = _iterator8.n()).done) {\n                  _context6.next = 9;\n                  break;\n                }\n                callback = _step8.value;\n                _context6.next = 7;\n                return callback(param);\n              case 7:\n                _context6.next = 3;\n                break;\n              case 9:\n                _context6.next = 14;\n                break;\n              case 11:\n                _context6.prev = 11;\n                _context6.t0 = _context6[\"catch\"](1);\n                _iterator8.e(_context6.t0);\n              case 14:\n                _context6.prev = 14;\n                _iterator8.f();\n                return _context6.finish(14);\n              case 17:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this, [[1, 11, 14, 17]]);\n      }));\n      function runCallbacks(_x9, _x10) {\n        return _runCallbacks.apply(this, arguments);\n      }\n      return runCallbacks;\n    }()\n    /**\n     * Accepts a callback and returns an iterable of matching plugin callbacks,\n     * where each callback is wrapped with the current handler state (i.e. when\n     * you call each callback, whatever object parameter you pass it will\n     * be merged with the plugin's current state).\n     *\n     * @param {string} name The name fo the callback to run\n     * @return {Array<Function>}\n     */\n  }, {\n    key: \"iterateCallbacks\",\n    value:\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function iterateCallbacks(name) {\n      var _this = this;\n      var _iterator9, _step9, _loop;\n      return _regeneratorRuntime.wrap(function iterateCallbacks$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _iterator9 = _createForOfIteratorHelper(this._strategy.plugins);\n              _context8.prev = 1;\n              _loop = /*#__PURE__*/_regeneratorRuntime.mark(function _loop() {\n                var plugin, state, statefulCallback;\n                return _regeneratorRuntime.wrap(function _loop$(_context7) {\n                  while (1) {\n                    switch (_context7.prev = _context7.next) {\n                      case 0:\n                        plugin = _step9.value;\n                        if (!(typeof plugin[name] === 'function')) {\n                          _context7.next = 6;\n                          break;\n                        }\n                        state = _this._pluginStateMap.get(plugin);\n                        statefulCallback = function statefulCallback(param) {\n                          var statefulParam = _objectSpread(_objectSpread({}, param), {}, {\n                            state: state\n                          });\n                          // TODO(philipwalton): not sure why `any` is needed. It seems like\n                          // this should work with `as WorkboxPluginCallbackParam[C]`.\n                          return plugin[name](statefulParam);\n                        };\n                        _context7.next = 6;\n                        return statefulCallback;\n                      case 6:\n                      case \"end\":\n                        return _context7.stop();\n                    }\n                  }\n                }, _loop);\n              });\n              _iterator9.s();\n            case 4:\n              if ((_step9 = _iterator9.n()).done) {\n                _context8.next = 8;\n                break;\n              }\n              return _context8.delegateYield(_loop(), \"t0\", 6);\n            case 6:\n              _context8.next = 4;\n              break;\n            case 8:\n              _context8.next = 13;\n              break;\n            case 10:\n              _context8.prev = 10;\n              _context8.t1 = _context8[\"catch\"](1);\n              _iterator9.e(_context8.t1);\n            case 13:\n              _context8.prev = 13;\n              _iterator9.f();\n              return _context8.finish(13);\n            case 16:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, iterateCallbacks, this, [[1, 10, 13, 16]]);\n    })\n    /**\n     * Adds a promise to the\n     * [extend lifetime promises]{@link https://w3c.github.io/ServiceWorker/#extendableevent-extend-lifetime-promises}\n     * of the event event associated with the request being handled (usually a\n     * `FetchEvent`).\n     *\n     * Note: you can await\n     * [`doneWaiting()`]{@link module:workbox-strategies.StrategyHandler~doneWaiting}\n     * to know when all added promises have settled.\n     *\n     * @param {Promise} promise A promise to add to the extend lifetime promises\n     *     of the event that triggered the request.\n     */\n  }, {\n    key: \"waitUntil\",\n    value: function waitUntil(promise) {\n      this._extendLifetimePromises.push(promise);\n      return promise;\n    }\n    /**\n     * Returns a promise that resolves once all promises passed to\n     * [`waitUntil()`]{@link module:workbox-strategies.StrategyHandler~waitUntil}\n     * have settled.\n     *\n     * Note: any work done after `doneWaiting()` settles should be manually\n     * passed to an event's `waitUntil()` method (not this handler's\n     * `waitUntil()` method), otherwise the service worker thread my be killed\n     * prior to your work completing.\n     */\n  }, {\n    key: \"doneWaiting\",\n    value: function () {\n      var _doneWaiting = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n        var promise;\n        return _regeneratorRuntime.wrap(function _callee7$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                if (!(promise = this._extendLifetimePromises.shift())) {\n                  _context9.next = 5;\n                  break;\n                }\n                _context9.next = 3;\n                return promise;\n              case 3:\n                _context9.next = 0;\n                break;\n              case 5:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n      function doneWaiting() {\n        return _doneWaiting.apply(this, arguments);\n      }\n      return doneWaiting;\n    }()\n    /**\n     * Stops running the strategy and immediately resolves any pending\n     * `waitUntil()` promises.\n     */\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this._handlerDeferred.resolve();\n    }\n    /**\n     * This method will call cacheWillUpdate on the available plugins (or use\n     * status === 200) to determine if the Response is safe and valid to cache.\n     *\n     * @param {Request} options.request\n     * @param {Response} options.response\n     * @return {Promise<Response|undefined>}\n     *\n     * @private\n     */\n  }, {\n    key: \"_ensureResponseSafeToCache\",\n    value: function () {\n      var _ensureResponseSafeToCache2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(response) {\n        var responseToCache, pluginsUsed, _iterator10, _step10, callback;\n        return _regeneratorRuntime.wrap(function _callee8$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                responseToCache = response;\n                pluginsUsed = false;\n                _iterator10 = _createForOfIteratorHelper(this.iterateCallbacks('cacheWillUpdate'));\n                _context10.prev = 3;\n                _iterator10.s();\n              case 5:\n                if ((_step10 = _iterator10.n()).done) {\n                  _context10.next = 18;\n                  break;\n                }\n                callback = _step10.value;\n                _context10.next = 9;\n                return callback({\n                  request: this.request,\n                  response: responseToCache,\n                  event: this.event\n                });\n              case 9:\n                _context10.t0 = _context10.sent;\n                if (_context10.t0) {\n                  _context10.next = 12;\n                  break;\n                }\n                _context10.t0 = undefined;\n              case 12:\n                responseToCache = _context10.t0;\n                pluginsUsed = true;\n                if (responseToCache) {\n                  _context10.next = 16;\n                  break;\n                }\n                return _context10.abrupt(\"break\", 18);\n              case 16:\n                _context10.next = 5;\n                break;\n              case 18:\n                _context10.next = 23;\n                break;\n              case 20:\n                _context10.prev = 20;\n                _context10.t1 = _context10[\"catch\"](3);\n                _iterator10.e(_context10.t1);\n              case 23:\n                _context10.prev = 23;\n                _iterator10.f();\n                return _context10.finish(23);\n              case 26:\n                if (!pluginsUsed) {\n                  if (responseToCache && responseToCache.status !== 200) {\n                    responseToCache = undefined;\n                  }\n                  if (process.env.NODE_ENV !== 'production') {\n                    if (responseToCache) {\n                      if (responseToCache.status !== 200) {\n                        if (responseToCache.status === 0) {\n                          logger.warn(\"The response for '\".concat(this.request.url, \"' \") + \"is an opaque response. The caching strategy that you're \" + \"using will not cache opaque responses by default.\");\n                        } else {\n                          logger.debug(\"The response for '\".concat(this.request.url, \"' \") + \"returned a status code of '\".concat(response.status, \"' and won't \") + \"be cached as a result.\");\n                        }\n                      }\n                    }\n                  }\n                }\n                return _context10.abrupt(\"return\", responseToCache);\n              case 28:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee8, this, [[3, 20, 23, 26]]);\n      }));\n      function _ensureResponseSafeToCache(_x11) {\n        return _ensureResponseSafeToCache2.apply(this, arguments);\n      }\n      return _ensureResponseSafeToCache;\n    }()\n  }]);\n  return StrategyHandler;\n}();\nexport { StrategyHandler };","map":{"version":3,"names":["assert","cacheMatchIgnoreParams","Deferred","executeQuotaErrorCallbacks","getFriendlyURL","logger","timeout","WorkboxError","toRequest","input","Request","StrategyHandler","strategy","options","_cacheKeys","process","env","NODE_ENV","isInstance","event","ExtendableEvent","moduleName","className","funcName","paramName","Object","assign","_strategy","_handlerDeferred","_extendLifetimePromises","_plugins","plugins","_pluginStateMap","Map","plugin","set","waitUntil","promise","request","mode","FetchEvent","preloadResponse","possiblePreloadResponse","log","url","originalRequest","hasCallback","clone","iterateCallbacks","cb","thrownError","pluginFilteredRequest","fetch","undefined","fetchOptions","fetchResponse","debug","status","callback","response","runCallbacks","error","responseClone","cachePut","key","cacheName","matchOptions","getCacheKey","effectiveRequest","multiMatchOptions","caches","match","cachedResponse","method","_ensureResponseSafeToCache","responseToCache","self","open","cache","hasCacheUpdateCallback","oldResponse","put","name","newResponse","params","param","state","get","statefulCallback","statefulParam","push","shift","resolve","pluginsUsed","warn"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/workbox-precaching/node_modules/workbox-strategies/StrategyHandler.js"],"sourcesContent":["/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheMatchIgnoreParams } from 'workbox-core/_private/cacheMatchIgnoreParams.js';\nimport { Deferred } from 'workbox-core/_private/Deferred.js';\nimport { executeQuotaErrorCallbacks } from 'workbox-core/_private/executeQuotaErrorCallbacks.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { timeout } from 'workbox-core/_private/timeout.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport './_version.js';\nfunction toRequest(input) {\n    return (typeof input === 'string') ? new Request(input) : input;\n}\n/**\n * A class created every time a Strategy instance instance calls\n * [handle()]{@link module:workbox-strategies.Strategy~handle} or\n * [handleAll()]{@link module:workbox-strategies.Strategy~handleAll} that wraps all fetch and\n * cache actions around plugin callbacks and keeps track of when the strategy\n * is \"done\" (i.e. all added `event.waitUntil()` promises have resolved).\n *\n * @memberof module:workbox-strategies\n */\nclass StrategyHandler {\n    /**\n     * Creates a new instance associated with the passed strategy and event\n     * that's handling the request.\n     *\n     * The constructor also initializes the state that will be passed to each of\n     * the plugins handling this request.\n     *\n     * @param {module:workbox-strategies.Strategy} strategy\n     * @param {Object} options\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params]\n     *     [match callback]{@link module:workbox-routing~matchCallback},\n     *     (if applicable).\n     */\n    constructor(strategy, options) {\n        this._cacheKeys = {};\n        /**\n         * The request the strategy is performing (passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * @name request\n         * @instance\n         * @type {Request}\n         * @memberof module:workbox-strategies.StrategyHandler\n         */\n        /**\n         * The event associated with this request.\n         * @name event\n         * @instance\n         * @type {ExtendableEvent}\n         * @memberof module:workbox-strategies.StrategyHandler\n         */\n        /**\n         * A `URL` instance of `request.url` (if passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * Note: the `url` param will be present if the strategy was invoked\n         * from a workbox `Route` object.\n         * @name url\n         * @instance\n         * @type {URL|undefined}\n         * @memberof module:workbox-strategies.StrategyHandler\n         */\n        /**\n         * A `param` value (if passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * Note: the `param` param will be present if the strategy was invoked\n         * from a workbox `Route` object and the\n         * [match callback]{@link module:workbox-routing~matchCallback} returned\n         * a truthy value (it will be that value).\n         * @name params\n         * @instance\n         * @type {*|undefined}\n         * @memberof module:workbox-strategies.StrategyHandler\n         */\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(options.event, ExtendableEvent, {\n                moduleName: 'workbox-strategies',\n                className: 'StrategyHandler',\n                funcName: 'constructor',\n                paramName: 'options.event',\n            });\n        }\n        Object.assign(this, options);\n        this.event = options.event;\n        this._strategy = strategy;\n        this._handlerDeferred = new Deferred();\n        this._extendLifetimePromises = [];\n        // Copy the plugins list (since it's mutable on the strategy),\n        // so any mutations don't affect this handler instance.\n        this._plugins = [...strategy.plugins];\n        this._pluginStateMap = new Map();\n        for (const plugin of this._plugins) {\n            this._pluginStateMap.set(plugin, {});\n        }\n        this.event.waitUntil(this._handlerDeferred.promise);\n    }\n    /**\n     * Fetches a given request (and invokes any applicable plugin callback\n     * methods) using the `fetchOptions` (for non-navigation requests) and\n     * `plugins` defined on the `Strategy` object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - `requestWillFetch()`\n     * - `fetchDidSucceed()`\n     * - `fetchDidFail()`\n     *\n     * @param {Request|string} input The URL or request to fetch.\n     * @return {Promise<Response>}\n     */\n    async fetch(input) {\n        const { event } = this;\n        let request = toRequest(input);\n        if (request.mode === 'navigate' &&\n            event instanceof FetchEvent &&\n            event.preloadResponse) {\n            const possiblePreloadResponse = await event.preloadResponse;\n            if (possiblePreloadResponse) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.log(`Using a preloaded navigation response for ` +\n                        `'${getFriendlyURL(request.url)}'`);\n                }\n                return possiblePreloadResponse;\n            }\n        }\n        // If there is a fetchDidFail plugin, we need to save a clone of the\n        // original request before it's either modified by a requestWillFetch\n        // plugin or before the original request's body is consumed via fetch().\n        const originalRequest = this.hasCallback('fetchDidFail') ?\n            request.clone() : null;\n        try {\n            for (const cb of this.iterateCallbacks('requestWillFetch')) {\n                request = await cb({ request: request.clone(), event });\n            }\n        }\n        catch (err) {\n            throw new WorkboxError('plugin-error-request-will-fetch', {\n                thrownError: err,\n            });\n        }\n        // The request can be altered by plugins with `requestWillFetch` making\n        // the original request (most likely from a `fetch` event) different\n        // from the Request we make. Pass both to `fetchDidFail` to aid debugging.\n        const pluginFilteredRequest = request.clone();\n        try {\n            let fetchResponse;\n            // See https://github.com/GoogleChrome/workbox/issues/1796\n            fetchResponse = await fetch(request, request.mode === 'navigate' ?\n                undefined : this._strategy.fetchOptions);\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Network request for ` +\n                    `'${getFriendlyURL(request.url)}' returned a response with ` +\n                    `status '${fetchResponse.status}'.`);\n            }\n            for (const callback of this.iterateCallbacks('fetchDidSucceed')) {\n                fetchResponse = await callback({\n                    event,\n                    request: pluginFilteredRequest,\n                    response: fetchResponse,\n                });\n            }\n            return fetchResponse;\n        }\n        catch (error) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.log(`Network request for ` +\n                    `'${getFriendlyURL(request.url)}' threw an error.`, error);\n            }\n            // `originalRequest` will only exist if a `fetchDidFail` callback\n            // is being used (see above).\n            if (originalRequest) {\n                await this.runCallbacks('fetchDidFail', {\n                    error,\n                    event,\n                    originalRequest: originalRequest.clone(),\n                    request: pluginFilteredRequest.clone(),\n                });\n            }\n            throw error;\n        }\n    }\n    /**\n     * Calls `this.fetch()` and (in the background) runs `this.cachePut()` on\n     * the response generated by `this.fetch()`.\n     *\n     * The call to `this.cachePut()` automatically invokes `this.waitUntil()`,\n     * so you do not have to manually call `waitUntil()` on the event.\n     *\n     * @param {Request|string} input The request or URL to fetch and cache.\n     * @return {Promise<Response>}\n     */\n    async fetchAndCachePut(input) {\n        const response = await this.fetch(input);\n        const responseClone = response.clone();\n        this.waitUntil(this.cachePut(input, responseClone));\n        return response;\n    }\n    /**\n     * Matches a request from the cache (and invokes any applicable plugin\n     * callback methods) using the `cacheName`, `matchOptions`, and `plugins`\n     * defined on the strategy object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - cacheKeyWillByUsed()\n     * - cachedResponseWillByUsed()\n     *\n     * @param {Request|string} key The Request or URL to use as the cache key.\n     * @return {Promise<Response|undefined>} A matching response, if found.\n     */\n    async cacheMatch(key) {\n        const request = toRequest(key);\n        let cachedResponse;\n        const { cacheName, matchOptions } = this._strategy;\n        const effectiveRequest = await this.getCacheKey(request, 'read');\n        const multiMatchOptions = { ...matchOptions, ...{ cacheName } };\n        cachedResponse = await caches.match(effectiveRequest, multiMatchOptions);\n        if (process.env.NODE_ENV !== 'production') {\n            if (cachedResponse) {\n                logger.debug(`Found a cached response in '${cacheName}'.`);\n            }\n            else {\n                logger.debug(`No cached response found in '${cacheName}'.`);\n            }\n        }\n        for (const callback of this.iterateCallbacks('cachedResponseWillBeUsed')) {\n            cachedResponse = (await callback({\n                cacheName,\n                matchOptions,\n                cachedResponse,\n                request: effectiveRequest,\n                event: this.event,\n            })) || undefined;\n        }\n        return cachedResponse;\n    }\n    /**\n     * Puts a request/response pair in the cache (and invokes any applicable\n     * plugin callback methods) using the `cacheName` and `plugins` defined on\n     * the strategy object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - cacheKeyWillByUsed()\n     * - cacheWillUpdate()\n     * - cacheDidUpdate()\n     *\n     * @param {Request|string} key The request or URL to use as the cache key.\n     * @param {Response} response The response to cache.\n     * @return {Promise<boolean>} `false` if a cacheWillUpdate caused the response\n     * not be cached, and `true` otherwise.\n     */\n    async cachePut(key, response) {\n        const request = toRequest(key);\n        // Run in the next task to avoid blocking other cache reads.\n        // https://github.com/w3c/ServiceWorker/issues/1397\n        await timeout(0);\n        const effectiveRequest = await this.getCacheKey(request, 'write');\n        if (process.env.NODE_ENV !== 'production') {\n            if (effectiveRequest.method && effectiveRequest.method !== 'GET') {\n                throw new WorkboxError('attempt-to-cache-non-get-request', {\n                    url: getFriendlyURL(effectiveRequest.url),\n                    method: effectiveRequest.method,\n                });\n            }\n        }\n        if (!response) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.error(`Cannot cache non-existent response for ` +\n                    `'${getFriendlyURL(effectiveRequest.url)}'.`);\n            }\n            throw new WorkboxError('cache-put-with-no-response', {\n                url: getFriendlyURL(effectiveRequest.url),\n            });\n        }\n        const responseToCache = await this._ensureResponseSafeToCache(response);\n        if (!responseToCache) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Response '${getFriendlyURL(effectiveRequest.url)}' ` +\n                    `will not be cached.`, responseToCache);\n            }\n            return false;\n        }\n        const { cacheName, matchOptions } = this._strategy;\n        const cache = await self.caches.open(cacheName);\n        const hasCacheUpdateCallback = this.hasCallback('cacheDidUpdate');\n        const oldResponse = hasCacheUpdateCallback ? await cacheMatchIgnoreParams(\n        // TODO(philipwalton): the `__WB_REVISION__` param is a precaching\n        // feature. Consider into ways to only add this behavior if using\n        // precaching.\n        cache, effectiveRequest.clone(), ['__WB_REVISION__'], matchOptions) :\n            null;\n        if (process.env.NODE_ENV !== 'production') {\n            logger.debug(`Updating the '${cacheName}' cache with a new Response ` +\n                `for ${getFriendlyURL(effectiveRequest.url)}.`);\n        }\n        try {\n            await cache.put(effectiveRequest, hasCacheUpdateCallback ?\n                responseToCache.clone() : responseToCache);\n        }\n        catch (error) {\n            // See https://developer.mozilla.org/en-US/docs/Web/API/DOMException#exception-QuotaExceededError\n            if (error.name === 'QuotaExceededError') {\n                await executeQuotaErrorCallbacks();\n            }\n            throw error;\n        }\n        for (const callback of this.iterateCallbacks('cacheDidUpdate')) {\n            await callback({\n                cacheName,\n                oldResponse,\n                newResponse: responseToCache.clone(),\n                request: effectiveRequest,\n                event: this.event,\n            });\n        }\n        return true;\n    }\n    /**\n     * Checks the list of plugins for the `cacheKeyWillBeUsed` callback, and\n     * executes any of those callbacks found in sequence. The final `Request`\n     * object returned by the last plugin is treated as the cache key for cache\n     * reads and/or writes. If no `cacheKeyWillBeUsed` plugin callbacks have\n     * been registered, the passed request is returned unmodified\n     *\n     * @param {Request} request\n     * @param {string} mode\n     * @return {Promise<Request>}\n     */\n    async getCacheKey(request, mode) {\n        if (!this._cacheKeys[mode]) {\n            let effectiveRequest = request;\n            for (const callback of this.iterateCallbacks('cacheKeyWillBeUsed')) {\n                effectiveRequest = toRequest(await callback({\n                    mode,\n                    request: effectiveRequest,\n                    event: this.event,\n                    params: this.params,\n                }));\n            }\n            this._cacheKeys[mode] = effectiveRequest;\n        }\n        return this._cacheKeys[mode];\n    }\n    /**\n     * Returns true if the strategy has at least one plugin with the given\n     * callback.\n     *\n     * @param {string} name The name of the callback to check for.\n     * @return {boolean}\n     */\n    hasCallback(name) {\n        for (const plugin of this._strategy.plugins) {\n            if (name in plugin) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Runs all plugin callbacks matching the given name, in order, passing the\n     * given param object (merged ith the current plugin state) as the only\n     * argument.\n     *\n     * Note: since this method runs all plugins, it's not suitable for cases\n     * where the return value of a callback needs to be applied prior to calling\n     * the next callback. See\n     * [`iterateCallbacks()`]{@link module:workbox-strategies.StrategyHandler#iterateCallbacks}\n     * below for how to handle that case.\n     *\n     * @param {string} name The name of the callback to run within each plugin.\n     * @param {Object} param The object to pass as the first (and only) param\n     *     when executing each callback. This object will be merged with the\n     *     current plugin state prior to callback execution.\n     */\n    async runCallbacks(name, param) {\n        for (const callback of this.iterateCallbacks(name)) {\n            // TODO(philipwalton): not sure why `any` is needed. It seems like\n            // this should work with `as WorkboxPluginCallbackParam[C]`.\n            await callback(param);\n        }\n    }\n    /**\n     * Accepts a callback and returns an iterable of matching plugin callbacks,\n     * where each callback is wrapped with the current handler state (i.e. when\n     * you call each callback, whatever object parameter you pass it will\n     * be merged with the plugin's current state).\n     *\n     * @param {string} name The name fo the callback to run\n     * @return {Array<Function>}\n     */\n    *iterateCallbacks(name) {\n        for (const plugin of this._strategy.plugins) {\n            if (typeof plugin[name] === 'function') {\n                const state = this._pluginStateMap.get(plugin);\n                const statefulCallback = (param) => {\n                    const statefulParam = { ...param, state };\n                    // TODO(philipwalton): not sure why `any` is needed. It seems like\n                    // this should work with `as WorkboxPluginCallbackParam[C]`.\n                    return plugin[name](statefulParam);\n                };\n                yield statefulCallback;\n            }\n        }\n    }\n    /**\n     * Adds a promise to the\n     * [extend lifetime promises]{@link https://w3c.github.io/ServiceWorker/#extendableevent-extend-lifetime-promises}\n     * of the event event associated with the request being handled (usually a\n     * `FetchEvent`).\n     *\n     * Note: you can await\n     * [`doneWaiting()`]{@link module:workbox-strategies.StrategyHandler~doneWaiting}\n     * to know when all added promises have settled.\n     *\n     * @param {Promise} promise A promise to add to the extend lifetime promises\n     *     of the event that triggered the request.\n     */\n    waitUntil(promise) {\n        this._extendLifetimePromises.push(promise);\n        return promise;\n    }\n    /**\n     * Returns a promise that resolves once all promises passed to\n     * [`waitUntil()`]{@link module:workbox-strategies.StrategyHandler~waitUntil}\n     * have settled.\n     *\n     * Note: any work done after `doneWaiting()` settles should be manually\n     * passed to an event's `waitUntil()` method (not this handler's\n     * `waitUntil()` method), otherwise the service worker thread my be killed\n     * prior to your work completing.\n     */\n    async doneWaiting() {\n        let promise;\n        while (promise = this._extendLifetimePromises.shift()) {\n            await promise;\n        }\n    }\n    /**\n     * Stops running the strategy and immediately resolves any pending\n     * `waitUntil()` promises.\n     */\n    destroy() {\n        this._handlerDeferred.resolve();\n    }\n    /**\n     * This method will call cacheWillUpdate on the available plugins (or use\n     * status === 200) to determine if the Response is safe and valid to cache.\n     *\n     * @param {Request} options.request\n     * @param {Response} options.response\n     * @return {Promise<Response|undefined>}\n     *\n     * @private\n     */\n    async _ensureResponseSafeToCache(response) {\n        let responseToCache = response;\n        let pluginsUsed = false;\n        for (const callback of this.iterateCallbacks('cacheWillUpdate')) {\n            responseToCache = (await callback({\n                request: this.request,\n                response: responseToCache,\n                event: this.event,\n            })) || undefined;\n            pluginsUsed = true;\n            if (!responseToCache) {\n                break;\n            }\n        }\n        if (!pluginsUsed) {\n            if (responseToCache && responseToCache.status !== 200) {\n                responseToCache = undefined;\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                if (responseToCache) {\n                    if (responseToCache.status !== 200) {\n                        if (responseToCache.status === 0) {\n                            logger.warn(`The response for '${this.request.url}' ` +\n                                `is an opaque response. The caching strategy that you're ` +\n                                `using will not cache opaque responses by default.`);\n                        }\n                        else {\n                            logger.debug(`The response for '${this.request.url}' ` +\n                                `returned a status code of '${response.status}' and won't ` +\n                                `be cached as a result.`);\n                        }\n                    }\n                }\n            }\n        }\n        return responseToCache;\n    }\n}\nexport { StrategyHandler };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}