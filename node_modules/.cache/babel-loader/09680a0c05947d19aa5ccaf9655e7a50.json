{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function sent() {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n          case 7:\n            op = _.ops.pop();\n            _.trys.pop();\n            continue;\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n              _.ops.push(op);\n              break;\n            }\n            if (t[2]) _.ops.pop();\n            _.trys.pop();\n            continue;\n        }\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateStandardFulfillBalancesAndApprovals = exports.validateBasicFulfillBalancesAndApprovals = exports.validateOfferBalancesAndApprovals = exports.getInsufficientBalanceAndApprovalAmounts = exports.getBalancesAndApprovals = void 0;\nvar ethers_1 = require(\"ethers\");\nvar constants_1 = require(\"../constants\");\nvar approval_1 = require(\"./approval\");\nvar balance_1 = require(\"./balance\");\nvar criteria_1 = require(\"./criteria\");\nvar item_1 = require(\"./item\");\nvar findBalanceAndApproval = function findBalanceAndApproval(balancesAndApprovals, token, identifierOrCriteria) {\n  var balanceAndApproval = balancesAndApprovals.find(function (_a) {\n    var checkedToken = _a.token,\n      checkedIdentifierOrCriteria = _a.identifierOrCriteria;\n    return token.toLowerCase() === checkedToken.toLowerCase() && checkedIdentifierOrCriteria.toLowerCase() === identifierOrCriteria.toLowerCase();\n  });\n  if (!balanceAndApproval) {\n    throw new Error(\"Balances and approvals didn't contain all tokens and identifiers\");\n  }\n  return balanceAndApproval;\n};\nvar getBalancesAndApprovals = function getBalancesAndApprovals(_a) {\n  var owner = _a.owner,\n    items = _a.items,\n    criterias = _a.criterias,\n    operator = _a.operator,\n    multicallProvider = _a.multicallProvider;\n  return __awaiter(void 0, void 0, void 0, function () {\n    var itemToCriteria;\n    return __generator(this, function (_b) {\n      itemToCriteria = (0, criteria_1.getItemToCriteriaMap)(items, criterias);\n      return [2 /*return*/, Promise.all(items.map(function (item) {\n        return __awaiter(void 0, void 0, void 0, function () {\n          var approvedAmountPromise;\n          var _a;\n          var _b, _c;\n          return __generator(this, function (_d) {\n            switch (_d.label) {\n              case 0:\n                approvedAmountPromise = Promise.resolve(ethers_1.BigNumber.from(0));\n                if ((0, item_1.isErc721Item)(item.itemType) || (0, item_1.isErc1155Item)(item.itemType)) {\n                  approvedAmountPromise = (0, approval_1.approvedItemAmount)(owner, item, operator, multicallProvider);\n                } else if ((0, item_1.isErc20Item)(item.itemType)) {\n                  approvedAmountPromise = (0, approval_1.approvedItemAmount)(owner, item, operator, multicallProvider);\n                }\n                // If native token, we don't need to check for approvals\n                else {\n                  approvedAmountPromise = Promise.resolve(constants_1.MAX_INT);\n                }\n                _a = {\n                  token: item.token,\n                  identifierOrCriteria: (_c = (_b = itemToCriteria.get(item)) === null || _b === void 0 ? void 0 : _b.identifier) !== null && _c !== void 0 ? _c : item.identifierOrCriteria\n                };\n                return [4 /*yield*/, (0, balance_1.balanceOf)(owner, item, multicallProvider, itemToCriteria.get(item))];\n              case 1:\n                _a.balance = _d.sent();\n                return [4 /*yield*/, approvedAmountPromise];\n              case 2:\n                return [2 /*return*/, (_a.approvedAmount = _d.sent(), _a.itemType = item.itemType, _a)];\n            }\n          });\n        });\n      }))];\n    });\n  });\n};\nexports.getBalancesAndApprovals = getBalancesAndApprovals;\nvar getInsufficientBalanceAndApprovalAmounts = function getInsufficientBalanceAndApprovalAmounts(_a) {\n  var balancesAndApprovals = _a.balancesAndApprovals,\n    tokenAndIdentifierAmounts = _a.tokenAndIdentifierAmounts,\n    operator = _a.operator;\n  var tokenAndIdentifierAndAmountNeeded = __spreadArray([], __read(Object.entries(tokenAndIdentifierAmounts).map(function (_a) {\n    var _b = __read(_a, 2),\n      token = _b[0],\n      identifierToAmount = _b[1];\n    return Object.entries(identifierToAmount).map(function (_a) {\n      var _b = __read(_a, 2),\n        identifierOrCriteria = _b[0],\n        amountNeeded = _b[1];\n      return [token, identifierOrCriteria, amountNeeded];\n    });\n  })), false).flat();\n  var filterBalancesOrApprovals = function filterBalancesOrApprovals(filterKey) {\n    return tokenAndIdentifierAndAmountNeeded.filter(function (_a) {\n      var _b = __read(_a, 3),\n        token = _b[0],\n        identifierOrCriteria = _b[1],\n        amountNeeded = _b[2];\n      return findBalanceAndApproval(balancesAndApprovals, token, identifierOrCriteria)[filterKey].lt(amountNeeded);\n    }).map(function (_a) {\n      var _b = __read(_a, 3),\n        token = _b[0],\n        identifierOrCriteria = _b[1],\n        amount = _b[2];\n      var balanceAndApproval = findBalanceAndApproval(balancesAndApprovals, token, identifierOrCriteria);\n      return {\n        token: token,\n        identifierOrCriteria: identifierOrCriteria,\n        requiredAmount: amount,\n        amountHave: balanceAndApproval[filterKey],\n        itemType: balanceAndApproval.itemType\n      };\n    });\n  };\n  var mapToApproval = function mapToApproval(insufficientBalance) {\n    return {\n      token: insufficientBalance.token,\n      identifierOrCriteria: insufficientBalance.identifierOrCriteria,\n      approvedAmount: insufficientBalance.amountHave,\n      requiredApprovedAmount: insufficientBalance.requiredAmount,\n      itemType: insufficientBalance.itemType,\n      operator: operator\n    };\n  };\n  var _b = __read([filterBalancesOrApprovals(\"balance\"), filterBalancesOrApprovals(\"approvedAmount\").map(mapToApproval)], 2),\n    insufficientBalances = _b[0],\n    insufficientApprovals = _b[1];\n  return {\n    insufficientBalances: insufficientBalances,\n    insufficientApprovals: insufficientApprovals\n  };\n};\nexports.getInsufficientBalanceAndApprovalAmounts = getInsufficientBalanceAndApprovalAmounts;\n/**\n * 1. The offerer should have sufficient balance of all offered items.\n * 2. If the order does not indicate proxy utilization, the offerer should have sufficient approvals set\n *    for the Seaport contract for all offered ERC20, ERC721, and ERC1155 items.\n * 3. If the order does indicate proxy utilization, the offerer should have sufficient approvals set\n *    for their respective proxy contract for all offered ERC20, ERC721, and ERC1155 items.\n */\nvar validateOfferBalancesAndApprovals = function validateOfferBalancesAndApprovals(_a) {\n  var offer = _a.offer,\n    criterias = _a.criterias,\n    balancesAndApprovals = _a.balancesAndApprovals,\n    timeBasedItemParams = _a.timeBasedItemParams,\n    _b = _a.throwOnInsufficientBalances,\n    throwOnInsufficientBalances = _b === void 0 ? true : _b,\n    throwOnInsufficientApprovals = _a.throwOnInsufficientApprovals,\n    operator = _a.operator;\n  var _c = (0, exports.getInsufficientBalanceAndApprovalAmounts)({\n      balancesAndApprovals: balancesAndApprovals,\n      tokenAndIdentifierAmounts: (0, item_1.getSummedTokenAndIdentifierAmounts)({\n        items: offer,\n        criterias: criterias,\n        timeBasedItemParams: timeBasedItemParams ? __assign(__assign({}, timeBasedItemParams), {\n          isConsiderationItem: false\n        }) : undefined\n      }),\n      operator: operator\n    }),\n    insufficientBalances = _c.insufficientBalances,\n    insufficientApprovals = _c.insufficientApprovals;\n  if (throwOnInsufficientBalances && insufficientBalances.length > 0) {\n    throw new Error(\"The offerer does not have the amount needed to create or fulfill.\");\n  }\n  if (throwOnInsufficientApprovals && insufficientApprovals.length > 0) {\n    throw new Error(\"The offerer does not have the sufficient approvals.\");\n  }\n  return insufficientApprovals;\n};\nexports.validateOfferBalancesAndApprovals = validateOfferBalancesAndApprovals;\n/**\n * When fulfilling a basic order, the following requirements need to be checked to ensure that the order will be fulfillable:\n * 1. Offer checks need to be performed to ensure that the offerer still has sufficient balance and approvals\n * 2. The fulfiller should have sufficient balance of all consideration items except for those with an\n *    item type that matches the order's offered item type — by way of example, if the fulfilled order offers\n *    an ERC20 item and requires an ERC721 item to the offerer and the same ERC20 item to another recipient,\n *    the fulfiller needs to own the ERC721 item but does not need to own the ERC20 item as it will be sourced from the offerer.\n * 3. If the fulfiller does not elect to utilize a proxy, they need to have sufficient approvals set for the\n *    Seaport contract for all ERC20, ERC721, and ERC1155 consideration items on the fulfilled order except\n *    for ERC20 items with an item type that matches the order's offered item type.\n * 4. If the fulfiller does elect to utilize a proxy, they need to have sufficient approvals set for their\n *    respective proxy contract for all ERC20, ERC721, and ERC1155 consideration items on the fulfilled order\n *    except for ERC20 items with an item type that matches the order's offered item type.\n * 5. If the fulfilled order specifies Ether (or other native tokens) as consideration items, the fulfiller must\n *    be able to supply the sum total of those items as msg.value.\n *\n * @returns the list of insufficient owner and proxy approvals\n */\nvar validateBasicFulfillBalancesAndApprovals = function validateBasicFulfillBalancesAndApprovals(_a) {\n  var offer = _a.offer,\n    consideration = _a.consideration,\n    offererBalancesAndApprovals = _a.offererBalancesAndApprovals,\n    fulfillerBalancesAndApprovals = _a.fulfillerBalancesAndApprovals,\n    timeBasedItemParams = _a.timeBasedItemParams,\n    offererOperator = _a.offererOperator,\n    fulfillerOperator = _a.fulfillerOperator;\n  (0, exports.validateOfferBalancesAndApprovals)({\n    offer: offer,\n    criterias: [],\n    balancesAndApprovals: offererBalancesAndApprovals,\n    timeBasedItemParams: timeBasedItemParams,\n    throwOnInsufficientApprovals: true,\n    operator: offererOperator\n  });\n  var considerationWithoutOfferItemType = consideration.filter(function (item) {\n    return item.itemType !== offer[0].itemType;\n  });\n  var _b = (0, exports.getInsufficientBalanceAndApprovalAmounts)({\n      balancesAndApprovals: fulfillerBalancesAndApprovals,\n      tokenAndIdentifierAmounts: (0, item_1.getSummedTokenAndIdentifierAmounts)({\n        items: considerationWithoutOfferItemType,\n        criterias: [],\n        timeBasedItemParams: __assign(__assign({}, timeBasedItemParams), {\n          isConsiderationItem: true\n        })\n      }),\n      operator: fulfillerOperator\n    }),\n    insufficientBalances = _b.insufficientBalances,\n    insufficientApprovals = _b.insufficientApprovals;\n  if (insufficientBalances.length > 0) {\n    throw new Error(\"The fulfiller does not have the balances needed to fulfill.\");\n  }\n  return insufficientApprovals;\n};\nexports.validateBasicFulfillBalancesAndApprovals = validateBasicFulfillBalancesAndApprovals;\n/**\n * When fulfilling a standard order, the following requirements need to be checked to ensure that the order will be fulfillable:\n * 1. Offer checks need to be performed to ensure that the offerer still has sufficient balance and approvals\n * 2. The fulfiller should have sufficient balance of all consideration items after receiving all offered items\n *    — by way of example, if the fulfilled order offers an ERC20 item and requires an ERC721 item to the offerer\n *    and the same ERC20 item to another recipient with an amount less than or equal to the offered amount,\n *    the fulfiller does not need to own the ERC20 item as it will first be received from the offerer.\n * 3. If the fulfiller does not elect to utilize a proxy, they need to have sufficient approvals set for the\n *    Seaport contract for all ERC20, ERC721, and ERC1155 consideration items on the fulfilled order.\n * 4. If the fulfiller does elect to utilize a proxy, they need to have sufficient approvals set for their\n *    respective proxy contract for all ERC20, ERC721, and ERC1155 consideration items on the fulfilled order.\n * 5. If the fulfilled order specifies Ether (or other native tokens) as consideration items, the fulfiller must\n *    be able to supply the sum total of those items as msg.value.\n *\n * @returns the list of insufficient owner and proxy approvals\n */\nvar validateStandardFulfillBalancesAndApprovals = function validateStandardFulfillBalancesAndApprovals(_a) {\n  var offer = _a.offer,\n    consideration = _a.consideration,\n    offerCriteria = _a.offerCriteria,\n    considerationCriteria = _a.considerationCriteria,\n    offererBalancesAndApprovals = _a.offererBalancesAndApprovals,\n    fulfillerBalancesAndApprovals = _a.fulfillerBalancesAndApprovals,\n    timeBasedItemParams = _a.timeBasedItemParams,\n    offererOperator = _a.offererOperator,\n    fulfillerOperator = _a.fulfillerOperator;\n  (0, exports.validateOfferBalancesAndApprovals)({\n    offer: offer,\n    criterias: offerCriteria,\n    balancesAndApprovals: offererBalancesAndApprovals,\n    timeBasedItemParams: timeBasedItemParams,\n    throwOnInsufficientApprovals: true,\n    operator: offererOperator\n  });\n  var fulfillerBalancesAndApprovalsAfterReceivingOfferedItems = addToExistingBalances({\n    items: offer,\n    criterias: offerCriteria,\n    balancesAndApprovals: fulfillerBalancesAndApprovals,\n    timeBasedItemParams: timeBasedItemParams\n  });\n  var _b = (0, exports.getInsufficientBalanceAndApprovalAmounts)({\n      balancesAndApprovals: fulfillerBalancesAndApprovalsAfterReceivingOfferedItems,\n      tokenAndIdentifierAmounts: (0, item_1.getSummedTokenAndIdentifierAmounts)({\n        items: consideration,\n        criterias: considerationCriteria,\n        timeBasedItemParams: __assign(__assign({}, timeBasedItemParams), {\n          isConsiderationItem: true\n        })\n      }),\n      operator: fulfillerOperator\n    }),\n    insufficientBalances = _b.insufficientBalances,\n    insufficientApprovals = _b.insufficientApprovals;\n  if (insufficientBalances.length > 0) {\n    throw new Error(\"The fulfiller does not have the balances needed to fulfill.\");\n  }\n  return insufficientApprovals;\n};\nexports.validateStandardFulfillBalancesAndApprovals = validateStandardFulfillBalancesAndApprovals;\nvar addToExistingBalances = function addToExistingBalances(_a) {\n  var items = _a.items,\n    criterias = _a.criterias,\n    timeBasedItemParams = _a.timeBasedItemParams,\n    balancesAndApprovals = _a.balancesAndApprovals;\n  var summedItemAmounts = (0, item_1.getSummedTokenAndIdentifierAmounts)({\n    items: items,\n    criterias: criterias,\n    timeBasedItemParams: __assign(__assign({}, timeBasedItemParams), {\n      isConsiderationItem: false\n    })\n  });\n  // Deep clone existing balances\n  var balancesAndApprovalsAfterReceivingItems = balancesAndApprovals.map(function (item) {\n    return __assign({}, item);\n  });\n  // Add each summed item amount to the existing balances as we may want tocheck balances after receiving all items\n  Object.entries(summedItemAmounts).forEach(function (_a) {\n    var _b = __read(_a, 2),\n      token = _b[0],\n      identifierOrCriteriaToAmount = _b[1];\n    return Object.entries(identifierOrCriteriaToAmount).forEach(function (_a) {\n      var _b = __read(_a, 2),\n        identifierOrCriteria = _b[0],\n        amount = _b[1];\n      var balanceAndApproval = findBalanceAndApproval(balancesAndApprovalsAfterReceivingItems, token, identifierOrCriteria);\n      var balanceAndApprovalIndex = balancesAndApprovalsAfterReceivingItems.indexOf(balanceAndApproval);\n      balancesAndApprovalsAfterReceivingItems[balanceAndApprovalIndex].balance = balancesAndApprovalsAfterReceivingItems[balanceAndApprovalIndex].balance.add(amount);\n    });\n  });\n  return balancesAndApprovalsAfterReceivingItems;\n};","map":{"version":3,"sources":["../../src/utils/balanceAndApprovalCheck.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.validateStandardFulfillBalancesAndApprovals = exports.validateBasicFulfillBalancesAndApprovals = exports.validateOfferBalancesAndApprovals = exports.getInsufficientBalanceAndApprovalAmounts = exports.getBalancesAndApprovals = void 0;\nvar ethers_1 = require(\"ethers\");\nvar constants_1 = require(\"../constants\");\nvar approval_1 = require(\"./approval\");\nvar balance_1 = require(\"./balance\");\nvar criteria_1 = require(\"./criteria\");\nvar item_1 = require(\"./item\");\nvar findBalanceAndApproval = function (balancesAndApprovals, token, identifierOrCriteria) {\n    var balanceAndApproval = balancesAndApprovals.find(function (_a) {\n        var checkedToken = _a.token, checkedIdentifierOrCriteria = _a.identifierOrCriteria;\n        return token.toLowerCase() === checkedToken.toLowerCase() &&\n            checkedIdentifierOrCriteria.toLowerCase() ===\n                identifierOrCriteria.toLowerCase();\n    });\n    if (!balanceAndApproval) {\n        throw new Error(\"Balances and approvals didn't contain all tokens and identifiers\");\n    }\n    return balanceAndApproval;\n};\nvar getBalancesAndApprovals = function (_a) {\n    var owner = _a.owner, items = _a.items, criterias = _a.criterias, operator = _a.operator, multicallProvider = _a.multicallProvider;\n    return __awaiter(void 0, void 0, void 0, function () {\n        var itemToCriteria;\n        return __generator(this, function (_b) {\n            itemToCriteria = (0, criteria_1.getItemToCriteriaMap)(items, criterias);\n            return [2 /*return*/, Promise.all(items.map(function (item) { return __awaiter(void 0, void 0, void 0, function () {\n                    var approvedAmountPromise;\n                    var _a;\n                    var _b, _c;\n                    return __generator(this, function (_d) {\n                        switch (_d.label) {\n                            case 0:\n                                approvedAmountPromise = Promise.resolve(ethers_1.BigNumber.from(0));\n                                if ((0, item_1.isErc721Item)(item.itemType) || (0, item_1.isErc1155Item)(item.itemType)) {\n                                    approvedAmountPromise = (0, approval_1.approvedItemAmount)(owner, item, operator, multicallProvider);\n                                }\n                                else if ((0, item_1.isErc20Item)(item.itemType)) {\n                                    approvedAmountPromise = (0, approval_1.approvedItemAmount)(owner, item, operator, multicallProvider);\n                                }\n                                // If native token, we don't need to check for approvals\n                                else {\n                                    approvedAmountPromise = Promise.resolve(constants_1.MAX_INT);\n                                }\n                                _a = {\n                                    token: item.token,\n                                    identifierOrCriteria: (_c = (_b = itemToCriteria.get(item)) === null || _b === void 0 ? void 0 : _b.identifier) !== null && _c !== void 0 ? _c : item.identifierOrCriteria\n                                };\n                                return [4 /*yield*/, (0, balance_1.balanceOf)(owner, item, multicallProvider, itemToCriteria.get(item))];\n                            case 1:\n                                _a.balance = _d.sent();\n                                return [4 /*yield*/, approvedAmountPromise];\n                            case 2: return [2 /*return*/, (_a.approvedAmount = _d.sent(),\n                                    _a.itemType = item.itemType,\n                                    _a)];\n                        }\n                    });\n                }); }))];\n        });\n    });\n};\nexports.getBalancesAndApprovals = getBalancesAndApprovals;\nvar getInsufficientBalanceAndApprovalAmounts = function (_a) {\n    var balancesAndApprovals = _a.balancesAndApprovals, tokenAndIdentifierAmounts = _a.tokenAndIdentifierAmounts, operator = _a.operator;\n    var tokenAndIdentifierAndAmountNeeded = __spreadArray([], __read(Object.entries(tokenAndIdentifierAmounts).map(function (_a) {\n        var _b = __read(_a, 2), token = _b[0], identifierToAmount = _b[1];\n        return Object.entries(identifierToAmount).map(function (_a) {\n            var _b = __read(_a, 2), identifierOrCriteria = _b[0], amountNeeded = _b[1];\n            return [token, identifierOrCriteria, amountNeeded];\n        });\n    })), false).flat();\n    var filterBalancesOrApprovals = function (filterKey) {\n        return tokenAndIdentifierAndAmountNeeded\n            .filter(function (_a) {\n            var _b = __read(_a, 3), token = _b[0], identifierOrCriteria = _b[1], amountNeeded = _b[2];\n            return findBalanceAndApproval(balancesAndApprovals, token, identifierOrCriteria)[filterKey].lt(amountNeeded);\n        })\n            .map(function (_a) {\n            var _b = __read(_a, 3), token = _b[0], identifierOrCriteria = _b[1], amount = _b[2];\n            var balanceAndApproval = findBalanceAndApproval(balancesAndApprovals, token, identifierOrCriteria);\n            return {\n                token: token,\n                identifierOrCriteria: identifierOrCriteria,\n                requiredAmount: amount,\n                amountHave: balanceAndApproval[filterKey],\n                itemType: balanceAndApproval.itemType,\n            };\n        });\n    };\n    var mapToApproval = function (insufficientBalance) { return ({\n        token: insufficientBalance.token,\n        identifierOrCriteria: insufficientBalance.identifierOrCriteria,\n        approvedAmount: insufficientBalance.amountHave,\n        requiredApprovedAmount: insufficientBalance.requiredAmount,\n        itemType: insufficientBalance.itemType,\n        operator: operator,\n    }); };\n    var _b = __read([\n        filterBalancesOrApprovals(\"balance\"),\n        filterBalancesOrApprovals(\"approvedAmount\").map(mapToApproval),\n    ], 2), insufficientBalances = _b[0], insufficientApprovals = _b[1];\n    return {\n        insufficientBalances: insufficientBalances,\n        insufficientApprovals: insufficientApprovals,\n    };\n};\nexports.getInsufficientBalanceAndApprovalAmounts = getInsufficientBalanceAndApprovalAmounts;\n/**\n * 1. The offerer should have sufficient balance of all offered items.\n * 2. If the order does not indicate proxy utilization, the offerer should have sufficient approvals set\n *    for the Seaport contract for all offered ERC20, ERC721, and ERC1155 items.\n * 3. If the order does indicate proxy utilization, the offerer should have sufficient approvals set\n *    for their respective proxy contract for all offered ERC20, ERC721, and ERC1155 items.\n */\nvar validateOfferBalancesAndApprovals = function (_a) {\n    var offer = _a.offer, criterias = _a.criterias, balancesAndApprovals = _a.balancesAndApprovals, timeBasedItemParams = _a.timeBasedItemParams, _b = _a.throwOnInsufficientBalances, throwOnInsufficientBalances = _b === void 0 ? true : _b, throwOnInsufficientApprovals = _a.throwOnInsufficientApprovals, operator = _a.operator;\n    var _c = (0, exports.getInsufficientBalanceAndApprovalAmounts)({\n        balancesAndApprovals: balancesAndApprovals,\n        tokenAndIdentifierAmounts: (0, item_1.getSummedTokenAndIdentifierAmounts)({\n            items: offer,\n            criterias: criterias,\n            timeBasedItemParams: timeBasedItemParams\n                ? __assign(__assign({}, timeBasedItemParams), { isConsiderationItem: false }) : undefined,\n        }),\n        operator: operator,\n    }), insufficientBalances = _c.insufficientBalances, insufficientApprovals = _c.insufficientApprovals;\n    if (throwOnInsufficientBalances && insufficientBalances.length > 0) {\n        throw new Error(\"The offerer does not have the amount needed to create or fulfill.\");\n    }\n    if (throwOnInsufficientApprovals && insufficientApprovals.length > 0) {\n        throw new Error(\"The offerer does not have the sufficient approvals.\");\n    }\n    return insufficientApprovals;\n};\nexports.validateOfferBalancesAndApprovals = validateOfferBalancesAndApprovals;\n/**\n * When fulfilling a basic order, the following requirements need to be checked to ensure that the order will be fulfillable:\n * 1. Offer checks need to be performed to ensure that the offerer still has sufficient balance and approvals\n * 2. The fulfiller should have sufficient balance of all consideration items except for those with an\n *    item type that matches the order's offered item type — by way of example, if the fulfilled order offers\n *    an ERC20 item and requires an ERC721 item to the offerer and the same ERC20 item to another recipient,\n *    the fulfiller needs to own the ERC721 item but does not need to own the ERC20 item as it will be sourced from the offerer.\n * 3. If the fulfiller does not elect to utilize a proxy, they need to have sufficient approvals set for the\n *    Seaport contract for all ERC20, ERC721, and ERC1155 consideration items on the fulfilled order except\n *    for ERC20 items with an item type that matches the order's offered item type.\n * 4. If the fulfiller does elect to utilize a proxy, they need to have sufficient approvals set for their\n *    respective proxy contract for all ERC20, ERC721, and ERC1155 consideration items on the fulfilled order\n *    except for ERC20 items with an item type that matches the order's offered item type.\n * 5. If the fulfilled order specifies Ether (or other native tokens) as consideration items, the fulfiller must\n *    be able to supply the sum total of those items as msg.value.\n *\n * @returns the list of insufficient owner and proxy approvals\n */\nvar validateBasicFulfillBalancesAndApprovals = function (_a) {\n    var offer = _a.offer, consideration = _a.consideration, offererBalancesAndApprovals = _a.offererBalancesAndApprovals, fulfillerBalancesAndApprovals = _a.fulfillerBalancesAndApprovals, timeBasedItemParams = _a.timeBasedItemParams, offererOperator = _a.offererOperator, fulfillerOperator = _a.fulfillerOperator;\n    (0, exports.validateOfferBalancesAndApprovals)({\n        offer: offer,\n        criterias: [],\n        balancesAndApprovals: offererBalancesAndApprovals,\n        timeBasedItemParams: timeBasedItemParams,\n        throwOnInsufficientApprovals: true,\n        operator: offererOperator,\n    });\n    var considerationWithoutOfferItemType = consideration.filter(function (item) { return item.itemType !== offer[0].itemType; });\n    var _b = (0, exports.getInsufficientBalanceAndApprovalAmounts)({\n        balancesAndApprovals: fulfillerBalancesAndApprovals,\n        tokenAndIdentifierAmounts: (0, item_1.getSummedTokenAndIdentifierAmounts)({\n            items: considerationWithoutOfferItemType,\n            criterias: [],\n            timeBasedItemParams: __assign(__assign({}, timeBasedItemParams), { isConsiderationItem: true }),\n        }),\n        operator: fulfillerOperator,\n    }), insufficientBalances = _b.insufficientBalances, insufficientApprovals = _b.insufficientApprovals;\n    if (insufficientBalances.length > 0) {\n        throw new Error(\"The fulfiller does not have the balances needed to fulfill.\");\n    }\n    return insufficientApprovals;\n};\nexports.validateBasicFulfillBalancesAndApprovals = validateBasicFulfillBalancesAndApprovals;\n/**\n * When fulfilling a standard order, the following requirements need to be checked to ensure that the order will be fulfillable:\n * 1. Offer checks need to be performed to ensure that the offerer still has sufficient balance and approvals\n * 2. The fulfiller should have sufficient balance of all consideration items after receiving all offered items\n *    — by way of example, if the fulfilled order offers an ERC20 item and requires an ERC721 item to the offerer\n *    and the same ERC20 item to another recipient with an amount less than or equal to the offered amount,\n *    the fulfiller does not need to own the ERC20 item as it will first be received from the offerer.\n * 3. If the fulfiller does not elect to utilize a proxy, they need to have sufficient approvals set for the\n *    Seaport contract for all ERC20, ERC721, and ERC1155 consideration items on the fulfilled order.\n * 4. If the fulfiller does elect to utilize a proxy, they need to have sufficient approvals set for their\n *    respective proxy contract for all ERC20, ERC721, and ERC1155 consideration items on the fulfilled order.\n * 5. If the fulfilled order specifies Ether (or other native tokens) as consideration items, the fulfiller must\n *    be able to supply the sum total of those items as msg.value.\n *\n * @returns the list of insufficient owner and proxy approvals\n */\nvar validateStandardFulfillBalancesAndApprovals = function (_a) {\n    var offer = _a.offer, consideration = _a.consideration, offerCriteria = _a.offerCriteria, considerationCriteria = _a.considerationCriteria, offererBalancesAndApprovals = _a.offererBalancesAndApprovals, fulfillerBalancesAndApprovals = _a.fulfillerBalancesAndApprovals, timeBasedItemParams = _a.timeBasedItemParams, offererOperator = _a.offererOperator, fulfillerOperator = _a.fulfillerOperator;\n    (0, exports.validateOfferBalancesAndApprovals)({\n        offer: offer,\n        criterias: offerCriteria,\n        balancesAndApprovals: offererBalancesAndApprovals,\n        timeBasedItemParams: timeBasedItemParams,\n        throwOnInsufficientApprovals: true,\n        operator: offererOperator,\n    });\n    var fulfillerBalancesAndApprovalsAfterReceivingOfferedItems = addToExistingBalances({\n        items: offer,\n        criterias: offerCriteria,\n        balancesAndApprovals: fulfillerBalancesAndApprovals,\n        timeBasedItemParams: timeBasedItemParams,\n    });\n    var _b = (0, exports.getInsufficientBalanceAndApprovalAmounts)({\n        balancesAndApprovals: fulfillerBalancesAndApprovalsAfterReceivingOfferedItems,\n        tokenAndIdentifierAmounts: (0, item_1.getSummedTokenAndIdentifierAmounts)({\n            items: consideration,\n            criterias: considerationCriteria,\n            timeBasedItemParams: __assign(__assign({}, timeBasedItemParams), { isConsiderationItem: true }),\n        }),\n        operator: fulfillerOperator,\n    }), insufficientBalances = _b.insufficientBalances, insufficientApprovals = _b.insufficientApprovals;\n    if (insufficientBalances.length > 0) {\n        throw new Error(\"The fulfiller does not have the balances needed to fulfill.\");\n    }\n    return insufficientApprovals;\n};\nexports.validateStandardFulfillBalancesAndApprovals = validateStandardFulfillBalancesAndApprovals;\nvar addToExistingBalances = function (_a) {\n    var items = _a.items, criterias = _a.criterias, timeBasedItemParams = _a.timeBasedItemParams, balancesAndApprovals = _a.balancesAndApprovals;\n    var summedItemAmounts = (0, item_1.getSummedTokenAndIdentifierAmounts)({\n        items: items,\n        criterias: criterias,\n        timeBasedItemParams: __assign(__assign({}, timeBasedItemParams), { isConsiderationItem: false }),\n    });\n    // Deep clone existing balances\n    var balancesAndApprovalsAfterReceivingItems = balancesAndApprovals.map(function (item) { return (__assign({}, item)); });\n    // Add each summed item amount to the existing balances as we may want tocheck balances after receiving all items\n    Object.entries(summedItemAmounts).forEach(function (_a) {\n        var _b = __read(_a, 2), token = _b[0], identifierOrCriteriaToAmount = _b[1];\n        return Object.entries(identifierOrCriteriaToAmount).forEach(function (_a) {\n            var _b = __read(_a, 2), identifierOrCriteria = _b[0], amount = _b[1];\n            var balanceAndApproval = findBalanceAndApproval(balancesAndApprovalsAfterReceivingItems, token, identifierOrCriteria);\n            var balanceAndApprovalIndex = balancesAndApprovalsAfterReceivingItems.indexOf(balanceAndApproval);\n            balancesAndApprovalsAfterReceivingItems[balanceAndApprovalIndex].balance =\n                balancesAndApprovalsAfterReceivingItems[balanceAndApprovalIndex].balance.add(amount);\n        });\n    });\n    return balancesAndApprovalsAfterReceivingItems;\n};\n//# sourceMappingURL=balanceAndApprovalCheck.js.map"]},"metadata":{},"sourceType":"script"}