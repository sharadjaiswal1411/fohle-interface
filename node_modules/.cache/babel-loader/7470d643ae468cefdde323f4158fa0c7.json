{"ast":null,"code":"var _regeneratorRuntime = require(\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\nvar _asyncToGenerator = require(\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\nvar _classCallCheck = require(\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nvar _inherits = require(\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\nvar _createSuper = require(\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\nvar BaseFilter = require('./base-filter');\nvar getBlocksForRange = require('./getBlocksForRange');\nvar _require = require('./hexUtils'),\n  incrementHexInt = _require.incrementHexInt;\nvar BlockFilter = /*#__PURE__*/function (_BaseFilter) {\n  \"use strict\";\n\n  _inherits(BlockFilter, _BaseFilter);\n  var _super = _createSuper(BlockFilter);\n  function BlockFilter(_ref) {\n    var _this;\n    var provider = _ref.provider,\n      params = _ref.params;\n    _classCallCheck(this, BlockFilter);\n    _this = _super.call(this);\n    _this.type = 'block';\n    _this.provider = provider;\n    return _this;\n  }\n  _createClass(BlockFilter, [{\n    key: \"update\",\n    value: function () {\n      var _update = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {\n        var oldBlock, newBlock, toBlock, fromBlock, blockBodies, blockHashes;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                oldBlock = _ref2.oldBlock, newBlock = _ref2.newBlock;\n                toBlock = newBlock;\n                fromBlock = incrementHexInt(oldBlock);\n                _context.next = 5;\n                return getBlocksForRange({\n                  provider: this.provider,\n                  fromBlock: fromBlock,\n                  toBlock: toBlock\n                });\n              case 5:\n                blockBodies = _context.sent;\n                blockHashes = blockBodies.map(function (block) {\n                  return block.hash;\n                });\n                this.addResults(blockHashes);\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function update(_x) {\n        return _update.apply(this, arguments);\n      }\n      return update;\n    }()\n  }]);\n  return BlockFilter;\n}(BaseFilter);\nmodule.exports = BlockFilter;","map":{"version":3,"names":["BaseFilter","require","getBlocksForRange","incrementHexInt","BlockFilter","provider","params","type","oldBlock","newBlock","toBlock","fromBlock","blockBodies","blockHashes","map","block","hash","addResults","module","exports"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/eth-json-rpc-filters/block-filter.js"],"sourcesContent":["const BaseFilter = require('./base-filter')\nconst getBlocksForRange = require('./getBlocksForRange')\nconst { incrementHexInt } = require('./hexUtils')\n\nclass BlockFilter extends BaseFilter {\n\n  constructor ({ provider, params }) {\n    super()\n    this.type = 'block'\n    this.provider = provider\n  }\n\n  async update ({ oldBlock, newBlock }) {\n    const toBlock = newBlock\n    const fromBlock = incrementHexInt(oldBlock)\n    const blockBodies = await getBlocksForRange({ provider: this.provider, fromBlock, toBlock })\n    const blockHashes = blockBodies.map((block) => block.hash)\n    this.addResults(blockHashes)\n  }\n\n}\n\nmodule.exports = BlockFilter\n"],"mappings":";;;;;;AAAA,IAAMA,UAAU,GAAGC,OAAO,CAAC,eAAe,CAAC;AAC3C,IAAMC,iBAAiB,GAAGD,OAAO,CAAC,qBAAqB,CAAC;AACxD,eAA4BA,OAAO,CAAC,YAAY,CAAC;EAAzCE,eAAe,YAAfA,eAAe;AAA0B,IAE3CC,WAAW;EAAA;;EAAA;EAAA;EAEf,2BAAmC;IAAA;IAAA,IAApBC,QAAQ,QAARA,QAAQ;MAAEC,MAAM,QAANA,MAAM;IAAA;IAC7B;IACA,MAAKC,IAAI,GAAG,OAAO;IACnB,MAAKF,QAAQ,GAAGA,QAAQ;IAAA;EAC1B;EAAC;IAAA;IAAA;MAAA,uEAED;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAgBG,QAAQ,SAARA,QAAQ,EAAEC,QAAQ,SAARA,QAAQ;gBAC1BC,OAAO,GAAGD,QAAQ;gBAClBE,SAAS,GAAGR,eAAe,CAACK,QAAQ,CAAC;gBAAA;gBAAA,OACjBN,iBAAiB,CAAC;kBAAEG,QAAQ,EAAE,IAAI,CAACA,QAAQ;kBAAEM,SAAS,EAATA,SAAS;kBAAED,OAAO,EAAPA;gBAAQ,CAAC,CAAC;cAAA;gBAAtFE,WAAW;gBACXC,WAAW,GAAGD,WAAW,CAACE,GAAG,CAAC,UAACC,KAAK;kBAAA,OAAKA,KAAK,CAACC,IAAI;gBAAA,EAAC;gBAC1D,IAAI,CAACC,UAAU,CAACJ,WAAW,CAAC;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAC7B;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;EAAA;AAAA,EAduBb,UAAU;AAkBpCkB,MAAM,CAACC,OAAO,GAAGf,WAAW"},"metadata":{},"sourceType":"script"}