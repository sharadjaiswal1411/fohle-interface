{"ast":null,"code":"import domain from './domain';\nimport range from './range';\nimport align from './align';\nimport base from './base';\nimport clamp from './clamp';\nimport constant from './constant';\nimport exponent from './exponent';\nimport interpolate from './interpolate';\nimport nice from './nice';\nimport padding from './padding';\nimport reverse from './reverse';\nimport round from './round';\nimport unknown from './unknown';\nimport zero from './zero';\n/**\n * List of all operators, in order of execution\n */\n\nexport var ALL_OPERATORS = [\n// domain => nice => zero\n'domain', 'nice', 'zero',\n// interpolate before round\n'interpolate', 'round',\n// set range then reverse\n'range', 'reverse',\n// Order does not matter for these operators\n'align', 'base', 'clamp', 'constant', 'exponent', 'padding', 'unknown'];\n// Use Record to enforce that all keys in OperatorType must exist.\nvar operators = {\n  domain: domain,\n  nice: nice,\n  zero: zero,\n  interpolate: interpolate,\n  round: round,\n  align: align,\n  base: base,\n  clamp: clamp,\n  constant: constant,\n  exponent: exponent,\n  padding: padding,\n  range: range,\n  reverse: reverse,\n  unknown: unknown\n};\nexport default function scaleOperator() {\n  for (var _len = arguments.length, ops = new Array(_len), _key = 0; _key < _len; _key++) {\n    ops[_key] = arguments[_key];\n  }\n  var selection = new Set(ops);\n  var selectedOps = ALL_OPERATORS.filter(function (o) {\n    return selection.has(o);\n  });\n  return function applyOperators(scale, config) {\n    if (typeof config !== 'undefined') {\n      selectedOps.forEach(function (op) {\n        operators[op](scale, config);\n      });\n    }\n    return scale;\n  };\n}","map":{"version":3,"names":["domain","range","align","base","clamp","constant","exponent","interpolate","nice","padding","reverse","round","unknown","zero","ALL_OPERATORS","operators","scaleOperator","_len","arguments","length","ops","Array","_key","selection","Set","selectedOps","filter","o","has","applyOperators","scale","config","forEach","op"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/@visx/scale/esm/operators/scaleOperator.js"],"sourcesContent":["import domain from './domain';\nimport range from './range';\nimport align from './align';\nimport base from './base';\nimport clamp from './clamp';\nimport constant from './constant';\nimport exponent from './exponent';\nimport interpolate from './interpolate';\nimport nice from './nice';\nimport padding from './padding';\nimport reverse from './reverse';\nimport round from './round';\nimport unknown from './unknown';\nimport zero from './zero';\n/**\n * List of all operators, in order of execution\n */\n\nexport var ALL_OPERATORS = [// domain => nice => zero\n'domain', 'nice', 'zero', // interpolate before round\n'interpolate', 'round', // set range then reverse\n'range', 'reverse', // Order does not matter for these operators\n'align', 'base', 'clamp', 'constant', 'exponent', 'padding', 'unknown'];\n// Use Record to enforce that all keys in OperatorType must exist.\nvar operators = {\n  domain: domain,\n  nice: nice,\n  zero: zero,\n  interpolate: interpolate,\n  round: round,\n  align: align,\n  base: base,\n  clamp: clamp,\n  constant: constant,\n  exponent: exponent,\n  padding: padding,\n  range: range,\n  reverse: reverse,\n  unknown: unknown\n};\nexport default function scaleOperator() {\n  for (var _len = arguments.length, ops = new Array(_len), _key = 0; _key < _len; _key++) {\n    ops[_key] = arguments[_key];\n  }\n\n  var selection = new Set(ops);\n  var selectedOps = ALL_OPERATORS.filter(function (o) {\n    return selection.has(o);\n  });\n  return function applyOperators(scale, config) {\n    if (typeof config !== 'undefined') {\n      selectedOps.forEach(function (op) {\n        operators[op](scale, config);\n      });\n    }\n\n    return scale;\n  };\n}"],"mappings":"AAAA,OAAOA,MAAM,MAAM,UAAU;AAC7B,OAAOC,KAAK,MAAM,SAAS;AAC3B,OAAOC,KAAK,MAAM,SAAS;AAC3B,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAOC,KAAK,MAAM,SAAS;AAC3B,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,KAAK,MAAM,SAAS;AAC3B,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,IAAI,MAAM,QAAQ;AACzB;AACA;AACA;;AAEA,OAAO,IAAIC,aAAa,GAAG;AAAC;AAC5B,QAAQ,EAAE,MAAM,EAAE,MAAM;AAAE;AAC1B,aAAa,EAAE,OAAO;AAAE;AACxB,OAAO,EAAE,SAAS;AAAE;AACpB,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,UAAU,EAAE,UAAU,EAAE,SAAS,EAAE,SAAS,CAAC;AACvE;AACA,IAAIC,SAAS,GAAG;EACdf,MAAM,EAAEA,MAAM;EACdQ,IAAI,EAAEA,IAAI;EACVK,IAAI,EAAEA,IAAI;EACVN,WAAW,EAAEA,WAAW;EACxBI,KAAK,EAAEA,KAAK;EACZT,KAAK,EAAEA,KAAK;EACZC,IAAI,EAAEA,IAAI;EACVC,KAAK,EAAEA,KAAK;EACZC,QAAQ,EAAEA,QAAQ;EAClBC,QAAQ,EAAEA,QAAQ;EAClBG,OAAO,EAAEA,OAAO;EAChBR,KAAK,EAAEA,KAAK;EACZS,OAAO,EAAEA,OAAO;EAChBE,OAAO,EAAEA;AACX,CAAC;AACD,eAAe,SAASI,aAAa,GAAG;EACtC,KAAK,IAAIC,IAAI,GAAGC,SAAS,CAACC,MAAM,EAAEC,GAAG,GAAG,IAAIC,KAAK,CAACJ,IAAI,CAAC,EAAEK,IAAI,GAAG,CAAC,EAAEA,IAAI,GAAGL,IAAI,EAAEK,IAAI,EAAE,EAAE;IACtFF,GAAG,CAACE,IAAI,CAAC,GAAGJ,SAAS,CAACI,IAAI,CAAC;EAC7B;EAEA,IAAIC,SAAS,GAAG,IAAIC,GAAG,CAACJ,GAAG,CAAC;EAC5B,IAAIK,WAAW,GAAGX,aAAa,CAACY,MAAM,CAAC,UAAUC,CAAC,EAAE;IAClD,OAAOJ,SAAS,CAACK,GAAG,CAACD,CAAC,CAAC;EACzB,CAAC,CAAC;EACF,OAAO,SAASE,cAAc,CAACC,KAAK,EAAEC,MAAM,EAAE;IAC5C,IAAI,OAAOA,MAAM,KAAK,WAAW,EAAE;MACjCN,WAAW,CAACO,OAAO,CAAC,UAAUC,EAAE,EAAE;QAChClB,SAAS,CAACkB,EAAE,CAAC,CAACH,KAAK,EAAEC,MAAM,CAAC;MAC9B,CAAC,CAAC;IACJ;IAEA,OAAOD,KAAK;EACd,CAAC;AACH"},"metadata":{},"sourceType":"module"}