{"ast":null,"code":"import{CeloNetworkInfo,PolygonNetworkInfo}from'constants/networks';import{CELO_ADDRESS,MATIC_ADDRESS,WETH_ADDRESSES}from'../constants';export function serializeToken(token){return{chainId:token.chainId,address:token.address,decimals:token.decimals,symbol:token.symbol,name:token.name};}export function formatTokenSymbol(address,symbol,activeNetwork){// dumb catch for matic\nif(address===MATIC_ADDRESS&&activeNetwork===PolygonNetworkInfo){return'MATIC';}// dumb catch for Celo\nif(address===CELO_ADDRESS&&activeNetwork===CeloNetworkInfo){return'CELO';}if(WETH_ADDRESSES.includes(address)){return'ETH';}return symbol;}export function formatTokenName(address,name,activeNetwork){// dumb catch for matic\nif(address===MATIC_ADDRESS&&activeNetwork===PolygonNetworkInfo){return'MATIC';}// dumb catch for Celo\nif(address===CELO_ADDRESS&&activeNetwork===CeloNetworkInfo){return'CELO';}if(WETH_ADDRESSES.includes(address)){return'Ether';}return name;}","map":{"version":3,"names":["CeloNetworkInfo","PolygonNetworkInfo","CELO_ADDRESS","MATIC_ADDRESS","WETH_ADDRESSES","serializeToken","token","chainId","address","decimals","symbol","name","formatTokenSymbol","activeNetwork","includes","formatTokenName"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/utils/tokens.ts"],"sourcesContent":["import { Token } from '@uniswap/sdk-core'\nimport { CeloNetworkInfo, NetworkInfo, PolygonNetworkInfo } from 'constants/networks'\nimport { CELO_ADDRESS, MATIC_ADDRESS, WETH_ADDRESSES } from '../constants'\n\nexport interface SerializedToken {\n  chainId: number\n  address: string\n  decimals: number\n  symbol?: string\n  name?: string\n}\n\nexport function serializeToken(token: Token): SerializedToken {\n  return {\n    chainId: token.chainId,\n    address: token.address,\n    decimals: token.decimals,\n    symbol: token.symbol,\n    name: token.name,\n  }\n}\n\nexport function formatTokenSymbol(address: string, symbol: string, activeNetwork?: NetworkInfo) {\n  // dumb catch for matic\n  if (address === MATIC_ADDRESS && activeNetwork === PolygonNetworkInfo) {\n    return 'MATIC'\n  }\n\n  // dumb catch for Celo\n  if (address === CELO_ADDRESS && activeNetwork === CeloNetworkInfo) {\n    return 'CELO'\n  }\n\n  if (WETH_ADDRESSES.includes(address)) {\n    return 'ETH'\n  }\n  return symbol\n}\n\nexport function formatTokenName(address: string, name: string, activeNetwork?: NetworkInfo) {\n  // dumb catch for matic\n  if (address === MATIC_ADDRESS && activeNetwork === PolygonNetworkInfo) {\n    return 'MATIC'\n  }\n\n  // dumb catch for Celo\n  if (address === CELO_ADDRESS && activeNetwork === CeloNetworkInfo) {\n    return 'CELO'\n  }\n\n  if (WETH_ADDRESSES.includes(address)) {\n    return 'Ether'\n  }\n  return name\n}"],"mappings":"AACA,OAASA,eAAe,CAAeC,kBAAkB,KAAQ,oBAAoB,CACrF,OAASC,YAAY,CAAEC,aAAa,CAAEC,cAAc,KAAQ,cAAc,CAU1E,MAAO,SAASC,eAAc,CAACC,KAAY,CAAmB,CAC5D,MAAO,CACLC,OAAO,CAAED,KAAK,CAACC,OAAO,CACtBC,OAAO,CAAEF,KAAK,CAACE,OAAO,CACtBC,QAAQ,CAAEH,KAAK,CAACG,QAAQ,CACxBC,MAAM,CAAEJ,KAAK,CAACI,MAAM,CACpBC,IAAI,CAAEL,KAAK,CAACK,IACd,CAAC,CACH,CAEA,MAAO,SAASC,kBAAiB,CAACJ,OAAe,CAAEE,MAAc,CAAEG,aAA2B,CAAE,CAC9F;AACA,GAAIL,OAAO,GAAKL,aAAa,EAAIU,aAAa,GAAKZ,kBAAkB,CAAE,CACrE,MAAO,OAAO,CAChB,CAEA;AACA,GAAIO,OAAO,GAAKN,YAAY,EAAIW,aAAa,GAAKb,eAAe,CAAE,CACjE,MAAO,MAAM,CACf,CAEA,GAAII,cAAc,CAACU,QAAQ,CAACN,OAAO,CAAC,CAAE,CACpC,MAAO,KAAK,CACd,CACA,MAAOE,OAAM,CACf,CAEA,MAAO,SAASK,gBAAe,CAACP,OAAe,CAAEG,IAAY,CAAEE,aAA2B,CAAE,CAC1F;AACA,GAAIL,OAAO,GAAKL,aAAa,EAAIU,aAAa,GAAKZ,kBAAkB,CAAE,CACrE,MAAO,OAAO,CAChB,CAEA;AACA,GAAIO,OAAO,GAAKN,YAAY,EAAIW,aAAa,GAAKb,eAAe,CAAE,CACjE,MAAO,MAAM,CACf,CAEA,GAAII,cAAc,CAACU,QAAQ,CAACN,OAAO,CAAC,CAAE,CACpC,MAAO,OAAO,CAChB,CACA,MAAOG,KAAI,CACb"},"metadata":{},"sourceType":"module"}