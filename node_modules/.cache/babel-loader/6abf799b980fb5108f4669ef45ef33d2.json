{"ast":null,"code":"import _slicedToArray from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _toConsumableArray from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _createForOfIteratorHelper from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _objectSpread from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _asyncToGenerator from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _baseTokensByChain;\nimport { Protocol } from '@uniswap/router-sdk';\nimport { TradeType } from '@uniswap/sdk-core';\nimport { FeeAmount } from '@uniswap/v3-sdk';\nimport _ from 'lodash';\nimport { CELO, CELO_ALFAJORES, CEUR_CELO, CEUR_CELO_ALFAJORES, CUSD_CELO, CUSD_CELO_ALFAJORES, DAI_ARBITRUM, DAI_ARBITRUM_RINKEBY, DAI_MAINNET, DAI_MOONBEAM, DAI_OPTIMISM, DAI_OPTIMISTIC_KOVAN, DAI_POLYGON_MUMBAI, DAI_RINKEBY_1, DAI_RINKEBY_2, FEI_MAINNET, USDC_ARBITRUM, USDC_ETHEREUM_GNOSIS, USDC_MAINNET, USDC_MOONBEAM, USDC_OPTIMISM, USDC_OPTIMISTIC_KOVAN, USDC_POLYGON, USDT_ARBITRUM, USDT_ARBITRUM_RINKEBY, USDT_MAINNET, USDT_OPTIMISM, USDT_OPTIMISTIC_KOVAN, WBTC_ARBITRUM, WBTC_GNOSIS, WBTC_MAINNET, WBTC_MOONBEAM, WBTC_OPTIMISM, WBTC_OPTIMISTIC_KOVAN, WGLMR_MOONBEAM, WMATIC_POLYGON, WMATIC_POLYGON_MUMBAI, WXDAI_GNOSIS } from '../../../providers/token-provider';\nimport { ChainId, WRAPPED_NATIVE_CURRENCY } from '../../../util';\nimport { parseFeeAmount, unparseFeeAmount } from '../../../util/amounts';\nimport { log } from '../../../util/log';\nimport { metric, MetricLoggerUnit } from '../../../util/metric';\nvar baseTokensByChain = (_baseTokensByChain = {}, _defineProperty(_baseTokensByChain, ChainId.MAINNET, [USDC_MAINNET, USDT_MAINNET, WBTC_MAINNET, DAI_MAINNET, WRAPPED_NATIVE_CURRENCY[1], FEI_MAINNET]), _defineProperty(_baseTokensByChain, ChainId.RINKEBY, [DAI_RINKEBY_1, DAI_RINKEBY_2]), _defineProperty(_baseTokensByChain, ChainId.OPTIMISM, [DAI_OPTIMISM, USDC_OPTIMISM, USDT_OPTIMISM, WBTC_OPTIMISM]), _defineProperty(_baseTokensByChain, ChainId.OPTIMISTIC_KOVAN, [DAI_OPTIMISTIC_KOVAN, USDC_OPTIMISTIC_KOVAN, WBTC_OPTIMISTIC_KOVAN, USDT_OPTIMISTIC_KOVAN]), _defineProperty(_baseTokensByChain, ChainId.ARBITRUM_ONE, [DAI_ARBITRUM, USDC_ARBITRUM, WBTC_ARBITRUM, USDT_ARBITRUM]), _defineProperty(_baseTokensByChain, ChainId.ARBITRUM_RINKEBY, [DAI_ARBITRUM_RINKEBY, USDT_ARBITRUM_RINKEBY]), _defineProperty(_baseTokensByChain, ChainId.POLYGON, [USDC_POLYGON, WMATIC_POLYGON]), _defineProperty(_baseTokensByChain, ChainId.POLYGON_MUMBAI, [DAI_POLYGON_MUMBAI, WMATIC_POLYGON_MUMBAI]), _defineProperty(_baseTokensByChain, ChainId.CELO, [CUSD_CELO, CEUR_CELO, CELO]), _defineProperty(_baseTokensByChain, ChainId.CELO_ALFAJORES, [CUSD_CELO_ALFAJORES, CEUR_CELO_ALFAJORES, CELO_ALFAJORES]), _defineProperty(_baseTokensByChain, ChainId.GNOSIS, [WBTC_GNOSIS, WXDAI_GNOSIS, USDC_ETHEREUM_GNOSIS]), _defineProperty(_baseTokensByChain, ChainId.MOONBEAM, [DAI_MOONBEAM, USDC_MOONBEAM, WBTC_MOONBEAM, WGLMR_MOONBEAM]), _baseTokensByChain);\nexport function getV3CandidatePools(_x) {\n  return _getV3CandidatePools.apply(this, arguments);\n}\nfunction _getV3CandidatePools() {\n  _getV3CandidatePools = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n    var tokenIn, tokenOut, routeType, routingConfig, subgraphProvider, tokenProvider, poolProvider, blockedTokenListProvider, chainId, _a, _b, _c, _d, _e, blockNumber, _routingConfig$v3Pool, topN, topNDirectSwaps, topNTokenInOut, topNSecondHop, topNWithEachBaseToken, topNWithBaseToken, tokenInAddress, tokenOutAddress, beforeSubgraphPools, allPoolsRaw, allPools, filteredPools, _iterator, _step, pool, token0InBlocklist, token1InBlocklist, subgraphPoolsSorted, poolAddressesSoFar, addToAddressSet, baseTokens, topByBaseWithTokenIn, topByBaseWithTokenOut, top2DirectSwapPool, wrappedNativeAddress, top2EthQuoteTokenPool, topByTVL, topByTVLUsingTokenIn, topByTVLUsingTokenOut, topByTVLUsingTokenInSecondHops, topByTVLUsingTokenOutSecondHops, subgraphPools, tokenAddresses, tokenAccessor, printV3SubgraphPool, tokenPairsRaw, tokenPairs, beforePoolsLoad, poolAccessor, poolsBySelection;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            tokenIn = _ref.tokenIn, tokenOut = _ref.tokenOut, routeType = _ref.routeType, routingConfig = _ref.routingConfig, subgraphProvider = _ref.subgraphProvider, tokenProvider = _ref.tokenProvider, poolProvider = _ref.poolProvider, blockedTokenListProvider = _ref.blockedTokenListProvider, chainId = _ref.chainId;\n            blockNumber = routingConfig.blockNumber, _routingConfig$v3Pool = routingConfig.v3PoolSelection, topN = _routingConfig$v3Pool.topN, topNDirectSwaps = _routingConfig$v3Pool.topNDirectSwaps, topNTokenInOut = _routingConfig$v3Pool.topNTokenInOut, topNSecondHop = _routingConfig$v3Pool.topNSecondHop, topNWithEachBaseToken = _routingConfig$v3Pool.topNWithEachBaseToken, topNWithBaseToken = _routingConfig$v3Pool.topNWithBaseToken;\n            tokenInAddress = tokenIn.address.toLowerCase();\n            tokenOutAddress = tokenOut.address.toLowerCase();\n            beforeSubgraphPools = Date.now();\n            _context.next = 7;\n            return subgraphProvider.getPools(tokenIn, tokenOut, {\n              blockNumber: blockNumber\n            });\n          case 7:\n            allPoolsRaw = _context.sent;\n            log.info({\n              samplePools: allPoolsRaw.slice(0, 3)\n            }, 'Got all pools from V3 subgraph provider');\n            allPools = _.map(allPoolsRaw, function (pool) {\n              return _objectSpread(_objectSpread({}, pool), {}, {\n                token0: _objectSpread(_objectSpread({}, pool.token0), {}, {\n                  id: pool.token0.id.toLowerCase()\n                }),\n                token1: _objectSpread(_objectSpread({}, pool.token1), {}, {\n                  id: pool.token1.id.toLowerCase()\n                })\n              });\n            });\n            metric.putMetric('V3SubgraphPoolsLoad', Date.now() - beforeSubgraphPools, MetricLoggerUnit.Milliseconds);\n            // Only consider pools where neither tokens are in the blocked token list.\n            filteredPools = allPools;\n            if (!blockedTokenListProvider) {\n              _context.next = 38;\n              break;\n            }\n            filteredPools = [];\n            _iterator = _createForOfIteratorHelper(allPools);\n            _context.prev = 15;\n            _iterator.s();\n          case 17:\n            if ((_step = _iterator.n()).done) {\n              _context.next = 30;\n              break;\n            }\n            pool = _step.value;\n            _context.next = 21;\n            return blockedTokenListProvider.getTokenByAddress(pool.token0.id);\n          case 21:\n            token0InBlocklist = _context.sent;\n            _context.next = 24;\n            return blockedTokenListProvider.getTokenByAddress(pool.token1.id);\n          case 24:\n            token1InBlocklist = _context.sent;\n            if (!(token0InBlocklist || token1InBlocklist)) {\n              _context.next = 27;\n              break;\n            }\n            return _context.abrupt(\"continue\", 28);\n          case 27:\n            filteredPools.push(pool);\n          case 28:\n            _context.next = 17;\n            break;\n          case 30:\n            _context.next = 35;\n            break;\n          case 32:\n            _context.prev = 32;\n            _context.t0 = _context[\"catch\"](15);\n            _iterator.e(_context.t0);\n          case 35:\n            _context.prev = 35;\n            _iterator.f();\n            return _context.finish(35);\n          case 38:\n            subgraphPoolsSorted = _(filteredPools).sortBy(function (tokenListPool) {\n              return -tokenListPool.tvlUSD;\n            }).value();\n            log.info(\"After filtering blocked tokens went from \".concat(allPools.length, \" to \").concat(subgraphPoolsSorted.length, \".\"));\n            poolAddressesSoFar = new Set();\n            addToAddressSet = function addToAddressSet(pools) {\n              _(pools).map(function (pool) {\n                return pool.id;\n              }).forEach(function (poolAddress) {\n                return poolAddressesSoFar.add(poolAddress);\n              });\n            };\n            baseTokens = (_a = baseTokensByChain[chainId]) !== null && _a !== void 0 ? _a : [];\n            topByBaseWithTokenIn = _(baseTokens).flatMap(function (token) {\n              return _(subgraphPoolsSorted).filter(function (subgraphPool) {\n                var tokenAddress = token.address.toLowerCase();\n                return subgraphPool.token0.id == tokenAddress && subgraphPool.token1.id == tokenInAddress || subgraphPool.token1.id == tokenAddress && subgraphPool.token0.id == tokenInAddress;\n              }).sortBy(function (tokenListPool) {\n                return -tokenListPool.tvlUSD;\n              }).slice(0, topNWithEachBaseToken).value();\n            }).sortBy(function (tokenListPool) {\n              return -tokenListPool.tvlUSD;\n            }).slice(0, topNWithBaseToken).value();\n            topByBaseWithTokenOut = _(baseTokens).flatMap(function (token) {\n              return _(subgraphPoolsSorted).filter(function (subgraphPool) {\n                var tokenAddress = token.address.toLowerCase();\n                return subgraphPool.token0.id == tokenAddress && subgraphPool.token1.id == tokenOutAddress || subgraphPool.token1.id == tokenAddress && subgraphPool.token0.id == tokenOutAddress;\n              }).sortBy(function (tokenListPool) {\n                return -tokenListPool.tvlUSD;\n              }).slice(0, topNWithEachBaseToken).value();\n            }).sortBy(function (tokenListPool) {\n              return -tokenListPool.tvlUSD;\n            }).slice(0, topNWithBaseToken).value();\n            top2DirectSwapPool = _(subgraphPoolsSorted).filter(function (subgraphPool) {\n              return !poolAddressesSoFar.has(subgraphPool.id) && (subgraphPool.token0.id == tokenInAddress && subgraphPool.token1.id == tokenOutAddress || subgraphPool.token1.id == tokenInAddress && subgraphPool.token0.id == tokenOutAddress);\n            }).slice(0, topNDirectSwaps).value();\n            if (top2DirectSwapPool.length == 0 && topNDirectSwaps > 0) {\n              // If we requested direct swap pools but did not find any in the subgraph query.\n              // Optimistically add them into the query regardless. Invalid pools ones will be dropped anyway\n              // when we query the pool on-chain. Ensures that new pools for new pairs can be swapped on immediately.\n              top2DirectSwapPool = _.map([FeeAmount.HIGH, FeeAmount.MEDIUM, FeeAmount.LOW, FeeAmount.LOWEST], function (feeAmount) {\n                var _poolProvider$getPool = poolProvider.getPoolAddress(tokenIn, tokenOut, feeAmount),\n                  token0 = _poolProvider$getPool.token0,\n                  token1 = _poolProvider$getPool.token1,\n                  poolAddress = _poolProvider$getPool.poolAddress;\n                return {\n                  id: poolAddress,\n                  feeTier: unparseFeeAmount(feeAmount),\n                  liquidity: '10000',\n                  token0: {\n                    id: token0.address\n                  },\n                  token1: {\n                    id: token1.address\n                  },\n                  tvlETH: 10000,\n                  tvlUSD: 10000\n                };\n              });\n            }\n            addToAddressSet(top2DirectSwapPool);\n            wrappedNativeAddress = (_b = WRAPPED_NATIVE_CURRENCY[chainId]) === null || _b === void 0 ? void 0 : _b.address; // Main reason we need this is for gas estimates, only needed if token out is not native.\n            // We don't check the seen address set because if we've already added pools for getting native quotes\n            // theres no need to add more.\n            top2EthQuoteTokenPool = [];\n            if (((_c = WRAPPED_NATIVE_CURRENCY[chainId]) === null || _c === void 0 ? void 0 : _c.symbol) == ((_d = WRAPPED_NATIVE_CURRENCY[ChainId.MAINNET]) === null || _d === void 0 ? void 0 : _d.symbol) && tokenOut.symbol != 'WETH' && tokenOut.symbol != 'WETH9' && tokenOut.symbol != 'ETH' || ((_e = WRAPPED_NATIVE_CURRENCY[chainId]) === null || _e === void 0 ? void 0 : _e.symbol) == WMATIC_POLYGON.symbol && tokenOut.symbol != 'MATIC' && tokenOut.symbol != 'WMATIC') {\n              top2EthQuoteTokenPool = _(subgraphPoolsSorted).filter(function (subgraphPool) {\n                if (routeType == TradeType.EXACT_INPUT) {\n                  return subgraphPool.token0.id == wrappedNativeAddress && subgraphPool.token1.id == tokenOutAddress || subgraphPool.token1.id == wrappedNativeAddress && subgraphPool.token0.id == tokenOutAddress;\n                } else {\n                  return subgraphPool.token0.id == wrappedNativeAddress && subgraphPool.token1.id == tokenInAddress || subgraphPool.token1.id == wrappedNativeAddress && subgraphPool.token0.id == tokenInAddress;\n                }\n              }).slice(0, 1).value();\n            }\n            addToAddressSet(top2EthQuoteTokenPool);\n            topByTVL = _(subgraphPoolsSorted).filter(function (subgraphPool) {\n              return !poolAddressesSoFar.has(subgraphPool.id);\n            }).slice(0, topN).value();\n            addToAddressSet(topByTVL);\n            topByTVLUsingTokenIn = _(subgraphPoolsSorted).filter(function (subgraphPool) {\n              return !poolAddressesSoFar.has(subgraphPool.id) && (subgraphPool.token0.id == tokenInAddress || subgraphPool.token1.id == tokenInAddress);\n            }).slice(0, topNTokenInOut).value();\n            addToAddressSet(topByTVLUsingTokenIn);\n            topByTVLUsingTokenOut = _(subgraphPoolsSorted).filter(function (subgraphPool) {\n              return !poolAddressesSoFar.has(subgraphPool.id) && (subgraphPool.token0.id == tokenOutAddress || subgraphPool.token1.id == tokenOutAddress);\n            }).slice(0, topNTokenInOut).value();\n            addToAddressSet(topByTVLUsingTokenOut);\n            topByTVLUsingTokenInSecondHops = _(topByTVLUsingTokenIn).map(function (subgraphPool) {\n              return tokenInAddress == subgraphPool.token0.id ? subgraphPool.token1.id : subgraphPool.token0.id;\n            }).flatMap(function (secondHopId) {\n              return _(subgraphPoolsSorted).filter(function (subgraphPool) {\n                return !poolAddressesSoFar.has(subgraphPool.id) && (subgraphPool.token0.id == secondHopId || subgraphPool.token1.id == secondHopId);\n              }).slice(0, topNSecondHop).value();\n            }).uniqBy(function (pool) {\n              return pool.id;\n            }).sortBy(function (tokenListPool) {\n              return -tokenListPool.tvlUSD;\n            }).slice(0, topNSecondHop).value();\n            addToAddressSet(topByTVLUsingTokenInSecondHops);\n            topByTVLUsingTokenOutSecondHops = _(topByTVLUsingTokenOut).map(function (subgraphPool) {\n              return tokenOutAddress == subgraphPool.token0.id ? subgraphPool.token1.id : subgraphPool.token0.id;\n            }).flatMap(function (secondHopId) {\n              return _(subgraphPoolsSorted).filter(function (subgraphPool) {\n                return !poolAddressesSoFar.has(subgraphPool.id) && (subgraphPool.token0.id == secondHopId || subgraphPool.token1.id == secondHopId);\n              }).slice(0, topNSecondHop).value();\n            }).uniqBy(function (pool) {\n              return pool.id;\n            }).sortBy(function (tokenListPool) {\n              return -tokenListPool.tvlUSD;\n            }).slice(0, topNSecondHop).value();\n            addToAddressSet(topByTVLUsingTokenOutSecondHops);\n            subgraphPools = _([].concat(_toConsumableArray(topByBaseWithTokenIn), _toConsumableArray(topByBaseWithTokenOut), _toConsumableArray(top2DirectSwapPool), _toConsumableArray(top2EthQuoteTokenPool), _toConsumableArray(topByTVL), _toConsumableArray(topByTVLUsingTokenIn), _toConsumableArray(topByTVLUsingTokenOut), _toConsumableArray(topByTVLUsingTokenInSecondHops), _toConsumableArray(topByTVLUsingTokenOutSecondHops))).compact().uniqBy(function (pool) {\n              return pool.id;\n            }).value();\n            tokenAddresses = _(subgraphPools).flatMap(function (subgraphPool) {\n              return [subgraphPool.token0.id, subgraphPool.token1.id];\n            }).compact().uniq().value();\n            log.info(\"Getting the \".concat(tokenAddresses.length, \" tokens within the \").concat(subgraphPools.length, \" V3 pools we are considering\"));\n            _context.next = 67;\n            return tokenProvider.getTokens(tokenAddresses, {\n              blockNumber: blockNumber\n            });\n          case 67:\n            tokenAccessor = _context.sent;\n            printV3SubgraphPool = function printV3SubgraphPool(s) {\n              var _a, _b, _c, _d;\n              return \"\".concat((_b = (_a = tokenAccessor.getTokenByAddress(s.token0.id)) === null || _a === void 0 ? void 0 : _a.symbol) !== null && _b !== void 0 ? _b : s.token0.id, \"/\").concat((_d = (_c = tokenAccessor.getTokenByAddress(s.token1.id)) === null || _c === void 0 ? void 0 : _c.symbol) !== null && _d !== void 0 ? _d : s.token1.id, \"/\").concat(s.feeTier);\n            };\n            log.info({\n              topByBaseWithTokenIn: topByBaseWithTokenIn.map(printV3SubgraphPool),\n              topByBaseWithTokenOut: topByBaseWithTokenOut.map(printV3SubgraphPool),\n              topByTVL: topByTVL.map(printV3SubgraphPool),\n              topByTVLUsingTokenIn: topByTVLUsingTokenIn.map(printV3SubgraphPool),\n              topByTVLUsingTokenOut: topByTVLUsingTokenOut.map(printV3SubgraphPool),\n              topByTVLUsingTokenInSecondHops: topByTVLUsingTokenInSecondHops.map(printV3SubgraphPool),\n              topByTVLUsingTokenOutSecondHops: topByTVLUsingTokenOutSecondHops.map(printV3SubgraphPool),\n              top2DirectSwap: top2DirectSwapPool.map(printV3SubgraphPool),\n              top2EthQuotePool: top2EthQuoteTokenPool.map(printV3SubgraphPool)\n            }, \"V3 Candidate Pools\");\n            tokenPairsRaw = _.map(subgraphPools, function (subgraphPool) {\n              var tokenA = tokenAccessor.getTokenByAddress(subgraphPool.token0.id);\n              var tokenB = tokenAccessor.getTokenByAddress(subgraphPool.token1.id);\n              var fee;\n              try {\n                fee = parseFeeAmount(subgraphPool.feeTier);\n              } catch (err) {\n                log.info({\n                  subgraphPool: subgraphPool\n                }, \"Dropping candidate pool for \".concat(subgraphPool.token0.id, \"/\").concat(subgraphPool.token1.id, \"/\").concat(subgraphPool.feeTier, \" because fee tier not supported\"));\n                return undefined;\n              }\n              if (!tokenA || !tokenB) {\n                log.info(\"Dropping candidate pool for \".concat(subgraphPool.token0.id, \"/\").concat(subgraphPool.token1.id, \"/\").concat(fee, \" because \").concat(tokenA ? subgraphPool.token1.id : subgraphPool.token0.id, \" not found by token provider\"));\n                return undefined;\n              }\n              return [tokenA, tokenB, fee];\n            });\n            tokenPairs = _.compact(tokenPairsRaw);\n            beforePoolsLoad = Date.now();\n            _context.next = 75;\n            return poolProvider.getPools(tokenPairs);\n          case 75:\n            poolAccessor = _context.sent;\n            metric.putMetric('V3PoolsLoad', Date.now() - beforePoolsLoad, MetricLoggerUnit.Milliseconds);\n            poolsBySelection = {\n              protocol: Protocol.V3,\n              selections: {\n                topByBaseWithTokenIn: topByBaseWithTokenIn,\n                topByBaseWithTokenOut: topByBaseWithTokenOut,\n                topByDirectSwapPool: top2DirectSwapPool,\n                topByEthQuoteTokenPool: top2EthQuoteTokenPool,\n                topByTVL: topByTVL,\n                topByTVLUsingTokenIn: topByTVLUsingTokenIn,\n                topByTVLUsingTokenOut: topByTVLUsingTokenOut,\n                topByTVLUsingTokenInSecondHops: topByTVLUsingTokenInSecondHops,\n                topByTVLUsingTokenOutSecondHops: topByTVLUsingTokenOutSecondHops\n              }\n            };\n            return _context.abrupt(\"return\", {\n              poolAccessor: poolAccessor,\n              candidatePools: poolsBySelection,\n              subgraphPools: subgraphPools\n            });\n          case 79:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[15, 32, 35, 38]]);\n  }));\n  return _getV3CandidatePools.apply(this, arguments);\n}\nexport function getV2CandidatePools(_x2) {\n  return _getV2CandidatePools.apply(this, arguments);\n}\nfunction _getV2CandidatePools() {\n  _getV2CandidatePools = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref2) {\n    var tokenIn, tokenOut, routeType, routingConfig, subgraphProvider, tokenProvider, poolProvider, blockedTokenListProvider, chainId, _a, blockNumber, _routingConfig$v2Pool, topN, topNDirectSwaps, topNTokenInOut, topNSecondHop, topNWithEachBaseToken, topNWithBaseToken, tokenInAddress, tokenOutAddress, beforeSubgraphPools, allPoolsRaw, allPools, filteredPools, _iterator2, _step2, pool, token0InBlocklist, token1InBlocklist, subgraphPoolsSorted, poolAddressesSoFar, addToAddressSet, baseTokens, topByBaseWithTokenIn, topByBaseWithTokenOut, topByDirectSwapPool, _poolProvider$getPool2, token0, token1, poolAddress, wethAddress, topByEthQuoteTokenPool, topByTVL, topByTVLUsingTokenIn, topByTVLUsingTokenOut, topByTVLUsingTokenInSecondHops, topByTVLUsingTokenOutSecondHops, subgraphPools, tokenAddresses, tokenAccessor, printV2SubgraphPool, tokenPairsRaw, tokenPairs, beforePoolsLoad, poolAccessor, poolsBySelection;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            tokenIn = _ref2.tokenIn, tokenOut = _ref2.tokenOut, routeType = _ref2.routeType, routingConfig = _ref2.routingConfig, subgraphProvider = _ref2.subgraphProvider, tokenProvider = _ref2.tokenProvider, poolProvider = _ref2.poolProvider, blockedTokenListProvider = _ref2.blockedTokenListProvider, chainId = _ref2.chainId;\n            blockNumber = routingConfig.blockNumber, _routingConfig$v2Pool = routingConfig.v2PoolSelection, topN = _routingConfig$v2Pool.topN, topNDirectSwaps = _routingConfig$v2Pool.topNDirectSwaps, topNTokenInOut = _routingConfig$v2Pool.topNTokenInOut, topNSecondHop = _routingConfig$v2Pool.topNSecondHop, topNWithEachBaseToken = _routingConfig$v2Pool.topNWithEachBaseToken, topNWithBaseToken = _routingConfig$v2Pool.topNWithBaseToken;\n            tokenInAddress = tokenIn.address.toLowerCase();\n            tokenOutAddress = tokenOut.address.toLowerCase();\n            beforeSubgraphPools = Date.now();\n            _context2.next = 7;\n            return subgraphProvider.getPools(tokenIn, tokenOut, {\n              blockNumber: blockNumber\n            });\n          case 7:\n            allPoolsRaw = _context2.sent;\n            allPools = _.map(allPoolsRaw, function (pool) {\n              return _objectSpread(_objectSpread({}, pool), {}, {\n                token0: _objectSpread(_objectSpread({}, pool.token0), {}, {\n                  id: pool.token0.id.toLowerCase()\n                }),\n                token1: _objectSpread(_objectSpread({}, pool.token1), {}, {\n                  id: pool.token1.id.toLowerCase()\n                })\n              });\n            });\n            metric.putMetric('V2SubgraphPoolsLoad', Date.now() - beforeSubgraphPools, MetricLoggerUnit.Milliseconds);\n            // Only consider pools where neither tokens are in the blocked token list.\n            filteredPools = allPools;\n            if (!blockedTokenListProvider) {\n              _context2.next = 37;\n              break;\n            }\n            filteredPools = [];\n            _iterator2 = _createForOfIteratorHelper(allPools);\n            _context2.prev = 14;\n            _iterator2.s();\n          case 16:\n            if ((_step2 = _iterator2.n()).done) {\n              _context2.next = 29;\n              break;\n            }\n            pool = _step2.value;\n            _context2.next = 20;\n            return blockedTokenListProvider.getTokenByAddress(pool.token0.id);\n          case 20:\n            token0InBlocklist = _context2.sent;\n            _context2.next = 23;\n            return blockedTokenListProvider.getTokenByAddress(pool.token1.id);\n          case 23:\n            token1InBlocklist = _context2.sent;\n            if (!(token0InBlocklist || token1InBlocklist)) {\n              _context2.next = 26;\n              break;\n            }\n            return _context2.abrupt(\"continue\", 27);\n          case 26:\n            filteredPools.push(pool);\n          case 27:\n            _context2.next = 16;\n            break;\n          case 29:\n            _context2.next = 34;\n            break;\n          case 31:\n            _context2.prev = 31;\n            _context2.t0 = _context2[\"catch\"](14);\n            _iterator2.e(_context2.t0);\n          case 34:\n            _context2.prev = 34;\n            _iterator2.f();\n            return _context2.finish(34);\n          case 37:\n            subgraphPoolsSorted = _(filteredPools).sortBy(function (tokenListPool) {\n              return -tokenListPool.reserve;\n            }).value();\n            log.info(\"After filtering blocked tokens went from \".concat(allPools.length, \" to \").concat(subgraphPoolsSorted.length, \".\"));\n            poolAddressesSoFar = new Set();\n            addToAddressSet = function addToAddressSet(pools) {\n              _(pools).map(function (pool) {\n                return pool.id;\n              }).forEach(function (poolAddress) {\n                return poolAddressesSoFar.add(poolAddress);\n              });\n            };\n            baseTokens = (_a = baseTokensByChain[chainId]) !== null && _a !== void 0 ? _a : [];\n            topByBaseWithTokenIn = _(baseTokens).flatMap(function (token) {\n              return _(subgraphPoolsSorted).filter(function (subgraphPool) {\n                var tokenAddress = token.address.toLowerCase();\n                return subgraphPool.token0.id == tokenAddress && subgraphPool.token1.id == tokenInAddress || subgraphPool.token1.id == tokenAddress && subgraphPool.token0.id == tokenInAddress;\n              }).sortBy(function (tokenListPool) {\n                return -tokenListPool.reserve;\n              }).slice(0, topNWithEachBaseToken).value();\n            }).sortBy(function (tokenListPool) {\n              return -tokenListPool.reserve;\n            }).slice(0, topNWithBaseToken).value();\n            topByBaseWithTokenOut = _(baseTokens).flatMap(function (token) {\n              return _(subgraphPoolsSorted).filter(function (subgraphPool) {\n                var tokenAddress = token.address.toLowerCase();\n                return subgraphPool.token0.id == tokenAddress && subgraphPool.token1.id == tokenOutAddress || subgraphPool.token1.id == tokenAddress && subgraphPool.token0.id == tokenOutAddress;\n              }).sortBy(function (tokenListPool) {\n                return -tokenListPool.reserve;\n              }).slice(0, topNWithEachBaseToken).value();\n            }).sortBy(function (tokenListPool) {\n              return -tokenListPool.reserve;\n            }).slice(0, topNWithBaseToken).value(); // Always add the direct swap pool into the mix regardless of if it exists in the subgraph pool list.\n            // Ensures that new pools can be swapped on immediately, and that if a pool was filtered out of the\n            // subgraph query for some reason (e.g. trackedReserveETH was 0), then we still consider it.\n            topByDirectSwapPool = [];\n            if (topNDirectSwaps != 0) {\n              _poolProvider$getPool2 = poolProvider.getPoolAddress(tokenIn, tokenOut), token0 = _poolProvider$getPool2.token0, token1 = _poolProvider$getPool2.token1, poolAddress = _poolProvider$getPool2.poolAddress;\n              topByDirectSwapPool = [{\n                id: poolAddress,\n                token0: {\n                  id: token0.address\n                },\n                token1: {\n                  id: token1.address\n                },\n                supply: 10000,\n                reserve: 10000,\n                reserveUSD: 10000 // Not used. Set to arbitrary number.\n              }];\n            }\n\n            addToAddressSet(topByDirectSwapPool);\n            wethAddress = WRAPPED_NATIVE_CURRENCY[chainId].address; // Main reason we need this is for gas estimates, only needed if token out is not ETH.\n            // We don't check the seen address set because if we've already added pools for getting ETH quotes\n            // theres no need to add more.\n            // Note: we do not need to check other native currencies for the V2 Protocol\n            topByEthQuoteTokenPool = [];\n            if (tokenOut.symbol != 'WETH' && tokenOut.symbol != 'WETH9' && tokenOut.symbol != 'ETH') {\n              topByEthQuoteTokenPool = _(subgraphPoolsSorted).filter(function (subgraphPool) {\n                if (routeType == TradeType.EXACT_INPUT) {\n                  return subgraphPool.token0.id == wethAddress && subgraphPool.token1.id == tokenOutAddress || subgraphPool.token1.id == wethAddress && subgraphPool.token0.id == tokenOutAddress;\n                } else {\n                  return subgraphPool.token0.id == wethAddress && subgraphPool.token1.id == tokenInAddress || subgraphPool.token1.id == wethAddress && subgraphPool.token0.id == tokenInAddress;\n                }\n              }).slice(0, 1).value();\n            }\n            addToAddressSet(topByEthQuoteTokenPool);\n            topByTVL = _(subgraphPoolsSorted).filter(function (subgraphPool) {\n              return !poolAddressesSoFar.has(subgraphPool.id);\n            }).slice(0, topN).value();\n            addToAddressSet(topByTVL);\n            topByTVLUsingTokenIn = _(subgraphPoolsSorted).filter(function (subgraphPool) {\n              return !poolAddressesSoFar.has(subgraphPool.id) && (subgraphPool.token0.id == tokenInAddress || subgraphPool.token1.id == tokenInAddress);\n            }).slice(0, topNTokenInOut).value();\n            addToAddressSet(topByTVLUsingTokenIn);\n            topByTVLUsingTokenOut = _(subgraphPoolsSorted).filter(function (subgraphPool) {\n              return !poolAddressesSoFar.has(subgraphPool.id) && (subgraphPool.token0.id == tokenOutAddress || subgraphPool.token1.id == tokenOutAddress);\n            }).slice(0, topNTokenInOut).value();\n            addToAddressSet(topByTVLUsingTokenOut);\n            topByTVLUsingTokenInSecondHops = _(topByTVLUsingTokenIn).map(function (subgraphPool) {\n              return tokenInAddress == subgraphPool.token0.id ? subgraphPool.token1.id : subgraphPool.token0.id;\n            }).flatMap(function (secondHopId) {\n              return _(subgraphPoolsSorted).filter(function (subgraphPool) {\n                return !poolAddressesSoFar.has(subgraphPool.id) && (subgraphPool.token0.id == secondHopId || subgraphPool.token1.id == secondHopId);\n              }).slice(0, topNSecondHop).value();\n            }).uniqBy(function (pool) {\n              return pool.id;\n            }).sortBy(function (tokenListPool) {\n              return -tokenListPool.reserve;\n            }).slice(0, topNSecondHop).value();\n            addToAddressSet(topByTVLUsingTokenInSecondHops);\n            topByTVLUsingTokenOutSecondHops = _(topByTVLUsingTokenOut).map(function (subgraphPool) {\n              return tokenOutAddress == subgraphPool.token0.id ? subgraphPool.token1.id : subgraphPool.token0.id;\n            }).flatMap(function (secondHopId) {\n              return _(subgraphPoolsSorted).filter(function (subgraphPool) {\n                return !poolAddressesSoFar.has(subgraphPool.id) && (subgraphPool.token0.id == secondHopId || subgraphPool.token1.id == secondHopId);\n              }).slice(0, topNSecondHop).value();\n            }).uniqBy(function (pool) {\n              return pool.id;\n            }).sortBy(function (tokenListPool) {\n              return -tokenListPool.reserve;\n            }).slice(0, topNSecondHop).value();\n            addToAddressSet(topByTVLUsingTokenOutSecondHops);\n            subgraphPools = _([].concat(_toConsumableArray(topByBaseWithTokenIn), _toConsumableArray(topByBaseWithTokenOut), _toConsumableArray(topByDirectSwapPool), _toConsumableArray(topByEthQuoteTokenPool), _toConsumableArray(topByTVL), _toConsumableArray(topByTVLUsingTokenIn), _toConsumableArray(topByTVLUsingTokenOut), _toConsumableArray(topByTVLUsingTokenInSecondHops), _toConsumableArray(topByTVLUsingTokenOutSecondHops))).compact().uniqBy(function (pool) {\n              return pool.id;\n            }).value();\n            tokenAddresses = _(subgraphPools).flatMap(function (subgraphPool) {\n              return [subgraphPool.token0.id, subgraphPool.token1.id];\n            }).compact().uniq().value();\n            log.info(\"Getting the \".concat(tokenAddresses.length, \" tokens within the \").concat(subgraphPools.length, \" V2 pools we are considering\"));\n            _context2.next = 66;\n            return tokenProvider.getTokens(tokenAddresses, {\n              blockNumber: blockNumber\n            });\n          case 66:\n            tokenAccessor = _context2.sent;\n            printV2SubgraphPool = function printV2SubgraphPool(s) {\n              var _a, _b, _c, _d;\n              return \"\".concat((_b = (_a = tokenAccessor.getTokenByAddress(s.token0.id)) === null || _a === void 0 ? void 0 : _a.symbol) !== null && _b !== void 0 ? _b : s.token0.id, \"/\").concat((_d = (_c = tokenAccessor.getTokenByAddress(s.token1.id)) === null || _c === void 0 ? void 0 : _c.symbol) !== null && _d !== void 0 ? _d : s.token1.id);\n            };\n            log.info({\n              topByBaseWithTokenIn: topByBaseWithTokenIn.map(printV2SubgraphPool),\n              topByBaseWithTokenOut: topByBaseWithTokenOut.map(printV2SubgraphPool),\n              topByTVL: topByTVL.map(printV2SubgraphPool),\n              topByTVLUsingTokenIn: topByTVLUsingTokenIn.map(printV2SubgraphPool),\n              topByTVLUsingTokenOut: topByTVLUsingTokenOut.map(printV2SubgraphPool),\n              topByTVLUsingTokenInSecondHops: topByTVLUsingTokenInSecondHops.map(printV2SubgraphPool),\n              topByTVLUsingTokenOutSecondHops: topByTVLUsingTokenOutSecondHops.map(printV2SubgraphPool),\n              top2DirectSwap: topByDirectSwapPool.map(printV2SubgraphPool),\n              top2EthQuotePool: topByEthQuoteTokenPool.map(printV2SubgraphPool)\n            }, \"V2 Candidate pools\");\n            tokenPairsRaw = _.map(subgraphPools, function (subgraphPool) {\n              var tokenA = tokenAccessor.getTokenByAddress(subgraphPool.token0.id);\n              var tokenB = tokenAccessor.getTokenByAddress(subgraphPool.token1.id);\n              if (!tokenA || !tokenB) {\n                log.info(\"Dropping candidate pool for \".concat(subgraphPool.token0.id, \"/\").concat(subgraphPool.token1.id));\n                return undefined;\n              }\n              return [tokenA, tokenB];\n            });\n            tokenPairs = _.compact(tokenPairsRaw);\n            beforePoolsLoad = Date.now();\n            _context2.next = 74;\n            return poolProvider.getPools(tokenPairs, {\n              blockNumber: blockNumber\n            });\n          case 74:\n            poolAccessor = _context2.sent;\n            metric.putMetric('V2PoolsLoad', Date.now() - beforePoolsLoad, MetricLoggerUnit.Milliseconds);\n            poolsBySelection = {\n              protocol: Protocol.V2,\n              selections: {\n                topByBaseWithTokenIn: topByBaseWithTokenIn,\n                topByBaseWithTokenOut: topByBaseWithTokenOut,\n                topByDirectSwapPool: topByDirectSwapPool,\n                topByEthQuoteTokenPool: topByEthQuoteTokenPool,\n                topByTVL: topByTVL,\n                topByTVLUsingTokenIn: topByTVLUsingTokenIn,\n                topByTVLUsingTokenOut: topByTVLUsingTokenOut,\n                topByTVLUsingTokenInSecondHops: topByTVLUsingTokenInSecondHops,\n                topByTVLUsingTokenOutSecondHops: topByTVLUsingTokenOutSecondHops\n              }\n            };\n            return _context2.abrupt(\"return\", {\n              poolAccessor: poolAccessor,\n              candidatePools: poolsBySelection,\n              subgraphPools: subgraphPools\n            });\n          case 78:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[14, 31, 34, 37]]);\n  }));\n  return _getV2CandidatePools.apply(this, arguments);\n}\nexport function getMixedRouteCandidatePools(_x3) {\n  return _getMixedRouteCandidatePools.apply(this, arguments);\n}\nfunction _getMixedRouteCandidatePools() {\n  _getMixedRouteCandidatePools = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(_ref3) {\n    var tokenIn, tokenOut, routeType, routingConfig, v3subgraphProvider, v2subgraphProvider, tokenProvider, v3poolProvider, v2poolProvider, blockedTokenListProvider, chainId, blockNumber, _yield$getV3Candidate, V3subgraphPools, V3candidatePools, _yield$getV2Candidate, V2subgraphPools, V2candidatePools, V2topByTVLPoolIds, V2topByTVLSortedPools, V3sortedPools, buildV2Pools, subgraphPools, tokenAddresses, tokenAccessor, V3tokenPairsRaw, V3tokenPairs, V2tokenPairsRaw, V2tokenPairs, _yield$Promise$all, _yield$Promise$all2, V2poolAccessor, V3poolAccessor, buildPoolsBySelection, poolsBySelection;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            tokenIn = _ref3.tokenIn, tokenOut = _ref3.tokenOut, routeType = _ref3.routeType, routingConfig = _ref3.routingConfig, v3subgraphProvider = _ref3.v3subgraphProvider, v2subgraphProvider = _ref3.v2subgraphProvider, tokenProvider = _ref3.tokenProvider, v3poolProvider = _ref3.v3poolProvider, v2poolProvider = _ref3.v2poolProvider, blockedTokenListProvider = _ref3.blockedTokenListProvider, chainId = _ref3.chainId;\n            blockNumber = routingConfig.blockNumber;\n            _context3.next = 4;\n            return getV3CandidatePools({\n              tokenIn: tokenIn,\n              tokenOut: tokenOut,\n              tokenProvider: tokenProvider,\n              blockedTokenListProvider: blockedTokenListProvider,\n              poolProvider: v3poolProvider,\n              routeType: routeType,\n              subgraphProvider: v3subgraphProvider,\n              routingConfig: routingConfig,\n              chainId: chainId\n            });\n          case 4:\n            _yield$getV3Candidate = _context3.sent;\n            V3subgraphPools = _yield$getV3Candidate.subgraphPools;\n            V3candidatePools = _yield$getV3Candidate.candidatePools;\n            _context3.next = 9;\n            return getV2CandidatePools({\n              tokenIn: tokenIn,\n              tokenOut: tokenOut,\n              tokenProvider: tokenProvider,\n              blockedTokenListProvider: blockedTokenListProvider,\n              poolProvider: v2poolProvider,\n              routeType: routeType,\n              subgraphProvider: v2subgraphProvider,\n              routingConfig: routingConfig,\n              chainId: chainId\n            });\n          case 9:\n            _yield$getV2Candidate = _context3.sent;\n            V2subgraphPools = _yield$getV2Candidate.subgraphPools;\n            V2candidatePools = _yield$getV2Candidate.candidatePools;\n            /**\n             * Main heuristic for pruning mixedRoutes:\n             * - we pick V2 pools with higher liq than respective V3 pools, or if the v3 pool doesn't exist\n             *\n             * This way we can reduce calls to our provider since it's possible to generate a lot of mixed routes\n             */\n            /// We only really care about pools involving the tokenIn or tokenOut explictly,\n            /// since there's no way a long tail token in V2 would be routed through as an intermediary\n            V2topByTVLPoolIds = new Set([].concat(_toConsumableArray(V2candidatePools.selections.topByTVLUsingTokenIn), _toConsumableArray(V2candidatePools.selections.topByBaseWithTokenIn), _toConsumableArray(V2candidatePools.selections.topByTVLUsingTokenOut), _toConsumableArray(V2candidatePools.selections.topByBaseWithTokenOut), _toConsumableArray(V2candidatePools.selections.topByDirectSwapPool)).map(function (poolId) {\n              return poolId.id;\n            }));\n            V2topByTVLSortedPools = _(V2subgraphPools).filter(function (pool) {\n              return V2topByTVLPoolIds.has(pool.id);\n            }).sortBy(function (pool) {\n              return -pool.reserveUSD;\n            }).value(); /// we consider all returned V3 pools for this heuristic to \"fill in the gaps\"\n            V3sortedPools = _(V3subgraphPools).sortBy(function (pool) {\n              return -pool.tvlUSD;\n            }).value(); /// Finding pools with greater reserveUSD on v2 than tvlUSD on v3, or if there is no v3 liquidity\n            buildV2Pools = [];\n            V2topByTVLSortedPools.forEach(function (V2subgraphPool) {\n              var V3subgraphPool = V3sortedPools.find(function (pool) {\n                return pool.token0.id == V2subgraphPool.token0.id && pool.token1.id == V2subgraphPool.token1.id || pool.token0.id == V2subgraphPool.token1.id && pool.token1.id == V2subgraphPool.token0.id;\n              });\n              if (V3subgraphPool) {\n                if (V2subgraphPool.reserveUSD > V3subgraphPool.tvlUSD) {\n                  log.info({\n                    token0: V2subgraphPool.token0.id,\n                    token1: V2subgraphPool.token1.id,\n                    v2reserveUSD: V2subgraphPool.reserveUSD,\n                    v3tvlUSD: V3subgraphPool.tvlUSD\n                  }, \"MixedRoute heuristic, found a V2 pool with higher liquidity than its V3 counterpart\");\n                  buildV2Pools.push(V2subgraphPool);\n                }\n              } else {\n                log.info({\n                  token0: V2subgraphPool.token0.id,\n                  token1: V2subgraphPool.token1.id,\n                  v2reserveUSD: V2subgraphPool.reserveUSD\n                }, \"MixedRoute heuristic, found a V2 pool with no V3 counterpart\");\n                buildV2Pools.push(V2subgraphPool);\n              }\n            });\n            log.info(buildV2Pools.length, \"Number of V2 candidate pools that fit first heuristic\");\n            subgraphPools = [].concat(buildV2Pools, _toConsumableArray(V3sortedPools));\n            tokenAddresses = _(subgraphPools).flatMap(function (subgraphPool) {\n              return [subgraphPool.token0.id, subgraphPool.token1.id];\n            }).compact().uniq().value();\n            log.info(\"Getting the \".concat(tokenAddresses.length, \" tokens within the \").concat(subgraphPools.length, \" pools we are considering\"));\n            _context3.next = 23;\n            return tokenProvider.getTokens(tokenAddresses, {\n              blockNumber: blockNumber\n            });\n          case 23:\n            tokenAccessor = _context3.sent;\n            V3tokenPairsRaw = _.map(V3sortedPools, function (subgraphPool) {\n              var tokenA = tokenAccessor.getTokenByAddress(subgraphPool.token0.id);\n              var tokenB = tokenAccessor.getTokenByAddress(subgraphPool.token1.id);\n              var fee;\n              try {\n                fee = parseFeeAmount(subgraphPool.feeTier);\n              } catch (err) {\n                log.info({\n                  subgraphPool: subgraphPool\n                }, \"Dropping candidate pool for \".concat(subgraphPool.token0.id, \"/\").concat(subgraphPool.token1.id, \"/\").concat(subgraphPool.feeTier, \" because fee tier not supported\"));\n                return undefined;\n              }\n              if (!tokenA || !tokenB) {\n                log.info(\"Dropping candidate pool for \".concat(subgraphPool.token0.id, \"/\").concat(subgraphPool.token1.id, \"/\").concat(fee, \" because \").concat(tokenA ? subgraphPool.token1.id : subgraphPool.token0.id, \" not found by token provider\"));\n                return undefined;\n              }\n              return [tokenA, tokenB, fee];\n            });\n            V3tokenPairs = _.compact(V3tokenPairsRaw);\n            V2tokenPairsRaw = _.map(buildV2Pools, function (subgraphPool) {\n              var tokenA = tokenAccessor.getTokenByAddress(subgraphPool.token0.id);\n              var tokenB = tokenAccessor.getTokenByAddress(subgraphPool.token1.id);\n              if (!tokenA || !tokenB) {\n                log.info(\"Dropping candidate pool for \".concat(subgraphPool.token0.id, \"/\").concat(subgraphPool.token1.id));\n                return undefined;\n              }\n              return [tokenA, tokenB];\n            });\n            V2tokenPairs = _.compact(V2tokenPairsRaw);\n            _context3.next = 30;\n            return Promise.all([v2poolProvider.getPools(V2tokenPairs, {\n              blockNumber: blockNumber\n            }), v3poolProvider.getPools(V3tokenPairs, {\n              blockNumber: blockNumber\n            })]);\n          case 30:\n            _yield$Promise$all = _context3.sent;\n            _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2);\n            V2poolAccessor = _yield$Promise$all2[0];\n            V3poolAccessor = _yield$Promise$all2[1];\n            /// @dev a bit tricky here since the original V2CandidateSelections object included pools that we may have dropped\n            /// as part of the heuristic. We need to reconstruct a new object with the v3 pools too.\n            buildPoolsBySelection = function buildPoolsBySelection(key) {\n              return [].concat(_toConsumableArray(buildV2Pools.filter(function (pool) {\n                return V2candidatePools.selections[key].map(function (p) {\n                  return p.id;\n                }).includes(pool.id);\n              })), _toConsumableArray(V3candidatePools.selections[key]));\n            };\n            poolsBySelection = {\n              protocol: Protocol.MIXED,\n              selections: {\n                topByBaseWithTokenIn: buildPoolsBySelection('topByBaseWithTokenIn'),\n                topByBaseWithTokenOut: buildPoolsBySelection('topByBaseWithTokenOut'),\n                topByDirectSwapPool: buildPoolsBySelection('topByDirectSwapPool'),\n                topByEthQuoteTokenPool: buildPoolsBySelection('topByEthQuoteTokenPool'),\n                topByTVL: buildPoolsBySelection('topByTVL'),\n                topByTVLUsingTokenIn: buildPoolsBySelection('topByTVLUsingTokenIn'),\n                topByTVLUsingTokenOut: buildPoolsBySelection('topByTVLUsingTokenOut'),\n                topByTVLUsingTokenInSecondHops: buildPoolsBySelection('topByTVLUsingTokenInSecondHops'),\n                topByTVLUsingTokenOutSecondHops: buildPoolsBySelection('topByTVLUsingTokenOutSecondHops')\n              }\n            };\n            return _context3.abrupt(\"return\", {\n              V2poolAccessor: V2poolAccessor,\n              V3poolAccessor: V3poolAccessor,\n              candidatePools: poolsBySelection,\n              subgraphPools: subgraphPools\n            });\n          case 37:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _getMixedRouteCandidatePools.apply(this, arguments);\n}","map":{"version":3,"sources":["../../../../../src/routers/alpha-router/functions/get-candidate-pools.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Protocol } from '@uniswap/router-sdk';\nimport { TradeType } from '@uniswap/sdk-core';\nimport { FeeAmount } from '@uniswap/v3-sdk';\nimport _ from 'lodash';\nimport { CELO, CELO_ALFAJORES, CEUR_CELO, CEUR_CELO_ALFAJORES, CUSD_CELO, CUSD_CELO_ALFAJORES, DAI_ARBITRUM, DAI_ARBITRUM_RINKEBY, DAI_MAINNET, DAI_MOONBEAM, DAI_OPTIMISM, DAI_OPTIMISTIC_KOVAN, DAI_POLYGON_MUMBAI, DAI_RINKEBY_1, DAI_RINKEBY_2, FEI_MAINNET, USDC_ARBITRUM, USDC_ETHEREUM_GNOSIS, USDC_MAINNET, USDC_MOONBEAM, USDC_OPTIMISM, USDC_OPTIMISTIC_KOVAN, USDC_POLYGON, USDT_ARBITRUM, USDT_ARBITRUM_RINKEBY, USDT_MAINNET, USDT_OPTIMISM, USDT_OPTIMISTIC_KOVAN, WBTC_ARBITRUM, WBTC_GNOSIS, WBTC_MAINNET, WBTC_MOONBEAM, WBTC_OPTIMISM, WBTC_OPTIMISTIC_KOVAN, WGLMR_MOONBEAM, WMATIC_POLYGON, WMATIC_POLYGON_MUMBAI, WXDAI_GNOSIS, } from '../../../providers/token-provider';\nimport { ChainId, WRAPPED_NATIVE_CURRENCY } from '../../../util';\nimport { parseFeeAmount, unparseFeeAmount } from '../../../util/amounts';\nimport { log } from '../../../util/log';\nimport { metric, MetricLoggerUnit } from '../../../util/metric';\nconst baseTokensByChain = {\n    [ChainId.MAINNET]: [\n        USDC_MAINNET,\n        USDT_MAINNET,\n        WBTC_MAINNET,\n        DAI_MAINNET,\n        WRAPPED_NATIVE_CURRENCY[1],\n        FEI_MAINNET,\n    ],\n    [ChainId.RINKEBY]: [DAI_RINKEBY_1, DAI_RINKEBY_2],\n    [ChainId.OPTIMISM]: [\n        DAI_OPTIMISM,\n        USDC_OPTIMISM,\n        USDT_OPTIMISM,\n        WBTC_OPTIMISM,\n    ],\n    [ChainId.OPTIMISTIC_KOVAN]: [\n        DAI_OPTIMISTIC_KOVAN,\n        USDC_OPTIMISTIC_KOVAN,\n        WBTC_OPTIMISTIC_KOVAN,\n        USDT_OPTIMISTIC_KOVAN,\n    ],\n    [ChainId.ARBITRUM_ONE]: [\n        DAI_ARBITRUM,\n        USDC_ARBITRUM,\n        WBTC_ARBITRUM,\n        USDT_ARBITRUM,\n    ],\n    [ChainId.ARBITRUM_RINKEBY]: [DAI_ARBITRUM_RINKEBY, USDT_ARBITRUM_RINKEBY],\n    [ChainId.POLYGON]: [USDC_POLYGON, WMATIC_POLYGON],\n    [ChainId.POLYGON_MUMBAI]: [DAI_POLYGON_MUMBAI, WMATIC_POLYGON_MUMBAI],\n    [ChainId.CELO]: [CUSD_CELO, CEUR_CELO, CELO],\n    [ChainId.CELO_ALFAJORES]: [\n        CUSD_CELO_ALFAJORES,\n        CEUR_CELO_ALFAJORES,\n        CELO_ALFAJORES,\n    ],\n    [ChainId.GNOSIS]: [WBTC_GNOSIS, WXDAI_GNOSIS, USDC_ETHEREUM_GNOSIS],\n    [ChainId.MOONBEAM]: [\n        DAI_MOONBEAM,\n        USDC_MOONBEAM,\n        WBTC_MOONBEAM,\n        WGLMR_MOONBEAM,\n    ],\n};\nexport async function getV3CandidatePools({ tokenIn, tokenOut, routeType, routingConfig, subgraphProvider, tokenProvider, poolProvider, blockedTokenListProvider, chainId, }) {\n    var _a, _b, _c, _d, _e;\n    const { blockNumber, v3PoolSelection: { topN, topNDirectSwaps, topNTokenInOut, topNSecondHop, topNWithEachBaseToken, topNWithBaseToken, }, } = routingConfig;\n    const tokenInAddress = tokenIn.address.toLowerCase();\n    const tokenOutAddress = tokenOut.address.toLowerCase();\n    const beforeSubgraphPools = Date.now();\n    const allPoolsRaw = await subgraphProvider.getPools(tokenIn, tokenOut, {\n        blockNumber,\n    });\n    log.info({ samplePools: allPoolsRaw.slice(0, 3) }, 'Got all pools from V3 subgraph provider');\n    const allPools = _.map(allPoolsRaw, (pool) => {\n        return {\n            ...pool,\n            token0: {\n                ...pool.token0,\n                id: pool.token0.id.toLowerCase(),\n            },\n            token1: {\n                ...pool.token1,\n                id: pool.token1.id.toLowerCase(),\n            },\n        };\n    });\n    metric.putMetric('V3SubgraphPoolsLoad', Date.now() - beforeSubgraphPools, MetricLoggerUnit.Milliseconds);\n    // Only consider pools where neither tokens are in the blocked token list.\n    let filteredPools = allPools;\n    if (blockedTokenListProvider) {\n        filteredPools = [];\n        for (const pool of allPools) {\n            const token0InBlocklist = await blockedTokenListProvider.getTokenByAddress(pool.token0.id);\n            const token1InBlocklist = await blockedTokenListProvider.getTokenByAddress(pool.token1.id);\n            if (token0InBlocklist || token1InBlocklist) {\n                continue;\n            }\n            filteredPools.push(pool);\n        }\n    }\n    const subgraphPoolsSorted = _(filteredPools)\n        .sortBy((tokenListPool) => -tokenListPool.tvlUSD)\n        .value();\n    log.info(`After filtering blocked tokens went from ${allPools.length} to ${subgraphPoolsSorted.length}.`);\n    const poolAddressesSoFar = new Set();\n    const addToAddressSet = (pools) => {\n        _(pools)\n            .map((pool) => pool.id)\n            .forEach((poolAddress) => poolAddressesSoFar.add(poolAddress));\n    };\n    const baseTokens = (_a = baseTokensByChain[chainId]) !== null && _a !== void 0 ? _a : [];\n    const topByBaseWithTokenIn = _(baseTokens)\n        .flatMap((token) => {\n        return _(subgraphPoolsSorted)\n            .filter((subgraphPool) => {\n            const tokenAddress = token.address.toLowerCase();\n            return ((subgraphPool.token0.id == tokenAddress &&\n                subgraphPool.token1.id == tokenInAddress) ||\n                (subgraphPool.token1.id == tokenAddress &&\n                    subgraphPool.token0.id == tokenInAddress));\n        })\n            .sortBy((tokenListPool) => -tokenListPool.tvlUSD)\n            .slice(0, topNWithEachBaseToken)\n            .value();\n    })\n        .sortBy((tokenListPool) => -tokenListPool.tvlUSD)\n        .slice(0, topNWithBaseToken)\n        .value();\n    const topByBaseWithTokenOut = _(baseTokens)\n        .flatMap((token) => {\n        return _(subgraphPoolsSorted)\n            .filter((subgraphPool) => {\n            const tokenAddress = token.address.toLowerCase();\n            return ((subgraphPool.token0.id == tokenAddress &&\n                subgraphPool.token1.id == tokenOutAddress) ||\n                (subgraphPool.token1.id == tokenAddress &&\n                    subgraphPool.token0.id == tokenOutAddress));\n        })\n            .sortBy((tokenListPool) => -tokenListPool.tvlUSD)\n            .slice(0, topNWithEachBaseToken)\n            .value();\n    })\n        .sortBy((tokenListPool) => -tokenListPool.tvlUSD)\n        .slice(0, topNWithBaseToken)\n        .value();\n    let top2DirectSwapPool = _(subgraphPoolsSorted)\n        .filter((subgraphPool) => {\n        return (!poolAddressesSoFar.has(subgraphPool.id) &&\n            ((subgraphPool.token0.id == tokenInAddress &&\n                subgraphPool.token1.id == tokenOutAddress) ||\n                (subgraphPool.token1.id == tokenInAddress &&\n                    subgraphPool.token0.id == tokenOutAddress)));\n    })\n        .slice(0, topNDirectSwaps)\n        .value();\n    if (top2DirectSwapPool.length == 0 && topNDirectSwaps > 0) {\n        // If we requested direct swap pools but did not find any in the subgraph query.\n        // Optimistically add them into the query regardless. Invalid pools ones will be dropped anyway\n        // when we query the pool on-chain. Ensures that new pools for new pairs can be swapped on immediately.\n        top2DirectSwapPool = _.map([FeeAmount.HIGH, FeeAmount.MEDIUM, FeeAmount.LOW, FeeAmount.LOWEST], (feeAmount) => {\n            const { token0, token1, poolAddress } = poolProvider.getPoolAddress(tokenIn, tokenOut, feeAmount);\n            return {\n                id: poolAddress,\n                feeTier: unparseFeeAmount(feeAmount),\n                liquidity: '10000',\n                token0: {\n                    id: token0.address,\n                },\n                token1: {\n                    id: token1.address,\n                },\n                tvlETH: 10000,\n                tvlUSD: 10000,\n            };\n        });\n    }\n    addToAddressSet(top2DirectSwapPool);\n    const wrappedNativeAddress = (_b = WRAPPED_NATIVE_CURRENCY[chainId]) === null || _b === void 0 ? void 0 : _b.address;\n    // Main reason we need this is for gas estimates, only needed if token out is not native.\n    // We don't check the seen address set because if we've already added pools for getting native quotes\n    // theres no need to add more.\n    let top2EthQuoteTokenPool = [];\n    if ((((_c = WRAPPED_NATIVE_CURRENCY[chainId]) === null || _c === void 0 ? void 0 : _c.symbol) ==\n        ((_d = WRAPPED_NATIVE_CURRENCY[ChainId.MAINNET]) === null || _d === void 0 ? void 0 : _d.symbol) &&\n        tokenOut.symbol != 'WETH' &&\n        tokenOut.symbol != 'WETH9' &&\n        tokenOut.symbol != 'ETH') ||\n        (((_e = WRAPPED_NATIVE_CURRENCY[chainId]) === null || _e === void 0 ? void 0 : _e.symbol) == WMATIC_POLYGON.symbol &&\n            tokenOut.symbol != 'MATIC' &&\n            tokenOut.symbol != 'WMATIC')) {\n        top2EthQuoteTokenPool = _(subgraphPoolsSorted)\n            .filter((subgraphPool) => {\n            if (routeType == TradeType.EXACT_INPUT) {\n                return ((subgraphPool.token0.id == wrappedNativeAddress &&\n                    subgraphPool.token1.id == tokenOutAddress) ||\n                    (subgraphPool.token1.id == wrappedNativeAddress &&\n                        subgraphPool.token0.id == tokenOutAddress));\n            }\n            else {\n                return ((subgraphPool.token0.id == wrappedNativeAddress &&\n                    subgraphPool.token1.id == tokenInAddress) ||\n                    (subgraphPool.token1.id == wrappedNativeAddress &&\n                        subgraphPool.token0.id == tokenInAddress));\n            }\n        })\n            .slice(0, 1)\n            .value();\n    }\n    addToAddressSet(top2EthQuoteTokenPool);\n    const topByTVL = _(subgraphPoolsSorted)\n        .filter((subgraphPool) => {\n        return !poolAddressesSoFar.has(subgraphPool.id);\n    })\n        .slice(0, topN)\n        .value();\n    addToAddressSet(topByTVL);\n    const topByTVLUsingTokenIn = _(subgraphPoolsSorted)\n        .filter((subgraphPool) => {\n        return (!poolAddressesSoFar.has(subgraphPool.id) &&\n            (subgraphPool.token0.id == tokenInAddress ||\n                subgraphPool.token1.id == tokenInAddress));\n    })\n        .slice(0, topNTokenInOut)\n        .value();\n    addToAddressSet(topByTVLUsingTokenIn);\n    const topByTVLUsingTokenOut = _(subgraphPoolsSorted)\n        .filter((subgraphPool) => {\n        return (!poolAddressesSoFar.has(subgraphPool.id) &&\n            (subgraphPool.token0.id == tokenOutAddress ||\n                subgraphPool.token1.id == tokenOutAddress));\n    })\n        .slice(0, topNTokenInOut)\n        .value();\n    addToAddressSet(topByTVLUsingTokenOut);\n    const topByTVLUsingTokenInSecondHops = _(topByTVLUsingTokenIn)\n        .map((subgraphPool) => {\n        return tokenInAddress == subgraphPool.token0.id\n            ? subgraphPool.token1.id\n            : subgraphPool.token0.id;\n    })\n        .flatMap((secondHopId) => {\n        return _(subgraphPoolsSorted)\n            .filter((subgraphPool) => {\n            return (!poolAddressesSoFar.has(subgraphPool.id) &&\n                (subgraphPool.token0.id == secondHopId ||\n                    subgraphPool.token1.id == secondHopId));\n        })\n            .slice(0, topNSecondHop)\n            .value();\n    })\n        .uniqBy((pool) => pool.id)\n        .sortBy((tokenListPool) => -tokenListPool.tvlUSD)\n        .slice(0, topNSecondHop)\n        .value();\n    addToAddressSet(topByTVLUsingTokenInSecondHops);\n    const topByTVLUsingTokenOutSecondHops = _(topByTVLUsingTokenOut)\n        .map((subgraphPool) => {\n        return tokenOutAddress == subgraphPool.token0.id\n            ? subgraphPool.token1.id\n            : subgraphPool.token0.id;\n    })\n        .flatMap((secondHopId) => {\n        return _(subgraphPoolsSorted)\n            .filter((subgraphPool) => {\n            return (!poolAddressesSoFar.has(subgraphPool.id) &&\n                (subgraphPool.token0.id == secondHopId ||\n                    subgraphPool.token1.id == secondHopId));\n        })\n            .slice(0, topNSecondHop)\n            .value();\n    })\n        .uniqBy((pool) => pool.id)\n        .sortBy((tokenListPool) => -tokenListPool.tvlUSD)\n        .slice(0, topNSecondHop)\n        .value();\n    addToAddressSet(topByTVLUsingTokenOutSecondHops);\n    const subgraphPools = _([\n        ...topByBaseWithTokenIn,\n        ...topByBaseWithTokenOut,\n        ...top2DirectSwapPool,\n        ...top2EthQuoteTokenPool,\n        ...topByTVL,\n        ...topByTVLUsingTokenIn,\n        ...topByTVLUsingTokenOut,\n        ...topByTVLUsingTokenInSecondHops,\n        ...topByTVLUsingTokenOutSecondHops,\n    ])\n        .compact()\n        .uniqBy((pool) => pool.id)\n        .value();\n    const tokenAddresses = _(subgraphPools)\n        .flatMap((subgraphPool) => [subgraphPool.token0.id, subgraphPool.token1.id])\n        .compact()\n        .uniq()\n        .value();\n    log.info(`Getting the ${tokenAddresses.length} tokens within the ${subgraphPools.length} V3 pools we are considering`);\n    const tokenAccessor = await tokenProvider.getTokens(tokenAddresses, {\n        blockNumber,\n    });\n    const printV3SubgraphPool = (s) => {\n        var _a, _b, _c, _d;\n        return `${(_b = (_a = tokenAccessor.getTokenByAddress(s.token0.id)) === null || _a === void 0 ? void 0 : _a.symbol) !== null && _b !== void 0 ? _b : s.token0.id}/${(_d = (_c = tokenAccessor.getTokenByAddress(s.token1.id)) === null || _c === void 0 ? void 0 : _c.symbol) !== null && _d !== void 0 ? _d : s.token1.id}/${s.feeTier}`;\n    };\n    log.info({\n        topByBaseWithTokenIn: topByBaseWithTokenIn.map(printV3SubgraphPool),\n        topByBaseWithTokenOut: topByBaseWithTokenOut.map(printV3SubgraphPool),\n        topByTVL: topByTVL.map(printV3SubgraphPool),\n        topByTVLUsingTokenIn: topByTVLUsingTokenIn.map(printV3SubgraphPool),\n        topByTVLUsingTokenOut: topByTVLUsingTokenOut.map(printV3SubgraphPool),\n        topByTVLUsingTokenInSecondHops: topByTVLUsingTokenInSecondHops.map(printV3SubgraphPool),\n        topByTVLUsingTokenOutSecondHops: topByTVLUsingTokenOutSecondHops.map(printV3SubgraphPool),\n        top2DirectSwap: top2DirectSwapPool.map(printV3SubgraphPool),\n        top2EthQuotePool: top2EthQuoteTokenPool.map(printV3SubgraphPool),\n    }, `V3 Candidate Pools`);\n    const tokenPairsRaw = _.map(subgraphPools, (subgraphPool) => {\n        const tokenA = tokenAccessor.getTokenByAddress(subgraphPool.token0.id);\n        const tokenB = tokenAccessor.getTokenByAddress(subgraphPool.token1.id);\n        let fee;\n        try {\n            fee = parseFeeAmount(subgraphPool.feeTier);\n        }\n        catch (err) {\n            log.info({ subgraphPool }, `Dropping candidate pool for ${subgraphPool.token0.id}/${subgraphPool.token1.id}/${subgraphPool.feeTier} because fee tier not supported`);\n            return undefined;\n        }\n        if (!tokenA || !tokenB) {\n            log.info(`Dropping candidate pool for ${subgraphPool.token0.id}/${subgraphPool.token1.id}/${fee} because ${tokenA ? subgraphPool.token1.id : subgraphPool.token0.id} not found by token provider`);\n            return undefined;\n        }\n        return [tokenA, tokenB, fee];\n    });\n    const tokenPairs = _.compact(tokenPairsRaw);\n    const beforePoolsLoad = Date.now();\n    const poolAccessor = await poolProvider.getPools(tokenPairs);\n    metric.putMetric('V3PoolsLoad', Date.now() - beforePoolsLoad, MetricLoggerUnit.Milliseconds);\n    const poolsBySelection = {\n        protocol: Protocol.V3,\n        selections: {\n            topByBaseWithTokenIn,\n            topByBaseWithTokenOut,\n            topByDirectSwapPool: top2DirectSwapPool,\n            topByEthQuoteTokenPool: top2EthQuoteTokenPool,\n            topByTVL,\n            topByTVLUsingTokenIn,\n            topByTVLUsingTokenOut,\n            topByTVLUsingTokenInSecondHops,\n            topByTVLUsingTokenOutSecondHops,\n        },\n    };\n    return { poolAccessor, candidatePools: poolsBySelection, subgraphPools };\n}\nexport async function getV2CandidatePools({ tokenIn, tokenOut, routeType, routingConfig, subgraphProvider, tokenProvider, poolProvider, blockedTokenListProvider, chainId, }) {\n    var _a;\n    const { blockNumber, v2PoolSelection: { topN, topNDirectSwaps, topNTokenInOut, topNSecondHop, topNWithEachBaseToken, topNWithBaseToken, }, } = routingConfig;\n    const tokenInAddress = tokenIn.address.toLowerCase();\n    const tokenOutAddress = tokenOut.address.toLowerCase();\n    const beforeSubgraphPools = Date.now();\n    const allPoolsRaw = await subgraphProvider.getPools(tokenIn, tokenOut, {\n        blockNumber,\n    });\n    const allPools = _.map(allPoolsRaw, (pool) => {\n        return {\n            ...pool,\n            token0: {\n                ...pool.token0,\n                id: pool.token0.id.toLowerCase(),\n            },\n            token1: {\n                ...pool.token1,\n                id: pool.token1.id.toLowerCase(),\n            },\n        };\n    });\n    metric.putMetric('V2SubgraphPoolsLoad', Date.now() - beforeSubgraphPools, MetricLoggerUnit.Milliseconds);\n    // Only consider pools where neither tokens are in the blocked token list.\n    let filteredPools = allPools;\n    if (blockedTokenListProvider) {\n        filteredPools = [];\n        for (const pool of allPools) {\n            const token0InBlocklist = await blockedTokenListProvider.getTokenByAddress(pool.token0.id);\n            const token1InBlocklist = await blockedTokenListProvider.getTokenByAddress(pool.token1.id);\n            if (token0InBlocklist || token1InBlocklist) {\n                continue;\n            }\n            filteredPools.push(pool);\n        }\n    }\n    const subgraphPoolsSorted = _(filteredPools)\n        .sortBy((tokenListPool) => -tokenListPool.reserve)\n        .value();\n    log.info(`After filtering blocked tokens went from ${allPools.length} to ${subgraphPoolsSorted.length}.`);\n    const poolAddressesSoFar = new Set();\n    const addToAddressSet = (pools) => {\n        _(pools)\n            .map((pool) => pool.id)\n            .forEach((poolAddress) => poolAddressesSoFar.add(poolAddress));\n    };\n    const baseTokens = (_a = baseTokensByChain[chainId]) !== null && _a !== void 0 ? _a : [];\n    const topByBaseWithTokenIn = _(baseTokens)\n        .flatMap((token) => {\n        return _(subgraphPoolsSorted)\n            .filter((subgraphPool) => {\n            const tokenAddress = token.address.toLowerCase();\n            return ((subgraphPool.token0.id == tokenAddress &&\n                subgraphPool.token1.id == tokenInAddress) ||\n                (subgraphPool.token1.id == tokenAddress &&\n                    subgraphPool.token0.id == tokenInAddress));\n        })\n            .sortBy((tokenListPool) => -tokenListPool.reserve)\n            .slice(0, topNWithEachBaseToken)\n            .value();\n    })\n        .sortBy((tokenListPool) => -tokenListPool.reserve)\n        .slice(0, topNWithBaseToken)\n        .value();\n    const topByBaseWithTokenOut = _(baseTokens)\n        .flatMap((token) => {\n        return _(subgraphPoolsSorted)\n            .filter((subgraphPool) => {\n            const tokenAddress = token.address.toLowerCase();\n            return ((subgraphPool.token0.id == tokenAddress &&\n                subgraphPool.token1.id == tokenOutAddress) ||\n                (subgraphPool.token1.id == tokenAddress &&\n                    subgraphPool.token0.id == tokenOutAddress));\n        })\n            .sortBy((tokenListPool) => -tokenListPool.reserve)\n            .slice(0, topNWithEachBaseToken)\n            .value();\n    })\n        .sortBy((tokenListPool) => -tokenListPool.reserve)\n        .slice(0, topNWithBaseToken)\n        .value();\n    // Always add the direct swap pool into the mix regardless of if it exists in the subgraph pool list.\n    // Ensures that new pools can be swapped on immediately, and that if a pool was filtered out of the\n    // subgraph query for some reason (e.g. trackedReserveETH was 0), then we still consider it.\n    let topByDirectSwapPool = [];\n    if (topNDirectSwaps != 0) {\n        const { token0, token1, poolAddress } = poolProvider.getPoolAddress(tokenIn, tokenOut);\n        topByDirectSwapPool = [\n            {\n                id: poolAddress,\n                token0: {\n                    id: token0.address,\n                },\n                token1: {\n                    id: token1.address,\n                },\n                supply: 10000,\n                reserve: 10000,\n                reserveUSD: 10000, // Not used. Set to arbitrary number.\n            },\n        ];\n    }\n    addToAddressSet(topByDirectSwapPool);\n    const wethAddress = WRAPPED_NATIVE_CURRENCY[chainId].address;\n    // Main reason we need this is for gas estimates, only needed if token out is not ETH.\n    // We don't check the seen address set because if we've already added pools for getting ETH quotes\n    // theres no need to add more.\n    // Note: we do not need to check other native currencies for the V2 Protocol\n    let topByEthQuoteTokenPool = [];\n    if (tokenOut.symbol != 'WETH' &&\n        tokenOut.symbol != 'WETH9' &&\n        tokenOut.symbol != 'ETH') {\n        topByEthQuoteTokenPool = _(subgraphPoolsSorted)\n            .filter((subgraphPool) => {\n            if (routeType == TradeType.EXACT_INPUT) {\n                return ((subgraphPool.token0.id == wethAddress &&\n                    subgraphPool.token1.id == tokenOutAddress) ||\n                    (subgraphPool.token1.id == wethAddress &&\n                        subgraphPool.token0.id == tokenOutAddress));\n            }\n            else {\n                return ((subgraphPool.token0.id == wethAddress &&\n                    subgraphPool.token1.id == tokenInAddress) ||\n                    (subgraphPool.token1.id == wethAddress &&\n                        subgraphPool.token0.id == tokenInAddress));\n            }\n        })\n            .slice(0, 1)\n            .value();\n    }\n    addToAddressSet(topByEthQuoteTokenPool);\n    const topByTVL = _(subgraphPoolsSorted)\n        .filter((subgraphPool) => {\n        return !poolAddressesSoFar.has(subgraphPool.id);\n    })\n        .slice(0, topN)\n        .value();\n    addToAddressSet(topByTVL);\n    const topByTVLUsingTokenIn = _(subgraphPoolsSorted)\n        .filter((subgraphPool) => {\n        return (!poolAddressesSoFar.has(subgraphPool.id) &&\n            (subgraphPool.token0.id == tokenInAddress ||\n                subgraphPool.token1.id == tokenInAddress));\n    })\n        .slice(0, topNTokenInOut)\n        .value();\n    addToAddressSet(topByTVLUsingTokenIn);\n    const topByTVLUsingTokenOut = _(subgraphPoolsSorted)\n        .filter((subgraphPool) => {\n        return (!poolAddressesSoFar.has(subgraphPool.id) &&\n            (subgraphPool.token0.id == tokenOutAddress ||\n                subgraphPool.token1.id == tokenOutAddress));\n    })\n        .slice(0, topNTokenInOut)\n        .value();\n    addToAddressSet(topByTVLUsingTokenOut);\n    const topByTVLUsingTokenInSecondHops = _(topByTVLUsingTokenIn)\n        .map((subgraphPool) => {\n        return tokenInAddress == subgraphPool.token0.id\n            ? subgraphPool.token1.id\n            : subgraphPool.token0.id;\n    })\n        .flatMap((secondHopId) => {\n        return _(subgraphPoolsSorted)\n            .filter((subgraphPool) => {\n            return (!poolAddressesSoFar.has(subgraphPool.id) &&\n                (subgraphPool.token0.id == secondHopId ||\n                    subgraphPool.token1.id == secondHopId));\n        })\n            .slice(0, topNSecondHop)\n            .value();\n    })\n        .uniqBy((pool) => pool.id)\n        .sortBy((tokenListPool) => -tokenListPool.reserve)\n        .slice(0, topNSecondHop)\n        .value();\n    addToAddressSet(topByTVLUsingTokenInSecondHops);\n    const topByTVLUsingTokenOutSecondHops = _(topByTVLUsingTokenOut)\n        .map((subgraphPool) => {\n        return tokenOutAddress == subgraphPool.token0.id\n            ? subgraphPool.token1.id\n            : subgraphPool.token0.id;\n    })\n        .flatMap((secondHopId) => {\n        return _(subgraphPoolsSorted)\n            .filter((subgraphPool) => {\n            return (!poolAddressesSoFar.has(subgraphPool.id) &&\n                (subgraphPool.token0.id == secondHopId ||\n                    subgraphPool.token1.id == secondHopId));\n        })\n            .slice(0, topNSecondHop)\n            .value();\n    })\n        .uniqBy((pool) => pool.id)\n        .sortBy((tokenListPool) => -tokenListPool.reserve)\n        .slice(0, topNSecondHop)\n        .value();\n    addToAddressSet(topByTVLUsingTokenOutSecondHops);\n    const subgraphPools = _([\n        ...topByBaseWithTokenIn,\n        ...topByBaseWithTokenOut,\n        ...topByDirectSwapPool,\n        ...topByEthQuoteTokenPool,\n        ...topByTVL,\n        ...topByTVLUsingTokenIn,\n        ...topByTVLUsingTokenOut,\n        ...topByTVLUsingTokenInSecondHops,\n        ...topByTVLUsingTokenOutSecondHops,\n    ])\n        .compact()\n        .uniqBy((pool) => pool.id)\n        .value();\n    const tokenAddresses = _(subgraphPools)\n        .flatMap((subgraphPool) => [subgraphPool.token0.id, subgraphPool.token1.id])\n        .compact()\n        .uniq()\n        .value();\n    log.info(`Getting the ${tokenAddresses.length} tokens within the ${subgraphPools.length} V2 pools we are considering`);\n    const tokenAccessor = await tokenProvider.getTokens(tokenAddresses, {\n        blockNumber,\n    });\n    const printV2SubgraphPool = (s) => {\n        var _a, _b, _c, _d;\n        return `${(_b = (_a = tokenAccessor.getTokenByAddress(s.token0.id)) === null || _a === void 0 ? void 0 : _a.symbol) !== null && _b !== void 0 ? _b : s.token0.id}/${(_d = (_c = tokenAccessor.getTokenByAddress(s.token1.id)) === null || _c === void 0 ? void 0 : _c.symbol) !== null && _d !== void 0 ? _d : s.token1.id}`;\n    };\n    log.info({\n        topByBaseWithTokenIn: topByBaseWithTokenIn.map(printV2SubgraphPool),\n        topByBaseWithTokenOut: topByBaseWithTokenOut.map(printV2SubgraphPool),\n        topByTVL: topByTVL.map(printV2SubgraphPool),\n        topByTVLUsingTokenIn: topByTVLUsingTokenIn.map(printV2SubgraphPool),\n        topByTVLUsingTokenOut: topByTVLUsingTokenOut.map(printV2SubgraphPool),\n        topByTVLUsingTokenInSecondHops: topByTVLUsingTokenInSecondHops.map(printV2SubgraphPool),\n        topByTVLUsingTokenOutSecondHops: topByTVLUsingTokenOutSecondHops.map(printV2SubgraphPool),\n        top2DirectSwap: topByDirectSwapPool.map(printV2SubgraphPool),\n        top2EthQuotePool: topByEthQuoteTokenPool.map(printV2SubgraphPool),\n    }, `V2 Candidate pools`);\n    const tokenPairsRaw = _.map(subgraphPools, (subgraphPool) => {\n        const tokenA = tokenAccessor.getTokenByAddress(subgraphPool.token0.id);\n        const tokenB = tokenAccessor.getTokenByAddress(subgraphPool.token1.id);\n        if (!tokenA || !tokenB) {\n            log.info(`Dropping candidate pool for ${subgraphPool.token0.id}/${subgraphPool.token1.id}`);\n            return undefined;\n        }\n        return [tokenA, tokenB];\n    });\n    const tokenPairs = _.compact(tokenPairsRaw);\n    const beforePoolsLoad = Date.now();\n    const poolAccessor = await poolProvider.getPools(tokenPairs, { blockNumber });\n    metric.putMetric('V2PoolsLoad', Date.now() - beforePoolsLoad, MetricLoggerUnit.Milliseconds);\n    const poolsBySelection = {\n        protocol: Protocol.V2,\n        selections: {\n            topByBaseWithTokenIn,\n            topByBaseWithTokenOut,\n            topByDirectSwapPool,\n            topByEthQuoteTokenPool: topByEthQuoteTokenPool,\n            topByTVL,\n            topByTVLUsingTokenIn,\n            topByTVLUsingTokenOut,\n            topByTVLUsingTokenInSecondHops,\n            topByTVLUsingTokenOutSecondHops,\n        },\n    };\n    return { poolAccessor, candidatePools: poolsBySelection, subgraphPools };\n}\nexport async function getMixedRouteCandidatePools({ tokenIn, tokenOut, routeType, routingConfig, v3subgraphProvider, v2subgraphProvider, tokenProvider, v3poolProvider, v2poolProvider, blockedTokenListProvider, chainId, }) {\n    const { blockNumber } = routingConfig;\n    const { subgraphPools: V3subgraphPools, candidatePools: V3candidatePools } = await getV3CandidatePools({\n        tokenIn,\n        tokenOut,\n        tokenProvider,\n        blockedTokenListProvider,\n        poolProvider: v3poolProvider,\n        routeType,\n        subgraphProvider: v3subgraphProvider,\n        routingConfig,\n        chainId,\n    });\n    const { subgraphPools: V2subgraphPools, candidatePools: V2candidatePools } = await getV2CandidatePools({\n        tokenIn,\n        tokenOut,\n        tokenProvider,\n        blockedTokenListProvider,\n        poolProvider: v2poolProvider,\n        routeType,\n        subgraphProvider: v2subgraphProvider,\n        routingConfig,\n        chainId,\n    });\n    /**\n     * Main heuristic for pruning mixedRoutes:\n     * - we pick V2 pools with higher liq than respective V3 pools, or if the v3 pool doesn't exist\n     *\n     * This way we can reduce calls to our provider since it's possible to generate a lot of mixed routes\n     */\n    /// We only really care about pools involving the tokenIn or tokenOut explictly,\n    /// since there's no way a long tail token in V2 would be routed through as an intermediary\n    const V2topByTVLPoolIds = new Set([\n        ...V2candidatePools.selections.topByTVLUsingTokenIn,\n        ...V2candidatePools.selections.topByBaseWithTokenIn,\n        /// tokenOut:\n        ...V2candidatePools.selections.topByTVLUsingTokenOut,\n        ...V2candidatePools.selections.topByBaseWithTokenOut,\n        /// Direct swap:\n        ...V2candidatePools.selections.topByDirectSwapPool,\n    ].map((poolId) => poolId.id));\n    let V2topByTVLSortedPools = _(V2subgraphPools)\n        .filter((pool) => V2topByTVLPoolIds.has(pool.id))\n        .sortBy((pool) => -pool.reserveUSD)\n        .value();\n    /// we consider all returned V3 pools for this heuristic to \"fill in the gaps\"\n    const V3sortedPools = _(V3subgraphPools)\n        .sortBy((pool) => -pool.tvlUSD)\n        .value();\n    /// Finding pools with greater reserveUSD on v2 than tvlUSD on v3, or if there is no v3 liquidity\n    const buildV2Pools = [];\n    V2topByTVLSortedPools.forEach((V2subgraphPool) => {\n        const V3subgraphPool = V3sortedPools.find((pool) => (pool.token0.id == V2subgraphPool.token0.id &&\n            pool.token1.id == V2subgraphPool.token1.id) ||\n            (pool.token0.id == V2subgraphPool.token1.id &&\n                pool.token1.id == V2subgraphPool.token0.id));\n        if (V3subgraphPool) {\n            if (V2subgraphPool.reserveUSD > V3subgraphPool.tvlUSD) {\n                log.info({\n                    token0: V2subgraphPool.token0.id,\n                    token1: V2subgraphPool.token1.id,\n                    v2reserveUSD: V2subgraphPool.reserveUSD,\n                    v3tvlUSD: V3subgraphPool.tvlUSD,\n                }, `MixedRoute heuristic, found a V2 pool with higher liquidity than its V3 counterpart`);\n                buildV2Pools.push(V2subgraphPool);\n            }\n        }\n        else {\n            log.info({\n                token0: V2subgraphPool.token0.id,\n                token1: V2subgraphPool.token1.id,\n                v2reserveUSD: V2subgraphPool.reserveUSD,\n            }, `MixedRoute heuristic, found a V2 pool with no V3 counterpart`);\n            buildV2Pools.push(V2subgraphPool);\n        }\n    });\n    log.info(buildV2Pools.length, `Number of V2 candidate pools that fit first heuristic`);\n    const subgraphPools = [...buildV2Pools, ...V3sortedPools];\n    const tokenAddresses = _(subgraphPools)\n        .flatMap((subgraphPool) => [subgraphPool.token0.id, subgraphPool.token1.id])\n        .compact()\n        .uniq()\n        .value();\n    log.info(`Getting the ${tokenAddresses.length} tokens within the ${subgraphPools.length} pools we are considering`);\n    const tokenAccessor = await tokenProvider.getTokens(tokenAddresses, {\n        blockNumber,\n    });\n    const V3tokenPairsRaw = _.map(V3sortedPools, (subgraphPool) => {\n        const tokenA = tokenAccessor.getTokenByAddress(subgraphPool.token0.id);\n        const tokenB = tokenAccessor.getTokenByAddress(subgraphPool.token1.id);\n        let fee;\n        try {\n            fee = parseFeeAmount(subgraphPool.feeTier);\n        }\n        catch (err) {\n            log.info({ subgraphPool }, `Dropping candidate pool for ${subgraphPool.token0.id}/${subgraphPool.token1.id}/${subgraphPool.feeTier} because fee tier not supported`);\n            return undefined;\n        }\n        if (!tokenA || !tokenB) {\n            log.info(`Dropping candidate pool for ${subgraphPool.token0.id}/${subgraphPool.token1.id}/${fee} because ${tokenA ? subgraphPool.token1.id : subgraphPool.token0.id} not found by token provider`);\n            return undefined;\n        }\n        return [tokenA, tokenB, fee];\n    });\n    const V3tokenPairs = _.compact(V3tokenPairsRaw);\n    const V2tokenPairsRaw = _.map(buildV2Pools, (subgraphPool) => {\n        const tokenA = tokenAccessor.getTokenByAddress(subgraphPool.token0.id);\n        const tokenB = tokenAccessor.getTokenByAddress(subgraphPool.token1.id);\n        if (!tokenA || !tokenB) {\n            log.info(`Dropping candidate pool for ${subgraphPool.token0.id}/${subgraphPool.token1.id}`);\n            return undefined;\n        }\n        return [tokenA, tokenB];\n    });\n    const V2tokenPairs = _.compact(V2tokenPairsRaw);\n    const [V2poolAccessor, V3poolAccessor] = await Promise.all([\n        v2poolProvider.getPools(V2tokenPairs, {\n            blockNumber,\n        }),\n        v3poolProvider.getPools(V3tokenPairs, {\n            blockNumber,\n        }),\n    ]);\n    /// @dev a bit tricky here since the original V2CandidateSelections object included pools that we may have dropped\n    /// as part of the heuristic. We need to reconstruct a new object with the v3 pools too.\n    const buildPoolsBySelection = (key) => {\n        return [\n            ...buildV2Pools.filter((pool) => V2candidatePools.selections[key].map((p) => p.id).includes(pool.id)),\n            ...V3candidatePools.selections[key],\n        ];\n    };\n    const poolsBySelection = {\n        protocol: Protocol.MIXED,\n        selections: {\n            topByBaseWithTokenIn: buildPoolsBySelection('topByBaseWithTokenIn'),\n            topByBaseWithTokenOut: buildPoolsBySelection('topByBaseWithTokenOut'),\n            topByDirectSwapPool: buildPoolsBySelection('topByDirectSwapPool'),\n            topByEthQuoteTokenPool: buildPoolsBySelection('topByEthQuoteTokenPool'),\n            topByTVL: buildPoolsBySelection('topByTVL'),\n            topByTVLUsingTokenIn: buildPoolsBySelection('topByTVLUsingTokenIn'),\n            topByTVLUsingTokenOut: buildPoolsBySelection('topByTVLUsingTokenOut'),\n            topByTVLUsingTokenInSecondHops: buildPoolsBySelection('topByTVLUsingTokenInSecondHops'),\n            topByTVLUsingTokenOutSecondHops: buildPoolsBySelection('topByTVLUsingTokenOutSecondHops'),\n        },\n    };\n    return {\n        V2poolAccessor,\n        V3poolAccessor,\n        candidatePools: poolsBySelection,\n        subgraphPools,\n    };\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LWNhbmRpZGF0ZS1wb29scy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9yb3V0ZXJzL2FscGhhLXJvdXRlci9mdW5jdGlvbnMvZ2V0LWNhbmRpZGF0ZS1wb29scy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDL0MsT0FBTyxFQUFTLFNBQVMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUM1QyxPQUFPLENBQUMsTUFBTSxRQUFRLENBQUM7QUFPdkIsT0FBTyxFQUNMLElBQUksRUFDSixjQUFjLEVBQ2QsU0FBUyxFQUNULG1CQUFtQixFQUNuQixTQUFTLEVBQ1QsbUJBQW1CLEVBQ25CLFlBQVksRUFDWixvQkFBb0IsRUFDcEIsV0FBVyxFQUNYLFlBQVksRUFDWixZQUFZLEVBQ1osb0JBQW9CLEVBQ3BCLGtCQUFrQixFQUNsQixhQUFhLEVBQ2IsYUFBYSxFQUNiLFdBQVcsRUFFWCxhQUFhLEVBQ2Isb0JBQW9CLEVBQ3BCLFlBQVksRUFDWixhQUFhLEVBQ2IsYUFBYSxFQUNiLHFCQUFxQixFQUNyQixZQUFZLEVBQ1osYUFBYSxFQUNiLHFCQUFxQixFQUNyQixZQUFZLEVBQ1osYUFBYSxFQUNiLHFCQUFxQixFQUNyQixhQUFhLEVBQ2IsV0FBVyxFQUNYLFlBQVksRUFDWixhQUFhLEVBQ2IsYUFBYSxFQUNiLHFCQUFxQixFQUNyQixjQUFjLEVBQ2QsY0FBYyxFQUNkLHFCQUFxQixFQUNyQixZQUFZLEdBQ2IsTUFBTSxtQ0FBbUMsQ0FBQztBQWEzQyxPQUFPLEVBQUUsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2pFLE9BQU8sRUFBRSxjQUFjLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUN6RSxPQUFPLEVBQUUs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"]},"metadata":{},"sourceType":"module"}