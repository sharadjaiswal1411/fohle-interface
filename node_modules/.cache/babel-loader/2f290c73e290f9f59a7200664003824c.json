{"ast":null,"code":"import _regeneratorRuntime from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { GasDataArbitrum__factory } from '../../types/other/factories/GasDataArbitrum__factory';\nimport { GasPriceOracle__factory } from '../../types/other/factories/GasPriceOracle__factory';\nimport { ARB_GASINFO_ADDRESS, ChainId, log, OVM_GASPRICE_ADDRESS } from '../../util';\nexport var OptimismGasDataProvider = /*#__PURE__*/function () {\n  function OptimismGasDataProvider(chainId, multicall2Provider, gasPriceAddress) {\n    _classCallCheck(this, OptimismGasDataProvider);\n    this.chainId = chainId;\n    this.multicall2Provider = multicall2Provider;\n    if (chainId != ChainId.OPTIMISM && chainId != ChainId.OPTIMISTIC_KOVAN) {\n      throw new Error('This data provider is used only on optimism networks.');\n    }\n    this.gasOracleAddress = gasPriceAddress !== null && gasPriceAddress !== void 0 ? gasPriceAddress : OVM_GASPRICE_ADDRESS;\n  }\n  /**\n   * Gets the data constants needed to calculate the l1 security fee on Optimism.\n   * @returns An OptimismGasData object that includes the l1BaseFee,\n   * scalar, decimals, and overhead values.\n   */\n  _createClass(OptimismGasDataProvider, [{\n    key: \"getGasData\",\n    value: function () {\n      var _getGasData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _a, _b, _c, _d, funcNames, tx, l1BaseFee, scalar, decimals, overhead;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                funcNames = ['l1BaseFee', 'scalar', 'decimals', 'overhead'];\n                _context.next = 3;\n                return this.multicall2Provider.callMultipleFunctionsOnSameContract({\n                  address: this.gasOracleAddress,\n                  contractInterface: GasPriceOracle__factory.createInterface(),\n                  functionNames: funcNames\n                });\n              case 3:\n                tx = _context.sent;\n                if (!(!((_a = tx.results[0]) === null || _a === void 0 ? void 0 : _a.success) || !((_b = tx.results[1]) === null || _b === void 0 ? void 0 : _b.success) || !((_c = tx.results[2]) === null || _c === void 0 ? void 0 : _c.success) || !((_d = tx.results[3]) === null || _d === void 0 ? void 0 : _d.success))) {\n                  _context.next = 7;\n                  break;\n                }\n                log.info({\n                  results: tx.results\n                }, 'Failed to get gas constants data from the optimism gas oracle');\n                throw new Error('Failed to get gas constants data from the optimism gas oracle');\n              case 7:\n                l1BaseFee = tx.results[0].result;\n                scalar = tx.results[1].result;\n                decimals = tx.results[2].result;\n                overhead = tx.results[3].result;\n                return _context.abrupt(\"return\", {\n                  l1BaseFee: l1BaseFee[0],\n                  scalar: scalar[0],\n                  decimals: decimals[0],\n                  overhead: overhead[0]\n                });\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function getGasData() {\n        return _getGasData.apply(this, arguments);\n      }\n      return getGasData;\n    }()\n  }]);\n  return OptimismGasDataProvider;\n}();\nexport var ArbitrumGasDataProvider = /*#__PURE__*/function () {\n  function ArbitrumGasDataProvider(chainId, provider, gasDataAddress) {\n    _classCallCheck(this, ArbitrumGasDataProvider);\n    this.chainId = chainId;\n    this.provider = provider;\n    this.gasFeesAddress = gasDataAddress ? gasDataAddress : ARB_GASINFO_ADDRESS;\n  }\n  _createClass(ArbitrumGasDataProvider, [{\n    key: \"getGasData\",\n    value: function () {\n      var _getGasData2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var gasDataContract, gasData;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                gasDataContract = GasDataArbitrum__factory.connect(this.gasFeesAddress, this.provider);\n                _context2.next = 3;\n                return gasDataContract.getPricesInWei();\n              case 3:\n                gasData = _context2.sent;\n                return _context2.abrupt(\"return\", {\n                  perL2TxFee: gasData[0],\n                  perL1CalldataFee: gasData[1],\n                  perArbGasTotal: gasData[5]\n                });\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function getGasData() {\n        return _getGasData2.apply(this, arguments);\n      }\n      return getGasData;\n    }()\n  }]);\n  return ArbitrumGasDataProvider;\n}();","map":{"version":3,"sources":["../../../../src/providers/v3/gas-data-provider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { GasDataArbitrum__factory } from '../../types/other/factories/GasDataArbitrum__factory';\nimport { GasPriceOracle__factory } from '../../types/other/factories/GasPriceOracle__factory';\nimport { ARB_GASINFO_ADDRESS, ChainId, log, OVM_GASPRICE_ADDRESS, } from '../../util';\nexport class OptimismGasDataProvider {\n    constructor(chainId, multicall2Provider, gasPriceAddress) {\n        this.chainId = chainId;\n        this.multicall2Provider = multicall2Provider;\n        if (chainId != ChainId.OPTIMISM && chainId != ChainId.OPTIMISTIC_KOVAN) {\n            throw new Error('This data provider is used only on optimism networks.');\n        }\n        this.gasOracleAddress = gasPriceAddress !== null && gasPriceAddress !== void 0 ? gasPriceAddress : OVM_GASPRICE_ADDRESS;\n    }\n    /**\n     * Gets the data constants needed to calculate the l1 security fee on Optimism.\n     * @returns An OptimismGasData object that includes the l1BaseFee,\n     * scalar, decimals, and overhead values.\n     */\n    async getGasData() {\n        var _a, _b, _c, _d;\n        const funcNames = ['l1BaseFee', 'scalar', 'decimals', 'overhead'];\n        const tx = await this.multicall2Provider.callMultipleFunctionsOnSameContract({\n            address: this.gasOracleAddress,\n            contractInterface: GasPriceOracle__factory.createInterface(),\n            functionNames: funcNames,\n        });\n        if (!((_a = tx.results[0]) === null || _a === void 0 ? void 0 : _a.success) ||\n            !((_b = tx.results[1]) === null || _b === void 0 ? void 0 : _b.success) ||\n            !((_c = tx.results[2]) === null || _c === void 0 ? void 0 : _c.success) ||\n            !((_d = tx.results[3]) === null || _d === void 0 ? void 0 : _d.success)) {\n            log.info({ results: tx.results }, 'Failed to get gas constants data from the optimism gas oracle');\n            throw new Error('Failed to get gas constants data from the optimism gas oracle');\n        }\n        const { result: l1BaseFee } = tx.results[0];\n        const { result: scalar } = tx.results[1];\n        const { result: decimals } = tx.results[2];\n        const { result: overhead } = tx.results[3];\n        return {\n            l1BaseFee: l1BaseFee[0],\n            scalar: scalar[0],\n            decimals: decimals[0],\n            overhead: overhead[0],\n        };\n    }\n}\nexport class ArbitrumGasDataProvider {\n    constructor(chainId, provider, gasDataAddress) {\n        this.chainId = chainId;\n        this.provider = provider;\n        this.gasFeesAddress = gasDataAddress ? gasDataAddress : ARB_GASINFO_ADDRESS;\n    }\n    async getGasData() {\n        const gasDataContract = GasDataArbitrum__factory.connect(this.gasFeesAddress, this.provider);\n        const gasData = await gasDataContract.getPricesInWei();\n        return {\n            perL2TxFee: gasData[0],\n            perL1CalldataFee: gasData[1],\n            perArbGasTotal: gasData[5],\n        };\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2FzLWRhdGEtcHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvcHJvdmlkZXJzL3YzL2dhcy1kYXRhLXByb3ZpZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLHNEQUFzRCxDQUFDO0FBQ2hHLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLHFEQUFxRCxDQUFDO0FBQzlGLE9BQU8sRUFDTCxtQkFBbUIsRUFDbkIsT0FBTyxFQUNQLEdBQUcsRUFDSCxvQkFBb0IsR0FDckIsTUFBTSxZQUFZLENBQUM7QUF3QnBCLE1BQU0sT0FBTyx1QkFBdUI7SUFLbEMsWUFDWSxPQUFnQixFQUNoQixrQkFBc0MsRUFDaEQsZUFBd0I7UUFGZCxZQUFPLEdBQVAsT0FBTyxDQUFTO1FBQ2hCLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBb0I7UUFHaEQsSUFBSSxPQUFPLElBQUksT0FBTyxDQUFDLFFBQVEsSUFBSSxPQUFPLElBQUksT0FBTyxDQUFDLGdCQUFnQixFQUFFO1lBQ3RFLE1BQU0sSUFBSSxLQUFLLENBQUMsdURBQXVELENBQUMsQ0FBQztTQUMxRTtRQUNELElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxlQUFlLGFBQWYsZUFBZSxjQUFmLGVBQWUsR0FBSSxvQkFBb0IsQ0FBQztJQUNsRSxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNJLEtBQUssQ0FBQyxVQUFVOztRQUNyQixNQUFNLFNBQVMsR0FBRyxDQUFDLFdBQVcsRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQ2xFLE1BQU0sRUFBRSxHQUNOLE1BQU0sSUFBSSxDQUFDLGtCQUFrQixDQUFDLG1DQUFtQyxDQUcvRDtZQUNBLE9BQU8sRUFBRSxJQUFJLENBQUMsZ0JBQWdCO1lBQzlCLGlCQUFpQixFQUFFLHVCQUF1QixDQUFDLGVBQWUsRUFBRTtZQUM1RCxhQUFhLEVBQUUsU0FBUztTQUN6QixDQUFDLENBQUM7UUFFTCxJQUNFLENBQUMsQ0FBQSxNQUFBLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLDBDQUFFLE9BQU8sQ0FBQTtZQUN2QixDQUFDLENBQUEsTUFBQSxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQywwQ0FBRSxPQUFPLENBQUE7WUFDdkIsQ0FBQyxDQUFBLE1BQUEsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsMENBQUUsT0FBTyxDQUFBO1lBQ3ZCLENBQUMsQ0FBQSxNQUFBLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLDBDQUFFLE9BQU8sQ0FBQSxFQUN2QjtZQUNBLEdBQUcsQ0FBQyxJQUFJLENBQ04sRUFBRSxPQUFPLEVBQUUsRUFBRSxDQUFDLE9BQU8sRUFBRSxFQUN2QiwrREFBK0QsQ0FDaEUsQ0FBQztZQUNGLE1BQU0sSUFBSSxLQUFLLENBQ2IsK0RBQStELENBQ2hFLENBQUM7U0FDSDtRQUVELE1BQU0sRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRSxDQUFDLE9BQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM3QyxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxPQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLENBQUMsT0FBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzVDLE1BQU0sRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRSxDQUFDLE9BQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUU1QyxPQUFPO1lBQ0wsU0FBUyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUM7WUFDdkIsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDakIsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDckIsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUM7U0FDdEIsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQWFELE1BQU0sT0FBTyx1QkFBdUI7SUFLbEMsWUFDWSxPQUFnQixFQUNoQixRQUFzQixFQUNoQyxjQUF1QjtRQUZiLFlBQU8sR0FBUCxPQUFPLENBQVM7UUFDaEIsYUFBUSxHQUFSLFFBQVEsQ0FBYztRQUdoQyxJQUFJLENBQUMsY0FBYyxHQUFHLGNBQWMsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQztJQUM5RSxDQUFDO0lBRU0sS0FBSyxDQUFDLFVBQVU7UUFDckIsTUFBTSxlQUFlLEdBQUcsd0JBQXdCLENBQUMsT0FBTyxDQUN0RCxJQUFJLENBQUMsY0FBYyxFQUNuQixJQUFJLENBQUMsUUFBUSxDQUNkLENBQUM7UUFDRixNQUFNLE9BQU8sR0FBRyxNQUFNLGVBQWUsQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUN2RCxPQUFPO1lBQ0wsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDdEIsZ0JBQWdCLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUM1QixjQUFjLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztTQUMzQixDQUFDO0lBQ0osQ0FBQztDQUNGIn0="]},"metadata":{},"sourceType":"module"}