{"ast":null,"code":"import { ApolloClient, InMemoryCache } from '@apollo/client';\nexport const blockClient = new ApolloClient({\n  uri: 'https://api.thegraph.com/subgraphs/name/blocklytics/ethereum-blocks',\n  cache: new InMemoryCache(),\n  queryDeduplication: true,\n  defaultOptions: {\n    watchQuery: {\n      fetchPolicy: 'no-cache'\n    },\n    query: {\n      fetchPolicy: 'no-cache',\n      errorPolicy: 'all'\n    }\n  }\n});\nexport const client = new ApolloClient({\n  uri: 'https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v3',\n  cache: new InMemoryCache({\n    typePolicies: {\n      Token: {\n        // Singleton types that have no identifying field can use an empty\n        // array for their keyFields.\n        keyFields: false\n      },\n      Pool: {\n        // Singleton types that have no identifying field can use an empty\n        // array for their keyFields.\n        keyFields: false\n      }\n    }\n  }),\n  queryDeduplication: true,\n  defaultOptions: {\n    watchQuery: {\n      fetchPolicy: 'no-cache'\n    },\n    query: {\n      fetchPolicy: 'no-cache',\n      errorPolicy: 'all'\n    }\n  }\n});\nexport const arbitrumClient = new ApolloClient({\n  uri: 'https://api.thegraph.com/subgraphs/name/ianlapham/uniswap-arbitrum-one',\n  cache: new InMemoryCache({\n    typePolicies: {\n      Token: {\n        // Singleton types that have no identifying field can use an empty\n        // array for their keyFields.\n        keyFields: false\n      },\n      Pool: {\n        // Singleton types that have no identifying field can use an empty\n        // array for their keyFields.\n        keyFields: false\n      }\n    }\n  }),\n  queryDeduplication: true,\n  defaultOptions: {\n    watchQuery: {\n      fetchPolicy: 'cache-first'\n    },\n    query: {\n      fetchPolicy: 'cache-first',\n      errorPolicy: 'all'\n    }\n  }\n});\nexport const arbitrumBlockClient = new ApolloClient({\n  uri: 'https://api.thegraph.com/subgraphs/name/ianlapham/arbitrum-one-blocks',\n  cache: new InMemoryCache(),\n  queryDeduplication: true,\n  defaultOptions: {\n    watchQuery: {\n      fetchPolicy: 'cache-first'\n    },\n    query: {\n      fetchPolicy: 'cache-first',\n      errorPolicy: 'all'\n    }\n  }\n});\nexport const optimismClient = new ApolloClient({\n  uri: 'https://api.thegraph.com/subgraphs/name/ianlapham/optimism-post-regenesis',\n  cache: new InMemoryCache({\n    typePolicies: {\n      Token: {\n        // Singleton types that have no identifying field can use an empty\n        // array for their keyFields.\n        keyFields: false\n      },\n      Pool: {\n        // Singleton types that have no identifying field can use an empty\n        // array for their keyFields.\n        keyFields: false\n      }\n    }\n  }),\n  queryDeduplication: true,\n  defaultOptions: {\n    watchQuery: {\n      fetchPolicy: 'no-cache'\n    },\n    query: {\n      fetchPolicy: 'no-cache',\n      errorPolicy: 'all'\n    }\n  }\n});\nexport const optimismBlockClient = new ApolloClient({\n  uri: 'https://api.thegraph.com/subgraphs/name/ianlapham/uni-testing-subgraph',\n  cache: new InMemoryCache(),\n  queryDeduplication: true,\n  defaultOptions: {\n    watchQuery: {\n      fetchPolicy: 'cache-first'\n    },\n    query: {\n      fetchPolicy: 'cache-first',\n      errorPolicy: 'all'\n    }\n  }\n});\nexport const polygonClient = new ApolloClient({\n  uri: 'https://api.thegraph.com/subgraphs/name/ianlapham/uniswap-v3-polygon',\n  cache: new InMemoryCache({\n    typePolicies: {\n      Token: {\n        // Singleton types that have no identifying field can use an empty\n        // array for their keyFields.\n        keyFields: false\n      },\n      Pool: {\n        // Singleton types that have no identifying field can use an empty\n        // array for their keyFields.\n        keyFields: false\n      }\n    }\n  }),\n  queryDeduplication: true,\n  defaultOptions: {\n    watchQuery: {\n      fetchPolicy: 'no-cache'\n    },\n    query: {\n      fetchPolicy: 'no-cache',\n      errorPolicy: 'all'\n    }\n  }\n});\nexport const polygonBlockClient = new ApolloClient({\n  uri: 'https://api.thegraph.com/subgraphs/name/ianlapham/polygon-blocks',\n  cache: new InMemoryCache(),\n  queryDeduplication: true,\n  defaultOptions: {\n    watchQuery: {\n      fetchPolicy: 'cache-first'\n    },\n    query: {\n      fetchPolicy: 'cache-first',\n      errorPolicy: 'all'\n    }\n  }\n});\nexport const celoClient = new ApolloClient({\n  uri: 'https://api.thegraph.com/subgraphs/name/jesse-sawa/uniswap-celo',\n  cache: new InMemoryCache({\n    typePolicies: {\n      Token: {\n        // Singleton types that have no identifying field can use an empty\n        // array for their keyFields.\n        keyFields: false\n      },\n      Pool: {\n        // Singleton types that have no identifying field can use an empty\n        // array for their keyFields.\n        keyFields: false\n      }\n    }\n  }),\n  queryDeduplication: true,\n  defaultOptions: {\n    watchQuery: {\n      fetchPolicy: 'no-cache'\n    },\n    query: {\n      fetchPolicy: 'no-cache',\n      errorPolicy: 'all'\n    }\n  }\n});\nexport const celoBlockClient = new ApolloClient({\n  uri: 'https://api.thegraph.com/subgraphs/name/jesse-sawa/celo-blocks',\n  cache: new InMemoryCache(),\n  queryDeduplication: true,\n  defaultOptions: {\n    watchQuery: {\n      fetchPolicy: 'cache-first'\n    },\n    query: {\n      fetchPolicy: 'cache-first',\n      errorPolicy: 'all'\n    }\n  }\n});","map":{"version":3,"names":["ApolloClient","InMemoryCache","blockClient","uri","cache","queryDeduplication","defaultOptions","watchQuery","fetchPolicy","query","errorPolicy","client","typePolicies","Token","keyFields","Pool","arbitrumClient","arbitrumBlockClient","optimismClient","optimismBlockClient","polygonClient","polygonBlockClient","celoClient","celoBlockClient"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/apollo/client.ts"],"sourcesContent":["import { ApolloClient, InMemoryCache } from '@apollo/client'\n\n\n\nexport const blockClient = new ApolloClient({\n  uri: 'https://api.thegraph.com/subgraphs/name/blocklytics/ethereum-blocks',\n  cache: new InMemoryCache(),\n  queryDeduplication: true,\n  defaultOptions: {\n    watchQuery: {\n      fetchPolicy: 'no-cache',\n    },\n    query: {\n      fetchPolicy: 'no-cache',\n      errorPolicy: 'all',\n    },\n  },\n})\n\nexport const client = new ApolloClient({\n  uri: 'https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v3',\n  cache: new InMemoryCache({\n    typePolicies: {\n      Token: {\n        // Singleton types that have no identifying field can use an empty\n        // array for their keyFields.\n        keyFields: false,\n      },\n      Pool: {\n        // Singleton types that have no identifying field can use an empty\n        // array for their keyFields.\n        keyFields: false,\n      },\n    },\n  }),\n  queryDeduplication: true,\n  defaultOptions: {\n    watchQuery: {\n      fetchPolicy: 'no-cache',\n    },\n    query: {\n      fetchPolicy: 'no-cache',\n      errorPolicy: 'all',\n    },\n  },\n})\n\nexport const arbitrumClient = new ApolloClient({\n  uri: 'https://api.thegraph.com/subgraphs/name/ianlapham/uniswap-arbitrum-one',\n  cache: new InMemoryCache({\n    typePolicies: {\n      Token: {\n        // Singleton types that have no identifying field can use an empty\n        // array for their keyFields.\n        keyFields: false,\n      },\n      Pool: {\n        // Singleton types that have no identifying field can use an empty\n        // array for their keyFields.\n        keyFields: false,\n      },\n    },\n  }),\n  queryDeduplication: true,\n  defaultOptions: {\n    watchQuery: {\n      fetchPolicy: 'cache-first',\n    },\n    query: {\n      fetchPolicy: 'cache-first',\n      errorPolicy: 'all',\n    },\n  },\n})\n\nexport const arbitrumBlockClient = new ApolloClient({\n  uri: 'https://api.thegraph.com/subgraphs/name/ianlapham/arbitrum-one-blocks',\n  cache: new InMemoryCache(),\n  queryDeduplication: true,\n  defaultOptions: {\n    watchQuery: {\n      fetchPolicy: 'cache-first',\n    },\n    query: {\n      fetchPolicy: 'cache-first',\n      errorPolicy: 'all',\n    },\n  },\n})\n\nexport const optimismClient = new ApolloClient({\n  uri: 'https://api.thegraph.com/subgraphs/name/ianlapham/optimism-post-regenesis',\n  cache: new InMemoryCache({\n    typePolicies: {\n      Token: {\n        // Singleton types that have no identifying field can use an empty\n        // array for their keyFields.\n        keyFields: false,\n      },\n      Pool: {\n        // Singleton types that have no identifying field can use an empty\n        // array for their keyFields.\n        keyFields: false,\n      },\n    },\n  }),\n  queryDeduplication: true,\n  defaultOptions: {\n    watchQuery: {\n      fetchPolicy: 'no-cache',\n    },\n    query: {\n      fetchPolicy: 'no-cache',\n      errorPolicy: 'all',\n    },\n  },\n})\n\nexport const optimismBlockClient = new ApolloClient({\n  uri: 'https://api.thegraph.com/subgraphs/name/ianlapham/uni-testing-subgraph',\n  cache: new InMemoryCache(),\n  queryDeduplication: true,\n  defaultOptions: {\n    watchQuery: {\n      fetchPolicy: 'cache-first',\n    },\n    query: {\n      fetchPolicy: 'cache-first',\n      errorPolicy: 'all',\n    },\n  },\n})\n\nexport const polygonClient = new ApolloClient({\n  uri: 'https://api.thegraph.com/subgraphs/name/ianlapham/uniswap-v3-polygon',\n  cache: new InMemoryCache({\n    typePolicies: {\n      Token: {\n        // Singleton types that have no identifying field can use an empty\n        // array for their keyFields.\n        keyFields: false,\n      },\n      Pool: {\n        // Singleton types that have no identifying field can use an empty\n        // array for their keyFields.\n        keyFields: false,\n      },\n    },\n  }),\n  queryDeduplication: true,\n  defaultOptions: {\n    watchQuery: {\n      fetchPolicy: 'no-cache',\n    },\n    query: {\n      fetchPolicy: 'no-cache',\n      errorPolicy: 'all',\n    },\n  },\n})\n\nexport const polygonBlockClient = new ApolloClient({\n  uri: 'https://api.thegraph.com/subgraphs/name/ianlapham/polygon-blocks',\n  cache: new InMemoryCache(),\n  queryDeduplication: true,\n  defaultOptions: {\n    watchQuery: {\n      fetchPolicy: 'cache-first',\n    },\n    query: {\n      fetchPolicy: 'cache-first',\n      errorPolicy: 'all',\n    },\n  },\n})\n\nexport const celoClient = new ApolloClient({\n  uri: 'https://api.thegraph.com/subgraphs/name/jesse-sawa/uniswap-celo',\n  cache: new InMemoryCache({\n    typePolicies: {\n      Token: {\n        // Singleton types that have no identifying field can use an empty\n        // array for their keyFields.\n        keyFields: false,\n      },\n      Pool: {\n        // Singleton types that have no identifying field can use an empty\n        // array for their keyFields.\n        keyFields: false,\n      },\n    },\n  }),\n  queryDeduplication: true,\n  defaultOptions: {\n    watchQuery: {\n      fetchPolicy: 'no-cache',\n    },\n    query: {\n      fetchPolicy: 'no-cache',\n      errorPolicy: 'all',\n    },\n  },\n})\n\nexport const celoBlockClient = new ApolloClient({\n  uri: 'https://api.thegraph.com/subgraphs/name/jesse-sawa/celo-blocks',\n  cache: new InMemoryCache(),\n  queryDeduplication: true,\n  defaultOptions: {\n    watchQuery: {\n      fetchPolicy: 'cache-first',\n    },\n    query: {\n      fetchPolicy: 'cache-first',\n      errorPolicy: 'all',\n    },\n  },\n})\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}