{"ast":null,"code":"import { isInstanceOf, isString } from './is.js';\nimport { logger, CONSOLE_LEVELS } from './logger.js';\nimport { fill } from './object.js';\nimport { getFunctionName } from './stacktrace.js';\nimport { supportsNativeFetch, supportsHistory } from './supports.js';\nimport { getGlobalObject } from './worldwide.js';\n\n// eslint-disable-next-line deprecation/deprecation\nconst WINDOW = getGlobalObject();\n\n/**\n * Instrument native APIs to call handlers that can be used to create breadcrumbs, APM spans etc.\n *  - Console API\n *  - Fetch API\n *  - XHR API\n *  - History API\n *  - DOM API (click/typing)\n *  - Error API\n *  - UnhandledRejection API\n */\n\nconst handlers = {};\nconst instrumented = {};\n\n/** Instruments given API */\nfunction instrument(type) {\n  if (instrumented[type]) {\n    return;\n  }\n  instrumented[type] = true;\n  switch (type) {\n    case 'console':\n      instrumentConsole();\n      break;\n    case 'dom':\n      instrumentDOM();\n      break;\n    case 'xhr':\n      instrumentXHR();\n      break;\n    case 'fetch':\n      instrumentFetch();\n      break;\n    case 'history':\n      instrumentHistory();\n      break;\n    case 'error':\n      instrumentError();\n      break;\n    case 'unhandledrejection':\n      instrumentUnhandledRejection();\n      break;\n    default:\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.warn('unknown instrumentation type:', type);\n      return;\n  }\n}\n\n/**\n * Add handler that will be called when given type of instrumentation triggers.\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nfunction addInstrumentationHandler(type, callback) {\n  handlers[type] = handlers[type] || [];\n  handlers[type].push(callback);\n  instrument(type);\n}\n\n/** JSDoc */\nfunction triggerHandlers(type, data) {\n  if (!type || !handlers[type]) {\n    return;\n  }\n  for (const handler of handlers[type] || []) {\n    try {\n      handler(data);\n    } catch (e) {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.error(`Error while triggering instrumentation handler.\\nType: ${type}\\nName: ${getFunctionName(handler)}\\nError:`, e);\n    }\n  }\n}\n\n/** JSDoc */\nfunction instrumentConsole() {\n  if (!('console' in WINDOW)) {\n    return;\n  }\n  CONSOLE_LEVELS.forEach(function (level) {\n    if (!(level in WINDOW.console)) {\n      return;\n    }\n    fill(WINDOW.console, level, function (originalConsoleMethod) {\n      return function () {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        triggerHandlers('console', {\n          args,\n          level\n        });\n\n        // this fails for some browsers. :(\n        if (originalConsoleMethod) {\n          originalConsoleMethod.apply(WINDOW.console, args);\n        }\n      };\n    });\n  });\n}\n\n/** JSDoc */\nfunction instrumentFetch() {\n  if (!supportsNativeFetch()) {\n    return;\n  }\n  fill(WINDOW, 'fetch', function (originalFetch) {\n    return function () {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n      const handlerData = {\n        args,\n        fetchData: {\n          method: getFetchMethod(args),\n          url: getFetchUrl(args)\n        },\n        startTimestamp: Date.now()\n      };\n      triggerHandlers('fetch', {\n        ...handlerData\n      });\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      return originalFetch.apply(WINDOW, args).then(response => {\n        triggerHandlers('fetch', {\n          ...handlerData,\n          endTimestamp: Date.now(),\n          response\n        });\n        return response;\n      }, error => {\n        triggerHandlers('fetch', {\n          ...handlerData,\n          endTimestamp: Date.now(),\n          error\n        });\n        // NOTE: If you are a Sentry user, and you are seeing this stack frame,\n        //       it means the sentry.javascript SDK caught an error invoking your application code.\n        //       This is expected behavior and NOT indicative of a bug with sentry.javascript.\n        throw error;\n      });\n    };\n  });\n}\n\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/** Extract `method` from fetch call arguments */\nfunction getFetchMethod() {\n  let fetchArgs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  if ('Request' in WINDOW && isInstanceOf(fetchArgs[0], Request) && fetchArgs[0].method) {\n    return String(fetchArgs[0].method).toUpperCase();\n  }\n  if (fetchArgs[1] && fetchArgs[1].method) {\n    return String(fetchArgs[1].method).toUpperCase();\n  }\n  return 'GET';\n}\n\n/** Extract `url` from fetch call arguments */\nfunction getFetchUrl() {\n  let fetchArgs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  if (typeof fetchArgs[0] === 'string') {\n    return fetchArgs[0];\n  }\n  if ('Request' in WINDOW && isInstanceOf(fetchArgs[0], Request)) {\n    return fetchArgs[0].url;\n  }\n  return String(fetchArgs[0]);\n}\n/* eslint-enable @typescript-eslint/no-unsafe-member-access */\n\n/** JSDoc */\nfunction instrumentXHR() {\n  if (!('XMLHttpRequest' in WINDOW)) {\n    return;\n  }\n  const xhrproto = XMLHttpRequest.prototype;\n  fill(xhrproto, 'open', function (originalOpen) {\n    return function () {\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      const xhr = this;\n      const url = args[1];\n      const xhrInfo = xhr.__sentry_xhr__ = {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        method: isString(args[0]) ? args[0].toUpperCase() : args[0],\n        url: args[1]\n      };\n\n      // if Sentry key appears in URL, don't capture it as a request\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      if (isString(url) && xhrInfo.method === 'POST' && url.match(/sentry_key/)) {\n        xhr.__sentry_own_request__ = true;\n      }\n      const onreadystatechangeHandler = function () {\n        if (xhr.readyState === 4) {\n          try {\n            // touching statusCode in some platforms throws\n            // an exception\n            xhrInfo.status_code = xhr.status;\n          } catch (e) {\n            /* do nothing */\n          }\n          triggerHandlers('xhr', {\n            args,\n            endTimestamp: Date.now(),\n            startTimestamp: Date.now(),\n            xhr\n          });\n        }\n      };\n      if ('onreadystatechange' in xhr && typeof xhr.onreadystatechange === 'function') {\n        fill(xhr, 'onreadystatechange', function (original) {\n          return function () {\n            onreadystatechangeHandler();\n            for (var _len4 = arguments.length, readyStateArgs = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n              readyStateArgs[_key4] = arguments[_key4];\n            }\n            return original.apply(xhr, readyStateArgs);\n          };\n        });\n      } else {\n        xhr.addEventListener('readystatechange', onreadystatechangeHandler);\n      }\n      return originalOpen.apply(xhr, args);\n    };\n  });\n  fill(xhrproto, 'send', function (originalSend) {\n    return function () {\n      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n        args[_key5] = arguments[_key5];\n      }\n      if (this.__sentry_xhr__ && args[0] !== undefined) {\n        this.__sentry_xhr__.body = args[0];\n      }\n      triggerHandlers('xhr', {\n        args,\n        startTimestamp: Date.now(),\n        xhr: this\n      });\n      return originalSend.apply(this, args);\n    };\n  });\n}\nlet lastHref;\n\n/** JSDoc */\nfunction instrumentHistory() {\n  if (!supportsHistory()) {\n    return;\n  }\n  const oldOnPopState = WINDOW.onpopstate;\n  WINDOW.onpopstate = function () {\n    const to = WINDOW.location.href;\n    // keep track of the current URL state, as we always receive only the updated state\n    const from = lastHref;\n    lastHref = to;\n    triggerHandlers('history', {\n      from,\n      to\n    });\n    if (oldOnPopState) {\n      // Apparently this can throw in Firefox when incorrectly implemented plugin is installed.\n      // https://github.com/getsentry/sentry-javascript/issues/3344\n      // https://github.com/bugsnag/bugsnag-js/issues/469\n      try {\n        for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n          args[_key6] = arguments[_key6];\n        }\n        return oldOnPopState.apply(this, args);\n      } catch (_oO) {\n        // no-empty\n      }\n    }\n  };\n\n  /** @hidden */\n  function historyReplacementFunction(originalHistoryFunction) {\n    return function () {\n      for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n        args[_key7] = arguments[_key7];\n      }\n      const url = args.length > 2 ? args[2] : undefined;\n      if (url) {\n        // coerce to string (this is what pushState does)\n        const from = lastHref;\n        const to = String(url);\n        // keep track of the current URL state, as we always receive only the updated state\n        lastHref = to;\n        triggerHandlers('history', {\n          from,\n          to\n        });\n      }\n      return originalHistoryFunction.apply(this, args);\n    };\n  }\n  fill(WINDOW.history, 'pushState', historyReplacementFunction);\n  fill(WINDOW.history, 'replaceState', historyReplacementFunction);\n}\nconst debounceDuration = 1000;\nlet debounceTimerID;\nlet lastCapturedEvent;\n\n/**\n * Decide whether the current event should finish the debounce of previously captured one.\n * @param previous previously captured event\n * @param current event to be captured\n */\nfunction shouldShortcircuitPreviousDebounce(previous, current) {\n  // If there was no previous event, it should always be swapped for the new one.\n  if (!previous) {\n    return true;\n  }\n\n  // If both events have different type, then user definitely performed two separate actions. e.g. click + keypress.\n  if (previous.type !== current.type) {\n    return true;\n  }\n  try {\n    // If both events have the same type, it's still possible that actions were performed on different targets.\n    // e.g. 2 clicks on different buttons.\n    if (previous.target !== current.target) {\n      return true;\n    }\n  } catch (e) {\n    // just accessing `target` property can throw an exception in some rare circumstances\n    // see: https://github.com/getsentry/sentry-javascript/issues/838\n  }\n\n  // If both events have the same type _and_ same `target` (an element which triggered an event, _not necessarily_\n  // to which an event listener was attached), we treat them as the same action, as we want to capture\n  // only one breadcrumb. e.g. multiple clicks on the same button, or typing inside a user input box.\n  return false;\n}\n\n/**\n * Decide whether an event should be captured.\n * @param event event to be captured\n */\nfunction shouldSkipDOMEvent(event) {\n  // We are only interested in filtering `keypress` events for now.\n  if (event.type !== 'keypress') {\n    return false;\n  }\n  try {\n    const target = event.target;\n    if (!target || !target.tagName) {\n      return true;\n    }\n\n    // Only consider keypress events on actual input elements. This will disregard keypresses targeting body\n    // e.g.tabbing through elements, hotkeys, etc.\n    if (target.tagName === 'INPUT' || target.tagName === 'TEXTAREA' || target.isContentEditable) {\n      return false;\n    }\n  } catch (e) {\n    // just accessing `target` property can throw an exception in some rare circumstances\n    // see: https://github.com/getsentry/sentry-javascript/issues/838\n  }\n  return true;\n}\n\n/**\n * Wraps addEventListener to capture UI breadcrumbs\n * @param handler function that will be triggered\n * @param globalListener indicates whether event was captured by the global event listener\n * @returns wrapped breadcrumb events handler\n * @hidden\n */\nfunction makeDOMEventHandler(handler) {\n  let globalListener = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return event => {\n    // It's possible this handler might trigger multiple times for the same\n    // event (e.g. event propagation through node ancestors).\n    // Ignore if we've already captured that event.\n    if (!event || lastCapturedEvent === event) {\n      return;\n    }\n\n    // We always want to skip _some_ events.\n    if (shouldSkipDOMEvent(event)) {\n      return;\n    }\n    const name = event.type === 'keypress' ? 'input' : event.type;\n\n    // If there is no debounce timer, it means that we can safely capture the new event and store it for future comparisons.\n    if (debounceTimerID === undefined) {\n      handler({\n        event: event,\n        name,\n        global: globalListener\n      });\n      lastCapturedEvent = event;\n    }\n    // If there is a debounce awaiting, see if the new event is different enough to treat it as a unique one.\n    // If that's the case, emit the previous event and store locally the newly-captured DOM event.\n    else if (shouldShortcircuitPreviousDebounce(lastCapturedEvent, event)) {\n      handler({\n        event: event,\n        name,\n        global: globalListener\n      });\n      lastCapturedEvent = event;\n    }\n\n    // Start a new debounce timer that will prevent us from capturing multiple events that should be grouped together.\n    clearTimeout(debounceTimerID);\n    debounceTimerID = WINDOW.setTimeout(() => {\n      debounceTimerID = undefined;\n    }, debounceDuration);\n  };\n}\n\n/** JSDoc */\nfunction instrumentDOM() {\n  if (!('document' in WINDOW)) {\n    return;\n  }\n\n  // Make it so that any click or keypress that is unhandled / bubbled up all the way to the document triggers our dom\n  // handlers. (Normally we have only one, which captures a breadcrumb for each click or keypress.) Do this before\n  // we instrument `addEventListener` so that we don't end up attaching this handler twice.\n  const triggerDOMHandler = triggerHandlers.bind(null, 'dom');\n  const globalDOMEventHandler = makeDOMEventHandler(triggerDOMHandler, true);\n  WINDOW.document.addEventListener('click', globalDOMEventHandler, false);\n  WINDOW.document.addEventListener('keypress', globalDOMEventHandler, false);\n\n  // After hooking into click and keypress events bubbled up to `document`, we also hook into user-handled\n  // clicks & keypresses, by adding an event listener of our own to any element to which they add a listener. That\n  // way, whenever one of their handlers is triggered, ours will be, too. (This is needed because their handler\n  // could potentially prevent the event from bubbling up to our global listeners. This way, our handler are still\n  // guaranteed to fire at least once.)\n  ['EventTarget', 'Node'].forEach(target => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    const proto = WINDOW[target] && WINDOW[target].prototype;\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, no-prototype-builtins\n    if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty('addEventListener')) {\n      return;\n    }\n    fill(proto, 'addEventListener', function (originalAddEventListener) {\n      return function (type, listener, options) {\n        if (type === 'click' || type == 'keypress') {\n          try {\n            const el = this;\n            const handlers = el.__sentry_instrumentation_handlers__ = el.__sentry_instrumentation_handlers__ || {};\n            const handlerForType = handlers[type] = handlers[type] || {\n              refCount: 0\n            };\n            if (!handlerForType.handler) {\n              const handler = makeDOMEventHandler(triggerDOMHandler);\n              handlerForType.handler = handler;\n              originalAddEventListener.call(this, type, handler, options);\n            }\n            handlerForType.refCount += 1;\n          } catch (e) {\n            // Accessing dom properties is always fragile.\n            // Also allows us to skip `addEventListenrs` calls with no proper `this` context.\n          }\n        }\n        return originalAddEventListener.call(this, type, listener, options);\n      };\n    });\n    fill(proto, 'removeEventListener', function (originalRemoveEventListener) {\n      return function (type, listener, options) {\n        if (type === 'click' || type == 'keypress') {\n          try {\n            const el = this;\n            const handlers = el.__sentry_instrumentation_handlers__ || {};\n            const handlerForType = handlers[type];\n            if (handlerForType) {\n              handlerForType.refCount -= 1;\n              // If there are no longer any custom handlers of the current type on this element, we can remove ours, too.\n              if (handlerForType.refCount <= 0) {\n                originalRemoveEventListener.call(this, type, handlerForType.handler, options);\n                handlerForType.handler = undefined;\n                delete handlers[type]; // eslint-disable-line @typescript-eslint/no-dynamic-delete\n              }\n\n              // If there are no longer any custom handlers of any type on this element, cleanup everything.\n              if (Object.keys(handlers).length === 0) {\n                delete el.__sentry_instrumentation_handlers__;\n              }\n            }\n          } catch (e) {\n            // Accessing dom properties is always fragile.\n            // Also allows us to skip `addEventListenrs` calls with no proper `this` context.\n          }\n        }\n        return originalRemoveEventListener.call(this, type, listener, options);\n      };\n    });\n  });\n}\nlet _oldOnErrorHandler = null;\n/** JSDoc */\nfunction instrumentError() {\n  _oldOnErrorHandler = WINDOW.onerror;\n  WINDOW.onerror = function (msg, url, line, column, error) {\n    triggerHandlers('error', {\n      column,\n      error,\n      line,\n      msg,\n      url\n    });\n    if (_oldOnErrorHandler) {\n      // eslint-disable-next-line prefer-rest-params\n      return _oldOnErrorHandler.apply(this, arguments);\n    }\n    return false;\n  };\n}\nlet _oldOnUnhandledRejectionHandler = null;\n/** JSDoc */\nfunction instrumentUnhandledRejection() {\n  _oldOnUnhandledRejectionHandler = WINDOW.onunhandledrejection;\n  WINDOW.onunhandledrejection = function (e) {\n    triggerHandlers('unhandledrejection', e);\n    if (_oldOnUnhandledRejectionHandler) {\n      // eslint-disable-next-line prefer-rest-params\n      return _oldOnUnhandledRejectionHandler.apply(this, arguments);\n    }\n    return true;\n  };\n}\nexport { addInstrumentationHandler };","map":{"version":3,"sources":["../../src/instrument.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable max-lines */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/ban-types */\nimport { WrappedFunction } from '@sentry/types';\n\nimport { isInstanceOf, isString } from './is';\nimport { CONSOLE_LEVELS, logger } from './logger';\nimport { fill } from './object';\nimport { getFunctionName } from './stacktrace';\nimport { supportsHistory, supportsNativeFetch } from './supports';\nimport { getGlobalObject } from './worldwide';\n\n// eslint-disable-next-line deprecation/deprecation\nconst WINDOW = getGlobalObject<Window>();\n\nexport type InstrumentHandlerType =\n  | 'console'\n  | 'dom'\n  | 'fetch'\n  | 'history'\n  | 'sentry'\n  | 'xhr'\n  | 'error'\n  | 'unhandledrejection';\nexport type InstrumentHandlerCallback = (data: any) => void;\n\n/**\n * Instrument native APIs to call handlers that can be used to create breadcrumbs, APM spans etc.\n *  - Console API\n *  - Fetch API\n *  - XHR API\n *  - History API\n *  - DOM API (click/typing)\n *  - Error API\n *  - UnhandledRejection API\n */\n\nconst handlers: { [key in InstrumentHandlerType]?: InstrumentHandlerCallback[] } = {};\nconst instrumented: { [key in InstrumentHandlerType]?: boolean } = {};\n\n/** Instruments given API */\nfunction instrument(type: InstrumentHandlerType): void {\n  if (instrumented[type]) {\n    return;\n  }\n\n  instrumented[type] = true;\n\n  switch (type) {\n    case 'console':\n      instrumentConsole();\n      break;\n    case 'dom':\n      instrumentDOM();\n      break;\n    case 'xhr':\n      instrumentXHR();\n      break;\n    case 'fetch':\n      instrumentFetch();\n      break;\n    case 'history':\n      instrumentHistory();\n      break;\n    case 'error':\n      instrumentError();\n      break;\n    case 'unhandledrejection':\n      instrumentUnhandledRejection();\n      break;\n    default:\n      __DEBUG_BUILD__ && logger.warn('unknown instrumentation type:', type);\n      return;\n  }\n}\n\n/**\n * Add handler that will be called when given type of instrumentation triggers.\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nexport function addInstrumentationHandler(type: InstrumentHandlerType, callback: InstrumentHandlerCallback): void {\n  handlers[type] = handlers[type] || [];\n  (handlers[type] as InstrumentHandlerCallback[]).push(callback);\n  instrument(type);\n}\n\n/** JSDoc */\nfunction triggerHandlers(type: InstrumentHandlerType, data: any): void {\n  if (!type || !handlers[type]) {\n    return;\n  }\n\n  for (const handler of handlers[type] || []) {\n    try {\n      handler(data);\n    } catch (e) {\n      __DEBUG_BUILD__ &&\n        logger.error(\n          `Error while triggering instrumentation handler.\\nType: ${type}\\nName: ${getFunctionName(handler)}\\nError:`,\n          e,\n        );\n    }\n  }\n}\n\n/** JSDoc */\nfunction instrumentConsole(): void {\n  if (!('console' in WINDOW)) {\n    return;\n  }\n\n  CONSOLE_LEVELS.forEach(function (level: string): void {\n    if (!(level in WINDOW.console)) {\n      return;\n    }\n\n    fill(WINDOW.console, level, function (originalConsoleMethod: () => any): Function {\n      return function (...args: any[]): void {\n        triggerHandlers('console', { args, level });\n\n        // this fails for some browsers. :(\n        if (originalConsoleMethod) {\n          originalConsoleMethod.apply(WINDOW.console, args);\n        }\n      };\n    });\n  });\n}\n\n/** JSDoc */\nfunction instrumentFetch(): void {\n  if (!supportsNativeFetch()) {\n    return;\n  }\n\n  fill(WINDOW, 'fetch', function (originalFetch: () => void): () => void {\n    return function (...args: any[]): void {\n      const handlerData = {\n        args,\n        fetchData: {\n          method: getFetchMethod(args),\n          url: getFetchUrl(args),\n        },\n        startTimestamp: Date.now(),\n      };\n\n      triggerHandlers('fetch', {\n        ...handlerData,\n      });\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      return originalFetch.apply(WINDOW, args).then(\n        (response: Response) => {\n          triggerHandlers('fetch', {\n            ...handlerData,\n            endTimestamp: Date.now(),\n            response,\n          });\n          return response;\n        },\n        (error: Error) => {\n          triggerHandlers('fetch', {\n            ...handlerData,\n            endTimestamp: Date.now(),\n            error,\n          });\n          // NOTE: If you are a Sentry user, and you are seeing this stack frame,\n          //       it means the sentry.javascript SDK caught an error invoking your application code.\n          //       This is expected behavior and NOT indicative of a bug with sentry.javascript.\n          throw error;\n        },\n      );\n    };\n  });\n}\n\ntype XHRSendInput = null | Blob | BufferSource | FormData | URLSearchParams | string;\n\n/** JSDoc */\ninterface SentryWrappedXMLHttpRequest extends XMLHttpRequest {\n  [key: string]: any;\n  __sentry_xhr__?: {\n    method?: string;\n    url?: string;\n    status_code?: number;\n    body?: XHRSendInput;\n  };\n}\n\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/** Extract `method` from fetch call arguments */\nfunction getFetchMethod(fetchArgs: any[] = []): string {\n  if ('Request' in WINDOW && isInstanceOf(fetchArgs[0], Request) && fetchArgs[0].method) {\n    return String(fetchArgs[0].method).toUpperCase();\n  }\n  if (fetchArgs[1] && fetchArgs[1].method) {\n    return String(fetchArgs[1].method).toUpperCase();\n  }\n  return 'GET';\n}\n\n/** Extract `url` from fetch call arguments */\nfunction getFetchUrl(fetchArgs: any[] = []): string {\n  if (typeof fetchArgs[0] === 'string') {\n    return fetchArgs[0];\n  }\n  if ('Request' in WINDOW && isInstanceOf(fetchArgs[0], Request)) {\n    return fetchArgs[0].url;\n  }\n  return String(fetchArgs[0]);\n}\n/* eslint-enable @typescript-eslint/no-unsafe-member-access */\n\n/** JSDoc */\nfunction instrumentXHR(): void {\n  if (!('XMLHttpRequest' in WINDOW)) {\n    return;\n  }\n\n  const xhrproto = XMLHttpRequest.prototype;\n\n  fill(xhrproto, 'open', function (originalOpen: () => void): () => void {\n    return function (this: SentryWrappedXMLHttpRequest, ...args: any[]): void {\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      const xhr = this;\n      const url = args[1];\n      const xhrInfo: SentryWrappedXMLHttpRequest['__sentry_xhr__'] = (xhr.__sentry_xhr__ = {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        method: isString(args[0]) ? args[0].toUpperCase() : args[0],\n        url: args[1],\n      });\n\n      // if Sentry key appears in URL, don't capture it as a request\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      if (isString(url) && xhrInfo.method === 'POST' && url.match(/sentry_key/)) {\n        xhr.__sentry_own_request__ = true;\n      }\n\n      const onreadystatechangeHandler = function (): void {\n        if (xhr.readyState === 4) {\n          try {\n            // touching statusCode in some platforms throws\n            // an exception\n            xhrInfo.status_code = xhr.status;\n          } catch (e) {\n            /* do nothing */\n          }\n\n          triggerHandlers('xhr', {\n            args,\n            endTimestamp: Date.now(),\n            startTimestamp: Date.now(),\n            xhr,\n          });\n        }\n      };\n\n      if ('onreadystatechange' in xhr && typeof xhr.onreadystatechange === 'function') {\n        fill(xhr, 'onreadystatechange', function (original: WrappedFunction): Function {\n          return function (...readyStateArgs: any[]): void {\n            onreadystatechangeHandler();\n            return original.apply(xhr, readyStateArgs);\n          };\n        });\n      } else {\n        xhr.addEventListener('readystatechange', onreadystatechangeHandler);\n      }\n\n      return originalOpen.apply(xhr, args);\n    };\n  });\n\n  fill(xhrproto, 'send', function (originalSend: () => void): () => void {\n    return function (this: SentryWrappedXMLHttpRequest, ...args: any[]): void {\n      if (this.__sentry_xhr__ && args[0] !== undefined) {\n        this.__sentry_xhr__.body = args[0];\n      }\n\n      triggerHandlers('xhr', {\n        args,\n        startTimestamp: Date.now(),\n        xhr: this,\n      });\n\n      return originalSend.apply(this, args);\n    };\n  });\n}\n\nlet lastHref: string;\n\n/** JSDoc */\nfunction instrumentHistory(): void {\n  if (!supportsHistory()) {\n    return;\n  }\n\n  const oldOnPopState = WINDOW.onpopstate;\n  WINDOW.onpopstate = function (this: WindowEventHandlers, ...args: any[]): any {\n    const to = WINDOW.location.href;\n    // keep track of the current URL state, as we always receive only the updated state\n    const from = lastHref;\n    lastHref = to;\n    triggerHandlers('history', {\n      from,\n      to,\n    });\n    if (oldOnPopState) {\n      // Apparently this can throw in Firefox when incorrectly implemented plugin is installed.\n      // https://github.com/getsentry/sentry-javascript/issues/3344\n      // https://github.com/bugsnag/bugsnag-js/issues/469\n      try {\n        return oldOnPopState.apply(this, args);\n      } catch (_oO) {\n        // no-empty\n      }\n    }\n  };\n\n  /** @hidden */\n  function historyReplacementFunction(originalHistoryFunction: () => void): () => void {\n    return function (this: History, ...args: any[]): void {\n      const url = args.length > 2 ? args[2] : undefined;\n      if (url) {\n        // coerce to string (this is what pushState does)\n        const from = lastHref;\n        const to = String(url);\n        // keep track of the current URL state, as we always receive only the updated state\n        lastHref = to;\n        triggerHandlers('history', {\n          from,\n          to,\n        });\n      }\n      return originalHistoryFunction.apply(this, args);\n    };\n  }\n\n  fill(WINDOW.history, 'pushState', historyReplacementFunction);\n  fill(WINDOW.history, 'replaceState', historyReplacementFunction);\n}\n\nconst debounceDuration = 1000;\nlet debounceTimerID: number | undefined;\nlet lastCapturedEvent: Event | undefined;\n\n/**\n * Decide whether the current event should finish the debounce of previously captured one.\n * @param previous previously captured event\n * @param current event to be captured\n */\nfunction shouldShortcircuitPreviousDebounce(previous: Event | undefined, current: Event): boolean {\n  // If there was no previous event, it should always be swapped for the new one.\n  if (!previous) {\n    return true;\n  }\n\n  // If both events have different type, then user definitely performed two separate actions. e.g. click + keypress.\n  if (previous.type !== current.type) {\n    return true;\n  }\n\n  try {\n    // If both events have the same type, it's still possible that actions were performed on different targets.\n    // e.g. 2 clicks on different buttons.\n    if (previous.target !== current.target) {\n      return true;\n    }\n  } catch (e) {\n    // just accessing `target` property can throw an exception in some rare circumstances\n    // see: https://github.com/getsentry/sentry-javascript/issues/838\n  }\n\n  // If both events have the same type _and_ same `target` (an element which triggered an event, _not necessarily_\n  // to which an event listener was attached), we treat them as the same action, as we want to capture\n  // only one breadcrumb. e.g. multiple clicks on the same button, or typing inside a user input box.\n  return false;\n}\n\n/**\n * Decide whether an event should be captured.\n * @param event event to be captured\n */\nfunction shouldSkipDOMEvent(event: Event): boolean {\n  // We are only interested in filtering `keypress` events for now.\n  if (event.type !== 'keypress') {\n    return false;\n  }\n\n  try {\n    const target = event.target as HTMLElement;\n\n    if (!target || !target.tagName) {\n      return true;\n    }\n\n    // Only consider keypress events on actual input elements. This will disregard keypresses targeting body\n    // e.g.tabbing through elements, hotkeys, etc.\n    if (target.tagName === 'INPUT' || target.tagName === 'TEXTAREA' || target.isContentEditable) {\n      return false;\n    }\n  } catch (e) {\n    // just accessing `target` property can throw an exception in some rare circumstances\n    // see: https://github.com/getsentry/sentry-javascript/issues/838\n  }\n\n  return true;\n}\n\n/**\n * Wraps addEventListener to capture UI breadcrumbs\n * @param handler function that will be triggered\n * @param globalListener indicates whether event was captured by the global event listener\n * @returns wrapped breadcrumb events handler\n * @hidden\n */\nfunction makeDOMEventHandler(handler: Function, globalListener: boolean = false): (event: Event) => void {\n  return (event: Event): void => {\n    // It's possible this handler might trigger multiple times for the same\n    // event (e.g. event propagation through node ancestors).\n    // Ignore if we've already captured that event.\n    if (!event || lastCapturedEvent === event) {\n      return;\n    }\n\n    // We always want to skip _some_ events.\n    if (shouldSkipDOMEvent(event)) {\n      return;\n    }\n\n    const name = event.type === 'keypress' ? 'input' : event.type;\n\n    // If there is no debounce timer, it means that we can safely capture the new event and store it for future comparisons.\n    if (debounceTimerID === undefined) {\n      handler({\n        event: event,\n        name,\n        global: globalListener,\n      });\n      lastCapturedEvent = event;\n    }\n    // If there is a debounce awaiting, see if the new event is different enough to treat it as a unique one.\n    // If that's the case, emit the previous event and store locally the newly-captured DOM event.\n    else if (shouldShortcircuitPreviousDebounce(lastCapturedEvent, event)) {\n      handler({\n        event: event,\n        name,\n        global: globalListener,\n      });\n      lastCapturedEvent = event;\n    }\n\n    // Start a new debounce timer that will prevent us from capturing multiple events that should be grouped together.\n    clearTimeout(debounceTimerID);\n    debounceTimerID = WINDOW.setTimeout(() => {\n      debounceTimerID = undefined;\n    }, debounceDuration);\n  };\n}\n\ntype AddEventListener = (\n  type: string,\n  listener: EventListenerOrEventListenerObject,\n  options?: boolean | AddEventListenerOptions,\n) => void;\ntype RemoveEventListener = (\n  type: string,\n  listener: EventListenerOrEventListenerObject,\n  options?: boolean | EventListenerOptions,\n) => void;\n\ntype InstrumentedElement = Element & {\n  __sentry_instrumentation_handlers__?: {\n    [key in 'click' | 'keypress']?: {\n      handler?: Function;\n      /** The number of custom listeners attached to this element */\n      refCount: number;\n    };\n  };\n};\n\n/** JSDoc */\nfunction instrumentDOM(): void {\n  if (!('document' in WINDOW)) {\n    return;\n  }\n\n  // Make it so that any click or keypress that is unhandled / bubbled up all the way to the document triggers our dom\n  // handlers. (Normally we have only one, which captures a breadcrumb for each click or keypress.) Do this before\n  // we instrument `addEventListener` so that we don't end up attaching this handler twice.\n  const triggerDOMHandler = triggerHandlers.bind(null, 'dom');\n  const globalDOMEventHandler = makeDOMEventHandler(triggerDOMHandler, true);\n  WINDOW.document.addEventListener('click', globalDOMEventHandler, false);\n  WINDOW.document.addEventListener('keypress', globalDOMEventHandler, false);\n\n  // After hooking into click and keypress events bubbled up to `document`, we also hook into user-handled\n  // clicks & keypresses, by adding an event listener of our own to any element to which they add a listener. That\n  // way, whenever one of their handlers is triggered, ours will be, too. (This is needed because their handler\n  // could potentially prevent the event from bubbling up to our global listeners. This way, our handler are still\n  // guaranteed to fire at least once.)\n  ['EventTarget', 'Node'].forEach((target: string) => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    const proto = (WINDOW as any)[target] && (WINDOW as any)[target].prototype;\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, no-prototype-builtins\n    if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty('addEventListener')) {\n      return;\n    }\n\n    fill(proto, 'addEventListener', function (originalAddEventListener: AddEventListener): AddEventListener {\n      return function (\n        this: Element,\n        type: string,\n        listener: EventListenerOrEventListenerObject,\n        options?: boolean | AddEventListenerOptions,\n      ): AddEventListener {\n        if (type === 'click' || type == 'keypress') {\n          try {\n            const el = this as InstrumentedElement;\n            const handlers = (el.__sentry_instrumentation_handlers__ = el.__sentry_instrumentation_handlers__ || {});\n            const handlerForType = (handlers[type] = handlers[type] || { refCount: 0 });\n\n            if (!handlerForType.handler) {\n              const handler = makeDOMEventHandler(triggerDOMHandler);\n              handlerForType.handler = handler;\n              originalAddEventListener.call(this, type, handler, options);\n            }\n\n            handlerForType.refCount += 1;\n          } catch (e) {\n            // Accessing dom properties is always fragile.\n            // Also allows us to skip `addEventListenrs` calls with no proper `this` context.\n          }\n        }\n\n        return originalAddEventListener.call(this, type, listener, options);\n      };\n    });\n\n    fill(\n      proto,\n      'removeEventListener',\n      function (originalRemoveEventListener: RemoveEventListener): RemoveEventListener {\n        return function (\n          this: Element,\n          type: string,\n          listener: EventListenerOrEventListenerObject,\n          options?: boolean | EventListenerOptions,\n        ): () => void {\n          if (type === 'click' || type == 'keypress') {\n            try {\n              const el = this as InstrumentedElement;\n              const handlers = el.__sentry_instrumentation_handlers__ || {};\n              const handlerForType = handlers[type];\n\n              if (handlerForType) {\n                handlerForType.refCount -= 1;\n                // If there are no longer any custom handlers of the current type on this element, we can remove ours, too.\n                if (handlerForType.refCount <= 0) {\n                  originalRemoveEventListener.call(this, type, handlerForType.handler, options);\n                  handlerForType.handler = undefined;\n                  delete handlers[type]; // eslint-disable-line @typescript-eslint/no-dynamic-delete\n                }\n\n                // If there are no longer any custom handlers of any type on this element, cleanup everything.\n                if (Object.keys(handlers).length === 0) {\n                  delete el.__sentry_instrumentation_handlers__;\n                }\n              }\n            } catch (e) {\n              // Accessing dom properties is always fragile.\n              // Also allows us to skip `addEventListenrs` calls with no proper `this` context.\n            }\n          }\n\n          return originalRemoveEventListener.call(this, type, listener, options);\n        };\n      },\n    );\n  });\n}\n\nlet _oldOnErrorHandler: OnErrorEventHandler = null;\n/** JSDoc */\nfunction instrumentError(): void {\n  _oldOnErrorHandler = WINDOW.onerror;\n\n  WINDOW.onerror = function (msg: any, url: any, line: any, column: any, error: any): boolean {\n    triggerHandlers('error', {\n      column,\n      error,\n      line,\n      msg,\n      url,\n    });\n\n    if (_oldOnErrorHandler) {\n      // eslint-disable-next-line prefer-rest-params\n      return _oldOnErrorHandler.apply(this, arguments);\n    }\n\n    return false;\n  };\n}\n\nlet _oldOnUnhandledRejectionHandler: ((e: any) => void) | null = null;\n/** JSDoc */\nfunction instrumentUnhandledRejection(): void {\n  _oldOnUnhandledRejectionHandler = WINDOW.onunhandledrejection;\n\n  WINDOW.onunhandledrejection = function (e: any): boolean {\n    triggerHandlers('unhandledrejection', e);\n\n    if (_oldOnUnhandledRejectionHandler) {\n      // eslint-disable-next-line prefer-rest-params\n      return _oldOnUnhandledRejectionHandler.apply(this, arguments);\n    }\n\n    return true;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}