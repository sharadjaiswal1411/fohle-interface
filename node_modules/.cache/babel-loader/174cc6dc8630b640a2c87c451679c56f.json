{"ast":null,"code":"import { deepCopy } from '@ethersproject/properties';\n// This is the only file which should instantiate new Providers.\n// eslint-disable-next-line @typescript-eslint/no-restricted-imports\nimport { StaticJsonRpcProvider } from '@ethersproject/providers';\nimport { isPlain } from '@reduxjs/toolkit';\nimport { AVERAGE_L1_BLOCK_TIME } from './chainInfo';\nimport { CHAIN_IDS_TO_NAMES, SupportedChainId } from './chains';\nimport { RPC_URLS } from './networks';\nclass AppJsonRpcProvider extends StaticJsonRpcProvider {\n  get blockCache() {\n    // If the blockCache has not yet been initialized this block, do so by\n    // setting a listener to clear it on the next block.\n    if (!this._blockCache.size) {\n      this.once('block', () => this._blockCache.clear());\n    }\n    return this._blockCache;\n  }\n  constructor(chainId) {\n    // Including networkish allows ethers to skip the initial detectNetwork call.\n    super(RPC_URLS[chainId][0], /* networkish= */{\n      chainId,\n      name: CHAIN_IDS_TO_NAMES[chainId]\n    });\n\n    // NB: Third-party providers (eg MetaMask) will have their own polling intervals,\n    // which should be left as-is to allow operations (eg transaction confirmation) to resolve faster.\n    // Network providers (eg AppJsonRpcProvider) need to update less frequently to be considered responsive.\n    this._blockCache = new Map();\n    this.pollingInterval = AVERAGE_L1_BLOCK_TIME;\n  }\n  send(method, params) {\n    // Only cache eth_call's.\n    if (method !== 'eth_call') return super.send(method, params);\n\n    // Only cache if params are serializable.\n    if (!isPlain(params)) return super.send(method, params);\n    const key = `call:${JSON.stringify(params)}`;\n    const cached = this.blockCache.get(key);\n    if (cached) {\n      this.emit('debug', {\n        action: 'request',\n        request: deepCopy({\n          method,\n          params,\n          id: 'cache'\n        }),\n        provider: this\n      });\n      return cached;\n    }\n    const result = super.send(method, params);\n    this.blockCache.set(key, result);\n    return result;\n  }\n}\n\n/**\n * These are the only JsonRpcProviders used directly by the interface.\n */\nexport const RPC_PROVIDERS = {\n  [SupportedChainId.MAINNET]: new AppJsonRpcProvider(SupportedChainId.MAINNET),\n  [SupportedChainId.RINKEBY]: new AppJsonRpcProvider(SupportedChainId.RINKEBY),\n  [SupportedChainId.ROPSTEN]: new AppJsonRpcProvider(SupportedChainId.ROPSTEN),\n  [SupportedChainId.GOERLI]: new AppJsonRpcProvider(SupportedChainId.GOERLI),\n  [SupportedChainId.KOVAN]: new AppJsonRpcProvider(SupportedChainId.KOVAN),\n  [SupportedChainId.OPTIMISM]: new AppJsonRpcProvider(SupportedChainId.OPTIMISM),\n  [SupportedChainId.OPTIMISM_GOERLI]: new AppJsonRpcProvider(SupportedChainId.OPTIMISM_GOERLI),\n  [SupportedChainId.OPTIMISM_KOVAN]: new AppJsonRpcProvider(SupportedChainId.OPTIMISM_KOVAN),\n  [SupportedChainId.ARBITRUM_ONE]: new AppJsonRpcProvider(SupportedChainId.ARBITRUM_ONE),\n  [SupportedChainId.ARBITRUM_RINKEBY]: new AppJsonRpcProvider(SupportedChainId.ARBITRUM_RINKEBY),\n  [SupportedChainId.POLYGON]: new AppJsonRpcProvider(SupportedChainId.POLYGON),\n  [SupportedChainId.POLYGON_MUMBAI]: new AppJsonRpcProvider(SupportedChainId.POLYGON_MUMBAI),\n  [SupportedChainId.CELO]: new AppJsonRpcProvider(SupportedChainId.CELO),\n  [SupportedChainId.CELO_ALFAJORES]: new AppJsonRpcProvider(SupportedChainId.CELO_ALFAJORES)\n};","map":{"version":3,"names":["deepCopy","StaticJsonRpcProvider","isPlain","AVERAGE_L1_BLOCK_TIME","CHAIN_IDS_TO_NAMES","SupportedChainId","RPC_URLS","AppJsonRpcProvider","blockCache","_blockCache","size","once","clear","constructor","chainId","name","Map","pollingInterval","send","method","params","key","JSON","stringify","cached","get","emit","action","request","id","provider","result","set","RPC_PROVIDERS","MAINNET","RINKEBY","ROPSTEN","GOERLI","KOVAN","OPTIMISM","OPTIMISM_GOERLI","OPTIMISM_KOVAN","ARBITRUM_ONE","ARBITRUM_RINKEBY","POLYGON","POLYGON_MUMBAI","CELO","CELO_ALFAJORES"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/constants/providers.ts"],"sourcesContent":["import { deepCopy } from '@ethersproject/properties'\n// This is the only file which should instantiate new Providers.\n// eslint-disable-next-line @typescript-eslint/no-restricted-imports\nimport { StaticJsonRpcProvider } from '@ethersproject/providers'\nimport { isPlain } from '@reduxjs/toolkit'\n\nimport { AVERAGE_L1_BLOCK_TIME } from './chainInfo'\nimport { CHAIN_IDS_TO_NAMES, SupportedChainId } from './chains'\nimport { RPC_URLS } from './networks'\n\nclass AppJsonRpcProvider extends StaticJsonRpcProvider {\n  private _blockCache = new Map<string, Promise<any>>()\n  get blockCache() {\n    // If the blockCache has not yet been initialized this block, do so by\n    // setting a listener to clear it on the next block.\n    if (!this._blockCache.size) {\n      this.once('block', () => this._blockCache.clear())\n    }\n    return this._blockCache\n  }\n\n  constructor(chainId: SupportedChainId) {\n    // Including networkish allows ethers to skip the initial detectNetwork call.\n    super(RPC_URLS[chainId][0], /* networkish= */ { chainId, name: CHAIN_IDS_TO_NAMES[chainId] })\n\n    // NB: Third-party providers (eg MetaMask) will have their own polling intervals,\n    // which should be left as-is to allow operations (eg transaction confirmation) to resolve faster.\n    // Network providers (eg AppJsonRpcProvider) need to update less frequently to be considered responsive.\n    this.pollingInterval = AVERAGE_L1_BLOCK_TIME\n  }\n\n  send(method: string, params: Array<any>): Promise<any> {\n    // Only cache eth_call's.\n    if (method !== 'eth_call') return super.send(method, params)\n\n    // Only cache if params are serializable.\n    if (!isPlain(params)) return super.send(method, params)\n\n    const key = `call:${JSON.stringify(params)}`\n    const cached = this.blockCache.get(key)\n    if (cached) {\n      this.emit('debug', {\n        action: 'request',\n        request: deepCopy({ method, params, id: 'cache' }),\n        provider: this,\n      })\n      return cached\n    }\n\n    const result = super.send(method, params)\n    this.blockCache.set(key, result)\n    return result\n  }\n}\n\n/**\n * These are the only JsonRpcProviders used directly by the interface.\n */\nexport const RPC_PROVIDERS: { [key in SupportedChainId]: StaticJsonRpcProvider } = {\n  [SupportedChainId.MAINNET]: new AppJsonRpcProvider(SupportedChainId.MAINNET),\n  [SupportedChainId.RINKEBY]: new AppJsonRpcProvider(SupportedChainId.RINKEBY),\n  [SupportedChainId.ROPSTEN]: new AppJsonRpcProvider(SupportedChainId.ROPSTEN),\n  [SupportedChainId.GOERLI]: new AppJsonRpcProvider(SupportedChainId.GOERLI),\n  [SupportedChainId.KOVAN]: new AppJsonRpcProvider(SupportedChainId.KOVAN),\n  [SupportedChainId.OPTIMISM]: new AppJsonRpcProvider(SupportedChainId.OPTIMISM),\n  [SupportedChainId.OPTIMISM_GOERLI]: new AppJsonRpcProvider(SupportedChainId.OPTIMISM_GOERLI),\n  [SupportedChainId.OPTIMISM_KOVAN]: new AppJsonRpcProvider(SupportedChainId.OPTIMISM_KOVAN),\n  [SupportedChainId.ARBITRUM_ONE]: new AppJsonRpcProvider(SupportedChainId.ARBITRUM_ONE),\n  [SupportedChainId.ARBITRUM_RINKEBY]: new AppJsonRpcProvider(SupportedChainId.ARBITRUM_RINKEBY),\n  [SupportedChainId.POLYGON]: new AppJsonRpcProvider(SupportedChainId.POLYGON),\n  [SupportedChainId.POLYGON_MUMBAI]: new AppJsonRpcProvider(SupportedChainId.POLYGON_MUMBAI),\n  [SupportedChainId.CELO]: new AppJsonRpcProvider(SupportedChainId.CELO),\n  [SupportedChainId.CELO_ALFAJORES]: new AppJsonRpcProvider(SupportedChainId.CELO_ALFAJORES),\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}