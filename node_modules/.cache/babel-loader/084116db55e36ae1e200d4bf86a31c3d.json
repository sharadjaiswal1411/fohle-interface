{"ast":null,"code":"import { SwapRouter02__factory } from '../types/other/factories/SwapRouter02__factory';\nimport { log, SWAP_ROUTER_ADDRESS } from '../util';\nexport class SwapRouterProvider {\n  constructor(multicall2Provider) {\n    this.multicall2Provider = multicall2Provider;\n  }\n  async getApprovalType(tokenInAmount, tokenOutAmount) {\n    var _a, _b;\n    const functionParams = [[tokenInAmount.currency.wrapped.address, tokenInAmount.quotient.toString()], [tokenOutAmount.currency.wrapped.address, tokenOutAmount.quotient.toString()]];\n    const tx = await this.multicall2Provider.callSameFunctionOnContractWithMultipleParams({\n      address: SWAP_ROUTER_ADDRESS,\n      contractInterface: SwapRouter02__factory.createInterface(),\n      functionName: 'getApprovalType',\n      functionParams\n    });\n    if (!((_a = tx.results[0]) === null || _a === void 0 ? void 0 : _a.success) || !((_b = tx.results[1]) === null || _b === void 0 ? void 0 : _b.success)) {\n      log.info({\n        results: tx.results\n      }, 'Failed to get approval type from swap router for token in or token out');\n      throw new Error('Failed to get approval type from swap router for token in or token out');\n    }\n    const {\n      result: approvalTokenIn\n    } = tx.results[0];\n    const {\n      result: approvalTokenOut\n    } = tx.results[1];\n    return {\n      approvalTokenIn: approvalTokenIn[0],\n      approvalTokenOut: approvalTokenOut[0]\n    };\n  }\n}","map":{"version":3,"sources":["../../../src/providers/swap-router-provider.ts"],"names":[],"mappings":"AAGA,SAAS,qBAAqB,QAAQ,gDAAgD;AACtF,SAAS,GAAG,EAAE,mBAAmB,QAAQ,SAAS;AA6BlD,OAAM,MAAO,kBAAkB,CAAA;EAC7B,WAAA,CAAsB,kBAAsC,EAAA;IAAtC,IAAA,CAAA,kBAAkB,GAAlB,kBAAkB;EAAuB;EAExD,MAAM,eAAe,CAC1B,aAAuC,EACvC,cAAwC,EAAA;;IAExC,MAAM,cAAc,GAAuB,CACzC,CACE,aAAa,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAO,EACtC,aAAa,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAClC,EACD,CACE,cAAc,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAO,EACvC,cAAc,CAAC,QAAQ,CAAC,QAAQ,EAAE,CACnC,CACF;IAED,MAAM,EAAE,GACN,MAAM,IAAI,CAAC,kBAAkB,CAAC,4CAA4C,CAGxE;MACA,OAAO,EAAE,mBAAmB;MAC5B,iBAAiB,EAAE,qBAAqB,CAAC,eAAe,EAAE;MAC1D,YAAY,EAAE,iBAAiB;MAC/B;KACD,CAAC;IAEJ,IAAI,EAAC,CAAA,EAAA,GAAA,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,OAAO,CAAA,IAAI,EAAC,CAAA,EAAA,GAAA,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,OAAO,CAAA,EAAE;MACtD,GAAG,CAAC,IAAI,CACN;QAAE,OAAO,EAAE,EAAE,CAAC;MAAO,CAAE,EACvB,wEAAwE,CACzE;MACD,MAAM,IAAI,KAAK,CACb,wEAAwE,CACzE;IACF;IAED,MAAM;MAAE,MAAM,EAAE;IAAe,CAAE,GAAG,EAAE,CAAC,OAAQ,CAAC,CAAC,CAAC;IAClD,MAAM;MAAE,MAAM,EAAE;IAAgB,CAAE,GAAG,EAAE,CAAC,OAAQ,CAAC,CAAC,CAAC;IAEnD,OAAO;MACL,eAAe,EAAE,eAAe,CAAC,CAAC,CAAC;MACnC,gBAAgB,EAAE,gBAAgB,CAAC,CAAC;KACrC;EACH;AACD","sourceRoot":"","sourcesContent":["import { SwapRouter02__factory } from '../types/other/factories/SwapRouter02__factory';\nimport { log, SWAP_ROUTER_ADDRESS } from '../util';\nexport class SwapRouterProvider {\n    constructor(multicall2Provider) {\n        this.multicall2Provider = multicall2Provider;\n    }\n    async getApprovalType(tokenInAmount, tokenOutAmount) {\n        var _a, _b;\n        const functionParams = [\n            [\n                tokenInAmount.currency.wrapped.address,\n                tokenInAmount.quotient.toString(),\n            ],\n            [\n                tokenOutAmount.currency.wrapped.address,\n                tokenOutAmount.quotient.toString(),\n            ],\n        ];\n        const tx = await this.multicall2Provider.callSameFunctionOnContractWithMultipleParams({\n            address: SWAP_ROUTER_ADDRESS,\n            contractInterface: SwapRouter02__factory.createInterface(),\n            functionName: 'getApprovalType',\n            functionParams,\n        });\n        if (!((_a = tx.results[0]) === null || _a === void 0 ? void 0 : _a.success) || !((_b = tx.results[1]) === null || _b === void 0 ? void 0 : _b.success)) {\n            log.info({ results: tx.results }, 'Failed to get approval type from swap router for token in or token out');\n            throw new Error('Failed to get approval type from swap router for token in or token out');\n        }\n        const { result: approvalTokenIn } = tx.results[0];\n        const { result: approvalTokenOut } = tx.results[1];\n        return {\n            approvalTokenIn: approvalTokenIn[0],\n            approvalTokenOut: approvalTokenOut[0],\n        };\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3dhcC1yb3V0ZXItcHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcHJvdmlkZXJzL3N3YXAtcm91dGVyLXByb3ZpZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLGdEQUFnRCxDQUFDO0FBQ3ZGLE9BQU8sRUFBRSxHQUFHLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxTQUFTLENBQUM7QUE2Qm5ELE1BQU0sT0FBTyxrQkFBa0I7SUFDN0IsWUFBc0Isa0JBQXNDO1FBQXRDLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBb0I7SUFBRyxDQUFDO0lBRXpELEtBQUssQ0FBQyxlQUFlLENBQzFCLGFBQXVDLEVBQ3ZDLGNBQXdDOztRQUV4QyxNQUFNLGNBQWMsR0FBdUI7WUFDekM7Z0JBQ0UsYUFBYSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsT0FBTztnQkFDdEMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUU7YUFDbEM7WUFDRDtnQkFDRSxjQUFjLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxPQUFPO2dCQUN2QyxjQUFjLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRTthQUNuQztTQUNGLENBQUM7UUFFRixNQUFNLEVBQUUsR0FDTixNQUFNLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyw0Q0FBNEMsQ0FHeEU7WUFDQSxPQUFPLEVBQUUsbUJBQW1CO1lBQzVCLGlCQUFpQixFQUFFLHFCQUFxQixDQUFDLGVBQWUsRUFBRTtZQUMxRCxZQUFZLEVBQUUsaUJBQWlCO1lBQy9CLGNBQWM7U0FDZixDQUFDLENBQUM7UUFFTCxJQUFJLENBQUMsQ0FBQSxNQUFBLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLDBDQUFFLE9BQU8sQ0FBQSxJQUFJLENBQUMsQ0FBQSxNQUFBLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLDBDQUFFLE9BQU8sQ0FBQSxFQUFFO1lBQ3RELEdBQUcsQ0FBQyxJQUFJLENBQ04sRUFBRSxPQUFPLEVBQUUsRUFBRSxDQUFDLE9BQU8sRUFBRSxFQUN2Qix3RUFBd0UsQ0FDekUsQ0FBQztZQUNGLE1BQU0sSUFBSSxLQUFLLENBQ2Isd0VBQXdFLENBQ3pFLENBQUM7U0FDSDtRQUVELE1BQU0sRUFBRSxNQUFNLEVBQUUsZUFBZSxFQUFFLEdBQUcsRUFBRSxDQUFDLE9BQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNuRCxNQUFNLEVBQUUsTUFBTSxFQUFFLGdCQUFnQixFQUFFLEdBQUcsRUFBRSxDQUFDLE9BQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUVwRCxPQUFPO1lBQ0wsZUFBZSxFQUFFLGVBQWUsQ0FBQyxDQUFDLENBQUM7WUFDbkMsZ0JBQWdCLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO1NBQ3RDLENBQUM7SUFDSixDQUFDO0NBQ0YifQ=="]},"metadata":{},"sourceType":"module"}