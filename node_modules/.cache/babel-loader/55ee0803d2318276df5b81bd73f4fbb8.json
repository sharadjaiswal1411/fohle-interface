{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst codegen_1 = require(\"../../compile/codegen\");\nconst util_1 = require(\"../../compile/util\");\nconst code_1 = require(\"../code\");\nconst additionalItems_1 = require(\"./additionalItems\");\nconst error = {\n  message: _ref => {\n    let {\n      params: {\n        len\n      }\n    } = _ref;\n    return (0, codegen_1.str)`must NOT have more than ${len} items`;\n  },\n  params: _ref2 => {\n    let {\n      params: {\n        len\n      }\n    } = _ref2;\n    return (0, codegen_1._)`{limit: ${len}}`;\n  }\n};\nconst def = {\n  keyword: \"items\",\n  type: \"array\",\n  schemaType: [\"object\", \"boolean\"],\n  before: \"uniqueItems\",\n  error,\n  code(cxt) {\n    const {\n      schema,\n      parentSchema,\n      it\n    } = cxt;\n    const {\n      prefixItems\n    } = parentSchema;\n    it.items = true;\n    if ((0, util_1.alwaysValidSchema)(it, schema)) return;\n    if (prefixItems) (0, additionalItems_1.validateAdditionalItems)(cxt, prefixItems);else cxt.ok((0, code_1.validateArray)(cxt));\n  }\n};\nexports.default = def;","map":{"version":3,"sources":["../../../lib/vocabularies/applicator/items2020.ts"],"names":[],"mappings":";;;;;AAOA,MAAA,SAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;AACA,MAAA,MAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;AACA,MAAA,MAAA,GAAA,OAAA,CAAA,SAAA,CAAA;AACA,MAAA,iBAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;AAIA,MAAM,KAAK,GAA2B;EACpC,OAAO,EAAE;IAAA,IAAC;MAAC,MAAM,EAAE;QAAC;MAAG;IAAC,CAAC;IAAA,OAAK,CAAA,CAAA,EAAA,SAAA,CAAA,GAAG,CAAA,2BAA2B,GAAG,QAAQ;EAAA;EACvE,MAAM,EAAE;IAAA,IAAC;MAAC,MAAM,EAAE;QAAC;MAAG;IAAC,CAAC;IAAA,OAAK,CAAA,CAAA,EAAA,SAAA,CAAA,CAAC,CAAA,WAAW,GAAG,GAAG;EAAA;CAChD;AAED,MAAM,GAAG,GAA0B;EACjC,OAAO,EAAE,OAAO;EAChB,IAAI,EAAE,OAAO;EACb,UAAU,EAAE,CAAC,QAAQ,EAAE,SAAS,CAAC;EACjC,MAAM,EAAE,aAAa;EACrB,KAAK;EACL,IAAI,CAAC,GAAe,EAAA;IAClB,MAAM;MAAC,MAAM;MAAE,YAAY;MAAE;IAAE,CAAC,GAAG,GAAG;IACtC,MAAM;MAAC;IAAW,CAAC,GAAG,YAAY;IAClC,EAAE,CAAC,KAAK,GAAG,IAAI;IACf,IAAI,CAAA,CAAA,EAAA,MAAA,CAAA,iBAAiB,EAAC,EAAE,EAAE,MAAM,CAAC,EAAE;IACnC,IAAI,WAAW,EAAE,CAAA,CAAA,EAAA,iBAAA,CAAA,uBAAuB,EAAC,GAAG,EAAE,WAAW,CAAC,CAAA,KACrD,GAAG,CAAC,EAAE,CAAC,CAAA,CAAA,EAAA,MAAA,CAAA,aAAa,EAAC,GAAG,CAAC,CAAC;EACjC;CACD;AAED,OAAA,CAAA,OAAA,GAAe,GAAG","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst codegen_1 = require(\"../../compile/codegen\");\nconst util_1 = require(\"../../compile/util\");\nconst code_1 = require(\"../code\");\nconst additionalItems_1 = require(\"./additionalItems\");\nconst error = {\n    message: ({ params: { len } }) => (0, codegen_1.str) `must NOT have more than ${len} items`,\n    params: ({ params: { len } }) => (0, codegen_1._) `{limit: ${len}}`,\n};\nconst def = {\n    keyword: \"items\",\n    type: \"array\",\n    schemaType: [\"object\", \"boolean\"],\n    before: \"uniqueItems\",\n    error,\n    code(cxt) {\n        const { schema, parentSchema, it } = cxt;\n        const { prefixItems } = parentSchema;\n        it.items = true;\n        if ((0, util_1.alwaysValidSchema)(it, schema))\n            return;\n        if (prefixItems)\n            (0, additionalItems_1.validateAdditionalItems)(cxt, prefixItems);\n        else\n            cxt.ok((0, code_1.validateArray)(cxt));\n    },\n};\nexports.default = def;\n//# sourceMappingURL=items2020.js.map"]},"metadata":{},"sourceType":"script"}