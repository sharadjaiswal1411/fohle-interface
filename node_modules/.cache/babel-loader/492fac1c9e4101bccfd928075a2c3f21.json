{"ast":null,"code":"import { urlClean, logger } from '@0xsequence/utils';\nimport { ethers } from 'ethers';\nimport { JsonRpcProvider } from '@ethersproject/providers';\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction isNetworkConfig(cand) {\n  return cand && cand.chainId !== undefined && cand.name !== undefined && cand.rpcUrl !== undefined && cand.relayer !== undefined;\n}\nconst getChainId = chainId => {\n  if (typeof chainId === 'number') {\n    return chainId;\n  }\n  if (chainId.chainId) {\n    return chainId.chainId;\n  }\n  return ethers.BigNumber.from(chainId).toNumber();\n};\nconst maybeChainId = chainId => {\n  if (!chainId) return undefined;\n  return getChainId(chainId);\n};\nconst getAuthNetwork = networks => {\n  return networks.find(network => network.isAuthChain);\n};\nconst isValidNetworkConfig = function (networkConfig) {\n  let raise = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  let skipRelayerCheck = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  if (!networkConfig) throw new Error(`invalid network config: empty config`);\n  const configs = [];\n  if (Array.isArray(networkConfig)) {\n    configs.push(...networkConfig);\n  } else {\n    configs.push(networkConfig);\n  }\n  if (configs.length === 0) {\n    if (raise) throw new Error(`invalid network config: empty config`);\n    return false;\n  } // Ensure distinct chainId configs\n\n  const chainIds = configs.map(c => c.chainId).sort();\n  const dupes = chainIds.filter((c, i) => chainIds.indexOf(c) !== i);\n  if (dupes.length > 0) {\n    if (raise) throw new Error(`invalid network config: duplicate chainIds ${dupes}`);\n    return false;\n  } // Downcase all network names\n\n  configs.forEach(c => c.name = c.name.toLowerCase()); // Ensure distinct network names\n\n  const names = configs.map(c => c.name).sort();\n  const nameDupes = names.filter((c, i) => names.indexOf(c) !== i);\n  if (nameDupes.length > 0) {\n    if (raise) throw new Error(`invalid network config: duplicate network names ${nameDupes}`);\n    return false;\n  } // Ensure rpcUrl or provider is specified\n  // Ensure relayerUrl or relayer is specified\n  // Ensure one default chain\n  // Ensure one auth chain\n\n  let defaultChain = false;\n  let authChain = false;\n  for (let i = 0; i < configs.length; i++) {\n    const c = configs[i];\n    if ((!c.rpcUrl || c.rpcUrl === '') && !c.provider) {\n      if (raise) throw new Error(`invalid network config for chainId ${c.chainId}: rpcUrl or provider must be provided`);\n      return false;\n    }\n    if (!skipRelayerCheck) {\n      if (!c.relayer) {\n        if (raise) throw new Error(`invalid network config for chainId ${c.chainId}: relayer must be provided`);\n        return false;\n      }\n    }\n    if (c.isDefaultChain) {\n      if (defaultChain) {\n        if (raise) throw new Error(`invalid network config for chainId ${c.chainId}: DefaultChain is already set by another config`);\n        return false;\n      }\n      defaultChain = true;\n    }\n    if (c.isAuthChain) {\n      if (authChain) {\n        if (raise) throw new Error(`invalid network config for chainId ${c.chainId}: AuthChain is already set by another config`);\n      }\n      authChain = true;\n    }\n  }\n  if (!defaultChain) {\n    if (raise) throw new Error(`invalid network config: DefaultChain must be set`);\n    return false;\n  }\n  if (!authChain) {\n    if (raise) throw new Error(`invalid network config: AuthChain must be set`);\n    return false;\n  }\n  return true;\n};\nconst ensureValidNetworks = function (networks) {\n  let skipRelayerCheck = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  isValidNetworkConfig(networks, true, skipRelayerCheck);\n  return networks;\n};\nconst ensureUniqueNetworks = function (networks) {\n  let raise = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  const chainIds = networks.map(c => c.chainId).sort();\n  const dupes = chainIds.filter((c, i) => chainIds.indexOf(c) !== i);\n  if (dupes.length > 0) {\n    if (raise) throw new Error(`invalid network config: duplicate chainIds ${dupes}`);\n    return false;\n  }\n  return true;\n};\nconst updateNetworkConfig = (src, dest) => {\n  if (!src || !dest) return;\n  if (!src.chainId && !src.name) {\n    throw new Error('failed to update network config: source config is missing chainId or name');\n  }\n  if (src.chainId !== dest.chainId && src.name !== dest.name) {\n    throw new Error('failed to update network config: one of chainId or name must match');\n  }\n  if (src.rpcUrl) {\n    dest.rpcUrl = src.rpcUrl;\n    dest.provider = undefined;\n  }\n  if (src.provider) {\n    dest.provider = src.provider;\n  }\n  if (src.relayer) {\n    dest.relayer = src.relayer;\n  }\n  if (src.ensAddress) {\n    dest.ensAddress = src.ensAddress;\n  } // NOTE: we do not set default or auth chain from here\n  // if (src.isDefaultChain) {\n  //   dest.isDefaultChain = src.isDefaultChain\n  // }\n  // if (src.isAuthChain) {\n  //   dest.isAuthChain = src.isAuthChain\n  // }\n};\n\nconst createNetworkConfig = (networks, defaultChainId, vars) => {\n  let config = [];\n  if (typeof networks === 'function' && vars) {\n    config = networks(vars);\n  } else {\n    config = networks;\n  }\n  if (defaultChainId) {\n    config.forEach(n => n.isDefaultChain = false);\n    const mainNetwork = config.filter(n => n.chainId === defaultChainId);\n    if (!mainNetwork || mainNetwork.length === 0) {\n      throw new Error(`defaultChainId ${defaultChainId} cannot be found in network list`);\n    } else {\n      mainNetwork[0].isDefaultChain = true;\n    }\n  }\n  return ensureValidNetworks(sortNetworks(config));\n};\nconst findNetworkConfig = (networks, chainId) => {\n  if (typeof chainId === 'string') {\n    if (chainId.startsWith('0x')) {\n      const id = ethers.BigNumber.from(chainId).toNumber();\n      return networks.find(n => n.chainId === id);\n    } else {\n      return networks.find(n => n.name === chainId);\n    }\n  } else if (typeof chainId === 'number') {\n    return networks.find(n => n.chainId === chainId);\n  } else if (chainId.chainId) {\n    return networks.find(n => n.chainId === chainId.chainId);\n  } else {\n    return undefined;\n  }\n};\nconst checkNetworkConfig = (network, chainId) => {\n  if (!network) return false;\n  if (network.name === chainId) return true;\n  if (network.chainId === chainId) return true;\n  return false;\n};\nconst networksIndex = networks => {\n  const index = {};\n  for (let i = 0; i < networks.length; i++) {\n    index[networks[i].name] = networks[i];\n  }\n  return index;\n}; // TODO: we should remove sortNetworks in the future but this is a breaking change for dapp integrations on older versions <-> wallet\n// sortNetworks orders the network config list by: defaultChain, authChain, ..rest by chainId ascending numbers\n\nconst sortNetworks = networks => {\n  if (!networks) {\n    return [];\n  }\n  const config = networks.sort((a, b) => {\n    if (a.chainId === b.chainId) return 0;\n    return a.chainId < b.chainId ? -1 : 1;\n  }); // DefaultChain goes first\n\n  const defaultConfigIdx = config.findIndex(c => c.isDefaultChain);\n  if (defaultConfigIdx > 0) config.splice(0, 0, config.splice(defaultConfigIdx, 1)[0]); // AuthChain goes second\n\n  const authConfigIdx = config.findIndex(c => c.isAuthChain && c.isDefaultChain !== true);\n  if (authConfigIdx > 0) config.splice(1, 0, config.splice(authConfigIdx, 1)[0]);\n  return config;\n};\nlet ChainId;\n(function (ChainId) {\n  ChainId[ChainId[\"MAINNET\"] = 1] = \"MAINNET\";\n  ChainId[ChainId[\"ROPSTEN\"] = 3] = \"ROPSTEN\";\n  ChainId[ChainId[\"RINKEBY\"] = 4] = \"RINKEBY\";\n  ChainId[ChainId[\"GOERLI\"] = 5] = \"GOERLI\";\n  ChainId[ChainId[\"KOVAN\"] = 42] = \"KOVAN\";\n  ChainId[ChainId[\"POLYGON\"] = 137] = \"POLYGON\";\n  ChainId[ChainId[\"POLYGON_MUMBAI\"] = 80001] = \"POLYGON_MUMBAI\";\n  ChainId[ChainId[\"BSC\"] = 56] = \"BSC\";\n  ChainId[ChainId[\"BSC_TESTNET\"] = 97] = \"BSC_TESTNET\";\n  ChainId[ChainId[\"OPTIMISM\"] = 10] = \"OPTIMISM\";\n  ChainId[ChainId[\"OPTIMISM_TESTNET\"] = 69] = \"OPTIMISM_TESTNET\";\n  ChainId[ChainId[\"ARBITRUM\"] = 42161] = \"ARBITRUM\";\n  ChainId[ChainId[\"ARBITRUM_TESTNET\"] = 421611] = \"ARBITRUM_TESTNET\";\n  ChainId[ChainId[\"AVALANCHE\"] = 43114] = \"AVALANCHE\";\n  ChainId[ChainId[\"AVALANCHE_TESTNET\"] = 43113] = \"AVALANCHE_TESTNET\";\n  ChainId[ChainId[\"FANTOM\"] = 250] = \"FANTOM\";\n  ChainId[ChainId[\"FANTOM_TESTNET\"] = 4002] = \"FANTOM_TESTNET\";\n  ChainId[ChainId[\"GNOSIS\"] = 100] = \"GNOSIS\";\n  ChainId[ChainId[\"AURORA\"] = 1313161554] = \"AURORA\";\n  ChainId[ChainId[\"AURORA_TESTNET\"] = 1313161556] = \"AURORA_TESTNET\";\n})(ChainId || (ChainId = {}));\nconst networks = {\n  [ChainId.MAINNET]: {\n    chainId: ChainId.MAINNET,\n    name: 'mainnet',\n    title: 'Ethereum',\n    blockExplorer: {\n      name: 'Etherscan',\n      rootUrl: 'https://etherscan.io/'\n    }\n  },\n  [ChainId.ROPSTEN]: {\n    chainId: ChainId.ROPSTEN,\n    name: 'ropsten',\n    title: 'Ropsten',\n    testnet: true,\n    blockExplorer: {\n      name: 'Etherscan (Ropsten)',\n      rootUrl: 'https://ropsten.etherscan.io/'\n    }\n  },\n  [ChainId.RINKEBY]: {\n    chainId: ChainId.RINKEBY,\n    name: 'rinkeby',\n    title: 'Rinkeby',\n    testnet: true,\n    blockExplorer: {\n      name: 'Etherscan (Rinkeby)',\n      rootUrl: 'https://rinkeby.etherscan.io/'\n    }\n  },\n  [ChainId.GOERLI]: {\n    chainId: ChainId.GOERLI,\n    name: 'goerli',\n    title: 'Goerli',\n    testnet: true,\n    blockExplorer: {\n      name: 'Etherscan (Goerli)',\n      rootUrl: 'https://goerli.etherscan.io/'\n    }\n  },\n  [ChainId.KOVAN]: {\n    chainId: ChainId.KOVAN,\n    name: 'kovan',\n    title: 'Kovan',\n    testnet: true,\n    blockExplorer: {\n      name: 'Etherscan (Kovan)',\n      rootUrl: 'https://kovan.etherscan.io/'\n    }\n  },\n  [ChainId.POLYGON]: {\n    chainId: ChainId.POLYGON,\n    name: 'polygon',\n    title: 'Polygon',\n    blockExplorer: {\n      name: 'Polygonscan',\n      rootUrl: 'https://polygonscan.com/'\n    }\n  },\n  [ChainId.POLYGON_MUMBAI]: {\n    chainId: ChainId.POLYGON_MUMBAI,\n    name: 'mumbai',\n    title: 'Polygon Mumbai',\n    testnet: true,\n    blockExplorer: {\n      name: 'Polygonscan (Mumbai)',\n      rootUrl: 'https://mumbai.polygonscan.com/'\n    }\n  },\n  [ChainId.BSC]: {\n    chainId: ChainId.BSC,\n    name: 'bsc',\n    title: 'BNB Smart Chain',\n    blockExplorer: {\n      name: 'BSCScan',\n      rootUrl: 'https://bscscan.com/'\n    }\n  },\n  [ChainId.BSC_TESTNET]: {\n    chainId: ChainId.BSC_TESTNET,\n    name: 'bsc-testnet',\n    title: 'BNB Smart Chain Testnet',\n    testnet: true,\n    blockExplorer: {\n      name: 'BSCScan (Testnet)',\n      rootUrl: 'https://testnet.bscscan.com/'\n    }\n  },\n  [ChainId.OPTIMISM]: {\n    chainId: ChainId.OPTIMISM,\n    name: 'optimism',\n    title: 'Optimism',\n    blockExplorer: {\n      name: 'Etherscan (Optimism)',\n      rootUrl: 'https://optimistic.etherscan.io/'\n    }\n  },\n  [ChainId.OPTIMISM_TESTNET]: {\n    chainId: ChainId.OPTIMISM_TESTNET,\n    name: 'optimism-testnet',\n    title: 'Optimistic Kovan',\n    testnet: true,\n    blockExplorer: {\n      name: 'Etherscan (Optimism Testnet)',\n      rootUrl: 'https://kovan-optimistic.etherscan.io/'\n    }\n  },\n  [ChainId.ARBITRUM]: {\n    chainId: ChainId.ARBITRUM,\n    name: 'arbitrum',\n    title: 'Arbitrum',\n    blockExplorer: {\n      name: 'Arbiscan',\n      rootUrl: 'https://arbiscan.io/'\n    }\n  },\n  [ChainId.ARBITRUM_TESTNET]: {\n    chainId: ChainId.ARBITRUM_TESTNET,\n    name: 'arbitrum-testnet',\n    title: 'Arbitrum Testnet',\n    testnet: true,\n    blockExplorer: {\n      name: 'Arbiscan (Testnet)',\n      rootUrl: 'https://testnet.arbiscan.io/'\n    }\n  },\n  [ChainId.AVALANCHE]: {\n    chainId: ChainId.AVALANCHE,\n    name: 'avalanche',\n    title: 'Avalanche',\n    blockExplorer: {\n      name: 'Snowtrace',\n      rootUrl: 'https://snowtrace.io/'\n    }\n  },\n  [ChainId.AVALANCHE_TESTNET]: {\n    chainId: ChainId.AVALANCHE_TESTNET,\n    name: 'avalanche-testnet',\n    title: 'Avalanche Testnet',\n    testnet: true,\n    blockExplorer: {\n      name: 'Snowtrace (Testnet)',\n      rootUrl: 'https://testnet.snowtrace.io/'\n    }\n  },\n  [ChainId.FANTOM]: {\n    chainId: ChainId.FANTOM,\n    name: 'fantom',\n    title: 'Fantom',\n    blockExplorer: {\n      name: 'FTMScan',\n      rootUrl: 'https://ftmscan.com/'\n    }\n  },\n  [ChainId.FANTOM_TESTNET]: {\n    chainId: ChainId.FANTOM_TESTNET,\n    name: 'fantom-testnet',\n    title: 'Fantom Testnet',\n    testnet: true,\n    blockExplorer: {\n      name: 'FTMScan (Testnet)',\n      rootUrl: 'https://testnet.ftmscan.com/'\n    }\n  },\n  [ChainId.GNOSIS]: {\n    chainId: ChainId.GNOSIS,\n    name: 'gnosis',\n    title: 'Gnosis Chain',\n    blockExplorer: {\n      name: 'Gnosis Chain Explorer',\n      rootUrl: 'https://blockscout.com/xdai/mainnet/'\n    }\n  },\n  [ChainId.AURORA]: {\n    chainId: ChainId.AURORA,\n    name: 'aurora',\n    title: 'Aurora',\n    blockExplorer: {\n      name: 'Aurora Explorer',\n      rootUrl: 'https://aurorascan.dev/'\n    }\n  },\n  [ChainId.AURORA_TESTNET]: {\n    chainId: ChainId.AURORA_TESTNET,\n    name: 'aurora-testnet',\n    title: 'Aurora Testnet',\n    blockExplorer: {\n      name: 'Aurora Explorer (Testnet)',\n      rootUrl: 'https://testnet.aurorascan.dev/'\n    }\n  }\n};\nconst mainnetNetworks = createNetworkConfig(vars => [_extends({}, networks[ChainId.MAINNET], {\n  ensAddress: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n  rpcUrl: urlClean(`${vars.baseRpcUrl}/mainnet`),\n  relayer: {\n    url: urlClean(`${vars.baseRelayerUrl}/mainnet`)\n  },\n  isDefaultChain: true\n}), _extends({}, networks[ChainId.POLYGON], {\n  rpcUrl: 'https://rpc-mainnet.matic.network',\n  relayer: {\n    url: urlClean(`${vars.baseRelayerUrl}/matic`)\n  },\n  isAuthChain: true\n})], 1, {\n  baseRpcUrl: 'https://nodes.sequence.app',\n  baseRelayerUrl: 'https://relayers.sequence.app'\n});\nconst testnetNetworks = createNetworkConfig(vars => [_extends({}, networks[ChainId.RINKEBY], {\n  ensAddress: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n  rpcUrl: urlClean(`${vars.baseRpcUrl}/rinkeby`),\n  relayer: {\n    url: urlClean(`${vars.baseRelayerUrl}/rinkeby`)\n  },\n  isDefaultChain: true\n}), _extends({}, networks[ChainId.GOERLI], {\n  ensAddress: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n  rpcUrl: urlClean(`${vars.baseRpcUrl}/goerli`),\n  relayer: {\n    url: urlClean(`${vars.baseRelayerUrl}/goerli`)\n  },\n  isAuthChain: true\n})], undefined, {\n  baseRpcUrl: 'https://nodes.sequence.app',\n  baseRelayerUrl: 'https://relayers.sequence.app'\n});\n\n// WalletContext is the module addresses deployed on a network, aka the context / environment\n// of the Sequence Smart Wallet system on Ethereum.\n// sequenceContext are the deployed addresses of modules available on public networks.\nconst sequenceContext = {\n  factory: '0xf9D09D634Fb818b05149329C1dcCFAeA53639d96',\n  mainModule: '0xd01F11855bCcb95f88D7A48492F66410d4637313',\n  mainModuleUpgradable: '0x7EFE6cE415956c5f80C6530cC6cc81b4808F6118',\n  guestModule: '0x02390F3E6E5FD1C6786CB78FD3027C117a9955A7',\n  sequenceUtils: '0xd130B43062D875a4B7aF3f8fc036Bc6e9D3E1B3E',\n  libs: {\n    requireFreshSigner: '0xE6B9B21C077F382333220a072e4c44280b873907'\n  }\n};\nconst JsonRpcVersion = '2.0';\nclass JsonRpcRouter {\n  constructor(middlewares, sender) {\n    this.sender = void 0;\n    this.handler = void 0;\n    this.sender = sender;\n    if (middlewares) {\n      this.setMiddleware(middlewares);\n    }\n  }\n  setMiddleware(middlewares) {\n    this.handler = createJsonRpcMiddlewareStack(middlewares, this.sender.sendAsync);\n  }\n  sendAsync(request, callback, chainId) {\n    try {\n      this.handler(request, callback, chainId);\n    } catch (err) {\n      callback(err, undefined);\n    }\n  } // createWeb3Provider(network?: Networkish): EthersWeb3Provider {\n  //   return new EthersWeb3Provider(this.sender, network)\n  // }\n}\n\nconst createJsonRpcMiddlewareStack = (middlewares, handler) => {\n  if (middlewares.length === 0) return handler;\n  const toMiddleware = v => {\n    if (v.sendAsyncMiddleware) {\n      return v.sendAsyncMiddleware;\n    } else {\n      return v;\n    }\n  };\n  let chain;\n  chain = toMiddleware(middlewares[middlewares.length - 1])(handler);\n  for (let i = middlewares.length - 2; i >= 0; i--) {\n    chain = toMiddleware(middlewares[i])(chain);\n  }\n  return chain;\n};\nfunction isJsonRpcProvider(cand) {\n  return cand !== undefined && cand.send !== undefined && cand.constructor.defaultUrl !== undefined && cand.detectNetwork !== undefined && cand.getSigner !== undefined && cand.perform !== undefined;\n}\nfunction isJsonRpcHandler(cand) {\n  return cand !== undefined && cand.sendAsync !== undefined;\n}\nlet _nextId = 0;\nclass JsonRpcSender {\n  constructor(provider, defaultChainId) {\n    this.send = void 0;\n    this.request = void 0;\n    this.defaultChainId = void 0;\n    this.sendAsync = (request, callback, chainId) => {\n      this.send(request.method, request.params, chainId || this.defaultChainId).then(r => {\n        callback(undefined, {\n          jsonrpc: '2.0',\n          id: request.id,\n          result: r\n        });\n      }).catch(e => {\n        callback(e, undefined);\n      });\n    };\n    this.defaultChainId = defaultChainId;\n    if (isJsonRpcProvider(provider)) {\n      // we can ignore defaultChainId for JsonRpcProviders as they are already chain-bound\n      this.send = provider.send.bind(provider);\n    } else if (isJsonRpcHandler(provider)) {\n      this.send = (method, params, chainId) => {\n        return new Promise((resolve, reject) => {\n          provider.sendAsync({\n            // TODO: really shouldn't have to set these here?\n            jsonrpc: JsonRpcVersion,\n            id: ++_nextId,\n            method,\n            params\n          }, (error, response) => {\n            if (error) {\n              reject(error);\n            } else if (response) {\n              resolve(response.result);\n            } else {\n              resolve(undefined);\n            }\n          }, chainId || this.defaultChainId);\n        });\n      };\n    } else {\n      this.send = provider;\n    }\n    this.request = (request, chainId) => {\n      return this.send(request.method, request.params, chainId);\n    };\n  }\n}\nclass JsonRpcExternalProvider {\n  constructor(provider) {\n    this.provider = provider;\n    this.sendAsync = (request, callback) => {\n      this.provider.send(request.method, request.params).then(r => {\n        callback(undefined, {\n          jsonrpc: '2.0',\n          id: request.id,\n          result: r\n        });\n      }).catch(e => {\n        callback(e, undefined);\n      });\n    };\n    this.send = this.sendAsync;\n  }\n}\nclass AllowProvider {\n  constructor(isAllowedFunc) {\n    this.sendAsyncMiddleware = void 0;\n    this.isAllowedFunc = void 0;\n    if (isAllowedFunc) {\n      this.isAllowedFunc = isAllowedFunc;\n    } else {\n      this.isAllowedFunc = request => true;\n    }\n    this.sendAsyncMiddleware = allowProviderMiddleware(this.isAllowedFunc);\n  }\n  setIsAllowedFunc(fn) {\n    this.isAllowedFunc = fn;\n    this.sendAsyncMiddleware = allowProviderMiddleware(this.isAllowedFunc);\n  }\n}\nconst allowProviderMiddleware = isAllowed => next => {\n  return (request, callback, chainId) => {\n    // ensure precondition is met or do not allow the request to continue\n    if (!isAllowed(request)) {\n      throw new Error('allowProvider middleware precondition is unmet.');\n    } // request is allowed. keep going..\n\n    next(request, callback, chainId);\n  };\n};\nclass CachedProvider {\n  constructor(defaultChainId) {\n    this.cachableJsonRpcMethods = ['net_version', 'eth_chainId', 'eth_accounts', 'sequence_getWalletContext', 'sequence_getNetworks'];\n    this.cache = void 0;\n    this.onUpdateCallback = void 0;\n    this.defaultChainId = void 0;\n    this.sendAsyncMiddleware = next => {\n      return (request, callback, chainId) => {\n        // Respond early with cached result\n        if (this.cachableJsonRpcMethods.includes(request.method)) {\n          const key = this.cacheKey(request.method, request.params, chainId || this.defaultChainId);\n          const result = this.getCacheValue(key);\n          if (result && result !== '') {\n            callback(undefined, {\n              jsonrpc: '2.0',\n              id: request.id,\n              result: result\n            });\n            return;\n          }\n        } // Continue down the handler chain\n\n        next(request, (error, response, chainId) => {\n          // Store result in cache and continue\n          if (this.cachableJsonRpcMethods.includes(request.method)) {\n            if (response && response.result) {\n              const key = this.cacheKey(request.method, request.params, chainId || this.defaultChainId);\n              this.setCacheValue(key, response.result);\n            }\n          } // Exec next handler\n\n          callback(error, response);\n        }, chainId || this.defaultChainId);\n      };\n    };\n    this.cacheKey = (method, params, chainId) => {\n      let key = '';\n      if (chainId) {\n        key = `${chainId}:${method}:`;\n      } else {\n        key = `:${method}:`;\n      }\n      if (!params || params.length === 0) {\n        return key + '[]';\n      }\n      return key + JSON.stringify(params);\n    };\n    this.getCache = () => this.cache;\n    this.setCache = cache => {\n      this.cache = cache;\n      if (this.onUpdateCallback) {\n        this.onUpdateCallback();\n      }\n    };\n    this.getCacheValue = key => {\n      return this.cache[key];\n    };\n    this.setCacheValue = (key, value) => {\n      this.cache[key] = value;\n      if (this.onUpdateCallback) {\n        this.onUpdateCallback(key, value);\n      }\n    };\n    this.clearCache = () => {\n      this.cache = {};\n    };\n    this.cache = {};\n    this.defaultChainId = defaultChainId;\n  }\n  onUpdate(callback) {\n    this.onUpdateCallback = callback;\n  }\n}\nclass EagerProvider {\n  constructor(props) {\n    this.props = void 0;\n    this.sendAsyncMiddleware = next => {\n      return (request, callback, chainId) => {\n        const {\n          id,\n          method\n        } = request;\n        switch (method) {\n          case 'net_version':\n            if (this.props.chainId) {\n              callback(undefined, {\n                jsonrpc: '2.0',\n                id: id,\n                result: `${this.props.chainId}`\n              });\n              return;\n            }\n            break;\n          case 'eth_chainId':\n            if (this.props.chainId) {\n              callback(undefined, {\n                jsonrpc: '2.0',\n                id: id,\n                result: ethers.utils.hexlify(this.props.chainId)\n              });\n              return;\n            }\n            break;\n          case 'eth_accounts':\n            if (this.props.accountAddress) {\n              callback(undefined, {\n                jsonrpc: '2.0',\n                id: id,\n                result: [ethers.utils.getAddress(this.props.accountAddress)]\n              });\n              return;\n            }\n            break;\n          case 'sequence_getWalletContext':\n            if (this.props.walletContext) {\n              callback(undefined, {\n                jsonrpc: '2.0',\n                id: id,\n                result: this.props.walletContext\n              });\n              return;\n            }\n            break;\n        }\n        next(request, callback, chainId);\n      };\n    };\n    this.props = props;\n  }\n}\nconst exceptionProviderMiddleware = next => {\n  return (request, callback, chainId) => {\n    next(request, (error, response) => {\n      if (!error && response && response.error) {\n        if (typeof response.error === 'string') {\n          throw new Error(response.error);\n        } else {\n          throw new Error(response.error.message);\n        }\n      }\n      callback(error, response);\n    }, chainId);\n  };\n};\nconst loggingProviderMiddleware = next => {\n  return (request, callback, chainId) => {\n    const chainIdLabel = chainId ? ` chainId:${chainId}` : '';\n    logger.info(`[provider request]${chainIdLabel} id:${request.id} method:${request.method} params:`, request.params);\n    next(request, (error, response) => {\n      if (error) {\n        logger.warn(`[provider response]${chainIdLabel} id:${request.id} method:${request.method} params:`, request.params, `error:`, error);\n      } else {\n        logger.info(`[provider response]${chainIdLabel} id:${request.id} method:${request.method} params:`, request.params, `response:`, response);\n      }\n      callback(error, response);\n    }, chainId);\n  };\n};\nconst networkProviderMiddleware = getChainId => next => {\n  return (request, callback, chainId) => {\n    const networkChainId = getChainId(request);\n    const {\n      id,\n      method\n    } = request;\n    switch (method) {\n      case 'net_version':\n        callback(undefined, {\n          jsonrpc: '2.0',\n          id: id,\n          result: `${networkChainId}`\n        });\n        return;\n      case 'eth_chainId':\n        callback(undefined, {\n          jsonrpc: '2.0',\n          id: id,\n          result: ethers.utils.hexlify(networkChainId)\n        });\n        return;\n    } // request is allowed. keep going..\n\n    next(request, callback, chainId);\n  };\n};\nconst SignerJsonRpcMethods = ['personal_sign', 'eth_sign', 'eth_signTypedData', 'eth_signTypedData_v4', 'eth_sendTransaction', 'eth_sendRawTransaction', 'sequence_getWalletContext', 'sequence_getWalletConfig', 'sequence_getWalletState', 'sequence_getNetworks', 'sequence_updateConfig', 'sequence_publishConfig', 'sequence_estimateGasLimits', 'sequence_gasRefundOptions', 'sequence_getNonce', 'sequence_relay', 'eth_decrypt', 'eth_getEncryptionPublicKey', 'wallet_addEthereumChain', 'wallet_switchEthereumChain', 'wallet_registerOnboarding', 'wallet_watchAsset', 'wallet_scanQRCode'];\nclass SigningProvider {\n  constructor(provider) {\n    this.provider = void 0;\n    this.sendAsyncMiddleware = next => {\n      return (request, callback, chainId) => {\n        // Forward signing requests to the signing provider\n        if (SignerJsonRpcMethods.includes(request.method)) {\n          this.provider.sendAsync(request, callback, chainId);\n          return;\n        } // Continue to next handler\n\n        next(request, callback, chainId);\n      };\n    };\n    this.provider = provider;\n  }\n}\nclass PublicProvider {\n  constructor(rpcUrl) {\n    this.privateJsonRpcMethods = ['net_version', 'eth_chainId', 'eth_accounts', ...SignerJsonRpcMethods];\n    this.provider = void 0;\n    this.rpcUrl = void 0;\n    this.sendAsyncMiddleware = next => {\n      return (request, callback) => {\n        // When provider is configured, send non-private methods to our local public provider\n        if (this.provider && !this.privateJsonRpcMethods.includes(request.method)) {\n          this.provider.send(request.method, request.params).then(r => {\n            callback(undefined, {\n              jsonrpc: '2.0',\n              id: request.id,\n              result: r\n            });\n          }).catch(e => callback(e));\n          return;\n        } // Continue to next handler\n\n        logger.debug('[public-provider] sending request to signer window', request.method);\n        next(request, callback);\n      };\n    };\n    if (rpcUrl) {\n      this.setRpcUrl(rpcUrl);\n    }\n  }\n  getRpcUrl() {\n    return this.rpcUrl;\n  }\n  setRpcUrl(rpcUrl) {\n    if (!rpcUrl || rpcUrl === '') {\n      this.rpcUrl = undefined;\n      this.provider = undefined;\n    } else {\n      this.rpcUrl = rpcUrl;\n      this.provider = new JsonRpcProvider(rpcUrl);\n    }\n  }\n}\nexport { AllowProvider, CachedProvider, ChainId, EagerProvider, JsonRpcExternalProvider, JsonRpcRouter, JsonRpcSender, JsonRpcVersion, PublicProvider, SigningProvider, allowProviderMiddleware, checkNetworkConfig, createJsonRpcMiddlewareStack, createNetworkConfig, ensureUniqueNetworks, ensureValidNetworks, exceptionProviderMiddleware, findNetworkConfig, getAuthNetwork, getChainId, isJsonRpcHandler, isJsonRpcProvider, isNetworkConfig, isValidNetworkConfig, loggingProviderMiddleware, mainnetNetworks, maybeChainId, networkProviderMiddleware, networks, networksIndex, sequenceContext, sortNetworks, testnetNetworks, updateNetworkConfig };","map":{"version":3,"names":["urlClean","logger","ethers","JsonRpcProvider","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","isNetworkConfig","cand","chainId","undefined","name","rpcUrl","relayer","getChainId","BigNumber","from","toNumber","maybeChainId","getAuthNetwork","networks","find","network","isAuthChain","isValidNetworkConfig","networkConfig","raise","skipRelayerCheck","Error","configs","Array","isArray","push","chainIds","map","c","sort","dupes","filter","indexOf","forEach","toLowerCase","names","nameDupes","defaultChain","authChain","provider","isDefaultChain","ensureValidNetworks","ensureUniqueNetworks","updateNetworkConfig","src","dest","ensAddress","createNetworkConfig","defaultChainId","vars","config","n","mainNetwork","sortNetworks","findNetworkConfig","startsWith","id","checkNetworkConfig","networksIndex","index","a","b","defaultConfigIdx","findIndex","splice","authConfigIdx","ChainId","MAINNET","title","blockExplorer","rootUrl","ROPSTEN","testnet","RINKEBY","GOERLI","KOVAN","POLYGON","POLYGON_MUMBAI","BSC","BSC_TESTNET","OPTIMISM","OPTIMISM_TESTNET","ARBITRUM","ARBITRUM_TESTNET","AVALANCHE","AVALANCHE_TESTNET","FANTOM","FANTOM_TESTNET","GNOSIS","AURORA","AURORA_TESTNET","mainnetNetworks","baseRpcUrl","url","baseRelayerUrl","testnetNetworks","sequenceContext","factory","mainModule","mainModuleUpgradable","guestModule","sequenceUtils","libs","requireFreshSigner","JsonRpcVersion","JsonRpcRouter","constructor","middlewares","sender","handler","setMiddleware","createJsonRpcMiddlewareStack","sendAsync","request","callback","err","toMiddleware","v","sendAsyncMiddleware","chain","isJsonRpcProvider","send","defaultUrl","detectNetwork","getSigner","perform","isJsonRpcHandler","_nextId","JsonRpcSender","method","params","then","r","jsonrpc","result","catch","e","bind","Promise","resolve","reject","error","response","JsonRpcExternalProvider","AllowProvider","isAllowedFunc","allowProviderMiddleware","setIsAllowedFunc","fn","isAllowed","next","CachedProvider","cachableJsonRpcMethods","cache","onUpdateCallback","includes","cacheKey","getCacheValue","setCacheValue","JSON","stringify","getCache","setCache","value","clearCache","onUpdate","EagerProvider","props","utils","hexlify","accountAddress","getAddress","walletContext","exceptionProviderMiddleware","message","loggingProviderMiddleware","chainIdLabel","info","warn","networkProviderMiddleware","networkChainId","SignerJsonRpcMethods","SigningProvider","PublicProvider","privateJsonRpcMethods","debug","setRpcUrl","getRpcUrl"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/@0xsequence/network/dist/0xsequence-network.esm.js"],"sourcesContent":["import { urlClean, logger } from '@0xsequence/utils';\nimport { ethers } from 'ethers';\nimport { JsonRpcProvider } from '@ethersproject/providers';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction isNetworkConfig(cand) {\n  return cand && cand.chainId !== undefined && cand.name !== undefined && cand.rpcUrl !== undefined && cand.relayer !== undefined;\n}\nconst getChainId = chainId => {\n  if (typeof chainId === 'number') {\n    return chainId;\n  }\n\n  if (chainId.chainId) {\n    return chainId.chainId;\n  }\n\n  return ethers.BigNumber.from(chainId).toNumber();\n};\nconst maybeChainId = chainId => {\n  if (!chainId) return undefined;\n  return getChainId(chainId);\n};\nconst getAuthNetwork = networks => {\n  return networks.find(network => network.isAuthChain);\n};\nconst isValidNetworkConfig = (networkConfig, raise = false, skipRelayerCheck = false) => {\n  if (!networkConfig) throw new Error(`invalid network config: empty config`);\n  const configs = [];\n\n  if (Array.isArray(networkConfig)) {\n    configs.push(...networkConfig);\n  } else {\n    configs.push(networkConfig);\n  }\n\n  if (configs.length === 0) {\n    if (raise) throw new Error(`invalid network config: empty config`);\n    return false;\n  } // Ensure distinct chainId configs\n\n\n  const chainIds = configs.map(c => c.chainId).sort();\n  const dupes = chainIds.filter((c, i) => chainIds.indexOf(c) !== i);\n\n  if (dupes.length > 0) {\n    if (raise) throw new Error(`invalid network config: duplicate chainIds ${dupes}`);\n    return false;\n  } // Downcase all network names\n\n\n  configs.forEach(c => c.name = c.name.toLowerCase()); // Ensure distinct network names\n\n  const names = configs.map(c => c.name).sort();\n  const nameDupes = names.filter((c, i) => names.indexOf(c) !== i);\n\n  if (nameDupes.length > 0) {\n    if (raise) throw new Error(`invalid network config: duplicate network names ${nameDupes}`);\n    return false;\n  } // Ensure rpcUrl or provider is specified\n  // Ensure relayerUrl or relayer is specified\n  // Ensure one default chain\n  // Ensure one auth chain\n\n\n  let defaultChain = false;\n  let authChain = false;\n\n  for (let i = 0; i < configs.length; i++) {\n    const c = configs[i];\n\n    if ((!c.rpcUrl || c.rpcUrl === '') && !c.provider) {\n      if (raise) throw new Error(`invalid network config for chainId ${c.chainId}: rpcUrl or provider must be provided`);\n      return false;\n    }\n\n    if (!skipRelayerCheck) {\n      if (!c.relayer) {\n        if (raise) throw new Error(`invalid network config for chainId ${c.chainId}: relayer must be provided`);\n        return false;\n      }\n    }\n\n    if (c.isDefaultChain) {\n      if (defaultChain) {\n        if (raise) throw new Error(`invalid network config for chainId ${c.chainId}: DefaultChain is already set by another config`);\n        return false;\n      }\n\n      defaultChain = true;\n    }\n\n    if (c.isAuthChain) {\n      if (authChain) {\n        if (raise) throw new Error(`invalid network config for chainId ${c.chainId}: AuthChain is already set by another config`);\n      }\n\n      authChain = true;\n    }\n  }\n\n  if (!defaultChain) {\n    if (raise) throw new Error(`invalid network config: DefaultChain must be set`);\n    return false;\n  }\n\n  if (!authChain) {\n    if (raise) throw new Error(`invalid network config: AuthChain must be set`);\n    return false;\n  }\n\n  return true;\n};\nconst ensureValidNetworks = (networks, skipRelayerCheck = false) => {\n  isValidNetworkConfig(networks, true, skipRelayerCheck);\n  return networks;\n};\nconst ensureUniqueNetworks = (networks, raise = true) => {\n  const chainIds = networks.map(c => c.chainId).sort();\n  const dupes = chainIds.filter((c, i) => chainIds.indexOf(c) !== i);\n\n  if (dupes.length > 0) {\n    if (raise) throw new Error(`invalid network config: duplicate chainIds ${dupes}`);\n    return false;\n  }\n\n  return true;\n};\nconst updateNetworkConfig = (src, dest) => {\n  if (!src || !dest) return;\n\n  if (!src.chainId && !src.name) {\n    throw new Error('failed to update network config: source config is missing chainId or name');\n  }\n\n  if (src.chainId !== dest.chainId && src.name !== dest.name) {\n    throw new Error('failed to update network config: one of chainId or name must match');\n  }\n\n  if (src.rpcUrl) {\n    dest.rpcUrl = src.rpcUrl;\n    dest.provider = undefined;\n  }\n\n  if (src.provider) {\n    dest.provider = src.provider;\n  }\n\n  if (src.relayer) {\n    dest.relayer = src.relayer;\n  }\n\n  if (src.ensAddress) {\n    dest.ensAddress = src.ensAddress;\n  } // NOTE: we do not set default or auth chain from here\n  // if (src.isDefaultChain) {\n  //   dest.isDefaultChain = src.isDefaultChain\n  // }\n  // if (src.isAuthChain) {\n  //   dest.isAuthChain = src.isAuthChain\n  // }\n\n};\nconst createNetworkConfig = (networks, defaultChainId, vars) => {\n  let config = [];\n\n  if (typeof networks === 'function' && vars) {\n    config = networks(vars);\n  } else {\n    config = networks;\n  }\n\n  if (defaultChainId) {\n    config.forEach(n => n.isDefaultChain = false);\n    const mainNetwork = config.filter(n => n.chainId === defaultChainId);\n\n    if (!mainNetwork || mainNetwork.length === 0) {\n      throw new Error(`defaultChainId ${defaultChainId} cannot be found in network list`);\n    } else {\n      mainNetwork[0].isDefaultChain = true;\n    }\n  }\n\n  return ensureValidNetworks(sortNetworks(config));\n};\nconst findNetworkConfig = (networks, chainId) => {\n  if (typeof chainId === 'string') {\n    if (chainId.startsWith('0x')) {\n      const id = ethers.BigNumber.from(chainId).toNumber();\n      return networks.find(n => n.chainId === id);\n    } else {\n      return networks.find(n => n.name === chainId);\n    }\n  } else if (typeof chainId === 'number') {\n    return networks.find(n => n.chainId === chainId);\n  } else if (chainId.chainId) {\n    return networks.find(n => n.chainId === chainId.chainId);\n  } else {\n    return undefined;\n  }\n};\nconst checkNetworkConfig = (network, chainId) => {\n  if (!network) return false;\n  if (network.name === chainId) return true;\n  if (network.chainId === chainId) return true;\n  return false;\n};\nconst networksIndex = networks => {\n  const index = {};\n\n  for (let i = 0; i < networks.length; i++) {\n    index[networks[i].name] = networks[i];\n  }\n\n  return index;\n}; // TODO: we should remove sortNetworks in the future but this is a breaking change for dapp integrations on older versions <-> wallet\n// sortNetworks orders the network config list by: defaultChain, authChain, ..rest by chainId ascending numbers\n\nconst sortNetworks = networks => {\n  if (!networks) {\n    return [];\n  }\n\n  const config = networks.sort((a, b) => {\n    if (a.chainId === b.chainId) return 0;\n    return a.chainId < b.chainId ? -1 : 1;\n  }); // DefaultChain goes first\n\n  const defaultConfigIdx = config.findIndex(c => c.isDefaultChain);\n  if (defaultConfigIdx > 0) config.splice(0, 0, config.splice(defaultConfigIdx, 1)[0]); // AuthChain goes second\n\n  const authConfigIdx = config.findIndex(c => c.isAuthChain && c.isDefaultChain !== true);\n  if (authConfigIdx > 0) config.splice(1, 0, config.splice(authConfigIdx, 1)[0]);\n  return config;\n};\n\nlet ChainId;\n\n(function (ChainId) {\n  ChainId[ChainId[\"MAINNET\"] = 1] = \"MAINNET\";\n  ChainId[ChainId[\"ROPSTEN\"] = 3] = \"ROPSTEN\";\n  ChainId[ChainId[\"RINKEBY\"] = 4] = \"RINKEBY\";\n  ChainId[ChainId[\"GOERLI\"] = 5] = \"GOERLI\";\n  ChainId[ChainId[\"KOVAN\"] = 42] = \"KOVAN\";\n  ChainId[ChainId[\"POLYGON\"] = 137] = \"POLYGON\";\n  ChainId[ChainId[\"POLYGON_MUMBAI\"] = 80001] = \"POLYGON_MUMBAI\";\n  ChainId[ChainId[\"BSC\"] = 56] = \"BSC\";\n  ChainId[ChainId[\"BSC_TESTNET\"] = 97] = \"BSC_TESTNET\";\n  ChainId[ChainId[\"OPTIMISM\"] = 10] = \"OPTIMISM\";\n  ChainId[ChainId[\"OPTIMISM_TESTNET\"] = 69] = \"OPTIMISM_TESTNET\";\n  ChainId[ChainId[\"ARBITRUM\"] = 42161] = \"ARBITRUM\";\n  ChainId[ChainId[\"ARBITRUM_TESTNET\"] = 421611] = \"ARBITRUM_TESTNET\";\n  ChainId[ChainId[\"AVALANCHE\"] = 43114] = \"AVALANCHE\";\n  ChainId[ChainId[\"AVALANCHE_TESTNET\"] = 43113] = \"AVALANCHE_TESTNET\";\n  ChainId[ChainId[\"FANTOM\"] = 250] = \"FANTOM\";\n  ChainId[ChainId[\"FANTOM_TESTNET\"] = 4002] = \"FANTOM_TESTNET\";\n  ChainId[ChainId[\"GNOSIS\"] = 100] = \"GNOSIS\";\n  ChainId[ChainId[\"AURORA\"] = 1313161554] = \"AURORA\";\n  ChainId[ChainId[\"AURORA_TESTNET\"] = 1313161556] = \"AURORA_TESTNET\";\n})(ChainId || (ChainId = {}));\n\nconst networks = {\n  [ChainId.MAINNET]: {\n    chainId: ChainId.MAINNET,\n    name: 'mainnet',\n    title: 'Ethereum',\n    blockExplorer: {\n      name: 'Etherscan',\n      rootUrl: 'https://etherscan.io/'\n    }\n  },\n  [ChainId.ROPSTEN]: {\n    chainId: ChainId.ROPSTEN,\n    name: 'ropsten',\n    title: 'Ropsten',\n    testnet: true,\n    blockExplorer: {\n      name: 'Etherscan (Ropsten)',\n      rootUrl: 'https://ropsten.etherscan.io/'\n    }\n  },\n  [ChainId.RINKEBY]: {\n    chainId: ChainId.RINKEBY,\n    name: 'rinkeby',\n    title: 'Rinkeby',\n    testnet: true,\n    blockExplorer: {\n      name: 'Etherscan (Rinkeby)',\n      rootUrl: 'https://rinkeby.etherscan.io/'\n    }\n  },\n  [ChainId.GOERLI]: {\n    chainId: ChainId.GOERLI,\n    name: 'goerli',\n    title: 'Goerli',\n    testnet: true,\n    blockExplorer: {\n      name: 'Etherscan (Goerli)',\n      rootUrl: 'https://goerli.etherscan.io/'\n    }\n  },\n  [ChainId.KOVAN]: {\n    chainId: ChainId.KOVAN,\n    name: 'kovan',\n    title: 'Kovan',\n    testnet: true,\n    blockExplorer: {\n      name: 'Etherscan (Kovan)',\n      rootUrl: 'https://kovan.etherscan.io/'\n    }\n  },\n  [ChainId.POLYGON]: {\n    chainId: ChainId.POLYGON,\n    name: 'polygon',\n    title: 'Polygon',\n    blockExplorer: {\n      name: 'Polygonscan',\n      rootUrl: 'https://polygonscan.com/'\n    }\n  },\n  [ChainId.POLYGON_MUMBAI]: {\n    chainId: ChainId.POLYGON_MUMBAI,\n    name: 'mumbai',\n    title: 'Polygon Mumbai',\n    testnet: true,\n    blockExplorer: {\n      name: 'Polygonscan (Mumbai)',\n      rootUrl: 'https://mumbai.polygonscan.com/'\n    }\n  },\n  [ChainId.BSC]: {\n    chainId: ChainId.BSC,\n    name: 'bsc',\n    title: 'BNB Smart Chain',\n    blockExplorer: {\n      name: 'BSCScan',\n      rootUrl: 'https://bscscan.com/'\n    }\n  },\n  [ChainId.BSC_TESTNET]: {\n    chainId: ChainId.BSC_TESTNET,\n    name: 'bsc-testnet',\n    title: 'BNB Smart Chain Testnet',\n    testnet: true,\n    blockExplorer: {\n      name: 'BSCScan (Testnet)',\n      rootUrl: 'https://testnet.bscscan.com/'\n    }\n  },\n  [ChainId.OPTIMISM]: {\n    chainId: ChainId.OPTIMISM,\n    name: 'optimism',\n    title: 'Optimism',\n    blockExplorer: {\n      name: 'Etherscan (Optimism)',\n      rootUrl: 'https://optimistic.etherscan.io/'\n    }\n  },\n  [ChainId.OPTIMISM_TESTNET]: {\n    chainId: ChainId.OPTIMISM_TESTNET,\n    name: 'optimism-testnet',\n    title: 'Optimistic Kovan',\n    testnet: true,\n    blockExplorer: {\n      name: 'Etherscan (Optimism Testnet)',\n      rootUrl: 'https://kovan-optimistic.etherscan.io/'\n    }\n  },\n  [ChainId.ARBITRUM]: {\n    chainId: ChainId.ARBITRUM,\n    name: 'arbitrum',\n    title: 'Arbitrum',\n    blockExplorer: {\n      name: 'Arbiscan',\n      rootUrl: 'https://arbiscan.io/'\n    }\n  },\n  [ChainId.ARBITRUM_TESTNET]: {\n    chainId: ChainId.ARBITRUM_TESTNET,\n    name: 'arbitrum-testnet',\n    title: 'Arbitrum Testnet',\n    testnet: true,\n    blockExplorer: {\n      name: 'Arbiscan (Testnet)',\n      rootUrl: 'https://testnet.arbiscan.io/'\n    }\n  },\n  [ChainId.AVALANCHE]: {\n    chainId: ChainId.AVALANCHE,\n    name: 'avalanche',\n    title: 'Avalanche',\n    blockExplorer: {\n      name: 'Snowtrace',\n      rootUrl: 'https://snowtrace.io/'\n    }\n  },\n  [ChainId.AVALANCHE_TESTNET]: {\n    chainId: ChainId.AVALANCHE_TESTNET,\n    name: 'avalanche-testnet',\n    title: 'Avalanche Testnet',\n    testnet: true,\n    blockExplorer: {\n      name: 'Snowtrace (Testnet)',\n      rootUrl: 'https://testnet.snowtrace.io/'\n    }\n  },\n  [ChainId.FANTOM]: {\n    chainId: ChainId.FANTOM,\n    name: 'fantom',\n    title: 'Fantom',\n    blockExplorer: {\n      name: 'FTMScan',\n      rootUrl: 'https://ftmscan.com/'\n    }\n  },\n  [ChainId.FANTOM_TESTNET]: {\n    chainId: ChainId.FANTOM_TESTNET,\n    name: 'fantom-testnet',\n    title: 'Fantom Testnet',\n    testnet: true,\n    blockExplorer: {\n      name: 'FTMScan (Testnet)',\n      rootUrl: 'https://testnet.ftmscan.com/'\n    }\n  },\n  [ChainId.GNOSIS]: {\n    chainId: ChainId.GNOSIS,\n    name: 'gnosis',\n    title: 'Gnosis Chain',\n    blockExplorer: {\n      name: 'Gnosis Chain Explorer',\n      rootUrl: 'https://blockscout.com/xdai/mainnet/'\n    }\n  },\n  [ChainId.AURORA]: {\n    chainId: ChainId.AURORA,\n    name: 'aurora',\n    title: 'Aurora',\n    blockExplorer: {\n      name: 'Aurora Explorer',\n      rootUrl: 'https://aurorascan.dev/'\n    }\n  },\n  [ChainId.AURORA_TESTNET]: {\n    chainId: ChainId.AURORA_TESTNET,\n    name: 'aurora-testnet',\n    title: 'Aurora Testnet',\n    blockExplorer: {\n      name: 'Aurora Explorer (Testnet)',\n      rootUrl: 'https://testnet.aurorascan.dev/'\n    }\n  }\n};\nconst mainnetNetworks = createNetworkConfig(vars => [_extends({}, networks[ChainId.MAINNET], {\n  ensAddress: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n  rpcUrl: urlClean(`${vars.baseRpcUrl}/mainnet`),\n  relayer: {\n    url: urlClean(`${vars.baseRelayerUrl}/mainnet`)\n  },\n  isDefaultChain: true\n}), _extends({}, networks[ChainId.POLYGON], {\n  rpcUrl: 'https://rpc-mainnet.matic.network',\n  relayer: {\n    url: urlClean(`${vars.baseRelayerUrl}/matic`)\n  },\n  isAuthChain: true\n})], 1, {\n  baseRpcUrl: 'https://nodes.sequence.app',\n  baseRelayerUrl: 'https://relayers.sequence.app'\n});\nconst testnetNetworks = createNetworkConfig(vars => [_extends({}, networks[ChainId.RINKEBY], {\n  ensAddress: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n  rpcUrl: urlClean(`${vars.baseRpcUrl}/rinkeby`),\n  relayer: {\n    url: urlClean(`${vars.baseRelayerUrl}/rinkeby`)\n  },\n  isDefaultChain: true\n}), _extends({}, networks[ChainId.GOERLI], {\n  ensAddress: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n  rpcUrl: urlClean(`${vars.baseRpcUrl}/goerli`),\n  relayer: {\n    url: urlClean(`${vars.baseRelayerUrl}/goerli`)\n  },\n  isAuthChain: true\n})], undefined, {\n  baseRpcUrl: 'https://nodes.sequence.app',\n  baseRelayerUrl: 'https://relayers.sequence.app'\n});\n\n// WalletContext is the module addresses deployed on a network, aka the context / environment\n// of the Sequence Smart Wallet system on Ethereum.\n// sequenceContext are the deployed addresses of modules available on public networks.\nconst sequenceContext = {\n  factory: '0xf9D09D634Fb818b05149329C1dcCFAeA53639d96',\n  mainModule: '0xd01F11855bCcb95f88D7A48492F66410d4637313',\n  mainModuleUpgradable: '0x7EFE6cE415956c5f80C6530cC6cc81b4808F6118',\n  guestModule: '0x02390F3E6E5FD1C6786CB78FD3027C117a9955A7',\n  sequenceUtils: '0xd130B43062D875a4B7aF3f8fc036Bc6e9D3E1B3E',\n  libs: {\n    requireFreshSigner: '0xE6B9B21C077F382333220a072e4c44280b873907'\n  }\n};\n\nconst JsonRpcVersion = '2.0';\n\nclass JsonRpcRouter {\n  constructor(middlewares, sender) {\n    this.sender = void 0;\n    this.handler = void 0;\n    this.sender = sender;\n\n    if (middlewares) {\n      this.setMiddleware(middlewares);\n    }\n  }\n\n  setMiddleware(middlewares) {\n    this.handler = createJsonRpcMiddlewareStack(middlewares, this.sender.sendAsync);\n  }\n\n  sendAsync(request, callback, chainId) {\n    try {\n      this.handler(request, callback, chainId);\n    } catch (err) {\n      callback(err, undefined);\n    }\n  } // createWeb3Provider(network?: Networkish): EthersWeb3Provider {\n  //   return new EthersWeb3Provider(this.sender, network)\n  // }\n\n\n}\nconst createJsonRpcMiddlewareStack = (middlewares, handler) => {\n  if (middlewares.length === 0) return handler;\n\n  const toMiddleware = v => {\n    if (v.sendAsyncMiddleware) {\n      return v.sendAsyncMiddleware;\n    } else {\n      return v;\n    }\n  };\n\n  let chain;\n  chain = toMiddleware(middlewares[middlewares.length - 1])(handler);\n\n  for (let i = middlewares.length - 2; i >= 0; i--) {\n    chain = toMiddleware(middlewares[i])(chain);\n  }\n\n  return chain;\n};\n\nfunction isJsonRpcProvider(cand) {\n  return cand !== undefined && cand.send !== undefined && cand.constructor.defaultUrl !== undefined && cand.detectNetwork !== undefined && cand.getSigner !== undefined && cand.perform !== undefined;\n}\nfunction isJsonRpcHandler(cand) {\n  return cand !== undefined && cand.sendAsync !== undefined;\n}\n\nlet _nextId = 0;\nclass JsonRpcSender {\n  constructor(provider, defaultChainId) {\n    this.send = void 0;\n    this.request = void 0;\n    this.defaultChainId = void 0;\n\n    this.sendAsync = (request, callback, chainId) => {\n      this.send(request.method, request.params, chainId || this.defaultChainId).then(r => {\n        callback(undefined, {\n          jsonrpc: '2.0',\n          id: request.id,\n          result: r\n        });\n      }).catch(e => {\n        callback(e, undefined);\n      });\n    };\n\n    this.defaultChainId = defaultChainId;\n\n    if (isJsonRpcProvider(provider)) {\n      // we can ignore defaultChainId for JsonRpcProviders as they are already chain-bound\n      this.send = provider.send.bind(provider);\n    } else if (isJsonRpcHandler(provider)) {\n      this.send = (method, params, chainId) => {\n        return new Promise((resolve, reject) => {\n          provider.sendAsync({\n            // TODO: really shouldn't have to set these here?\n            jsonrpc: JsonRpcVersion,\n            id: ++_nextId,\n            method,\n            params\n          }, (error, response) => {\n            if (error) {\n              reject(error);\n            } else if (response) {\n              resolve(response.result);\n            } else {\n              resolve(undefined);\n            }\n          }, chainId || this.defaultChainId);\n        });\n      };\n    } else {\n      this.send = provider;\n    }\n\n    this.request = (request, chainId) => {\n      return this.send(request.method, request.params, chainId);\n    };\n  }\n\n}\nclass JsonRpcExternalProvider {\n  constructor(provider) {\n    this.provider = provider;\n\n    this.sendAsync = (request, callback) => {\n      this.provider.send(request.method, request.params).then(r => {\n        callback(undefined, {\n          jsonrpc: '2.0',\n          id: request.id,\n          result: r\n        });\n      }).catch(e => {\n        callback(e, undefined);\n      });\n    };\n\n    this.send = this.sendAsync;\n  }\n\n}\n\nclass AllowProvider {\n  constructor(isAllowedFunc) {\n    this.sendAsyncMiddleware = void 0;\n    this.isAllowedFunc = void 0;\n\n    if (isAllowedFunc) {\n      this.isAllowedFunc = isAllowedFunc;\n    } else {\n      this.isAllowedFunc = request => true;\n    }\n\n    this.sendAsyncMiddleware = allowProviderMiddleware(this.isAllowedFunc);\n  }\n\n  setIsAllowedFunc(fn) {\n    this.isAllowedFunc = fn;\n    this.sendAsyncMiddleware = allowProviderMiddleware(this.isAllowedFunc);\n  }\n\n}\nconst allowProviderMiddleware = isAllowed => next => {\n  return (request, callback, chainId) => {\n    // ensure precondition is met or do not allow the request to continue\n    if (!isAllowed(request)) {\n      throw new Error('allowProvider middleware precondition is unmet.');\n    } // request is allowed. keep going..\n\n\n    next(request, callback, chainId);\n  };\n};\n\nclass CachedProvider {\n  constructor(defaultChainId) {\n    this.cachableJsonRpcMethods = ['net_version', 'eth_chainId', 'eth_accounts', 'sequence_getWalletContext', 'sequence_getNetworks'];\n    this.cache = void 0;\n    this.onUpdateCallback = void 0;\n    this.defaultChainId = void 0;\n\n    this.sendAsyncMiddleware = next => {\n      return (request, callback, chainId) => {\n        // Respond early with cached result\n        if (this.cachableJsonRpcMethods.includes(request.method)) {\n          const key = this.cacheKey(request.method, request.params, chainId || this.defaultChainId);\n          const result = this.getCacheValue(key);\n\n          if (result && result !== '') {\n            callback(undefined, {\n              jsonrpc: '2.0',\n              id: request.id,\n              result: result\n            });\n            return;\n          }\n        } // Continue down the handler chain\n\n\n        next(request, (error, response, chainId) => {\n          // Store result in cache and continue\n          if (this.cachableJsonRpcMethods.includes(request.method)) {\n            if (response && response.result) {\n              const key = this.cacheKey(request.method, request.params, chainId || this.defaultChainId);\n              this.setCacheValue(key, response.result);\n            }\n          } // Exec next handler\n\n\n          callback(error, response);\n        }, chainId || this.defaultChainId);\n      };\n    };\n\n    this.cacheKey = (method, params, chainId) => {\n      let key = '';\n\n      if (chainId) {\n        key = `${chainId}:${method}:`;\n      } else {\n        key = `:${method}:`;\n      }\n\n      if (!params || params.length === 0) {\n        return key + '[]';\n      }\n\n      return key + JSON.stringify(params);\n    };\n\n    this.getCache = () => this.cache;\n\n    this.setCache = cache => {\n      this.cache = cache;\n\n      if (this.onUpdateCallback) {\n        this.onUpdateCallback();\n      }\n    };\n\n    this.getCacheValue = key => {\n      return this.cache[key];\n    };\n\n    this.setCacheValue = (key, value) => {\n      this.cache[key] = value;\n\n      if (this.onUpdateCallback) {\n        this.onUpdateCallback(key, value);\n      }\n    };\n\n    this.clearCache = () => {\n      this.cache = {};\n    };\n\n    this.cache = {};\n    this.defaultChainId = defaultChainId;\n  }\n\n  onUpdate(callback) {\n    this.onUpdateCallback = callback;\n  }\n\n}\n\nclass EagerProvider {\n  constructor(props) {\n    this.props = void 0;\n\n    this.sendAsyncMiddleware = next => {\n      return (request, callback, chainId) => {\n        const {\n          id,\n          method\n        } = request;\n\n        switch (method) {\n          case 'net_version':\n            if (this.props.chainId) {\n              callback(undefined, {\n                jsonrpc: '2.0',\n                id: id,\n                result: `${this.props.chainId}`\n              });\n              return;\n            }\n\n            break;\n\n          case 'eth_chainId':\n            if (this.props.chainId) {\n              callback(undefined, {\n                jsonrpc: '2.0',\n                id: id,\n                result: ethers.utils.hexlify(this.props.chainId)\n              });\n              return;\n            }\n\n            break;\n\n          case 'eth_accounts':\n            if (this.props.accountAddress) {\n              callback(undefined, {\n                jsonrpc: '2.0',\n                id: id,\n                result: [ethers.utils.getAddress(this.props.accountAddress)]\n              });\n              return;\n            }\n\n            break;\n\n          case 'sequence_getWalletContext':\n            if (this.props.walletContext) {\n              callback(undefined, {\n                jsonrpc: '2.0',\n                id: id,\n                result: this.props.walletContext\n              });\n              return;\n            }\n\n            break;\n        }\n\n        next(request, callback, chainId);\n      };\n    };\n\n    this.props = props;\n  }\n\n}\n\nconst exceptionProviderMiddleware = next => {\n  return (request, callback, chainId) => {\n    next(request, (error, response) => {\n      if (!error && response && response.error) {\n        if (typeof response.error === 'string') {\n          throw new Error(response.error);\n        } else {\n          throw new Error(response.error.message);\n        }\n      }\n\n      callback(error, response);\n    }, chainId);\n  };\n};\n\nconst loggingProviderMiddleware = next => {\n  return (request, callback, chainId) => {\n    const chainIdLabel = chainId ? ` chainId:${chainId}` : '';\n    logger.info(`[provider request]${chainIdLabel} id:${request.id} method:${request.method} params:`, request.params);\n    next(request, (error, response) => {\n      if (error) {\n        logger.warn(`[provider response]${chainIdLabel} id:${request.id} method:${request.method} params:`, request.params, `error:`, error);\n      } else {\n        logger.info(`[provider response]${chainIdLabel} id:${request.id} method:${request.method} params:`, request.params, `response:`, response);\n      }\n\n      callback(error, response);\n    }, chainId);\n  };\n};\n\nconst networkProviderMiddleware = getChainId => next => {\n  return (request, callback, chainId) => {\n    const networkChainId = getChainId(request);\n    const {\n      id,\n      method\n    } = request;\n\n    switch (method) {\n      case 'net_version':\n        callback(undefined, {\n          jsonrpc: '2.0',\n          id: id,\n          result: `${networkChainId}`\n        });\n        return;\n\n      case 'eth_chainId':\n        callback(undefined, {\n          jsonrpc: '2.0',\n          id: id,\n          result: ethers.utils.hexlify(networkChainId)\n        });\n        return;\n    } // request is allowed. keep going..\n\n\n    next(request, callback, chainId);\n  };\n};\n\nconst SignerJsonRpcMethods = ['personal_sign', 'eth_sign', 'eth_signTypedData', 'eth_signTypedData_v4', 'eth_sendTransaction', 'eth_sendRawTransaction', 'sequence_getWalletContext', 'sequence_getWalletConfig', 'sequence_getWalletState', 'sequence_getNetworks', 'sequence_updateConfig', 'sequence_publishConfig', 'sequence_estimateGasLimits', 'sequence_gasRefundOptions', 'sequence_getNonce', 'sequence_relay', 'eth_decrypt', 'eth_getEncryptionPublicKey', 'wallet_addEthereumChain', 'wallet_switchEthereumChain', 'wallet_registerOnboarding', 'wallet_watchAsset', 'wallet_scanQRCode'];\nclass SigningProvider {\n  constructor(provider) {\n    this.provider = void 0;\n\n    this.sendAsyncMiddleware = next => {\n      return (request, callback, chainId) => {\n        // Forward signing requests to the signing provider\n        if (SignerJsonRpcMethods.includes(request.method)) {\n          this.provider.sendAsync(request, callback, chainId);\n          return;\n        } // Continue to next handler\n\n\n        next(request, callback, chainId);\n      };\n    };\n\n    this.provider = provider;\n  }\n\n}\n\nclass PublicProvider {\n  constructor(rpcUrl) {\n    this.privateJsonRpcMethods = ['net_version', 'eth_chainId', 'eth_accounts', ...SignerJsonRpcMethods];\n    this.provider = void 0;\n    this.rpcUrl = void 0;\n\n    this.sendAsyncMiddleware = next => {\n      return (request, callback) => {\n        // When provider is configured, send non-private methods to our local public provider\n        if (this.provider && !this.privateJsonRpcMethods.includes(request.method)) {\n          this.provider.send(request.method, request.params).then(r => {\n            callback(undefined, {\n              jsonrpc: '2.0',\n              id: request.id,\n              result: r\n            });\n          }).catch(e => callback(e));\n          return;\n        } // Continue to next handler\n\n\n        logger.debug('[public-provider] sending request to signer window', request.method);\n        next(request, callback);\n      };\n    };\n\n    if (rpcUrl) {\n      this.setRpcUrl(rpcUrl);\n    }\n  }\n\n  getRpcUrl() {\n    return this.rpcUrl;\n  }\n\n  setRpcUrl(rpcUrl) {\n    if (!rpcUrl || rpcUrl === '') {\n      this.rpcUrl = undefined;\n      this.provider = undefined;\n    } else {\n      this.rpcUrl = rpcUrl;\n      this.provider = new JsonRpcProvider(rpcUrl);\n    }\n  }\n\n}\n\nexport { AllowProvider, CachedProvider, ChainId, EagerProvider, JsonRpcExternalProvider, JsonRpcRouter, JsonRpcSender, JsonRpcVersion, PublicProvider, SigningProvider, allowProviderMiddleware, checkNetworkConfig, createJsonRpcMiddlewareStack, createNetworkConfig, ensureUniqueNetworks, ensureValidNetworks, exceptionProviderMiddleware, findNetworkConfig, getAuthNetwork, getChainId, isJsonRpcHandler, isJsonRpcProvider, isNetworkConfig, isValidNetworkConfig, loggingProviderMiddleware, mainnetNetworks, maybeChainId, networkProviderMiddleware, networks, networksIndex, sequenceContext, sortNetworks, testnetNetworks, updateNetworkConfig };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}