{"ast":null,"code":"/**\n * Applies the proxied functions on the proxied amplitude snippet to an instance of the real object.\n * @ignore\n */\nexport var runQueuedFunctions = function runQueuedFunctions(instance, queue) {\n  convertProxyObjectToRealObject(instance, queue);\n};\n/**\n * Applies the proxied functions on the proxied object to an instance of the real object.\n * Used to convert proxied Identify and Revenue objects.\n */\nexport var convertProxyObjectToRealObject = function convertProxyObjectToRealObject(instance, queue) {\n  for (var i = 0; i < queue.length; i++) {\n    var _a = queue[i],\n      name_1 = _a.name,\n      args = _a.args,\n      resolve = _a.resolve;\n    var fn = instance && instance[name_1];\n    if (typeof fn === 'function') {\n      var result = fn.apply(instance, args);\n      if (typeof resolve === 'function') {\n        resolve(result === null || result === void 0 ? void 0 : result.promise);\n      }\n    }\n  }\n  return instance;\n};\n/**\n * Check if the param is snippet proxy\n */\nexport var isInstanceProxy = function isInstanceProxy(instance) {\n  var instanceProxy = instance;\n  return instanceProxy && instanceProxy._q !== undefined;\n};","map":{"version":3,"sources":["../../../src/utils/snippet-helper.ts"],"names":[],"mappings":"AAEA;;;AAGG;AACH,OAAO,IAAM,kBAAkB,GAAG,SAArB,kBAAkB,CAAI,QAAgB,EAAE,KAAiB,EAAA;EACpE,8BAA8B,CAAC,QAAQ,EAAE,KAAK,CAAC;AACjD,CAAC;AAED;;;AAGG;AACH,OAAO,IAAM,8BAA8B,GAAG,SAAjC,8BAA8B,CAAO,QAAW,EAAE,KAAiB,EAAA;EAC9E,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IAC/B,IAAA,EAAA,GAA0B,KAAK,CAAC,CAAC,CAAC;MAAhC,MAAI,GAAA,EAAA,CAAA,IAAA;MAAE,IAAI,GAAA,EAAA,CAAA,IAAA;MAAE,OAAO,GAAA,EAAA,CAAA,OAAa;IACxC,IAAM,EAAE,GAAG,QAAQ,IAAI,QAAQ,CAAC,MAAe,CAAC;IAChD,IAAI,OAAO,EAAE,KAAK,UAAU,EAAE;MAC5B,IAAM,MAAM,GAAG,EAAE,CAAC,KAAK,CAAC,QAAQ,EAAE,IAAI,CAA4B;MAClE,IAAI,OAAO,OAAO,KAAK,UAAU,EAAE;QACjC,OAAO,CAAC,MAAM,KAAA,IAAA,IAAN,MAAM,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAN,MAAM,CAAE,OAAO,CAAC;MACzB;IACF;EACF;EACD,OAAO,QAAQ;AACjB,CAAC;AAED;;AAEG;AACH,OAAO,IAAM,eAAe,GAAG,SAAlB,eAAe,CAAI,QAAiB,EAAA;EAC/C,IAAM,aAAa,GAAG,QAAyB;EAC/C,OAAO,aAAa,IAAI,aAAa,CAAC,EAAE,KAAK,SAAS;AACxD,CAAC","sourcesContent":["import { AmplitudeReturn, InstanceProxy, QueueProxy, Result } from '@amplitude/analytics-types';\n\n/**\n * Applies the proxied functions on the proxied amplitude snippet to an instance of the real object.\n * @ignore\n */\nexport const runQueuedFunctions = (instance: object, queue: QueueProxy) => {\n  convertProxyObjectToRealObject(instance, queue);\n};\n\n/**\n * Applies the proxied functions on the proxied object to an instance of the real object.\n * Used to convert proxied Identify and Revenue objects.\n */\nexport const convertProxyObjectToRealObject = <T>(instance: T, queue: QueueProxy): T => {\n  for (let i = 0; i < queue.length; i++) {\n    const { name, args, resolve } = queue[i];\n    const fn = instance && instance[name as keyof T];\n    if (typeof fn === 'function') {\n      const result = fn.apply(instance, args) as AmplitudeReturn<Result>;\n      if (typeof resolve === 'function') {\n        resolve(result?.promise);\n      }\n    }\n  }\n  return instance;\n};\n\n/**\n * Check if the param is snippet proxy\n */\nexport const isInstanceProxy = (instance: unknown): instance is InstanceProxy => {\n  const instanceProxy = instance as InstanceProxy;\n  return instanceProxy && instanceProxy._q !== undefined;\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}