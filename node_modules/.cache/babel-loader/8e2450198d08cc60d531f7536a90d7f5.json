{"ast":null,"code":"import _regeneratorRuntime from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { canConstructResponseFromBodyStream } from './_private/canConstructResponseFromBodyStream.js';\nimport { WorkboxError } from './_private/WorkboxError.js';\nimport './_version.js';\n/**\n * Allows developers to copy a response and modify its `headers`, `status`,\n * or `statusText` values (the values settable via a\n * [`ResponseInit`]{@link https://developer.mozilla.org/en-US/docs/Web/API/Response/Response#Syntax}\n * object in the constructor).\n * To modify these values, pass a function as the second argument. That\n * function will be invoked with a single object with the response properties\n * `{headers, status, statusText}`. The return value of this function will\n * be used as the `ResponseInit` for the new `Response`. To change the values\n * either modify the passed parameter(s) and return it, or return a totally\n * new object.\n *\n * This method is intentionally limited to same-origin responses, regardless of\n * whether CORS was used or not.\n *\n * @param {Response} response\n * @param {Function} modifier\n * @memberof module:workbox-core\n */\nfunction copyResponse(_x, _x2) {\n  return _copyResponse.apply(this, arguments);\n}\nfunction _copyResponse() {\n  _copyResponse = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(response, modifier) {\n    var origin, responseURL, clonedResponse, responseInit, modifiedResponseInit, body;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            origin = null; // If response.url isn't set, assume it's cross-origin and keep origin null.\n            if (response.url) {\n              responseURL = new URL(response.url);\n              origin = responseURL.origin;\n            }\n            if (!(origin !== self.location.origin)) {\n              _context.next = 4;\n              break;\n            }\n            throw new WorkboxError('cross-origin-copy-response', {\n              origin: origin\n            });\n          case 4:\n            clonedResponse = response.clone(); // Create a fresh `ResponseInit` object by cloning the headers.\n            responseInit = {\n              headers: new Headers(clonedResponse.headers),\n              status: clonedResponse.status,\n              statusText: clonedResponse.statusText\n            }; // Apply any user modifications.\n            modifiedResponseInit = modifier ? modifier(responseInit) : responseInit; // Create the new response from the body stream and `ResponseInit`\n            // modifications. Note: not all browsers support the Response.body stream,\n            // so fall back to reading the entire body into memory as a blob.\n            if (!canConstructResponseFromBodyStream()) {\n              _context.next = 11;\n              break;\n            }\n            _context.t0 = clonedResponse.body;\n            _context.next = 14;\n            break;\n          case 11:\n            _context.next = 13;\n            return clonedResponse.blob();\n          case 13:\n            _context.t0 = _context.sent;\n          case 14:\n            body = _context.t0;\n            return _context.abrupt(\"return\", new Response(body, modifiedResponseInit));\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _copyResponse.apply(this, arguments);\n}\nexport { copyResponse };","map":{"version":3,"names":["canConstructResponseFromBodyStream","WorkboxError","copyResponse","response","modifier","origin","url","responseURL","URL","self","location","clonedResponse","clone","responseInit","headers","Headers","status","statusText","modifiedResponseInit","body","blob","Response"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/workbox-core/copyResponse.js"],"sourcesContent":["/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { canConstructResponseFromBodyStream } from './_private/canConstructResponseFromBodyStream.js';\nimport { WorkboxError } from './_private/WorkboxError.js';\nimport './_version.js';\n/**\n * Allows developers to copy a response and modify its `headers`, `status`,\n * or `statusText` values (the values settable via a\n * [`ResponseInit`]{@link https://developer.mozilla.org/en-US/docs/Web/API/Response/Response#Syntax}\n * object in the constructor).\n * To modify these values, pass a function as the second argument. That\n * function will be invoked with a single object with the response properties\n * `{headers, status, statusText}`. The return value of this function will\n * be used as the `ResponseInit` for the new `Response`. To change the values\n * either modify the passed parameter(s) and return it, or return a totally\n * new object.\n *\n * This method is intentionally limited to same-origin responses, regardless of\n * whether CORS was used or not.\n *\n * @param {Response} response\n * @param {Function} modifier\n * @memberof module:workbox-core\n */\nasync function copyResponse(response, modifier) {\n    let origin = null;\n    // If response.url isn't set, assume it's cross-origin and keep origin null.\n    if (response.url) {\n        const responseURL = new URL(response.url);\n        origin = responseURL.origin;\n    }\n    if (origin !== self.location.origin) {\n        throw new WorkboxError('cross-origin-copy-response', { origin });\n    }\n    const clonedResponse = response.clone();\n    // Create a fresh `ResponseInit` object by cloning the headers.\n    const responseInit = {\n        headers: new Headers(clonedResponse.headers),\n        status: clonedResponse.status,\n        statusText: clonedResponse.statusText,\n    };\n    // Apply any user modifications.\n    const modifiedResponseInit = modifier ? modifier(responseInit) : responseInit;\n    // Create the new response from the body stream and `ResponseInit`\n    // modifications. Note: not all browsers support the Response.body stream,\n    // so fall back to reading the entire body into memory as a blob.\n    const body = canConstructResponseFromBodyStream() ?\n        clonedResponse.body : await clonedResponse.blob();\n    return new Response(body, modifiedResponseInit);\n}\nexport { copyResponse };\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,kCAAkC,QAAQ,kDAAkD;AACrG,SAASC,YAAY,QAAQ,4BAA4B;AACzD,OAAO,eAAe;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA,SAmBeC,YAAY;EAAA;AAAA;AAAA;EAAA,yEAA3B,iBAA4BC,QAAQ,EAAEC,QAAQ;IAAA;IAAA;MAAA;QAAA;UAAA;YACtCC,MAAM,GAAG,IAAI,EACjB;YACA,IAAIF,QAAQ,CAACG,GAAG,EAAE;cACRC,WAAW,GAAG,IAAIC,GAAG,CAACL,QAAQ,CAACG,GAAG,CAAC;cACzCD,MAAM,GAAGE,WAAW,CAACF,MAAM;YAC/B;YAAC,MACGA,MAAM,KAAKI,IAAI,CAACC,QAAQ,CAACL,MAAM;cAAA;cAAA;YAAA;YAAA,MACzB,IAAIJ,YAAY,CAAC,4BAA4B,EAAE;cAAEI,MAAM,EAANA;YAAO,CAAC,CAAC;UAAA;YAE9DM,cAAc,GAAGR,QAAQ,CAACS,KAAK,EAAE,EACvC;YACMC,YAAY,GAAG;cACjBC,OAAO,EAAE,IAAIC,OAAO,CAACJ,cAAc,CAACG,OAAO,CAAC;cAC5CE,MAAM,EAAEL,cAAc,CAACK,MAAM;cAC7BC,UAAU,EAAEN,cAAc,CAACM;YAC/B,CAAC,EACD;YACMC,oBAAoB,GAAGd,QAAQ,GAAGA,QAAQ,CAACS,YAAY,CAAC,GAAGA,YAAY,EAC7E;YACA;YACA;YAAA,KACab,kCAAkC,EAAE;cAAA;cAAA;YAAA;YAAA,cAC7CW,cAAc,CAACQ,IAAI;YAAA;YAAA;UAAA;YAAA;YAAA,OAASR,cAAc,CAACS,IAAI,EAAE;UAAA;YAAA;UAAA;YAD/CD,IAAI;YAAA,iCAEH,IAAIE,QAAQ,CAACF,IAAI,EAAED,oBAAoB,CAAC;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAClD;EAAA;AAAA;AACD,SAAShB,YAAY"},"metadata":{},"sourceType":"module"}