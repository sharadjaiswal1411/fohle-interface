{"ast":null,"code":"import{Interface}from'@ethersproject/abi';import{abi as STAKING_REWARDS_ABI}from'@uniswap/liquidity-staker/build/StakingRewards.json';import{CurrencyAmount}from'@uniswap/sdk-core';import{Pair}from'@uniswap/v2-sdk';import{useWeb3React}from'@web3-react/core';import{SupportedChainId}from'constants/chains';import useCurrentBlockTimestamp from'hooks/useCurrentBlockTimestamp';import JSBI from'jsbi';import{NEVER_RELOAD,useMultipleContractSingleData}from'lib/hooks/multicall';import{useMemo}from'react';import{DAI,UNI,USDC_MAINNET,USDT,WBTC,WRAPPED_NATIVE_CURRENCY}from'../../constants/tokens';var STAKING_REWARDS_INTERFACE=new Interface(STAKING_REWARDS_ABI);export var STAKING_GENESIS=1600387200;var STAKING_REWARDS_INFO={1:[{tokens:[WRAPPED_NATIVE_CURRENCY[SupportedChainId.MAINNET],DAI],stakingRewardAddress:'0xa1484C3aa22a66C62b77E0AE78E15258bd0cB711'},{tokens:[WRAPPED_NATIVE_CURRENCY[SupportedChainId.MAINNET],USDC_MAINNET],stakingRewardAddress:'0x7FBa4B8Dc5E7616e59622806932DBea72537A56b'},{tokens:[WRAPPED_NATIVE_CURRENCY[SupportedChainId.MAINNET],USDT],stakingRewardAddress:'0x6C3e4cb2E96B01F4b866965A91ed4437839A121a'},{tokens:[WRAPPED_NATIVE_CURRENCY[SupportedChainId.MAINNET],WBTC],stakingRewardAddress:'0xCA35e32e7926b96A9988f61d510E038108d8068e'}]};// gets the staking info from the network for the active chain id\nexport function useStakingInfo(pairToFilterBy){var _useWeb3React=useWeb3React(),chainId=_useWeb3React.chainId,account=_useWeb3React.account;// detect if staking is ended\nvar currentBlockTimestamp=useCurrentBlockTimestamp();var info=useMemo(function(){var _STAKING_REWARDS_INFO,_STAKING_REWARDS_INFO2;return chainId?(_STAKING_REWARDS_INFO=(_STAKING_REWARDS_INFO2=STAKING_REWARDS_INFO[chainId])===null||_STAKING_REWARDS_INFO2===void 0?void 0:_STAKING_REWARDS_INFO2.filter(function(stakingRewardInfo){return pairToFilterBy===undefined?true:pairToFilterBy===null?false:pairToFilterBy.involvesToken(stakingRewardInfo.tokens[0])&&pairToFilterBy.involvesToken(stakingRewardInfo.tokens[1]);}))!==null&&_STAKING_REWARDS_INFO!==void 0?_STAKING_REWARDS_INFO:[]:[];},[chainId,pairToFilterBy]);var uni=chainId?UNI[chainId]:undefined;var rewardsAddresses=useMemo(function(){return info.map(function(_ref){var stakingRewardAddress=_ref.stakingRewardAddress;return stakingRewardAddress;});},[info]);var accountArg=useMemo(function(){return[account!==null&&account!==void 0?account:undefined];},[account]);// get all the info from the staking rewards contracts\nvar balances=useMultipleContractSingleData(rewardsAddresses,STAKING_REWARDS_INTERFACE,'balanceOf',accountArg);var earnedAmounts=useMultipleContractSingleData(rewardsAddresses,STAKING_REWARDS_INTERFACE,'earned',accountArg);var totalSupplies=useMultipleContractSingleData(rewardsAddresses,STAKING_REWARDS_INTERFACE,'totalSupply');// tokens per second, constants\nvar rewardRates=useMultipleContractSingleData(rewardsAddresses,STAKING_REWARDS_INTERFACE,'rewardRate',undefined,NEVER_RELOAD);var periodFinishes=useMultipleContractSingleData(rewardsAddresses,STAKING_REWARDS_INTERFACE,'periodFinish',undefined,NEVER_RELOAD);return useMemo(function(){if(!chainId||!uni)return[];return rewardsAddresses.reduce(function(memo,rewardsAddress,index){// these two are dependent on account\nvar balanceState=balances[index];var earnedAmountState=earnedAmounts[index];// these get fetched regardless of account\nvar totalSupplyState=totalSupplies[index];var rewardRateState=rewardRates[index];var periodFinishState=periodFinishes[index];if(// these may be undefined if not logged in\n!(balanceState===null||balanceState===void 0?void 0:balanceState.loading)&&!(earnedAmountState===null||earnedAmountState===void 0?void 0:earnedAmountState.loading)&&// always need these\ntotalSupplyState&&!totalSupplyState.loading&&rewardRateState&&!rewardRateState.loading&&periodFinishState&&!periodFinishState.loading){var _balanceState$result$,_balanceState$result,_totalSupplyState$res,_rewardRateState$resu,_periodFinishState$re,_periodFinishState$re2,_earnedAmountState$re,_earnedAmountState$re2;if((balanceState===null||balanceState===void 0?void 0:balanceState.error)||(earnedAmountState===null||earnedAmountState===void 0?void 0:earnedAmountState.error)||totalSupplyState.error||rewardRateState.error||periodFinishState.error){console.error('Failed to load staking rewards info');return memo;}// get the LP token\nvar tokens=info[index].tokens;var dummyPair=new Pair(CurrencyAmount.fromRawAmount(tokens[0],'0'),CurrencyAmount.fromRawAmount(tokens[1],'0'));// check for account, if no account set to 0\nvar _stakedAmount=CurrencyAmount.fromRawAmount(dummyPair.liquidityToken,JSBI.BigInt((_balanceState$result$=balanceState===null||balanceState===void 0?void 0:(_balanceState$result=balanceState.result)===null||_balanceState$result===void 0?void 0:_balanceState$result[0])!==null&&_balanceState$result$!==void 0?_balanceState$result$:0));var _totalStakedAmount=CurrencyAmount.fromRawAmount(dummyPair.liquidityToken,JSBI.BigInt((_totalSupplyState$res=totalSupplyState.result)===null||_totalSupplyState$res===void 0?void 0:_totalSupplyState$res[0]));var _totalRewardRate=CurrencyAmount.fromRawAmount(uni,JSBI.BigInt((_rewardRateState$resu=rewardRateState.result)===null||_rewardRateState$resu===void 0?void 0:_rewardRateState$resu[0]));var getHypotheticalRewardRate=function getHypotheticalRewardRate(stakedAmount,totalStakedAmount,totalRewardRate){return CurrencyAmount.fromRawAmount(uni,JSBI.greaterThan(totalStakedAmount.quotient,JSBI.BigInt(0))?JSBI.divide(JSBI.multiply(totalRewardRate.quotient,stakedAmount.quotient),totalStakedAmount.quotient):JSBI.BigInt(0));};var individualRewardRate=getHypotheticalRewardRate(_stakedAmount,_totalStakedAmount,_totalRewardRate);var periodFinishSeconds=(_periodFinishState$re=periodFinishState.result)===null||_periodFinishState$re===void 0?void 0:(_periodFinishState$re2=_periodFinishState$re[0])===null||_periodFinishState$re2===void 0?void 0:_periodFinishState$re2.toNumber();var periodFinishMs=periodFinishSeconds*1000;// compare period end timestamp vs current block timestamp (in seconds)\nvar active=periodFinishSeconds&&currentBlockTimestamp?periodFinishSeconds>currentBlockTimestamp.toNumber():true;memo.push({stakingRewardAddress:rewardsAddress,tokens:info[index].tokens,periodFinish:periodFinishMs>0?new Date(periodFinishMs):undefined,earnedAmount:CurrencyAmount.fromRawAmount(uni,JSBI.BigInt((_earnedAmountState$re=earnedAmountState===null||earnedAmountState===void 0?void 0:(_earnedAmountState$re2=earnedAmountState.result)===null||_earnedAmountState$re2===void 0?void 0:_earnedAmountState$re2[0])!==null&&_earnedAmountState$re!==void 0?_earnedAmountState$re:0)),rewardRate:individualRewardRate,totalRewardRate:_totalRewardRate,stakedAmount:_stakedAmount,totalStakedAmount:_totalStakedAmount,getHypotheticalRewardRate:getHypotheticalRewardRate,active:active});}return memo;},[]);},[balances,chainId,currentBlockTimestamp,earnedAmounts,info,periodFinishes,rewardRates,rewardsAddresses,totalSupplies,uni]);}","map":{"version":3,"names":["Interface","abi","STAKING_REWARDS_ABI","CurrencyAmount","Pair","useWeb3React","SupportedChainId","useCurrentBlockTimestamp","JSBI","NEVER_RELOAD","useMultipleContractSingleData","useMemo","DAI","UNI","USDC_MAINNET","USDT","WBTC","WRAPPED_NATIVE_CURRENCY","STAKING_REWARDS_INTERFACE","STAKING_GENESIS","STAKING_REWARDS_INFO","tokens","MAINNET","stakingRewardAddress","useStakingInfo","pairToFilterBy","chainId","account","currentBlockTimestamp","info","filter","stakingRewardInfo","undefined","involvesToken","uni","rewardsAddresses","map","accountArg","balances","earnedAmounts","totalSupplies","rewardRates","periodFinishes","reduce","memo","rewardsAddress","index","balanceState","earnedAmountState","totalSupplyState","rewardRateState","periodFinishState","loading","error","console","dummyPair","fromRawAmount","stakedAmount","liquidityToken","BigInt","result","totalStakedAmount","totalRewardRate","getHypotheticalRewardRate","greaterThan","quotient","divide","multiply","individualRewardRate","periodFinishSeconds","toNumber","periodFinishMs","active","push","periodFinish","Date","earnedAmount","rewardRate"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/state/stake/hooks.tsx"],"sourcesContent":["import { Interface } from '@ethersproject/abi'\nimport { abi as STAKING_REWARDS_ABI } from '@uniswap/liquidity-staker/build/StakingRewards.json'\nimport { CurrencyAmount, Token } from '@uniswap/sdk-core'\nimport { Pair } from '@uniswap/v2-sdk'\nimport { useWeb3React } from '@web3-react/core'\nimport { SupportedChainId } from 'constants/chains'\nimport useCurrentBlockTimestamp from 'hooks/useCurrentBlockTimestamp'\nimport JSBI from 'jsbi'\nimport { NEVER_RELOAD, useMultipleContractSingleData } from 'lib/hooks/multicall'\nimport { useMemo } from 'react'\n\nimport { DAI, UNI, USDC_MAINNET, USDT, WBTC, WRAPPED_NATIVE_CURRENCY } from '../../constants/tokens'\n\nconst STAKING_REWARDS_INTERFACE = new Interface(STAKING_REWARDS_ABI)\n\nexport const STAKING_GENESIS = 1600387200\n\nconst STAKING_REWARDS_INFO: {\n  [chainId: number]: {\n    tokens: [Token, Token]\n    stakingRewardAddress: string\n  }[]\n} = {\n  1: [\n    {\n      tokens: [WRAPPED_NATIVE_CURRENCY[SupportedChainId.MAINNET] as Token, DAI],\n      stakingRewardAddress: '0xa1484C3aa22a66C62b77E0AE78E15258bd0cB711',\n    },\n    {\n      tokens: [WRAPPED_NATIVE_CURRENCY[SupportedChainId.MAINNET] as Token, USDC_MAINNET],\n      stakingRewardAddress: '0x7FBa4B8Dc5E7616e59622806932DBea72537A56b',\n    },\n    {\n      tokens: [WRAPPED_NATIVE_CURRENCY[SupportedChainId.MAINNET] as Token, USDT],\n      stakingRewardAddress: '0x6C3e4cb2E96B01F4b866965A91ed4437839A121a',\n    },\n    {\n      tokens: [WRAPPED_NATIVE_CURRENCY[SupportedChainId.MAINNET] as Token, WBTC],\n      stakingRewardAddress: '0xCA35e32e7926b96A9988f61d510E038108d8068e',\n    },\n  ],\n}\n\ninterface StakingInfo {\n  // the address of the reward contract\n  stakingRewardAddress: string\n  // the tokens involved in this pair\n  tokens: [Token, Token]\n  // the amount of token currently staked, or undefined if no account\n  stakedAmount: CurrencyAmount<Token>\n  // the amount of reward token earned by the active account, or undefined if no account\n  earnedAmount: CurrencyAmount<Token>\n  // the total amount of token staked in the contract\n  totalStakedAmount: CurrencyAmount<Token>\n  // the amount of token distributed per second to all LPs, constant\n  totalRewardRate: CurrencyAmount<Token>\n  // the current amount of token distributed to the active account per second.\n  // equivalent to percent of total supply * reward rate\n  rewardRate: CurrencyAmount<Token>\n  // when the period ends\n  periodFinish: Date | undefined\n  // if pool is active\n  active: boolean\n  // calculates a hypothetical amount of token distributed to the active account per second.\n  getHypotheticalRewardRate: (\n    stakedAmount: CurrencyAmount<Token>,\n    totalStakedAmount: CurrencyAmount<Token>,\n    totalRewardRate: CurrencyAmount<Token>\n  ) => CurrencyAmount<Token>\n}\n\n// gets the staking info from the network for the active chain id\nexport function useStakingInfo(pairToFilterBy?: Pair | null): StakingInfo[] {\n  const { chainId, account } = useWeb3React()\n\n  // detect if staking is ended\n  const currentBlockTimestamp = useCurrentBlockTimestamp()\n\n  const info = useMemo(\n    () =>\n      chainId\n        ? STAKING_REWARDS_INFO[chainId]?.filter((stakingRewardInfo) =>\n            pairToFilterBy === undefined\n              ? true\n              : pairToFilterBy === null\n              ? false\n              : pairToFilterBy.involvesToken(stakingRewardInfo.tokens[0]) &&\n                pairToFilterBy.involvesToken(stakingRewardInfo.tokens[1])\n          ) ?? []\n        : [],\n    [chainId, pairToFilterBy]\n  )\n\n  const uni = chainId ? UNI[chainId] : undefined\n\n  const rewardsAddresses = useMemo(() => info.map(({ stakingRewardAddress }) => stakingRewardAddress), [info])\n\n  const accountArg = useMemo(() => [account ?? undefined], [account])\n\n  // get all the info from the staking rewards contracts\n  const balances = useMultipleContractSingleData(rewardsAddresses, STAKING_REWARDS_INTERFACE, 'balanceOf', accountArg)\n  const earnedAmounts = useMultipleContractSingleData(rewardsAddresses, STAKING_REWARDS_INTERFACE, 'earned', accountArg)\n  const totalSupplies = useMultipleContractSingleData(rewardsAddresses, STAKING_REWARDS_INTERFACE, 'totalSupply')\n\n  // tokens per second, constants\n  const rewardRates = useMultipleContractSingleData(\n    rewardsAddresses,\n    STAKING_REWARDS_INTERFACE,\n    'rewardRate',\n    undefined,\n    NEVER_RELOAD\n  )\n  const periodFinishes = useMultipleContractSingleData(\n    rewardsAddresses,\n    STAKING_REWARDS_INTERFACE,\n    'periodFinish',\n    undefined,\n    NEVER_RELOAD\n  )\n\n  return useMemo(() => {\n    if (!chainId || !uni) return []\n\n    return rewardsAddresses.reduce<StakingInfo[]>((memo, rewardsAddress, index) => {\n      // these two are dependent on account\n      const balanceState = balances[index]\n      const earnedAmountState = earnedAmounts[index]\n\n      // these get fetched regardless of account\n      const totalSupplyState = totalSupplies[index]\n      const rewardRateState = rewardRates[index]\n      const periodFinishState = periodFinishes[index]\n\n      if (\n        // these may be undefined if not logged in\n        !balanceState?.loading &&\n        !earnedAmountState?.loading &&\n        // always need these\n        totalSupplyState &&\n        !totalSupplyState.loading &&\n        rewardRateState &&\n        !rewardRateState.loading &&\n        periodFinishState &&\n        !periodFinishState.loading\n      ) {\n        if (\n          balanceState?.error ||\n          earnedAmountState?.error ||\n          totalSupplyState.error ||\n          rewardRateState.error ||\n          periodFinishState.error\n        ) {\n          console.error('Failed to load staking rewards info')\n          return memo\n        }\n\n        // get the LP token\n        const tokens = info[index].tokens\n        const dummyPair = new Pair(\n          CurrencyAmount.fromRawAmount(tokens[0], '0'),\n          CurrencyAmount.fromRawAmount(tokens[1], '0')\n        )\n\n        // check for account, if no account set to 0\n\n        const stakedAmount = CurrencyAmount.fromRawAmount(\n          dummyPair.liquidityToken,\n          JSBI.BigInt(balanceState?.result?.[0] ?? 0)\n        )\n        const totalStakedAmount = CurrencyAmount.fromRawAmount(\n          dummyPair.liquidityToken,\n          JSBI.BigInt(totalSupplyState.result?.[0])\n        )\n        const totalRewardRate = CurrencyAmount.fromRawAmount(uni, JSBI.BigInt(rewardRateState.result?.[0]))\n\n        const getHypotheticalRewardRate = (\n          stakedAmount: CurrencyAmount<Token>,\n          totalStakedAmount: CurrencyAmount<Token>,\n          totalRewardRate: CurrencyAmount<Token>\n        ): CurrencyAmount<Token> => {\n          return CurrencyAmount.fromRawAmount(\n            uni,\n            JSBI.greaterThan(totalStakedAmount.quotient, JSBI.BigInt(0))\n              ? JSBI.divide(JSBI.multiply(totalRewardRate.quotient, stakedAmount.quotient), totalStakedAmount.quotient)\n              : JSBI.BigInt(0)\n          )\n        }\n\n        const individualRewardRate = getHypotheticalRewardRate(stakedAmount, totalStakedAmount, totalRewardRate)\n\n        const periodFinishSeconds = periodFinishState.result?.[0]?.toNumber()\n        const periodFinishMs = periodFinishSeconds * 1000\n\n        // compare period end timestamp vs current block timestamp (in seconds)\n        const active =\n          periodFinishSeconds && currentBlockTimestamp ? periodFinishSeconds > currentBlockTimestamp.toNumber() : true\n\n        memo.push({\n          stakingRewardAddress: rewardsAddress,\n          tokens: info[index].tokens,\n          periodFinish: periodFinishMs > 0 ? new Date(periodFinishMs) : undefined,\n          earnedAmount: CurrencyAmount.fromRawAmount(uni, JSBI.BigInt(earnedAmountState?.result?.[0] ?? 0)),\n          rewardRate: individualRewardRate,\n          totalRewardRate,\n          stakedAmount,\n          totalStakedAmount,\n          getHypotheticalRewardRate,\n          active,\n        })\n      }\n      return memo\n    }, [])\n  }, [\n    balances,\n    chainId,\n    currentBlockTimestamp,\n    earnedAmounts,\n    info,\n    periodFinishes,\n    rewardRates,\n    rewardsAddresses,\n    totalSupplies,\n    uni,\n  ])\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}