{"ast":null,"code":"import { __values } from \"tslib\";\nvar MAX_PROPERTY_KEYS = 1000;\nexport var isValidObject = function isValidObject(properties) {\n  if (Object.keys(properties).length > MAX_PROPERTY_KEYS) {\n    return false;\n  }\n  for (var key in properties) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    var value = properties[key];\n    if (!isValidProperties(key, value)) return false;\n  }\n  return true;\n};\nexport var isValidProperties = function isValidProperties(property, value) {\n  var e_1, _a;\n  if (typeof property !== 'string') return false;\n  if (Array.isArray(value)) {\n    var isValid = true;\n    try {\n      for (var value_1 = __values(value), value_1_1 = value_1.next(); !value_1_1.done; value_1_1 = value_1.next()) {\n        var valueElement = value_1_1.value;\n        if (Array.isArray(valueElement)) {\n          return false;\n        } else if (typeof valueElement === 'object') {\n          isValid = isValid && isValidObject(valueElement);\n        } else if (!['number', 'string'].includes(typeof valueElement)) {\n          return false;\n        }\n        if (!isValid) {\n          return false;\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (value_1_1 && !value_1_1.done && (_a = value_1.return)) _a.call(value_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  } else if (value === null || value === undefined) {\n    return false;\n  } else if (typeof value === 'object') {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    return isValidObject(value);\n  } else if (!['number', 'string', 'boolean'].includes(typeof value)) {\n    return false;\n  }\n  return true;\n};","map":{"version":3,"sources":["../../../src/utils/valid-properties.ts"],"names":[],"mappings":";AAAA,IAAM,iBAAiB,GAAG,IAAI;AAE9B,OAAO,IAAM,aAAa,GAAG,SAAhB,aAAa,CAAI,UAAkC,EAAA;EAC9D,IAAI,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,MAAM,GAAG,iBAAiB,EAAE;IACtD,OAAO,KAAK;EACb;EACD,KAAK,IAAM,GAAG,IAAI,UAAU,EAAE;IAC5B;IACA,IAAM,KAAK,GAAG,UAAU,CAAC,GAAG,CAAC;IAC7B,IAAI,CAAC,iBAAiB,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,OAAO,KAAK;EACjD;EACD,OAAO,IAAI;AACb,CAAC;AAED,OAAO,IAAM,iBAAiB,GAAG,SAApB,iBAAiB,CAAI,QAAgB,EAAE,KAAU,EAAA;;EAC5D,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE,OAAO,KAAK;EAC9C,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;IACxB,IAAI,OAAO,GAAG,IAAI;;MAClB,KAA2B,IAAA,OAAA,GAAA,QAAA,CAAA,KAAK,CAAA,EAAA,SAAA,GAAA,OAAA,CAAA,IAAA,EAAA,EAAA,CAAA,SAAA,CAAA,IAAA,EAAA,SAAA,GAAA,OAAA,CAAA,IAAA,EAAA,EAAE;QAA7B,IAAM,YAAY,GAAA,SAAA,CAAA,KAAA;QACrB,IAAI,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE;UAC/B,OAAO,KAAK;SACb,MAAM,IAAI,OAAO,YAAY,KAAK,QAAQ,EAAE;UAC3C,OAAO,GAAG,OAAO,IAAI,aAAa,CAAC,YAAsB,CAAC;SAC3D,MAAM,IAAI,CAAC,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC,QAAQ,CAAC,OAAO,YAAY,CAAC,EAAE;UAC9D,OAAO,KAAK;QACb;QACD,IAAI,CAAC,OAAO,EAAE;UACZ,OAAO,KAAK;QACb;MACF;;;;;;;;;;;;GACF,MAAM,IAAI,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS,EAAE;IAChD,OAAO,KAAK;GACb,MAAM,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;IACpC;IACA,OAAO,aAAa,CAAC,KAAK,CAAC;GAC5B,MAAM,IAAI,CAAC,CAAC,QAAQ,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC,QAAQ,CAAC,OAAO,KAAK,CAAC,EAAE;IAClE,OAAO,KAAK;EACb;EACD,OAAO,IAAI;AACb,CAAC","sourcesContent":["const MAX_PROPERTY_KEYS = 1000;\n\nexport const isValidObject = (properties: { [key: string]: any }): boolean => {\n  if (Object.keys(properties).length > MAX_PROPERTY_KEYS) {\n    return false;\n  }\n  for (const key in properties) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    const value = properties[key];\n    if (!isValidProperties(key, value)) return false;\n  }\n  return true;\n};\n\nexport const isValidProperties = (property: string, value: any): boolean => {\n  if (typeof property !== 'string') return false;\n  if (Array.isArray(value)) {\n    let isValid = true;\n    for (const valueElement of value) {\n      if (Array.isArray(valueElement)) {\n        return false;\n      } else if (typeof valueElement === 'object') {\n        isValid = isValid && isValidObject(valueElement as object);\n      } else if (!['number', 'string'].includes(typeof valueElement)) {\n        return false;\n      }\n      if (!isValid) {\n        return false;\n      }\n    }\n  } else if (value === null || value === undefined) {\n    return false;\n  } else if (typeof value === 'object') {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    return isValidObject(value);\n  } else if (!['number', 'string', 'boolean'].includes(typeof value)) {\n    return false;\n  }\n  return true;\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}