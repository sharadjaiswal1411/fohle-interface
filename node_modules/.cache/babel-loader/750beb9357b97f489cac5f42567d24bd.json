{"ast":null,"code":"import _ from 'lodash';\nimport { log } from '../../util/log';\n/**\n * Provider for getting V3 pools, with functionality for caching the results.\n * Does not cache by block because we compute quotes using the on-chain quoter\n * so do not mind if the liquidity values are out of date.\n *\n * @export\n * @class CachingV3PoolProvider\n */\nexport class CachingV3PoolProvider {\n  /**\n   * Creates an instance of CachingV3PoolProvider.\n   * @param chainId The chain id to use.\n   * @param poolProvider The provider to use to get the pools when not in the cache.\n   * @param cache Cache instance to hold cached pools.\n   */\n  constructor(chainId, poolProvider, cache) {\n    this.chainId = chainId;\n    this.poolProvider = poolProvider;\n    this.cache = cache;\n    this.POOL_KEY = (chainId, address) => `pool-${chainId}-${address}`;\n  }\n  async getPools(tokenPairs, providerConfig) {\n    const poolAddressSet = new Set();\n    const poolsToGetTokenPairs = [];\n    const poolsToGetAddresses = [];\n    const poolAddressToPool = {};\n    for (const [tokenA, tokenB, feeAmount] of tokenPairs) {\n      const {\n        poolAddress,\n        token0,\n        token1\n      } = this.getPoolAddress(tokenA, tokenB, feeAmount);\n      if (poolAddressSet.has(poolAddress)) {\n        continue;\n      }\n      poolAddressSet.add(poolAddress);\n      const cachedPool = await this.cache.get(this.POOL_KEY(this.chainId, poolAddress));\n      if (cachedPool) {\n        poolAddressToPool[poolAddress] = cachedPool;\n        continue;\n      }\n      poolsToGetTokenPairs.push([token0, token1, feeAmount]);\n      poolsToGetAddresses.push(poolAddress);\n    }\n    log.info({\n      poolsFound: _.map(Object.values(poolAddressToPool), p => `${p.token0.symbol} ${p.token1.symbol} ${p.fee}`),\n      poolsToGetTokenPairs: _.map(poolsToGetTokenPairs, t => `${t[0].symbol} ${t[1].symbol} ${t[2]}`)\n    }, `Found ${Object.keys(poolAddressToPool).length} V3 pools already in local cache. About to get liquidity and slot0s for ${poolsToGetTokenPairs.length} pools.`);\n    if (poolsToGetAddresses.length > 0) {\n      const poolAccessor = await this.poolProvider.getPools(poolsToGetTokenPairs, providerConfig);\n      for (const address of poolsToGetAddresses) {\n        const pool = poolAccessor.getPoolByAddress(address);\n        if (pool) {\n          poolAddressToPool[address] = pool;\n          await this.cache.set(this.POOL_KEY(this.chainId, address), pool);\n        }\n      }\n    }\n    return {\n      getPool: (tokenA, tokenB, feeAmount) => {\n        const {\n          poolAddress\n        } = this.getPoolAddress(tokenA, tokenB, feeAmount);\n        return poolAddressToPool[poolAddress];\n      },\n      getPoolByAddress: address => poolAddressToPool[address],\n      getAllPools: () => Object.values(poolAddressToPool)\n    };\n  }\n  getPoolAddress(tokenA, tokenB, feeAmount) {\n    return this.poolProvider.getPoolAddress(tokenA, tokenB, feeAmount);\n  }\n}","map":{"version":3,"sources":["../../../../src/providers/v3/caching-pool-provider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import _ from 'lodash';\nimport { log } from '../../util/log';\n/**\n * Provider for getting V3 pools, with functionality for caching the results.\n * Does not cache by block because we compute quotes using the on-chain quoter\n * so do not mind if the liquidity values are out of date.\n *\n * @export\n * @class CachingV3PoolProvider\n */\nexport class CachingV3PoolProvider {\n    /**\n     * Creates an instance of CachingV3PoolProvider.\n     * @param chainId The chain id to use.\n     * @param poolProvider The provider to use to get the pools when not in the cache.\n     * @param cache Cache instance to hold cached pools.\n     */\n    constructor(chainId, poolProvider, cache) {\n        this.chainId = chainId;\n        this.poolProvider = poolProvider;\n        this.cache = cache;\n        this.POOL_KEY = (chainId, address) => `pool-${chainId}-${address}`;\n    }\n    async getPools(tokenPairs, providerConfig) {\n        const poolAddressSet = new Set();\n        const poolsToGetTokenPairs = [];\n        const poolsToGetAddresses = [];\n        const poolAddressToPool = {};\n        for (const [tokenA, tokenB, feeAmount] of tokenPairs) {\n            const { poolAddress, token0, token1 } = this.getPoolAddress(tokenA, tokenB, feeAmount);\n            if (poolAddressSet.has(poolAddress)) {\n                continue;\n            }\n            poolAddressSet.add(poolAddress);\n            const cachedPool = await this.cache.get(this.POOL_KEY(this.chainId, poolAddress));\n            if (cachedPool) {\n                poolAddressToPool[poolAddress] = cachedPool;\n                continue;\n            }\n            poolsToGetTokenPairs.push([token0, token1, feeAmount]);\n            poolsToGetAddresses.push(poolAddress);\n        }\n        log.info({\n            poolsFound: _.map(Object.values(poolAddressToPool), (p) => `${p.token0.symbol} ${p.token1.symbol} ${p.fee}`),\n            poolsToGetTokenPairs: _.map(poolsToGetTokenPairs, (t) => `${t[0].symbol} ${t[1].symbol} ${t[2]}`),\n        }, `Found ${Object.keys(poolAddressToPool).length} V3 pools already in local cache. About to get liquidity and slot0s for ${poolsToGetTokenPairs.length} pools.`);\n        if (poolsToGetAddresses.length > 0) {\n            const poolAccessor = await this.poolProvider.getPools(poolsToGetTokenPairs, providerConfig);\n            for (const address of poolsToGetAddresses) {\n                const pool = poolAccessor.getPoolByAddress(address);\n                if (pool) {\n                    poolAddressToPool[address] = pool;\n                    await this.cache.set(this.POOL_KEY(this.chainId, address), pool);\n                }\n            }\n        }\n        return {\n            getPool: (tokenA, tokenB, feeAmount) => {\n                const { poolAddress } = this.getPoolAddress(tokenA, tokenB, feeAmount);\n                return poolAddressToPool[poolAddress];\n            },\n            getPoolByAddress: (address) => poolAddressToPool[address],\n            getAllPools: () => Object.values(poolAddressToPool),\n        };\n    }\n    getPoolAddress(tokenA, tokenB, feeAmount) {\n        return this.poolProvider.getPoolAddress(tokenA, tokenB, feeAmount);\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGluZy1wb29sLXByb3ZpZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3Byb3ZpZGVycy92My9jYWNoaW5nLXBvb2wtcHJvdmlkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxDQUFDLE1BQU0sUUFBUSxDQUFDO0FBR3ZCLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQU1yQzs7Ozs7OztHQU9HO0FBQ0gsTUFBTSxPQUFPLHFCQUFxQjtJQUloQzs7Ozs7T0FLRztJQUNILFlBQ1ksT0FBZ0IsRUFDaEIsWUFBNkIsRUFDL0IsS0FBbUI7UUFGakIsWUFBTyxHQUFQLE9BQU8sQ0FBUztRQUNoQixpQkFBWSxHQUFaLFlBQVksQ0FBaUI7UUFDL0IsVUFBSyxHQUFMLEtBQUssQ0FBYztRQVpyQixhQUFRLEdBQUcsQ0FBQyxPQUFnQixFQUFFLE9BQWUsRUFBRSxFQUFFLENBQ3ZELFFBQVEsT0FBTyxJQUFJLE9BQU8sRUFBRSxDQUFDO0lBWTVCLENBQUM7SUFFRyxLQUFLLENBQUMsUUFBUSxDQUNuQixVQUF1QyxFQUN2QyxjQUErQjtRQUUvQixNQUFNLGNBQWMsR0FBZ0IsSUFBSSxHQUFHLEVBQVUsQ0FBQztRQUN0RCxNQUFNLG9CQUFvQixHQUFxQyxFQUFFLENBQUM7UUFDbEUsTUFBTSxtQkFBbUIsR0FBYSxFQUFFLENBQUM7UUFDekMsTUFBTSxpQkFBaUIsR0FBb0MsRUFBRSxDQUFDO1FBRTlELEtBQUssTUFBTSxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsU0FBUyxDQUFDLElBQUksVUFBVSxFQUFFO1lBQ3BELE1BQU0sRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQ3pELE1BQU0sRUFDTixNQUFNLEVBQ04sU0FBUyxDQUNWLENBQUM7WUFFRixJQUFJLGNBQWMsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLEVBQUU7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"]},"metadata":{},"sourceType":"module"}