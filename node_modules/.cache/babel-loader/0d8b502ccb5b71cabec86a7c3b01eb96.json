{"ast":null,"code":"\"use strict\";\n\n// Copyright (c) 2018-2022 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\nvar _classCallCheck = require(\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RxWebSocket = exports.ConnectionState = void 0;\nvar rxjs_1 = require(\"rxjs\");\nvar operators_1 = require(\"rxjs/operators\");\nvar ConnectionState;\n(function (ConnectionState) {\n  ConnectionState[ConnectionState[\"DISCONNECTED\"] = 0] = \"DISCONNECTED\";\n  ConnectionState[ConnectionState[\"CONNECTING\"] = 1] = \"CONNECTING\";\n  ConnectionState[ConnectionState[\"CONNECTED\"] = 2] = \"CONNECTED\";\n})(ConnectionState = exports.ConnectionState || (exports.ConnectionState = {}));\n/**\n * Rx-ified WebSocket\n */\nvar RxWebSocket = /*#__PURE__*/function () {\n  /**\n   * Constructor\n   * @param url WebSocket server URL\n   * @param [WebSocketClass] Custom WebSocket implementation\n   */\n  function RxWebSocket(url) {\n    var WebSocketClass = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : WebSocket;\n    _classCallCheck(this, RxWebSocket);\n    this.WebSocketClass = WebSocketClass;\n    this.webSocket = null;\n    this.connectionStateSubject = new rxjs_1.BehaviorSubject(ConnectionState.DISCONNECTED);\n    this.incomingDataSubject = new rxjs_1.Subject();\n    this.url = url.replace(/^http/, \"ws\");\n  }\n  /**\n   * Make a websocket connection\n   * @returns an Observable that completes when connected\n   */\n  _createClass(RxWebSocket, [{\n    key: \"connect\",\n    value: function connect() {\n      var _this = this;\n      if (this.webSocket) {\n        return (0, rxjs_1.throwError)(new Error(\"webSocket object is not null\"));\n      }\n      return new rxjs_1.Observable(function (obs) {\n        var webSocket;\n        try {\n          _this.webSocket = webSocket = new _this.WebSocketClass(_this.url);\n        } catch (err) {\n          obs.error(err);\n          return;\n        }\n        _this.connectionStateSubject.next(ConnectionState.CONNECTING);\n        webSocket.onclose = function (evt) {\n          _this.clearWebSocket();\n          obs.error(new Error(\"websocket error \".concat(evt.code, \": \").concat(evt.reason)));\n          _this.connectionStateSubject.next(ConnectionState.DISCONNECTED);\n        };\n        webSocket.onopen = function (_) {\n          obs.next();\n          obs.complete();\n          _this.connectionStateSubject.next(ConnectionState.CONNECTED);\n        };\n        webSocket.onmessage = function (evt) {\n          _this.incomingDataSubject.next(evt.data);\n        };\n      }).pipe((0, operators_1.take)(1));\n    }\n    /**\n     * Disconnect from server\n     */\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      var webSocket = this.webSocket;\n      if (!webSocket) {\n        return;\n      }\n      this.clearWebSocket();\n      this.connectionStateSubject.next(ConnectionState.DISCONNECTED);\n      try {\n        webSocket.close();\n      } catch (_a) {}\n    }\n    /**\n     * Emit current connection state and subsequent changes\n     * @returns an Observable for the connection state\n     */\n  }, {\n    key: \"connectionState$\",\n    get: function get() {\n      return this.connectionStateSubject.asObservable();\n    }\n    /**\n     * Emit incoming data from server\n     * @returns an Observable for the data received\n     */\n  }, {\n    key: \"incomingData$\",\n    get: function get() {\n      return this.incomingDataSubject.asObservable();\n    }\n    /**\n     * Emit incoming JSON data from server. non-JSON data are ignored\n     * @returns an Observable for parsed JSON data\n     */\n  }, {\n    key: \"incomingJSONData$\",\n    get: function get() {\n      return this.incomingData$.pipe((0, operators_1.flatMap)(function (m) {\n        var j;\n        try {\n          j = JSON.parse(m);\n        } catch (err) {\n          return (0, rxjs_1.empty)();\n        }\n        return (0, rxjs_1.of)(j);\n      }));\n    }\n    /**\n     * Send data to server\n     * @param data text to send\n     */\n  }, {\n    key: \"sendData\",\n    value: function sendData(data) {\n      var webSocket = this.webSocket;\n      if (!webSocket) {\n        throw new Error(\"websocket is not connected\");\n      }\n      webSocket.send(data);\n    }\n  }, {\n    key: \"clearWebSocket\",\n    value: function clearWebSocket() {\n      var webSocket = this.webSocket;\n      if (!webSocket) {\n        return;\n      }\n      this.webSocket = null;\n      webSocket.onclose = null;\n      webSocket.onerror = null;\n      webSocket.onmessage = null;\n      webSocket.onopen = null;\n    }\n  }]);\n  return RxWebSocket;\n}();\nexports.RxWebSocket = RxWebSocket;","map":{"version":3,"names":["Object","defineProperty","exports","value","RxWebSocket","ConnectionState","rxjs_1","require","operators_1","url","WebSocketClass","WebSocket","webSocket","connectionStateSubject","BehaviorSubject","DISCONNECTED","incomingDataSubject","Subject","replace","throwError","Error","Observable","obs","err","error","next","CONNECTING","onclose","evt","clearWebSocket","code","reason","onopen","_","complete","CONNECTED","onmessage","data","pipe","take","close","_a","asObservable","incomingData$","flatMap","m","j","JSON","parse","empty","of","send","onerror"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/@coinbase/wallet-sdk/dist/connection/RxWebSocket.js"],"sourcesContent":["\"use strict\";\n// Copyright (c) 2018-2022 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RxWebSocket = exports.ConnectionState = void 0;\nconst rxjs_1 = require(\"rxjs\");\nconst operators_1 = require(\"rxjs/operators\");\nvar ConnectionState;\n(function (ConnectionState) {\n    ConnectionState[ConnectionState[\"DISCONNECTED\"] = 0] = \"DISCONNECTED\";\n    ConnectionState[ConnectionState[\"CONNECTING\"] = 1] = \"CONNECTING\";\n    ConnectionState[ConnectionState[\"CONNECTED\"] = 2] = \"CONNECTED\";\n})(ConnectionState = exports.ConnectionState || (exports.ConnectionState = {}));\n/**\n * Rx-ified WebSocket\n */\nclass RxWebSocket {\n    /**\n     * Constructor\n     * @param url WebSocket server URL\n     * @param [WebSocketClass] Custom WebSocket implementation\n     */\n    constructor(url, WebSocketClass = WebSocket) {\n        this.WebSocketClass = WebSocketClass;\n        this.webSocket = null;\n        this.connectionStateSubject = new rxjs_1.BehaviorSubject(ConnectionState.DISCONNECTED);\n        this.incomingDataSubject = new rxjs_1.Subject();\n        this.url = url.replace(/^http/, \"ws\");\n    }\n    /**\n     * Make a websocket connection\n     * @returns an Observable that completes when connected\n     */\n    connect() {\n        if (this.webSocket) {\n            return (0, rxjs_1.throwError)(new Error(\"webSocket object is not null\"));\n        }\n        return new rxjs_1.Observable(obs => {\n            let webSocket;\n            try {\n                this.webSocket = webSocket = new this.WebSocketClass(this.url);\n            }\n            catch (err) {\n                obs.error(err);\n                return;\n            }\n            this.connectionStateSubject.next(ConnectionState.CONNECTING);\n            webSocket.onclose = evt => {\n                this.clearWebSocket();\n                obs.error(new Error(`websocket error ${evt.code}: ${evt.reason}`));\n                this.connectionStateSubject.next(ConnectionState.DISCONNECTED);\n            };\n            webSocket.onopen = _ => {\n                obs.next();\n                obs.complete();\n                this.connectionStateSubject.next(ConnectionState.CONNECTED);\n            };\n            webSocket.onmessage = evt => {\n                this.incomingDataSubject.next(evt.data);\n            };\n        }).pipe((0, operators_1.take)(1));\n    }\n    /**\n     * Disconnect from server\n     */\n    disconnect() {\n        const { webSocket } = this;\n        if (!webSocket) {\n            return;\n        }\n        this.clearWebSocket();\n        this.connectionStateSubject.next(ConnectionState.DISCONNECTED);\n        try {\n            webSocket.close();\n        }\n        catch (_a) { }\n    }\n    /**\n     * Emit current connection state and subsequent changes\n     * @returns an Observable for the connection state\n     */\n    get connectionState$() {\n        return this.connectionStateSubject.asObservable();\n    }\n    /**\n     * Emit incoming data from server\n     * @returns an Observable for the data received\n     */\n    get incomingData$() {\n        return this.incomingDataSubject.asObservable();\n    }\n    /**\n     * Emit incoming JSON data from server. non-JSON data are ignored\n     * @returns an Observable for parsed JSON data\n     */\n    get incomingJSONData$() {\n        return this.incomingData$.pipe((0, operators_1.flatMap)(m => {\n            let j;\n            try {\n                j = JSON.parse(m);\n            }\n            catch (err) {\n                return (0, rxjs_1.empty)();\n            }\n            return (0, rxjs_1.of)(j);\n        }));\n    }\n    /**\n     * Send data to server\n     * @param data text to send\n     */\n    sendData(data) {\n        const { webSocket } = this;\n        if (!webSocket) {\n            throw new Error(\"websocket is not connected\");\n        }\n        webSocket.send(data);\n    }\n    clearWebSocket() {\n        const { webSocket } = this;\n        if (!webSocket) {\n            return;\n        }\n        this.webSocket = null;\n        webSocket.onclose = null;\n        webSocket.onerror = null;\n        webSocket.onmessage = null;\n        webSocket.onopen = null;\n    }\n}\nexports.RxWebSocket = RxWebSocket;\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AAAA;AAAA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,WAAW,GAAGF,OAAO,CAACG,eAAe,GAAG,KAAK,CAAC;AACtD,IAAMC,MAAM,GAAGC,OAAO,CAAC,MAAM,CAAC;AAC9B,IAAMC,WAAW,GAAGD,OAAO,CAAC,gBAAgB,CAAC;AAC7C,IAAIF,eAAe;AACnB,CAAC,UAAUA,eAAe,EAAE;EACxBA,eAAe,CAACA,eAAe,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,GAAG,cAAc;EACrEA,eAAe,CAACA,eAAe,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,GAAG,YAAY;EACjEA,eAAe,CAACA,eAAe,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,GAAG,WAAW;AACnE,CAAC,EAAEA,eAAe,GAAGH,OAAO,CAACG,eAAe,KAAKH,OAAO,CAACG,eAAe,GAAG,CAAC,CAAC,CAAC,CAAC;AAC/E;AACA;AACA;AAFA,IAGMD,WAAW;EACb;AACJ;AACA;AACA;AACA;EACI,qBAAYK,GAAG,EAA8B;IAAA,IAA5BC,cAAc,uEAAGC,SAAS;IAAA;IACvC,IAAI,CAACD,cAAc,GAAGA,cAAc;IACpC,IAAI,CAACE,SAAS,GAAG,IAAI;IACrB,IAAI,CAACC,sBAAsB,GAAG,IAAIP,MAAM,CAACQ,eAAe,CAACT,eAAe,CAACU,YAAY,CAAC;IACtF,IAAI,CAACC,mBAAmB,GAAG,IAAIV,MAAM,CAACW,OAAO,EAAE;IAC/C,IAAI,CAACR,GAAG,GAAGA,GAAG,CAACS,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC;EACzC;EACA;AACJ;AACA;AACA;EAHI;IAAA;IAAA,OAIA,mBAAU;MAAA;MACN,IAAI,IAAI,CAACN,SAAS,EAAE;QAChB,OAAO,CAAC,CAAC,EAAEN,MAAM,CAACa,UAAU,EAAE,IAAIC,KAAK,CAAC,8BAA8B,CAAC,CAAC;MAC5E;MACA,OAAO,IAAId,MAAM,CAACe,UAAU,CAAC,UAAAC,GAAG,EAAI;QAChC,IAAIV,SAAS;QACb,IAAI;UACA,KAAI,CAACA,SAAS,GAAGA,SAAS,GAAG,IAAI,KAAI,CAACF,cAAc,CAAC,KAAI,CAACD,GAAG,CAAC;QAClE,CAAC,CACD,OAAOc,GAAG,EAAE;UACRD,GAAG,CAACE,KAAK,CAACD,GAAG,CAAC;UACd;QACJ;QACA,KAAI,CAACV,sBAAsB,CAACY,IAAI,CAACpB,eAAe,CAACqB,UAAU,CAAC;QAC5Dd,SAAS,CAACe,OAAO,GAAG,UAAAC,GAAG,EAAI;UACvB,KAAI,CAACC,cAAc,EAAE;UACrBP,GAAG,CAACE,KAAK,CAAC,IAAIJ,KAAK,2BAAoBQ,GAAG,CAACE,IAAI,eAAKF,GAAG,CAACG,MAAM,EAAG,CAAC;UAClE,KAAI,CAAClB,sBAAsB,CAACY,IAAI,CAACpB,eAAe,CAACU,YAAY,CAAC;QAClE,CAAC;QACDH,SAAS,CAACoB,MAAM,GAAG,UAAAC,CAAC,EAAI;UACpBX,GAAG,CAACG,IAAI,EAAE;UACVH,GAAG,CAACY,QAAQ,EAAE;UACd,KAAI,CAACrB,sBAAsB,CAACY,IAAI,CAACpB,eAAe,CAAC8B,SAAS,CAAC;QAC/D,CAAC;QACDvB,SAAS,CAACwB,SAAS,GAAG,UAAAR,GAAG,EAAI;UACzB,KAAI,CAACZ,mBAAmB,CAACS,IAAI,CAACG,GAAG,CAACS,IAAI,CAAC;QAC3C,CAAC;MACL,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE9B,WAAW,CAAC+B,IAAI,EAAE,CAAC,CAAC,CAAC;IACrC;IACA;AACJ;AACA;EAFI;IAAA;IAAA,OAGA,sBAAa;MACT,IAAQ3B,SAAS,GAAK,IAAI,CAAlBA,SAAS;MACjB,IAAI,CAACA,SAAS,EAAE;QACZ;MACJ;MACA,IAAI,CAACiB,cAAc,EAAE;MACrB,IAAI,CAAChB,sBAAsB,CAACY,IAAI,CAACpB,eAAe,CAACU,YAAY,CAAC;MAC9D,IAAI;QACAH,SAAS,CAAC4B,KAAK,EAAE;MACrB,CAAC,CACD,OAAOC,EAAE,EAAE,CAAE;IACjB;IACA;AACJ;AACA;AACA;EAHI;IAAA;IAAA,KAIA,eAAuB;MACnB,OAAO,IAAI,CAAC5B,sBAAsB,CAAC6B,YAAY,EAAE;IACrD;IACA;AACJ;AACA;AACA;EAHI;IAAA;IAAA,KAIA,eAAoB;MAChB,OAAO,IAAI,CAAC1B,mBAAmB,CAAC0B,YAAY,EAAE;IAClD;IACA;AACJ;AACA;AACA;EAHI;IAAA;IAAA,KAIA,eAAwB;MACpB,OAAO,IAAI,CAACC,aAAa,CAACL,IAAI,CAAC,CAAC,CAAC,EAAE9B,WAAW,CAACoC,OAAO,EAAE,UAAAC,CAAC,EAAI;QACzD,IAAIC,CAAC;QACL,IAAI;UACAA,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACH,CAAC,CAAC;QACrB,CAAC,CACD,OAAOtB,GAAG,EAAE;UACR,OAAO,CAAC,CAAC,EAAEjB,MAAM,CAAC2C,KAAK,GAAG;QAC9B;QACA,OAAO,CAAC,CAAC,EAAE3C,MAAM,CAAC4C,EAAE,EAAEJ,CAAC,CAAC;MAC5B,CAAC,CAAC,CAAC;IACP;IACA;AACJ;AACA;AACA;EAHI;IAAA;IAAA,OAIA,kBAAST,IAAI,EAAE;MACX,IAAQzB,SAAS,GAAK,IAAI,CAAlBA,SAAS;MACjB,IAAI,CAACA,SAAS,EAAE;QACZ,MAAM,IAAIQ,KAAK,CAAC,4BAA4B,CAAC;MACjD;MACAR,SAAS,CAACuC,IAAI,CAACd,IAAI,CAAC;IACxB;EAAC;IAAA;IAAA,OACD,0BAAiB;MACb,IAAQzB,SAAS,GAAK,IAAI,CAAlBA,SAAS;MACjB,IAAI,CAACA,SAAS,EAAE;QACZ;MACJ;MACA,IAAI,CAACA,SAAS,GAAG,IAAI;MACrBA,SAAS,CAACe,OAAO,GAAG,IAAI;MACxBf,SAAS,CAACwC,OAAO,GAAG,IAAI;MACxBxC,SAAS,CAACwB,SAAS,GAAG,IAAI;MAC1BxB,SAAS,CAACoB,MAAM,GAAG,IAAI;IAC3B;EAAC;EAAA;AAAA;AAEL9B,OAAO,CAACE,WAAW,GAAGA,WAAW"},"metadata":{},"sourceType":"script"}