{"ast":null,"code":"import { __read, __spreadArray } from \"tslib\";\nexport var returnWrapper = function returnWrapper(fn) {\n  return function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    return {\n      promise: fn.apply(void 0, __spreadArray([], __read(args), false))\n    };\n  };\n};","map":{"version":3,"sources":["../../../src/utils/return-wrapper.ts"],"names":[],"mappings":";AAAA,OAAO,IAAM,aAAa,GACxB,SADW,aAAa,CACU,EAAK,EAAA;EACvC,OAAA,YAAA;IAAC,IAAA,IAAA,GAAA,EAAA;SAAA,IAAA,EAAA,GAAA,CAAsB,EAAtB,EAAA,GAAA,SAAA,CAAA,MAAsB,EAAtB,EAAA,EAAsB,EAAA;MAAtB,IAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;IAA2B,OAAC;MAC3B,OAAO,EAAE,EAAE,CAAA,KAAA,CAAA,KAAA,CAAA,EAAA,aAAA,CAAA,EAAA,EAAA,MAAA,CAAI,IAAI,CAAA,EAAA,KAAA,CAAA;KACpB;EAF2B,CAE1B;AAFF,CAEE","sourcesContent":["export const returnWrapper =\n  <T extends (...args: any) => any>(fn: T) =>\n  (...args: Parameters<T>) => ({\n    promise: fn(...args) as ReturnType<T>,\n  });\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}