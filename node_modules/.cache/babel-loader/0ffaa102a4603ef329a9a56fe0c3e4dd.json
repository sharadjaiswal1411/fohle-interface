{"ast":null,"code":"import _regeneratorRuntime from\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _objectSpread from\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _asyncToGenerator from\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{SwapRouter,UNIVERSAL_ROUTER_ADDRESS}from'@uniswap/universal-router-sdk';import{toHex}from'@uniswap/v3-sdk';import{useWeb3React}from'@web3-react/core';import{useCallback}from'react';import{calculateGasMargin}from'utils/calculateGasMargin';import isZero from'utils/isZero';import{swapErrorToUserReadableMessage}from'utils/swapErrorToUserReadableMessage';export function useUniversalRouterSwapCallback(trade,options){var _useWeb3React=useWeb3React(),account=_useWeb3React.account,chainId=_useWeb3React.chainId,provider=_useWeb3React.provider;return useCallback(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var _options$deadline,_SwapRouter$swapERC,data,value,tx,gasEstimate,gasLimit,response,message;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;if(account){_context.next=3;break;}throw new Error('missing account');case 3:if(chainId){_context.next=5;break;}throw new Error('missing chainId');case 5:if(provider){_context.next=7;break;}throw new Error('missing provider');case 7:if(trade){_context.next=9;break;}throw new Error('missing trade');case 9:_SwapRouter$swapERC=SwapRouter.swapERC20CallParameters(trade,{slippageTolerance:options.slippageTolerance,deadlineOrPreviousBlockhash:(_options$deadline=options.deadline)===null||_options$deadline===void 0?void 0:_options$deadline.toString(),inputTokenPermit:options.permit,fee:options.feeOptions}),data=_SwapRouter$swapERC.calldata,value=_SwapRouter$swapERC.value;tx=_objectSpread({from:account,to:UNIVERSAL_ROUTER_ADDRESS(chainId),data:data},value&&!isZero(value)?{value:toHex(value)}:{});_context.prev=11;_context.next=14;return provider.estimateGas(tx);case 14:gasEstimate=_context.sent;_context.next=22;break;case 17:_context.prev=17;_context.t0=_context[\"catch\"](11);_context.next=21;return provider.call(tx);case 21:throw new Error('unexpected issue with gas estimation; please try again');case 22:gasLimit=calculateGasMargin(gasEstimate);_context.next=25;return provider.getSigner().sendTransaction(_objectSpread(_objectSpread({},tx),{},{gasLimit:gasLimit}));case 25:response=_context.sent;return _context.abrupt(\"return\",response);case 29:_context.prev=29;_context.t1=_context[\"catch\"](0);message=swapErrorToUserReadableMessage(_context.t1);throw new Error(message);case 33:case\"end\":return _context.stop();}}},_callee,null,[[0,29],[11,17]]);})),[account,chainId,options.deadline,options.feeOptions,options.permit,options.slippageTolerance,provider,trade]);}","map":{"version":3,"names":["SwapRouter","UNIVERSAL_ROUTER_ADDRESS","toHex","useWeb3React","useCallback","calculateGasMargin","isZero","swapErrorToUserReadableMessage","useUniversalRouterSwapCallback","trade","options","account","chainId","provider","Error","swapERC20CallParameters","slippageTolerance","deadlineOrPreviousBlockhash","deadline","toString","inputTokenPermit","permit","fee","feeOptions","data","calldata","value","tx","from","to","estimateGas","gasEstimate","call","gasLimit","getSigner","sendTransaction","response","message"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/hooks/useUniversalRouter.ts"],"sourcesContent":["import { TransactionResponse } from '@ethersproject/abstract-provider'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { Trade } from '@uniswap/router-sdk'\nimport { Currency, Percent, TradeType } from '@uniswap/sdk-core'\nimport { SwapRouter, UNIVERSAL_ROUTER_ADDRESS } from '@uniswap/universal-router-sdk'\nimport { FeeOptions, toHex } from '@uniswap/v3-sdk'\nimport { useWeb3React } from '@web3-react/core'\nimport { useCallback } from 'react'\nimport { calculateGasMargin } from 'utils/calculateGasMargin'\nimport isZero from 'utils/isZero'\nimport { swapErrorToUserReadableMessage } from 'utils/swapErrorToUserReadableMessage'\n\nimport { PermitSignature } from './usePermitAllowance'\n\ninterface SwapOptions {\n  slippageTolerance: Percent\n  deadline?: BigNumber\n  permit?: PermitSignature\n  feeOptions?: FeeOptions\n}\n\nexport function useUniversalRouterSwapCallback(\n  trade: Trade<Currency, Currency, TradeType> | undefined,\n  options: SwapOptions\n) {\n  const { account, chainId, provider } = useWeb3React()\n\n  return useCallback(async (): Promise<TransactionResponse> => {\n    try {\n      if (!account) throw new Error('missing account')\n      if (!chainId) throw new Error('missing chainId')\n      if (!provider) throw new Error('missing provider')\n      if (!trade) throw new Error('missing trade')\n\n      const { calldata: data, value } = SwapRouter.swapERC20CallParameters(trade, {\n        slippageTolerance: options.slippageTolerance,\n        deadlineOrPreviousBlockhash: options.deadline?.toString(),\n        inputTokenPermit: options.permit,\n        fee: options.feeOptions,\n      })\n      const tx = {\n        from: account,\n        to: UNIVERSAL_ROUTER_ADDRESS(chainId),\n        data,\n        // TODO: universal-router-sdk returns a non-hexlified value.\n        ...(value && !isZero(value) ? { value: toHex(value) } : {}),\n      }\n\n      let gasEstimate: BigNumber\n      try {\n        gasEstimate = await provider.estimateGas(tx)\n      } catch (gasError) {\n        await provider.call(tx) // this should throw the actual error\n        throw new Error('unexpected issue with gas estimation; please try again')\n      }\n      const gasLimit = calculateGasMargin(gasEstimate)\n      const response = await provider.getSigner().sendTransaction({ ...tx, gasLimit })\n      return response\n    } catch (swapError: unknown) {\n      const message = swapErrorToUserReadableMessage(swapError)\n      throw new Error(message)\n    }\n  }, [\n    account,\n    chainId,\n    options.deadline,\n    options.feeOptions,\n    options.permit,\n    options.slippageTolerance,\n    provider,\n    trade,\n  ])\n}\n"],"mappings":"ggBAIA,OAASA,UAAU,CAAEC,wBAAwB,KAAQ,+BAA+B,CACpF,OAAqBC,KAAK,KAAQ,iBAAiB,CACnD,OAASC,YAAY,KAAQ,kBAAkB,CAC/C,OAASC,WAAW,KAAQ,OAAO,CACnC,OAASC,kBAAkB,KAAQ,0BAA0B,CAC7D,MAAOC,OAAM,KAAM,cAAc,CACjC,OAASC,8BAA8B,KAAQ,sCAAsC,CAWrF,MAAO,SAASC,+BAA8B,CAC5CC,KAAuD,CACvDC,OAAoB,CACpB,CACA,kBAAuCP,YAAY,EAAE,CAA7CQ,OAAO,eAAPA,OAAO,CAAEC,OAAO,eAAPA,OAAO,CAAEC,QAAQ,eAARA,QAAQ,CAElC,MAAOT,YAAW,sEAAC,oPAEVO,OAAO,8BAAQ,IAAIG,MAAK,CAAC,iBAAiB,CAAC,WAC3CF,OAAO,8BAAQ,IAAIE,MAAK,CAAC,iBAAiB,CAAC,WAC3CD,QAAQ,8BAAQ,IAAIC,MAAK,CAAC,kBAAkB,CAAC,WAC7CL,KAAK,8BAAQ,IAAIK,MAAK,CAAC,eAAe,CAAC,4BAEVd,UAAU,CAACe,uBAAuB,CAACN,KAAK,CAAE,CAC1EO,iBAAiB,CAAEN,OAAO,CAACM,iBAAiB,CAC5CC,2BAA2B,oBAAEP,OAAO,CAACQ,QAAQ,4CAAhB,kBAAkBC,QAAQ,EAAE,CACzDC,gBAAgB,CAAEV,OAAO,CAACW,MAAM,CAChCC,GAAG,CAAEZ,OAAO,CAACa,UACf,CAAC,CAAC,CALgBC,IAAI,qBAAdC,QAAQ,CAAQC,KAAK,qBAALA,KAAK,CAMvBC,EAAE,gBACNC,IAAI,CAAEjB,OAAO,CACbkB,EAAE,CAAE5B,wBAAwB,CAACW,OAAO,CAAC,CACrCY,IAAI,CAAJA,IAAI,EAEAE,KAAK,EAAI,CAACpB,MAAM,CAACoB,KAAK,CAAC,CAAG,CAAEA,KAAK,CAAExB,KAAK,CAACwB,KAAK,CAAE,CAAC,CAAG,CAAC,CAAC,0CAKtCb,SAAQ,CAACiB,WAAW,CAACH,EAAE,CAAC,SAA5CI,WAAW,wHAELlB,SAAQ,CAACmB,IAAI,CAACL,EAAE,CAAC,cACjB,IAAIb,MAAK,CAAC,wDAAwD,CAAC,SAErEmB,QAAQ,CAAG5B,kBAAkB,CAAC0B,WAAW,CAAC,wBACzBlB,SAAQ,CAACqB,SAAS,EAAE,CAACC,eAAe,gCAAMR,EAAE,MAAEM,QAAQ,CAARA,QAAQ,GAAG,SAA1EG,QAAQ,+CACPA,QAAQ,4DAETC,OAAO,CAAG9B,8BAA8B,aAAW,MACnD,IAAIO,MAAK,CAACuB,OAAO,CAAC,8EAE3B,GAAE,CACD1B,OAAO,CACPC,OAAO,CACPF,OAAO,CAACQ,QAAQ,CAChBR,OAAO,CAACa,UAAU,CAClBb,OAAO,CAACW,MAAM,CACdX,OAAO,CAACM,iBAAiB,CACzBH,QAAQ,CACRJ,KAAK,CACN,CAAC,CACJ"},"metadata":{},"sourceType":"module"}