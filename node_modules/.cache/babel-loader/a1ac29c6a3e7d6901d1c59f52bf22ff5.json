{"ast":null,"code":"import { SupportedChainId } from '../constants/chains';\nconst DEFAULT_NETWORKS = [SupportedChainId.MAINNET, SupportedChainId.ROPSTEN, SupportedChainId.RINKEBY, SupportedChainId.GOERLI, SupportedChainId.KOVAN];\nexport function constructSameAddressMap(address) {\n  let additionalNetworks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return DEFAULT_NETWORKS.concat(additionalNetworks).reduce((memo, chainId) => {\n    memo[chainId] = address;\n    return memo;\n  }, {});\n}","map":{"version":3,"names":["SupportedChainId","DEFAULT_NETWORKS","MAINNET","ROPSTEN","RINKEBY","GOERLI","KOVAN","constructSameAddressMap","address","additionalNetworks","concat","reduce","memo","chainId"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/utils/constructSameAddressMap.ts"],"sourcesContent":["import { SupportedChainId } from '../constants/chains'\n\nconst DEFAULT_NETWORKS = [\n  SupportedChainId.MAINNET,\n  SupportedChainId.ROPSTEN,\n  SupportedChainId.RINKEBY,\n  SupportedChainId.GOERLI,\n  SupportedChainId.KOVAN,\n]\n\nexport function constructSameAddressMap<T extends string>(\n  address: T,\n  additionalNetworks: SupportedChainId[] = []\n): { [chainId: number]: T } {\n  return DEFAULT_NETWORKS.concat(additionalNetworks).reduce<{ [chainId: number]: T }>((memo, chainId) => {\n    memo[chainId] = address\n    return memo\n  }, {})\n}\n"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,qBAAqB;AAEtD,MAAMC,gBAAgB,GAAG,CACvBD,gBAAgB,CAACE,OAAO,EACxBF,gBAAgB,CAACG,OAAO,EACxBH,gBAAgB,CAACI,OAAO,EACxBJ,gBAAgB,CAACK,MAAM,EACvBL,gBAAgB,CAACM,KAAK,CACvB;AAED,OAAO,SAASC,uBAAuB,CACrCC,OAAU,EAEgB;EAAA,IAD1BC,kBAAsC,uEAAG,EAAE;EAE3C,OAAOR,gBAAgB,CAACS,MAAM,CAACD,kBAAkB,CAAC,CAACE,MAAM,CAA2B,CAACC,IAAI,EAAEC,OAAO,KAAK;IACrGD,IAAI,CAACC,OAAO,CAAC,GAAGL,OAAO;IACvB,OAAOI,IAAI;EACb,CAAC,EAAE,CAAC,CAAC,CAAC;AACR"},"metadata":{},"sourceType":"module"}