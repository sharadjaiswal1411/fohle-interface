{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst codegen_1 = require(\"../../compile/codegen\");\nconst error = {\n  message: _ref => {\n    let {\n      schemaCode\n    } = _ref;\n    return (0, codegen_1.str)`must match format \"${schemaCode}\"`;\n  },\n  params: _ref2 => {\n    let {\n      schemaCode\n    } = _ref2;\n    return (0, codegen_1._)`{format: ${schemaCode}}`;\n  }\n};\nconst def = {\n  keyword: \"format\",\n  type: [\"number\", \"string\"],\n  schemaType: \"string\",\n  $data: true,\n  error,\n  code(cxt, ruleType) {\n    const {\n      gen,\n      data,\n      $data,\n      schema,\n      schemaCode,\n      it\n    } = cxt;\n    const {\n      opts,\n      errSchemaPath,\n      schemaEnv,\n      self\n    } = it;\n    if (!opts.validateFormats) return;\n    if ($data) validate$DataFormat();else validateFormat();\n    function validate$DataFormat() {\n      const fmts = gen.scopeValue(\"formats\", {\n        ref: self.formats,\n        code: opts.code.formats\n      });\n      const fDef = gen.const(\"fDef\", (0, codegen_1._)`${fmts}[${schemaCode}]`);\n      const fType = gen.let(\"fType\");\n      const format = gen.let(\"format\");\n      // TODO simplify\n      gen.if((0, codegen_1._)`typeof ${fDef} == \"object\" && !(${fDef} instanceof RegExp)`, () => gen.assign(fType, (0, codegen_1._)`${fDef}.type || \"string\"`).assign(format, (0, codegen_1._)`${fDef}.validate`), () => gen.assign(fType, (0, codegen_1._)`\"string\"`).assign(format, fDef));\n      cxt.fail$data((0, codegen_1.or)(unknownFmt(), invalidFmt()));\n      function unknownFmt() {\n        if (opts.strictSchema === false) return codegen_1.nil;\n        return (0, codegen_1._)`${schemaCode} && !${format}`;\n      }\n      function invalidFmt() {\n        const callFormat = schemaEnv.$async ? (0, codegen_1._)`(${fDef}.async ? await ${format}(${data}) : ${format}(${data}))` : (0, codegen_1._)`${format}(${data})`;\n        const validData = (0, codegen_1._)`(typeof ${format} == \"function\" ? ${callFormat} : ${format}.test(${data}))`;\n        return (0, codegen_1._)`${format} && ${format} !== true && ${fType} === ${ruleType} && !${validData}`;\n      }\n    }\n    function validateFormat() {\n      const formatDef = self.formats[schema];\n      if (!formatDef) {\n        unknownFormat();\n        return;\n      }\n      if (formatDef === true) return;\n      const [fmtType, format, fmtRef] = getFormat(formatDef);\n      if (fmtType === ruleType) cxt.pass(validCondition());\n      function unknownFormat() {\n        if (opts.strictSchema === false) {\n          self.logger.warn(unknownMsg());\n          return;\n        }\n        throw new Error(unknownMsg());\n        function unknownMsg() {\n          return `unknown format \"${schema}\" ignored in schema at path \"${errSchemaPath}\"`;\n        }\n      }\n      function getFormat(fmtDef) {\n        const code = fmtDef instanceof RegExp ? (0, codegen_1.regexpCode)(fmtDef) : opts.code.formats ? (0, codegen_1._)`${opts.code.formats}${(0, codegen_1.getProperty)(schema)}` : undefined;\n        const fmt = gen.scopeValue(\"formats\", {\n          key: schema,\n          ref: fmtDef,\n          code\n        });\n        if (typeof fmtDef == \"object\" && !(fmtDef instanceof RegExp)) {\n          return [fmtDef.type || \"string\", fmtDef.validate, (0, codegen_1._)`${fmt}.validate`];\n        }\n        return [\"string\", fmtDef, fmt];\n      }\n      function validCondition() {\n        if (typeof formatDef == \"object\" && !(formatDef instanceof RegExp) && formatDef.async) {\n          if (!schemaEnv.$async) throw new Error(\"async format in sync schema\");\n          return (0, codegen_1._)`await ${fmtRef}(${data})`;\n        }\n        return typeof format == \"function\" ? (0, codegen_1._)`${fmtRef}(${data})` : (0, codegen_1._)`${fmtRef}.test(${data})`;\n      }\n    }\n  }\n};\nexports.default = def;","map":{"version":3,"sources":["../../../lib/vocabularies/format/format.ts"],"names":[],"mappings":";;;;;AASA,MAAA,SAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;AAaA,MAAM,KAAK,GAA2B;EACpC,OAAO,EAAE;IAAA,IAAC;MAAC;IAAU,CAAC;IAAA,OAAK,CAAA,CAAA,EAAA,SAAA,CAAA,GAAG,CAAA,sBAAsB,UAAU,GAAG;EAAA;EACjE,MAAM,EAAE;IAAA,IAAC;MAAC;IAAU,CAAC;IAAA,OAAK,CAAA,CAAA,EAAA,SAAA,CAAA,CAAC,CAAA,YAAY,UAAU,GAAG;EAAA;CACrD;AAED,MAAM,GAAG,GAA0B;EACjC,OAAO,EAAE,QAAQ;EACjB,IAAI,EAAE,CAAC,QAAQ,EAAE,QAAQ,CAAC;EAC1B,UAAU,EAAE,QAAQ;EACpB,KAAK,EAAE,IAAI;EACX,KAAK;EACL,IAAI,CAAC,GAAe,EAAE,QAAiB,EAAA;IACrC,MAAM;MAAC,GAAG;MAAE,IAAI;MAAE,KAAK;MAAE,MAAM;MAAE,UAAU;MAAE;IAAE,CAAC,GAAG,GAAG;IACtD,MAAM;MAAC,IAAI;MAAE,aAAa;MAAE,SAAS;MAAE;IAAI,CAAC,GAAG,EAAE;IACjD,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE;IAE3B,IAAI,KAAK,EAAE,mBAAmB,EAAE,CAAA,KAC3B,cAAc,EAAE;IAErB,SAAS,mBAAmB,GAAA;MAC1B,MAAM,IAAI,GAAG,GAAG,CAAC,UAAU,CAAC,SAAS,EAAE;QACrC,GAAG,EAAE,IAAI,CAAC,OAAO;QACjB,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC;OACjB,CAAC;MACF,MAAM,IAAI,GAAG,GAAG,CAAC,KAAK,CAAC,MAAM,EAAE,CAAA,CAAA,EAAA,SAAA,CAAA,CAAC,CAAA,GAAG,IAAI,IAAI,UAAU,GAAG,CAAC;MACzD,MAAM,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC;MAC9B,MAAM,MAAM,GAAG,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC;MAChC;MACA,GAAG,CAAC,EAAE,CACJ,CAAA,CAAA,EAAA,SAAA,CAAA,CAAC,CAAA,UAAU,IAAI,qBAAqB,IAAI,qBAAqB,EAC7D,MAAM,GAAG,CAAC,MAAM,CAAC,KAAK,EAAE,CAAA,CAAA,EAAA,SAAA,CAAA,CAAC,CAAA,GAAG,IAAI,mBAAmB,CAAC,CAAC,MAAM,CAAC,MAAM,EAAE,CAAA,CAAA,EAAA,SAAA,CAAA,CAAC,CAAA,GAAG,IAAI,WAAW,CAAC,EACxF,MAAM,GAAG,CAAC,MAAM,CAAC,KAAK,EAAE,CAAA,CAAA,EAAA,SAAA,CAAA,CAAC,CAAA,UAAU,CAAC,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,CAC1D;MACD,GAAG,CAAC,SAAS,CAAC,CAAA,CAAA,EAAA,SAAA,CAAA,EAAE,EAAC,UAAU,EAAE,EAAE,UAAU,EAAE,CAAC,CAAC;MAE7C,SAAS,UAAU,GAAA;QACjB,IAAI,IAAI,CAAC,YAAY,KAAK,KAAK,EAAE,OAAO,SAAA,CAAA,GAAG;QAC3C,OAAO,CAAA,CAAA,EAAA,SAAA,CAAA,CAAC,CAAA,GAAG,UAAU,QAAQ,MAAM,EAAE;MACvC;MAEA,SAAS,UAAU,GAAA;QACjB,MAAM,UAAU,GAAG,SAAS,CAAC,MAAM,GAC/B,CAAA,CAAA,EAAA,SAAA,CAAA,CAAC,CAAA,IAAI,IAAI,kBAAkB,MAAM,IAAI,IAAI,OAAO,MAAM,IAAI,IAAI,IAAI,GAClE,CAAA,CAAA,EAAA,SAAA,CAAA,CAAC,CAAA,GAAG,MAAM,IAAI,IAAI,GAAG;QACzB,MAAM,SAAS,GAAG,CAAA,CAAA,EAAA,SAAA,CAAA,CAAC,CAAA,WAAW,MAAM,oBAAoB,UAAU,MAAM,MAAM,SAAS,IAAI,IAAI;QAC/F,OAAO,CAAA,CAAA,EAAA,SAAA,CAAA,CAAC,CAAA,GAAG,MAAM,OAAO,MAAM,gBAAgB,KAAK,QAAQ,QAAQ,QAAQ,SAAS,EAAE;MACxF;IACF;IAEA,SAAS,cAAc,GAAA;MACrB,MAAM,SAAS,GAA4B,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;MAC/D,IAAI,CAAC,SAAS,EAAE;QACd,aAAa,EAAE;QACf;MACD;MACD,IAAI,SAAS,KAAK,IAAI,EAAE;MACxB,MAAM,CAAC,OAAO,EAAE,MAAM,EAAE,MAAM,CAAC,GAAG,SAAS,CAAC,SAAS,CAAC;MACtD,IAAI,OAAO,KAAK,QAAQ,EAAE,GAAG,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC;MAEpD,SAAS,aAAa,GAAA;QACpB,IAAI,IAAI,CAAC,YAAY,KAAK,KAAK,EAAE;UAC/B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC;UAC9B;QACD;QACD,MAAM,IAAI,KAAK,CAAC,UAAU,EAAE,CAAC;QAE7B,SAAS,UAAU,GAAA;UACjB,OAAO,mBAAmB,MAAgB,gCAAgC,aAAa,GAAG;QAC5F;MACF;MAEA,SAAS,SAAS,CAAC,MAAmB,EAAA;QACpC,MAAM,IAAI,GACR,MAAM,YAAY,MAAM,GACpB,CAAA,CAAA,EAAA,SAAA,CAAA,UAAU,EAAC,MAAM,CAAC,GAClB,IAAI,CAAC,IAAI,CAAC,OAAO,GACjB,CAAA,CAAA,EAAA,SAAA,CAAA,CAAC,CAAA,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,GAAG,CAAA,CAAA,EAAA,SAAA,CAAA,WAAW,EAAC,MAAM,CAAC,EAAE,GAC7C,SAAS;QACf,MAAM,GAAG,GAAG,GAAG,CAAC,UAAU,CAAC,SAAS,EAAE;UAAC,GAAG,EAAE,MAAM;UAAE,GAAG,EAAE,MAAM;UAAE;QAAI,CAAC,CAAC;QACvE,IAAI,OAAO,MAAM,IAAI,QAAQ,IAAI,EAAE,MAAM,YAAY,MAAM,CAAC,EAAE;UAC5D,OAAO,CAAC,MAAM,CAAC,IAAI,IAAI,QAAQ,EAAE,MAAM,CAAC,QAAQ,EAAE,CAAA,CAAA,EAAA,SAAA,CAAA,CAAC,CAAA,GAAG,GAAG,WAAW,CAAC;QACtE;QAED,OAAO,CAAC,QAAQ,EAAE,MAAM,EAAE,GAAG,CAAC;MAChC;MAEA,SAAS,cAAc,GAAA;QACrB,IAAI,OAAO,SAAS,IAAI,QAAQ,IAAI,EAAE,SAAS,YAAY,MAAM,CAAC,IAAI,SAAS,CAAC,KAAK,EAAE;UACrF,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC;UACrE,OAAO,CAAA,CAAA,EAAA,SAAA,CAAA,CAAC,CAAA,SAAS,MAAM,IAAI,IAAI,GAAG;QACnC;QACD,OAAO,OAAO,MAAM,IAAI,UAAU,GAAG,CAAA,CAAA,EAAA,SAAA,CAAA,CAAC,CAAA,GAAG,MAAM,IAAI,IAAI,GAAG,GAAG,CAAA,CAAA,EAAA,SAAA,CAAA,CAAC,CAAA,GAAG,MAAM,SAAS,IAAI,GAAG;MACzF;IACF;EACF;CACD;AAED,OAAA,CAAA,OAAA,GAAe,GAAG","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst codegen_1 = require(\"../../compile/codegen\");\nconst error = {\n    message: ({ schemaCode }) => (0, codegen_1.str) `must match format \"${schemaCode}\"`,\n    params: ({ schemaCode }) => (0, codegen_1._) `{format: ${schemaCode}}`,\n};\nconst def = {\n    keyword: \"format\",\n    type: [\"number\", \"string\"],\n    schemaType: \"string\",\n    $data: true,\n    error,\n    code(cxt, ruleType) {\n        const { gen, data, $data, schema, schemaCode, it } = cxt;\n        const { opts, errSchemaPath, schemaEnv, self } = it;\n        if (!opts.validateFormats)\n            return;\n        if ($data)\n            validate$DataFormat();\n        else\n            validateFormat();\n        function validate$DataFormat() {\n            const fmts = gen.scopeValue(\"formats\", {\n                ref: self.formats,\n                code: opts.code.formats,\n            });\n            const fDef = gen.const(\"fDef\", (0, codegen_1._) `${fmts}[${schemaCode}]`);\n            const fType = gen.let(\"fType\");\n            const format = gen.let(\"format\");\n            // TODO simplify\n            gen.if((0, codegen_1._) `typeof ${fDef} == \"object\" && !(${fDef} instanceof RegExp)`, () => gen.assign(fType, (0, codegen_1._) `${fDef}.type || \"string\"`).assign(format, (0, codegen_1._) `${fDef}.validate`), () => gen.assign(fType, (0, codegen_1._) `\"string\"`).assign(format, fDef));\n            cxt.fail$data((0, codegen_1.or)(unknownFmt(), invalidFmt()));\n            function unknownFmt() {\n                if (opts.strictSchema === false)\n                    return codegen_1.nil;\n                return (0, codegen_1._) `${schemaCode} && !${format}`;\n            }\n            function invalidFmt() {\n                const callFormat = schemaEnv.$async\n                    ? (0, codegen_1._) `(${fDef}.async ? await ${format}(${data}) : ${format}(${data}))`\n                    : (0, codegen_1._) `${format}(${data})`;\n                const validData = (0, codegen_1._) `(typeof ${format} == \"function\" ? ${callFormat} : ${format}.test(${data}))`;\n                return (0, codegen_1._) `${format} && ${format} !== true && ${fType} === ${ruleType} && !${validData}`;\n            }\n        }\n        function validateFormat() {\n            const formatDef = self.formats[schema];\n            if (!formatDef) {\n                unknownFormat();\n                return;\n            }\n            if (formatDef === true)\n                return;\n            const [fmtType, format, fmtRef] = getFormat(formatDef);\n            if (fmtType === ruleType)\n                cxt.pass(validCondition());\n            function unknownFormat() {\n                if (opts.strictSchema === false) {\n                    self.logger.warn(unknownMsg());\n                    return;\n                }\n                throw new Error(unknownMsg());\n                function unknownMsg() {\n                    return `unknown format \"${schema}\" ignored in schema at path \"${errSchemaPath}\"`;\n                }\n            }\n            function getFormat(fmtDef) {\n                const code = fmtDef instanceof RegExp\n                    ? (0, codegen_1.regexpCode)(fmtDef)\n                    : opts.code.formats\n                        ? (0, codegen_1._) `${opts.code.formats}${(0, codegen_1.getProperty)(schema)}`\n                        : undefined;\n                const fmt = gen.scopeValue(\"formats\", { key: schema, ref: fmtDef, code });\n                if (typeof fmtDef == \"object\" && !(fmtDef instanceof RegExp)) {\n                    return [fmtDef.type || \"string\", fmtDef.validate, (0, codegen_1._) `${fmt}.validate`];\n                }\n                return [\"string\", fmtDef, fmt];\n            }\n            function validCondition() {\n                if (typeof formatDef == \"object\" && !(formatDef instanceof RegExp) && formatDef.async) {\n                    if (!schemaEnv.$async)\n                        throw new Error(\"async format in sync schema\");\n                    return (0, codegen_1._) `await ${fmtRef}(${data})`;\n                }\n                return typeof format == \"function\" ? (0, codegen_1._) `${fmtRef}(${data})` : (0, codegen_1._) `${fmtRef}.test(${data})`;\n            }\n        }\n    },\n};\nexports.default = def;\n//# sourceMappingURL=format.js.map"]},"metadata":{},"sourceType":"script"}