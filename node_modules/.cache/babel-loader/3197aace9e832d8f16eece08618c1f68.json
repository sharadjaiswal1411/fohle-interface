{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\nvar _regeneratorRuntime = require(\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\nvar _asyncToGenerator = require(\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\nvar _classCallCheck = require(\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nvar _inherits = require(\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\nvar _createSuper = require(\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SafeAppProvider = void 0;\nvar events_1 = require(\"events\");\nvar utils_1 = require(\"./utils\");\n// The API is based on Ethereum JavaScript API Provider Standard. Link: https://eips.ethereum.org/EIPS/eip-1193\nvar SafeAppProvider = /*#__PURE__*/function (_events_1$EventEmitte) {\n  _inherits(SafeAppProvider, _events_1$EventEmitte);\n  var _super = _createSuper(SafeAppProvider);\n  function SafeAppProvider(safe, sdk) {\n    var _this;\n    _classCallCheck(this, SafeAppProvider);\n    _this = _super.call(this);\n    _this.submittedTxs = new Map();\n    _this.safe = safe;\n    _this.sdk = sdk;\n    return _this;\n  }\n  _createClass(SafeAppProvider, [{\n    key: \"connect\",\n    value: function () {\n      var _connect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.emit('connect', {\n                  chainId: this.chainId\n                });\n                return _context.abrupt(\"return\");\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function connect() {\n        return _connect.apply(this, arguments);\n      }\n      return connect;\n    }()\n  }, {\n    key: \"disconnect\",\n    value: function () {\n      var _disconnect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\");\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n      function disconnect() {\n        return _disconnect.apply(this, arguments);\n      }\n      return disconnect;\n    }()\n  }, {\n    key: \"chainId\",\n    get: function get() {\n      return this.safe.chainId;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  }, {\n    key: \"request\",\n    value: function () {\n      var _request2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(_request) {\n        var method, _request$params, params, _params, message, address, _params2, _address, messageHash, tx, resp, block, txHash, _resp, _txHash, _resp2;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                method = _request.method, _request$params = _request.params, params = _request$params === void 0 ? [] : _request$params;\n                _context3.t0 = method;\n                _context3.next = _context3.t0 === 'eth_accounts' ? 4 : _context3.t0 === 'net_version' ? 5 : _context3.t0 === 'eth_chainId' ? 5 : _context3.t0 === 'personal_sign' ? 6 : _context3.t0 === 'eth_sign' ? 12 : _context3.t0 === 'eth_sendTransaction' ? 18 : _context3.t0 === 'eth_blockNumber' ? 24 : _context3.t0 === 'eth_getBalance' ? 28 : _context3.t0 === 'eth_getCode' ? 29 : _context3.t0 === 'eth_getTransactionCount' ? 30 : _context3.t0 === 'eth_getStorageAt' ? 31 : _context3.t0 === 'eth_getBlockByNumber' ? 32 : _context3.t0 === 'eth_getBlockByHash' ? 33 : _context3.t0 === 'eth_getTransactionByHash' ? 34 : _context3.t0 === 'eth_getTransactionReceipt' ? 47 : _context3.t0 === 'eth_estimateGas' ? 58 : _context3.t0 === 'eth_call' ? 59 : _context3.t0 === 'eth_getLogs' ? 60 : _context3.t0 === 'eth_gasPrice' ? 61 : _context3.t0 === 'wallet_getPermissions' ? 62 : _context3.t0 === 'wallet_requestPermissions' ? 63 : 64;\n                break;\n              case 4:\n                return _context3.abrupt(\"return\", [this.safe.safeAddress]);\n              case 5:\n                return _context3.abrupt(\"return\", \"0x\".concat(this.chainId.toString(16)));\n              case 6:\n                _params = _slicedToArray(params, 2), message = _params[0], address = _params[1];\n                if (!(this.safe.safeAddress.toLowerCase() !== address.toLowerCase())) {\n                  _context3.next = 9;\n                  break;\n                }\n                throw new Error('The address or message hash is invalid');\n              case 9:\n                _context3.next = 11;\n                return this.sdk.txs.signMessage(message);\n              case 11:\n                return _context3.abrupt(\"return\", '0x');\n              case 12:\n                _params2 = _slicedToArray(params, 2), _address = _params2[0], messageHash = _params2[1];\n                if (!(this.safe.safeAddress.toLowerCase() !== _address.toLowerCase() || !messageHash.startsWith('0x'))) {\n                  _context3.next = 15;\n                  break;\n                }\n                throw new Error('The address or message hash is invalid');\n              case 15:\n                _context3.next = 17;\n                return this.sdk.txs.signMessage(messageHash);\n              case 17:\n                return _context3.abrupt(\"return\", '0x');\n              case 18:\n                tx = Object.assign({\n                  value: '0',\n                  data: '0x'\n                }, params[0]);\n                _context3.next = 21;\n                return this.sdk.txs.send({\n                  txs: [tx]\n                });\n              case 21:\n                resp = _context3.sent;\n                // Store fake transaction\n                this.submittedTxs.set(resp.safeTxHash, {\n                  from: this.safe.safeAddress,\n                  hash: resp.safeTxHash,\n                  gas: 0,\n                  gasPrice: '0x00',\n                  nonce: 0,\n                  input: tx.data,\n                  value: tx.value,\n                  to: tx.to,\n                  blockHash: null,\n                  blockNumber: null,\n                  transactionIndex: null\n                });\n                return _context3.abrupt(\"return\", resp.safeTxHash);\n              case 24:\n                _context3.next = 26;\n                return this.sdk.eth.getBlockByNumber(['latest']);\n              case 26:\n                block = _context3.sent;\n                return _context3.abrupt(\"return\", block.number);\n              case 28:\n                return _context3.abrupt(\"return\", this.sdk.eth.getBalance([(0, utils_1.getLowerCase)(params[0]), params[1]]));\n              case 29:\n                return _context3.abrupt(\"return\", this.sdk.eth.getCode([(0, utils_1.getLowerCase)(params[0]), params[1]]));\n              case 30:\n                return _context3.abrupt(\"return\", this.sdk.eth.getTransactionCount([(0, utils_1.getLowerCase)(params[0]), params[1]]));\n              case 31:\n                return _context3.abrupt(\"return\", this.sdk.eth.getStorageAt([(0, utils_1.getLowerCase)(params[0]), params[1], params[2]]));\n              case 32:\n                return _context3.abrupt(\"return\", this.sdk.eth.getBlockByNumber([params[0], params[1]]));\n              case 33:\n                return _context3.abrupt(\"return\", this.sdk.eth.getBlockByHash([params[0], params[1]]));\n              case 34:\n                txHash = params[0];\n                _context3.prev = 35;\n                _context3.next = 38;\n                return this.sdk.txs.getBySafeTxHash(txHash);\n              case 38:\n                _resp = _context3.sent;\n                txHash = _resp.txHash || txHash;\n                _context3.next = 44;\n                break;\n              case 42:\n                _context3.prev = 42;\n                _context3.t1 = _context3[\"catch\"](35);\n              case 44:\n                if (!this.submittedTxs.has(txHash)) {\n                  _context3.next = 46;\n                  break;\n                }\n                return _context3.abrupt(\"return\", this.submittedTxs.get(txHash));\n              case 46:\n                return _context3.abrupt(\"return\", this.sdk.eth.getTransactionByHash([txHash]).then(function (tx) {\n                  // We set the tx hash to the one requested, as some provider assert this\n                  if (tx) {\n                    tx.hash = params[0];\n                  }\n                  return tx;\n                }));\n              case 47:\n                _txHash = params[0];\n                _context3.prev = 48;\n                _context3.next = 51;\n                return this.sdk.txs.getBySafeTxHash(_txHash);\n              case 51:\n                _resp2 = _context3.sent;\n                _txHash = _resp2.txHash || _txHash;\n                _context3.next = 57;\n                break;\n              case 55:\n                _context3.prev = 55;\n                _context3.t2 = _context3[\"catch\"](48);\n              case 57:\n                return _context3.abrupt(\"return\", this.sdk.eth.getTransactionReceipt([_txHash]).then(function (tx) {\n                  // We set the tx hash to the one requested, as some provider assert this\n                  if (tx) {\n                    tx.transactionHash = params[0];\n                  }\n                  return tx;\n                }));\n              case 58:\n                return _context3.abrupt(\"return\", this.sdk.eth.getEstimateGas(params[0]));\n              case 59:\n                return _context3.abrupt(\"return\", this.sdk.eth.call([params[0], params[1]]));\n              case 60:\n                return _context3.abrupt(\"return\", this.sdk.eth.getPastLogs([params[0]]));\n              case 61:\n                return _context3.abrupt(\"return\", this.sdk.eth.getGasPrice());\n              case 62:\n                return _context3.abrupt(\"return\", this.sdk.wallet.getPermissions());\n              case 63:\n                return _context3.abrupt(\"return\", this.sdk.wallet.requestPermissions(params[0]));\n              case 64:\n                throw Error(\"\\\"\".concat(_request.method, \"\\\" not implemented\"));\n              case 65:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[35, 42], [48, 55]]);\n      }));\n      function request(_x) {\n        return _request2.apply(this, arguments);\n      }\n      return request;\n    }() // this method is needed for ethers v4\n    // https://github.com/ethers-io/ethers.js/blob/427e16826eb15d52d25c4f01027f8db22b74b76c/src.ts/providers/web3-provider.ts#L41-L55\n  }, {\n    key: \"send\",\n    value: function send(request, callback) {\n      if (!request) callback('Undefined request');\n      this.request(request).then(function (result) {\n        return callback(null, {\n          jsonrpc: '2.0',\n          id: request.id,\n          result: result\n        });\n      }).catch(function (error) {\n        return callback(error, null);\n      });\n    }\n  }]);\n  return SafeAppProvider;\n}(events_1.EventEmitter);\nexports.SafeAppProvider = SafeAppProvider;","map":{"version":3,"sources":["../src/provider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SafeAppProvider = void 0;\nconst events_1 = require(\"events\");\nconst utils_1 = require(\"./utils\");\n// The API is based on Ethereum JavaScript API Provider Standard. Link: https://eips.ethereum.org/EIPS/eip-1193\nclass SafeAppProvider extends events_1.EventEmitter {\n    constructor(safe, sdk) {\n        super();\n        this.submittedTxs = new Map();\n        this.safe = safe;\n        this.sdk = sdk;\n    }\n    async connect() {\n        this.emit('connect', { chainId: this.chainId });\n        return;\n    }\n    async disconnect() {\n        return;\n    }\n    get chainId() {\n        return this.safe.chainId;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async request(request) {\n        const { method, params = [] } = request;\n        switch (method) {\n            case 'eth_accounts':\n                return [this.safe.safeAddress];\n            case 'net_version':\n            case 'eth_chainId':\n                return `0x${this.chainId.toString(16)}`;\n            case 'personal_sign': {\n                const [message, address] = params;\n                if (this.safe.safeAddress.toLowerCase() !== address.toLowerCase()) {\n                    throw new Error('The address or message hash is invalid');\n                }\n                await this.sdk.txs.signMessage(message);\n                return '0x';\n            }\n            case 'eth_sign': {\n                const [address, messageHash] = params;\n                if (this.safe.safeAddress.toLowerCase() !== address.toLowerCase() || !messageHash.startsWith('0x')) {\n                    throw new Error('The address or message hash is invalid');\n                }\n                await this.sdk.txs.signMessage(messageHash);\n                return '0x';\n            }\n            case 'eth_sendTransaction':\n                const tx = Object.assign({ value: '0', data: '0x' }, params[0]);\n                const resp = await this.sdk.txs.send({\n                    txs: [tx],\n                });\n                // Store fake transaction\n                this.submittedTxs.set(resp.safeTxHash, {\n                    from: this.safe.safeAddress,\n                    hash: resp.safeTxHash,\n                    gas: 0,\n                    gasPrice: '0x00',\n                    nonce: 0,\n                    input: tx.data,\n                    value: tx.value,\n                    to: tx.to,\n                    blockHash: null,\n                    blockNumber: null,\n                    transactionIndex: null,\n                });\n                return resp.safeTxHash;\n            case 'eth_blockNumber':\n                const block = await this.sdk.eth.getBlockByNumber(['latest']);\n                return block.number;\n            case 'eth_getBalance':\n                return this.sdk.eth.getBalance([(0, utils_1.getLowerCase)(params[0]), params[1]]);\n            case 'eth_getCode':\n                return this.sdk.eth.getCode([(0, utils_1.getLowerCase)(params[0]), params[1]]);\n            case 'eth_getTransactionCount':\n                return this.sdk.eth.getTransactionCount([(0, utils_1.getLowerCase)(params[0]), params[1]]);\n            case 'eth_getStorageAt':\n                return this.sdk.eth.getStorageAt([(0, utils_1.getLowerCase)(params[0]), params[1], params[2]]);\n            case 'eth_getBlockByNumber':\n                return this.sdk.eth.getBlockByNumber([params[0], params[1]]);\n            case 'eth_getBlockByHash':\n                return this.sdk.eth.getBlockByHash([params[0], params[1]]);\n            case 'eth_getTransactionByHash':\n                let txHash = params[0];\n                try {\n                    const resp = await this.sdk.txs.getBySafeTxHash(txHash);\n                    txHash = resp.txHash || txHash;\n                }\n                catch (e) { }\n                // Use fake transaction if we don't have a real tx hash\n                if (this.submittedTxs.has(txHash)) {\n                    return this.submittedTxs.get(txHash);\n                }\n                return this.sdk.eth.getTransactionByHash([txHash]).then((tx) => {\n                    // We set the tx hash to the one requested, as some provider assert this\n                    if (tx) {\n                        tx.hash = params[0];\n                    }\n                    return tx;\n                });\n            case 'eth_getTransactionReceipt': {\n                let txHash = params[0];\n                try {\n                    const resp = await this.sdk.txs.getBySafeTxHash(txHash);\n                    txHash = resp.txHash || txHash;\n                }\n                catch (e) { }\n                return this.sdk.eth.getTransactionReceipt([txHash]).then((tx) => {\n                    // We set the tx hash to the one requested, as some provider assert this\n                    if (tx) {\n                        tx.transactionHash = params[0];\n                    }\n                    return tx;\n                });\n            }\n            case 'eth_estimateGas': {\n                return this.sdk.eth.getEstimateGas(params[0]);\n            }\n            case 'eth_call': {\n                return this.sdk.eth.call([params[0], params[1]]);\n            }\n            case 'eth_getLogs':\n                return this.sdk.eth.getPastLogs([params[0]]);\n            case 'eth_gasPrice':\n                return this.sdk.eth.getGasPrice();\n            case 'wallet_getPermissions':\n                return this.sdk.wallet.getPermissions();\n            case 'wallet_requestPermissions':\n                return this.sdk.wallet.requestPermissions(params[0]);\n            default:\n                throw Error(`\"${request.method}\" not implemented`);\n        }\n    }\n    // this method is needed for ethers v4\n    // https://github.com/ethers-io/ethers.js/blob/427e16826eb15d52d25c4f01027f8db22b74b76c/src.ts/providers/web3-provider.ts#L41-L55\n    send(request, callback) {\n        if (!request)\n            callback('Undefined request');\n        this.request(request)\n            .then((result) => callback(null, { jsonrpc: '2.0', id: request.id, result }))\n            .catch((error) => callback(error, null));\n    }\n}\nexports.SafeAppProvider = SafeAppProvider;\n//# sourceMappingURL=provider.js.map"]},"metadata":{},"sourceType":"script"}