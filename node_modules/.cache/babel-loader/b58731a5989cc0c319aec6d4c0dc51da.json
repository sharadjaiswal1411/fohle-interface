{"ast":null,"code":"import _objectSpread from\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _defineProperty from\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import{createReducer}from'@reduxjs/toolkit';import{parsedQueryString}from'hooks/useParsedQueryString';import{Field,replaceSwapState,selectCurrency,setRecipient,switchCurrencies,typeInput}from'./actions';import{queryParametersToSwapState}from'./hooks';var initialState=queryParametersToSwapState(parsedQueryString());export default createReducer(initialState,function(builder){return builder.addCase(replaceSwapState,function(state,_ref){var _ref2;var _ref$payload=_ref.payload,typedValue=_ref$payload.typedValue,recipient=_ref$payload.recipient,field=_ref$payload.field,inputCurrencyId=_ref$payload.inputCurrencyId,outputCurrencyId=_ref$payload.outputCurrencyId;return _ref2={},_defineProperty(_ref2,Field.INPUT,{currencyId:inputCurrencyId!==null&&inputCurrencyId!==void 0?inputCurrencyId:null}),_defineProperty(_ref2,Field.OUTPUT,{currencyId:outputCurrencyId!==null&&outputCurrencyId!==void 0?outputCurrencyId:null}),_defineProperty(_ref2,\"independentField\",field),_defineProperty(_ref2,\"typedValue\",typedValue),_defineProperty(_ref2,\"recipient\",recipient),_ref2;}).addCase(selectCurrency,function(state,_ref3){var _ref3$payload=_ref3.payload,currencyId=_ref3$payload.currencyId,field=_ref3$payload.field;var otherField=field===Field.INPUT?Field.OUTPUT:Field.INPUT;if(currencyId===state[otherField].currencyId){var _objectSpread2;// the case where we have to swap the order\nreturn _objectSpread(_objectSpread({},state),{},(_objectSpread2={independentField:state.independentField===Field.INPUT?Field.OUTPUT:Field.INPUT},_defineProperty(_objectSpread2,field,{currencyId:currencyId}),_defineProperty(_objectSpread2,otherField,{currencyId:state[field].currencyId}),_objectSpread2));}else{// the normal case\nreturn _objectSpread(_objectSpread({},state),{},_defineProperty({},field,{currencyId:currencyId}));}}).addCase(switchCurrencies,function(state){var _objectSpread4;return _objectSpread(_objectSpread({},state),{},(_objectSpread4={independentField:state.independentField===Field.INPUT?Field.OUTPUT:Field.INPUT},_defineProperty(_objectSpread4,Field.INPUT,{currencyId:state[Field.OUTPUT].currencyId}),_defineProperty(_objectSpread4,Field.OUTPUT,{currencyId:state[Field.INPUT].currencyId}),_objectSpread4));}).addCase(typeInput,function(state,_ref4){var _ref4$payload=_ref4.payload,field=_ref4$payload.field,typedValue=_ref4$payload.typedValue;return _objectSpread(_objectSpread({},state),{},{independentField:field,typedValue:typedValue});}).addCase(setRecipient,function(state,_ref5){var recipient=_ref5.payload.recipient;state.recipient=recipient;});});","map":{"version":3,"names":["createReducer","parsedQueryString","Field","replaceSwapState","selectCurrency","setRecipient","switchCurrencies","typeInput","queryParametersToSwapState","initialState","builder","addCase","state","payload","typedValue","recipient","field","inputCurrencyId","outputCurrencyId","INPUT","currencyId","OUTPUT","otherField","independentField"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/state/swap/reducer.ts"],"sourcesContent":["import { createReducer } from '@reduxjs/toolkit'\nimport { parsedQueryString } from 'hooks/useParsedQueryString'\n\nimport { Field, replaceSwapState, selectCurrency, setRecipient, switchCurrencies, typeInput } from './actions'\nimport { queryParametersToSwapState } from './hooks'\n\nexport interface SwapState {\n  readonly independentField: Field\n  readonly typedValue: string\n  readonly [Field.INPUT]: {\n    readonly currencyId: string | undefined | null\n  }\n  readonly [Field.OUTPUT]: {\n    readonly currencyId: string | undefined | null\n  }\n  // the typed recipient address or ENS name, or null if swap should go to sender\n  readonly recipient: string | null\n}\n\nconst initialState: SwapState = queryParametersToSwapState(parsedQueryString())\n\nexport default createReducer<SwapState>(initialState, (builder) =>\n  builder\n    .addCase(\n      replaceSwapState,\n      (state, { payload: { typedValue, recipient, field, inputCurrencyId, outputCurrencyId } }) => {\n        return {\n          [Field.INPUT]: {\n            currencyId: inputCurrencyId ?? null,\n          },\n          [Field.OUTPUT]: {\n            currencyId: outputCurrencyId ?? null,\n          },\n          independentField: field,\n          typedValue,\n          recipient,\n        }\n      }\n    )\n    .addCase(selectCurrency, (state, { payload: { currencyId, field } }) => {\n      const otherField = field === Field.INPUT ? Field.OUTPUT : Field.INPUT\n      if (currencyId === state[otherField].currencyId) {\n        // the case where we have to swap the order\n        return {\n          ...state,\n          independentField: state.independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT,\n          [field]: { currencyId },\n          [otherField]: { currencyId: state[field].currencyId },\n        }\n      } else {\n        // the normal case\n        return {\n          ...state,\n          [field]: { currencyId },\n        }\n      }\n    })\n    .addCase(switchCurrencies, (state) => {\n      return {\n        ...state,\n        independentField: state.independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT,\n        [Field.INPUT]: { currencyId: state[Field.OUTPUT].currencyId },\n        [Field.OUTPUT]: { currencyId: state[Field.INPUT].currencyId },\n      }\n    })\n    .addCase(typeInput, (state, { payload: { field, typedValue } }) => {\n      return {\n        ...state,\n        independentField: field,\n        typedValue,\n      }\n    })\n    .addCase(setRecipient, (state, { payload: { recipient } }) => {\n      state.recipient = recipient\n    })\n)\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}