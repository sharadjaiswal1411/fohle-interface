{"ast":null,"code":"import _regeneratorRuntime from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n/**\n * Provider for getting V2 pools, with functionality for caching the results.\n *\n * @export\n * @class CachingV2SubgraphProvider\n */\nexport var CachingV2SubgraphProvider = /*#__PURE__*/function () {\n  /**\n   * Creates an instance of CachingV2SubgraphProvider.\n   * @param chainId The chain id to use.\n   * @param subgraphProvider The provider to use to get the subgraph pools when not in the cache.\n   * @param cache Cache instance to hold cached pools.\n   */\n  function CachingV2SubgraphProvider(chainId, subgraphProvider, cache) {\n    _classCallCheck(this, CachingV2SubgraphProvider);\n    this.chainId = chainId;\n    this.subgraphProvider = subgraphProvider;\n    this.cache = cache;\n    this.SUBGRAPH_KEY = function (chainId) {\n      return \"subgraph-pools-v2-\".concat(chainId);\n    };\n  }\n  _createClass(CachingV2SubgraphProvider, [{\n    key: \"getPools\",\n    value: function () {\n      var _getPools = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var cachedPools, pools;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.cache.get(this.SUBGRAPH_KEY(this.chainId));\n              case 2:\n                cachedPools = _context.sent;\n                if (!cachedPools) {\n                  _context.next = 5;\n                  break;\n                }\n                return _context.abrupt(\"return\", cachedPools);\n              case 5:\n                _context.next = 7;\n                return this.subgraphProvider.getPools();\n              case 7:\n                pools = _context.sent;\n                _context.next = 10;\n                return this.cache.set(this.SUBGRAPH_KEY(this.chainId), pools);\n              case 10:\n                return _context.abrupt(\"return\", pools);\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function getPools() {\n        return _getPools.apply(this, arguments);\n      }\n      return getPools;\n    }()\n  }]);\n  return CachingV2SubgraphProvider;\n}();","map":{"version":3,"sources":["../../../../src/providers/v2/caching-subgraph-provider.ts"],"names":[],"mappings":";;;;AAKA;;;;;AAKG;AACH,WAAa,yBAAyB;EAGpC;;;;;AAKG;EACH,mCACU,OAAgB,EACd,gBAAqC,EACvC,KAA+B,EAAA;IAAA;IAF/B,IAAA,CAAA,OAAO,GAAP,OAAO;IACL,IAAA,CAAA,gBAAgB,GAAhB,gBAAgB;IAClB,IAAA,CAAA,KAAK,GAAL,KAAK;IAXP,IAAA,CAAA,YAAY,GAAG,UAAC,OAAgB;MAAA,mCAA0B,OAAO;IAAA,CAAE;EAYxE;EAAC;IAAA;IAAA;MAAA,yEAEG;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OACqB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;cAAA;gBAAnE,WAAW;gBAAA,KAEb,WAAW;kBAAA;kBAAA;gBAAA;gBAAA,iCACN,WAAW;cAAA;gBAAA;gBAAA,OAGA,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE;cAAA;gBAA9C,KAAK;gBAAA;gBAAA,OAEL,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,KAAK,CAAC;cAAA;gBAAA,iCAErD,KAAK;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACb;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;EAAA;AAAA","sourceRoot":"","sourcesContent":["/**\n * Provider for getting V2 pools, with functionality for caching the results.\n *\n * @export\n * @class CachingV2SubgraphProvider\n */\nexport class CachingV2SubgraphProvider {\n    /**\n     * Creates an instance of CachingV2SubgraphProvider.\n     * @param chainId The chain id to use.\n     * @param subgraphProvider The provider to use to get the subgraph pools when not in the cache.\n     * @param cache Cache instance to hold cached pools.\n     */\n    constructor(chainId, subgraphProvider, cache) {\n        this.chainId = chainId;\n        this.subgraphProvider = subgraphProvider;\n        this.cache = cache;\n        this.SUBGRAPH_KEY = (chainId) => `subgraph-pools-v2-${chainId}`;\n    }\n    async getPools() {\n        const cachedPools = await this.cache.get(this.SUBGRAPH_KEY(this.chainId));\n        if (cachedPools) {\n            return cachedPools;\n        }\n        const pools = await this.subgraphProvider.getPools();\n        await this.cache.set(this.SUBGRAPH_KEY(this.chainId), pools);\n        return pools;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGluZy1zdWJncmFwaC1wcm92aWRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9wcm92aWRlcnMvdjIvY2FjaGluZy1zdWJncmFwaC1wcm92aWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFLQTs7Ozs7R0FLRztBQUNILE1BQU0sT0FBTyx5QkFBeUI7SUFHcEM7Ozs7O09BS0c7SUFDSCxZQUNVLE9BQWdCLEVBQ2QsZ0JBQXFDLEVBQ3ZDLEtBQStCO1FBRi9CLFlBQU8sR0FBUCxPQUFPLENBQVM7UUFDZCxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQXFCO1FBQ3ZDLFVBQUssR0FBTCxLQUFLLENBQTBCO1FBWGpDLGlCQUFZLEdBQUcsQ0FBQyxPQUFnQixFQUFFLEVBQUUsQ0FBQyxxQkFBcUIsT0FBTyxFQUFFLENBQUM7SUFZekUsQ0FBQztJQUVHLEtBQUssQ0FBQyxRQUFRO1FBQ25CLE1BQU0sV0FBVyxHQUFHLE1BQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUUxRSxJQUFJLFdBQVcsRUFBRTtZQUNmLE9BQU8sV0FBVyxDQUFDO1NBQ3BCO1FBRUQsTUFBTSxLQUFLLEdBQUcsTUFBTSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxFQUFFLENBQUM7UUFFckQsTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUU3RCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7Q0FDRiJ9"]},"metadata":{},"sourceType":"module"}