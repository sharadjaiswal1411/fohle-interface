{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.or = exports.and = exports.not = exports.CodeGen = exports.operators = exports.varKinds = exports.ValueScopeName = exports.ValueScope = exports.Scope = exports.Name = exports.regexpCode = exports.stringify = exports.getProperty = exports.nil = exports.strConcat = exports.str = exports._ = void 0;\nconst code_1 = require(\"./code\");\nconst scope_1 = require(\"./scope\");\nvar code_2 = require(\"./code\");\nObject.defineProperty(exports, \"_\", {\n  enumerable: true,\n  get: function () {\n    return code_2._;\n  }\n});\nObject.defineProperty(exports, \"str\", {\n  enumerable: true,\n  get: function () {\n    return code_2.str;\n  }\n});\nObject.defineProperty(exports, \"strConcat\", {\n  enumerable: true,\n  get: function () {\n    return code_2.strConcat;\n  }\n});\nObject.defineProperty(exports, \"nil\", {\n  enumerable: true,\n  get: function () {\n    return code_2.nil;\n  }\n});\nObject.defineProperty(exports, \"getProperty\", {\n  enumerable: true,\n  get: function () {\n    return code_2.getProperty;\n  }\n});\nObject.defineProperty(exports, \"stringify\", {\n  enumerable: true,\n  get: function () {\n    return code_2.stringify;\n  }\n});\nObject.defineProperty(exports, \"regexpCode\", {\n  enumerable: true,\n  get: function () {\n    return code_2.regexpCode;\n  }\n});\nObject.defineProperty(exports, \"Name\", {\n  enumerable: true,\n  get: function () {\n    return code_2.Name;\n  }\n});\nvar scope_2 = require(\"./scope\");\nObject.defineProperty(exports, \"Scope\", {\n  enumerable: true,\n  get: function () {\n    return scope_2.Scope;\n  }\n});\nObject.defineProperty(exports, \"ValueScope\", {\n  enumerable: true,\n  get: function () {\n    return scope_2.ValueScope;\n  }\n});\nObject.defineProperty(exports, \"ValueScopeName\", {\n  enumerable: true,\n  get: function () {\n    return scope_2.ValueScopeName;\n  }\n});\nObject.defineProperty(exports, \"varKinds\", {\n  enumerable: true,\n  get: function () {\n    return scope_2.varKinds;\n  }\n});\nexports.operators = {\n  GT: new code_1._Code(\">\"),\n  GTE: new code_1._Code(\">=\"),\n  LT: new code_1._Code(\"<\"),\n  LTE: new code_1._Code(\"<=\"),\n  EQ: new code_1._Code(\"===\"),\n  NEQ: new code_1._Code(\"!==\"),\n  NOT: new code_1._Code(\"!\"),\n  OR: new code_1._Code(\"||\"),\n  AND: new code_1._Code(\"&&\"),\n  ADD: new code_1._Code(\"+\")\n};\nclass Node {\n  optimizeNodes() {\n    return this;\n  }\n  optimizeNames(_names, _constants) {\n    return this;\n  }\n}\nclass Def extends Node {\n  constructor(varKind, name, rhs) {\n    super();\n    this.varKind = varKind;\n    this.name = name;\n    this.rhs = rhs;\n  }\n  render(_ref) {\n    let {\n      es5,\n      _n\n    } = _ref;\n    const varKind = es5 ? scope_1.varKinds.var : this.varKind;\n    const rhs = this.rhs === undefined ? \"\" : ` = ${this.rhs}`;\n    return `${varKind} ${this.name}${rhs};` + _n;\n  }\n  optimizeNames(names, constants) {\n    if (!names[this.name.str]) return;\n    if (this.rhs) this.rhs = optimizeExpr(this.rhs, names, constants);\n    return this;\n  }\n  get names() {\n    return this.rhs instanceof code_1._CodeOrName ? this.rhs.names : {};\n  }\n}\nclass Assign extends Node {\n  constructor(lhs, rhs, sideEffects) {\n    super();\n    this.lhs = lhs;\n    this.rhs = rhs;\n    this.sideEffects = sideEffects;\n  }\n  render(_ref2) {\n    let {\n      _n\n    } = _ref2;\n    return `${this.lhs} = ${this.rhs};` + _n;\n  }\n  optimizeNames(names, constants) {\n    if (this.lhs instanceof code_1.Name && !names[this.lhs.str] && !this.sideEffects) return;\n    this.rhs = optimizeExpr(this.rhs, names, constants);\n    return this;\n  }\n  get names() {\n    const names = this.lhs instanceof code_1.Name ? {} : {\n      ...this.lhs.names\n    };\n    return addExprNames(names, this.rhs);\n  }\n}\nclass AssignOp extends Assign {\n  constructor(lhs, op, rhs, sideEffects) {\n    super(lhs, rhs, sideEffects);\n    this.op = op;\n  }\n  render(_ref3) {\n    let {\n      _n\n    } = _ref3;\n    return `${this.lhs} ${this.op}= ${this.rhs};` + _n;\n  }\n}\nclass Label extends Node {\n  constructor(label) {\n    super();\n    this.label = label;\n    this.names = {};\n  }\n  render(_ref4) {\n    let {\n      _n\n    } = _ref4;\n    return `${this.label}:` + _n;\n  }\n}\nclass Break extends Node {\n  constructor(label) {\n    super();\n    this.label = label;\n    this.names = {};\n  }\n  render(_ref5) {\n    let {\n      _n\n    } = _ref5;\n    const label = this.label ? ` ${this.label}` : \"\";\n    return `break${label};` + _n;\n  }\n}\nclass Throw extends Node {\n  constructor(error) {\n    super();\n    this.error = error;\n  }\n  render(_ref6) {\n    let {\n      _n\n    } = _ref6;\n    return `throw ${this.error};` + _n;\n  }\n  get names() {\n    return this.error.names;\n  }\n}\nclass AnyCode extends Node {\n  constructor(code) {\n    super();\n    this.code = code;\n  }\n  render(_ref7) {\n    let {\n      _n\n    } = _ref7;\n    return `${this.code};` + _n;\n  }\n  optimizeNodes() {\n    return `${this.code}` ? this : undefined;\n  }\n  optimizeNames(names, constants) {\n    this.code = optimizeExpr(this.code, names, constants);\n    return this;\n  }\n  get names() {\n    return this.code instanceof code_1._CodeOrName ? this.code.names : {};\n  }\n}\nclass ParentNode extends Node {\n  constructor() {\n    let nodes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    super();\n    this.nodes = nodes;\n  }\n  render(opts) {\n    return this.nodes.reduce((code, n) => code + n.render(opts), \"\");\n  }\n  optimizeNodes() {\n    const {\n      nodes\n    } = this;\n    let i = nodes.length;\n    while (i--) {\n      const n = nodes[i].optimizeNodes();\n      if (Array.isArray(n)) nodes.splice(i, 1, ...n);else if (n) nodes[i] = n;else nodes.splice(i, 1);\n    }\n    return nodes.length > 0 ? this : undefined;\n  }\n  optimizeNames(names, constants) {\n    const {\n      nodes\n    } = this;\n    let i = nodes.length;\n    while (i--) {\n      // iterating backwards improves 1-pass optimization\n      const n = nodes[i];\n      if (n.optimizeNames(names, constants)) continue;\n      subtractNames(names, n.names);\n      nodes.splice(i, 1);\n    }\n    return nodes.length > 0 ? this : undefined;\n  }\n  get names() {\n    return this.nodes.reduce((names, n) => addNames(names, n.names), {});\n  }\n}\nclass BlockNode extends ParentNode {\n  render(opts) {\n    return \"{\" + opts._n + super.render(opts) + \"}\" + opts._n;\n  }\n}\nclass Root extends ParentNode {}\nclass Else extends BlockNode {}\nElse.kind = \"else\";\nclass If extends BlockNode {\n  constructor(condition, nodes) {\n    super(nodes);\n    this.condition = condition;\n  }\n  render(opts) {\n    let code = `if(${this.condition})` + super.render(opts);\n    if (this.else) code += \"else \" + this.else.render(opts);\n    return code;\n  }\n  optimizeNodes() {\n    super.optimizeNodes();\n    const cond = this.condition;\n    if (cond === true) return this.nodes; // else is ignored here\n    let e = this.else;\n    if (e) {\n      const ns = e.optimizeNodes();\n      e = this.else = Array.isArray(ns) ? new Else(ns) : ns;\n    }\n    if (e) {\n      if (cond === false) return e instanceof If ? e : e.nodes;\n      if (this.nodes.length) return this;\n      return new If(not(cond), e instanceof If ? [e] : e.nodes);\n    }\n    if (cond === false || !this.nodes.length) return undefined;\n    return this;\n  }\n  optimizeNames(names, constants) {\n    var _a;\n    this.else = (_a = this.else) === null || _a === void 0 ? void 0 : _a.optimizeNames(names, constants);\n    if (!(super.optimizeNames(names, constants) || this.else)) return;\n    this.condition = optimizeExpr(this.condition, names, constants);\n    return this;\n  }\n  get names() {\n    const names = super.names;\n    addExprNames(names, this.condition);\n    if (this.else) addNames(names, this.else.names);\n    return names;\n  }\n}\nIf.kind = \"if\";\nclass For extends BlockNode {}\nFor.kind = \"for\";\nclass ForLoop extends For {\n  constructor(iteration) {\n    super();\n    this.iteration = iteration;\n  }\n  render(opts) {\n    return `for(${this.iteration})` + super.render(opts);\n  }\n  optimizeNames(names, constants) {\n    if (!super.optimizeNames(names, constants)) return;\n    this.iteration = optimizeExpr(this.iteration, names, constants);\n    return this;\n  }\n  get names() {\n    return addNames(super.names, this.iteration.names);\n  }\n}\nclass ForRange extends For {\n  constructor(varKind, name, from, to) {\n    super();\n    this.varKind = varKind;\n    this.name = name;\n    this.from = from;\n    this.to = to;\n  }\n  render(opts) {\n    const varKind = opts.es5 ? scope_1.varKinds.var : this.varKind;\n    const {\n      name,\n      from,\n      to\n    } = this;\n    return `for(${varKind} ${name}=${from}; ${name}<${to}; ${name}++)` + super.render(opts);\n  }\n  get names() {\n    const names = addExprNames(super.names, this.from);\n    return addExprNames(names, this.to);\n  }\n}\nclass ForIter extends For {\n  constructor(loop, varKind, name, iterable) {\n    super();\n    this.loop = loop;\n    this.varKind = varKind;\n    this.name = name;\n    this.iterable = iterable;\n  }\n  render(opts) {\n    return `for(${this.varKind} ${this.name} ${this.loop} ${this.iterable})` + super.render(opts);\n  }\n  optimizeNames(names, constants) {\n    if (!super.optimizeNames(names, constants)) return;\n    this.iterable = optimizeExpr(this.iterable, names, constants);\n    return this;\n  }\n  get names() {\n    return addNames(super.names, this.iterable.names);\n  }\n}\nclass Func extends BlockNode {\n  constructor(name, args, async) {\n    super();\n    this.name = name;\n    this.args = args;\n    this.async = async;\n  }\n  render(opts) {\n    const _async = this.async ? \"async \" : \"\";\n    return `${_async}function ${this.name}(${this.args})` + super.render(opts);\n  }\n}\nFunc.kind = \"func\";\nclass Return extends ParentNode {\n  render(opts) {\n    return \"return \" + super.render(opts);\n  }\n}\nReturn.kind = \"return\";\nclass Try extends BlockNode {\n  render(opts) {\n    let code = \"try\" + super.render(opts);\n    if (this.catch) code += this.catch.render(opts);\n    if (this.finally) code += this.finally.render(opts);\n    return code;\n  }\n  optimizeNodes() {\n    var _a, _b;\n    super.optimizeNodes();\n    (_a = this.catch) === null || _a === void 0 ? void 0 : _a.optimizeNodes();\n    (_b = this.finally) === null || _b === void 0 ? void 0 : _b.optimizeNodes();\n    return this;\n  }\n  optimizeNames(names, constants) {\n    var _a, _b;\n    super.optimizeNames(names, constants);\n    (_a = this.catch) === null || _a === void 0 ? void 0 : _a.optimizeNames(names, constants);\n    (_b = this.finally) === null || _b === void 0 ? void 0 : _b.optimizeNames(names, constants);\n    return this;\n  }\n  get names() {\n    const names = super.names;\n    if (this.catch) addNames(names, this.catch.names);\n    if (this.finally) addNames(names, this.finally.names);\n    return names;\n  }\n}\nclass Catch extends BlockNode {\n  constructor(error) {\n    super();\n    this.error = error;\n  }\n  render(opts) {\n    return `catch(${this.error})` + super.render(opts);\n  }\n}\nCatch.kind = \"catch\";\nclass Finally extends BlockNode {\n  render(opts) {\n    return \"finally\" + super.render(opts);\n  }\n}\nFinally.kind = \"finally\";\nclass CodeGen {\n  constructor(extScope) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this._values = {};\n    this._blockStarts = [];\n    this._constants = {};\n    this.opts = {\n      ...opts,\n      _n: opts.lines ? \"\\n\" : \"\"\n    };\n    this._extScope = extScope;\n    this._scope = new scope_1.Scope({\n      parent: extScope\n    });\n    this._nodes = [new Root()];\n  }\n  toString() {\n    return this._root.render(this.opts);\n  }\n  // returns unique name in the internal scope\n  name(prefix) {\n    return this._scope.name(prefix);\n  }\n  // reserves unique name in the external scope\n  scopeName(prefix) {\n    return this._extScope.name(prefix);\n  }\n  // reserves unique name in the external scope and assigns value to it\n  scopeValue(prefixOrName, value) {\n    const name = this._extScope.value(prefixOrName, value);\n    const vs = this._values[name.prefix] || (this._values[name.prefix] = new Set());\n    vs.add(name);\n    return name;\n  }\n  getScopeValue(prefix, keyOrRef) {\n    return this._extScope.getValue(prefix, keyOrRef);\n  }\n  // return code that assigns values in the external scope to the names that are used internally\n  // (same names that were returned by gen.scopeName or gen.scopeValue)\n  scopeRefs(scopeName) {\n    return this._extScope.scopeRefs(scopeName, this._values);\n  }\n  scopeCode() {\n    return this._extScope.scopeCode(this._values);\n  }\n  _def(varKind, nameOrPrefix, rhs, constant) {\n    const name = this._scope.toName(nameOrPrefix);\n    if (rhs !== undefined && constant) this._constants[name.str] = rhs;\n    this._leafNode(new Def(varKind, name, rhs));\n    return name;\n  }\n  // `const` declaration (`var` in es5 mode)\n  const(nameOrPrefix, rhs, _constant) {\n    return this._def(scope_1.varKinds.const, nameOrPrefix, rhs, _constant);\n  }\n  // `let` declaration with optional assignment (`var` in es5 mode)\n  let(nameOrPrefix, rhs, _constant) {\n    return this._def(scope_1.varKinds.let, nameOrPrefix, rhs, _constant);\n  }\n  // `var` declaration with optional assignment\n  var(nameOrPrefix, rhs, _constant) {\n    return this._def(scope_1.varKinds.var, nameOrPrefix, rhs, _constant);\n  }\n  // assignment code\n  assign(lhs, rhs, sideEffects) {\n    return this._leafNode(new Assign(lhs, rhs, sideEffects));\n  }\n  // `+=` code\n  add(lhs, rhs) {\n    return this._leafNode(new AssignOp(lhs, exports.operators.ADD, rhs));\n  }\n  // appends passed SafeExpr to code or executes Block\n  code(c) {\n    if (typeof c == \"function\") c();else if (c !== code_1.nil) this._leafNode(new AnyCode(c));\n    return this;\n  }\n  // returns code for object literal for the passed argument list of key-value pairs\n  object() {\n    const code = [\"{\"];\n    for (var _len = arguments.length, keyValues = new Array(_len), _key = 0; _key < _len; _key++) {\n      keyValues[_key] = arguments[_key];\n    }\n    for (const [key, value] of keyValues) {\n      if (code.length > 1) code.push(\",\");\n      code.push(key);\n      if (key !== value || this.opts.es5) {\n        code.push(\":\");\n        (0, code_1.addCodeArg)(code, value);\n      }\n    }\n    code.push(\"}\");\n    return new code_1._Code(code);\n  }\n  // `if` clause (or statement if `thenBody` and, optionally, `elseBody` are passed)\n  if(condition, thenBody, elseBody) {\n    this._blockNode(new If(condition));\n    if (thenBody && elseBody) {\n      this.code(thenBody).else().code(elseBody).endIf();\n    } else if (thenBody) {\n      this.code(thenBody).endIf();\n    } else if (elseBody) {\n      throw new Error('CodeGen: \"else\" body without \"then\" body');\n    }\n    return this;\n  }\n  // `else if` clause - invalid without `if` or after `else` clauses\n  elseIf(condition) {\n    return this._elseNode(new If(condition));\n  }\n  // `else` clause - only valid after `if` or `else if` clauses\n  else() {\n    return this._elseNode(new Else());\n  }\n  // end `if` statement (needed if gen.if was used only with condition)\n  endIf() {\n    return this._endBlockNode(If, Else);\n  }\n  _for(node, forBody) {\n    this._blockNode(node);\n    if (forBody) this.code(forBody).endFor();\n    return this;\n  }\n  // a generic `for` clause (or statement if `forBody` is passed)\n  for(iteration, forBody) {\n    return this._for(new ForLoop(iteration), forBody);\n  }\n  // `for` statement for a range of values\n  forRange(nameOrPrefix, from, to, forBody) {\n    let varKind = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : this.opts.es5 ? scope_1.varKinds.var : scope_1.varKinds.let;\n    const name = this._scope.toName(nameOrPrefix);\n    return this._for(new ForRange(varKind, name, from, to), () => forBody(name));\n  }\n  // `for-of` statement (in es5 mode replace with a normal for loop)\n  forOf(nameOrPrefix, iterable, forBody) {\n    let varKind = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : scope_1.varKinds.const;\n    const name = this._scope.toName(nameOrPrefix);\n    if (this.opts.es5) {\n      const arr = iterable instanceof code_1.Name ? iterable : this.var(\"_arr\", iterable);\n      return this.forRange(\"_i\", 0, (0, code_1._)`${arr}.length`, i => {\n        this.var(name, (0, code_1._)`${arr}[${i}]`);\n        forBody(name);\n      });\n    }\n    return this._for(new ForIter(\"of\", varKind, name, iterable), () => forBody(name));\n  }\n  // `for-in` statement.\n  // With option `ownProperties` replaced with a `for-of` loop for object keys\n  forIn(nameOrPrefix, obj, forBody) {\n    let varKind = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this.opts.es5 ? scope_1.varKinds.var : scope_1.varKinds.const;\n    if (this.opts.ownProperties) {\n      return this.forOf(nameOrPrefix, (0, code_1._)`Object.keys(${obj})`, forBody);\n    }\n    const name = this._scope.toName(nameOrPrefix);\n    return this._for(new ForIter(\"in\", varKind, name, obj), () => forBody(name));\n  }\n  // end `for` loop\n  endFor() {\n    return this._endBlockNode(For);\n  }\n  // `label` statement\n  label(label) {\n    return this._leafNode(new Label(label));\n  }\n  // `break` statement\n  break(label) {\n    return this._leafNode(new Break(label));\n  }\n  // `return` statement\n  return(value) {\n    const node = new Return();\n    this._blockNode(node);\n    this.code(value);\n    if (node.nodes.length !== 1) throw new Error('CodeGen: \"return\" should have one node');\n    return this._endBlockNode(Return);\n  }\n  // `try` statement\n  try(tryBody, catchCode, finallyCode) {\n    if (!catchCode && !finallyCode) throw new Error('CodeGen: \"try\" without \"catch\" and \"finally\"');\n    const node = new Try();\n    this._blockNode(node);\n    this.code(tryBody);\n    if (catchCode) {\n      const error = this.name(\"e\");\n      this._currNode = node.catch = new Catch(error);\n      catchCode(error);\n    }\n    if (finallyCode) {\n      this._currNode = node.finally = new Finally();\n      this.code(finallyCode);\n    }\n    return this._endBlockNode(Catch, Finally);\n  }\n  // `throw` statement\n  throw(error) {\n    return this._leafNode(new Throw(error));\n  }\n  // start self-balancing block\n  block(body, nodeCount) {\n    this._blockStarts.push(this._nodes.length);\n    if (body) this.code(body).endBlock(nodeCount);\n    return this;\n  }\n  // end the current self-balancing block\n  endBlock(nodeCount) {\n    const len = this._blockStarts.pop();\n    if (len === undefined) throw new Error(\"CodeGen: not in self-balancing block\");\n    const toClose = this._nodes.length - len;\n    if (toClose < 0 || nodeCount !== undefined && toClose !== nodeCount) {\n      throw new Error(`CodeGen: wrong number of nodes: ${toClose} vs ${nodeCount} expected`);\n    }\n    this._nodes.length = len;\n    return this;\n  }\n  // `function` heading (or definition if funcBody is passed)\n  func(name) {\n    let args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : code_1.nil;\n    let async = arguments.length > 2 ? arguments[2] : undefined;\n    let funcBody = arguments.length > 3 ? arguments[3] : undefined;\n    this._blockNode(new Func(name, args, async));\n    if (funcBody) this.code(funcBody).endFunc();\n    return this;\n  }\n  // end function definition\n  endFunc() {\n    return this._endBlockNode(Func);\n  }\n  optimize() {\n    let n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    while (n-- > 0) {\n      this._root.optimizeNodes();\n      this._root.optimizeNames(this._root.names, this._constants);\n    }\n  }\n  _leafNode(node) {\n    this._currNode.nodes.push(node);\n    return this;\n  }\n  _blockNode(node) {\n    this._currNode.nodes.push(node);\n    this._nodes.push(node);\n  }\n  _endBlockNode(N1, N2) {\n    const n = this._currNode;\n    if (n instanceof N1 || N2 && n instanceof N2) {\n      this._nodes.pop();\n      return this;\n    }\n    throw new Error(`CodeGen: not in block \"${N2 ? `${N1.kind}/${N2.kind}` : N1.kind}\"`);\n  }\n  _elseNode(node) {\n    const n = this._currNode;\n    if (!(n instanceof If)) {\n      throw new Error('CodeGen: \"else\" without \"if\"');\n    }\n    this._currNode = n.else = node;\n    return this;\n  }\n  get _root() {\n    return this._nodes[0];\n  }\n  get _currNode() {\n    const ns = this._nodes;\n    return ns[ns.length - 1];\n  }\n  set _currNode(node) {\n    const ns = this._nodes;\n    ns[ns.length - 1] = node;\n  }\n}\nexports.CodeGen = CodeGen;\nfunction addNames(names, from) {\n  for (const n in from) names[n] = (names[n] || 0) + (from[n] || 0);\n  return names;\n}\nfunction addExprNames(names, from) {\n  return from instanceof code_1._CodeOrName ? addNames(names, from.names) : names;\n}\nfunction optimizeExpr(expr, names, constants) {\n  if (expr instanceof code_1.Name) return replaceName(expr);\n  if (!canOptimize(expr)) return expr;\n  return new code_1._Code(expr._items.reduce((items, c) => {\n    if (c instanceof code_1.Name) c = replaceName(c);\n    if (c instanceof code_1._Code) items.push(...c._items);else items.push(c);\n    return items;\n  }, []));\n  function replaceName(n) {\n    const c = constants[n.str];\n    if (c === undefined || names[n.str] !== 1) return n;\n    delete names[n.str];\n    return c;\n  }\n  function canOptimize(e) {\n    return e instanceof code_1._Code && e._items.some(c => c instanceof code_1.Name && names[c.str] === 1 && constants[c.str] !== undefined);\n  }\n}\nfunction subtractNames(names, from) {\n  for (const n in from) names[n] = (names[n] || 0) - (from[n] || 0);\n}\nfunction not(x) {\n  return typeof x == \"boolean\" || typeof x == \"number\" || x === null ? !x : (0, code_1._)`!${par(x)}`;\n}\nexports.not = not;\nconst andCode = mappend(exports.operators.AND);\n// boolean AND (&&) expression with the passed arguments\nfunction and() {\n  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n  return args.reduce(andCode);\n}\nexports.and = and;\nconst orCode = mappend(exports.operators.OR);\n// boolean OR (||) expression with the passed arguments\nfunction or() {\n  for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    args[_key3] = arguments[_key3];\n  }\n  return args.reduce(orCode);\n}\nexports.or = or;\nfunction mappend(op) {\n  return (x, y) => x === code_1.nil ? y : y === code_1.nil ? x : (0, code_1._)`${par(x)} ${op} ${par(y)}`;\n}\nfunction par(x) {\n  return x instanceof code_1.Name ? x : (0, code_1._)`(${x})`;\n}","map":{"version":3,"sources":["../../../lib/compile/codegen/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.or = exports.and = exports.not = exports.CodeGen = exports.operators = exports.varKinds = exports.ValueScopeName = exports.ValueScope = exports.Scope = exports.Name = exports.regexpCode = exports.stringify = exports.getProperty = exports.nil = exports.strConcat = exports.str = exports._ = void 0;\nconst code_1 = require(\"./code\");\nconst scope_1 = require(\"./scope\");\nvar code_2 = require(\"./code\");\nObject.defineProperty(exports, \"_\", { enumerable: true, get: function () { return code_2._; } });\nObject.defineProperty(exports, \"str\", { enumerable: true, get: function () { return code_2.str; } });\nObject.defineProperty(exports, \"strConcat\", { enumerable: true, get: function () { return code_2.strConcat; } });\nObject.defineProperty(exports, \"nil\", { enumerable: true, get: function () { return code_2.nil; } });\nObject.defineProperty(exports, \"getProperty\", { enumerable: true, get: function () { return code_2.getProperty; } });\nObject.defineProperty(exports, \"stringify\", { enumerable: true, get: function () { return code_2.stringify; } });\nObject.defineProperty(exports, \"regexpCode\", { enumerable: true, get: function () { return code_2.regexpCode; } });\nObject.defineProperty(exports, \"Name\", { enumerable: true, get: function () { return code_2.Name; } });\nvar scope_2 = require(\"./scope\");\nObject.defineProperty(exports, \"Scope\", { enumerable: true, get: function () { return scope_2.Scope; } });\nObject.defineProperty(exports, \"ValueScope\", { enumerable: true, get: function () { return scope_2.ValueScope; } });\nObject.defineProperty(exports, \"ValueScopeName\", { enumerable: true, get: function () { return scope_2.ValueScopeName; } });\nObject.defineProperty(exports, \"varKinds\", { enumerable: true, get: function () { return scope_2.varKinds; } });\nexports.operators = {\n    GT: new code_1._Code(\">\"),\n    GTE: new code_1._Code(\">=\"),\n    LT: new code_1._Code(\"<\"),\n    LTE: new code_1._Code(\"<=\"),\n    EQ: new code_1._Code(\"===\"),\n    NEQ: new code_1._Code(\"!==\"),\n    NOT: new code_1._Code(\"!\"),\n    OR: new code_1._Code(\"||\"),\n    AND: new code_1._Code(\"&&\"),\n    ADD: new code_1._Code(\"+\"),\n};\nclass Node {\n    optimizeNodes() {\n        return this;\n    }\n    optimizeNames(_names, _constants) {\n        return this;\n    }\n}\nclass Def extends Node {\n    constructor(varKind, name, rhs) {\n        super();\n        this.varKind = varKind;\n        this.name = name;\n        this.rhs = rhs;\n    }\n    render({ es5, _n }) {\n        const varKind = es5 ? scope_1.varKinds.var : this.varKind;\n        const rhs = this.rhs === undefined ? \"\" : ` = ${this.rhs}`;\n        return `${varKind} ${this.name}${rhs};` + _n;\n    }\n    optimizeNames(names, constants) {\n        if (!names[this.name.str])\n            return;\n        if (this.rhs)\n            this.rhs = optimizeExpr(this.rhs, names, constants);\n        return this;\n    }\n    get names() {\n        return this.rhs instanceof code_1._CodeOrName ? this.rhs.names : {};\n    }\n}\nclass Assign extends Node {\n    constructor(lhs, rhs, sideEffects) {\n        super();\n        this.lhs = lhs;\n        this.rhs = rhs;\n        this.sideEffects = sideEffects;\n    }\n    render({ _n }) {\n        return `${this.lhs} = ${this.rhs};` + _n;\n    }\n    optimizeNames(names, constants) {\n        if (this.lhs instanceof code_1.Name && !names[this.lhs.str] && !this.sideEffects)\n            return;\n        this.rhs = optimizeExpr(this.rhs, names, constants);\n        return this;\n    }\n    get names() {\n        const names = this.lhs instanceof code_1.Name ? {} : { ...this.lhs.names };\n        return addExprNames(names, this.rhs);\n    }\n}\nclass AssignOp extends Assign {\n    constructor(lhs, op, rhs, sideEffects) {\n        super(lhs, rhs, sideEffects);\n        this.op = op;\n    }\n    render({ _n }) {\n        return `${this.lhs} ${this.op}= ${this.rhs};` + _n;\n    }\n}\nclass Label extends Node {\n    constructor(label) {\n        super();\n        this.label = label;\n        this.names = {};\n    }\n    render({ _n }) {\n        return `${this.label}:` + _n;\n    }\n}\nclass Break extends Node {\n    constructor(label) {\n        super();\n        this.label = label;\n        this.names = {};\n    }\n    render({ _n }) {\n        const label = this.label ? ` ${this.label}` : \"\";\n        return `break${label};` + _n;\n    }\n}\nclass Throw extends Node {\n    constructor(error) {\n        super();\n        this.error = error;\n    }\n    render({ _n }) {\n        return `throw ${this.error};` + _n;\n    }\n    get names() {\n        return this.error.names;\n    }\n}\nclass AnyCode extends Node {\n    constructor(code) {\n        super();\n        this.code = code;\n    }\n    render({ _n }) {\n        return `${this.code};` + _n;\n    }\n    optimizeNodes() {\n        return `${this.code}` ? this : undefined;\n    }\n    optimizeNames(names, constants) {\n        this.code = optimizeExpr(this.code, names, constants);\n        return this;\n    }\n    get names() {\n        return this.code instanceof code_1._CodeOrName ? this.code.names : {};\n    }\n}\nclass ParentNode extends Node {\n    constructor(nodes = []) {\n        super();\n        this.nodes = nodes;\n    }\n    render(opts) {\n        return this.nodes.reduce((code, n) => code + n.render(opts), \"\");\n    }\n    optimizeNodes() {\n        const { nodes } = this;\n        let i = nodes.length;\n        while (i--) {\n            const n = nodes[i].optimizeNodes();\n            if (Array.isArray(n))\n                nodes.splice(i, 1, ...n);\n            else if (n)\n                nodes[i] = n;\n            else\n                nodes.splice(i, 1);\n        }\n        return nodes.length > 0 ? this : undefined;\n    }\n    optimizeNames(names, constants) {\n        const { nodes } = this;\n        let i = nodes.length;\n        while (i--) {\n            // iterating backwards improves 1-pass optimization\n            const n = nodes[i];\n            if (n.optimizeNames(names, constants))\n                continue;\n            subtractNames(names, n.names);\n            nodes.splice(i, 1);\n        }\n        return nodes.length > 0 ? this : undefined;\n    }\n    get names() {\n        return this.nodes.reduce((names, n) => addNames(names, n.names), {});\n    }\n}\nclass BlockNode extends ParentNode {\n    render(opts) {\n        return \"{\" + opts._n + super.render(opts) + \"}\" + opts._n;\n    }\n}\nclass Root extends ParentNode {\n}\nclass Else extends BlockNode {\n}\nElse.kind = \"else\";\nclass If extends BlockNode {\n    constructor(condition, nodes) {\n        super(nodes);\n        this.condition = condition;\n    }\n    render(opts) {\n        let code = `if(${this.condition})` + super.render(opts);\n        if (this.else)\n            code += \"else \" + this.else.render(opts);\n        return code;\n    }\n    optimizeNodes() {\n        super.optimizeNodes();\n        const cond = this.condition;\n        if (cond === true)\n            return this.nodes; // else is ignored here\n        let e = this.else;\n        if (e) {\n            const ns = e.optimizeNodes();\n            e = this.else = Array.isArray(ns) ? new Else(ns) : ns;\n        }\n        if (e) {\n            if (cond === false)\n                return e instanceof If ? e : e.nodes;\n            if (this.nodes.length)\n                return this;\n            return new If(not(cond), e instanceof If ? [e] : e.nodes);\n        }\n        if (cond === false || !this.nodes.length)\n            return undefined;\n        return this;\n    }\n    optimizeNames(names, constants) {\n        var _a;\n        this.else = (_a = this.else) === null || _a === void 0 ? void 0 : _a.optimizeNames(names, constants);\n        if (!(super.optimizeNames(names, constants) || this.else))\n            return;\n        this.condition = optimizeExpr(this.condition, names, constants);\n        return this;\n    }\n    get names() {\n        const names = super.names;\n        addExprNames(names, this.condition);\n        if (this.else)\n            addNames(names, this.else.names);\n        return names;\n    }\n}\nIf.kind = \"if\";\nclass For extends BlockNode {\n}\nFor.kind = \"for\";\nclass ForLoop extends For {\n    constructor(iteration) {\n        super();\n        this.iteration = iteration;\n    }\n    render(opts) {\n        return `for(${this.iteration})` + super.render(opts);\n    }\n    optimizeNames(names, constants) {\n        if (!super.optimizeNames(names, constants))\n            return;\n        this.iteration = optimizeExpr(this.iteration, names, constants);\n        return this;\n    }\n    get names() {\n        return addNames(super.names, this.iteration.names);\n    }\n}\nclass ForRange extends For {\n    constructor(varKind, name, from, to) {\n        super();\n        this.varKind = varKind;\n        this.name = name;\n        this.from = from;\n        this.to = to;\n    }\n    render(opts) {\n        const varKind = opts.es5 ? scope_1.varKinds.var : this.varKind;\n        const { name, from, to } = this;\n        return `for(${varKind} ${name}=${from}; ${name}<${to}; ${name}++)` + super.render(opts);\n    }\n    get names() {\n        const names = addExprNames(super.names, this.from);\n        return addExprNames(names, this.to);\n    }\n}\nclass ForIter extends For {\n    constructor(loop, varKind, name, iterable) {\n        super();\n        this.loop = loop;\n        this.varKind = varKind;\n        this.name = name;\n        this.iterable = iterable;\n    }\n    render(opts) {\n        return `for(${this.varKind} ${this.name} ${this.loop} ${this.iterable})` + super.render(opts);\n    }\n    optimizeNames(names, constants) {\n        if (!super.optimizeNames(names, constants))\n            return;\n        this.iterable = optimizeExpr(this.iterable, names, constants);\n        return this;\n    }\n    get names() {\n        return addNames(super.names, this.iterable.names);\n    }\n}\nclass Func extends BlockNode {\n    constructor(name, args, async) {\n        super();\n        this.name = name;\n        this.args = args;\n        this.async = async;\n    }\n    render(opts) {\n        const _async = this.async ? \"async \" : \"\";\n        return `${_async}function ${this.name}(${this.args})` + super.render(opts);\n    }\n}\nFunc.kind = \"func\";\nclass Return extends ParentNode {\n    render(opts) {\n        return \"return \" + super.render(opts);\n    }\n}\nReturn.kind = \"return\";\nclass Try extends BlockNode {\n    render(opts) {\n        let code = \"try\" + super.render(opts);\n        if (this.catch)\n            code += this.catch.render(opts);\n        if (this.finally)\n            code += this.finally.render(opts);\n        return code;\n    }\n    optimizeNodes() {\n        var _a, _b;\n        super.optimizeNodes();\n        (_a = this.catch) === null || _a === void 0 ? void 0 : _a.optimizeNodes();\n        (_b = this.finally) === null || _b === void 0 ? void 0 : _b.optimizeNodes();\n        return this;\n    }\n    optimizeNames(names, constants) {\n        var _a, _b;\n        super.optimizeNames(names, constants);\n        (_a = this.catch) === null || _a === void 0 ? void 0 : _a.optimizeNames(names, constants);\n        (_b = this.finally) === null || _b === void 0 ? void 0 : _b.optimizeNames(names, constants);\n        return this;\n    }\n    get names() {\n        const names = super.names;\n        if (this.catch)\n            addNames(names, this.catch.names);\n        if (this.finally)\n            addNames(names, this.finally.names);\n        return names;\n    }\n}\nclass Catch extends BlockNode {\n    constructor(error) {\n        super();\n        this.error = error;\n    }\n    render(opts) {\n        return `catch(${this.error})` + super.render(opts);\n    }\n}\nCatch.kind = \"catch\";\nclass Finally extends BlockNode {\n    render(opts) {\n        return \"finally\" + super.render(opts);\n    }\n}\nFinally.kind = \"finally\";\nclass CodeGen {\n    constructor(extScope, opts = {}) {\n        this._values = {};\n        this._blockStarts = [];\n        this._constants = {};\n        this.opts = { ...opts, _n: opts.lines ? \"\\n\" : \"\" };\n        this._extScope = extScope;\n        this._scope = new scope_1.Scope({ parent: extScope });\n        this._nodes = [new Root()];\n    }\n    toString() {\n        return this._root.render(this.opts);\n    }\n    // returns unique name in the internal scope\n    name(prefix) {\n        return this._scope.name(prefix);\n    }\n    // reserves unique name in the external scope\n    scopeName(prefix) {\n        return this._extScope.name(prefix);\n    }\n    // reserves unique name in the external scope and assigns value to it\n    scopeValue(prefixOrName, value) {\n        const name = this._extScope.value(prefixOrName, value);\n        const vs = this._values[name.prefix] || (this._values[name.prefix] = new Set());\n        vs.add(name);\n        return name;\n    }\n    getScopeValue(prefix, keyOrRef) {\n        return this._extScope.getValue(prefix, keyOrRef);\n    }\n    // return code that assigns values in the external scope to the names that are used internally\n    // (same names that were returned by gen.scopeName or gen.scopeValue)\n    scopeRefs(scopeName) {\n        return this._extScope.scopeRefs(scopeName, this._values);\n    }\n    scopeCode() {\n        return this._extScope.scopeCode(this._values);\n    }\n    _def(varKind, nameOrPrefix, rhs, constant) {\n        const name = this._scope.toName(nameOrPrefix);\n        if (rhs !== undefined && constant)\n            this._constants[name.str] = rhs;\n        this._leafNode(new Def(varKind, name, rhs));\n        return name;\n    }\n    // `const` declaration (`var` in es5 mode)\n    const(nameOrPrefix, rhs, _constant) {\n        return this._def(scope_1.varKinds.const, nameOrPrefix, rhs, _constant);\n    }\n    // `let` declaration with optional assignment (`var` in es5 mode)\n    let(nameOrPrefix, rhs, _constant) {\n        return this._def(scope_1.varKinds.let, nameOrPrefix, rhs, _constant);\n    }\n    // `var` declaration with optional assignment\n    var(nameOrPrefix, rhs, _constant) {\n        return this._def(scope_1.varKinds.var, nameOrPrefix, rhs, _constant);\n    }\n    // assignment code\n    assign(lhs, rhs, sideEffects) {\n        return this._leafNode(new Assign(lhs, rhs, sideEffects));\n    }\n    // `+=` code\n    add(lhs, rhs) {\n        return this._leafNode(new AssignOp(lhs, exports.operators.ADD, rhs));\n    }\n    // appends passed SafeExpr to code or executes Block\n    code(c) {\n        if (typeof c == \"function\")\n            c();\n        else if (c !== code_1.nil)\n            this._leafNode(new AnyCode(c));\n        return this;\n    }\n    // returns code for object literal for the passed argument list of key-value pairs\n    object(...keyValues) {\n        const code = [\"{\"];\n        for (const [key, value] of keyValues) {\n            if (code.length > 1)\n                code.push(\",\");\n            code.push(key);\n            if (key !== value || this.opts.es5) {\n                code.push(\":\");\n                (0, code_1.addCodeArg)(code, value);\n            }\n        }\n        code.push(\"}\");\n        return new code_1._Code(code);\n    }\n    // `if` clause (or statement if `thenBody` and, optionally, `elseBody` are passed)\n    if(condition, thenBody, elseBody) {\n        this._blockNode(new If(condition));\n        if (thenBody && elseBody) {\n            this.code(thenBody).else().code(elseBody).endIf();\n        }\n        else if (thenBody) {\n            this.code(thenBody).endIf();\n        }\n        else if (elseBody) {\n            throw new Error('CodeGen: \"else\" body without \"then\" body');\n        }\n        return this;\n    }\n    // `else if` clause - invalid without `if` or after `else` clauses\n    elseIf(condition) {\n        return this._elseNode(new If(condition));\n    }\n    // `else` clause - only valid after `if` or `else if` clauses\n    else() {\n        return this._elseNode(new Else());\n    }\n    // end `if` statement (needed if gen.if was used only with condition)\n    endIf() {\n        return this._endBlockNode(If, Else);\n    }\n    _for(node, forBody) {\n        this._blockNode(node);\n        if (forBody)\n            this.code(forBody).endFor();\n        return this;\n    }\n    // a generic `for` clause (or statement if `forBody` is passed)\n    for(iteration, forBody) {\n        return this._for(new ForLoop(iteration), forBody);\n    }\n    // `for` statement for a range of values\n    forRange(nameOrPrefix, from, to, forBody, varKind = this.opts.es5 ? scope_1.varKinds.var : scope_1.varKinds.let) {\n        const name = this._scope.toName(nameOrPrefix);\n        return this._for(new ForRange(varKind, name, from, to), () => forBody(name));\n    }\n    // `for-of` statement (in es5 mode replace with a normal for loop)\n    forOf(nameOrPrefix, iterable, forBody, varKind = scope_1.varKinds.const) {\n        const name = this._scope.toName(nameOrPrefix);\n        if (this.opts.es5) {\n            const arr = iterable instanceof code_1.Name ? iterable : this.var(\"_arr\", iterable);\n            return this.forRange(\"_i\", 0, (0, code_1._) `${arr}.length`, (i) => {\n                this.var(name, (0, code_1._) `${arr}[${i}]`);\n                forBody(name);\n            });\n        }\n        return this._for(new ForIter(\"of\", varKind, name, iterable), () => forBody(name));\n    }\n    // `for-in` statement.\n    // With option `ownProperties` replaced with a `for-of` loop for object keys\n    forIn(nameOrPrefix, obj, forBody, varKind = this.opts.es5 ? scope_1.varKinds.var : scope_1.varKinds.const) {\n        if (this.opts.ownProperties) {\n            return this.forOf(nameOrPrefix, (0, code_1._) `Object.keys(${obj})`, forBody);\n        }\n        const name = this._scope.toName(nameOrPrefix);\n        return this._for(new ForIter(\"in\", varKind, name, obj), () => forBody(name));\n    }\n    // end `for` loop\n    endFor() {\n        return this._endBlockNode(For);\n    }\n    // `label` statement\n    label(label) {\n        return this._leafNode(new Label(label));\n    }\n    // `break` statement\n    break(label) {\n        return this._leafNode(new Break(label));\n    }\n    // `return` statement\n    return(value) {\n        const node = new Return();\n        this._blockNode(node);\n        this.code(value);\n        if (node.nodes.length !== 1)\n            throw new Error('CodeGen: \"return\" should have one node');\n        return this._endBlockNode(Return);\n    }\n    // `try` statement\n    try(tryBody, catchCode, finallyCode) {\n        if (!catchCode && !finallyCode)\n            throw new Error('CodeGen: \"try\" without \"catch\" and \"finally\"');\n        const node = new Try();\n        this._blockNode(node);\n        this.code(tryBody);\n        if (catchCode) {\n            const error = this.name(\"e\");\n            this._currNode = node.catch = new Catch(error);\n            catchCode(error);\n        }\n        if (finallyCode) {\n            this._currNode = node.finally = new Finally();\n            this.code(finallyCode);\n        }\n        return this._endBlockNode(Catch, Finally);\n    }\n    // `throw` statement\n    throw(error) {\n        return this._leafNode(new Throw(error));\n    }\n    // start self-balancing block\n    block(body, nodeCount) {\n        this._blockStarts.push(this._nodes.length);\n        if (body)\n            this.code(body).endBlock(nodeCount);\n        return this;\n    }\n    // end the current self-balancing block\n    endBlock(nodeCount) {\n        const len = this._blockStarts.pop();\n        if (len === undefined)\n            throw new Error(\"CodeGen: not in self-balancing block\");\n        const toClose = this._nodes.length - len;\n        if (toClose < 0 || (nodeCount !== undefined && toClose !== nodeCount)) {\n            throw new Error(`CodeGen: wrong number of nodes: ${toClose} vs ${nodeCount} expected`);\n        }\n        this._nodes.length = len;\n        return this;\n    }\n    // `function` heading (or definition if funcBody is passed)\n    func(name, args = code_1.nil, async, funcBody) {\n        this._blockNode(new Func(name, args, async));\n        if (funcBody)\n            this.code(funcBody).endFunc();\n        return this;\n    }\n    // end function definition\n    endFunc() {\n        return this._endBlockNode(Func);\n    }\n    optimize(n = 1) {\n        while (n-- > 0) {\n            this._root.optimizeNodes();\n            this._root.optimizeNames(this._root.names, this._constants);\n        }\n    }\n    _leafNode(node) {\n        this._currNode.nodes.push(node);\n        return this;\n    }\n    _blockNode(node) {\n        this._currNode.nodes.push(node);\n        this._nodes.push(node);\n    }\n    _endBlockNode(N1, N2) {\n        const n = this._currNode;\n        if (n instanceof N1 || (N2 && n instanceof N2)) {\n            this._nodes.pop();\n            return this;\n        }\n        throw new Error(`CodeGen: not in block \"${N2 ? `${N1.kind}/${N2.kind}` : N1.kind}\"`);\n    }\n    _elseNode(node) {\n        const n = this._currNode;\n        if (!(n instanceof If)) {\n            throw new Error('CodeGen: \"else\" without \"if\"');\n        }\n        this._currNode = n.else = node;\n        return this;\n    }\n    get _root() {\n        return this._nodes[0];\n    }\n    get _currNode() {\n        const ns = this._nodes;\n        return ns[ns.length - 1];\n    }\n    set _currNode(node) {\n        const ns = this._nodes;\n        ns[ns.length - 1] = node;\n    }\n}\nexports.CodeGen = CodeGen;\nfunction addNames(names, from) {\n    for (const n in from)\n        names[n] = (names[n] || 0) + (from[n] || 0);\n    return names;\n}\nfunction addExprNames(names, from) {\n    return from instanceof code_1._CodeOrName ? addNames(names, from.names) : names;\n}\nfunction optimizeExpr(expr, names, constants) {\n    if (expr instanceof code_1.Name)\n        return replaceName(expr);\n    if (!canOptimize(expr))\n        return expr;\n    return new code_1._Code(expr._items.reduce((items, c) => {\n        if (c instanceof code_1.Name)\n            c = replaceName(c);\n        if (c instanceof code_1._Code)\n            items.push(...c._items);\n        else\n            items.push(c);\n        return items;\n    }, []));\n    function replaceName(n) {\n        const c = constants[n.str];\n        if (c === undefined || names[n.str] !== 1)\n            return n;\n        delete names[n.str];\n        return c;\n    }\n    function canOptimize(e) {\n        return (e instanceof code_1._Code &&\n            e._items.some((c) => c instanceof code_1.Name && names[c.str] === 1 && constants[c.str] !== undefined));\n    }\n}\nfunction subtractNames(names, from) {\n    for (const n in from)\n        names[n] = (names[n] || 0) - (from[n] || 0);\n}\nfunction not(x) {\n    return typeof x == \"boolean\" || typeof x == \"number\" || x === null ? !x : (0, code_1._) `!${par(x)}`;\n}\nexports.not = not;\nconst andCode = mappend(exports.operators.AND);\n// boolean AND (&&) expression with the passed arguments\nfunction and(...args) {\n    return args.reduce(andCode);\n}\nexports.and = and;\nconst orCode = mappend(exports.operators.OR);\n// boolean OR (||) expression with the passed arguments\nfunction or(...args) {\n    return args.reduce(orCode);\n}\nexports.or = or;\nfunction mappend(op) {\n    return (x, y) => (x === code_1.nil ? y : y === code_1.nil ? x : (0, code_1._) `${par(x)} ${op} ${par(y)}`);\n}\nfunction par(x) {\n    return x instanceof code_1.Name ? x : (0, code_1._) `(${x})`;\n}\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}