{"ast":null,"code":"import _objectSpread from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { getCurrentHub } from '@sentry/core';\nimport { addInstrumentationHandler, htmlTreeAsString, severityLevelFromString, safeJoin, parseUrl } from '@sentry/utils';\nimport { WINDOW } from '../helpers.js';\n\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n\n/** JSDoc */\n\nvar BREADCRUMB_INTEGRATION_ID = 'Breadcrumbs';\n\n/**\n * Default Breadcrumbs instrumentations\n * TODO: Deprecated - with v6, this will be renamed to `Instrument`\n */\nvar Breadcrumbs = /*#__PURE__*/function () {\n  /**\n   * Options of the breadcrumbs integration.\n   */\n  // This field is public, because we use it in the browser client to check if the `sentry` option is enabled.\n\n  /**\n   * @inheritDoc\n   */\n  function Breadcrumbs(options) {\n    _classCallCheck(this, Breadcrumbs);\n    ;\n    Breadcrumbs.prototype.__init.call(this);\n    this.options = _objectSpread({\n      console: true,\n      dom: true,\n      fetch: true,\n      history: true,\n      sentry: true,\n      xhr: true\n    }, options);\n  }\n\n  /**\n   * Instrument browser built-ins w/ breadcrumb capturing\n   *  - Console API\n   *  - DOM API (click/typing)\n   *  - XMLHttpRequest API\n   *  - Fetch API\n   *  - History API\n   */\n  _createClass(Breadcrumbs, [{\n    key: \"__init\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __init() {\n      this.name = Breadcrumbs.id;\n    }\n  }, {\n    key: \"setupOnce\",\n    value: function setupOnce() {\n      if (this.options.console) {\n        addInstrumentationHandler('console', _consoleBreadcrumb);\n      }\n      if (this.options.dom) {\n        addInstrumentationHandler('dom', _domBreadcrumb(this.options.dom));\n      }\n      if (this.options.xhr) {\n        addInstrumentationHandler('xhr', _xhrBreadcrumb);\n      }\n      if (this.options.fetch) {\n        addInstrumentationHandler('fetch', _fetchBreadcrumb);\n      }\n      if (this.options.history) {\n        addInstrumentationHandler('history', _historyBreadcrumb);\n      }\n    }\n  }], [{\n    key: \"__initStatic\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __initStatic() {\n      this.id = BREADCRUMB_INTEGRATION_ID;\n    }\n  }]);\n  return Breadcrumbs;\n}();\nBreadcrumbs.__initStatic();\n\n/**\n * A HOC that creaes a function that creates breadcrumbs from DOM API calls.\n * This is a HOC so that we get access to dom options in the closure.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _domBreadcrumb(dom) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  function _innerDomBreadcrumb(handlerData) {\n    var target;\n    var keyAttrs = typeof dom === 'object' ? dom.serializeAttribute : undefined;\n    if (typeof keyAttrs === 'string') {\n      keyAttrs = [keyAttrs];\n    }\n\n    // Accessing event.target can throw (see getsentry/raven-js#838, #768)\n    try {\n      target = handlerData.event.target ? htmlTreeAsString(handlerData.event.target, keyAttrs) : htmlTreeAsString(handlerData.event, keyAttrs);\n    } catch (e) {\n      target = '<unknown>';\n    }\n    if (target.length === 0) {\n      return;\n    }\n    getCurrentHub().addBreadcrumb({\n      category: \"ui.\".concat(handlerData.name),\n      message: target\n    }, {\n      event: handlerData.event,\n      name: handlerData.name,\n      global: handlerData.global\n    });\n  }\n  return _innerDomBreadcrumb;\n}\n\n/**\n * Creates breadcrumbs from console API calls\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _consoleBreadcrumb(handlerData) {\n  // This is a hack to fix a Vue3-specific bug that causes an infinite loop of\n  // console warnings. This happens when a Vue template is rendered with\n  // an undeclared variable, which we try to stringify, ultimately causing\n  // Vue to issue another warning which repeats indefinitely.\n  // see: https://github.com/getsentry/sentry-javascript/pull/6010\n  // see: https://github.com/getsentry/sentry-javascript/issues/5916\n  for (var i = 0; i < handlerData.args.length; i++) {\n    if (handlerData.args[i] === 'ref=Ref<') {\n      handlerData.args[i + 1] = 'viewRef';\n      break;\n    }\n  }\n  var breadcrumb = {\n    category: 'console',\n    data: {\n      arguments: handlerData.args,\n      logger: 'console'\n    },\n    level: severityLevelFromString(handlerData.level),\n    message: safeJoin(handlerData.args, ' ')\n  };\n  if (handlerData.level === 'assert') {\n    if (handlerData.args[0] === false) {\n      breadcrumb.message = \"Assertion failed: \".concat(safeJoin(handlerData.args.slice(1), ' ') || 'console.assert');\n      breadcrumb.data.arguments = handlerData.args.slice(1);\n    } else {\n      // Don't capture a breadcrumb for passed assertions\n      return;\n    }\n  }\n  getCurrentHub().addBreadcrumb(breadcrumb, {\n    input: handlerData.args,\n    level: handlerData.level\n  });\n}\n\n/**\n * Creates breadcrumbs from XHR API calls\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _xhrBreadcrumb(handlerData) {\n  if (handlerData.endTimestamp) {\n    // We only capture complete, non-sentry requests\n    if (handlerData.xhr.__sentry_own_request__) {\n      return;\n    }\n    var _ref = handlerData.xhr.__sentry_xhr__ || {},\n      method = _ref.method,\n      url = _ref.url,\n      status_code = _ref.status_code,\n      body = _ref.body;\n    getCurrentHub().addBreadcrumb({\n      category: 'xhr',\n      data: {\n        method: method,\n        url: url,\n        status_code: status_code\n      },\n      type: 'http'\n    }, {\n      xhr: handlerData.xhr,\n      input: body\n    });\n    return;\n  }\n}\n\n/**\n * Creates breadcrumbs from fetch API calls\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _fetchBreadcrumb(handlerData) {\n  // We only capture complete fetch requests\n  if (!handlerData.endTimestamp) {\n    return;\n  }\n  if (handlerData.fetchData.url.match(/sentry_key/) && handlerData.fetchData.method === 'POST') {\n    // We will not create breadcrumbs for fetch requests that contain `sentry_key` (internal sentry requests)\n    return;\n  }\n  if (handlerData.error) {\n    getCurrentHub().addBreadcrumb({\n      category: 'fetch',\n      data: handlerData.fetchData,\n      level: 'error',\n      type: 'http'\n    }, {\n      data: handlerData.error,\n      input: handlerData.args\n    });\n  } else {\n    getCurrentHub().addBreadcrumb({\n      category: 'fetch',\n      data: _objectSpread(_objectSpread({}, handlerData.fetchData), {}, {\n        status_code: handlerData.response.status\n      }),\n      type: 'http'\n    }, {\n      input: handlerData.args,\n      response: handlerData.response\n    });\n  }\n}\n\n/**\n * Creates breadcrumbs from history API calls\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _historyBreadcrumb(handlerData) {\n  var from = handlerData.from;\n  var to = handlerData.to;\n  var parsedLoc = parseUrl(WINDOW.location.href);\n  var parsedFrom = parseUrl(from);\n  var parsedTo = parseUrl(to);\n\n  // Initial pushState doesn't provide `from` information\n  if (!parsedFrom.path) {\n    parsedFrom = parsedLoc;\n  }\n\n  // Use only the path component of the URL if the URL matches the current\n  // document (almost all the time when using pushState)\n  if (parsedLoc.protocol === parsedTo.protocol && parsedLoc.host === parsedTo.host) {\n    to = parsedTo.relative;\n  }\n  if (parsedLoc.protocol === parsedFrom.protocol && parsedLoc.host === parsedFrom.host) {\n    from = parsedFrom.relative;\n  }\n  getCurrentHub().addBreadcrumb({\n    category: 'navigation',\n    data: {\n      from: from,\n      to: to\n    }\n  });\n}\nexport { BREADCRUMB_INTEGRATION_ID, Breadcrumbs };","map":{"version":3,"sources":["../../../../src/integrations/breadcrumbs.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable max-lines */\nimport { getCurrentHub } from '@sentry/core';\nimport { Integration } from '@sentry/types';\nimport {\n  addInstrumentationHandler,\n  htmlTreeAsString,\n  parseUrl,\n  safeJoin,\n  severityLevelFromString,\n} from '@sentry/utils';\n\nimport { WINDOW } from '../helpers';\n\n/** JSDoc */\ninterface BreadcrumbsOptions {\n  console: boolean;\n  dom: boolean | { serializeAttribute: string | string[] };\n  fetch: boolean;\n  history: boolean;\n  sentry: boolean;\n  xhr: boolean;\n}\n\nexport const BREADCRUMB_INTEGRATION_ID = 'Breadcrumbs';\n\n/**\n * Default Breadcrumbs instrumentations\n * TODO: Deprecated - with v6, this will be renamed to `Instrument`\n */\nexport class Breadcrumbs implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = BREADCRUMB_INTEGRATION_ID;\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Breadcrumbs.id;\n\n  /**\n   * Options of the breadcrumbs integration.\n   */\n  // This field is public, because we use it in the browser client to check if the `sentry` option is enabled.\n  public readonly options: Readonly<BreadcrumbsOptions>;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options?: Partial<BreadcrumbsOptions>) {\n    this.options = {\n      console: true,\n      dom: true,\n      fetch: true,\n      history: true,\n      sentry: true,\n      xhr: true,\n      ...options,\n    };\n  }\n\n  /**\n   * Instrument browser built-ins w/ breadcrumb capturing\n   *  - Console API\n   *  - DOM API (click/typing)\n   *  - XMLHttpRequest API\n   *  - Fetch API\n   *  - History API\n   */\n  public setupOnce(): void {\n    if (this.options.console) {\n      addInstrumentationHandler('console', _consoleBreadcrumb);\n    }\n    if (this.options.dom) {\n      addInstrumentationHandler('dom', _domBreadcrumb(this.options.dom));\n    }\n    if (this.options.xhr) {\n      addInstrumentationHandler('xhr', _xhrBreadcrumb);\n    }\n    if (this.options.fetch) {\n      addInstrumentationHandler('fetch', _fetchBreadcrumb);\n    }\n    if (this.options.history) {\n      addInstrumentationHandler('history', _historyBreadcrumb);\n    }\n  }\n}\n\n/**\n * A HOC that creaes a function that creates breadcrumbs from DOM API calls.\n * This is a HOC so that we get access to dom options in the closure.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _domBreadcrumb(dom: BreadcrumbsOptions['dom']): (handlerData: { [key: string]: any }) => void {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  function _innerDomBreadcrumb(handlerData: { [key: string]: any }): void {\n    let target;\n    let keyAttrs = typeof dom === 'object' ? dom.serializeAttribute : undefined;\n\n    if (typeof keyAttrs === 'string') {\n      keyAttrs = [keyAttrs];\n    }\n\n    // Accessing event.target can throw (see getsentry/raven-js#838, #768)\n    try {\n      target = handlerData.event.target\n        ? htmlTreeAsString(handlerData.event.target as Node, keyAttrs)\n        : htmlTreeAsString(handlerData.event as unknown as Node, keyAttrs);\n    } catch (e) {\n      target = '<unknown>';\n    }\n\n    if (target.length === 0) {\n      return;\n    }\n\n    getCurrentHub().addBreadcrumb(\n      {\n        category: `ui.${handlerData.name}`,\n        message: target,\n      },\n      {\n        event: handlerData.event,\n        name: handlerData.name,\n        global: handlerData.global,\n      },\n    );\n  }\n\n  return _innerDomBreadcrumb;\n}\n\n/**\n * Creates breadcrumbs from console API calls\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _consoleBreadcrumb(handlerData: { [key: string]: any }): void {\n  // This is a hack to fix a Vue3-specific bug that causes an infinite loop of\n  // console warnings. This happens when a Vue template is rendered with\n  // an undeclared variable, which we try to stringify, ultimately causing\n  // Vue to issue another warning which repeats indefinitely.\n  // see: https://github.com/getsentry/sentry-javascript/pull/6010\n  // see: https://github.com/getsentry/sentry-javascript/issues/5916\n  for (let i = 0; i < handlerData.args.length; i++) {\n    if (handlerData.args[i] === 'ref=Ref<') {\n      handlerData.args[i + 1] = 'viewRef';\n      break;\n    }\n  }\n  const breadcrumb = {\n    category: 'console',\n    data: {\n      arguments: handlerData.args,\n      logger: 'console',\n    },\n    level: severityLevelFromString(handlerData.level),\n    message: safeJoin(handlerData.args, ' '),\n  };\n\n  if (handlerData.level === 'assert') {\n    if (handlerData.args[0] === false) {\n      breadcrumb.message = `Assertion failed: ${safeJoin(handlerData.args.slice(1), ' ') || 'console.assert'}`;\n      breadcrumb.data.arguments = handlerData.args.slice(1);\n    } else {\n      // Don't capture a breadcrumb for passed assertions\n      return;\n    }\n  }\n\n  getCurrentHub().addBreadcrumb(breadcrumb, {\n    input: handlerData.args,\n    level: handlerData.level,\n  });\n}\n\n/**\n * Creates breadcrumbs from XHR API calls\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _xhrBreadcrumb(handlerData: { [key: string]: any }): void {\n  if (handlerData.endTimestamp) {\n    // We only capture complete, non-sentry requests\n    if (handlerData.xhr.__sentry_own_request__) {\n      return;\n    }\n\n    const { method, url, status_code, body } = handlerData.xhr.__sentry_xhr__ || {};\n\n    getCurrentHub().addBreadcrumb(\n      {\n        category: 'xhr',\n        data: {\n          method,\n          url,\n          status_code,\n        },\n        type: 'http',\n      },\n      {\n        xhr: handlerData.xhr,\n        input: body,\n      },\n    );\n\n    return;\n  }\n}\n\n/**\n * Creates breadcrumbs from fetch API calls\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _fetchBreadcrumb(handlerData: { [key: string]: any }): void {\n  // We only capture complete fetch requests\n  if (!handlerData.endTimestamp) {\n    return;\n  }\n\n  if (handlerData.fetchData.url.match(/sentry_key/) && handlerData.fetchData.method === 'POST') {\n    // We will not create breadcrumbs for fetch requests that contain `sentry_key` (internal sentry requests)\n    return;\n  }\n\n  if (handlerData.error) {\n    getCurrentHub().addBreadcrumb(\n      {\n        category: 'fetch',\n        data: handlerData.fetchData,\n        level: 'error',\n        type: 'http',\n      },\n      {\n        data: handlerData.error,\n        input: handlerData.args,\n      },\n    );\n  } else {\n    getCurrentHub().addBreadcrumb(\n      {\n        category: 'fetch',\n        data: {\n          ...handlerData.fetchData,\n          status_code: handlerData.response.status,\n        },\n        type: 'http',\n      },\n      {\n        input: handlerData.args,\n        response: handlerData.response,\n      },\n    );\n  }\n}\n\n/**\n * Creates breadcrumbs from history API calls\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _historyBreadcrumb(handlerData: { [key: string]: any }): void {\n  let from = handlerData.from;\n  let to = handlerData.to;\n  const parsedLoc = parseUrl(WINDOW.location.href);\n  let parsedFrom = parseUrl(from);\n  const parsedTo = parseUrl(to);\n\n  // Initial pushState doesn't provide `from` information\n  if (!parsedFrom.path) {\n    parsedFrom = parsedLoc;\n  }\n\n  // Use only the path component of the URL if the URL matches the current\n  // document (almost all the time when using pushState)\n  if (parsedLoc.protocol === parsedTo.protocol && parsedLoc.host === parsedTo.host) {\n    to = parsedTo.relative;\n  }\n  if (parsedLoc.protocol === parsedFrom.protocol && parsedLoc.host === parsedFrom.host) {\n    from = parsedFrom.relative;\n  }\n\n  getCurrentHub().addBreadcrumb({\n    category: 'navigation',\n    data: {\n      from,\n      to,\n    },\n  });\n}\n"]},"metadata":{},"sourceType":"module"}