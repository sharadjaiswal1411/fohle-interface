{"ast":null,"code":"import _objectSpread from\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{SwapRouter}from'@uniswap/router-sdk';import{useWeb3React}from'@web3-react/core';import{SWAP_ROUTER_ADDRESSES}from'constants/addresses';import{useMemo}from'react';import approveAmountCalldata from'utils/approveAmountCalldata';import{useArgentWalletContract}from'./useArgentWalletContract';import useENS from'./useENS';/**\n * Returns the swap calls that can be used to make the trade\n * @param trade trade to execute\n * @param allowedSlippage user allowed slippage\n * @param recipientAddressOrName the ENS name or address of the recipient of the swap output\n * @param signatureData the signature data of the permit of the input token amount, if available\n */export function useSwapCallArguments(trade,allowedSlippage,recipientAddressOrName,signatureData,deadline,feeOptions){var _useWeb3React=useWeb3React(),account=_useWeb3React.account,chainId=_useWeb3React.chainId,provider=_useWeb3React.provider;var _useENS=useENS(recipientAddressOrName),recipientAddress=_useENS.address;var recipient=recipientAddressOrName===null?account:recipientAddress;var argentWalletContract=useArgentWalletContract();return useMemo(function(){if(!trade||!recipient||!provider||!account||!chainId||!deadline)return[];var swapRouterAddress=chainId?SWAP_ROUTER_ADDRESSES[chainId]:undefined;if(!swapRouterAddress)return[];var _SwapRouter$swapCallP=SwapRouter.swapCallParameters(trade,_objectSpread(_objectSpread({fee:feeOptions,recipient:recipient,slippageTolerance:allowedSlippage},signatureData?{inputTokenPermit:'allowed'in signatureData?{expiry:signatureData.deadline,nonce:signatureData.nonce,s:signatureData.s,r:signatureData.r,v:signatureData.v}:{deadline:signatureData.deadline,amount:signatureData.amount,s:signatureData.s,r:signatureData.r,v:signatureData.v}}:{}),{},{deadlineOrPreviousBlockhash:deadline.toString()})),value=_SwapRouter$swapCallP.value,calldata=_SwapRouter$swapCallP.calldata;if(argentWalletContract&&trade.inputAmount.currency.isToken){return[{address:argentWalletContract.address,calldata:argentWalletContract.interface.encodeFunctionData('wc_multiCall',[[approveAmountCalldata(trade.maximumAmountIn(allowedSlippage),swapRouterAddress),{to:swapRouterAddress,value:value,data:calldata}]]),value:'0x0'}];}return[{address:swapRouterAddress,calldata:calldata,value:value}];},[account,allowedSlippage,argentWalletContract,chainId,deadline,feeOptions,provider,recipient,signatureData,trade]);}","map":{"version":3,"names":["SwapRouter","useWeb3React","SWAP_ROUTER_ADDRESSES","useMemo","approveAmountCalldata","useArgentWalletContract","useENS","useSwapCallArguments","trade","allowedSlippage","recipientAddressOrName","signatureData","deadline","feeOptions","account","chainId","provider","recipientAddress","address","recipient","argentWalletContract","swapRouterAddress","undefined","swapCallParameters","fee","slippageTolerance","inputTokenPermit","expiry","nonce","s","r","v","amount","deadlineOrPreviousBlockhash","toString","value","calldata","inputAmount","currency","isToken","interface","encodeFunctionData","maximumAmountIn","to","data"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/hooks/useSwapCallArguments.tsx"],"sourcesContent":["import { BigNumber } from '@ethersproject/bignumber'\nimport { SwapRouter, Trade } from '@uniswap/router-sdk'\nimport { Currency, Percent, TradeType } from '@uniswap/sdk-core'\nimport { FeeOptions } from '@uniswap/v3-sdk'\nimport { useWeb3React } from '@web3-react/core'\nimport { SWAP_ROUTER_ADDRESSES } from 'constants/addresses'\nimport { useMemo } from 'react'\nimport approveAmountCalldata from 'utils/approveAmountCalldata'\n\nimport { useArgentWalletContract } from './useArgentWalletContract'\nimport useENS from './useENS'\nimport { SignatureData } from './useERC20Permit'\n\ninterface SwapCall {\n  address: string\n  calldata: string\n  value: string\n}\n\n/**\n * Returns the swap calls that can be used to make the trade\n * @param trade trade to execute\n * @param allowedSlippage user allowed slippage\n * @param recipientAddressOrName the ENS name or address of the recipient of the swap output\n * @param signatureData the signature data of the permit of the input token amount, if available\n */\nexport function useSwapCallArguments(\n  trade: Trade<Currency, Currency, TradeType> | undefined,\n  allowedSlippage: Percent,\n  recipientAddressOrName: string | null | undefined,\n  signatureData: SignatureData | null | undefined,\n  deadline: BigNumber | undefined,\n  feeOptions: FeeOptions | undefined\n): SwapCall[] {\n  const { account, chainId, provider } = useWeb3React()\n\n  const { address: recipientAddress } = useENS(recipientAddressOrName)\n  const recipient = recipientAddressOrName === null ? account : recipientAddress\n  const argentWalletContract = useArgentWalletContract()\n\n  return useMemo(() => {\n    if (!trade || !recipient || !provider || !account || !chainId || !deadline) return []\n\n    const swapRouterAddress = chainId ? SWAP_ROUTER_ADDRESSES[chainId] : undefined\n    if (!swapRouterAddress) return []\n\n    const { value, calldata } = SwapRouter.swapCallParameters(trade, {\n      fee: feeOptions,\n      recipient,\n      slippageTolerance: allowedSlippage,\n      ...(signatureData\n        ? {\n            inputTokenPermit:\n              'allowed' in signatureData\n                ? {\n                    expiry: signatureData.deadline,\n                    nonce: signatureData.nonce,\n                    s: signatureData.s,\n                    r: signatureData.r,\n                    v: signatureData.v as any,\n                  }\n                : {\n                    deadline: signatureData.deadline,\n                    amount: signatureData.amount,\n                    s: signatureData.s,\n                    r: signatureData.r,\n                    v: signatureData.v as any,\n                  },\n          }\n        : {}),\n\n      deadlineOrPreviousBlockhash: deadline.toString(),\n    })\n\n    if (argentWalletContract && trade.inputAmount.currency.isToken) {\n      return [\n        {\n          address: argentWalletContract.address,\n          calldata: argentWalletContract.interface.encodeFunctionData('wc_multiCall', [\n            [\n              approveAmountCalldata(trade.maximumAmountIn(allowedSlippage), swapRouterAddress),\n              {\n                to: swapRouterAddress,\n                value,\n                data: calldata,\n              },\n            ],\n          ]),\n          value: '0x0',\n        },\n      ]\n    }\n    return [\n      {\n        address: swapRouterAddress,\n        calldata,\n        value,\n      },\n    ]\n  }, [\n    account,\n    allowedSlippage,\n    argentWalletContract,\n    chainId,\n    deadline,\n    feeOptions,\n    provider,\n    recipient,\n    signatureData,\n    trade,\n  ])\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}