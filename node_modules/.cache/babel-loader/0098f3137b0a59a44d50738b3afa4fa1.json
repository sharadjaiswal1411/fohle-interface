{"ast":null,"code":"var _s = $RefreshSig$();\nimport { usePoolDatas } from 'data/pools/poolData';\nimport { useTopPoolAddresses } from 'data/pools/topPools';\nimport { useEffect, useMemo } from 'react';\nimport { useActiveNetworkVersion } from 'state/application/hooks';\nimport { POOL_HIDE } from '../../constants';\nimport { useAddPoolKeys, useAllPoolData, useUpdatePoolData } from './hooks';\nexport default function Updater() {\n  _s();\n  // updaters\n  const [currentNetwork] = useActiveNetworkVersion();\n  const updatePoolData = useUpdatePoolData();\n  const addPoolKeys = useAddPoolKeys();\n\n  // data\n  const allPoolData = useAllPoolData();\n  const {\n    loading,\n    error,\n    addresses\n  } = useTopPoolAddresses();\n\n  // add top pools on first load\n  useEffect(() => {\n    if (addresses && !error && !loading) {\n      addPoolKeys(addresses);\n    }\n  }, [addPoolKeys, addresses, error, loading]);\n\n  // load data for pools we need to hide\n  useEffect(() => {\n    addPoolKeys(POOL_HIDE[currentNetwork.id]);\n  }, [addPoolKeys, currentNetwork.id]);\n\n  // detect for which addresses we havent loaded pool data yet\n  const unfetchedPoolAddresses = useMemo(() => {\n    return Object.keys(allPoolData).reduce((accum, key) => {\n      const poolData = allPoolData[key];\n      if (!poolData.data || !poolData.lastUpdated) {\n        accum.push(key);\n      }\n      return accum;\n    }, []);\n  }, [allPoolData]);\n\n  // update unloaded pool entries with fetched data\n  const {\n    error: poolDataError,\n    loading: poolDataLoading,\n    data: poolDatas\n  } = usePoolDatas(unfetchedPoolAddresses);\n  useEffect(() => {\n    if (poolDatas && !poolDataError && !poolDataLoading) {\n      updatePoolData(Object.values(poolDatas));\n    }\n  }, [poolDataError, poolDataLoading, poolDatas, updatePoolData]);\n  return null;\n}\n_s(Updater, \"SHByBGl+dUwVCmuN0r9m3qPxECM=\", false, function () {\n  return [useActiveNetworkVersion, useUpdatePoolData, useAddPoolKeys, useAllPoolData, useTopPoolAddresses, usePoolDatas];\n});\n_c = Updater;\nvar _c;\n$RefreshReg$(_c, \"Updater\");","map":{"version":3,"names":["usePoolDatas","useTopPoolAddresses","useEffect","useMemo","useActiveNetworkVersion","POOL_HIDE","useAddPoolKeys","useAllPoolData","useUpdatePoolData","Updater","currentNetwork","updatePoolData","addPoolKeys","allPoolData","loading","error","addresses","id","unfetchedPoolAddresses","Object","keys","reduce","accum","key","poolData","data","lastUpdated","push","poolDataError","poolDataLoading","poolDatas","values"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/state/pools/updater.ts"],"sourcesContent":["import { usePoolDatas } from 'data/pools/poolData'\nimport { useTopPoolAddresses } from 'data/pools/topPools'\nimport { useEffect, useMemo } from 'react'\nimport { useActiveNetworkVersion } from 'state/application/hooks'\n\nimport { POOL_HIDE } from '../../constants'\nimport { useAddPoolKeys, useAllPoolData, useUpdatePoolData } from './hooks'\n\nexport default function Updater(): null {\n  // updaters\n  const [currentNetwork] = useActiveNetworkVersion()\n  const updatePoolData = useUpdatePoolData()\n  const addPoolKeys = useAddPoolKeys()\n\n  // data\n  const allPoolData = useAllPoolData()\n  const { loading, error, addresses } = useTopPoolAddresses()\n\n  // add top pools on first load\n  useEffect(() => {\n    if (addresses && !error && !loading) {\n      addPoolKeys(addresses)\n    }\n  }, [addPoolKeys, addresses, error, loading])\n\n  // load data for pools we need to hide\n  useEffect(() => {\n    addPoolKeys(POOL_HIDE[currentNetwork.id])\n  }, [addPoolKeys, currentNetwork.id])\n\n  // detect for which addresses we havent loaded pool data yet\n  const unfetchedPoolAddresses = useMemo(() => {\n    return Object.keys(allPoolData).reduce((accum: string[], key) => {\n      const poolData = allPoolData[key]\n      if (!poolData.data || !poolData.lastUpdated) {\n        accum.push(key)\n      }\n      return accum\n    }, [])\n  }, [allPoolData])\n\n  // update unloaded pool entries with fetched data\n  const { error: poolDataError, loading: poolDataLoading, data: poolDatas } = usePoolDatas(unfetchedPoolAddresses)\n\n  useEffect(() => {\n    if (poolDatas && !poolDataError && !poolDataLoading) {\n      updatePoolData(Object.values(poolDatas))\n    }\n  }, [poolDataError, poolDataLoading, poolDatas, updatePoolData])\n\n  return null\n}\n"],"mappings":";AAAA,SAASA,YAAY,QAAQ,qBAAqB;AAClD,SAASC,mBAAmB,QAAQ,qBAAqB;AACzD,SAASC,SAAS,EAAEC,OAAO,QAAQ,OAAO;AAC1C,SAASC,uBAAuB,QAAQ,yBAAyB;AAEjE,SAASC,SAAS,QAAQ,iBAAiB;AAC3C,SAASC,cAAc,EAAEC,cAAc,EAAEC,iBAAiB,QAAQ,SAAS;AAE3E,eAAe,SAASC,OAAO,GAAS;EAAA;EACtC;EACA,MAAM,CAACC,cAAc,CAAC,GAAGN,uBAAuB,EAAE;EAClD,MAAMO,cAAc,GAAGH,iBAAiB,EAAE;EAC1C,MAAMI,WAAW,GAAGN,cAAc,EAAE;;EAEpC;EACA,MAAMO,WAAW,GAAGN,cAAc,EAAE;EACpC,MAAM;IAAEO,OAAO;IAAEC,KAAK;IAAEC;EAAU,CAAC,GAAGf,mBAAmB,EAAE;;EAE3D;EACAC,SAAS,CAAC,MAAM;IACd,IAAIc,SAAS,IAAI,CAACD,KAAK,IAAI,CAACD,OAAO,EAAE;MACnCF,WAAW,CAACI,SAAS,CAAC;IACxB;EACF,CAAC,EAAE,CAACJ,WAAW,EAAEI,SAAS,EAAED,KAAK,EAAED,OAAO,CAAC,CAAC;;EAE5C;EACAZ,SAAS,CAAC,MAAM;IACdU,WAAW,CAACP,SAAS,CAACK,cAAc,CAACO,EAAE,CAAC,CAAC;EAC3C,CAAC,EAAE,CAACL,WAAW,EAAEF,cAAc,CAACO,EAAE,CAAC,CAAC;;EAEpC;EACA,MAAMC,sBAAsB,GAAGf,OAAO,CAAC,MAAM;IAC3C,OAAOgB,MAAM,CAACC,IAAI,CAACP,WAAW,CAAC,CAACQ,MAAM,CAAC,CAACC,KAAe,EAAEC,GAAG,KAAK;MAC/D,MAAMC,QAAQ,GAAGX,WAAW,CAACU,GAAG,CAAC;MACjC,IAAI,CAACC,QAAQ,CAACC,IAAI,IAAI,CAACD,QAAQ,CAACE,WAAW,EAAE;QAC3CJ,KAAK,CAACK,IAAI,CAACJ,GAAG,CAAC;MACjB;MACA,OAAOD,KAAK;IACd,CAAC,EAAE,EAAE,CAAC;EACR,CAAC,EAAE,CAACT,WAAW,CAAC,CAAC;;EAEjB;EACA,MAAM;IAAEE,KAAK,EAAEa,aAAa;IAAEd,OAAO,EAAEe,eAAe;IAAEJ,IAAI,EAAEK;EAAU,CAAC,GAAG9B,YAAY,CAACkB,sBAAsB,CAAC;EAEhHhB,SAAS,CAAC,MAAM;IACd,IAAI4B,SAAS,IAAI,CAACF,aAAa,IAAI,CAACC,eAAe,EAAE;MACnDlB,cAAc,CAACQ,MAAM,CAACY,MAAM,CAACD,SAAS,CAAC,CAAC;IAC1C;EACF,CAAC,EAAE,CAACF,aAAa,EAAEC,eAAe,EAAEC,SAAS,EAAEnB,cAAc,CAAC,CAAC;EAE/D,OAAO,IAAI;AACb;AAAC,GA3CuBF,OAAO;EAAA,QAEJL,uBAAuB,EACzBI,iBAAiB,EACpBF,cAAc,EAGdC,cAAc,EACIN,mBAAmB,EA0BmBD,YAAY;AAAA;AAAA,KAlClES,OAAO;AAAA;AAAA"},"metadata":{},"sourceType":"module"}