{"ast":null,"code":"import _styled from \"styled-components\";\nvar _jsxFileName = \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/components/HoverInlineText/index.tsx\",\n  _s = $RefreshSig$();\nimport Tooltip from 'components/Tooltip';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TextWrapper = _styled.span.withConfig({\n  displayName: \"HoverInlineText__TextWrapper\",\n  componentId: \"sc-19p08fx-0\"\n})([\"margin-left:\", \";font-size:\", \";@media screen and (max-width:600px){font-size:\", \";}\"], _ref => {\n  let {\n    margin\n  } = _ref;\n  return margin && '4px';\n}, _ref2 => {\n  let {\n    fontSize\n  } = _ref2;\n  return fontSize !== null && fontSize !== void 0 ? fontSize : 'inherit';\n}, _ref3 => {\n  let {\n    adjustSize\n  } = _ref3;\n  return adjustSize && '12px';\n});\nconst HoverInlineText = _ref4 => {\n  _s();\n  let {\n    text,\n    maxCharacters = 20,\n    margin = false,\n    adjustSize = false,\n    fontSize,\n    textColor,\n    link,\n    ...rest\n  } = _ref4;\n  const [showHover, setShowHover] = useState(false);\n  if (!text) {\n    return /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 12\n    }, this);\n  }\n  if (text.length > maxCharacters) {\n    return /*#__PURE__*/_jsxDEV(Tooltip, {\n      text: text,\n      show: showHover,\n      children: /*#__PURE__*/_jsxDEV(TextWrapper, {\n        onMouseEnter: () => setShowHover(true),\n        onMouseLeave: () => setShowHover(false),\n        margin: margin,\n        adjustSize: adjustSize,\n        textColor: textColor,\n        link: link,\n        fontSize: fontSize,\n        ...rest,\n        children: ' ' + text.slice(0, maxCharacters - 1) + '...'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(TextWrapper, {\n    margin: margin,\n    adjustSize: adjustSize,\n    link: link,\n    fontSize: fontSize,\n    textColor: textColor,\n    ...rest,\n    children: text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n_s(HoverInlineText, \"smjBK0wZhzG9wbOjaQIljuQOK5E=\");\n_c = HoverInlineText;\nexport default HoverInlineText;\nvar _c;\n$RefreshReg$(_c, \"HoverInlineText\");","map":{"version":3,"names":["Tooltip","useState","TextWrapper","styled","span","margin","fontSize","adjustSize","HoverInlineText","text","maxCharacters","textColor","link","rest","showHover","setShowHover","length","slice"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/components/HoverInlineText/index.tsx"],"sourcesContent":["import Tooltip from 'components/Tooltip'\nimport { useState } from 'react'\nimport styled from 'styled-components/macro'\n\nconst TextWrapper = styled.span<{\n  margin: boolean\n  link?: boolean\n  fontSize?: string\n  adjustSize?: boolean\n  textColor?: string\n}>`\n  margin-left: ${({ margin }) => margin && '4px'};\n  font-size: ${({ fontSize }) => fontSize ?? 'inherit'};\n\n  @media screen and (max-width: 600px) {\n    font-size: ${({ adjustSize }) => adjustSize && '12px'};\n  }\n`\n\nconst HoverInlineText = ({\n  text,\n  maxCharacters = 20,\n  margin = false,\n  adjustSize = false,\n  fontSize,\n  textColor,\n  link,\n  ...rest\n}: {\n  text?: string\n  maxCharacters?: number\n  margin?: boolean\n  adjustSize?: boolean\n  fontSize?: string\n  textColor?: string\n  link?: boolean\n}) => {\n  const [showHover, setShowHover] = useState(false)\n\n  if (!text) {\n    return <span />\n  }\n\n  if (text.length > maxCharacters) {\n    return (\n      <Tooltip text={text} show={showHover}>\n        <TextWrapper\n          onMouseEnter={() => setShowHover(true)}\n          onMouseLeave={() => setShowHover(false)}\n          margin={margin}\n          adjustSize={adjustSize}\n          textColor={textColor}\n          link={link}\n          fontSize={fontSize}\n          {...rest}\n        >\n          {' ' + text.slice(0, maxCharacters - 1) + '...'}\n        </TextWrapper>\n      </Tooltip>\n    )\n  }\n\n  return (\n    <TextWrapper\n      margin={margin}\n      adjustSize={adjustSize}\n      link={link}\n      fontSize={fontSize}\n      textColor={textColor}\n      {...rest}\n    >\n      {text}\n    </TextWrapper>\n  )\n}\n\nexport default HoverInlineText\n"],"mappings":";;;AAAA,OAAOA,OAAO,MAAM,oBAAoB;AACxC,SAASC,QAAQ,QAAQ,OAAO;AAAA;AAGhC,MAAMC,WAAW,GAAGC,OAAM,CAACC,IAAI;EAAA;EAAA;AAAA,6FAOd;EAAA,IAAC;IAAEC;EAAO,CAAC;EAAA,OAAKA,MAAM,IAAI,KAAK;AAAA,GACjC;EAAA,IAAC;IAAEC;EAAS,CAAC;EAAA,OAAKA,QAAQ,aAARA,QAAQ,cAARA,QAAQ,GAAI,SAAS;AAAA,GAGrC;EAAA,IAAC;IAAEC;EAAW,CAAC;EAAA,OAAKA,UAAU,IAAI,MAAM;AAAA,EAExD;AAED,MAAMC,eAAe,GAAG,SAiBlB;EAAA;EAAA,IAjBmB;IACvBC,IAAI;IACJC,aAAa,GAAG,EAAE;IAClBL,MAAM,GAAG,KAAK;IACdE,UAAU,GAAG,KAAK;IAClBD,QAAQ;IACRK,SAAS;IACTC,IAAI;IACJ,GAAGC;EASL,CAAC;EACC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EAEjD,IAAI,CAACQ,IAAI,EAAE;IACT,oBAAO;MAAA;MAAA;MAAA;IAAA,QAAQ;EACjB;EAEA,IAAIA,IAAI,CAACO,MAAM,GAAGN,aAAa,EAAE;IAC/B,oBACE,QAAC,OAAO;MAAC,IAAI,EAAED,IAAK;MAAC,IAAI,EAAEK,SAAU;MAAA,uBACnC,QAAC,WAAW;QACV,YAAY,EAAE,MAAMC,YAAY,CAAC,IAAI,CAAE;QACvC,YAAY,EAAE,MAAMA,YAAY,CAAC,KAAK,CAAE;QACxC,MAAM,EAAEV,MAAO;QACf,UAAU,EAAEE,UAAW;QACvB,SAAS,EAAEI,SAAU;QACrB,IAAI,EAAEC,IAAK;QACX,QAAQ,EAAEN,QAAS;QAAA,GACfO,IAAI;QAAA,UAEP,GAAG,GAAGJ,IAAI,CAACQ,KAAK,CAAC,CAAC,EAAEP,aAAa,GAAG,CAAC,CAAC,GAAG;MAAK;QAAA;QAAA;QAAA;MAAA;IACnC;MAAA;MAAA;MAAA;IAAA,QACN;EAEd;EAEA,oBACE,QAAC,WAAW;IACV,MAAM,EAAEL,MAAO;IACf,UAAU,EAAEE,UAAW;IACvB,IAAI,EAAEK,IAAK;IACX,QAAQ,EAAEN,QAAS;IACnB,SAAS,EAAEK,SAAU;IAAA,GACjBE,IAAI;IAAA,UAEPJ;EAAI;IAAA;IAAA;IAAA;EAAA,QACO;AAElB,CAAC;AAAA,GAvDKD,eAAe;AAAA,KAAfA,eAAe;AAyDrB,eAAeA,eAAe;AAAA;AAAA"},"metadata":{},"sourceType":"module"}