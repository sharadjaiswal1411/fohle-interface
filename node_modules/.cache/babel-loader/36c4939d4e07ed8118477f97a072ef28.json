{"ast":null,"code":"var TRACEPARENT_REGEXP = new RegExp('^[ \\\\t]*' +\n// whitespace\n'([0-9a-f]{32})?' +\n// trace_id\n'-?([0-9a-f]{16})?' +\n// span_id\n'-?([01])?' +\n// sampled\n'[ \\\\t]*$') // whitespace\n;\n\n/**\n * Extract transaction context data from a `sentry-trace` header.\n *\n * @param traceparent Traceparent string\n *\n * @returns Object containing data from the header, or undefined if traceparent string is malformed\n */\nfunction extractTraceparentData(traceparent) {\n  var matches = traceparent.match(TRACEPARENT_REGEXP);\n  if (!traceparent || !matches) {\n    // empty string or no matches is invalid traceparent data\n    return undefined;\n  }\n  var parentSampled;\n  if (matches[3] === '1') {\n    parentSampled = true;\n  } else if (matches[3] === '0') {\n    parentSampled = false;\n  }\n  return {\n    traceId: matches[1],\n    parentSampled: parentSampled,\n    parentSpanId: matches[2]\n  };\n}\nexport { TRACEPARENT_REGEXP, extractTraceparentData };","map":{"version":3,"sources":["../../src/tracing.ts"],"names":[],"mappings":"AAEA,IAAA,kBAAA,GAAA,IAAA,MAAA,CACA,UAAA;AAAA;AACA,iBAAA;AAAA;AACA,mBAAA;AAAA;AACA,WAAA;AAAA;AACA,UAAA,CACA,CADA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAA,sBAAA,CAAA,WAAA,EAAA;EACA,IAAA,OAAA,GAAA,WAAA,CAAA,KAAA,CAAA,kBAAA,CAAA;EAEA,IAAA,CAAA,WAAA,IAAA,CAAA,OAAA,EAAA;IACA;IACA,OAAA,SAAA;EACA;EAEA,IAAA,aAAA;EACA,IAAA,OAAA,CAAA,CAAA,CAAA,KAAA,GAAA,EAAA;IACA,aAAA,GAAA,IAAA;EACA,CAAA,MAAA,IAAA,OAAA,CAAA,CAAA,CAAA,KAAA,GAAA,EAAA;IACA,aAAA,GAAA,KAAA;EACA;EAEA,OAAA;IACA,OAAA,EAAA,OAAA,CAAA,CAAA,CAAA;IACA,aAAA,EAAA,aAAA;IACA,YAAA,EAAA,OAAA,CAAA,CAAA;EACA,CAAA;AACA","sourcesContent":["import { TraceparentData } from '@sentry/types';\n\nexport const TRACEPARENT_REGEXP = new RegExp(\n  '^[ \\\\t]*' + // whitespace\n    '([0-9a-f]{32})?' + // trace_id\n    '-?([0-9a-f]{16})?' + // span_id\n    '-?([01])?' + // sampled\n    '[ \\\\t]*$', // whitespace\n);\n\n/**\n * Extract transaction context data from a `sentry-trace` header.\n *\n * @param traceparent Traceparent string\n *\n * @returns Object containing data from the header, or undefined if traceparent string is malformed\n */\nexport function extractTraceparentData(traceparent: string): TraceparentData | undefined {\n  const matches = traceparent.match(TRACEPARENT_REGEXP);\n\n  if (!traceparent || !matches) {\n    // empty string or no matches is invalid traceparent data\n    return undefined;\n  }\n\n  let parentSampled: boolean | undefined;\n  if (matches[3] === '1') {\n    parentSampled = true;\n  } else if (matches[3] === '0') {\n    parentSampled = false;\n  }\n\n  return {\n    traceId: matches[1],\n    parentSampled,\n    parentSpanId: matches[2],\n  };\n}\n"]},"metadata":{},"sourceType":"module"}