{"ast":null,"code":"import { timestampInSeconds, uuid4, dropUndefinedKeys } from '@sentry/utils';\n\n/**\n * Creates a new `Session` object by setting certain default parameters. If optional @param context\n * is passed, the passed properties are applied to the session object.\n *\n * @param context (optional) additional properties to be applied to the returned session object\n *\n * @returns a new `Session` object\n */\nfunction makeSession(context) {\n  // Both timestamp and started are in seconds since the UNIX epoch.\n  const startingTime = timestampInSeconds();\n  const session = {\n    sid: uuid4(),\n    init: true,\n    timestamp: startingTime,\n    started: startingTime,\n    duration: 0,\n    status: 'ok',\n    errors: 0,\n    ignoreDuration: false,\n    toJSON: () => sessionToJSON(session)\n  };\n  if (context) {\n    updateSession(session, context);\n  }\n  return session;\n}\n\n/**\n * Updates a session object with the properties passed in the context.\n *\n * Note that this function mutates the passed object and returns void.\n * (Had to do this instead of returning a new and updated session because closing and sending a session\n * makes an update to the session after it was passed to the sending logic.\n * @see BaseClient.captureSession )\n *\n * @param session the `Session` to update\n * @param context the `SessionContext` holding the properties that should be updated in @param session\n */\n// eslint-disable-next-line complexity\nfunction updateSession(session) {\n  let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (context.user) {\n    if (!session.ipAddress && context.user.ip_address) {\n      session.ipAddress = context.user.ip_address;\n    }\n    if (!session.did && !context.did) {\n      session.did = context.user.id || context.user.email || context.user.username;\n    }\n  }\n  session.timestamp = context.timestamp || timestampInSeconds();\n  if (context.ignoreDuration) {\n    session.ignoreDuration = context.ignoreDuration;\n  }\n  if (context.sid) {\n    // Good enough uuid validation. â€” Kamil\n    session.sid = context.sid.length === 32 ? context.sid : uuid4();\n  }\n  if (context.init !== undefined) {\n    session.init = context.init;\n  }\n  if (!session.did && context.did) {\n    session.did = `${context.did}`;\n  }\n  if (typeof context.started === 'number') {\n    session.started = context.started;\n  }\n  if (session.ignoreDuration) {\n    session.duration = undefined;\n  } else if (typeof context.duration === 'number') {\n    session.duration = context.duration;\n  } else {\n    const duration = session.timestamp - session.started;\n    session.duration = duration >= 0 ? duration : 0;\n  }\n  if (context.release) {\n    session.release = context.release;\n  }\n  if (context.environment) {\n    session.environment = context.environment;\n  }\n  if (!session.ipAddress && context.ipAddress) {\n    session.ipAddress = context.ipAddress;\n  }\n  if (!session.userAgent && context.userAgent) {\n    session.userAgent = context.userAgent;\n  }\n  if (typeof context.errors === 'number') {\n    session.errors = context.errors;\n  }\n  if (context.status) {\n    session.status = context.status;\n  }\n}\n\n/**\n * Closes a session by setting its status and updating the session object with it.\n * Internally calls `updateSession` to update the passed session object.\n *\n * Note that this function mutates the passed session (@see updateSession for explanation).\n *\n * @param session the `Session` object to be closed\n * @param status the `SessionStatus` with which the session was closed. If you don't pass a status,\n *               this function will keep the previously set status, unless it was `'ok'` in which case\n *               it is changed to `'exited'`.\n */\nfunction closeSession(session, status) {\n  let context = {};\n  if (status) {\n    context = {\n      status\n    };\n  } else if (session.status === 'ok') {\n    context = {\n      status: 'exited'\n    };\n  }\n  updateSession(session, context);\n}\n\n/**\n * Serializes a passed session object to a JSON object with a slightly different structure.\n * This is necessary because the Sentry backend requires a slightly different schema of a session\n * than the one the JS SDKs use internally.\n *\n * @param session the session to be converted\n *\n * @returns a JSON object of the passed session\n */\nfunction sessionToJSON(session) {\n  return dropUndefinedKeys({\n    sid: `${session.sid}`,\n    init: session.init,\n    // Make sure that sec is converted to ms for date constructor\n    started: new Date(session.started * 1000).toISOString(),\n    timestamp: new Date(session.timestamp * 1000).toISOString(),\n    status: session.status,\n    errors: session.errors,\n    did: typeof session.did === 'number' || typeof session.did === 'string' ? `${session.did}` : undefined,\n    duration: session.duration,\n    attrs: {\n      release: session.release,\n      environment: session.environment,\n      ip_address: session.ipAddress,\n      user_agent: session.userAgent\n    }\n  });\n}\nexport { closeSession, makeSession, updateSession };","map":{"version":3,"sources":["../../src/session.ts"],"names":[],"mappings":"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","sourcesContent":["import { SerializedSession, Session, SessionContext, SessionStatus } from '@sentry/types';\nimport { dropUndefinedKeys, timestampInSeconds, uuid4 } from '@sentry/utils';\n\n/**\n * Creates a new `Session` object by setting certain default parameters. If optional @param context\n * is passed, the passed properties are applied to the session object.\n *\n * @param context (optional) additional properties to be applied to the returned session object\n *\n * @returns a new `Session` object\n */\nexport function makeSession(context?: Omit<SessionContext, 'started' | 'status'>): Session {\n  // Both timestamp and started are in seconds since the UNIX epoch.\n  const startingTime = timestampInSeconds();\n\n  const session: Session = {\n    sid: uuid4(),\n    init: true,\n    timestamp: startingTime,\n    started: startingTime,\n    duration: 0,\n    status: 'ok',\n    errors: 0,\n    ignoreDuration: false,\n    toJSON: () => sessionToJSON(session),\n  };\n\n  if (context) {\n    updateSession(session, context);\n  }\n\n  return session;\n}\n\n/**\n * Updates a session object with the properties passed in the context.\n *\n * Note that this function mutates the passed object and returns void.\n * (Had to do this instead of returning a new and updated session because closing and sending a session\n * makes an update to the session after it was passed to the sending logic.\n * @see BaseClient.captureSession )\n *\n * @param session the `Session` to update\n * @param context the `SessionContext` holding the properties that should be updated in @param session\n */\n// eslint-disable-next-line complexity\nexport function updateSession(session: Session, context: SessionContext = {}): void {\n  if (context.user) {\n    if (!session.ipAddress && context.user.ip_address) {\n      session.ipAddress = context.user.ip_address;\n    }\n\n    if (!session.did && !context.did) {\n      session.did = context.user.id || context.user.email || context.user.username;\n    }\n  }\n\n  session.timestamp = context.timestamp || timestampInSeconds();\n\n  if (context.ignoreDuration) {\n    session.ignoreDuration = context.ignoreDuration;\n  }\n  if (context.sid) {\n    // Good enough uuid validation. â€” Kamil\n    session.sid = context.sid.length === 32 ? context.sid : uuid4();\n  }\n  if (context.init !== undefined) {\n    session.init = context.init;\n  }\n  if (!session.did && context.did) {\n    session.did = `${context.did}`;\n  }\n  if (typeof context.started === 'number') {\n    session.started = context.started;\n  }\n  if (session.ignoreDuration) {\n    session.duration = undefined;\n  } else if (typeof context.duration === 'number') {\n    session.duration = context.duration;\n  } else {\n    const duration = session.timestamp - session.started;\n    session.duration = duration >= 0 ? duration : 0;\n  }\n  if (context.release) {\n    session.release = context.release;\n  }\n  if (context.environment) {\n    session.environment = context.environment;\n  }\n  if (!session.ipAddress && context.ipAddress) {\n    session.ipAddress = context.ipAddress;\n  }\n  if (!session.userAgent && context.userAgent) {\n    session.userAgent = context.userAgent;\n  }\n  if (typeof context.errors === 'number') {\n    session.errors = context.errors;\n  }\n  if (context.status) {\n    session.status = context.status;\n  }\n}\n\n/**\n * Closes a session by setting its status and updating the session object with it.\n * Internally calls `updateSession` to update the passed session object.\n *\n * Note that this function mutates the passed session (@see updateSession for explanation).\n *\n * @param session the `Session` object to be closed\n * @param status the `SessionStatus` with which the session was closed. If you don't pass a status,\n *               this function will keep the previously set status, unless it was `'ok'` in which case\n *               it is changed to `'exited'`.\n */\nexport function closeSession(session: Session, status?: Exclude<SessionStatus, 'ok'>): void {\n  let context = {};\n  if (status) {\n    context = { status };\n  } else if (session.status === 'ok') {\n    context = { status: 'exited' };\n  }\n\n  updateSession(session, context);\n}\n\n/**\n * Serializes a passed session object to a JSON object with a slightly different structure.\n * This is necessary because the Sentry backend requires a slightly different schema of a session\n * than the one the JS SDKs use internally.\n *\n * @param session the session to be converted\n *\n * @returns a JSON object of the passed session\n */\nfunction sessionToJSON(session: Session): SerializedSession {\n  return dropUndefinedKeys({\n    sid: `${session.sid}`,\n    init: session.init,\n    // Make sure that sec is converted to ms for date constructor\n    started: new Date(session.started * 1000).toISOString(),\n    timestamp: new Date(session.timestamp * 1000).toISOString(),\n    status: session.status,\n    errors: session.errors,\n    did: typeof session.did === 'number' || typeof session.did === 'string' ? `${session.did}` : undefined,\n    duration: session.duration,\n    attrs: {\n      release: session.release,\n      environment: session.environment,\n      ip_address: session.ipAddress,\n      user_agent: session.userAgent,\n    },\n  });\n}\n"]},"metadata":{},"sourceType":"module"}