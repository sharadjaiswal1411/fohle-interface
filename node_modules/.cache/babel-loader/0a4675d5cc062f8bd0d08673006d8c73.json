{"ast":null,"code":"import { BigNumber } from '@ethersproject/bignumber';\nimport { BagItemStatus, isPooledMarket, Markets } from 'nft/types';\nimport { isInSameMarketplaceCollection, isInSameSudoSwapPool } from 'nft/utils';\nconst PRECISION = '1000000000000000000';\nconst PROTOCOL_FEE_MULTIPLIER = BigNumber.from('5000000000000000');\nvar BondingCurve;\n(function (BondingCurve) {\n  BondingCurve[\"Linear\"] = \"LINEAR\";\n  BondingCurve[\"Exponential\"] = \"EXPONENTIAL\";\n})(BondingCurve || (BondingCurve = {}));\nconst getPoolParameters = protocolParameters => {\n  var _poolMetadata, _poolMetadata2;\n  return {\n    delta: (protocolParameters === null || protocolParameters === void 0 ? void 0 : protocolParameters.delta) ? protocolParameters.delta : undefined,\n    fee: (protocolParameters === null || protocolParameters === void 0 ? void 0 : protocolParameters.ammFeeFixed) ? protocolParameters.ammFeeFixed : undefined,\n    spotPrice: protocolParameters === null || protocolParameters === void 0 ? void 0 : (_poolMetadata = protocolParameters.poolMetadata) === null || _poolMetadata === void 0 ? void 0 : _poolMetadata.spotPrice,\n    bondingCurve: protocolParameters === null || protocolParameters === void 0 ? void 0 : (_poolMetadata2 = protocolParameters.poolMetadata) === null || _poolMetadata2 === void 0 ? void 0 : _poolMetadata2.bondingCurve\n  };\n};\nconst calculateScaledPrice = (currentPrice, poolFee) => {\n  const protocolFee = currentPrice.mul(PROTOCOL_FEE_MULTIPLIER).div(BigNumber.from(PRECISION));\n  const tradeFee = currentPrice.mul(poolFee).div(BigNumber.from(PRECISION));\n  return currentPrice.add(protocolFee).add(tradeFee);\n};\nexport const calcSudoSwapPrice = function (asset) {\n  let position = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  if (!asset.sellorders) return undefined;\n  const sudoSwapParameters = asset.sellorders[0].protocolParameters;\n  const sudoSwapPool = getPoolParameters(sudoSwapParameters);\n  if (!sudoSwapPool.fee || !sudoSwapPool.delta || !sudoSwapPool.spotPrice || !sudoSwapPool.bondingCurve) return undefined;\n  let currentPrice = BigNumber.from(sudoSwapPool.spotPrice);\n  const delta = BigNumber.from(sudoSwapPool.delta);\n  const poolFee = BigNumber.from(sudoSwapPool.fee);\n  for (let i = 0; i <= position; i++) {\n    if (sudoSwapPool.bondingCurve === BondingCurve.Linear) {\n      currentPrice = currentPrice.add(delta);\n    } else if (sudoSwapPool.bondingCurve === BondingCurve.Exponential) {\n      currentPrice = currentPrice.mul(delta).div(BigNumber.from(PRECISION));\n    }\n  }\n  return calculateScaledPrice(currentPrice, poolFee).toString();\n};\n\n// TODO: a lot of the below typecasting logic can be simplified when GraphQL migration is complete\nexport const calcPoolPrice = function (asset) {\n  var _poolMetadata$ethRese, _poolMetadata3, _poolMetadata3$ethRes, _poolMetadata$tokenRe, _poolMetadata4, _poolMetadata4$tokenR;\n  let position = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  if (!asset.sellorders) return '';\n  let amountToBuy = BigNumber.from(0);\n  let marginalBuy = BigNumber.from(0);\n  const nft = asset.sellorders[0].protocolParameters;\n  const decimals = BigNumber.from(1).mul(10).pow(18);\n  const ammFee = (nft === null || nft === void 0 ? void 0 : nft.ammFeePercent) ? (100 + nft.ammFeePercent) * 100 : 110 * 100;\n  if (asset.marketplace === Markets.NFTX) {\n    const sixteenmul = BigNumber.from(1).mul(10).pow(16);\n    amountToBuy = BigNumber.from(ammFee).div(100).mul(position + 1);\n    amountToBuy = amountToBuy.mul(sixteenmul);\n    marginalBuy = BigNumber.from(ammFee).div(100).mul(position);\n    marginalBuy = marginalBuy.mul(sixteenmul);\n  }\n  if (asset.marketplace === Markets.NFT20) {\n    amountToBuy = BigNumber.from(100).mul(position + 1);\n    amountToBuy = amountToBuy.mul(decimals);\n    marginalBuy = BigNumber.from(100).mul(position);\n    marginalBuy = marginalBuy.mul(decimals);\n  }\n  const ethReserves = BigNumber.from((_poolMetadata$ethRese = nft === null || nft === void 0 ? void 0 : (_poolMetadata3 = nft.poolMetadata) === null || _poolMetadata3 === void 0 ? void 0 : (_poolMetadata3$ethRes = _poolMetadata3.ethReserves) === null || _poolMetadata3$ethRes === void 0 ? void 0 : _poolMetadata3$ethRes.toLocaleString('fullwide', {\n    useGrouping: false\n  })) !== null && _poolMetadata$ethRese !== void 0 ? _poolMetadata$ethRese : 1);\n  const tokenReserves = BigNumber.from((_poolMetadata$tokenRe = nft === null || nft === void 0 ? void 0 : (_poolMetadata4 = nft.poolMetadata) === null || _poolMetadata4 === void 0 ? void 0 : (_poolMetadata4$tokenR = _poolMetadata4.tokenReserves) === null || _poolMetadata4$tokenR === void 0 ? void 0 : _poolMetadata4$tokenR.toLocaleString('fullwide', {\n    useGrouping: false\n  })) !== null && _poolMetadata$tokenRe !== void 0 ? _poolMetadata$tokenRe : 1);\n  const numerator = ethReserves.mul(amountToBuy).mul(1000);\n  const denominator = tokenReserves.sub(amountToBuy).mul(997);\n  const marginalnumerator = ethReserves.mul(marginalBuy).mul(1000);\n  const marginaldenominator = tokenReserves.sub(marginalBuy).mul(997);\n  let price = numerator.div(denominator);\n  const marginalprice = marginalnumerator.div(marginaldenominator);\n  price = price.sub(marginalprice);\n  price = price.mul(101).div(100);\n  return price.toString();\n};\nexport const calcAvgGroupPoolPrice = (asset, numberOfAssets) => {\n  let total = BigNumber.from(0);\n  for (let i = 0; i < numberOfAssets; i++) {\n    if (asset.marketplace === Markets.Sudoswap) {\n      var _calcSudoSwapPrice;\n      total = total.add(BigNumber.from((_calcSudoSwapPrice = calcSudoSwapPrice(asset, i)) !== null && _calcSudoSwapPrice !== void 0 ? _calcSudoSwapPrice : '0'));\n    } else {\n      total = total.add(BigNumber.from(calcPoolPrice(asset, i)));\n    }\n  }\n  return total.div(numberOfAssets).toString();\n};\nconst recalculatePooledAssetPrice = (asset, position) => {\n  var _calcSudoSwapPrice2;\n  return asset.marketplace === Markets.Sudoswap ? (_calcSudoSwapPrice2 = calcSudoSwapPrice(asset, position)) !== null && _calcSudoSwapPrice2 !== void 0 ? _calcSudoSwapPrice2 : '' : calcPoolPrice(asset, position);\n};\nexport const recalculateBagUsingPooledAssets = uncheckedItemsInBag => {\n  if (!uncheckedItemsInBag.some(item => item.asset.marketplace && isPooledMarket(item.asset.marketplace)) || uncheckedItemsInBag.every(item => item.status === BagItemStatus.REVIEWED || item.status === BagItemStatus.REVIEWING_PRICE_CHANGE)) return uncheckedItemsInBag;\n  const itemsInBag = [...uncheckedItemsInBag];\n  itemsInBag.forEach(item => {\n    if (item.asset.marketplace) if (isPooledMarket(item.asset.marketplace)) {\n      const asset = item.asset;\n      const isPriceChangedAsset = !!asset.updatedPriceInfo;\n      const itemsInPool = asset.marketplace === Markets.Sudoswap ? itemsInBag.filter(bagItem => isInSameSudoSwapPool(item.asset, bagItem.asset)) : itemsInBag.filter(bagItem => isInSameMarketplaceCollection(item.asset, bagItem.asset));\n      const calculatedPrice = isPriceChangedAsset ? calcAvgGroupPoolPrice(asset, itemsInPool.length) : recalculatePooledAssetPrice(asset, itemsInPool.findIndex(itemInPool => itemInPool.asset.tokenId === asset.tokenId));\n      if (isPriceChangedAsset && item.asset.updatedPriceInfo) item.asset.updatedPriceInfo.ETHPrice = item.asset.updatedPriceInfo.basePrice = calculatedPrice;else item.asset.priceInfo.ETHPrice = calculatedPrice;\n    }\n  });\n  return itemsInBag;\n};","map":{"version":3,"names":["BigNumber","BagItemStatus","isPooledMarket","Markets","isInSameMarketplaceCollection","isInSameSudoSwapPool","PRECISION","PROTOCOL_FEE_MULTIPLIER","from","BondingCurve","getPoolParameters","protocolParameters","delta","undefined","fee","ammFeeFixed","spotPrice","poolMetadata","bondingCurve","calculateScaledPrice","currentPrice","poolFee","protocolFee","mul","div","tradeFee","add","calcSudoSwapPrice","asset","position","sellorders","sudoSwapParameters","sudoSwapPool","i","Linear","Exponential","toString","calcPoolPrice","amountToBuy","marginalBuy","nft","decimals","pow","ammFee","ammFeePercent","marketplace","NFTX","sixteenmul","NFT20","ethReserves","toLocaleString","useGrouping","tokenReserves","numerator","denominator","sub","marginalnumerator","marginaldenominator","price","marginalprice","calcAvgGroupPoolPrice","numberOfAssets","total","Sudoswap","recalculatePooledAssetPrice","recalculateBagUsingPooledAssets","uncheckedItemsInBag","some","item","every","status","REVIEWED","REVIEWING_PRICE_CHANGE","itemsInBag","forEach","isPriceChangedAsset","updatedPriceInfo","itemsInPool","filter","bagItem","calculatedPrice","length","findIndex","itemInPool","tokenId","ETHPrice","basePrice","priceInfo"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/nft/utils/pooledAssets.ts"],"sourcesContent":["import { BigNumber } from '@ethersproject/bignumber'\nimport { BagItem, BagItemStatus, GenieAsset, isPooledMarket, Markets } from 'nft/types'\nimport { isInSameMarketplaceCollection, isInSameSudoSwapPool } from 'nft/utils'\n\nconst PRECISION = '1000000000000000000'\nconst PROTOCOL_FEE_MULTIPLIER = BigNumber.from('5000000000000000')\n\nenum BondingCurve {\n  Linear = 'LINEAR',\n  Exponential = 'EXPONENTIAL',\n}\n\ninterface Pool {\n  delta?: string\n  spotPrice?: string\n  fee?: string\n  bondingCurve?: BondingCurve\n}\n\nconst getPoolParameters = (protocolParameters: Record<string, unknown>): Pool => {\n  return {\n    delta: protocolParameters?.delta ? (protocolParameters.delta as string) : undefined,\n    fee: protocolParameters?.ammFeeFixed ? (protocolParameters.ammFeeFixed as string) : undefined,\n    spotPrice: (protocolParameters as Record<string, { spotPrice?: string }>)?.poolMetadata?.spotPrice,\n    bondingCurve: (protocolParameters as Record<string, { bondingCurve?: BondingCurve }>)?.poolMetadata?.bondingCurve,\n  }\n}\n\nconst calculateScaledPrice = (currentPrice: BigNumber, poolFee: BigNumber): BigNumber => {\n  const protocolFee = currentPrice.mul(PROTOCOL_FEE_MULTIPLIER).div(BigNumber.from(PRECISION))\n  const tradeFee = currentPrice.mul(poolFee).div(BigNumber.from(PRECISION))\n  return currentPrice.add(protocolFee).add(tradeFee)\n}\n\nexport const calcSudoSwapPrice = (asset: GenieAsset, position = 0): string | undefined => {\n  if (!asset.sellorders) return undefined\n\n  const sudoSwapParameters = asset.sellorders[0].protocolParameters\n  const sudoSwapPool = getPoolParameters(sudoSwapParameters)\n\n  if (!sudoSwapPool.fee || !sudoSwapPool.delta || !sudoSwapPool.spotPrice || !sudoSwapPool.bondingCurve)\n    return undefined\n\n  let currentPrice = BigNumber.from(sudoSwapPool.spotPrice)\n  const delta = BigNumber.from(sudoSwapPool.delta)\n  const poolFee = BigNumber.from(sudoSwapPool.fee)\n\n  for (let i = 0; i <= position; i++) {\n    if (sudoSwapPool.bondingCurve === BondingCurve.Linear) {\n      currentPrice = currentPrice.add(delta)\n    } else if (sudoSwapPool.bondingCurve === BondingCurve.Exponential) {\n      currentPrice = currentPrice.mul(delta).div(BigNumber.from(PRECISION))\n    }\n  }\n\n  return calculateScaledPrice(currentPrice, poolFee).toString()\n}\n\n// TODO: a lot of the below typecasting logic can be simplified when GraphQL migration is complete\nexport const calcPoolPrice = (asset: GenieAsset, position = 0) => {\n  if (!asset.sellorders) return ''\n\n  let amountToBuy: BigNumber = BigNumber.from(0)\n  let marginalBuy: BigNumber = BigNumber.from(0)\n\n  const nft = asset.sellorders[0].protocolParameters\n  const decimals = BigNumber.from(1).mul(10).pow(18)\n  const ammFee = nft?.ammFeePercent ? (100 + (nft.ammFeePercent as number)) * 100 : 110 * 100\n\n  if (asset.marketplace === Markets.NFTX) {\n    const sixteenmul = BigNumber.from(1).mul(10).pow(16)\n    amountToBuy = BigNumber.from(ammFee)\n      .div(100)\n      .mul(position + 1)\n    amountToBuy = amountToBuy.mul(sixteenmul)\n\n    marginalBuy = BigNumber.from(ammFee).div(100).mul(position)\n    marginalBuy = marginalBuy.mul(sixteenmul)\n  }\n  if (asset.marketplace === Markets.NFT20) {\n    amountToBuy = BigNumber.from(100).mul(position + 1)\n    amountToBuy = amountToBuy.mul(decimals)\n\n    marginalBuy = BigNumber.from(100).mul(position)\n    marginalBuy = marginalBuy.mul(decimals)\n  }\n\n  const ethReserves = BigNumber.from(\n    (\n      nft as Record<\n        string,\n        {\n          ethReserves: number\n        }\n      >\n    )?.poolMetadata?.ethReserves?.toLocaleString('fullwide', { useGrouping: false }) ?? 1\n  )\n  const tokenReserves = BigNumber.from(\n    (\n      nft as Record<\n        string,\n        {\n          tokenReserves: number\n        }\n      >\n    )?.poolMetadata?.tokenReserves?.toLocaleString('fullwide', { useGrouping: false }) ?? 1\n  )\n  const numerator = ethReserves.mul(amountToBuy).mul(1000)\n  const denominator = tokenReserves.sub(amountToBuy).mul(997)\n\n  const marginalnumerator = ethReserves.mul(marginalBuy).mul(1000)\n  const marginaldenominator = tokenReserves.sub(marginalBuy).mul(997)\n\n  let price = numerator.div(denominator)\n  const marginalprice = marginalnumerator.div(marginaldenominator)\n\n  price = price.sub(marginalprice)\n  price = price.mul(101).div(100)\n\n  return price.toString()\n}\n\nexport const calcAvgGroupPoolPrice = (asset: GenieAsset, numberOfAssets: number) => {\n  let total = BigNumber.from(0)\n\n  for (let i = 0; i < numberOfAssets; i++) {\n    if (asset.marketplace === Markets.Sudoswap) {\n      total = total.add(BigNumber.from(calcSudoSwapPrice(asset, i) ?? '0'))\n    } else {\n      total = total.add(BigNumber.from(calcPoolPrice(asset, i)))\n    }\n  }\n\n  return total.div(numberOfAssets).toString()\n}\n\nconst recalculatePooledAssetPrice = (asset: GenieAsset, position: number): string => {\n  return asset.marketplace === Markets.Sudoswap\n    ? calcSudoSwapPrice(asset, position) ?? ''\n    : calcPoolPrice(asset, position)\n}\n\nexport const recalculateBagUsingPooledAssets = (uncheckedItemsInBag: BagItem[]) => {\n  if (\n    !uncheckedItemsInBag.some((item) => item.asset.marketplace && isPooledMarket(item.asset.marketplace)) ||\n    uncheckedItemsInBag.every(\n      (item) => item.status === BagItemStatus.REVIEWED || item.status === BagItemStatus.REVIEWING_PRICE_CHANGE\n    )\n  )\n    return uncheckedItemsInBag\n\n  const itemsInBag = [...uncheckedItemsInBag]\n  itemsInBag.forEach((item) => {\n    if (item.asset.marketplace)\n      if (isPooledMarket(item.asset.marketplace)) {\n        const asset = item.asset\n        const isPriceChangedAsset = !!asset.updatedPriceInfo\n\n        const itemsInPool =\n          asset.marketplace === Markets.Sudoswap\n            ? itemsInBag.filter((bagItem) => isInSameSudoSwapPool(item.asset, bagItem.asset))\n            : itemsInBag.filter((bagItem) => isInSameMarketplaceCollection(item.asset, bagItem.asset))\n        const calculatedPrice = isPriceChangedAsset\n          ? calcAvgGroupPoolPrice(asset, itemsInPool.length)\n          : recalculatePooledAssetPrice(\n              asset,\n              itemsInPool.findIndex((itemInPool) => itemInPool.asset.tokenId === asset.tokenId)\n            )\n\n        if (isPriceChangedAsset && item.asset.updatedPriceInfo)\n          item.asset.updatedPriceInfo.ETHPrice = item.asset.updatedPriceInfo.basePrice = calculatedPrice\n        else item.asset.priceInfo.ETHPrice = calculatedPrice\n      }\n  })\n\n  return itemsInBag\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}