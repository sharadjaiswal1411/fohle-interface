{"ast":null,"code":"import _defineProperty from\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{CoinbaseWallet}from'@web3-react/coinbase-wallet';import{initializeConnector}from'@web3-react/core';import{GnosisSafe}from'@web3-react/gnosis-safe';import{MetaMask}from'@web3-react/metamask';import{Network}from'@web3-react/network';import{WalletConnect}from'@web3-react/walletconnect';import{SupportedChainId}from'constants/chains';import UNISWAP_LOGO_URL from\"../assets/svg/logo.svg\";import{RPC_URLS}from'../constants/networks';import{RPC_PROVIDERS}from'../constants/providers';export var ConnectionType;(function(ConnectionType){ConnectionType[\"INJECTED\"]=\"INJECTED\";ConnectionType[\"COINBASE_WALLET\"]=\"COINBASE_WALLET\";ConnectionType[\"WALLET_CONNECT\"]=\"WALLET_CONNECT\";ConnectionType[\"NETWORK\"]=\"NETWORK\";ConnectionType[\"GNOSIS_SAFE\"]=\"GNOSIS_SAFE\";})(ConnectionType||(ConnectionType={}));var metaMaskErrorHandler;export function setMetMaskErrorHandler(errorHandler){metaMaskErrorHandler=errorHandler;}function onError(error){console.debug(\"web3-react error: \".concat(error));}function onMetamaskError(error){var _metaMaskErrorHandler;onError(error);(_metaMaskErrorHandler=metaMaskErrorHandler)===null||_metaMaskErrorHandler===void 0?void 0:_metaMaskErrorHandler(error);}var _initializeConnector=initializeConnector(function(actions){return new Network({actions:actions,urlMap:RPC_PROVIDERS,defaultChainId:137});}),_initializeConnector2=_slicedToArray(_initializeConnector,2),web3Network=_initializeConnector2[0],web3NetworkHooks=_initializeConnector2[1];export var networkConnection={connector:web3Network,hooks:web3NetworkHooks,type:ConnectionType.NETWORK};var _initializeConnector3=initializeConnector(function(actions){return new MetaMask({actions:actions,onError:onMetamaskError});}),_initializeConnector4=_slicedToArray(_initializeConnector3,2),web3Injected=_initializeConnector4[0],web3InjectedHooks=_initializeConnector4[1];export var injectedConnection={connector:web3Injected,hooks:web3InjectedHooks,type:ConnectionType.INJECTED};var _initializeConnector5=initializeConnector(function(actions){return new GnosisSafe({actions:actions});}),_initializeConnector6=_slicedToArray(_initializeConnector5,2),web3GnosisSafe=_initializeConnector6[0],web3GnosisSafeHooks=_initializeConnector6[1];export var gnosisSafeConnection={connector:web3GnosisSafe,hooks:web3GnosisSafeHooks,type:ConnectionType.GNOSIS_SAFE};var _initializeConnector7=initializeConnector(function(actions){// Avoid testing for the best URL by only passing a single URL per chain.\n// Otherwise, WC will not initialize until all URLs have been tested (see getBestUrl in web3-react).\nvar RPC_URLS_WITHOUT_FALLBACKS=Object.entries(RPC_URLS).reduce(function(map,_ref){var _ref2=_slicedToArray(_ref,2),chainId=_ref2[0],urls=_ref2[1];return _objectSpread(_objectSpread({},map),{},_defineProperty({},chainId,urls[0]));},{});return new WalletConnect({actions:actions,options:{rpc:RPC_URLS_WITHOUT_FALLBACKS,qrcode:true},onError:onError});}),_initializeConnector8=_slicedToArray(_initializeConnector7,2),web3WalletConnect=_initializeConnector8[0],web3WalletConnectHooks=_initializeConnector8[1];export var walletConnectConnection={connector:web3WalletConnect,hooks:web3WalletConnectHooks,type:ConnectionType.WALLET_CONNECT};var _initializeConnector9=initializeConnector(function(actions){return new CoinbaseWallet({actions:actions,options:{url:RPC_URLS[SupportedChainId.MAINNET][0],appName:'Uniswap',appLogoUrl:UNISWAP_LOGO_URL,reloadOnDisconnect:false},onError:onError});}),_initializeConnector10=_slicedToArray(_initializeConnector9,2),web3CoinbaseWallet=_initializeConnector10[0],web3CoinbaseWalletHooks=_initializeConnector10[1];export var coinbaseWalletConnection={connector:web3CoinbaseWallet,hooks:web3CoinbaseWalletHooks,type:ConnectionType.COINBASE_WALLET};","map":{"version":3,"names":["CoinbaseWallet","initializeConnector","GnosisSafe","MetaMask","Network","WalletConnect","SupportedChainId","RPC_URLS","RPC_PROVIDERS","ConnectionType","metaMaskErrorHandler","setMetMaskErrorHandler","errorHandler","onError","error","console","debug","onMetamaskError","actions","urlMap","defaultChainId","web3Network","web3NetworkHooks","networkConnection","connector","hooks","type","NETWORK","web3Injected","web3InjectedHooks","injectedConnection","INJECTED","web3GnosisSafe","web3GnosisSafeHooks","gnosisSafeConnection","GNOSIS_SAFE","RPC_URLS_WITHOUT_FALLBACKS","Object","entries","reduce","map","chainId","urls","options","rpc","qrcode","web3WalletConnect","web3WalletConnectHooks","walletConnectConnection","WALLET_CONNECT","url","MAINNET","appName","appLogoUrl","UNISWAP_LOGO_URL","reloadOnDisconnect","web3CoinbaseWallet","web3CoinbaseWalletHooks","coinbaseWalletConnection","COINBASE_WALLET"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/connection/index.ts"],"sourcesContent":["import { CoinbaseWallet } from '@web3-react/coinbase-wallet'\nimport { initializeConnector, Web3ReactHooks } from '@web3-react/core'\nimport { GnosisSafe } from '@web3-react/gnosis-safe'\nimport { MetaMask } from '@web3-react/metamask'\nimport { Network } from '@web3-react/network'\nimport { Connector } from '@web3-react/types'\nimport { WalletConnect } from '@web3-react/walletconnect'\nimport { SupportedChainId } from 'constants/chains'\n\nimport UNISWAP_LOGO_URL from '../assets/svg/logo.svg'\nimport { RPC_URLS } from '../constants/networks'\nimport { RPC_PROVIDERS } from '../constants/providers'\n\nexport enum ConnectionType {\n  INJECTED = 'INJECTED',\n  COINBASE_WALLET = 'COINBASE_WALLET',\n  WALLET_CONNECT = 'WALLET_CONNECT',\n  NETWORK = 'NETWORK',\n  GNOSIS_SAFE = 'GNOSIS_SAFE',\n}\n\nexport interface Connection {\n  connector: Connector\n  hooks: Web3ReactHooks\n  type: ConnectionType\n}\n\nlet metaMaskErrorHandler: (error: Error) => void | undefined\n\nexport function setMetMaskErrorHandler(errorHandler: (error: Error) => void) {\n  metaMaskErrorHandler = errorHandler\n}\n\nfunction onError(error: Error) {\n  console.debug(`web3-react error: ${error}`)\n}\n\nfunction onMetamaskError(error: Error) {\n  onError(error)\n  metaMaskErrorHandler?.(error)\n}\n\nconst [web3Network, web3NetworkHooks] = initializeConnector<Network>(\n  (actions) => new Network({ actions, urlMap: RPC_PROVIDERS, defaultChainId: 137 })\n)\nexport const networkConnection: Connection = {\n  connector: web3Network,\n  hooks: web3NetworkHooks,\n  type: ConnectionType.NETWORK,\n}\n\nconst [web3Injected, web3InjectedHooks] = initializeConnector<MetaMask>(\n  (actions) => new MetaMask({ actions, onError: onMetamaskError })\n)\nexport const injectedConnection: Connection = {\n  connector: web3Injected,\n  hooks: web3InjectedHooks,\n  type: ConnectionType.INJECTED,\n}\n\nconst [web3GnosisSafe, web3GnosisSafeHooks] = initializeConnector<GnosisSafe>((actions) => new GnosisSafe({ actions }))\nexport const gnosisSafeConnection: Connection = {\n  connector: web3GnosisSafe,\n  hooks: web3GnosisSafeHooks,\n  type: ConnectionType.GNOSIS_SAFE,\n}\n\nconst [web3WalletConnect, web3WalletConnectHooks] = initializeConnector<WalletConnect>((actions) => {\n  // Avoid testing for the best URL by only passing a single URL per chain.\n  // Otherwise, WC will not initialize until all URLs have been tested (see getBestUrl in web3-react).\n  const RPC_URLS_WITHOUT_FALLBACKS = Object.entries(RPC_URLS).reduce(\n    (map, [chainId, urls]) => ({\n      ...map,\n      [chainId]: urls[0],\n    }),\n    {}\n  )\n  return new WalletConnect({\n    actions,\n    options: {\n      rpc: RPC_URLS_WITHOUT_FALLBACKS,\n      qrcode: true,\n    },\n    onError,\n  })\n})\nexport const walletConnectConnection: Connection = {\n  connector: web3WalletConnect,\n  hooks: web3WalletConnectHooks,\n  type: ConnectionType.WALLET_CONNECT,\n}\n\nconst [web3CoinbaseWallet, web3CoinbaseWalletHooks] = initializeConnector<CoinbaseWallet>(\n  (actions) =>\n    new CoinbaseWallet({\n      actions,\n      options: {\n        url: RPC_URLS[SupportedChainId.MAINNET][0],\n        appName: 'Uniswap',\n        appLogoUrl: UNISWAP_LOGO_URL,\n        reloadOnDisconnect: false,\n      },\n      onError,\n    })\n)\nexport const coinbaseWalletConnection: Connection = {\n  connector: web3CoinbaseWallet,\n  hooks: web3CoinbaseWalletHooks,\n  type: ConnectionType.COINBASE_WALLET,\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}