{"ast":null,"code":"var _s = $RefreshSig$();\nimport { TimePeriod } from 'graphql/data/util';\nimport { atom, useAtom } from 'jotai';\nimport { useCallback } from 'react';\nexport let TokenSortMethod;\n\n//export const filterStringAtom = atomWithReset<string>('')\n(function (TokenSortMethod) {\n  TokenSortMethod[\"feeTier\"] = \"feeTier\";\n  TokenSortMethod[\"volumeUSD\"] = \"volumeUSD\";\n  TokenSortMethod[\"tvlUSD\"] = \"tvlUSD\";\n  TokenSortMethod[\"volumeUSDWeek\"] = \"volumeUSDWeek\";\n  TokenSortMethod[\"tvlUSDChange\"] = \"tvlUSDChange\";\n})(TokenSortMethod || (TokenSortMethod = {}));\nexport const filterTimeAtom = atom(TimePeriod.DAY);\nexport const sortMethodAtom = atom(TokenSortMethod.tvlUSD);\nexport const sortAscendingAtom = atom(false);\n\n/* keep track of sort category for token table */\nexport function useSetSortMethod(newSortMethod) {\n  _s();\n  const [sortMethod, setSortMethod] = useAtom(sortMethodAtom);\n  const [sortAscending, setSortAscending] = useAtom(sortAscendingAtom);\n  return useCallback(() => {\n    if (sortMethod === newSortMethod) {\n      setSortAscending(!sortAscending);\n    } else {\n      setSortMethod(newSortMethod);\n      setSortAscending(false);\n    }\n  }, [sortMethod, setSortMethod, setSortAscending, sortAscending, newSortMethod]);\n}\n_s(useSetSortMethod, \"pTxGe2qQMcqfMi9GbBKml/SuP3g=\", false, function () {\n  return [useAtom, useAtom];\n});","map":{"version":3,"names":["TimePeriod","atom","useAtom","useCallback","TokenSortMethod","filterTimeAtom","DAY","sortMethodAtom","tvlUSD","sortAscendingAtom","useSetSortMethod","newSortMethod","sortMethod","setSortMethod","sortAscending","setSortAscending"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/components/Pools/state.ts"],"sourcesContent":["import { TimePeriod } from 'graphql/data/util'\nimport { atom, useAtom } from 'jotai'\nimport { atomWithReset } from 'jotai/utils'\nimport { useCallback } from 'react'\n\nexport enum TokenSortMethod {\n  feeTier = 'feeTier',\n  volumeUSD = 'volumeUSD',\n  tvlUSD = 'tvlUSD',\n  volumeUSDWeek = 'volumeUSDWeek',\n  tvlUSDChange = 'tvlUSDChange',\n}\n\n//export const filterStringAtom = atomWithReset<string>('')\nexport const filterTimeAtom = atom<TimePeriod>(TimePeriod.DAY)\nexport const sortMethodAtom = atom<TokenSortMethod>(TokenSortMethod.tvlUSD)\nexport const sortAscendingAtom = atom<boolean>(false)\n\n/* keep track of sort category for token table */\nexport function useSetSortMethod(newSortMethod: TokenSortMethod) {\n  const [sortMethod, setSortMethod] = useAtom(sortMethodAtom)\n  const [sortAscending, setSortAscending] = useAtom(sortAscendingAtom)\n\n  return useCallback(() => {\n    if (sortMethod === newSortMethod) {\n      setSortAscending(!sortAscending)\n    } else {\n      setSortMethod(newSortMethod)\n      setSortAscending(false)\n    }\n  }, [sortMethod, setSortMethod, setSortAscending, sortAscending, newSortMethod])\n}\n"],"mappings":";AAAA,SAASA,UAAU,QAAQ,mBAAmB;AAC9C,SAASC,IAAI,EAAEC,OAAO,QAAQ,OAAO;AAErC,SAASC,WAAW,QAAQ,OAAO;AAEnC,WAAYC,eAAe;;AAQ3B;AAAA,WARYA,eAAe;EAAfA,eAAe;EAAfA,eAAe;EAAfA,eAAe;EAAfA,eAAe;EAAfA,eAAe;AAAA,GAAfA,eAAe,KAAfA,eAAe;AAS3B,OAAO,MAAMC,cAAc,GAAGJ,IAAI,CAAaD,UAAU,CAACM,GAAG,CAAC;AAC9D,OAAO,MAAMC,cAAc,GAAGN,IAAI,CAAkBG,eAAe,CAACI,MAAM,CAAC;AAC3E,OAAO,MAAMC,iBAAiB,GAAGR,IAAI,CAAU,KAAK,CAAC;;AAErD;AACA,OAAO,SAASS,gBAAgB,CAACC,aAA8B,EAAE;EAAA;EAC/D,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGX,OAAO,CAACK,cAAc,CAAC;EAC3D,MAAM,CAACO,aAAa,EAAEC,gBAAgB,CAAC,GAAGb,OAAO,CAACO,iBAAiB,CAAC;EAEpE,OAAON,WAAW,CAAC,MAAM;IACvB,IAAIS,UAAU,KAAKD,aAAa,EAAE;MAChCI,gBAAgB,CAAC,CAACD,aAAa,CAAC;IAClC,CAAC,MAAM;MACLD,aAAa,CAACF,aAAa,CAAC;MAC5BI,gBAAgB,CAAC,KAAK,CAAC;IACzB;EACF,CAAC,EAAE,CAACH,UAAU,EAAEC,aAAa,EAAEE,gBAAgB,EAAED,aAAa,EAAEH,aAAa,CAAC,CAAC;AACjF;AAAC,GAZeD,gBAAgB;EAAA,QACMR,OAAO,EACDA,OAAO;AAAA"},"metadata":{},"sourceType":"module"}