{"ast":null,"code":"import CID from 'cids';\nimport { getNameFromData, rmPrefix } from 'multicodec';\nimport { decode, toB58String } from 'multihashes';\nexport function hexToUint8Array(hex) {\n  hex = hex.startsWith('0x') ? hex.substr(2) : hex;\n  if (hex.length % 2 !== 0) throw new Error('hex must have length that is multiple of 2');\n  const arr = new Uint8Array(hex.length / 2);\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = parseInt(hex.substr(i * 2, 2), 16);\n  }\n  return arr;\n}\nconst UTF_8_DECODER = new TextDecoder('utf-8');\n\n/**\n * Returns the URI representation of the content hash for supported codecs\n * @param contenthash to decode\n */\nexport default function contenthashToUri(contenthash) {\n  const data = hexToUint8Array(contenthash);\n  const codec = getNameFromData(data);\n  switch (codec) {\n    case 'ipfs-ns':\n      {\n        const unprefixedData = rmPrefix(data);\n        const cid = new CID(unprefixedData);\n        return `ipfs://${toB58String(cid.multihash)}`;\n      }\n    case 'ipns-ns':\n      {\n        const unprefixedData = rmPrefix(data);\n        const cid = new CID(unprefixedData);\n        const multihash = decode(cid.multihash);\n        if (multihash.name === 'identity') {\n          return `ipns://${UTF_8_DECODER.decode(multihash.digest).trim()}`;\n        } else {\n          return `ipns://${toB58String(cid.multihash)}`;\n        }\n      }\n    default:\n      throw new Error(`Unrecognized codec: ${codec}`);\n  }\n}","map":{"version":3,"names":["CID","getNameFromData","rmPrefix","decode","toB58String","hexToUint8Array","hex","startsWith","substr","length","Error","arr","Uint8Array","i","parseInt","UTF_8_DECODER","TextDecoder","contenthashToUri","contenthash","data","codec","unprefixedData","cid","multihash","name","digest","trim"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/lib/utils/contenthashToUri.ts"],"sourcesContent":["import CID from 'cids'\nimport { getNameFromData, rmPrefix } from 'multicodec'\nimport { decode, toB58String } from 'multihashes'\n\nexport function hexToUint8Array(hex: string): Uint8Array {\n  hex = hex.startsWith('0x') ? hex.substr(2) : hex\n  if (hex.length % 2 !== 0) throw new Error('hex must have length that is multiple of 2')\n  const arr = new Uint8Array(hex.length / 2)\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = parseInt(hex.substr(i * 2, 2), 16)\n  }\n  return arr\n}\n\nconst UTF_8_DECODER = new TextDecoder('utf-8')\n\n/**\n * Returns the URI representation of the content hash for supported codecs\n * @param contenthash to decode\n */\nexport default function contenthashToUri(contenthash: string): string {\n  const data = hexToUint8Array(contenthash)\n  const codec = getNameFromData(data)\n  switch (codec) {\n    case 'ipfs-ns': {\n      const unprefixedData = rmPrefix(data)\n      const cid = new CID(unprefixedData)\n      return `ipfs://${toB58String(cid.multihash)}`\n    }\n    case 'ipns-ns': {\n      const unprefixedData = rmPrefix(data)\n      const cid = new CID(unprefixedData)\n      const multihash = decode(cid.multihash)\n      if (multihash.name === 'identity') {\n        return `ipns://${UTF_8_DECODER.decode(multihash.digest).trim()}`\n      } else {\n        return `ipns://${toB58String(cid.multihash)}`\n      }\n    }\n    default:\n      throw new Error(`Unrecognized codec: ${codec}`)\n  }\n}\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,MAAM;AACtB,SAASC,eAAe,EAAEC,QAAQ,QAAQ,YAAY;AACtD,SAASC,MAAM,EAAEC,WAAW,QAAQ,aAAa;AAEjD,OAAO,SAASC,eAAe,CAACC,GAAW,EAAc;EACvDA,GAAG,GAAGA,GAAG,CAACC,UAAU,CAAC,IAAI,CAAC,GAAGD,GAAG,CAACE,MAAM,CAAC,CAAC,CAAC,GAAGF,GAAG;EAChD,IAAIA,GAAG,CAACG,MAAM,GAAG,CAAC,KAAK,CAAC,EAAE,MAAM,IAAIC,KAAK,CAAC,4CAA4C,CAAC;EACvF,MAAMC,GAAG,GAAG,IAAIC,UAAU,CAACN,GAAG,CAACG,MAAM,GAAG,CAAC,CAAC;EAC1C,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,GAAG,CAACF,MAAM,EAAEI,CAAC,EAAE,EAAE;IACnCF,GAAG,CAACE,CAAC,CAAC,GAAGC,QAAQ,CAACR,GAAG,CAACE,MAAM,CAACK,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;EAC7C;EACA,OAAOF,GAAG;AACZ;AAEA,MAAMI,aAAa,GAAG,IAAIC,WAAW,CAAC,OAAO,CAAC;;AAE9C;AACA;AACA;AACA;AACA,eAAe,SAASC,gBAAgB,CAACC,WAAmB,EAAU;EACpE,MAAMC,IAAI,GAAGd,eAAe,CAACa,WAAW,CAAC;EACzC,MAAME,KAAK,GAAGnB,eAAe,CAACkB,IAAI,CAAC;EACnC,QAAQC,KAAK;IACX,KAAK,SAAS;MAAE;QACd,MAAMC,cAAc,GAAGnB,QAAQ,CAACiB,IAAI,CAAC;QACrC,MAAMG,GAAG,GAAG,IAAItB,GAAG,CAACqB,cAAc,CAAC;QACnC,OAAQ,UAASjB,WAAW,CAACkB,GAAG,CAACC,SAAS,CAAE,EAAC;MAC/C;IACA,KAAK,SAAS;MAAE;QACd,MAAMF,cAAc,GAAGnB,QAAQ,CAACiB,IAAI,CAAC;QACrC,MAAMG,GAAG,GAAG,IAAItB,GAAG,CAACqB,cAAc,CAAC;QACnC,MAAME,SAAS,GAAGpB,MAAM,CAACmB,GAAG,CAACC,SAAS,CAAC;QACvC,IAAIA,SAAS,CAACC,IAAI,KAAK,UAAU,EAAE;UACjC,OAAQ,UAAST,aAAa,CAACZ,MAAM,CAACoB,SAAS,CAACE,MAAM,CAAC,CAACC,IAAI,EAAG,EAAC;QAClE,CAAC,MAAM;UACL,OAAQ,UAAStB,WAAW,CAACkB,GAAG,CAACC,SAAS,CAAE,EAAC;QAC/C;MACF;IACA;MACE,MAAM,IAAIb,KAAK,CAAE,uBAAsBU,KAAM,EAAC,CAAC;EAAA;AAErD"},"metadata":{},"sourceType":"module"}