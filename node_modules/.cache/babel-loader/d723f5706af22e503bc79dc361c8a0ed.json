{"ast":null,"code":"import{CeloNetworkInfo,PolygonNetworkInfo}from'constants/networks';import{CELO_ADDRESS,MATIC_ADDRESS,WETH_ADDRESSES}from'../constants';export function formatTokenSymbol(address,symbol,activeNetwork){// dumb catch for matic\nif(address===MATIC_ADDRESS&&activeNetwork===PolygonNetworkInfo){return'MATIC';}// dumb catch for Celo\nif(address===CELO_ADDRESS&&activeNetwork===CeloNetworkInfo){return'CELO';}if(WETH_ADDRESSES.includes(address)){return'ETH';}return symbol;}export function formatTokenName(address,name,activeNetwork){// dumb catch for matic\nif(address===MATIC_ADDRESS&&activeNetwork===PolygonNetworkInfo){return'MATIC';}// dumb catch for Celo\nif(address===CELO_ADDRESS&&activeNetwork===CeloNetworkInfo){return'CELO';}if(WETH_ADDRESSES.includes(address)){return'Ether';}return name;}","map":{"version":3,"names":["CeloNetworkInfo","PolygonNetworkInfo","CELO_ADDRESS","MATIC_ADDRESS","WETH_ADDRESSES","formatTokenSymbol","address","symbol","activeNetwork","includes","formatTokenName","name"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/utils/tokens.ts"],"sourcesContent":["import { CeloNetworkInfo, NetworkInfo, PolygonNetworkInfo } from 'constants/networks'\n\nimport { CELO_ADDRESS, MATIC_ADDRESS, WETH_ADDRESSES } from '../constants'\n\nexport function formatTokenSymbol(address: string, symbol: string, activeNetwork?: NetworkInfo) {\n  // dumb catch for matic\n  if (address === MATIC_ADDRESS && activeNetwork === PolygonNetworkInfo) {\n    return 'MATIC'\n  }\n\n  // dumb catch for Celo\n  if (address === CELO_ADDRESS && activeNetwork === CeloNetworkInfo) {\n    return 'CELO'\n  }\n\n  if (WETH_ADDRESSES.includes(address)) {\n    return 'ETH'\n  }\n  return symbol\n}\n\nexport function formatTokenName(address: string, name: string, activeNetwork?: NetworkInfo) {\n  // dumb catch for matic\n  if (address === MATIC_ADDRESS && activeNetwork === PolygonNetworkInfo) {\n    return 'MATIC'\n  }\n\n  // dumb catch for Celo\n  if (address === CELO_ADDRESS && activeNetwork === CeloNetworkInfo) {\n    return 'CELO'\n  }\n\n  if (WETH_ADDRESSES.includes(address)) {\n    return 'Ether'\n  }\n  return name\n}\n"],"mappings":"AAAA,OAASA,eAAe,CAAeC,kBAAkB,KAAQ,oBAAoB,CAErF,OAASC,YAAY,CAAEC,aAAa,CAAEC,cAAc,KAAQ,cAAc,CAE1E,MAAO,SAASC,kBAAiB,CAACC,OAAe,CAAEC,MAAc,CAAEC,aAA2B,CAAE,CAC9F;AACA,GAAIF,OAAO,GAAKH,aAAa,EAAIK,aAAa,GAAKP,kBAAkB,CAAE,CACrE,MAAO,OAAO,CAChB,CAEA;AACA,GAAIK,OAAO,GAAKJ,YAAY,EAAIM,aAAa,GAAKR,eAAe,CAAE,CACjE,MAAO,MAAM,CACf,CAEA,GAAII,cAAc,CAACK,QAAQ,CAACH,OAAO,CAAC,CAAE,CACpC,MAAO,KAAK,CACd,CACA,MAAOC,OAAM,CACf,CAEA,MAAO,SAASG,gBAAe,CAACJ,OAAe,CAAEK,IAAY,CAAEH,aAA2B,CAAE,CAC1F;AACA,GAAIF,OAAO,GAAKH,aAAa,EAAIK,aAAa,GAAKP,kBAAkB,CAAE,CACrE,MAAO,OAAO,CAChB,CAEA;AACA,GAAIK,OAAO,GAAKJ,YAAY,EAAIM,aAAa,GAAKR,eAAe,CAAE,CACjE,MAAO,MAAM,CACf,CAEA,GAAII,cAAc,CAACK,QAAQ,CAACH,OAAO,CAAC,CAAE,CACpC,MAAO,OAAO,CAChB,CACA,MAAOK,KAAI,CACb"},"metadata":{},"sourceType":"module"}