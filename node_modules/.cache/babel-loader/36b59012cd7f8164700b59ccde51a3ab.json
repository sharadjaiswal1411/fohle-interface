{"ast":null,"code":"import retry from 'async-retry';\nimport Timeout from 'await-timeout';\nimport { gql, GraphQLClient } from 'graphql-request';\nimport _ from 'lodash';\nimport { ChainId, log } from '../../util';\nexport const printV3SubgraphPool = s => `${s.token0.id}/${s.token1.id}/${s.feeTier}`;\nexport const printV2SubgraphPool = s => `${s.token0.id}/${s.token1.id}`;\nconst SUBGRAPH_URL_BY_CHAIN = {\n  [ChainId.MAINNET]: 'https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v3',\n  [ChainId.RINKEBY]: 'https://api.thegraph.com/subgraphs/name/ianlapham/uniswap-v3-rinkeby',\n  [ChainId.OPTIMISM]: 'https://api.thegraph.com/subgraphs/name/ianlapham/optimism-post-regenesis',\n  [ChainId.ARBITRUM_ONE]: 'https://api.thegraph.com/subgraphs/name/ianlapham/arbitrum-minimal',\n  [ChainId.POLYGON]: 'https://api.thegraph.com/subgraphs/name/ianlapham/uniswap-v3-polygon',\n  [ChainId.CELO]: 'https://api.thegraph.com/subgraphs/name/jesse-sawa/uniswap-celo',\n  [ChainId.GÖRLI]: 'https://api.thegraph.com/subgraphs/name/ianlapham/uniswap-v3-gorli'\n};\nconst PAGE_SIZE = 1000; // 1k is max possible query size from subgraph.\nexport class V3SubgraphProvider {\n  constructor(chainId) {\n    let retries = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n    let timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 30000;\n    let rollback = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    this.chainId = chainId;\n    this.retries = retries;\n    this.timeout = timeout;\n    this.rollback = rollback;\n    const subgraphUrl = SUBGRAPH_URL_BY_CHAIN[this.chainId];\n    if (!subgraphUrl) {\n      throw new Error(`No subgraph url for chain id: ${this.chainId}`);\n    }\n    this.client = new GraphQLClient(subgraphUrl);\n  }\n  async getPools(_tokenIn, _tokenOut, providerConfig) {\n    let blockNumber = (providerConfig === null || providerConfig === void 0 ? void 0 : providerConfig.blockNumber) ? await providerConfig.blockNumber : undefined;\n    const query = gql`\n      query getPools($pageSize: Int!, $id: String) {\n        pools(\n          first: $pageSize\n          ${blockNumber ? `block: { number: ${blockNumber} }` : ``}\n          where: { id_gt: $id }\n        ) {\n          id\n          token0 {\n            symbol\n            id\n          }\n          token1 {\n            symbol\n            id\n          }\n          feeTier\n          liquidity\n          totalValueLockedUSD\n          totalValueLockedETH\n        }\n      }\n    `;\n    let pools = [];\n    log.info(`Getting V3 pools from the subgraph with page size ${PAGE_SIZE}${(providerConfig === null || providerConfig === void 0 ? void 0 : providerConfig.blockNumber) ? ` as of block ${providerConfig === null || providerConfig === void 0 ? void 0 : providerConfig.blockNumber}` : ''}.`);\n    await retry(async () => {\n      const timeout = new Timeout();\n      const getPools = async () => {\n        let lastId = '';\n        let pools = [];\n        let poolsPage = [];\n        do {\n          const poolsResult = await this.client.request(query, {\n            pageSize: PAGE_SIZE,\n            id: lastId\n          });\n          poolsPage = poolsResult.pools;\n          pools = pools.concat(poolsPage);\n          lastId = pools[pools.length - 1].id;\n        } while (poolsPage.length > 0);\n        return pools;\n      };\n      /* eslint-disable no-useless-catch */\n      try {\n        const getPoolsPromise = getPools();\n        const timerPromise = timeout.set(this.timeout).then(() => {\n          throw new Error(`Timed out getting pools from subgraph: ${this.timeout}`);\n        });\n        pools = await Promise.race([getPoolsPromise, timerPromise]);\n        return;\n      } catch (err) {\n        throw err;\n      } finally {\n        timeout.clear();\n      }\n      /* eslint-enable no-useless-catch */\n    }, {\n      retries: this.retries,\n      onRetry: (err, retry) => {\n        if (this.rollback && blockNumber && _.includes(err.message, 'indexed up to')) {\n          blockNumber = blockNumber - 10;\n          log.info(`Detected subgraph indexing error. Rolled back block number to: ${blockNumber}`);\n        }\n        pools = [];\n        log.info({\n          err\n        }, `Failed to get pools from subgraph. Retry attempt: ${retry}`);\n      }\n    });\n    const poolsSanitized = pools.filter(pool => parseInt(pool.liquidity) > 0).map(pool => {\n      const {\n        totalValueLockedETH,\n        totalValueLockedUSD,\n        ...rest\n      } = pool;\n      return {\n        ...rest,\n        id: pool.id.toLowerCase(),\n        token0: {\n          id: pool.token0.id.toLowerCase()\n        },\n        token1: {\n          id: pool.token1.id.toLowerCase()\n        },\n        tvlETH: parseFloat(totalValueLockedETH),\n        tvlUSD: parseFloat(totalValueLockedUSD)\n      };\n    });\n    log.info(`Got ${pools.length} V3 pools from the subgraph. ${poolsSanitized.length} after filtering`);\n    return poolsSanitized;\n  }\n}","map":{"version":3,"sources":["../../../../src/providers/v3/subgraph-provider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import retry from 'async-retry';\nimport Timeout from 'await-timeout';\nimport { gql, GraphQLClient } from 'graphql-request';\nimport _ from 'lodash';\nimport { ChainId, log } from '../../util';\nexport const printV3SubgraphPool = (s) => `${s.token0.id}/${s.token1.id}/${s.feeTier}`;\nexport const printV2SubgraphPool = (s) => `${s.token0.id}/${s.token1.id}`;\nconst SUBGRAPH_URL_BY_CHAIN = {\n    [ChainId.MAINNET]: 'https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v3',\n    [ChainId.RINKEBY]: 'https://api.thegraph.com/subgraphs/name/ianlapham/uniswap-v3-rinkeby',\n    [ChainId.OPTIMISM]: 'https://api.thegraph.com/subgraphs/name/ianlapham/optimism-post-regenesis',\n    [ChainId.ARBITRUM_ONE]: 'https://api.thegraph.com/subgraphs/name/ianlapham/arbitrum-minimal',\n    [ChainId.POLYGON]: 'https://api.thegraph.com/subgraphs/name/ianlapham/uniswap-v3-polygon',\n    [ChainId.CELO]: 'https://api.thegraph.com/subgraphs/name/jesse-sawa/uniswap-celo',\n    [ChainId.GÖRLI]: 'https://api.thegraph.com/subgraphs/name/ianlapham/uniswap-v3-gorli',\n};\nconst PAGE_SIZE = 1000; // 1k is max possible query size from subgraph.\nexport class V3SubgraphProvider {\n    constructor(chainId, retries = 2, timeout = 30000, rollback = true) {\n        this.chainId = chainId;\n        this.retries = retries;\n        this.timeout = timeout;\n        this.rollback = rollback;\n        const subgraphUrl = SUBGRAPH_URL_BY_CHAIN[this.chainId];\n        if (!subgraphUrl) {\n            throw new Error(`No subgraph url for chain id: ${this.chainId}`);\n        }\n        this.client = new GraphQLClient(subgraphUrl);\n    }\n    async getPools(_tokenIn, _tokenOut, providerConfig) {\n        let blockNumber = (providerConfig === null || providerConfig === void 0 ? void 0 : providerConfig.blockNumber)\n            ? await providerConfig.blockNumber\n            : undefined;\n        const query = gql `\n      query getPools($pageSize: Int!, $id: String) {\n        pools(\n          first: $pageSize\n          ${blockNumber ? `block: { number: ${blockNumber} }` : ``}\n          where: { id_gt: $id }\n        ) {\n          id\n          token0 {\n            symbol\n            id\n          }\n          token1 {\n            symbol\n            id\n          }\n          feeTier\n          liquidity\n          totalValueLockedUSD\n          totalValueLockedETH\n        }\n      }\n    `;\n        let pools = [];\n        log.info(`Getting V3 pools from the subgraph with page size ${PAGE_SIZE}${(providerConfig === null || providerConfig === void 0 ? void 0 : providerConfig.blockNumber)\n            ? ` as of block ${providerConfig === null || providerConfig === void 0 ? void 0 : providerConfig.blockNumber}`\n            : ''}.`);\n        await retry(async () => {\n            const timeout = new Timeout();\n            const getPools = async () => {\n                let lastId = '';\n                let pools = [];\n                let poolsPage = [];\n                do {\n                    const poolsResult = await this.client.request(query, {\n                        pageSize: PAGE_SIZE,\n                        id: lastId,\n                    });\n                    poolsPage = poolsResult.pools;\n                    pools = pools.concat(poolsPage);\n                    lastId = pools[pools.length - 1].id;\n                } while (poolsPage.length > 0);\n                return pools;\n            };\n            /* eslint-disable no-useless-catch */\n            try {\n                const getPoolsPromise = getPools();\n                const timerPromise = timeout.set(this.timeout).then(() => {\n                    throw new Error(`Timed out getting pools from subgraph: ${this.timeout}`);\n                });\n                pools = await Promise.race([getPoolsPromise, timerPromise]);\n                return;\n            }\n            catch (err) {\n                throw err;\n            }\n            finally {\n                timeout.clear();\n            }\n            /* eslint-enable no-useless-catch */\n        }, {\n            retries: this.retries,\n            onRetry: (err, retry) => {\n                if (this.rollback &&\n                    blockNumber &&\n                    _.includes(err.message, 'indexed up to')) {\n                    blockNumber = blockNumber - 10;\n                    log.info(`Detected subgraph indexing error. Rolled back block number to: ${blockNumber}`);\n                }\n                pools = [];\n                log.info({ err }, `Failed to get pools from subgraph. Retry attempt: ${retry}`);\n            },\n        });\n        const poolsSanitized = pools\n            .filter((pool) => parseInt(pool.liquidity) > 0)\n            .map((pool) => {\n            const { totalValueLockedETH, totalValueLockedUSD, ...rest } = pool;\n            return {\n                ...rest,\n                id: pool.id.toLowerCase(),\n                token0: {\n                    id: pool.token0.id.toLowerCase(),\n                },\n                token1: {\n                    id: pool.token1.id.toLowerCase(),\n                },\n                tvlETH: parseFloat(totalValueLockedETH),\n                tvlUSD: parseFloat(totalValueLockedUSD),\n            };\n        });\n        log.info(`Got ${pools.length} V3 pools from the subgraph. ${poolsSanitized.length} after filtering`);\n        return poolsSanitized;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ViZ3JhcGgtcHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvcHJvdmlkZXJzL3YzL3N1YmdyYXBoLXByb3ZpZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sS0FBSyxNQUFNLGFBQWEsQ0FBQztBQUNoQyxPQUFPLE9BQU8sTUFBTSxlQUFlLENBQUM7QUFDcEMsT0FBTyxFQUFFLEdBQUcsRUFBRSxhQUFhLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNyRCxPQUFPLENBQUMsTUFBTSxRQUFRLENBQUM7QUFFdkIsT0FBTyxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFrQzFDLE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHLENBQUMsQ0FBaUIsRUFBRSxFQUFFLENBQ3ZELEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBRS9DLE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHLENBQUMsQ0FBaUIsRUFBRSxFQUFFLENBQ3ZELEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsQ0FBQztBQUVsQyxNQUFNLHFCQUFxQixHQUFzQztJQUMvRCxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFDZiw0REFBNEQ7SUFDOUQsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQ2Ysc0VBQXNFO0lBQ3hFLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUNoQiwyRUFBMkU7SUFDN0UsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLEVBQ3BCLG9FQUFvRTtJQUN0RSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFDZixzRUFBc0U7SUFDeEUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQ1os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"]},"metadata":{},"sourceType":"module"}