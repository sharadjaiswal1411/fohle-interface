{"ast":null,"code":"var _jsxFileName = \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/components/WalletModal/InjectedOption.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { Trans } from \"@lingui/react\";\nimport INJECTED_ICON_URL from \"assets/images/arrow-right.svg\";\nimport METAMASK_ICON_URL from 'assets/images/metamask.png';\nimport { ConnectionType, injectedConnection } from 'connection';\nimport { getConnectionName } from 'connection/utils';\nimport Option from './Option';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst INJECTED_PROPS = {\n  color: '#010101',\n  icon: INJECTED_ICON_URL,\n  id: 'injected'\n};\nconst METAMASK_PROPS = {\n  color: '#E8831D',\n  icon: METAMASK_ICON_URL,\n  id: 'metamask'\n};\nexport function InstallMetaMaskOption() {\n  return /*#__PURE__*/_jsxDEV(Option, {\n    ...METAMASK_PROPS,\n    header: /*#__PURE__*/_jsxDEV(Trans, {\n      id: \"Install MetaMask\"\n    }, void 0, false, void 0, this),\n    link: \"https://metamask.io/\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 10\n  }, this);\n}\n_c = InstallMetaMaskOption;\nexport function MetaMaskOption(_ref) {\n  _s();\n  let {\n    tryActivation\n  } = _ref;\n  const isActive = injectedConnection.hooks.useIsActive();\n  return /*#__PURE__*/_jsxDEV(Option, {\n    ...METAMASK_PROPS,\n    isActive: isActive,\n    header: getConnectionName(ConnectionType.INJECTED, true),\n    onClick: () => tryActivation(injectedConnection.connector)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n}\n_s(MetaMaskOption, \"+DiOJP6BB2sxCtOny+O6ZxSVbyE=\", true);\n_c2 = MetaMaskOption;\nexport function InjectedOption(_ref2) {\n  _s2();\n  let {\n    tryActivation\n  } = _ref2;\n  const isActive = injectedConnection.hooks.useIsActive();\n  return /*#__PURE__*/_jsxDEV(Option, {\n    ...INJECTED_PROPS,\n    isActive: isActive,\n    header: getConnectionName(ConnectionType.INJECTED, false),\n    onClick: () => tryActivation(injectedConnection.connector)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n_s2(InjectedOption, \"+DiOJP6BB2sxCtOny+O6ZxSVbyE=\", true);\n_c3 = InjectedOption;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"InstallMetaMaskOption\");\n$RefreshReg$(_c2, \"MetaMaskOption\");\n$RefreshReg$(_c3, \"InjectedOption\");","map":{"version":3,"names":["METAMASK_ICON_URL","ConnectionType","injectedConnection","getConnectionName","Option","INJECTED_PROPS","color","icon","INJECTED_ICON_URL","id","METAMASK_PROPS","InstallMetaMaskOption","MetaMaskOption","tryActivation","isActive","hooks","useIsActive","INJECTED","connector","InjectedOption"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/components/WalletModal/InjectedOption.tsx"],"sourcesContent":["import { Trans } from '@lingui/macro'\nimport { Connector } from '@web3-react/types'\nimport INJECTED_ICON_URL from 'assets/images/arrow-right.svg'\nimport METAMASK_ICON_URL from 'assets/images/metamask.png'\nimport { ConnectionType, injectedConnection } from 'connection'\nimport { getConnectionName } from 'connection/utils'\n\nimport Option from './Option'\n\nconst INJECTED_PROPS = {\n  color: '#010101',\n  icon: INJECTED_ICON_URL,\n  id: 'injected',\n}\n\nconst METAMASK_PROPS = {\n  color: '#E8831D',\n  icon: METAMASK_ICON_URL,\n  id: 'metamask',\n}\n\nexport function InstallMetaMaskOption() {\n  return <Option {...METAMASK_PROPS} header={<Trans>Install MetaMask</Trans>} link=\"https://metamask.io/\" />\n}\n\nexport function MetaMaskOption({ tryActivation }: { tryActivation: (connector: Connector) => void }) {\n  const isActive = injectedConnection.hooks.useIsActive()\n  return (\n    <Option\n      {...METAMASK_PROPS}\n      isActive={isActive}\n      header={getConnectionName(ConnectionType.INJECTED, true)}\n      onClick={() => tryActivation(injectedConnection.connector)}\n    />\n  )\n}\n\nexport function InjectedOption({ tryActivation }: { tryActivation: (connector: Connector) => void }) {\n  const isActive = injectedConnection.hooks.useIsActive()\n  return (\n    <Option\n      {...INJECTED_PROPS}\n      isActive={isActive}\n      header={getConnectionName(ConnectionType.INJECTED, false)}\n      onClick={() => tryActivation(injectedConnection.connector)}\n    />\n  )\n}\n"],"mappings":";;;;;AAGA,OAAOA,iBAAiB,MAAM,4BAA4B;AAC1D,SAASC,cAAc,EAAEC,kBAAkB,QAAQ,YAAY;AAC/D,SAASC,iBAAiB,QAAQ,kBAAkB;AAEpD,OAAOC,MAAM,MAAM,UAAU;AAAA;AAE7B,MAAMC,cAAc,GAAG;EACrBC,KAAK,EAAE,SAAS;EAChBC,IAAI,EAAEC,iBAAiB;EACvBC,EAAE,EAAE;AACN,CAAC;AAED,MAAMC,cAAc,GAAG;EACrBJ,KAAK,EAAE,SAAS;EAChBC,IAAI,EAAEP,iBAAiB;EACvBS,EAAE,EAAE;AACN,CAAC;AAED,OAAO,SAASE,qBAAqB,GAAG;EACtC,oBAAO,QAAC,MAAM;IAAA,GAAKD,cAAc;IAAE,MAAM,eAAE;MAAA;IAAA,+BAAgC;IAAC,IAAI,EAAC;EAAsB;IAAA;IAAA;IAAA;EAAA,QAAG;AAC5G;AAAC,KAFeC,qBAAqB;AAIrC,OAAO,SAASC,cAAc,OAAuE;EAAA;EAAA,IAAtE;IAAEC;EAAiE,CAAC;EACjG,MAAMC,QAAQ,GAAGZ,kBAAkB,CAACa,KAAK,CAACC,WAAW,EAAE;EACvD,oBACE,QAAC,MAAM;IAAA,GACDN,cAAc;IAClB,QAAQ,EAAEI,QAAS;IACnB,MAAM,EAAEX,iBAAiB,CAACF,cAAc,CAACgB,QAAQ,EAAE,IAAI,CAAE;IACzD,OAAO,EAAE,MAAMJ,aAAa,CAACX,kBAAkB,CAACgB,SAAS;EAAE;IAAA;IAAA;IAAA;EAAA,QAC3D;AAEN;AAAC,GAVeN,cAAc;AAAA,MAAdA,cAAc;AAY9B,OAAO,SAASO,cAAc,QAAuE;EAAA;EAAA,IAAtE;IAAEN;EAAiE,CAAC;EACjG,MAAMC,QAAQ,GAAGZ,kBAAkB,CAACa,KAAK,CAACC,WAAW,EAAE;EACvD,oBACE,QAAC,MAAM;IAAA,GACDX,cAAc;IAClB,QAAQ,EAAES,QAAS;IACnB,MAAM,EAAEX,iBAAiB,CAACF,cAAc,CAACgB,QAAQ,EAAE,KAAK,CAAE;IAC1D,OAAO,EAAE,MAAMJ,aAAa,CAACX,kBAAkB,CAACgB,SAAS;EAAE;IAAA;IAAA;IAAA;EAAA,QAC3D;AAEN;AAAC,IAVeC,cAAc;AAAA,MAAdA,cAAc;AAAA;AAAA;AAAA;AAAA"},"metadata":{},"sourceType":"module"}