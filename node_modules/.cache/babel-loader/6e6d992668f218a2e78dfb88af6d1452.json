{"ast":null,"code":"var _jsxFileName = \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/components/Widget/inputs.tsx\",\n  _s = $RefreshSig$();\nimport { sendAnalyticsEvent, useTrace } from '@uniswap/analytics';\nimport { EventName, SectionName } from '@uniswap/analytics-events';\nimport { Field, TradeType } from '@uniswap/widgets';\nimport CurrencySearchModal from 'components/SearchModal/CurrencySearchModal';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EMPTY_AMOUNT = '';\nfunction includesDefaultToken(tokens) {\n  var _tokens$Field$INPUT, _tokens$Field$OUTPUT;\n  if (!tokens.default) return true;\n  return ((_tokens$Field$INPUT = tokens[Field.INPUT]) === null || _tokens$Field$INPUT === void 0 ? void 0 : _tokens$Field$INPUT.equals(tokens.default)) || ((_tokens$Field$OUTPUT = tokens[Field.OUTPUT]) === null || _tokens$Field$OUTPUT === void 0 ? void 0 : _tokens$Field$OUTPUT.equals(tokens.default));\n}\n\n/**\n * Integrates the Widget's inputs.\n * Treats the Widget as a controlled component, using the app's own token selector for selection.\n * Enforces that token is a part of the returned value.\n */\nexport function useSyncWidgetInputs(_ref) {\n  _s();\n  let {\n    token,\n    onTokenChange\n  } = _ref;\n  const trace = useTrace({\n    section: SectionName.WIDGET\n  });\n  const [type, setType] = useState(TradeType.EXACT_INPUT);\n  const [amount, setAmount] = useState(EMPTY_AMOUNT);\n  const [tokens, setTokens] = useState({\n    [Field.OUTPUT]: token,\n    default: token\n  });\n  useEffect(() => {\n    setTokens(tokens => {\n      const update = {\n        ...tokens,\n        default: token\n      };\n      if (!includesDefaultToken(update)) {\n        return {\n          [Field.OUTPUT]: update.default,\n          default: update.default\n        };\n      }\n      return update;\n    });\n  }, [token]);\n  const onAmountChange = useCallback((field, amount, origin) => {\n    if (origin === 'max') {\n      sendAnalyticsEvent(EventName.SWAP_MAX_TOKEN_AMOUNT_SELECTED, {\n        ...trace\n      });\n    }\n    setType(field === Field.INPUT ? TradeType.EXACT_INPUT : TradeType.EXACT_OUTPUT);\n    setAmount(amount);\n  }, [trace]);\n  const onSwitchTokens = useCallback(() => {\n    sendAnalyticsEvent(EventName.SWAP_TOKENS_REVERSED, {\n      ...trace\n    });\n    setType(type => invertTradeType(type));\n    setTokens(tokens => ({\n      [Field.INPUT]: tokens[Field.OUTPUT],\n      [Field.OUTPUT]: tokens[Field.INPUT],\n      default: tokens.default\n    }));\n  }, [trace]);\n  const [selectingField, setSelectingField] = useState();\n  const onTokenSelectorClick = useCallback(field => {\n    setSelectingField(field);\n    return false;\n  }, []);\n  const onTokenSelect = useCallback(selectingToken => {\n    var _tokens$otherField;\n    if (selectingField === undefined) return;\n    const otherField = invertField(selectingField);\n    const isFlip = (_tokens$otherField = tokens[otherField]) === null || _tokens$otherField === void 0 ? void 0 : _tokens$otherField.equals(selectingToken);\n    const update = {\n      [selectingField]: selectingToken,\n      [otherField]: isFlip ? tokens[selectingField] : tokens[otherField],\n      default: tokens.default\n    };\n    setType(type => {\n      // If flipping the tokens, also flip the type/amount.\n      if (isFlip) {\n        return invertTradeType(type);\n      }\n\n      // Setting a new token should clear its amount, if it is set.\n      const activeField = type === TradeType.EXACT_INPUT ? Field.INPUT : Field.OUTPUT;\n      if (selectingField === activeField) {\n        setAmount(() => EMPTY_AMOUNT);\n      }\n      return type;\n    });\n    if (!includesDefaultToken(update)) {\n      onTokenChange === null || onTokenChange === void 0 ? void 0 : onTokenChange(update[Field.OUTPUT] || selectingToken);\n    }\n    setTokens(update);\n  }, [onTokenChange, selectingField, tokens]);\n  const tokenSelector = /*#__PURE__*/_jsxDEV(CurrencySearchModal, {\n    isOpen: selectingField !== undefined,\n    onDismiss: () => setSelectingField(undefined),\n    selectedCurrency: selectingField && tokens[selectingField],\n    otherSelectedCurrency: selectingField && tokens[invertField(selectingField)],\n    onCurrencySelect: onTokenSelect\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n  const value = useMemo(() => {\n    var _tokens$default;\n    return {\n      type,\n      amount,\n      // If the default has not yet been handled, preemptively disable the widget by passing no tokens. Effectively,\n      // this resets the widget - avoiding rendering stale state - because with no tokens the skeleton will be rendered.\n      ...(token && ((_tokens$default = tokens.default) === null || _tokens$default === void 0 ? void 0 : _tokens$default.equals(token)) ? tokens : undefined)\n    };\n  }, [amount, token, tokens, type]);\n  const valueHandlers = useMemo(() => ({\n    onAmountChange,\n    onSwitchTokens,\n    onTokenSelectorClick\n  }), [onAmountChange, onSwitchTokens, onTokenSelectorClick]);\n  return {\n    inputs: {\n      value,\n      ...valueHandlers\n    },\n    tokenSelector\n  };\n}\n\n// TODO(zzmp): Move to @uniswap/widgets.\n_s(useSyncWidgetInputs, \"HfUnZy1xfWtEgKJmt60z7Td02Bc=\", false, function () {\n  return [useTrace];\n});\nfunction invertField(field) {\n  switch (field) {\n    case Field.INPUT:\n      return Field.OUTPUT;\n    case Field.OUTPUT:\n      return Field.INPUT;\n  }\n}\n\n// TODO(zzmp): Include in @uniswap/sdk-core (on TradeType, if possible).\nfunction invertTradeType(tradeType) {\n  switch (tradeType) {\n    case TradeType.EXACT_INPUT:\n      return TradeType.EXACT_OUTPUT;\n    case TradeType.EXACT_OUTPUT:\n      return TradeType.EXACT_INPUT;\n  }\n}","map":{"version":3,"names":["sendAnalyticsEvent","useTrace","EventName","SectionName","Field","TradeType","CurrencySearchModal","useCallback","useEffect","useMemo","useState","EMPTY_AMOUNT","includesDefaultToken","tokens","default","INPUT","equals","OUTPUT","useSyncWidgetInputs","token","onTokenChange","trace","section","WIDGET","type","setType","EXACT_INPUT","amount","setAmount","setTokens","update","onAmountChange","field","origin","SWAP_MAX_TOKEN_AMOUNT_SELECTED","EXACT_OUTPUT","onSwitchTokens","SWAP_TOKENS_REVERSED","invertTradeType","selectingField","setSelectingField","onTokenSelectorClick","onTokenSelect","selectingToken","undefined","otherField","invertField","isFlip","activeField","tokenSelector","value","valueHandlers","inputs","tradeType"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/components/Widget/inputs.tsx"],"sourcesContent":["import { sendAnalyticsEvent, useTrace } from '@uniswap/analytics'\nimport { EventName, SectionName } from '@uniswap/analytics-events'\nimport { Currency, Field, SwapController, SwapEventHandlers, TradeType } from '@uniswap/widgets'\nimport CurrencySearchModal from 'components/SearchModal/CurrencySearchModal'\nimport { useCallback, useEffect, useMemo, useState } from 'react'\n\nconst EMPTY_AMOUNT = ''\n\ntype SwapValue = Required<SwapController>['value']\ntype SwapTokens = Pick<SwapValue, Field.INPUT | Field.OUTPUT> & { default?: Currency }\n\nfunction includesDefaultToken(tokens: SwapTokens) {\n  if (!tokens.default) return true\n  return tokens[Field.INPUT]?.equals(tokens.default) || tokens[Field.OUTPUT]?.equals(tokens.default)\n}\n\n/**\n * Integrates the Widget's inputs.\n * Treats the Widget as a controlled component, using the app's own token selector for selection.\n * Enforces that token is a part of the returned value.\n */\nexport function useSyncWidgetInputs({\n  token,\n  onTokenChange,\n}: {\n  token?: Currency\n  onTokenChange?: (token: Currency) => void\n}) {\n  const trace = useTrace({ section: SectionName.WIDGET })\n\n  const [type, setType] = useState<SwapValue['type']>(TradeType.EXACT_INPUT)\n  const [amount, setAmount] = useState<SwapValue['amount']>(EMPTY_AMOUNT)\n  const [tokens, setTokens] = useState<SwapTokens>({ [Field.OUTPUT]: token, default: token })\n\n  useEffect(() => {\n    setTokens((tokens) => {\n      const update = { ...tokens, default: token }\n      if (!includesDefaultToken(update)) {\n        return { [Field.OUTPUT]: update.default, default: update.default }\n      }\n      return update\n    })\n  }, [token])\n\n  const onAmountChange = useCallback(\n    (field: Field, amount: string, origin?: 'max') => {\n      if (origin === 'max') {\n        sendAnalyticsEvent(EventName.SWAP_MAX_TOKEN_AMOUNT_SELECTED, { ...trace })\n      }\n      setType(field === Field.INPUT ? TradeType.EXACT_INPUT : TradeType.EXACT_OUTPUT)\n      setAmount(amount)\n    },\n    [trace]\n  )\n\n  const onSwitchTokens = useCallback(() => {\n    sendAnalyticsEvent(EventName.SWAP_TOKENS_REVERSED, { ...trace })\n    setType((type) => invertTradeType(type))\n    setTokens((tokens) => ({\n      [Field.INPUT]: tokens[Field.OUTPUT],\n      [Field.OUTPUT]: tokens[Field.INPUT],\n      default: tokens.default,\n    }))\n  }, [trace])\n\n  const [selectingField, setSelectingField] = useState<Field>()\n  const onTokenSelectorClick = useCallback((field: Field) => {\n    setSelectingField(field)\n    return false\n  }, [])\n\n  const onTokenSelect = useCallback(\n    (selectingToken: Currency) => {\n      if (selectingField === undefined) return\n\n      const otherField = invertField(selectingField)\n      const isFlip = tokens[otherField]?.equals(selectingToken)\n      const update: SwapTokens = {\n        [selectingField]: selectingToken,\n        [otherField]: isFlip ? tokens[selectingField] : tokens[otherField],\n        default: tokens.default,\n      }\n\n      setType((type) => {\n        // If flipping the tokens, also flip the type/amount.\n        if (isFlip) {\n          return invertTradeType(type)\n        }\n\n        // Setting a new token should clear its amount, if it is set.\n        const activeField = type === TradeType.EXACT_INPUT ? Field.INPUT : Field.OUTPUT\n        if (selectingField === activeField) {\n          setAmount(() => EMPTY_AMOUNT)\n        }\n\n        return type\n      })\n\n      if (!includesDefaultToken(update)) {\n        onTokenChange?.(update[Field.OUTPUT] || selectingToken)\n      }\n      setTokens(update)\n    },\n    [onTokenChange, selectingField, tokens]\n  )\n  const tokenSelector = (\n    <CurrencySearchModal\n      isOpen={selectingField !== undefined}\n      onDismiss={() => setSelectingField(undefined)}\n      selectedCurrency={selectingField && tokens[selectingField]}\n      otherSelectedCurrency={selectingField && tokens[invertField(selectingField)]}\n      onCurrencySelect={onTokenSelect}\n    />\n  )\n\n  const value: SwapValue = useMemo(\n    () => ({\n      type,\n      amount,\n      // If the default has not yet been handled, preemptively disable the widget by passing no tokens. Effectively,\n      // this resets the widget - avoiding rendering stale state - because with no tokens the skeleton will be rendered.\n      ...(token && tokens.default?.equals(token) ? tokens : undefined),\n    }),\n    [amount, token, tokens, type]\n  )\n  const valueHandlers: SwapEventHandlers = useMemo(\n    () => ({ onAmountChange, onSwitchTokens, onTokenSelectorClick }),\n    [onAmountChange, onSwitchTokens, onTokenSelectorClick]\n  )\n  return { inputs: { value, ...valueHandlers }, tokenSelector }\n}\n\n// TODO(zzmp): Move to @uniswap/widgets.\nfunction invertField(field: Field) {\n  switch (field) {\n    case Field.INPUT:\n      return Field.OUTPUT\n    case Field.OUTPUT:\n      return Field.INPUT\n  }\n}\n\n// TODO(zzmp): Include in @uniswap/sdk-core (on TradeType, if possible).\nfunction invertTradeType(tradeType: TradeType) {\n  switch (tradeType) {\n    case TradeType.EXACT_INPUT:\n      return TradeType.EXACT_OUTPUT\n    case TradeType.EXACT_OUTPUT:\n      return TradeType.EXACT_INPUT\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}