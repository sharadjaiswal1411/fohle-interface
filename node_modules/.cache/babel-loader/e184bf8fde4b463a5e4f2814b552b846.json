{"ast":null,"code":"import { BigNumber } from '@ethersproject/bignumber';\nimport { Protocol } from '@uniswap/router-sdk';\nimport { CurrencyAmount, Token, TradeType } from '@uniswap/sdk-core';\nimport { FeeAmount } from '@uniswap/v3-sdk';\nimport _ from 'lodash';\nimport { MixedRouteWithValidQuote, usdGasTokensByChain, V2RouteWithValidQuote, V3RouteWithValidQuote } from '../routers';\nimport { ChainId, log, WRAPPED_NATIVE_CURRENCY } from '../util';\nimport { buildTrade } from './methodParameters';\nexport async function getV2NativePool(token, poolProvider) {\n  const chainId = token.chainId;\n  const weth = WRAPPED_NATIVE_CURRENCY[chainId];\n  const poolAccessor = await poolProvider.getPools([[weth, token]]);\n  const pool = poolAccessor.getPool(weth, token);\n  if (!pool || pool.reserve0.equalTo(0) || pool.reserve1.equalTo(0)) {\n    log.error({\n      weth,\n      token,\n      reserve0: pool === null || pool === void 0 ? void 0 : pool.reserve0.toExact(),\n      reserve1: pool === null || pool === void 0 ? void 0 : pool.reserve1.toExact()\n    }, `Could not find a valid WETH pool with ${token.symbol} for computing gas costs.`);\n    return null;\n  }\n  return pool;\n}\nexport async function getHighestLiquidityV3NativePool(token, poolProvider) {\n  const nativeCurrency = WRAPPED_NATIVE_CURRENCY[token.chainId];\n  const nativePools = _([FeeAmount.HIGH, FeeAmount.MEDIUM, FeeAmount.LOW]).map(feeAmount => {\n    return [nativeCurrency, token, feeAmount];\n  }).value();\n  const poolAccessor = await poolProvider.getPools(nativePools);\n  const pools = _([FeeAmount.HIGH, FeeAmount.MEDIUM, FeeAmount.LOW]).map(feeAmount => {\n    return poolAccessor.getPool(nativeCurrency, token, feeAmount);\n  }).compact().value();\n  if (pools.length == 0) {\n    log.error({\n      pools\n    }, `Could not find a ${nativeCurrency.symbol} pool with ${token.symbol} for computing gas costs.`);\n    return null;\n  }\n  const maxPool = _.maxBy(pools, pool => pool.liquidity);\n  return maxPool;\n}\nexport async function getHighestLiquidityV3USDPool(chainId, poolProvider) {\n  const usdTokens = usdGasTokensByChain[chainId];\n  const wrappedCurrency = WRAPPED_NATIVE_CURRENCY[chainId];\n  if (!usdTokens) {\n    throw new Error(`Could not find a USD token for computing gas costs on ${chainId}`);\n  }\n  const usdPools = _([FeeAmount.HIGH, FeeAmount.MEDIUM, FeeAmount.LOW, FeeAmount.LOWEST]).flatMap(feeAmount => {\n    return _.map(usdTokens, usdToken => [wrappedCurrency, usdToken, feeAmount]);\n  }).value();\n  const poolAccessor = await poolProvider.getPools(usdPools);\n  const pools = _([FeeAmount.HIGH, FeeAmount.MEDIUM, FeeAmount.LOW, FeeAmount.LOWEST]).flatMap(feeAmount => {\n    const pools = [];\n    for (const usdToken of usdTokens) {\n      const pool = poolAccessor.getPool(wrappedCurrency, usdToken, feeAmount);\n      if (pool) {\n        pools.push(pool);\n      }\n    }\n    return pools;\n  }).compact().value();\n  if (pools.length == 0) {\n    console.log(\"cou:\", {\n      usdTokens,\n      FeeAmount\n    });\n    const message = `Could not find a USD/${wrappedCurrency.symbol} pool for computing gas costs.`;\n    log.error({\n      pools\n    }, message);\n    throw new Error(message);\n  }\n  const maxPool = _.maxBy(pools, pool => pool.liquidity);\n  return maxPool;\n}\nexport function getGasCostInUSD(usdPool, costNativeCurrency) {\n  const nativeCurrency = costNativeCurrency.currency;\n  // convert fee into usd\n  const nativeTokenPrice = usdPool.token0.address == nativeCurrency.address ? usdPool.token0Price : usdPool.token1Price;\n  const gasCostUSD = nativeTokenPrice.quote(costNativeCurrency);\n  return gasCostUSD;\n}\nexport function getGasCostInNativeCurrency(nativeCurrency, gasCostInWei) {\n  // wrap fee to native currency\n  const costNativeCurrency = CurrencyAmount.fromRawAmount(nativeCurrency, gasCostInWei.toString());\n  return costNativeCurrency;\n}\nexport async function getGasCostInQuoteToken(quoteToken, nativePool, costNativeCurrency) {\n  const nativeTokenPrice = nativePool.token0.address == quoteToken.address ? nativePool.token1Price : nativePool.token0Price;\n  const gasCostQuoteToken = nativeTokenPrice.quote(costNativeCurrency);\n  return gasCostQuoteToken;\n}\nexport function calculateArbitrumToL1FeeFromCalldata(calldata, gasData) {\n  const {\n    perL2TxFee,\n    perL1CalldataFee\n  } = gasData;\n  // calculates gas amounts based on bytes of calldata, use 0 as overhead.\n  const l1GasUsed = getL2ToL1GasUsed(calldata, BigNumber.from(0));\n  // multiply by the fee per calldata and add the flat l2 fee\n  let l1Fee = l1GasUsed.mul(perL1CalldataFee);\n  l1Fee = l1Fee.add(perL2TxFee);\n  return [l1GasUsed, l1Fee];\n}\nexport function calculateOptimismToL1FeeFromCalldata(calldata, gasData) {\n  const {\n    l1BaseFee,\n    scalar,\n    decimals,\n    overhead\n  } = gasData;\n  const l1GasUsed = getL2ToL1GasUsed(calldata, overhead);\n  // l1BaseFee is L1 Gas Price on etherscan\n  const l1Fee = l1GasUsed.mul(l1BaseFee);\n  const unscaled = l1Fee.mul(scalar);\n  // scaled = unscaled / (10 ** decimals)\n  const scaledConversion = BigNumber.from(10).pow(decimals);\n  const scaled = unscaled.div(scaledConversion);\n  return [l1GasUsed, scaled];\n}\n// based on the code from the optimism OVM_GasPriceOracle contract\nexport function getL2ToL1GasUsed(data, overhead) {\n  // data is hex encoded\n  const dataArr = data.slice(2).match(/.{1,2}/g);\n  const numBytes = dataArr.length;\n  let count = 0;\n  for (let i = 0; i < numBytes; i += 1) {\n    const byte = parseInt(dataArr[i], 16);\n    if (byte == 0) {\n      count += 4;\n    } else {\n      count += 16;\n    }\n  }\n  const unsigned = overhead.add(count);\n  const signedConversion = 68 * 16;\n  return unsigned.add(signedConversion);\n}\nexport async function calculateGasUsed(chainId, route, simulatedGasUsed, v2PoolProvider, v3PoolProvider, l2GasData) {\n  const quoteToken = route.quote.currency.wrapped;\n  const gasPriceWei = route.gasPriceWei;\n  // calculate L2 to L1 security fee if relevant\n  let l2toL1FeeInWei = BigNumber.from(0);\n  if ([ChainId.ARBITRUM_ONE, ChainId.ARBITRUM_RINKEBY].includes(chainId)) {\n    l2toL1FeeInWei = calculateArbitrumToL1FeeFromCalldata(route.methodParameters.calldata, l2GasData)[1];\n  } else if ([ChainId.OPTIMISM, ChainId.OPTIMISTIC_KOVAN].includes(chainId)) {\n    l2toL1FeeInWei = calculateOptimismToL1FeeFromCalldata(route.methodParameters.calldata, l2GasData)[1];\n  }\n  // add l2 to l1 fee and wrap fee to native currency\n  const gasCostInWei = gasPriceWei.mul(simulatedGasUsed).add(l2toL1FeeInWei);\n  const nativeCurrency = WRAPPED_NATIVE_CURRENCY[chainId];\n  const costNativeCurrency = getGasCostInNativeCurrency(nativeCurrency, gasCostInWei);\n  const usdPool = await getHighestLiquidityV3USDPool(chainId, v3PoolProvider);\n  const gasCostUSD = await getGasCostInUSD(usdPool, costNativeCurrency);\n  let gasCostQuoteToken = costNativeCurrency;\n  // get fee in terms of quote token\n  if (!quoteToken.equals(nativeCurrency)) {\n    const nativePools = await Promise.all([getHighestLiquidityV3NativePool(quoteToken, v3PoolProvider), getV2NativePool(quoteToken, v2PoolProvider)]);\n    const nativePool = nativePools.find(pool => pool !== null);\n    if (!nativePool) {\n      log.info('Could not find any V2 or V3 pools to convert the cost into the quote token');\n      gasCostQuoteToken = CurrencyAmount.fromRawAmount(quoteToken, 0);\n    } else {\n      gasCostQuoteToken = await getGasCostInQuoteToken(quoteToken, nativePool, costNativeCurrency);\n    }\n  }\n  // Adjust quote for gas fees\n  let quoteGasAdjusted;\n  if (route.trade.tradeType == TradeType.EXACT_OUTPUT) {\n    // Exact output - need more of tokenIn to get the desired amount of tokenOut\n    quoteGasAdjusted = route.quote.add(gasCostQuoteToken);\n  } else {\n    // Exact input - can get less of tokenOut due to fees\n    quoteGasAdjusted = route.quote.subtract(gasCostQuoteToken);\n  }\n  return {\n    estimatedGasUsedUSD: gasCostUSD,\n    estimatedGasUsedQuoteToken: gasCostQuoteToken,\n    quoteGasAdjusted: quoteGasAdjusted\n  };\n}\nexport function initSwapRouteFromExisting(swapRoute, v2PoolProvider, v3PoolProvider, quoteGasAdjusted, estimatedGasUsed, estimatedGasUsedQuoteToken, estimatedGasUsedUSD) {\n  const currencyIn = swapRoute.trade.inputAmount.currency;\n  const currencyOut = swapRoute.trade.outputAmount.currency;\n  const tradeType = swapRoute.trade.tradeType.valueOf() ? TradeType.EXACT_OUTPUT : TradeType.EXACT_INPUT;\n  const routesWithValidQuote = swapRoute.route.map(route => {\n    switch (route.protocol) {\n      case Protocol.V3:\n        return new V3RouteWithValidQuote({\n          amount: CurrencyAmount.fromFractionalAmount(route.amount.currency, route.amount.numerator, route.amount.denominator),\n          rawQuote: BigNumber.from(route.rawQuote),\n          sqrtPriceX96AfterList: route.sqrtPriceX96AfterList.map(num => BigNumber.from(num)),\n          initializedTicksCrossedList: [...route.initializedTicksCrossedList],\n          quoterGasEstimate: BigNumber.from(route.gasEstimate),\n          percent: route.percent,\n          route: route.route,\n          gasModel: route.gasModel,\n          quoteToken: new Token(currencyIn.chainId, route.quoteToken.address, route.quoteToken.decimals, route.quoteToken.symbol, route.quoteToken.name),\n          tradeType: tradeType,\n          v3PoolProvider: v3PoolProvider\n        });\n      case Protocol.V2:\n        return new V2RouteWithValidQuote({\n          amount: CurrencyAmount.fromFractionalAmount(route.amount.currency, route.amount.numerator, route.amount.denominator),\n          rawQuote: BigNumber.from(route.rawQuote),\n          percent: route.percent,\n          route: route.route,\n          gasModel: route.gasModel,\n          quoteToken: new Token(currencyIn.chainId, route.quoteToken.address, route.quoteToken.decimals, route.quoteToken.symbol, route.quoteToken.name),\n          tradeType: tradeType,\n          v2PoolProvider: v2PoolProvider\n        });\n      case Protocol.MIXED:\n        return new MixedRouteWithValidQuote({\n          amount: CurrencyAmount.fromFractionalAmount(route.amount.currency, route.amount.numerator, route.amount.denominator),\n          rawQuote: BigNumber.from(route.rawQuote),\n          sqrtPriceX96AfterList: route.sqrtPriceX96AfterList.map(num => BigNumber.from(num)),\n          initializedTicksCrossedList: [...route.initializedTicksCrossedList],\n          quoterGasEstimate: BigNumber.from(route.gasEstimate),\n          percent: route.percent,\n          route: route.route,\n          mixedRouteGasModel: route.gasModel,\n          v2PoolProvider,\n          quoteToken: new Token(currencyIn.chainId, route.quoteToken.address, route.quoteToken.decimals, route.quoteToken.symbol, route.quoteToken.name),\n          tradeType: tradeType,\n          v3PoolProvider: v3PoolProvider\n        });\n    }\n  });\n  const trade = buildTrade(currencyIn, currencyOut, tradeType, routesWithValidQuote);\n  return {\n    quote: swapRoute.quote,\n    quoteGasAdjusted,\n    estimatedGasUsed,\n    estimatedGasUsedQuoteToken,\n    estimatedGasUsedUSD,\n    gasPriceWei: BigNumber.from(swapRoute.gasPriceWei),\n    trade,\n    route: routesWithValidQuote,\n    blockNumber: BigNumber.from(swapRoute.blockNumber),\n    methodParameters: swapRoute.methodParameters ? {\n      calldata: swapRoute.methodParameters.calldata,\n      value: swapRoute.methodParameters.value\n    } : undefined\n  };\n}","map":{"version":3,"sources":["../../../src/util/gas-factory-helpers.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { BigNumber } from '@ethersproject/bignumber';\nimport { Protocol } from '@uniswap/router-sdk';\nimport { CurrencyAmount, Token, TradeType } from '@uniswap/sdk-core';\nimport { FeeAmount } from '@uniswap/v3-sdk';\nimport _ from 'lodash';\nimport { MixedRouteWithValidQuote, usdGasTokensByChain, V2RouteWithValidQuote, V3RouteWithValidQuote, } from '../routers';\nimport { ChainId, log, WRAPPED_NATIVE_CURRENCY } from '../util';\nimport { buildTrade } from './methodParameters';\nexport async function getV2NativePool(token, poolProvider) {\n    const chainId = token.chainId;\n    const weth = WRAPPED_NATIVE_CURRENCY[chainId];\n    const poolAccessor = await poolProvider.getPools([[weth, token]]);\n    const pool = poolAccessor.getPool(weth, token);\n    if (!pool || pool.reserve0.equalTo(0) || pool.reserve1.equalTo(0)) {\n        log.error({\n            weth,\n            token,\n            reserve0: pool === null || pool === void 0 ? void 0 : pool.reserve0.toExact(),\n            reserve1: pool === null || pool === void 0 ? void 0 : pool.reserve1.toExact(),\n        }, `Could not find a valid WETH pool with ${token.symbol} for computing gas costs.`);\n        return null;\n    }\n    return pool;\n}\nexport async function getHighestLiquidityV3NativePool(token, poolProvider) {\n    const nativeCurrency = WRAPPED_NATIVE_CURRENCY[token.chainId];\n    const nativePools = _([FeeAmount.HIGH, FeeAmount.MEDIUM, FeeAmount.LOW])\n        .map((feeAmount) => {\n        return [nativeCurrency, token, feeAmount];\n    })\n        .value();\n    const poolAccessor = await poolProvider.getPools(nativePools);\n    const pools = _([FeeAmount.HIGH, FeeAmount.MEDIUM, FeeAmount.LOW])\n        .map((feeAmount) => {\n        return poolAccessor.getPool(nativeCurrency, token, feeAmount);\n    })\n        .compact()\n        .value();\n    if (pools.length == 0) {\n        log.error({ pools }, `Could not find a ${nativeCurrency.symbol} pool with ${token.symbol} for computing gas costs.`);\n        return null;\n    }\n    const maxPool = _.maxBy(pools, (pool) => pool.liquidity);\n    return maxPool;\n}\nexport async function getHighestLiquidityV3USDPool(chainId, poolProvider) {\n    const usdTokens = usdGasTokensByChain[chainId];\n    const wrappedCurrency = WRAPPED_NATIVE_CURRENCY[chainId];\n    if (!usdTokens) {\n        throw new Error(`Could not find a USD token for computing gas costs on ${chainId}`);\n    }\n    const usdPools = _([\n        FeeAmount.HIGH,\n        FeeAmount.MEDIUM,\n        FeeAmount.LOW,\n        FeeAmount.LOWEST,\n    ])\n        .flatMap((feeAmount) => {\n        return _.map(usdTokens, (usdToken) => [\n            wrappedCurrency,\n            usdToken,\n            feeAmount,\n        ]);\n    })\n        .value();\n    const poolAccessor = await poolProvider.getPools(usdPools);\n    const pools = _([\n        FeeAmount.HIGH,\n        FeeAmount.MEDIUM,\n        FeeAmount.LOW,\n        FeeAmount.LOWEST,\n    ])\n        .flatMap((feeAmount) => {\n        const pools = [];\n        for (const usdToken of usdTokens) {\n            const pool = poolAccessor.getPool(wrappedCurrency, usdToken, feeAmount);\n            if (pool) {\n                pools.push(pool);\n            }\n        }\n        return pools;\n    })\n        .compact()\n        .value();\n    if (pools.length == 0) {\n        console.log(\"cou:\",{usdTokens,FeeAmount});\n        const message = `Could not find a USD/${wrappedCurrency.symbol} pool for computing gas costs.`;\n        log.error({ pools }, message);\n        throw new Error(message);\n    }\n    const maxPool = _.maxBy(pools, (pool) => pool.liquidity);\n    return maxPool;\n}\nexport function getGasCostInUSD(usdPool, costNativeCurrency) {\n    const nativeCurrency = costNativeCurrency.currency;\n    // convert fee into usd\n    const nativeTokenPrice = usdPool.token0.address == nativeCurrency.address\n        ? usdPool.token0Price\n        : usdPool.token1Price;\n    const gasCostUSD = nativeTokenPrice.quote(costNativeCurrency);\n    return gasCostUSD;\n}\nexport function getGasCostInNativeCurrency(nativeCurrency, gasCostInWei) {\n    // wrap fee to native currency\n    const costNativeCurrency = CurrencyAmount.fromRawAmount(nativeCurrency, gasCostInWei.toString());\n    return costNativeCurrency;\n}\nexport async function getGasCostInQuoteToken(quoteToken, nativePool, costNativeCurrency) {\n    const nativeTokenPrice = nativePool.token0.address == quoteToken.address\n        ? nativePool.token1Price\n        : nativePool.token0Price;\n    const gasCostQuoteToken = nativeTokenPrice.quote(costNativeCurrency);\n    return gasCostQuoteToken;\n}\nexport function calculateArbitrumToL1FeeFromCalldata(calldata, gasData) {\n    const { perL2TxFee, perL1CalldataFee } = gasData;\n    // calculates gas amounts based on bytes of calldata, use 0 as overhead.\n    const l1GasUsed = getL2ToL1GasUsed(calldata, BigNumber.from(0));\n    // multiply by the fee per calldata and add the flat l2 fee\n    let l1Fee = l1GasUsed.mul(perL1CalldataFee);\n    l1Fee = l1Fee.add(perL2TxFee);\n    return [l1GasUsed, l1Fee];\n}\nexport function calculateOptimismToL1FeeFromCalldata(calldata, gasData) {\n    const { l1BaseFee, scalar, decimals, overhead } = gasData;\n    const l1GasUsed = getL2ToL1GasUsed(calldata, overhead);\n    // l1BaseFee is L1 Gas Price on etherscan\n    const l1Fee = l1GasUsed.mul(l1BaseFee);\n    const unscaled = l1Fee.mul(scalar);\n    // scaled = unscaled / (10 ** decimals)\n    const scaledConversion = BigNumber.from(10).pow(decimals);\n    const scaled = unscaled.div(scaledConversion);\n    return [l1GasUsed, scaled];\n}\n// based on the code from the optimism OVM_GasPriceOracle contract\nexport function getL2ToL1GasUsed(data, overhead) {\n    // data is hex encoded\n    const dataArr = data.slice(2).match(/.{1,2}/g);\n    const numBytes = dataArr.length;\n    let count = 0;\n    for (let i = 0; i < numBytes; i += 1) {\n        const byte = parseInt(dataArr[i], 16);\n        if (byte == 0) {\n            count += 4;\n        }\n        else {\n            count += 16;\n        }\n    }\n    const unsigned = overhead.add(count);\n    const signedConversion = 68 * 16;\n    return unsigned.add(signedConversion);\n}\nexport async function calculateGasUsed(chainId, route, simulatedGasUsed, v2PoolProvider, v3PoolProvider, l2GasData) {\n    const quoteToken = route.quote.currency.wrapped;\n    const gasPriceWei = route.gasPriceWei;\n    // calculate L2 to L1 security fee if relevant\n    let l2toL1FeeInWei = BigNumber.from(0);\n    if ([ChainId.ARBITRUM_ONE, ChainId.ARBITRUM_RINKEBY].includes(chainId)) {\n        l2toL1FeeInWei = calculateArbitrumToL1FeeFromCalldata(route.methodParameters.calldata, l2GasData)[1];\n    }\n    else if ([ChainId.OPTIMISM, ChainId.OPTIMISTIC_KOVAN].includes(chainId)) {\n        l2toL1FeeInWei = calculateOptimismToL1FeeFromCalldata(route.methodParameters.calldata, l2GasData)[1];\n    }\n    // add l2 to l1 fee and wrap fee to native currency\n    const gasCostInWei = gasPriceWei.mul(simulatedGasUsed).add(l2toL1FeeInWei);\n    const nativeCurrency = WRAPPED_NATIVE_CURRENCY[chainId];\n    const costNativeCurrency = getGasCostInNativeCurrency(nativeCurrency, gasCostInWei);\n    const usdPool = await getHighestLiquidityV3USDPool(chainId, v3PoolProvider);\n    const gasCostUSD = await getGasCostInUSD(usdPool, costNativeCurrency);\n    let gasCostQuoteToken = costNativeCurrency;\n    // get fee in terms of quote token\n    if (!quoteToken.equals(nativeCurrency)) {\n        const nativePools = await Promise.all([\n            getHighestLiquidityV3NativePool(quoteToken, v3PoolProvider),\n            getV2NativePool(quoteToken, v2PoolProvider),\n        ]);\n        const nativePool = nativePools.find((pool) => pool !== null);\n        if (!nativePool) {\n            log.info('Could not find any V2 or V3 pools to convert the cost into the quote token');\n            gasCostQuoteToken = CurrencyAmount.fromRawAmount(quoteToken, 0);\n        }\n        else {\n            gasCostQuoteToken = await getGasCostInQuoteToken(quoteToken, nativePool, costNativeCurrency);\n        }\n    }\n    // Adjust quote for gas fees\n    let quoteGasAdjusted;\n    if (route.trade.tradeType == TradeType.EXACT_OUTPUT) {\n        // Exact output - need more of tokenIn to get the desired amount of tokenOut\n        quoteGasAdjusted = route.quote.add(gasCostQuoteToken);\n    }\n    else {\n        // Exact input - can get less of tokenOut due to fees\n        quoteGasAdjusted = route.quote.subtract(gasCostQuoteToken);\n    }\n    return {\n        estimatedGasUsedUSD: gasCostUSD,\n        estimatedGasUsedQuoteToken: gasCostQuoteToken,\n        quoteGasAdjusted: quoteGasAdjusted,\n    };\n}\nexport function initSwapRouteFromExisting(swapRoute, v2PoolProvider, v3PoolProvider, quoteGasAdjusted, estimatedGasUsed, estimatedGasUsedQuoteToken, estimatedGasUsedUSD) {\n    const currencyIn = swapRoute.trade.inputAmount.currency;\n    const currencyOut = swapRoute.trade.outputAmount.currency;\n    const tradeType = swapRoute.trade.tradeType.valueOf()\n        ? TradeType.EXACT_OUTPUT\n        : TradeType.EXACT_INPUT;\n    const routesWithValidQuote = swapRoute.route.map((route) => {\n        switch (route.protocol) {\n            case Protocol.V3:\n                return new V3RouteWithValidQuote({\n                    amount: CurrencyAmount.fromFractionalAmount(route.amount.currency, route.amount.numerator, route.amount.denominator),\n                    rawQuote: BigNumber.from(route.rawQuote),\n                    sqrtPriceX96AfterList: route.sqrtPriceX96AfterList.map((num) => BigNumber.from(num)),\n                    initializedTicksCrossedList: [...route.initializedTicksCrossedList],\n                    quoterGasEstimate: BigNumber.from(route.gasEstimate),\n                    percent: route.percent,\n                    route: route.route,\n                    gasModel: route.gasModel,\n                    quoteToken: new Token(currencyIn.chainId, route.quoteToken.address, route.quoteToken.decimals, route.quoteToken.symbol, route.quoteToken.name),\n                    tradeType: tradeType,\n                    v3PoolProvider: v3PoolProvider,\n                });\n            case Protocol.V2:\n                return new V2RouteWithValidQuote({\n                    amount: CurrencyAmount.fromFractionalAmount(route.amount.currency, route.amount.numerator, route.amount.denominator),\n                    rawQuote: BigNumber.from(route.rawQuote),\n                    percent: route.percent,\n                    route: route.route,\n                    gasModel: route.gasModel,\n                    quoteToken: new Token(currencyIn.chainId, route.quoteToken.address, route.quoteToken.decimals, route.quoteToken.symbol, route.quoteToken.name),\n                    tradeType: tradeType,\n                    v2PoolProvider: v2PoolProvider,\n                });\n            case Protocol.MIXED:\n                return new MixedRouteWithValidQuote({\n                    amount: CurrencyAmount.fromFractionalAmount(route.amount.currency, route.amount.numerator, route.amount.denominator),\n                    rawQuote: BigNumber.from(route.rawQuote),\n                    sqrtPriceX96AfterList: route.sqrtPriceX96AfterList.map((num) => BigNumber.from(num)),\n                    initializedTicksCrossedList: [...route.initializedTicksCrossedList],\n                    quoterGasEstimate: BigNumber.from(route.gasEstimate),\n                    percent: route.percent,\n                    route: route.route,\n                    mixedRouteGasModel: route.gasModel,\n                    v2PoolProvider,\n                    quoteToken: new Token(currencyIn.chainId, route.quoteToken.address, route.quoteToken.decimals, route.quoteToken.symbol, route.quoteToken.name),\n                    tradeType: tradeType,\n                    v3PoolProvider: v3PoolProvider,\n                });\n        }\n    });\n    const trade = buildTrade(currencyIn, currencyOut, tradeType, routesWithValidQuote);\n    return {\n        quote: swapRoute.quote,\n        quoteGasAdjusted,\n        estimatedGasUsed,\n        estimatedGasUsedQuoteToken,\n        estimatedGasUsedUSD,\n        gasPriceWei: BigNumber.from(swapRoute.gasPriceWei),\n        trade,\n        route: routesWithValidQuote,\n        blockNumber: BigNumber.from(swapRoute.blockNumber),\n        methodParameters: swapRoute.methodParameters\n            ? {\n                calldata: swapRoute.methodParameters.calldata,\n                value: swapRoute.methodParameters.value,\n            }\n            : undefined,\n    };\n}\n//# sourceMappingURL=data:application/json;base64,"]},"metadata":{},"sourceType":"module"}