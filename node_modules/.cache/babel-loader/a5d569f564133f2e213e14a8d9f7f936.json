{"ast":null,"code":"import { createReducer } from '@reduxjs/toolkit';\nimport { Field, resetMintState, setFullRange, typeInput, typeLeftRangeInput, typeRightRangeInput, typeStartPriceInput } from './actions';\nconst initialState = {\n  independentField: Field.CURRENCY_A,\n  typedValue: '',\n  startPriceTypedValue: '',\n  leftRangeTypedValue: '',\n  rightRangeTypedValue: ''\n};\nexport default createReducer(initialState, builder => builder.addCase(resetMintState, () => initialState).addCase(setFullRange, state => {\n  return {\n    ...state,\n    leftRangeTypedValue: true,\n    rightRangeTypedValue: true\n  };\n}).addCase(typeStartPriceInput, (state, _ref) => {\n  let {\n    payload: {\n      typedValue\n    }\n  } = _ref;\n  return {\n    ...state,\n    startPriceTypedValue: typedValue\n  };\n}).addCase(typeLeftRangeInput, (state, _ref2) => {\n  let {\n    payload: {\n      typedValue\n    }\n  } = _ref2;\n  return {\n    ...state,\n    leftRangeTypedValue: typedValue\n  };\n}).addCase(typeRightRangeInput, (state, _ref3) => {\n  let {\n    payload: {\n      typedValue\n    }\n  } = _ref3;\n  return {\n    ...state,\n    rightRangeTypedValue: typedValue\n  };\n}).addCase(typeInput, (state, _ref4) => {\n  let {\n    payload: {\n      field,\n      typedValue,\n      noLiquidity\n    }\n  } = _ref4;\n  if (noLiquidity) {\n    // they're typing into the field they've last typed in\n    if (field === state.independentField) {\n      return {\n        ...state,\n        independentField: field,\n        typedValue\n      };\n    }\n    // they're typing into a new field, store the other value\n    else {\n      return {\n        ...state,\n        independentField: field,\n        typedValue\n      };\n    }\n  } else {\n    return {\n      ...state,\n      independentField: field,\n      typedValue\n    };\n  }\n}));","map":{"version":3,"names":["createReducer","Field","resetMintState","setFullRange","typeInput","typeLeftRangeInput","typeRightRangeInput","typeStartPriceInput","initialState","independentField","CURRENCY_A","typedValue","startPriceTypedValue","leftRangeTypedValue","rightRangeTypedValue","builder","addCase","state","payload","field","noLiquidity"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/state/mint/v3/reducer.ts"],"sourcesContent":["import { createReducer } from '@reduxjs/toolkit'\n\nimport {\n  Field,\n  resetMintState,\n  setFullRange,\n  typeInput,\n  typeLeftRangeInput,\n  typeRightRangeInput,\n  typeStartPriceInput,\n} from './actions'\n\ntype FullRange = true\n\ninterface MintState {\n  readonly independentField: Field\n  readonly typedValue: string\n  readonly startPriceTypedValue: string // for the case when there's no liquidity\n  readonly leftRangeTypedValue: string | FullRange\n  readonly rightRangeTypedValue: string | FullRange\n}\n\nconst initialState: MintState = {\n  independentField: Field.CURRENCY_A,\n  typedValue: '',\n  startPriceTypedValue: '',\n  leftRangeTypedValue: '',\n  rightRangeTypedValue: '',\n}\n\nexport default createReducer<MintState>(initialState, (builder) =>\n  builder\n    .addCase(resetMintState, () => initialState)\n    .addCase(setFullRange, (state) => {\n      return {\n        ...state,\n        leftRangeTypedValue: true,\n        rightRangeTypedValue: true,\n      }\n    })\n    .addCase(typeStartPriceInput, (state, { payload: { typedValue } }) => {\n      return {\n        ...state,\n        startPriceTypedValue: typedValue,\n      }\n    })\n    .addCase(typeLeftRangeInput, (state, { payload: { typedValue } }) => {\n      return {\n        ...state,\n        leftRangeTypedValue: typedValue,\n      }\n    })\n    .addCase(typeRightRangeInput, (state, { payload: { typedValue } }) => {\n      return {\n        ...state,\n        rightRangeTypedValue: typedValue,\n      }\n    })\n    .addCase(typeInput, (state, { payload: { field, typedValue, noLiquidity } }) => {\n      if (noLiquidity) {\n        // they're typing into the field they've last typed in\n        if (field === state.independentField) {\n          return {\n            ...state,\n            independentField: field,\n            typedValue,\n          }\n        }\n        // they're typing into a new field, store the other value\n        else {\n          return {\n            ...state,\n            independentField: field,\n            typedValue,\n          }\n        }\n      } else {\n        return {\n          ...state,\n          independentField: field,\n          typedValue,\n        }\n      }\n    })\n)\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,kBAAkB;AAEhD,SACEC,KAAK,EACLC,cAAc,EACdC,YAAY,EACZC,SAAS,EACTC,kBAAkB,EAClBC,mBAAmB,EACnBC,mBAAmB,QACd,WAAW;AAYlB,MAAMC,YAAuB,GAAG;EAC9BC,gBAAgB,EAAER,KAAK,CAACS,UAAU;EAClCC,UAAU,EAAE,EAAE;EACdC,oBAAoB,EAAE,EAAE;EACxBC,mBAAmB,EAAE,EAAE;EACvBC,oBAAoB,EAAE;AACxB,CAAC;AAED,eAAed,aAAa,CAAYQ,YAAY,EAAGO,OAAO,IAC5DA,OAAO,CACJC,OAAO,CAACd,cAAc,EAAE,MAAMM,YAAY,CAAC,CAC3CQ,OAAO,CAACb,YAAY,EAAGc,KAAK,IAAK;EAChC,OAAO;IACL,GAAGA,KAAK;IACRJ,mBAAmB,EAAE,IAAI;IACzBC,oBAAoB,EAAE;EACxB,CAAC;AACH,CAAC,CAAC,CACDE,OAAO,CAACT,mBAAmB,EAAE,CAACU,KAAK,WAAkC;EAAA,IAAhC;IAAEC,OAAO,EAAE;MAAEP;IAAW;EAAE,CAAC;EAC/D,OAAO;IACL,GAAGM,KAAK;IACRL,oBAAoB,EAAED;EACxB,CAAC;AACH,CAAC,CAAC,CACDK,OAAO,CAACX,kBAAkB,EAAE,CAACY,KAAK,YAAkC;EAAA,IAAhC;IAAEC,OAAO,EAAE;MAAEP;IAAW;EAAE,CAAC;EAC9D,OAAO;IACL,GAAGM,KAAK;IACRJ,mBAAmB,EAAEF;EACvB,CAAC;AACH,CAAC,CAAC,CACDK,OAAO,CAACV,mBAAmB,EAAE,CAACW,KAAK,YAAkC;EAAA,IAAhC;IAAEC,OAAO,EAAE;MAAEP;IAAW;EAAE,CAAC;EAC/D,OAAO;IACL,GAAGM,KAAK;IACRH,oBAAoB,EAAEH;EACxB,CAAC;AACH,CAAC,CAAC,CACDK,OAAO,CAACZ,SAAS,EAAE,CAACa,KAAK,YAAsD;EAAA,IAApD;IAAEC,OAAO,EAAE;MAAEC,KAAK;MAAER,UAAU;MAAES;IAAY;EAAE,CAAC;EACzE,IAAIA,WAAW,EAAE;IACf;IACA,IAAID,KAAK,KAAKF,KAAK,CAACR,gBAAgB,EAAE;MACpC,OAAO;QACL,GAAGQ,KAAK;QACRR,gBAAgB,EAAEU,KAAK;QACvBR;MACF,CAAC;IACH;IACA;IAAA,KACK;MACH,OAAO;QACL,GAAGM,KAAK;QACRR,gBAAgB,EAAEU,KAAK;QACvBR;MACF,CAAC;IACH;EACF,CAAC,MAAM;IACL,OAAO;MACL,GAAGM,KAAK;MACRR,gBAAgB,EAAEU,KAAK;MACvBR;IACF,CAAC;EACH;AACF,CAAC,CAAC,CACL"},"metadata":{},"sourceType":"module"}