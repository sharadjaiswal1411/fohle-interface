{"ast":null,"code":"var _s = $RefreshSig$();\nimport { getVersionUpgrade, minVersionBump, VersionUpgrade } from '@uniswap/token-lists';\nimport { useWeb3React } from '@web3-react/core';\nimport { UNSUPPORTED_LIST_URLS } from 'constants/lists';\nimport useInterval from 'lib/hooks/useInterval';\nimport { useCallback, useEffect } from 'react';\nimport { useAppDispatch } from 'state/hooks';\nimport { useAllLists } from 'state/lists/hooks';\nimport { useFetchListCallback } from '../../hooks/useFetchListCallback';\nimport useIsWindowVisible from '../../hooks/useIsWindowVisible';\nimport { acceptListUpdate } from './actions';\nexport default function Updater() {\n  _s();\n  const {\n    provider\n  } = useWeb3React();\n  const dispatch = useAppDispatch();\n  const isWindowVisible = useIsWindowVisible();\n\n  // get all loaded lists, and the active urls\n  const lists = useAllLists();\n  const fetchList = useFetchListCallback();\n  const fetchAllListsCallback = useCallback(() => {\n    if (!isWindowVisible) return;\n    Object.keys(lists).forEach(url => {\n      // Skip validation on unsupported lists\n      const isUnsupportedList = UNSUPPORTED_LIST_URLS.includes(url);\n      fetchList(url, false, isUnsupportedList).catch(error => console.debug('interval list fetching error', error));\n    });\n  }, [fetchList, isWindowVisible, lists]);\n\n  // fetch all lists every 10 minutes, but only after we initialize provider\n  useInterval(fetchAllListsCallback, provider ? 1000 * 60 * 10 : null);\n\n  // whenever a list is not loaded and not loading, try again to load it\n  useEffect(() => {\n    Object.keys(lists).forEach(listUrl => {\n      const list = lists[listUrl];\n      if (!list.current && !list.loadingRequestId && !list.error) {\n        fetchList(listUrl).catch(error => console.debug('list added fetching error', error));\n      }\n    });\n  }, [dispatch, fetchList, lists]);\n\n  // if any lists from unsupported lists are loaded, check them too (in case new updates since last visit)\n  useEffect(() => {\n    UNSUPPORTED_LIST_URLS.forEach(listUrl => {\n      const list = lists[listUrl];\n      if (!list || !list.current && !list.loadingRequestId && !list.error) {\n        fetchList(listUrl, undefined, true).catch(error => console.debug('list added fetching error', error));\n      }\n    });\n  }, [dispatch, fetchList, lists]);\n\n  // automatically update lists if versions are minor/patch\n  useEffect(() => {\n    Object.keys(lists).forEach(listUrl => {\n      const list = lists[listUrl];\n      if (list.current && list.pendingUpdate) {\n        const bump = getVersionUpgrade(list.current.version, list.pendingUpdate.version);\n        switch (bump) {\n          case VersionUpgrade.NONE:\n            throw new Error('unexpected no version bump');\n          case VersionUpgrade.PATCH:\n          case VersionUpgrade.MINOR:\n            {\n              const min = minVersionBump(list.current.tokens, list.pendingUpdate.tokens);\n              // automatically update minor/patch as long as bump matches the min update\n              if (bump >= min) {\n                dispatch(acceptListUpdate(listUrl));\n              } else {\n                console.error(`List at url ${listUrl} could not automatically update because the version bump was only PATCH/MINOR while the update had breaking changes and should have been MAJOR`);\n              }\n              break;\n            }\n          // update any active or inactive lists\n          case VersionUpgrade.MAJOR:\n            dispatch(acceptListUpdate(listUrl));\n        }\n      }\n    });\n  }, [dispatch, lists]);\n  return null;\n}\n_s(Updater, \"VeGr6SgMmP5fS77ql2Qjdi55kns=\", false, function () {\n  return [useWeb3React, useAppDispatch, useIsWindowVisible, useAllLists, useFetchListCallback, useInterval];\n});\n_c = Updater;\nvar _c;\n$RefreshReg$(_c, \"Updater\");","map":{"version":3,"names":["getVersionUpgrade","minVersionBump","VersionUpgrade","useWeb3React","UNSUPPORTED_LIST_URLS","useInterval","useCallback","useEffect","useAppDispatch","useAllLists","useFetchListCallback","useIsWindowVisible","acceptListUpdate","Updater","provider","dispatch","isWindowVisible","lists","fetchList","fetchAllListsCallback","Object","keys","forEach","url","isUnsupportedList","includes","catch","error","console","debug","listUrl","list","current","loadingRequestId","undefined","pendingUpdate","bump","version","NONE","Error","PATCH","MINOR","min","tokens","MAJOR"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/state/lists/updater.ts"],"sourcesContent":["import { getVersionUpgrade, minVersionBump, VersionUpgrade } from '@uniswap/token-lists'\nimport { useWeb3React } from '@web3-react/core'\nimport { UNSUPPORTED_LIST_URLS } from 'constants/lists'\nimport useInterval from 'lib/hooks/useInterval'\nimport { useCallback, useEffect } from 'react'\nimport { useAppDispatch } from 'state/hooks'\nimport { useAllLists } from 'state/lists/hooks'\n\nimport { useFetchListCallback } from '../../hooks/useFetchListCallback'\nimport useIsWindowVisible from '../../hooks/useIsWindowVisible'\nimport { acceptListUpdate } from './actions'\nexport default function Updater(): null {\n  const { provider } = useWeb3React()\n  const dispatch = useAppDispatch()\n  const isWindowVisible = useIsWindowVisible()\n\n  // get all loaded lists, and the active urls\n  const lists = useAllLists()\n\n  const fetchList = useFetchListCallback()\n  const fetchAllListsCallback = useCallback(() => {\n    if (!isWindowVisible) return\n    Object.keys(lists).forEach((url) => {\n      // Skip validation on unsupported lists\n      const isUnsupportedList = UNSUPPORTED_LIST_URLS.includes(url)\n      fetchList(url, false, isUnsupportedList).catch((error) => console.debug('interval list fetching error', error))\n    })\n  }, [fetchList, isWindowVisible, lists])\n\n  // fetch all lists every 10 minutes, but only after we initialize provider\n  useInterval(fetchAllListsCallback, provider ? 1000 * 60 * 10 : null)\n\n  // whenever a list is not loaded and not loading, try again to load it\n  useEffect(() => {\n    Object.keys(lists).forEach((listUrl) => {\n      const list = lists[listUrl]\n      if (!list.current && !list.loadingRequestId && !list.error) {\n        fetchList(listUrl).catch((error) => console.debug('list added fetching error', error))\n      }\n    })\n  }, [dispatch, fetchList, lists])\n\n  // if any lists from unsupported lists are loaded, check them too (in case new updates since last visit)\n  useEffect(() => {\n    UNSUPPORTED_LIST_URLS.forEach((listUrl) => {\n      const list = lists[listUrl]\n      if (!list || (!list.current && !list.loadingRequestId && !list.error)) {\n        fetchList(listUrl, undefined, true).catch((error) => console.debug('list added fetching error', error))\n      }\n    })\n  }, [dispatch, fetchList, lists])\n\n  // automatically update lists if versions are minor/patch\n  useEffect(() => {\n    Object.keys(lists).forEach((listUrl) => {\n      const list = lists[listUrl]\n      if (list.current && list.pendingUpdate) {\n        const bump = getVersionUpgrade(list.current.version, list.pendingUpdate.version)\n        switch (bump) {\n          case VersionUpgrade.NONE:\n            throw new Error('unexpected no version bump')\n          case VersionUpgrade.PATCH:\n          case VersionUpgrade.MINOR: {\n            const min = minVersionBump(list.current.tokens, list.pendingUpdate.tokens)\n            // automatically update minor/patch as long as bump matches the min update\n            if (bump >= min) {\n              dispatch(acceptListUpdate(listUrl))\n            } else {\n              console.error(\n                `List at url ${listUrl} could not automatically update because the version bump was only PATCH/MINOR while the update had breaking changes and should have been MAJOR`\n              )\n            }\n            break\n          }\n          // update any active or inactive lists\n          case VersionUpgrade.MAJOR:\n            dispatch(acceptListUpdate(listUrl))\n        }\n      }\n    })\n  }, [dispatch, lists])\n\n  return null\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}