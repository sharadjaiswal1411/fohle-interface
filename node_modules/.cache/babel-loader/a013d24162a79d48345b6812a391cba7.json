{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$(),\n  _s5 = $RefreshSig$(),\n  _s6 = $RefreshSig$(),\n  _s7 = $RefreshSig$();\nimport { addPoolKeys, updatePoolChartData, updatePoolTransactions, updateTickData } from 'state/pools/actions';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { updatePoolData } from './actions';\nimport { notEmpty } from 'utils';\nimport { fetchPoolChartData } from 'data/pools/chartData';\nimport { fetchPoolTransactions } from 'data/pools/transactions';\nimport { useActiveNetworkVersion, useClients } from 'state/application/hooks';\nimport { useParams } from 'react-router-dom';\nimport { useWeb3React } from '@web3-react/core';\nimport { chainIdToBackendName } from 'graphql/data/util';\nexport function useAllPoolData() {\n  _s();\n  let chainName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"ETHEREUM\";\n  return useSelector(state => {\n    var _state$pools$byAddres;\n    return (_state$pools$byAddres = state.pools.byAddress[chainName.toUpperCase()]) !== null && _state$pools$byAddres !== void 0 ? _state$pools$byAddres : {};\n  });\n}\n_s(useAllPoolData, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\nexport function useUpdatePoolData() {\n  _s2();\n  const {\n    chainName: chainNameParam\n  } = useParams();\n  const {\n    chainId: connectedChainId\n  } = useWeb3React();\n  const connectedChainName = chainIdToBackendName(connectedChainId);\n  const networkName = (chainNameParam ? chainNameParam : connectedChainName).toUpperCase();\n  const dispatch = useDispatch();\n  const [network] = useActiveNetworkVersion();\n  return useCallback(pools => dispatch(updatePoolData({\n    pools,\n    networkId: networkName\n  })), [dispatch, networkName]);\n}\n_s2(useUpdatePoolData, \"pgJB0se8d1hF0SyK8azxElPmo88=\", false, function () {\n  return [useParams, useWeb3React, useDispatch, useActiveNetworkVersion];\n});\nexport function useAddPoolKeys() {\n  _s3();\n  const dispatch = useDispatch();\n  const [network] = useActiveNetworkVersion();\n  return useCallback(poolAddresses => dispatch(addPoolKeys({\n    poolAddresses,\n    networkId: network.id\n  })), [dispatch, network.id]);\n}\n_s3(useAddPoolKeys, \"2VwqZ7nBONFV5JB5NDKclu15JJ0=\", false, function () {\n  return [useDispatch, useActiveNetworkVersion];\n});\nexport function usePoolDatas(poolAddresses) {\n  _s4();\n  const allPoolData = useAllPoolData();\n  const addPoolKeys = useAddPoolKeys();\n  const untrackedAddresses = poolAddresses.reduce((accum, address) => {\n    if (!Object.keys(allPoolData).includes(address)) {\n      accum.push(address);\n    }\n    return accum;\n  }, []);\n  useEffect(() => {\n    if (untrackedAddresses) {\n      addPoolKeys(untrackedAddresses);\n    }\n    return;\n  }, [addPoolKeys, untrackedAddresses]);\n\n  // filter for pools with data\n  const poolsWithData = poolAddresses.map(address => {\n    var _allPoolData$address;\n    const poolData = (_allPoolData$address = allPoolData[address]) === null || _allPoolData$address === void 0 ? void 0 : _allPoolData$address.data;\n    return poolData !== null && poolData !== void 0 ? poolData : undefined;\n  }).filter(notEmpty);\n  return poolsWithData;\n}\n\n/**\n * Get top pools addresses that token is included in\n * If not loaded, fetch and store\n * @param address\n */\n_s4(usePoolDatas, \"rJaL3qE+XrZrwPMxvKwyzUsWDHY=\", false, function () {\n  return [useAllPoolData, useAddPoolKeys];\n});\nexport function usePoolChartData(address) {\n  _s5();\n  const dispatch = useDispatch();\n  const [activeNetwork] = useActiveNetworkVersion();\n  const pool = useSelector(state => {\n    var _state$pools$byAddres2;\n    return (_state$pools$byAddres2 = state.pools.byAddress[activeNetwork.id]) === null || _state$pools$byAddres2 === void 0 ? void 0 : _state$pools$byAddres2[address];\n  });\n  const chartData = pool === null || pool === void 0 ? void 0 : pool.chartData;\n  const [error, setError] = useState(false);\n  const {\n    dataClient\n  } = useClients();\n  useEffect(() => {\n    async function fetch() {\n      const {\n        error,\n        data\n      } = await fetchPoolChartData(address, dataClient);\n      if (!error && data) {\n        dispatch(updatePoolChartData({\n          poolAddress: address,\n          chartData: data,\n          networkId: activeNetwork.id\n        }));\n      }\n      if (error) {\n        setError(error);\n      }\n    }\n    if (!chartData && !error) {\n      fetch();\n    }\n  }, [address, dispatch, error, chartData, dataClient, activeNetwork.id]);\n\n  // return data\n  return chartData;\n}\n\n/**\n * Get all transactions on pool\n * @param address\n */\n_s5(usePoolChartData, \"2fFH9F+7Sa7oWeovIg2HwrV6DTM=\", false, function () {\n  return [useDispatch, useActiveNetworkVersion, useSelector, useClients];\n});\nexport function usePoolTransactions(address) {\n  _s6();\n  const dispatch = useDispatch();\n  const [activeNetwork] = useActiveNetworkVersion();\n  const pool = useSelector(state => {\n    var _state$pools$byAddres3;\n    return (_state$pools$byAddres3 = state.pools.byAddress[activeNetwork.id]) === null || _state$pools$byAddres3 === void 0 ? void 0 : _state$pools$byAddres3[address];\n  });\n  const transactions = pool === null || pool === void 0 ? void 0 : pool.transactions;\n  const [error, setError] = useState(false);\n  const {\n    dataClient\n  } = useClients();\n  useEffect(() => {\n    async function fetch() {\n      const {\n        error,\n        data\n      } = await fetchPoolTransactions(address, dataClient);\n      if (error) {\n        setError(true);\n      } else if (data) {\n        dispatch(updatePoolTransactions({\n          poolAddress: address,\n          transactions: data,\n          networkId: activeNetwork.id\n        }));\n      }\n    }\n    if (!transactions && !error) {\n      fetch();\n    }\n  }, [address, dispatch, error, transactions, dataClient, activeNetwork.id]);\n\n  // return data\n  return transactions;\n}\n_s6(usePoolTransactions, \"2fFH9F+7Sa7oWeovIg2HwrV6DTM=\", false, function () {\n  return [useDispatch, useActiveNetworkVersion, useSelector, useClients];\n});\nexport function usePoolTickData(address) {\n  _s7();\n  const dispatch = useDispatch();\n  const [activeNetwork] = useActiveNetworkVersion();\n  const pool = useSelector(state => {\n    var _state$pools$byAddres4;\n    return (_state$pools$byAddres4 = state.pools.byAddress[activeNetwork.id]) === null || _state$pools$byAddres4 === void 0 ? void 0 : _state$pools$byAddres4[address];\n  });\n  const tickData = pool.tickData;\n  const setPoolTickData = useCallback((address, tickData) => dispatch(updateTickData({\n    poolAddress: address,\n    tickData,\n    networkId: activeNetwork.id\n  })), [activeNetwork.id, dispatch]);\n  return [tickData, setPoolTickData];\n}\n_s7(usePoolTickData, \"CxIk+9WBtMJp/jFc+hig03QSTOQ=\", false, function () {\n  return [useDispatch, useActiveNetworkVersion, useSelector];\n});","map":{"version":3,"names":["addPoolKeys","updatePoolChartData","updatePoolTransactions","updateTickData","useCallback","useEffect","useState","useDispatch","useSelector","updatePoolData","notEmpty","fetchPoolChartData","fetchPoolTransactions","useActiveNetworkVersion","useClients","useParams","useWeb3React","chainIdToBackendName","useAllPoolData","chainName","state","pools","byAddress","toUpperCase","useUpdatePoolData","chainNameParam","chainId","connectedChainId","connectedChainName","networkName","dispatch","network","networkId","useAddPoolKeys","poolAddresses","id","usePoolDatas","allPoolData","untrackedAddresses","reduce","accum","address","Object","keys","includes","push","poolsWithData","map","poolData","data","undefined","filter","usePoolChartData","activeNetwork","pool","chartData","error","setError","dataClient","fetch","poolAddress","usePoolTransactions","transactions","usePoolTickData","tickData","setPoolTickData"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/state/pools/hooks.ts"],"sourcesContent":["import { addPoolKeys, updatePoolChartData, updatePoolTransactions, updateTickData } from 'state/pools/actions'\nimport { AppState, AppDispatch } from './../index'\nimport { useCallback, useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { PoolData, PoolChartEntry } from './reducer'\nimport { updatePoolData } from './actions'\nimport { notEmpty } from 'utils'\nimport { fetchPoolChartData } from 'data/pools/chartData'\nimport { Transaction } from 'types'\nimport { fetchPoolTransactions } from 'data/pools/transactions'\nimport { PoolTickData } from 'data/pools/tickData'\nimport { useActiveNetworkVersion, useClients } from 'state/application/hooks'\nimport { useParams } from 'react-router-dom'\nimport { useWeb3React } from '@web3-react/core'\nimport { chainIdToBackendName } from 'graphql/data/util'\nexport function useAllPoolData(chainName:string=\"ETHEREUM\"): {\n  [address: string]: { data: PoolData | undefined; lastUpdated: number | undefined }\n} {\n  return useSelector((state: AppState) => state.pools.byAddress[chainName.toUpperCase()] ?? {})\n}\n\nexport function useUpdatePoolData(): (pools: PoolData[]) => void {\n\n  const { chainName: chainNameParam } = useParams<{ chainName?: string }>()\n  const { chainId: connectedChainId } = useWeb3React()\n  const connectedChainName = chainIdToBackendName(connectedChainId)\n  const networkName=(chainNameParam? chainNameParam : connectedChainName).toUpperCase();\n  const dispatch = useDispatch<AppDispatch>()\n  const [network] = useActiveNetworkVersion()\n  return useCallback((pools: PoolData[]) => dispatch(updatePoolData({ pools, networkId: networkName })), [\n    dispatch,\n    networkName,\n  ])\n}\n\nexport function useAddPoolKeys(): (addresses: string[]) => void {\n  const dispatch = useDispatch<AppDispatch>()\n  const [network] = useActiveNetworkVersion()\n  return useCallback((poolAddresses: string[]) => dispatch(addPoolKeys({ poolAddresses, networkId: network.id })), [\n    dispatch,\n    network.id,\n  ])\n}\n\nexport function usePoolDatas(poolAddresses: string[]): PoolData[] {\n  const allPoolData = useAllPoolData()\n  const addPoolKeys = useAddPoolKeys()\n\n  const untrackedAddresses = poolAddresses.reduce((accum: string[], address) => {\n    if (!Object.keys(allPoolData).includes(address)) {\n      accum.push(address)\n    }\n    return accum\n  }, [])\n\n  useEffect(() => {\n    if (untrackedAddresses) {\n      addPoolKeys(untrackedAddresses)\n    }\n    return\n  }, [addPoolKeys, untrackedAddresses])\n\n  // filter for pools with data\n  const poolsWithData = poolAddresses\n    .map((address) => {\n      const poolData = allPoolData[address]?.data\n      return poolData ?? undefined\n    })\n    .filter(notEmpty)\n\n  return poolsWithData\n}\n\n/**\n * Get top pools addresses that token is included in\n * If not loaded, fetch and store\n * @param address\n */\nexport function usePoolChartData(address: string): PoolChartEntry[] | undefined {\n  const dispatch = useDispatch<AppDispatch>()\n  const [activeNetwork] = useActiveNetworkVersion()\n\n  const pool = useSelector((state: AppState) => state.pools.byAddress[activeNetwork.id]?.[address])\n  const chartData = pool?.chartData\n  const [error, setError] = useState(false)\n  const { dataClient } = useClients()\n\n  useEffect(() => {\n    async function fetch() {\n      const { error, data } = await fetchPoolChartData(address, dataClient)\n      if (!error && data) {\n        dispatch(updatePoolChartData({ poolAddress: address, chartData: data, networkId: activeNetwork.id }))\n      }\n      if (error) {\n        setError(error)\n      }\n    }\n    if (!chartData && !error) {\n      fetch()\n    }\n  }, [address, dispatch, error, chartData, dataClient, activeNetwork.id])\n\n  // return data\n  return chartData\n}\n\n/**\n * Get all transactions on pool\n * @param address\n */\nexport function usePoolTransactions(address: string): Transaction[] | undefined {\n  const dispatch = useDispatch<AppDispatch>()\n  const [activeNetwork] = useActiveNetworkVersion()\n  const pool = useSelector((state: AppState) => state.pools.byAddress[activeNetwork.id]?.[address])\n  const transactions = pool?.transactions\n  const [error, setError] = useState(false)\n  const { dataClient } = useClients()\n\n  useEffect(() => {\n    async function fetch() {\n      const { error, data } = await fetchPoolTransactions(address, dataClient)\n      if (error) {\n        setError(true)\n      } else if (data) {\n        dispatch(updatePoolTransactions({ poolAddress: address, transactions: data, networkId: activeNetwork.id }))\n      }\n    }\n    if (!transactions && !error) {\n      fetch()\n    }\n  }, [address, dispatch, error, transactions, dataClient, activeNetwork.id])\n\n  // return data\n  return transactions\n}\n\nexport function usePoolTickData(\n  address: string\n): [PoolTickData | undefined, (poolAddress: string, tickData: PoolTickData) => void] {\n  const dispatch = useDispatch<AppDispatch>()\n  const [activeNetwork] = useActiveNetworkVersion()\n  const pool = useSelector((state: AppState) => state.pools.byAddress[activeNetwork.id]?.[address])\n  const tickData = pool.tickData\n\n  const setPoolTickData = useCallback(\n    (address: string, tickData: PoolTickData) =>\n      dispatch(updateTickData({ poolAddress: address, tickData, networkId: activeNetwork.id })),\n    [activeNetwork.id, dispatch]\n  )\n\n  return [tickData, setPoolTickData]\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}