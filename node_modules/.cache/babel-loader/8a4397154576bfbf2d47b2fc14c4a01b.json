{"ast":null,"code":"const createTimeFormatter = (timestamp, locale, options) => new Date(timestamp.valueOf() * 1000).toLocaleTimeString(locale, options);\nexport const hourFormatter = locale => timestamp => createTimeFormatter(timestamp, locale, {\n  hour: 'numeric',\n  minute: 'numeric',\n  hour12: true\n});\nexport const dayHourFormatter = locale => timestamp => createTimeFormatter(timestamp, locale, {\n  month: 'short',\n  day: 'numeric',\n  hour: 'numeric',\n  minute: '2-digit',\n  hour12: true\n});\nconst createDateFormatter = (timestamp, locale, options) => new Date(timestamp.valueOf() * 1000).toLocaleDateString(locale, options);\nexport const monthDayFormatter = locale => timestamp => createDateFormatter(timestamp, locale, {\n  month: 'long',\n  day: 'numeric'\n});\nexport const monthYearDayFormatter = locale => timestamp => createDateFormatter(timestamp, locale, {\n  month: 'short',\n  year: 'numeric',\n  day: 'numeric'\n});\nexport const monthTickFormatter = locale => timestamp => {\n  let date = new Date(timestamp.valueOf() * 1000);\n\n  // when a tick maps to a date not on the first of the month, modify the tick to the closest\n  // first of month date. For example, Dec 31 becomes Jan 1, and Dec 5 becomes Dec 1.\n  if (date.getDate() !== 1) {\n    date = date.getDate() >= 15 ? new Date(date.getFullYear(), date.getMonth() + 1, 1) : new Date(date.getFullYear(), date.getMonth(), 1);\n  }\n  return date.toLocaleDateString(locale, {\n    month: 'long'\n  });\n};\nexport const weekFormatter = locale => timestamp => createDateFormatter(timestamp, locale, {\n  weekday: 'long'\n});","map":{"version":3,"names":["createTimeFormatter","timestamp","locale","options","Date","valueOf","toLocaleTimeString","hourFormatter","hour","minute","hour12","dayHourFormatter","month","day","createDateFormatter","toLocaleDateString","monthDayFormatter","monthYearDayFormatter","year","monthTickFormatter","date","getDate","getFullYear","getMonth","weekFormatter","weekday"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/utils/formatChartTimes.ts"],"sourcesContent":["import { NumberValue } from 'd3'\n\nconst createTimeFormatter = (timestamp: NumberValue, locale: string, options: Intl.DateTimeFormatOptions) =>\n  new Date(timestamp.valueOf() * 1000).toLocaleTimeString(locale, options)\n\nexport const hourFormatter = (locale: string) => (timestamp: NumberValue) =>\n  createTimeFormatter(timestamp, locale, {\n    hour: 'numeric',\n    minute: 'numeric',\n    hour12: true,\n  })\n\nexport const dayHourFormatter = (locale: string) => (timestamp: NumberValue) =>\n  createTimeFormatter(timestamp, locale, {\n    month: 'short',\n    day: 'numeric',\n    hour: 'numeric',\n    minute: '2-digit',\n    hour12: true,\n  })\n\nconst createDateFormatter = (timestamp: NumberValue, locale: string, options: Intl.DateTimeFormatOptions) =>\n  new Date(timestamp.valueOf() * 1000).toLocaleDateString(locale, options)\n\nexport const monthDayFormatter = (locale: string) => (timestamp: NumberValue) =>\n  createDateFormatter(timestamp, locale, {\n    month: 'long',\n    day: 'numeric',\n  })\n\nexport const monthYearDayFormatter = (locale: string) => (timestamp: NumberValue) =>\n  createDateFormatter(timestamp, locale, {\n    month: 'short',\n    year: 'numeric',\n    day: 'numeric',\n  })\n\nexport const monthTickFormatter = (locale: string) => (timestamp: NumberValue) => {\n  let date = new Date(timestamp.valueOf() * 1000)\n\n  // when a tick maps to a date not on the first of the month, modify the tick to the closest\n  // first of month date. For example, Dec 31 becomes Jan 1, and Dec 5 becomes Dec 1.\n  if (date.getDate() !== 1) {\n    date =\n      date.getDate() >= 15\n        ? new Date(date.getFullYear(), date.getMonth() + 1, 1)\n        : new Date(date.getFullYear(), date.getMonth(), 1)\n  }\n  return date.toLocaleDateString(locale, { month: 'long' })\n}\n\nexport const weekFormatter = (locale: string) => (timestamp: NumberValue) =>\n  createDateFormatter(timestamp, locale, { weekday: 'long' })\n"],"mappings":"AAEA,MAAMA,mBAAmB,GAAG,CAACC,SAAsB,EAAEC,MAAc,EAAEC,OAAmC,KACtG,IAAIC,IAAI,CAACH,SAAS,CAACI,OAAO,EAAE,GAAG,IAAI,CAAC,CAACC,kBAAkB,CAACJ,MAAM,EAAEC,OAAO,CAAC;AAE1E,OAAO,MAAMI,aAAa,GAAIL,MAAc,IAAMD,SAAsB,IACtED,mBAAmB,CAACC,SAAS,EAAEC,MAAM,EAAE;EACrCM,IAAI,EAAE,SAAS;EACfC,MAAM,EAAE,SAAS;EACjBC,MAAM,EAAE;AACV,CAAC,CAAC;AAEJ,OAAO,MAAMC,gBAAgB,GAAIT,MAAc,IAAMD,SAAsB,IACzED,mBAAmB,CAACC,SAAS,EAAEC,MAAM,EAAE;EACrCU,KAAK,EAAE,OAAO;EACdC,GAAG,EAAE,SAAS;EACdL,IAAI,EAAE,SAAS;EACfC,MAAM,EAAE,SAAS;EACjBC,MAAM,EAAE;AACV,CAAC,CAAC;AAEJ,MAAMI,mBAAmB,GAAG,CAACb,SAAsB,EAAEC,MAAc,EAAEC,OAAmC,KACtG,IAAIC,IAAI,CAACH,SAAS,CAACI,OAAO,EAAE,GAAG,IAAI,CAAC,CAACU,kBAAkB,CAACb,MAAM,EAAEC,OAAO,CAAC;AAE1E,OAAO,MAAMa,iBAAiB,GAAId,MAAc,IAAMD,SAAsB,IAC1Ea,mBAAmB,CAACb,SAAS,EAAEC,MAAM,EAAE;EACrCU,KAAK,EAAE,MAAM;EACbC,GAAG,EAAE;AACP,CAAC,CAAC;AAEJ,OAAO,MAAMI,qBAAqB,GAAIf,MAAc,IAAMD,SAAsB,IAC9Ea,mBAAmB,CAACb,SAAS,EAAEC,MAAM,EAAE;EACrCU,KAAK,EAAE,OAAO;EACdM,IAAI,EAAE,SAAS;EACfL,GAAG,EAAE;AACP,CAAC,CAAC;AAEJ,OAAO,MAAMM,kBAAkB,GAAIjB,MAAc,IAAMD,SAAsB,IAAK;EAChF,IAAImB,IAAI,GAAG,IAAIhB,IAAI,CAACH,SAAS,CAACI,OAAO,EAAE,GAAG,IAAI,CAAC;;EAE/C;EACA;EACA,IAAIe,IAAI,CAACC,OAAO,EAAE,KAAK,CAAC,EAAE;IACxBD,IAAI,GACFA,IAAI,CAACC,OAAO,EAAE,IAAI,EAAE,GAChB,IAAIjB,IAAI,CAACgB,IAAI,CAACE,WAAW,EAAE,EAAEF,IAAI,CAACG,QAAQ,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,GACpD,IAAInB,IAAI,CAACgB,IAAI,CAACE,WAAW,EAAE,EAAEF,IAAI,CAACG,QAAQ,EAAE,EAAE,CAAC,CAAC;EACxD;EACA,OAAOH,IAAI,CAACL,kBAAkB,CAACb,MAAM,EAAE;IAAEU,KAAK,EAAE;EAAO,CAAC,CAAC;AAC3D,CAAC;AAED,OAAO,MAAMY,aAAa,GAAItB,MAAc,IAAMD,SAAsB,IACtEa,mBAAmB,CAACb,SAAS,EAAEC,MAAM,EAAE;EAAEuB,OAAO,EAAE;AAAO,CAAC,CAAC"},"metadata":{},"sourceType":"module"}