{"ast":null,"code":"import { getAddress } from '@ethersproject/address';\nimport { AddressZero } from '@ethersproject/constants';\nimport { Contract } from '@ethersproject/contracts';\n// returns the checksummed address if the address is valid, otherwise returns false\nexport function isAddress(value) {\n  try {\n    // Alphabetical letters must be made lowercase for getAddress to work.\n    // See documentation here: https://docs.ethers.io/v5/api/utils/address/\n    return getAddress(value.toLowerCase());\n  } catch {\n    return false;\n  }\n}\n\n// shorten the checksummed version of the input address to have 0x + 4 characters at start and end\nexport function shortenAddress(address) {\n  let chars = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 4;\n  const parsed = isAddress(address);\n  if (!parsed) {\n    throw Error(`Invalid 'address' parameter '${address}'.`);\n  }\n  return `${parsed.substring(0, chars + 2)}...${parsed.substring(42 - chars)}`;\n}\nexport const currentTimestamp = () => new Date().getTime();\n\n// account is not optional\nfunction getSigner(provider, account) {\n  return provider.getSigner(account).connectUnchecked();\n}\n\n// account is optional\nfunction getProviderOrSigner(provider, account) {\n  return account ? getSigner(provider, account) : provider;\n}\n\n// account is optional\nexport function getContract(address, ABI, provider, account) {\n  if (!isAddress(address) || address === AddressZero) {\n    throw Error(`Invalid 'address' parameter '${address}'.`);\n  }\n  return new Contract(address, ABI, getProviderOrSigner(provider, account));\n}\nexport function escapeRegExp(string) {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n}\n\nexport function feeTierPercent(fee) {\n  return (fee / 10000).toPrecision(1) + '%';\n}\nexport function notEmpty(value) {\n  return value !== null && value !== undefined;\n}\nexport function getEtherscanLink(chainId, data, type, networkVersion) {\n  const prefix = networkVersion === PolygonNetworkInfo ? 'https://polygonscan.com/' : networkVersion === CeloNetworkInfo ? 'https://explorer.celo.org' : networkVersion === ArbitrumNetworkInfo ? 'https://arbiscan.io/' : networkVersion === OptimismNetworkInfo ? 'https://optimistic.etherscan.io' : `https://${ETHERSCAN_PREFIXES[chainId] || ETHERSCAN_PREFIXES[1]}etherscan.io`;\n  if (networkVersion === OptimismNetworkInfo) {\n    switch (type) {\n      case 'transaction':\n        {\n          return `${prefix}/tx/${data}`;\n        }\n      case 'token':\n        {\n          return `${prefix}/address/${data}`;\n        }\n      case 'block':\n        {\n          return `https://optimistic.etherscan.io`;\n        }\n      case 'address':\n      default:\n        {\n          return `${prefix}/address/${data}`;\n        }\n    }\n  }\n  if (networkVersion === ArbitrumNetworkInfo) {\n    switch (type) {\n      case 'transaction':\n        {\n          return `${prefix}/tx/${data}`;\n        }\n      case 'token':\n        {\n          return `${prefix}/address/${data}`;\n        }\n      case 'block':\n        {\n          return 'https://arbiscan.io/';\n        }\n      case 'address':\n      default:\n        {\n          return `${prefix}/address/${data}`;\n        }\n    }\n  }\n  switch (type) {\n    case 'transaction':\n      {\n        return `${prefix}/tx/${data}`;\n      }\n    case 'token':\n      {\n        return `${prefix}/token/${data}`;\n      }\n    case 'block':\n      {\n        return `${prefix}/block/${data}`;\n      }\n    case 'address':\n    default:\n      {\n        return `${prefix}/address/${data}`;\n      }\n  }\n}","map":{"version":3,"names":["getAddress","AddressZero","Contract","isAddress","value","toLowerCase","shortenAddress","address","chars","parsed","Error","substring","currentTimestamp","Date","getTime","getSigner","provider","account","connectUnchecked","getProviderOrSigner","getContract","ABI","escapeRegExp","string","replace","feeTierPercent","fee","toPrecision","notEmpty","undefined","getEtherscanLink","chainId","data","type","networkVersion","prefix","PolygonNetworkInfo","CeloNetworkInfo","ArbitrumNetworkInfo","OptimismNetworkInfo","ETHERSCAN_PREFIXES"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/utils/index.ts"],"sourcesContent":["import { getAddress } from '@ethersproject/address'\nimport { AddressZero } from '@ethersproject/constants'\nimport { Contract } from '@ethersproject/contracts'\nimport type { JsonRpcProvider, JsonRpcSigner } from '@ethersproject/providers'\n\n// returns the checksummed address if the address is valid, otherwise returns false\nexport function isAddress(value: any): string | false {\n  try {\n    // Alphabetical letters must be made lowercase for getAddress to work.\n    // See documentation here: https://docs.ethers.io/v5/api/utils/address/\n    return getAddress(value.toLowerCase())\n  } catch {\n    return false\n  }\n}\n\n// shorten the checksummed version of the input address to have 0x + 4 characters at start and end\nexport function shortenAddress(address: string, chars = 4): string {\n  const parsed = isAddress(address)\n  if (!parsed) {\n    throw Error(`Invalid 'address' parameter '${address}'.`)\n  }\n  return `${parsed.substring(0, chars + 2)}...${parsed.substring(42 - chars)}`\n}\n\nexport const currentTimestamp = () => new Date().getTime()\n\n// account is not optional\nfunction getSigner(provider: JsonRpcProvider, account: string): JsonRpcSigner {\n  return provider.getSigner(account).connectUnchecked()\n}\n\n// account is optional\nfunction getProviderOrSigner(provider: JsonRpcProvider, account?: string): JsonRpcProvider | JsonRpcSigner {\n  return account ? getSigner(provider, account) : provider\n}\n\n// account is optional\nexport function getContract(address: string, ABI: any, provider: JsonRpcProvider, account?: string): Contract {\n  if (!isAddress(address) || address === AddressZero) {\n    throw Error(`Invalid 'address' parameter '${address}'.`)\n  }\n\n  return new Contract(address, ABI, getProviderOrSigner(provider, account) as any)\n}\n\nexport function escapeRegExp(string: string): string {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') // $& means the whole matched string\n}\n\nexport function feeTierPercent(fee: number): string {\n  return (fee / 10000).toPrecision(1) + '%'\n}\n\nexport function notEmpty<TValue>(value: TValue | null | undefined): value is TValue {\n  return value !== null && value !== undefined\n}\n\n\nexport function getEtherscanLink(\n  chainId: number,\n  data: string,\n  type: 'transaction' | 'token' | 'address' | 'block',\n  networkVersion: NetworkInfo\n): string {\n  const prefix =\n    networkVersion === PolygonNetworkInfo\n      ? 'https://polygonscan.com/'\n      : networkVersion === CeloNetworkInfo\n      ? 'https://explorer.celo.org'\n      : networkVersion === ArbitrumNetworkInfo\n      ? 'https://arbiscan.io/'\n      : networkVersion === OptimismNetworkInfo\n      ? 'https://optimistic.etherscan.io'\n      : `https://${ETHERSCAN_PREFIXES[chainId] || ETHERSCAN_PREFIXES[1]}etherscan.io`\n\n  if (networkVersion === OptimismNetworkInfo) {\n    switch (type) {\n      case 'transaction': {\n        return `${prefix}/tx/${data}`\n      }\n      case 'token': {\n        return `${prefix}/address/${data}`\n      }\n      case 'block': {\n        return `https://optimistic.etherscan.io`\n      }\n      case 'address':\n      default: {\n        return `${prefix}/address/${data}`\n      }\n    }\n  }\n\n  if (networkVersion === ArbitrumNetworkInfo) {\n    switch (type) {\n      case 'transaction': {\n        return `${prefix}/tx/${data}`\n      }\n      case 'token': {\n        return `${prefix}/address/${data}`\n      }\n      case 'block': {\n        return 'https://arbiscan.io/'\n      }\n      case 'address':\n      default: {\n        return `${prefix}/address/${data}`\n      }\n    }\n  }\n\n  switch (type) {\n    case 'transaction': {\n      return `${prefix}/tx/${data}`\n    }\n    case 'token': {\n      return `${prefix}/token/${data}`\n    }\n    case 'block': {\n      return `${prefix}/block/${data}`\n    }\n    case 'address':\n    default: {\n      return `${prefix}/address/${data}`\n    }\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}