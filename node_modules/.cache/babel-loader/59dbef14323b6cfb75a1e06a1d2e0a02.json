{"ast":null,"code":"'use strict';\n\nvar xtend = require('xtend');\nvar removePosition = require('unist-util-remove-position');\nmodule.exports = parse;\nvar C_NEWLINE = '\\n';\nvar EXPRESSION_LINE_BREAKS = /\\r\\n|\\r/g;\n\n/* Parse the bound file. */\nfunction parse() {\n  var self = this;\n  var value = String(self.file);\n  var start = {\n    line: 1,\n    column: 1,\n    offset: 0\n  };\n  var content = xtend(start);\n  var node;\n\n  /* Clean non-unix newlines: `\\r\\n` and `\\r` are all\n   * changed to `\\n`.  This should not affect positional\n   * information. */\n  value = value.replace(EXPRESSION_LINE_BREAKS, C_NEWLINE);\n  if (value.charCodeAt(0) === 0xFEFF) {\n    value = value.slice(1);\n    content.column++;\n    content.offset++;\n  }\n  node = {\n    type: 'root',\n    children: self.tokenizeBlock(value, content),\n    position: {\n      start: start,\n      end: self.eof || xtend(start)\n    }\n  };\n  if (!self.options.position) {\n    removePosition(node, true);\n  }\n  return node;\n}","map":{"version":3,"names":["xtend","require","removePosition","module","exports","parse","C_NEWLINE","EXPRESSION_LINE_BREAKS","self","value","String","file","start","line","column","offset","content","node","replace","charCodeAt","slice","type","children","tokenizeBlock","position","end","eof","options"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/remark-parse/lib/parse.js"],"sourcesContent":["'use strict';\n\nvar xtend = require('xtend');\nvar removePosition = require('unist-util-remove-position');\n\nmodule.exports = parse;\n\nvar C_NEWLINE = '\\n';\nvar EXPRESSION_LINE_BREAKS = /\\r\\n|\\r/g;\n\n/* Parse the bound file. */\nfunction parse() {\n  var self = this;\n  var value = String(self.file);\n  var start = {line: 1, column: 1, offset: 0};\n  var content = xtend(start);\n  var node;\n\n  /* Clean non-unix newlines: `\\r\\n` and `\\r` are all\n   * changed to `\\n`.  This should not affect positional\n   * information. */\n  value = value.replace(EXPRESSION_LINE_BREAKS, C_NEWLINE);\n\n  if (value.charCodeAt(0) === 0xFEFF) {\n    value = value.slice(1);\n\n    content.column++;\n    content.offset++;\n  }\n\n  node = {\n    type: 'root',\n    children: self.tokenizeBlock(value, content),\n    position: {\n      start: start,\n      end: self.eof || xtend(start)\n    }\n  };\n\n  if (!self.options.position) {\n    removePosition(node, true);\n  }\n\n  return node;\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,KAAK,GAAGC,OAAO,CAAC,OAAO,CAAC;AAC5B,IAAIC,cAAc,GAAGD,OAAO,CAAC,4BAA4B,CAAC;AAE1DE,MAAM,CAACC,OAAO,GAAGC,KAAK;AAEtB,IAAIC,SAAS,GAAG,IAAI;AACpB,IAAIC,sBAAsB,GAAG,UAAU;;AAEvC;AACA,SAASF,KAAK,GAAG;EACf,IAAIG,IAAI,GAAG,IAAI;EACf,IAAIC,KAAK,GAAGC,MAAM,CAACF,IAAI,CAACG,IAAI,CAAC;EAC7B,IAAIC,KAAK,GAAG;IAACC,IAAI,EAAE,CAAC;IAAEC,MAAM,EAAE,CAAC;IAAEC,MAAM,EAAE;EAAC,CAAC;EAC3C,IAAIC,OAAO,GAAGhB,KAAK,CAACY,KAAK,CAAC;EAC1B,IAAIK,IAAI;;EAER;AACF;AACA;EACER,KAAK,GAAGA,KAAK,CAACS,OAAO,CAACX,sBAAsB,EAAED,SAAS,CAAC;EAExD,IAAIG,KAAK,CAACU,UAAU,CAAC,CAAC,CAAC,KAAK,MAAM,EAAE;IAClCV,KAAK,GAAGA,KAAK,CAACW,KAAK,CAAC,CAAC,CAAC;IAEtBJ,OAAO,CAACF,MAAM,EAAE;IAChBE,OAAO,CAACD,MAAM,EAAE;EAClB;EAEAE,IAAI,GAAG;IACLI,IAAI,EAAE,MAAM;IACZC,QAAQ,EAAEd,IAAI,CAACe,aAAa,CAACd,KAAK,EAAEO,OAAO,CAAC;IAC5CQ,QAAQ,EAAE;MACRZ,KAAK,EAAEA,KAAK;MACZa,GAAG,EAAEjB,IAAI,CAACkB,GAAG,IAAI1B,KAAK,CAACY,KAAK;IAC9B;EACF,CAAC;EAED,IAAI,CAACJ,IAAI,CAACmB,OAAO,CAACH,QAAQ,EAAE;IAC1BtB,cAAc,CAACe,IAAI,EAAE,IAAI,CAAC;EAC5B;EAEA,OAAOA,IAAI;AACb"},"metadata":{},"sourceType":"script"}