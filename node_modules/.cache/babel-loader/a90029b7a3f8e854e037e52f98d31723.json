{"ast":null,"code":"import { urlEncode, makeDsn, dsnToString } from '@sentry/utils';\nconst SENTRY_API_VERSION = '7';\n\n/** Returns the prefix to construct Sentry ingestion API endpoints. */\nfunction getBaseApiEndpoint(dsn) {\n  const protocol = dsn.protocol ? `${dsn.protocol}:` : '';\n  const port = dsn.port ? `:${dsn.port}` : '';\n  return `${protocol}//${dsn.host}${port}${dsn.path ? `/${dsn.path}` : ''}/api/`;\n}\n\n/** Returns the ingest API endpoint for target. */\nfunction _getIngestEndpoint(dsn) {\n  return `${getBaseApiEndpoint(dsn)}${dsn.projectId}/envelope/`;\n}\n\n/** Returns a URL-encoded string with auth config suitable for a query string. */\nfunction _encodedAuth(dsn, sdkInfo) {\n  return urlEncode({\n    // We send only the minimum set of required information. See\n    // https://github.com/getsentry/sentry-javascript/issues/2572.\n    sentry_key: dsn.publicKey,\n    sentry_version: SENTRY_API_VERSION,\n    ...(sdkInfo && {\n      sentry_client: `${sdkInfo.name}/${sdkInfo.version}`\n    })\n  });\n}\n\n/**\n * Returns the envelope endpoint URL with auth in the query string.\n *\n * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n */\nfunction getEnvelopeEndpointWithUrlEncodedAuth(dsn) {\n  let tunnelOrOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  // TODO (v8): Use this code instead\n  // const { tunnel, _metadata = {} } = options;\n  // return tunnel ? tunnel : `${_getIngestEndpoint(dsn)}?${_encodedAuth(dsn, _metadata.sdk)}`;\n\n  const tunnel = typeof tunnelOrOptions === 'string' ? tunnelOrOptions : tunnelOrOptions.tunnel;\n  const sdkInfo = typeof tunnelOrOptions === 'string' || !tunnelOrOptions._metadata ? undefined : tunnelOrOptions._metadata.sdk;\n  return tunnel ? tunnel : `${_getIngestEndpoint(dsn)}?${_encodedAuth(dsn, sdkInfo)}`;\n}\n\n/** Returns the url to the report dialog endpoint. */\nfunction getReportDialogEndpoint(dsnLike, dialogOptions) {\n  const dsn = makeDsn(dsnLike);\n  const endpoint = `${getBaseApiEndpoint(dsn)}embed/error-page/`;\n  let encodedOptions = `dsn=${dsnToString(dsn)}`;\n  for (const key in dialogOptions) {\n    if (key === 'dsn') {\n      continue;\n    }\n    if (key === 'user') {\n      const user = dialogOptions.user;\n      if (!user) {\n        continue;\n      }\n      if (user.name) {\n        encodedOptions += `&name=${encodeURIComponent(user.name)}`;\n      }\n      if (user.email) {\n        encodedOptions += `&email=${encodeURIComponent(user.email)}`;\n      }\n    } else {\n      encodedOptions += `&${encodeURIComponent(key)}=${encodeURIComponent(dialogOptions[key])}`;\n    }\n  }\n  return `${endpoint}?${encodedOptions}`;\n}\nexport { getEnvelopeEndpointWithUrlEncodedAuth, getReportDialogEndpoint };","map":{"version":3,"sources":["../../src/api.ts"],"names":[],"mappings":";AAGA,MAAA,kBAAA,GAAA,GAAA;;AAEA;AACA,SAAA,kBAAA,CAAA,GAAA,EAAA;EACA,MAAA,QAAA,GAAA,GAAA,CAAA,QAAA,GAAA,GAAA,GAAA,CAAA,QAAA,GAAA,GAAA,EAAA;EACA,MAAA,IAAA,GAAA,GAAA,CAAA,IAAA,GAAA,IAAA,GAAA,CAAA,IAAA,EAAA,GAAA,EAAA;EACA,OAAA,GAAA,QAAA,KAAA,GAAA,CAAA,IAAA,GAAA,IAAA,GAAA,GAAA,CAAA,IAAA,GAAA,IAAA,GAAA,CAAA,IAAA,EAAA,GAAA,EAAA,OAAA;AACA;;AAEA;AACA,SAAA,kBAAA,CAAA,GAAA,EAAA;EACA,OAAA,GAAA,kBAAA,CAAA,GAAA,CAAA,GAAA,GAAA,CAAA,SAAA,YAAA;AACA;;AAEA;AACA,SAAA,YAAA,CAAA,GAAA,EAAA,OAAA,EAAA;EACA,OAAA,SAAA,CAAA;IACA;IACA;IACA,UAAA,EAAA,GAAA,CAAA,SAAA;IACA,cAAA,EAAA,kBAAA;IACA,IAAA,OAAA,IAAA;MAAA,aAAA,EAAA,GAAA,OAAA,CAAA,IAAA,IAAA,OAAA,CAAA,OAAA;IAAA,CAAA;EACA,CAAA,CAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAA,qCAAA,CACA,GAAA,EAIA;EAAA,IADA,eAAA,uEAAA,CAAA,CAAA;EAEA;EACA;EACA;;EAEA,MAAA,MAAA,GAAA,OAAA,eAAA,KAAA,QAAA,GAAA,eAAA,GAAA,eAAA,CAAA,MAAA;EACA,MAAA,OAAA,GACA,OAAA,eAAA,KAAA,QAAA,IAAA,CAAA,eAAA,CAAA,SAAA,GAAA,SAAA,GAAA,eAAA,CAAA,SAAA,CAAA,GAAA;EAEA,OAAA,MAAA,GAAA,MAAA,GAAA,GAAA,kBAAA,CAAA,GAAA,CAAA,IAAA,YAAA,CAAA,GAAA,EAAA,OAAA,CAAA,EAAA;AACA;;AAEA;AACA,SAAA,uBAAA,CACA,OAAA,EACA,aAAA,EAKA;EACA,MAAA,GAAA,GAAA,OAAA,CAAA,OAAA,CAAA;EACA,MAAA,QAAA,GAAA,GAAA,kBAAA,CAAA,GAAA,CAAA,mBAAA;EAEA,IAAA,cAAA,GAAA,OAAA,WAAA,CAAA,GAAA,CAAA,EAAA;EACA,KAAA,MAAA,GAAA,IAAA,aAAA,EAAA;IACA,IAAA,GAAA,KAAA,KAAA,EAAA;MACA;IACA;IAEA,IAAA,GAAA,KAAA,MAAA,EAAA;MACA,MAAA,IAAA,GAAA,aAAA,CAAA,IAAA;MACA,IAAA,CAAA,IAAA,EAAA;QACA;MACA;MACA,IAAA,IAAA,CAAA,IAAA,EAAA;QACA,cAAA,IAAA,SAAA,kBAAA,CAAA,IAAA,CAAA,IAAA,CAAA,EAAA;MACA;MACA,IAAA,IAAA,CAAA,KAAA,EAAA;QACA,cAAA,IAAA,UAAA,kBAAA,CAAA,IAAA,CAAA,KAAA,CAAA,EAAA;MACA;IACA,CAAA,MAAA;MACA,cAAA,IAAA,IAAA,kBAAA,CAAA,GAAA,CAAA,IAAA,kBAAA,CAAA,aAAA,CAAA,GAAA,CAAA,CAAA,EAAA;IACA;EACA;EAEA,OAAA,GAAA,QAAA,IAAA,cAAA,EAAA;AACA","sourcesContent":["import { ClientOptions, DsnComponents, DsnLike, SdkInfo } from '@sentry/types';\nimport { dsnToString, makeDsn, urlEncode } from '@sentry/utils';\n\nconst SENTRY_API_VERSION = '7';\n\n/** Returns the prefix to construct Sentry ingestion API endpoints. */\nfunction getBaseApiEndpoint(dsn: DsnComponents): string {\n  const protocol = dsn.protocol ? `${dsn.protocol}:` : '';\n  const port = dsn.port ? `:${dsn.port}` : '';\n  return `${protocol}//${dsn.host}${port}${dsn.path ? `/${dsn.path}` : ''}/api/`;\n}\n\n/** Returns the ingest API endpoint for target. */\nfunction _getIngestEndpoint(dsn: DsnComponents): string {\n  return `${getBaseApiEndpoint(dsn)}${dsn.projectId}/envelope/`;\n}\n\n/** Returns a URL-encoded string with auth config suitable for a query string. */\nfunction _encodedAuth(dsn: DsnComponents, sdkInfo: SdkInfo | undefined): string {\n  return urlEncode({\n    // We send only the minimum set of required information. See\n    // https://github.com/getsentry/sentry-javascript/issues/2572.\n    sentry_key: dsn.publicKey,\n    sentry_version: SENTRY_API_VERSION,\n    ...(sdkInfo && { sentry_client: `${sdkInfo.name}/${sdkInfo.version}` }),\n  });\n}\n\n/**\n * Returns the envelope endpoint URL with auth in the query string.\n *\n * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n */\nexport function getEnvelopeEndpointWithUrlEncodedAuth(\n  dsn: DsnComponents,\n  // TODO (v8): Remove `tunnelOrOptions` in favor of `options`, and use the substitute code below\n  // options: ClientOptions = {} as ClientOptions,\n  tunnelOrOptions: string | ClientOptions = {} as ClientOptions,\n): string {\n  // TODO (v8): Use this code instead\n  // const { tunnel, _metadata = {} } = options;\n  // return tunnel ? tunnel : `${_getIngestEndpoint(dsn)}?${_encodedAuth(dsn, _metadata.sdk)}`;\n\n  const tunnel = typeof tunnelOrOptions === 'string' ? tunnelOrOptions : tunnelOrOptions.tunnel;\n  const sdkInfo =\n    typeof tunnelOrOptions === 'string' || !tunnelOrOptions._metadata ? undefined : tunnelOrOptions._metadata.sdk;\n\n  return tunnel ? tunnel : `${_getIngestEndpoint(dsn)}?${_encodedAuth(dsn, sdkInfo)}`;\n}\n\n/** Returns the url to the report dialog endpoint. */\nexport function getReportDialogEndpoint(\n  dsnLike: DsnLike,\n  dialogOptions: {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    [key: string]: any;\n    user?: { name?: string; email?: string };\n  },\n): string {\n  const dsn = makeDsn(dsnLike);\n  const endpoint = `${getBaseApiEndpoint(dsn)}embed/error-page/`;\n\n  let encodedOptions = `dsn=${dsnToString(dsn)}`;\n  for (const key in dialogOptions) {\n    if (key === 'dsn') {\n      continue;\n    }\n\n    if (key === 'user') {\n      const user = dialogOptions.user;\n      if (!user) {\n        continue;\n      }\n      if (user.name) {\n        encodedOptions += `&name=${encodeURIComponent(user.name)}`;\n      }\n      if (user.email) {\n        encodedOptions += `&email=${encodeURIComponent(user.email)}`;\n      }\n    } else {\n      encodedOptions += `&${encodeURIComponent(key)}=${encodeURIComponent(dialogOptions[key] as string)}`;\n    }\n  }\n\n  return `${endpoint}?${encodedOptions}`;\n}\n"]},"metadata":{},"sourceType":"module"}