{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { getCookieName as getStorageKey } from './cookie-name';\nvar SessionManager = /** @class */function () {\n  function SessionManager(storage, apiKey) {\n    this.storage = storage;\n    this.isSessionCacheValid = true;\n    this.storageKey = getStorageKey(apiKey);\n    this.cache = {\n      optOut: false\n    };\n  }\n  /**\n   * load() must be called immediately after instantation\n   *\n   * ```ts\n   * await new SessionManager(...).load();\n   * ```\n   */\n  SessionManager.prototype.load = function () {\n    var _a;\n    return __awaiter(this, void 0, void 0, function () {\n      var _b;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            _b = this;\n            return [4 /*yield*/, this.storage.get(this.storageKey)];\n          case 1:\n            _b.cache = (_a = _c.sent()) !== null && _a !== void 0 ? _a : {\n              optOut: false\n            };\n            return [2 /*return*/, this];\n        }\n      });\n    });\n  };\n  SessionManager.prototype.setSession = function (session) {\n    this.cache = __assign(__assign({}, this.cache), session);\n    void this.storage.set(this.storageKey, this.cache);\n  };\n  SessionManager.prototype.getSessionId = function () {\n    var _this = this;\n    this.isSessionCacheValid = true;\n    void this.storage.get(this.storageKey).then(function (userSession) {\n      // Checks if session id has been set since the last get\n      if (_this.isSessionCacheValid) {\n        _this.cache.sessionId = userSession === null || userSession === void 0 ? void 0 : userSession.sessionId;\n      }\n    });\n    return this.cache.sessionId;\n  };\n  SessionManager.prototype.setSessionId = function (sessionId) {\n    // Flags session id has been set\n    this.isSessionCacheValid = false;\n    this.setSession({\n      sessionId: sessionId\n    });\n  };\n  SessionManager.prototype.getDeviceId = function () {\n    return this.cache.deviceId;\n  };\n  SessionManager.prototype.setDeviceId = function (deviceId) {\n    this.setSession({\n      deviceId: deviceId\n    });\n  };\n  SessionManager.prototype.getUserId = function () {\n    return this.cache.userId;\n  };\n  SessionManager.prototype.setUserId = function (userId) {\n    this.setSession({\n      userId: userId\n    });\n  };\n  SessionManager.prototype.getLastEventTime = function () {\n    return this.cache.lastEventTime;\n  };\n  SessionManager.prototype.setLastEventTime = function (lastEventTime) {\n    this.setSession({\n      lastEventTime: lastEventTime\n    });\n  };\n  SessionManager.prototype.getOptOut = function () {\n    return this.cache.optOut;\n  };\n  SessionManager.prototype.setOptOut = function (optOut) {\n    this.setSession({\n      optOut: optOut\n    });\n  };\n  return SessionManager;\n}();\nexport { SessionManager };","map":{"version":3,"sources":["../../src/session-manager.ts"],"names":[],"mappings":"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","sourcesContent":["import { UserSession, Storage, SessionManager as ISessionManager } from '@amplitude/analytics-types';\nimport { getCookieName as getStorageKey } from './cookie-name';\n\nexport class SessionManager implements ISessionManager {\n  storageKey: string;\n  cache: UserSession;\n  isSessionCacheValid = true;\n\n  constructor(private storage: Storage<UserSession>, apiKey: string) {\n    this.storageKey = getStorageKey(apiKey);\n    this.cache = { optOut: false };\n  }\n\n  /**\n   * load() must be called immediately after instantation\n   *\n   * ```ts\n   * await new SessionManager(...).load();\n   * ```\n   */\n  async load() {\n    this.cache = (await this.storage.get(this.storageKey)) ?? {\n      optOut: false,\n    };\n    return this;\n  }\n\n  setSession(session: Partial<UserSession>) {\n    this.cache = { ...this.cache, ...session };\n    void this.storage.set(this.storageKey, this.cache);\n  }\n\n  getSessionId() {\n    this.isSessionCacheValid = true;\n    void this.storage.get(this.storageKey).then((userSession) => {\n      // Checks if session id has been set since the last get\n      if (this.isSessionCacheValid) {\n        this.cache.sessionId = userSession?.sessionId;\n      }\n    });\n    return this.cache.sessionId;\n  }\n\n  setSessionId(sessionId: number) {\n    // Flags session id has been set\n    this.isSessionCacheValid = false;\n    this.setSession({ sessionId });\n  }\n\n  getDeviceId(): string | undefined {\n    return this.cache.deviceId;\n  }\n\n  setDeviceId(deviceId: string): void {\n    this.setSession({ deviceId });\n  }\n\n  getUserId(): string | undefined {\n    return this.cache.userId;\n  }\n\n  setUserId(userId: string): void {\n    this.setSession({ userId });\n  }\n\n  getLastEventTime() {\n    return this.cache.lastEventTime;\n  }\n\n  setLastEventTime(lastEventTime: number) {\n    this.setSession({ lastEventTime });\n  }\n\n  getOptOut(): boolean {\n    return this.cache.optOut;\n  }\n\n  setOptOut(optOut: boolean): void {\n    this.setSession({ optOut });\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}