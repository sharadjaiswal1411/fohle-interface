{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { CurrencyAmount, MaxUint256 } from '@uniswap/sdk-core';\nimport { useSingleCallResult } from 'lib/hooks/multicall';\nimport { useCallback, useMemo } from 'react';\nimport { TransactionType } from 'state/transactions/types';\nimport { calculateGasMargin } from 'utils/calculateGasMargin';\nimport { useTokenContract } from './useContract';\nexport function useTokenAllowance(token, owner, spender) {\n  _s();\n  const contract = useTokenContract(token === null || token === void 0 ? void 0 : token.address, false);\n  const inputs = useMemo(() => [owner, spender], [owner, spender]);\n  const {\n    result,\n    syncing: isSyncing\n  } = useSingleCallResult(contract, 'allowance', inputs);\n  return useMemo(() => {\n    const tokenAllowance = token && result && CurrencyAmount.fromRawAmount(token, result.toString());\n    return {\n      tokenAllowance,\n      isSyncing\n    };\n  }, [isSyncing, result, token]);\n}\n_s(useTokenAllowance, \"KHjF1rNjWeeoQ23ouoZbYKSdPzg=\", false, function () {\n  return [useTokenContract, useSingleCallResult];\n});\nexport function useUpdateTokenAllowance(amount, spender) {\n  _s2();\n  const contract = useTokenContract(amount === null || amount === void 0 ? void 0 : amount.currency.address);\n  return useCallback(async () => {\n    try {\n      if (!amount) throw new Error('missing amount');\n      if (!contract) throw new Error('missing contract');\n      if (!spender) throw new Error('missing spender');\n      let allowance = MaxUint256.toString();\n      const estimatedGas = await contract.estimateGas.approve(spender, allowance).catch(() => {\n        // Fallback for tokens which restrict approval amounts:\n        allowance = amount.quotient.toString();\n        return contract.estimateGas.approve(spender, allowance);\n      });\n      const gasLimit = calculateGasMargin(estimatedGas);\n      const response = await contract.approve(spender, allowance, {\n        gasLimit\n      });\n      return {\n        response,\n        info: {\n          type: TransactionType.APPROVAL,\n          tokenAddress: contract.address,\n          spender\n        }\n      };\n    } catch (e) {\n      var _amount$currency$symb;\n      const symbol = (_amount$currency$symb = amount === null || amount === void 0 ? void 0 : amount.currency.symbol) !== null && _amount$currency$symb !== void 0 ? _amount$currency$symb : 'Token';\n      throw new Error(`${symbol} approval failed: ${e instanceof Error ? e.message : e}`);\n    }\n  }, [amount, contract, spender]);\n}\n_s2(useUpdateTokenAllowance, \"DblhWWnW9TIWqQzz+A+t95M6Aa4=\", false, function () {\n  return [useTokenContract];\n});","map":{"version":3,"names":["CurrencyAmount","MaxUint256","useSingleCallResult","useCallback","useMemo","TransactionType","calculateGasMargin","useTokenContract","useTokenAllowance","token","owner","spender","contract","address","inputs","result","syncing","isSyncing","tokenAllowance","fromRawAmount","toString","useUpdateTokenAllowance","amount","currency","Error","allowance","estimatedGas","estimateGas","approve","catch","quotient","gasLimit","response","info","type","APPROVAL","tokenAddress","e","symbol","message"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/hooks/useTokenAllowance.ts"],"sourcesContent":["import { BigNumberish } from '@ethersproject/bignumber'\nimport { ContractTransaction } from '@ethersproject/contracts'\nimport { CurrencyAmount, MaxUint256, Token } from '@uniswap/sdk-core'\nimport { useSingleCallResult } from 'lib/hooks/multicall'\nimport { useCallback, useMemo } from 'react'\nimport { ApproveTransactionInfo, TransactionType } from 'state/transactions/types'\nimport { calculateGasMargin } from 'utils/calculateGasMargin'\n\nimport { useTokenContract } from './useContract'\n\nexport function useTokenAllowance(\n  token?: Token,\n  owner?: string,\n  spender?: string\n): {\n  tokenAllowance: CurrencyAmount<Token> | undefined\n  isSyncing: boolean\n} {\n  const contract = useTokenContract(token?.address, false)\n\n  const inputs = useMemo(() => [owner, spender], [owner, spender])\n  const { result, syncing: isSyncing } = useSingleCallResult(contract, 'allowance', inputs)\n\n  return useMemo(() => {\n    const tokenAllowance = token && result && CurrencyAmount.fromRawAmount(token, result.toString())\n    return { tokenAllowance, isSyncing }\n  }, [isSyncing, result, token])\n}\n\nexport function useUpdateTokenAllowance(amount: CurrencyAmount<Token> | undefined, spender: string) {\n  const contract = useTokenContract(amount?.currency.address)\n\n  return useCallback(async (): Promise<{\n    response: ContractTransaction\n    info: ApproveTransactionInfo\n  }> => {\n    try {\n      if (!amount) throw new Error('missing amount')\n      if (!contract) throw new Error('missing contract')\n      if (!spender) throw new Error('missing spender')\n\n      let allowance: BigNumberish = MaxUint256.toString()\n      const estimatedGas = await contract.estimateGas.approve(spender, allowance).catch(() => {\n        // Fallback for tokens which restrict approval amounts:\n        allowance = amount.quotient.toString()\n        return contract.estimateGas.approve(spender, allowance)\n      })\n\n      const gasLimit = calculateGasMargin(estimatedGas)\n      const response = await contract.approve(spender, allowance, { gasLimit })\n      return {\n        response,\n        info: {\n          type: TransactionType.APPROVAL,\n          tokenAddress: contract.address,\n          spender,\n        },\n      }\n    } catch (e: unknown) {\n      const symbol = amount?.currency.symbol ?? 'Token'\n      throw new Error(`${symbol} approval failed: ${e instanceof Error ? e.message : e}`)\n    }\n  }, [amount, contract, spender])\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}