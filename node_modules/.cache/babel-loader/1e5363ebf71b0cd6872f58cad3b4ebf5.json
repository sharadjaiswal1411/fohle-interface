{"ast":null,"code":"import _styled from \"styled-components\";\nvar _jsxFileName = \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/components/NumericalInput/index.tsx\";\nimport React from 'react';\nimport { escapeRegExp } from '../../utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledInput = _styled.input.withConfig({\n  displayName: \"NumericalInput__StyledInput\",\n  componentId: \"sc-1x3stf0-0\"\n})([\"color:\", \";width:0;position:relative;font-weight:400;outline:none;border:none;flex:1 1 auto;background-color:transparent;font-size:\", \";text-align:\", \";white-space:nowrap;overflow:hidden;text-overflow:ellipsis;padding:0px;-webkit-appearance:textfield;text-align:right;::-webkit-search-decoration{-webkit-appearance:none;}[type='number']{-moz-appearance:textfield;}::-webkit-outer-spin-button,::-webkit-inner-spin-button{-webkit-appearance:none;}::placeholder{color:\", \";}\"], _ref => {\n  let {\n    error,\n    theme\n  } = _ref;\n  return error ? theme.accentFailure : theme.textPrimary;\n}, _ref2 => {\n  let {\n    fontSize\n  } = _ref2;\n  return fontSize !== null && fontSize !== void 0 ? fontSize : '28px';\n}, _ref3 => {\n  let {\n    align\n  } = _ref3;\n  return align && align;\n}, _ref4 => {\n  let {\n    theme\n  } = _ref4;\n  return theme.textTertiary;\n});\nconst inputRegex = RegExp(`^\\\\d*(?:\\\\\\\\[.])?\\\\d*$`); // match escaped \".\" characters via in a non-capturing group\n\nexport const Input = /*#__PURE__*/React.memo(_c = function InnerInput(_ref5) {\n  let {\n    value,\n    onUserInput,\n    placeholder,\n    prependSymbol,\n    ...rest\n  } = _ref5;\n  const enforcer = nextUserInput => {\n    if (nextUserInput === '' || inputRegex.test(escapeRegExp(nextUserInput))) {\n      onUserInput(nextUserInput);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(StyledInput, {\n    ...rest,\n    value: prependSymbol && value ? prependSymbol + value : value,\n    onChange: event => {\n      if (prependSymbol) {\n        const value = event.target.value;\n\n        // cut off prepended symbol\n        const formattedValue = value.toString().includes(prependSymbol) ? value.toString().slice(1, value.toString().length + 1) : value;\n\n        // replace commas with periods, because uniswap exclusively uses period as the decimal separator\n        enforcer(formattedValue.replace(/,/g, '.'));\n      } else {\n        enforcer(event.target.value.replace(/,/g, '.'));\n      }\n    }\n    // universal input options\n    ,\n    inputMode: \"decimal\",\n    autoComplete: \"off\",\n    autoCorrect: \"off\"\n    // text-specific options\n    ,\n    type: \"text\",\n    pattern: \"^[0-9]*[.,]?[0-9]*$\",\n    placeholder: placeholder || '0',\n    minLength: 1,\n    maxLength: 79,\n    spellCheck: \"false\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n});\n_c2 = Input;\nexport default Input;\n\n// const inputRegex = RegExp(`^\\\\d*(?:\\\\\\\\[.])?\\\\d*$`) // match escaped \".\" characters via in a non-capturing group\nvar _c, _c2;\n$RefreshReg$(_c, \"Input$React.memo\");\n$RefreshReg$(_c2, \"Input\");","map":{"version":3,"names":["React","escapeRegExp","StyledInput","styled","input","error","theme","accentFailure","textPrimary","fontSize","align","textTertiary","inputRegex","RegExp","Input","memo","InnerInput","value","onUserInput","placeholder","prependSymbol","rest","enforcer","nextUserInput","test","event","target","formattedValue","toString","includes","slice","length","replace"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/components/NumericalInput/index.tsx"],"sourcesContent":["import React from 'react'\nimport styled from 'styled-components/macro'\n\nimport { escapeRegExp } from '../../utils'\n\nconst StyledInput = styled.input<{ error?: boolean; fontSize?: string; align?: string }>`\n  color: ${({ error, theme }) => (error ? theme.accentFailure : theme.textPrimary)};\n  width: 0;\n  position: relative;\n  font-weight: 400;\n  outline: none;\n  border: none;\n  flex: 1 1 auto;\n  background-color: transparent;\n  font-size: ${({ fontSize }) => fontSize ?? '28px'};\n  text-align: ${({ align }) => align && align};\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  padding: 0px;\n  -webkit-appearance: textfield;\n  text-align: right;\n\n  ::-webkit-search-decoration {\n    -webkit-appearance: none;\n  }\n\n  [type='number'] {\n    -moz-appearance: textfield;\n  }\n\n  ::-webkit-outer-spin-button,\n  ::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n  }\n\n  ::placeholder {\n    color: ${({ theme }) => theme.textTertiary};\n  }\n`\n\nconst inputRegex = RegExp(`^\\\\d*(?:\\\\\\\\[.])?\\\\d*$`) // match escaped \".\" characters via in a non-capturing group\n\nexport const Input = React.memo(function InnerInput({\n  value,\n  onUserInput,\n  placeholder,\n  prependSymbol,\n  ...rest\n}: {\n  value: string | number\n  onUserInput: (input: string) => void\n  error?: boolean\n  fontSize?: string\n  align?: 'right' | 'left'\n  prependSymbol?: string | undefined\n} & Omit<React.HTMLProps<HTMLInputElement>, 'ref' | 'onChange' | 'as'>) {\n  const enforcer = (nextUserInput: string) => {\n    if (nextUserInput === '' || inputRegex.test(escapeRegExp(nextUserInput))) {\n      onUserInput(nextUserInput)\n    }\n  }\n\n  return (\n    <StyledInput\n      {...rest}\n      value={prependSymbol && value ? prependSymbol + value : value}\n      onChange={(event) => {\n        if (prependSymbol) {\n          const value = event.target.value\n\n          // cut off prepended symbol\n          const formattedValue = value.toString().includes(prependSymbol)\n            ? value.toString().slice(1, value.toString().length + 1)\n            : value\n\n          // replace commas with periods, because uniswap exclusively uses period as the decimal separator\n          enforcer(formattedValue.replace(/,/g, '.'))\n        } else {\n          enforcer(event.target.value.replace(/,/g, '.'))\n        }\n      }}\n      // universal input options\n      inputMode=\"decimal\"\n      autoComplete=\"off\"\n      autoCorrect=\"off\"\n      // text-specific options\n      type=\"text\"\n      pattern=\"^[0-9]*[.,]?[0-9]*$\"\n      placeholder={placeholder || '0'}\n      minLength={1}\n      maxLength={79}\n      spellCheck=\"false\"\n    />\n  )\n})\n\nexport default Input\n\n// const inputRegex = RegExp(`^\\\\d*(?:\\\\\\\\[.])?\\\\d*$`) // match escaped \".\" characters via in a non-capturing group\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AAGzB,SAASC,YAAY,QAAQ,aAAa;AAAA;AAE1C,MAAMC,WAAW,GAAGC,OAAM,CAACC,KAAK;EAAA;EAAA;AAAA,geACrB;EAAA,IAAC;IAAEC,KAAK;IAAEC;EAAM,CAAC;EAAA,OAAMD,KAAK,GAAGC,KAAK,CAACC,aAAa,GAAGD,KAAK,CAACE,WAAW;AAAA,CAAC,EAQnE;EAAA,IAAC;IAAEC;EAAS,CAAC;EAAA,OAAKA,QAAQ,aAARA,QAAQ,cAARA,QAAQ,GAAI,MAAM;AAAA,GACnC;EAAA,IAAC;IAAEC;EAAM,CAAC;EAAA,OAAKA,KAAK,IAAIA,KAAK;AAAA,GAsBhC;EAAA,IAAC;IAAEJ;EAAM,CAAC;EAAA,OAAKA,KAAK,CAACK,YAAY;AAAA,EAE7C;AAED,MAAMC,UAAU,GAAGC,MAAM,CAAE,wBAAuB,CAAC,EAAC;;AAEpD,OAAO,MAAMC,KAAK,gBAAGd,KAAK,CAACe,IAAI,MAAC,SAASC,UAAU,QAaqB;EAAA,IAbpB;IAClDC,KAAK;IACLC,WAAW;IACXC,WAAW;IACXC,aAAa;IACb,GAAGC;EAQgE,CAAC;EACpE,MAAMC,QAAQ,GAAIC,aAAqB,IAAK;IAC1C,IAAIA,aAAa,KAAK,EAAE,IAAIX,UAAU,CAACY,IAAI,CAACvB,YAAY,CAACsB,aAAa,CAAC,CAAC,EAAE;MACxEL,WAAW,CAACK,aAAa,CAAC;IAC5B;EACF,CAAC;EAED,oBACE,QAAC,WAAW;IAAA,GACNF,IAAI;IACR,KAAK,EAAED,aAAa,IAAIH,KAAK,GAAGG,aAAa,GAAGH,KAAK,GAAGA,KAAM;IAC9D,QAAQ,EAAGQ,KAAK,IAAK;MACnB,IAAIL,aAAa,EAAE;QACjB,MAAMH,KAAK,GAAGQ,KAAK,CAACC,MAAM,CAACT,KAAK;;QAEhC;QACA,MAAMU,cAAc,GAAGV,KAAK,CAACW,QAAQ,EAAE,CAACC,QAAQ,CAACT,aAAa,CAAC,GAC3DH,KAAK,CAACW,QAAQ,EAAE,CAACE,KAAK,CAAC,CAAC,EAAEb,KAAK,CAACW,QAAQ,EAAE,CAACG,MAAM,GAAG,CAAC,CAAC,GACtDd,KAAK;;QAET;QACAK,QAAQ,CAACK,cAAc,CAACK,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;MAC7C,CAAC,MAAM;QACLV,QAAQ,CAACG,KAAK,CAACC,MAAM,CAACT,KAAK,CAACe,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;MACjD;IACF;IACA;IAAA;IACA,SAAS,EAAC,SAAS;IACnB,YAAY,EAAC,KAAK;IAClB,WAAW,EAAC;IACZ;IAAA;IACA,IAAI,EAAC,MAAM;IACX,OAAO,EAAC,qBAAqB;IAC7B,WAAW,EAAEb,WAAW,IAAI,GAAI;IAChC,SAAS,EAAE,CAAE;IACb,SAAS,EAAE,EAAG;IACd,UAAU,EAAC;EAAO;IAAA;IAAA;IAAA;EAAA,QAClB;AAEN,CAAC,CAAC;AAAA,MApDWL,KAAK;AAsDlB,eAAeA,KAAK;;AAEpB;AAAA;AAAA;AAAA"},"metadata":{},"sourceType":"module"}