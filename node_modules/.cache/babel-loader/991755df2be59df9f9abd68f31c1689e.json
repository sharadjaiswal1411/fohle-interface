{"ast":null,"code":"import _taggedTemplateLiteral from\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject;import{useMemo}from'react';import{useQuery}from'@apollo/client';import gql from'graphql-tag';import{useClients}from'state/application/hooks';export var TOP_POOLS=gql(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  query topPools {\\n    pools(first: 50, orderBy: totalValueLockedUSD, orderDirection: desc, subgraphError: allow) {\\n      id\\n    }\\n  }\\n\"])));/**\n * Fetch top addresses by volume\n */export function useTopPoolAddresses(){var _useClients=useClients(),dataClient=_useClients.dataClient;var _useQuery=useQuery(TOP_POOLS,{client:dataClient,fetchPolicy:'cache-first'}),loading=_useQuery.loading,error=_useQuery.error,data=_useQuery.data;var formattedData=useMemo(function(){if(data){return data.pools.map(function(p){return p.id;});}else{return undefined;}},[data]);return{loading:loading,error:Boolean(error),addresses:formattedData};}","map":{"version":3,"names":["useMemo","useQuery","gql","useClients","TOP_POOLS","useTopPoolAddresses","dataClient","client","fetchPolicy","loading","error","data","formattedData","pools","map","p","id","undefined","Boolean","addresses"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/data/pools/topPools.ts"],"sourcesContent":["import { useMemo } from 'react'\nimport { useQuery } from '@apollo/client'\nimport gql from 'graphql-tag'\nimport { useClients } from 'state/application/hooks'\n\nexport const TOP_POOLS = gql`\n  query topPools {\n    pools(first: 50, orderBy: totalValueLockedUSD, orderDirection: desc, subgraphError: allow) {\n      id\n    }\n  }\n`\n\ninterface TopPoolsResponse {\n  pools: {\n    id: string\n  }[]\n}\n\n/**\n * Fetch top addresses by volume\n */\nexport function useTopPoolAddresses(): {\n  loading: boolean\n  error: boolean\n  addresses: string[] | undefined\n} {\n  const { dataClient } = useClients()\n  const { loading, error, data } = useQuery<TopPoolsResponse>(TOP_POOLS, {\n    client: dataClient,\n    fetchPolicy: 'cache-first',\n  })\n\n  const formattedData = useMemo(() => {\n    if (data) {\n      return data.pools.map((p) => p.id)\n    } else {\n      return undefined\n    }\n  }, [data])\n\n  return {\n    loading: loading,\n    error: Boolean(error),\n    addresses: formattedData,\n  }\n}"],"mappings":"gNAAA,OAASA,OAAO,KAAQ,OAAO,CAC/B,OAASC,QAAQ,KAAQ,gBAAgB,CACzC,MAAOC,IAAG,KAAM,aAAa,CAC7B,OAASC,UAAU,KAAQ,yBAAyB,CAEpD,MAAO,IAAMC,UAAS,CAAGF,GAAG,+MAM3B,CAQD;AACA;AACA,GACA,MAAO,SAASG,oBAAmB,EAIjC,CACA,gBAAuBF,UAAU,EAAE,CAA3BG,UAAU,aAAVA,UAAU,CAClB,cAAiCL,QAAQ,CAAmBG,SAAS,CAAE,CACrEG,MAAM,CAAED,UAAU,CAClBE,WAAW,CAAE,aACf,CAAC,CAAC,CAHMC,OAAO,WAAPA,OAAO,CAAEC,KAAK,WAALA,KAAK,CAAEC,IAAI,WAAJA,IAAI,CAK5B,GAAMC,cAAa,CAAGZ,OAAO,CAAC,UAAM,CAClC,GAAIW,IAAI,CAAE,CACR,MAAOA,KAAI,CAACE,KAAK,CAACC,GAAG,CAAC,SAACC,CAAC,QAAKA,EAAC,CAACC,EAAE,GAAC,CACpC,CAAC,IAAM,CACL,MAAOC,UAAS,CAClB,CACF,CAAC,CAAE,CAACN,IAAI,CAAC,CAAC,CAEV,MAAO,CACLF,OAAO,CAAEA,OAAO,CAChBC,KAAK,CAAEQ,OAAO,CAACR,KAAK,CAAC,CACrBS,SAAS,CAAEP,aACb,CAAC,CACH"},"metadata":{},"sourceType":"module"}