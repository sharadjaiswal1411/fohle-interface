{"ast":null,"code":"import _slicedToArray from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _createForOfIteratorHelper from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _objectSpread from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n// Intentionally keeping the key broad, as we don't know for sure what rate limit headers get returned from backend\n\nvar DEFAULT_RETRY_AFTER = 60 * 1000; // 60 seconds\n\n/**\n * Extracts Retry-After value from the request header or returns default value\n * @param header string representation of 'Retry-After' header\n * @param now current unix timestamp\n *\n */\nfunction parseRetryAfterHeader(header) {\n  var now = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Date.now();\n  var headerDelay = parseInt(\"\".concat(header), 10);\n  if (!isNaN(headerDelay)) {\n    return headerDelay * 1000;\n  }\n  var headerDate = Date.parse(\"\".concat(header));\n  if (!isNaN(headerDate)) {\n    return headerDate - now;\n  }\n  return DEFAULT_RETRY_AFTER;\n}\n\n/**\n * Gets the time that given category is disabled until for rate limiting\n */\nfunction disabledUntil(limits, category) {\n  return limits[category] || limits.all || 0;\n}\n\n/**\n * Checks if a category is rate limited\n */\nfunction isRateLimited(limits, category) {\n  var now = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Date.now();\n  return disabledUntil(limits, category) > now;\n}\n\n/**\n * Update ratelimits from incoming headers.\n * Returns true if headers contains a non-empty rate limiting header.\n */\nfunction updateRateLimits(limits, _ref) {\n  var statusCode = _ref.statusCode,\n    headers = _ref.headers;\n  var now = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Date.now();\n  var updatedRateLimits = _objectSpread({}, limits);\n\n  // \"The name is case-insensitive.\"\n  // https://developer.mozilla.org/en-US/docs/Web/API/Headers/get\n  var rateLimitHeader = headers && headers['x-sentry-rate-limits'];\n  var retryAfterHeader = headers && headers['retry-after'];\n  if (rateLimitHeader) {\n    /**\n     * rate limit headers are of the form\n     *     <header>,<header>,..\n     * where each <header> is of the form\n     *     <retry_after>: <categories>: <scope>: <reason_code>\n     * where\n     *     <retry_after> is a delay in seconds\n     *     <categories> is the event type(s) (error, transaction, etc) being rate limited and is of the form\n     *         <category>;<category>;...\n     *     <scope> is what's being limited (org, project, or key) - ignored by SDK\n     *     <reason_code> is an arbitrary string like \"org_quota\" - ignored by SDK\n     */\n    var _iterator = _createForOfIteratorHelper(rateLimitHeader.trim().split(',')),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var limit = _step.value;\n        var _limit$split = limit.split(':', 2),\n          _limit$split2 = _slicedToArray(_limit$split, 2),\n          retryAfter = _limit$split2[0],\n          categories = _limit$split2[1];\n        var headerDelay = parseInt(retryAfter, 10);\n        var delay = (!isNaN(headerDelay) ? headerDelay : 60) * 1000; // 60sec default\n        if (!categories) {\n          updatedRateLimits.all = now + delay;\n        } else {\n          var _iterator2 = _createForOfIteratorHelper(categories.split(';')),\n            _step2;\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var category = _step2.value;\n              updatedRateLimits[category] = now + delay;\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  } else if (retryAfterHeader) {\n    updatedRateLimits.all = now + parseRetryAfterHeader(retryAfterHeader, now);\n  } else if (statusCode === 429) {\n    updatedRateLimits.all = now + 60 * 1000;\n  }\n  return updatedRateLimits;\n}\nexport { DEFAULT_RETRY_AFTER, disabledUntil, isRateLimited, parseRetryAfterHeader, updateRateLimits };","map":{"version":3,"sources":["../../src/ratelimit.ts"],"names":[],"mappings":";;;AAEA;;AAGA,IAAA,mBAAA,GAAA,EAAA,GAAA,IAAA,CAAA,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAA,qBAAA,CAAA,MAAA,EAAA;EAAA,IAAA,GAAA,uEAAA,IAAA,CAAA,GAAA,EAAA;EACA,IAAA,WAAA,GAAA,QAAA,WAAA,MAAA,GAAA,EAAA,CAAA;EACA,IAAA,CAAA,KAAA,CAAA,WAAA,CAAA,EAAA;IACA,OAAA,WAAA,GAAA,IAAA;EACA;EAEA,IAAA,UAAA,GAAA,IAAA,CAAA,KAAA,WAAA,MAAA,EAAA;EACA,IAAA,CAAA,KAAA,CAAA,UAAA,CAAA,EAAA;IACA,OAAA,UAAA,GAAA,GAAA;EACA;EAEA,OAAA,mBAAA;AACA;;AAEA;AACA;AACA;AACA,SAAA,aAAA,CAAA,MAAA,EAAA,QAAA,EAAA;EACA,OAAA,MAAA,CAAA,QAAA,CAAA,IAAA,MAAA,CAAA,GAAA,IAAA,CAAA;AACA;;AAEA;AACA;AACA;AACA,SAAA,aAAA,CAAA,MAAA,EAAA,QAAA,EAAA;EAAA,IAAA,GAAA,uEAAA,IAAA,CAAA,GAAA,EAAA;EACA,OAAA,aAAA,CAAA,MAAA,EAAA,QAAA,CAAA,GAAA,GAAA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAA,gBAAA,CACA,MAAA,QAGA;EAAA,IAFA,UAAA,QAAA,UAAA;IAAA,OAAA,QAAA,OAAA;EAAA,IACA,GAAA,uEAAA,IAAA,CAAA,GAAA,EAAA;EAEA,IAAA,iBAAA,qBACA,MAAA,CACA;;EAEA;EACA;EACA,IAAA,eAAA,GAAA,OAAA,IAAA,OAAA,CAAA,sBAAA,CAAA;EACA,IAAA,gBAAA,GAAA,OAAA,IAAA,OAAA,CAAA,aAAA,CAAA;EAEA,IAAA,eAAA,EAAA;IACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAXA,2CAYA,eAAA,CAAA,IAAA,EAAA,CAAA,KAAA,CAAA,GAAA,CAAA;MAAA;IAAA;MAAA,oDAAA;QAAA,IAAA,KAAA;QACA,mBAAA,KAAA,CAAA,KAAA,CAAA,GAAA,EAAA,CAAA,CAAA;UAAA;UAAA,UAAA;UAAA,UAAA;QACA,IAAA,WAAA,GAAA,QAAA,CAAA,UAAA,EAAA,EAAA,CAAA;QACA,IAAA,KAAA,GAAA,CAAA,CAAA,KAAA,CAAA,WAAA,CAAA,GAAA,WAAA,GAAA,EAAA,IAAA,IAAA,CAAA,CAAA;QACA,IAAA,CAAA,UAAA,EAAA;UACA,iBAAA,CAAA,GAAA,GAAA,GAAA,GAAA,KAAA;QACA,CAAA,MAAA;UAAA,4CACA,UAAA,CAAA,KAAA,CAAA,GAAA,CAAA;YAAA;UAAA;YAAA,uDAAA;cAAA,IAAA,QAAA;cACA,iBAAA,CAAA,QAAA,CAAA,GAAA,GAAA,GAAA,KAAA;YACA;UAAA;YAAA;UAAA;YAAA;UAAA;QACA;MACA;IAAA;MAAA;IAAA;MAAA;IAAA;EACA,CAAA,MAAA,IAAA,gBAAA,EAAA;IACA,iBAAA,CAAA,GAAA,GAAA,GAAA,GAAA,qBAAA,CAAA,gBAAA,EAAA,GAAA,CAAA;EACA,CAAA,MAAA,IAAA,UAAA,KAAA,GAAA,EAAA;IACA,iBAAA,CAAA,GAAA,GAAA,GAAA,GAAA,EAAA,GAAA,IAAA;EACA;EAEA,OAAA,iBAAA;AACA","sourcesContent":["import { TransportMakeRequestResponse } from '@sentry/types';\n\n// Intentionally keeping the key broad, as we don't know for sure what rate limit headers get returned from backend\nexport type RateLimits = Record<string, number>;\n\nexport const DEFAULT_RETRY_AFTER = 60 * 1000; // 60 seconds\n\n/**\n * Extracts Retry-After value from the request header or returns default value\n * @param header string representation of 'Retry-After' header\n * @param now current unix timestamp\n *\n */\nexport function parseRetryAfterHeader(header: string, now: number = Date.now()): number {\n  const headerDelay = parseInt(`${header}`, 10);\n  if (!isNaN(headerDelay)) {\n    return headerDelay * 1000;\n  }\n\n  const headerDate = Date.parse(`${header}`);\n  if (!isNaN(headerDate)) {\n    return headerDate - now;\n  }\n\n  return DEFAULT_RETRY_AFTER;\n}\n\n/**\n * Gets the time that given category is disabled until for rate limiting\n */\nexport function disabledUntil(limits: RateLimits, category: string): number {\n  return limits[category] || limits.all || 0;\n}\n\n/**\n * Checks if a category is rate limited\n */\nexport function isRateLimited(limits: RateLimits, category: string, now: number = Date.now()): boolean {\n  return disabledUntil(limits, category) > now;\n}\n\n/**\n * Update ratelimits from incoming headers.\n * Returns true if headers contains a non-empty rate limiting header.\n */\nexport function updateRateLimits(\n  limits: RateLimits,\n  { statusCode, headers }: TransportMakeRequestResponse,\n  now: number = Date.now(),\n): RateLimits {\n  const updatedRateLimits: RateLimits = {\n    ...limits,\n  };\n\n  // \"The name is case-insensitive.\"\n  // https://developer.mozilla.org/en-US/docs/Web/API/Headers/get\n  const rateLimitHeader = headers && headers['x-sentry-rate-limits'];\n  const retryAfterHeader = headers && headers['retry-after'];\n\n  if (rateLimitHeader) {\n    /**\n     * rate limit headers are of the form\n     *     <header>,<header>,..\n     * where each <header> is of the form\n     *     <retry_after>: <categories>: <scope>: <reason_code>\n     * where\n     *     <retry_after> is a delay in seconds\n     *     <categories> is the event type(s) (error, transaction, etc) being rate limited and is of the form\n     *         <category>;<category>;...\n     *     <scope> is what's being limited (org, project, or key) - ignored by SDK\n     *     <reason_code> is an arbitrary string like \"org_quota\" - ignored by SDK\n     */\n    for (const limit of rateLimitHeader.trim().split(',')) {\n      const [retryAfter, categories] = limit.split(':', 2);\n      const headerDelay = parseInt(retryAfter, 10);\n      const delay = (!isNaN(headerDelay) ? headerDelay : 60) * 1000; // 60sec default\n      if (!categories) {\n        updatedRateLimits.all = now + delay;\n      } else {\n        for (const category of categories.split(';')) {\n          updatedRateLimits[category] = now + delay;\n        }\n      }\n    }\n  } else if (retryAfterHeader) {\n    updatedRateLimits.all = now + parseRetryAfterHeader(retryAfterHeader, now);\n  } else if (statusCode === 429) {\n    updatedRateLimits.all = now + 60 * 1000;\n  }\n\n  return updatedRateLimits;\n}\n"]},"metadata":{},"sourceType":"module"}