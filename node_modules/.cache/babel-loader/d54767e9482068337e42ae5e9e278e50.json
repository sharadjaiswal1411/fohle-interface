{"ast":null,"code":"/* Copied from Uniswap/v-3: https://github.com/Uniswap/v3-info/blob/master/src/utils/numbers.ts */\n\nimport { DEFAULT_LOCALE } from 'constants/locales';\nimport numbro from 'numbro';\n\n// Convert [CurrencyAmount] to number with necessary precision for price formatting.\nexport const currencyAmountToPreciseFloat = currencyAmount => {\n  if (!currencyAmount) return undefined;\n  const floatForLargerNumbers = parseFloat(currencyAmount.toExact());\n  if (floatForLargerNumbers < 0.1) {\n    return parseFloat(currencyAmount.toSignificant(6));\n  }\n  return floatForLargerNumbers;\n};\n\n// Convert [Price] to number with necessary precision for price formatting.\nexport const priceToPreciseFloat = price => {\n  if (!price) return undefined;\n  const floatForLargerNumbers = parseFloat(price.toFixed(9));\n  if (floatForLargerNumbers < 0.1) {\n    return parseFloat(price.toSignificant(6));\n  }\n  return floatForLargerNumbers;\n};\n/**\n * Returns a USD dollar or equivalent denominated numerical value formatted\n * in human readable string for use in template.\n *\n * Adheres to guidelines for prices and other numbers defined here:\n * https://www.notion.so/uniswaplabs/Number-standards-fbb9f533f10e4e22820722c2f66d23c0\n * @param num numerical value denominated in USD or USD equivalent\n * @param isPrice whether the amount represents a price or not\n * @param lessPreciseStablecoinValues whether or not we should show less precise values for\n * stablecoins (around 1$ in value always) for the sake of readability\n * @param digits number of digits after the decimal for non-price amounts\n * @param round whether or not to round up non-price amounts\n */\nexport const formatDollar = _ref => {\n  let {\n    num,\n    isPrice = false,\n    lessPreciseStablecoinValues = false,\n    digits = 2,\n    round = true\n  } = _ref;\n  // For USD dollar denominated prices.\n  if (isPrice) {\n    if (num === 0) return '$0.00';\n    if (!num) return '-';\n    if (num < 0.000001) {\n      return `$${num.toExponential(2)}`;\n    }\n    if (num >= 0.000001 && num < 0.1 || num > 1000000) {\n      return `$${Number(num).toPrecision(3)}`;\n    }\n    // We only show 2 decimal places in explore table for stablecoin value ranges\n    // for the sake of readability (as opposed to the usual 3 elsewhere).\n    if (num >= 0.1 && num < (lessPreciseStablecoinValues ? 0.9995 : 1.05)) {\n      return `$${num.toFixed(3)}`;\n    }\n    return `$${Number(num.toFixed(2)).toLocaleString(DEFAULT_LOCALE, {\n      minimumFractionDigits: 2\n    })}`;\n  }\n  // For volume dollar amounts, like market cap, total value locked, etc.\n  else {\n    if (num === 0) return '$0.00';\n    if (!num) return '-';\n    if (num < 0.000001) {\n      return '$<0.000001';\n    }\n    if (num >= 0.000001 && num < 0.1) {\n      return `$${Number(num).toPrecision(3)}`;\n    }\n    if (num >= 0.1 && num < 1.05) {\n      return `$${num.toFixed(3)}`;\n    }\n    return numbro(num).formatCurrency({\n      average: round,\n      mantissa: num > 1000 ? 2 : digits,\n      abbreviations: {\n        million: 'M',\n        billion: 'B'\n      }\n    }).toUpperCase();\n  }\n};\n\n/**\n * Returns a numerical amount of any token formatted in human readable string for use in template.\n *\n * For transaction review numbers, such as token quantities, NFT price (token-denominated),\n *  network fees, transaction history items. Adheres to guidelines defined here:\n * https://www.notion.so/uniswaplabs/Number-standards-fbb9f533f10e4e22820722c2f66d23c0\n * @param num numerical value denominated in any token\n * @param maxDigits the maximum number of digits that should be shown for the quantity\n */\nexport const formatTransactionAmount = function (num) {\n  let maxDigits = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 9;\n  if (num === 0) return '0.00';\n  if (!num) return '';\n  if (num < 0.00001) {\n    return '<0.00001';\n  }\n  if (num >= 0.00001 && num < 1) {\n    return `${Number(num.toFixed(5)).toLocaleString(DEFAULT_LOCALE, {\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 5\n    })}`;\n  }\n  if (num >= 1 && num < 10000) {\n    return `${Number(num.toPrecision(6)).toLocaleString(DEFAULT_LOCALE, {\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 6\n    })}`;\n  }\n  if (num >= 10000 && num < 1000000) {\n    return `${Number(num.toFixed(2)).toLocaleString(DEFAULT_LOCALE, {\n      minimumFractionDigits: 2\n    })}`;\n  }\n  // For very large numbers, switch to scientific notation and show as much precision\n  // as permissible by maxDigits param.\n  if (num >= Math.pow(10, maxDigits - 1)) {\n    return `${num.toExponential(maxDigits - 3)}`;\n  }\n  return `${Number(num.toFixed(2)).toLocaleString(DEFAULT_LOCALE, {\n    minimumFractionDigits: 2\n  })}`;\n};","map":{"version":3,"names":["DEFAULT_LOCALE","numbro","currencyAmountToPreciseFloat","currencyAmount","undefined","floatForLargerNumbers","parseFloat","toExact","toSignificant","priceToPreciseFloat","price","toFixed","formatDollar","num","isPrice","lessPreciseStablecoinValues","digits","round","toExponential","Number","toPrecision","toLocaleString","minimumFractionDigits","formatCurrency","average","mantissa","abbreviations","million","billion","toUpperCase","formatTransactionAmount","maxDigits","maximumFractionDigits","Math","pow"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/utils/formatNumbers.ts"],"sourcesContent":["/* Copied from Uniswap/v-3: https://github.com/Uniswap/v3-info/blob/master/src/utils/numbers.ts */\nimport { Currency, CurrencyAmount, Price } from '@uniswap/sdk-core'\nimport { DEFAULT_LOCALE } from 'constants/locales'\nimport numbro from 'numbro'\n\n// Convert [CurrencyAmount] to number with necessary precision for price formatting.\nexport const currencyAmountToPreciseFloat = (currencyAmount: CurrencyAmount<Currency> | undefined) => {\n  if (!currencyAmount) return undefined\n  const floatForLargerNumbers = parseFloat(currencyAmount.toExact())\n  if (floatForLargerNumbers < 0.1) {\n    return parseFloat(currencyAmount.toSignificant(6))\n  }\n  return floatForLargerNumbers\n}\n\n// Convert [Price] to number with necessary precision for price formatting.\nexport const priceToPreciseFloat = (price: Price<Currency, Currency> | undefined) => {\n  if (!price) return undefined\n  const floatForLargerNumbers = parseFloat(price.toFixed(9))\n  if (floatForLargerNumbers < 0.1) {\n    return parseFloat(price.toSignificant(6))\n  }\n  return floatForLargerNumbers\n}\n\ninterface FormatDollarArgs {\n  num: number | undefined | null\n  isPrice?: boolean\n  lessPreciseStablecoinValues?: boolean\n  digits?: number\n  round?: boolean\n}\n\n/**\n * Returns a USD dollar or equivalent denominated numerical value formatted\n * in human readable string for use in template.\n *\n * Adheres to guidelines for prices and other numbers defined here:\n * https://www.notion.so/uniswaplabs/Number-standards-fbb9f533f10e4e22820722c2f66d23c0\n * @param num numerical value denominated in USD or USD equivalent\n * @param isPrice whether the amount represents a price or not\n * @param lessPreciseStablecoinValues whether or not we should show less precise values for\n * stablecoins (around 1$ in value always) for the sake of readability\n * @param digits number of digits after the decimal for non-price amounts\n * @param round whether or not to round up non-price amounts\n */\nexport const formatDollar = ({\n  num,\n  isPrice = false,\n  lessPreciseStablecoinValues = false,\n  digits = 2,\n  round = true,\n}: FormatDollarArgs): string => {\n  // For USD dollar denominated prices.\n  if (isPrice) {\n    if (num === 0) return '$0.00'\n    if (!num) return '-'\n    if (num < 0.000001) {\n      return `$${num.toExponential(2)}`\n    }\n    if ((num >= 0.000001 && num < 0.1) || num > 1000000) {\n      return `$${Number(num).toPrecision(3)}`\n    }\n    // We only show 2 decimal places in explore table for stablecoin value ranges\n    // for the sake of readability (as opposed to the usual 3 elsewhere).\n    if (num >= 0.1 && num < (lessPreciseStablecoinValues ? 0.9995 : 1.05)) {\n      return `$${num.toFixed(3)}`\n    }\n    return `$${Number(num.toFixed(2)).toLocaleString(DEFAULT_LOCALE, { minimumFractionDigits: 2 })}`\n  }\n  // For volume dollar amounts, like market cap, total value locked, etc.\n  else {\n    if (num === 0) return '$0.00'\n    if (!num) return '-'\n    if (num < 0.000001) {\n      return '$<0.000001'\n    }\n    if (num >= 0.000001 && num < 0.1) {\n      return `$${Number(num).toPrecision(3)}`\n    }\n    if (num >= 0.1 && num < 1.05) {\n      return `$${num.toFixed(3)}`\n    }\n\n    return numbro(num)\n      .formatCurrency({\n        average: round,\n        mantissa: num > 1000 ? 2 : digits,\n        abbreviations: {\n          million: 'M',\n          billion: 'B',\n        },\n      })\n      .toUpperCase()\n  }\n}\n\n/**\n * Returns a numerical amount of any token formatted in human readable string for use in template.\n *\n * For transaction review numbers, such as token quantities, NFT price (token-denominated),\n *  network fees, transaction history items. Adheres to guidelines defined here:\n * https://www.notion.so/uniswaplabs/Number-standards-fbb9f533f10e4e22820722c2f66d23c0\n * @param num numerical value denominated in any token\n * @param maxDigits the maximum number of digits that should be shown for the quantity\n */\nexport const formatTransactionAmount = (num: number | undefined | null, maxDigits = 9) => {\n  if (num === 0) return '0.00'\n  if (!num) return ''\n  if (num < 0.00001) {\n    return '<0.00001'\n  }\n  if (num >= 0.00001 && num < 1) {\n    return `${Number(num.toFixed(5)).toLocaleString(DEFAULT_LOCALE, {\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 5,\n    })}`\n  }\n  if (num >= 1 && num < 10000) {\n    return `${Number(num.toPrecision(6)).toLocaleString(DEFAULT_LOCALE, {\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 6,\n    })}`\n  }\n  if (num >= 10000 && num < 1000000) {\n    return `${Number(num.toFixed(2)).toLocaleString(DEFAULT_LOCALE, { minimumFractionDigits: 2 })}`\n  }\n  // For very large numbers, switch to scientific notation and show as much precision\n  // as permissible by maxDigits param.\n  if (num >= Math.pow(10, maxDigits - 1)) {\n    return `${num.toExponential(maxDigits - 3)}`\n  }\n  return `${Number(num.toFixed(2)).toLocaleString(DEFAULT_LOCALE, { minimumFractionDigits: 2 })}`\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}