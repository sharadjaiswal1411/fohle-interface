{"ast":null,"code":"import { SupportedChainId } from '../constants/chains';\nconst BLOCK_EXPLORER_PREFIXES = {\n  [SupportedChainId.MAINNET]: 'https://etherscan.io',\n  [SupportedChainId.ROPSTEN]: 'https://ropsten.etherscan.io',\n  [SupportedChainId.RINKEBY]: 'https://rinkeby.etherscan.io',\n  [SupportedChainId.GOERLI]: 'https://goerli.etherscan.io',\n  [SupportedChainId.KOVAN]: 'https://kovan.etherscan.io',\n  [SupportedChainId.OPTIMISM]: 'https://optimistic.etherscan.io',\n  [SupportedChainId.OPTIMISM_GOERLI]: 'https://goerli-optimism.etherscan.io',\n  [SupportedChainId.POLYGON]: 'https://polygonscan.com',\n  [SupportedChainId.POLYGON_MUMBAI]: 'https://mumbai.polygonscan.com',\n  [SupportedChainId.CELO]: 'https://celoscan.io',\n  [SupportedChainId.CELO_ALFAJORES]: 'https://alfajores-blockscout.celo-testnet.org'\n};\nexport let ExplorerDataType;\n\n/**\n * Return the explorer link for the given data and data type\n * @param chainId the ID of the chain for which to return the data\n * @param data the data to return a link for\n * @param type the type of the data\n */\n(function (ExplorerDataType) {\n  ExplorerDataType[\"TRANSACTION\"] = \"transaction\";\n  ExplorerDataType[\"TOKEN\"] = \"token\";\n  ExplorerDataType[\"ADDRESS\"] = \"address\";\n  ExplorerDataType[\"BLOCK\"] = \"block\";\n})(ExplorerDataType || (ExplorerDataType = {}));\nexport function getExplorerLink(chainId, data, type) {\n  var _BLOCK_EXPLORER_PREFI;\n  if (chainId === SupportedChainId.ARBITRUM_ONE) {\n    switch (type) {\n      case ExplorerDataType.TRANSACTION:\n        return `https://arbiscan.io/tx/${data}`;\n      case ExplorerDataType.ADDRESS:\n      case ExplorerDataType.TOKEN:\n        return `https://arbiscan.io/address/${data}`;\n      case ExplorerDataType.BLOCK:\n        return `https://arbiscan.io/block/${data}`;\n      default:\n        return `https://arbiscan.io/`;\n    }\n  }\n  if (chainId === SupportedChainId.ARBITRUM_RINKEBY) {\n    switch (type) {\n      case ExplorerDataType.TRANSACTION:\n        return `https://rinkeby-explorer.arbitrum.io/tx/${data}`;\n      case ExplorerDataType.ADDRESS:\n      case ExplorerDataType.TOKEN:\n        return `https://rinkeby-explorer.arbitrum.io/address/${data}`;\n      case ExplorerDataType.BLOCK:\n        return `https://rinkeby-explorer.arbitrum.io/block/${data}`;\n      default:\n        return `https://rinkeby-explorer.arbitrum.io/`;\n    }\n  }\n  const prefix = (_BLOCK_EXPLORER_PREFI = BLOCK_EXPLORER_PREFIXES[chainId]) !== null && _BLOCK_EXPLORER_PREFI !== void 0 ? _BLOCK_EXPLORER_PREFI : 'https://etherscan.io';\n  switch (type) {\n    case ExplorerDataType.TRANSACTION:\n      return `${prefix}/tx/${data}`;\n    case ExplorerDataType.TOKEN:\n      return `${prefix}/token/${data}`;\n    case ExplorerDataType.BLOCK:\n      if (chainId === SupportedChainId.OPTIMISM || chainId === SupportedChainId.OPTIMISM_GOERLI) {\n        return `${prefix}/tx/${data}`;\n      }\n      return `${prefix}/block/${data}`;\n    case ExplorerDataType.ADDRESS:\n      return `${prefix}/address/${data}`;\n    default:\n      return `${prefix}`;\n  }\n}","map":{"version":3,"names":["SupportedChainId","BLOCK_EXPLORER_PREFIXES","MAINNET","ROPSTEN","RINKEBY","GOERLI","KOVAN","OPTIMISM","OPTIMISM_GOERLI","POLYGON","POLYGON_MUMBAI","CELO","CELO_ALFAJORES","ExplorerDataType","getExplorerLink","chainId","data","type","ARBITRUM_ONE","TRANSACTION","ADDRESS","TOKEN","BLOCK","ARBITRUM_RINKEBY","prefix"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/utils/getExplorerLink.ts"],"sourcesContent":["import { SupportedChainId } from '../constants/chains'\n\nconst BLOCK_EXPLORER_PREFIXES: { [chainId: number]: string } = {\n  [SupportedChainId.MAINNET]: 'https://etherscan.io',\n  [SupportedChainId.ROPSTEN]: 'https://ropsten.etherscan.io',\n  [SupportedChainId.RINKEBY]: 'https://rinkeby.etherscan.io',\n  [SupportedChainId.GOERLI]: 'https://goerli.etherscan.io',\n  [SupportedChainId.KOVAN]: 'https://kovan.etherscan.io',\n  [SupportedChainId.OPTIMISM]: 'https://optimistic.etherscan.io',\n  [SupportedChainId.OPTIMISM_GOERLI]: 'https://goerli-optimism.etherscan.io',\n  [SupportedChainId.POLYGON]: 'https://polygonscan.com',\n  [SupportedChainId.POLYGON_MUMBAI]: 'https://mumbai.polygonscan.com',\n  [SupportedChainId.CELO]: 'https://celoscan.io',\n  [SupportedChainId.CELO_ALFAJORES]: 'https://alfajores-blockscout.celo-testnet.org',\n}\n\nexport enum ExplorerDataType {\n  TRANSACTION = 'transaction',\n  TOKEN = 'token',\n  ADDRESS = 'address',\n  BLOCK = 'block',\n}\n\n/**\n * Return the explorer link for the given data and data type\n * @param chainId the ID of the chain for which to return the data\n * @param data the data to return a link for\n * @param type the type of the data\n */\nexport function getExplorerLink(chainId: number, data: string, type: ExplorerDataType): string {\n  if (chainId === SupportedChainId.ARBITRUM_ONE) {\n    switch (type) {\n      case ExplorerDataType.TRANSACTION:\n        return `https://arbiscan.io/tx/${data}`\n      case ExplorerDataType.ADDRESS:\n      case ExplorerDataType.TOKEN:\n        return `https://arbiscan.io/address/${data}`\n      case ExplorerDataType.BLOCK:\n        return `https://arbiscan.io/block/${data}`\n      default:\n        return `https://arbiscan.io/`\n    }\n  }\n\n  if (chainId === SupportedChainId.ARBITRUM_RINKEBY) {\n    switch (type) {\n      case ExplorerDataType.TRANSACTION:\n        return `https://rinkeby-explorer.arbitrum.io/tx/${data}`\n      case ExplorerDataType.ADDRESS:\n      case ExplorerDataType.TOKEN:\n        return `https://rinkeby-explorer.arbitrum.io/address/${data}`\n      case ExplorerDataType.BLOCK:\n        return `https://rinkeby-explorer.arbitrum.io/block/${data}`\n      default:\n        return `https://rinkeby-explorer.arbitrum.io/`\n    }\n  }\n\n  const prefix = BLOCK_EXPLORER_PREFIXES[chainId] ?? 'https://etherscan.io'\n\n  switch (type) {\n    case ExplorerDataType.TRANSACTION:\n      return `${prefix}/tx/${data}`\n\n    case ExplorerDataType.TOKEN:\n      return `${prefix}/token/${data}`\n\n    case ExplorerDataType.BLOCK:\n      if (chainId === SupportedChainId.OPTIMISM || chainId === SupportedChainId.OPTIMISM_GOERLI) {\n        return `${prefix}/tx/${data}`\n      }\n      return `${prefix}/block/${data}`\n\n    case ExplorerDataType.ADDRESS:\n      return `${prefix}/address/${data}`\n    default:\n      return `${prefix}`\n  }\n}\n"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,qBAAqB;AAEtD,MAAMC,uBAAsD,GAAG;EAC7D,CAACD,gBAAgB,CAACE,OAAO,GAAG,sBAAsB;EAClD,CAACF,gBAAgB,CAACG,OAAO,GAAG,8BAA8B;EAC1D,CAACH,gBAAgB,CAACI,OAAO,GAAG,8BAA8B;EAC1D,CAACJ,gBAAgB,CAACK,MAAM,GAAG,6BAA6B;EACxD,CAACL,gBAAgB,CAACM,KAAK,GAAG,4BAA4B;EACtD,CAACN,gBAAgB,CAACO,QAAQ,GAAG,iCAAiC;EAC9D,CAACP,gBAAgB,CAACQ,eAAe,GAAG,sCAAsC;EAC1E,CAACR,gBAAgB,CAACS,OAAO,GAAG,yBAAyB;EACrD,CAACT,gBAAgB,CAACU,cAAc,GAAG,gCAAgC;EACnE,CAACV,gBAAgB,CAACW,IAAI,GAAG,qBAAqB;EAC9C,CAACX,gBAAgB,CAACY,cAAc,GAAG;AACrC,CAAC;AAED,WAAYC,gBAAgB;;AAO5B;AACA;AACA;AACA;AACA;AACA;AALA,WAPYA,gBAAgB;EAAhBA,gBAAgB;EAAhBA,gBAAgB;EAAhBA,gBAAgB;EAAhBA,gBAAgB;AAAA,GAAhBA,gBAAgB,KAAhBA,gBAAgB;AAa5B,OAAO,SAASC,eAAe,CAACC,OAAe,EAAEC,IAAY,EAAEC,IAAsB,EAAU;EAAA;EAC7F,IAAIF,OAAO,KAAKf,gBAAgB,CAACkB,YAAY,EAAE;IAC7C,QAAQD,IAAI;MACV,KAAKJ,gBAAgB,CAACM,WAAW;QAC/B,OAAQ,0BAAyBH,IAAK,EAAC;MACzC,KAAKH,gBAAgB,CAACO,OAAO;MAC7B,KAAKP,gBAAgB,CAACQ,KAAK;QACzB,OAAQ,+BAA8BL,IAAK,EAAC;MAC9C,KAAKH,gBAAgB,CAACS,KAAK;QACzB,OAAQ,6BAA4BN,IAAK,EAAC;MAC5C;QACE,OAAQ,sBAAqB;IAAA;EAEnC;EAEA,IAAID,OAAO,KAAKf,gBAAgB,CAACuB,gBAAgB,EAAE;IACjD,QAAQN,IAAI;MACV,KAAKJ,gBAAgB,CAACM,WAAW;QAC/B,OAAQ,2CAA0CH,IAAK,EAAC;MAC1D,KAAKH,gBAAgB,CAACO,OAAO;MAC7B,KAAKP,gBAAgB,CAACQ,KAAK;QACzB,OAAQ,gDAA+CL,IAAK,EAAC;MAC/D,KAAKH,gBAAgB,CAACS,KAAK;QACzB,OAAQ,8CAA6CN,IAAK,EAAC;MAC7D;QACE,OAAQ,uCAAsC;IAAA;EAEpD;EAEA,MAAMQ,MAAM,4BAAGvB,uBAAuB,CAACc,OAAO,CAAC,yEAAI,sBAAsB;EAEzE,QAAQE,IAAI;IACV,KAAKJ,gBAAgB,CAACM,WAAW;MAC/B,OAAQ,GAAEK,MAAO,OAAMR,IAAK,EAAC;IAE/B,KAAKH,gBAAgB,CAACQ,KAAK;MACzB,OAAQ,GAAEG,MAAO,UAASR,IAAK,EAAC;IAElC,KAAKH,gBAAgB,CAACS,KAAK;MACzB,IAAIP,OAAO,KAAKf,gBAAgB,CAACO,QAAQ,IAAIQ,OAAO,KAAKf,gBAAgB,CAACQ,eAAe,EAAE;QACzF,OAAQ,GAAEgB,MAAO,OAAMR,IAAK,EAAC;MAC/B;MACA,OAAQ,GAAEQ,MAAO,UAASR,IAAK,EAAC;IAElC,KAAKH,gBAAgB,CAACO,OAAO;MAC3B,OAAQ,GAAEI,MAAO,YAAWR,IAAK,EAAC;IACpC;MACE,OAAQ,GAAEQ,MAAO,EAAC;EAAA;AAExB"},"metadata":{},"sourceType":"module"}