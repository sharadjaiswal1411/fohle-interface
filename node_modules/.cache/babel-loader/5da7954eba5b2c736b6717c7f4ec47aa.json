{"ast":null,"code":"var _jsxFileName = \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/components/swap/ConfirmSwapModal.tsx\",\n  _s = $RefreshSig$();\nimport { Trans } from \"@lingui/react\";\nimport { Trace } from '@uniswap/analytics';\nimport { ModalName } from '@uniswap/analytics-events';\nimport { useCallback, useMemo, useState } from 'react';\nimport { tradeMeaningfullyDiffers } from 'utils/tradeMeaningFullyDiffer';\nimport TransactionConfirmationModal, { ConfirmationModalContent, TransactionErrorContent } from '../TransactionConfirmationModal';\nimport SwapModalFooter from './SwapModalFooter';\nimport SwapModalHeader from './SwapModalHeader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ConfirmSwapModal(_ref) {\n  _s();\n  var _trade$inputAmount, _trade$inputAmount2, _trade$inputAmount2$c, _trade$outputAmount, _trade$outputAmount2, _trade$outputAmount2$;\n  let {\n    trade,\n    originalTrade,\n    onAcceptChanges,\n    allowedSlippage,\n    onConfirm,\n    onDismiss,\n    recipient,\n    swapErrorMessage,\n    isOpen,\n    attemptingTxn,\n    txHash,\n    swapQuoteReceivedDate,\n    fiatValueInput,\n    fiatValueOutput\n  } = _ref;\n  // shouldLogModalCloseEvent lets the child SwapModalHeader component know when modal has been closed\n  // and an event triggered by modal closing should be logged.\n  const [shouldLogModalCloseEvent, setShouldLogModalCloseEvent] = useState(false);\n  const showAcceptChanges = useMemo(() => Boolean(trade && originalTrade && tradeMeaningfullyDiffers(trade, originalTrade)), [originalTrade, trade]);\n  const onModalDismiss = useCallback(() => {\n    if (isOpen) setShouldLogModalCloseEvent(true);\n    onDismiss();\n  }, [isOpen, onDismiss]);\n  const modalHeader = useCallback(() => {\n    return trade ? /*#__PURE__*/_jsxDEV(SwapModalHeader, {\n      trade: trade,\n      shouldLogModalCloseEvent: shouldLogModalCloseEvent,\n      setShouldLogModalCloseEvent: setShouldLogModalCloseEvent,\n      allowedSlippage: allowedSlippage,\n      recipient: recipient,\n      showAcceptChanges: showAcceptChanges,\n      onAcceptChanges: onAcceptChanges\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this) : null;\n  }, [allowedSlippage, onAcceptChanges, recipient, showAcceptChanges, trade, shouldLogModalCloseEvent]);\n  const modalBottom = useCallback(() => {\n    return trade ? /*#__PURE__*/_jsxDEV(SwapModalFooter, {\n      onConfirm: onConfirm,\n      trade: trade,\n      hash: txHash,\n      allowedSlippage: allowedSlippage,\n      disabledConfirm: showAcceptChanges,\n      swapErrorMessage: swapErrorMessage,\n      swapQuoteReceivedDate: swapQuoteReceivedDate,\n      fiatValueInput: fiatValueInput,\n      fiatValueOutput: fiatValueOutput\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this) : null;\n  }, [onConfirm, showAcceptChanges, swapErrorMessage, trade, allowedSlippage, txHash, swapQuoteReceivedDate, fiatValueInput, fiatValueOutput]);\n\n  // text to show while loading\n  const pendingText = /*#__PURE__*/_jsxDEV(Trans, {\n    id: \"Swapping {0} {1} for {2} {3}\",\n    values: {\n      0: trade === null || trade === void 0 ? void 0 : (_trade$inputAmount = trade.inputAmount) === null || _trade$inputAmount === void 0 ? void 0 : _trade$inputAmount.toSignificant(6),\n      1: trade === null || trade === void 0 ? void 0 : (_trade$inputAmount2 = trade.inputAmount) === null || _trade$inputAmount2 === void 0 ? void 0 : (_trade$inputAmount2$c = _trade$inputAmount2.currency) === null || _trade$inputAmount2$c === void 0 ? void 0 : _trade$inputAmount2$c.symbol,\n      2: trade === null || trade === void 0 ? void 0 : (_trade$outputAmount = trade.outputAmount) === null || _trade$outputAmount === void 0 ? void 0 : _trade$outputAmount.toSignificant(6),\n      3: trade === null || trade === void 0 ? void 0 : (_trade$outputAmount2 = trade.outputAmount) === null || _trade$outputAmount2 === void 0 ? void 0 : (_trade$outputAmount2$ = _trade$outputAmount2.currency) === null || _trade$outputAmount2$ === void 0 ? void 0 : _trade$outputAmount2$.symbol\n    }\n  }, void 0, false, void 0, this);\n  const confirmationContent = useCallback(() => swapErrorMessage ? /*#__PURE__*/_jsxDEV(TransactionErrorContent, {\n    onDismiss: onModalDismiss,\n    message: swapErrorMessage\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 9\n  }, this) : /*#__PURE__*/_jsxDEV(ConfirmationModalContent, {\n    title: /*#__PURE__*/_jsxDEV(Trans, {\n      id: \"Confirm Swap\"\n    }, void 0, false, void 0, this),\n    onDismiss: onModalDismiss,\n    topContent: modalHeader,\n    bottomContent: modalBottom\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 9\n  }, this), [onModalDismiss, modalBottom, modalHeader, swapErrorMessage]);\n  return /*#__PURE__*/_jsxDEV(Trace, {\n    modal: ModalName.CONFIRM_SWAP,\n    children: /*#__PURE__*/_jsxDEV(TransactionConfirmationModal, {\n      isOpen: isOpen,\n      onDismiss: onModalDismiss,\n      attemptingTxn: attemptingTxn,\n      hash: txHash,\n      content: confirmationContent,\n      pendingText: pendingText,\n      currencyToAdd: trade === null || trade === void 0 ? void 0 : trade.outputAmount.currency\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, this);\n}\n_s(ConfirmSwapModal, \"FK+0d8DrqdzlEKOWfdgw5tg3FzU=\");\n_c = ConfirmSwapModal;\nvar _c;\n$RefreshReg$(_c, \"ConfirmSwapModal\");","map":{"version":3,"names":["Trace","ModalName","useCallback","useMemo","useState","tradeMeaningfullyDiffers","TransactionConfirmationModal","ConfirmationModalContent","TransactionErrorContent","SwapModalFooter","SwapModalHeader","ConfirmSwapModal","trade","originalTrade","onAcceptChanges","allowedSlippage","onConfirm","onDismiss","recipient","swapErrorMessage","isOpen","attemptingTxn","txHash","swapQuoteReceivedDate","fiatValueInput","fiatValueOutput","shouldLogModalCloseEvent","setShouldLogModalCloseEvent","showAcceptChanges","Boolean","onModalDismiss","modalHeader","modalBottom","pendingText","inputAmount","toSignificant","currency","symbol","outputAmount","confirmationContent","CONFIRM_SWAP"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/components/swap/ConfirmSwapModal.tsx"],"sourcesContent":["import { Trans } from '@lingui/macro'\nimport { Trace } from '@uniswap/analytics'\nimport { ModalName } from '@uniswap/analytics-events'\nimport { Trade } from '@uniswap/router-sdk'\nimport { Currency, CurrencyAmount, Percent, Token, TradeType } from '@uniswap/sdk-core'\nimport { ReactNode, useCallback, useMemo, useState } from 'react'\nimport { InterfaceTrade } from 'state/routing/types'\nimport { tradeMeaningfullyDiffers } from 'utils/tradeMeaningFullyDiffer'\n\nimport TransactionConfirmationModal, {\n  ConfirmationModalContent,\n  TransactionErrorContent,\n} from '../TransactionConfirmationModal'\nimport SwapModalFooter from './SwapModalFooter'\nimport SwapModalHeader from './SwapModalHeader'\n\nexport default function ConfirmSwapModal({\n  trade,\n  originalTrade,\n  onAcceptChanges,\n  allowedSlippage,\n  onConfirm,\n  onDismiss,\n  recipient,\n  swapErrorMessage,\n  isOpen,\n  attemptingTxn,\n  txHash,\n  swapQuoteReceivedDate,\n  fiatValueInput,\n  fiatValueOutput,\n}: {\n  isOpen: boolean\n  trade: InterfaceTrade<Currency, Currency, TradeType> | undefined\n  originalTrade: Trade<Currency, Currency, TradeType> | undefined\n  attemptingTxn: boolean\n  txHash: string | undefined\n  recipient: string | null\n  allowedSlippage: Percent\n  onAcceptChanges: () => void\n  onConfirm: () => void\n  swapErrorMessage: ReactNode | undefined\n  onDismiss: () => void\n  swapQuoteReceivedDate: Date | undefined\n  fiatValueInput?: CurrencyAmount<Token> | null\n  fiatValueOutput?: CurrencyAmount<Token> | null\n}) {\n  // shouldLogModalCloseEvent lets the child SwapModalHeader component know when modal has been closed\n  // and an event triggered by modal closing should be logged.\n  const [shouldLogModalCloseEvent, setShouldLogModalCloseEvent] = useState(false)\n  const showAcceptChanges = useMemo(\n    () => Boolean(trade && originalTrade && tradeMeaningfullyDiffers(trade, originalTrade)),\n    [originalTrade, trade]\n  )\n\n  const onModalDismiss = useCallback(() => {\n    if (isOpen) setShouldLogModalCloseEvent(true)\n    onDismiss()\n  }, [isOpen, onDismiss])\n\n  const modalHeader = useCallback(() => {\n    return trade ? (\n      <SwapModalHeader\n        trade={trade}\n        shouldLogModalCloseEvent={shouldLogModalCloseEvent}\n        setShouldLogModalCloseEvent={setShouldLogModalCloseEvent}\n        allowedSlippage={allowedSlippage}\n        recipient={recipient}\n        showAcceptChanges={showAcceptChanges}\n        onAcceptChanges={onAcceptChanges}\n      />\n    ) : null\n  }, [allowedSlippage, onAcceptChanges, recipient, showAcceptChanges, trade, shouldLogModalCloseEvent])\n\n  const modalBottom = useCallback(() => {\n    return trade ? (\n      <SwapModalFooter\n        onConfirm={onConfirm}\n        trade={trade}\n        hash={txHash}\n        allowedSlippage={allowedSlippage}\n        disabledConfirm={showAcceptChanges}\n        swapErrorMessage={swapErrorMessage}\n        swapQuoteReceivedDate={swapQuoteReceivedDate}\n        fiatValueInput={fiatValueInput}\n        fiatValueOutput={fiatValueOutput}\n      />\n    ) : null\n  }, [\n    onConfirm,\n    showAcceptChanges,\n    swapErrorMessage,\n    trade,\n    allowedSlippage,\n    txHash,\n    swapQuoteReceivedDate,\n    fiatValueInput,\n    fiatValueOutput,\n  ])\n\n  // text to show while loading\n  const pendingText = (\n    <Trans>\n      Swapping {trade?.inputAmount?.toSignificant(6)} {trade?.inputAmount?.currency?.symbol} for{' '}\n      {trade?.outputAmount?.toSignificant(6)} {trade?.outputAmount?.currency?.symbol}\n    </Trans>\n  )\n\n  const confirmationContent = useCallback(\n    () =>\n      swapErrorMessage ? (\n        <TransactionErrorContent onDismiss={onModalDismiss} message={swapErrorMessage} />\n      ) : (\n        <ConfirmationModalContent\n          title={<Trans>Confirm Swap</Trans>}\n          onDismiss={onModalDismiss}\n          topContent={modalHeader}\n          bottomContent={modalBottom}\n        />\n      ),\n    [onModalDismiss, modalBottom, modalHeader, swapErrorMessage]\n  )\n\n  return (\n    <Trace modal={ModalName.CONFIRM_SWAP}>\n      <TransactionConfirmationModal\n        isOpen={isOpen}\n        onDismiss={onModalDismiss}\n        attemptingTxn={attemptingTxn}\n        hash={txHash}\n        content={confirmationContent}\n        pendingText={pendingText}\n        currencyToAdd={trade?.outputAmount.currency}\n      />\n    </Trace>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}