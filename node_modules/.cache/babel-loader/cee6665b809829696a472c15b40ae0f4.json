{"ast":null,"code":"var _regeneratorRuntime = require(\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\nvar _asyncToGenerator = require(\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\nvar Mutex = require('async-mutex').Mutex;\nvar _require = require('json-rpc-engine'),\n  createAsyncMiddleware = _require.createAsyncMiddleware;\nvar createJsonRpcMiddleware = require('eth-json-rpc-middleware/scaffold');\nvar LogFilter = require('./log-filter.js');\nvar BlockFilter = require('./block-filter.js');\nvar TxFilter = require('./tx-filter.js');\nvar _require2 = require('./hexUtils'),\n  intToHex = _require2.intToHex,\n  hexToInt = _require2.hexToInt;\nmodule.exports = createEthFilterMiddleware;\nfunction createEthFilterMiddleware(_ref) {\n  var blockTracker = _ref.blockTracker,\n    provider = _ref.provider;\n  // create filter collection\n  var filterIndex = 0;\n  var filters = {};\n  // create update mutex\n  var mutex = new Mutex();\n  var waitForFree = mutexMiddlewareWrapper({\n    mutex: mutex\n  });\n  var middleware = createJsonRpcMiddleware({\n    // install filters\n    eth_newFilter: waitForFree(toFilterCreationMiddleware(newLogFilter)),\n    eth_newBlockFilter: waitForFree(toFilterCreationMiddleware(newBlockFilter)),\n    eth_newPendingTransactionFilter: waitForFree(toFilterCreationMiddleware(newPendingTransactionFilter)),\n    // uninstall filters\n    eth_uninstallFilter: waitForFree(toAsyncRpcMiddleware(uninstallFilterHandler)),\n    // checking filter changes\n    eth_getFilterChanges: waitForFree(toAsyncRpcMiddleware(getFilterChanges)),\n    eth_getFilterLogs: waitForFree(toAsyncRpcMiddleware(getFilterLogs))\n  });\n\n  // setup filter updating and destroy handler\n  var filterUpdater = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref2) {\n      var oldBlock, newBlock, releaseLock;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              oldBlock = _ref2.oldBlock, newBlock = _ref2.newBlock;\n              if (!(filters.length === 0)) {\n                _context2.next = 3;\n                break;\n              }\n              return _context2.abrupt(\"return\");\n            case 3:\n              _context2.next = 5;\n              return mutex.acquire();\n            case 5:\n              releaseLock = _context2.sent;\n              _context2.prev = 6;\n              _context2.next = 9;\n              return Promise.all(objValues(filters).map( /*#__PURE__*/function () {\n                var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(filter) {\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _context.prev = 0;\n                          _context.next = 3;\n                          return filter.update({\n                            oldBlock: oldBlock,\n                            newBlock: newBlock\n                          });\n                        case 3:\n                          _context.next = 8;\n                          break;\n                        case 5:\n                          _context.prev = 5;\n                          _context.t0 = _context[\"catch\"](0);\n                          // handle each error individually so filter update errors don't affect other filters\n                          console.error(_context.t0);\n                        case 8:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee, null, [[0, 5]]);\n                }));\n                return function (_x2) {\n                  return _ref4.apply(this, arguments);\n                };\n              }()));\n            case 9:\n              _context2.next = 14;\n              break;\n            case 11:\n              _context2.prev = 11;\n              _context2.t0 = _context2[\"catch\"](6);\n              // log error so we don't skip the releaseLock\n              console.error(_context2.t0);\n            case 14:\n              // unlock update reads\n              releaseLock();\n            case 15:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[6, 11]]);\n    }));\n    return function filterUpdater(_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  // expose filter methods directly\n  middleware.newLogFilter = newLogFilter;\n  middleware.newBlockFilter = newBlockFilter;\n  middleware.newPendingTransactionFilter = newPendingTransactionFilter;\n  middleware.uninstallFilter = uninstallFilterHandler;\n  middleware.getFilterChanges = getFilterChanges;\n  middleware.getFilterLogs = getFilterLogs;\n\n  // expose destroy method for cleanup\n  middleware.destroy = function () {\n    uninstallAllFilters();\n  };\n  return middleware;\n\n  //\n  // new filters\n  //\n  function newLogFilter(_x3) {\n    return _newLogFilter.apply(this, arguments);\n  }\n  function _newLogFilter() {\n    _newLogFilter = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(params) {\n      var filter, filterIndex;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              filter = new LogFilter({\n                provider: provider,\n                params: params\n              });\n              _context3.next = 3;\n              return installFilter(filter);\n            case 3:\n              filterIndex = _context3.sent;\n              return _context3.abrupt(\"return\", filter);\n            case 5:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n    return _newLogFilter.apply(this, arguments);\n  }\n  function newBlockFilter() {\n    return _newBlockFilter.apply(this, arguments);\n  }\n  function _newBlockFilter() {\n    _newBlockFilter = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      var filter, filterIndex;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              filter = new BlockFilter({\n                provider: provider\n              });\n              _context4.next = 3;\n              return installFilter(filter);\n            case 3:\n              filterIndex = _context4.sent;\n              return _context4.abrupt(\"return\", filter);\n            case 5:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n    return _newBlockFilter.apply(this, arguments);\n  }\n  function newPendingTransactionFilter() {\n    return _newPendingTransactionFilter.apply(this, arguments);\n  } //\n  // get filter changes\n  //\n  function _newPendingTransactionFilter() {\n    _newPendingTransactionFilter = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n      var filter, filterIndex;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              filter = new TxFilter({\n                provider: provider\n              });\n              _context5.next = 3;\n              return installFilter(filter);\n            case 3:\n              filterIndex = _context5.sent;\n              return _context5.abrupt(\"return\", filter);\n            case 5:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n    return _newPendingTransactionFilter.apply(this, arguments);\n  }\n  function getFilterChanges(_x4) {\n    return _getFilterChanges.apply(this, arguments);\n  }\n  function _getFilterChanges() {\n    _getFilterChanges = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(filterIndexHex) {\n      var filterIndex, filter, results;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              filterIndex = hexToInt(filterIndexHex);\n              filter = filters[filterIndex];\n              if (filter) {\n                _context6.next = 4;\n                break;\n              }\n              throw new Error(\"No filter for index \\\"\".concat(filterIndex, \"\\\"\"));\n            case 4:\n              results = filter.getChangesAndClear();\n              return _context6.abrupt(\"return\", results);\n            case 6:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n    return _getFilterChanges.apply(this, arguments);\n  }\n  function getFilterLogs(_x5) {\n    return _getFilterLogs.apply(this, arguments);\n  } //\n  // remove filters\n  //\n  function _getFilterLogs() {\n    _getFilterLogs = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(filterIndexHex) {\n      var filterIndex, filter;\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              filterIndex = hexToInt(filterIndexHex);\n              filter = filters[filterIndex];\n              if (filter) {\n                _context7.next = 4;\n                break;\n              }\n              throw new Error(\"No filter for index \\\"\".concat(filterIndex, \"\\\"\"));\n            case 4:\n              // only return results for log filters\n              if (filter.type === 'log') {\n                results = filter.getAllResults();\n              } else {\n                results = [];\n              }\n              return _context7.abrupt(\"return\", results);\n            case 6:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n    return _getFilterLogs.apply(this, arguments);\n  }\n  function uninstallFilterHandler(_x6) {\n    return _uninstallFilterHandler.apply(this, arguments);\n  } //\n  // utils\n  //\n  function _uninstallFilterHandler() {\n    _uninstallFilterHandler = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(filterIndexHex) {\n      var filterIndex, filter, result;\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              // check filter exists\n              filterIndex = hexToInt(filterIndexHex);\n              filter = filters[filterIndex];\n              result = Boolean(filter); // uninstall filter\n              if (!result) {\n                _context8.next = 6;\n                break;\n              }\n              _context8.next = 6;\n              return uninstallFilter(filterIndex);\n            case 6:\n              return _context8.abrupt(\"return\", result);\n            case 7:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }));\n    return _uninstallFilterHandler.apply(this, arguments);\n  }\n  function installFilter(_x7) {\n    return _installFilter.apply(this, arguments);\n  }\n  function _installFilter() {\n    _installFilter = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(filter) {\n      var prevFilterCount, currentBlock, newFilterCount;\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              prevFilterCount = objValues(filters).length; // install filter\n              _context9.next = 3;\n              return blockTracker.getLatestBlock();\n            case 3:\n              currentBlock = _context9.sent;\n              _context9.next = 6;\n              return filter.initialize({\n                currentBlock: currentBlock\n              });\n            case 6:\n              filterIndex++;\n              filters[filterIndex] = filter;\n              filter.id = filterIndex;\n              filter.idHex = intToHex(filterIndex);\n              // update block tracker subs\n              newFilterCount = objValues(filters).length;\n              updateBlockTrackerSubs({\n                prevFilterCount: prevFilterCount,\n                newFilterCount: newFilterCount\n              });\n              return _context9.abrupt(\"return\", filterIndex);\n            case 13:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9);\n    }));\n    return _installFilter.apply(this, arguments);\n  }\n  function uninstallFilter(_x8) {\n    return _uninstallFilter.apply(this, arguments);\n  }\n  function _uninstallFilter() {\n    _uninstallFilter = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(filterIndex) {\n      var prevFilterCount, newFilterCount;\n      return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              prevFilterCount = objValues(filters).length;\n              delete filters[filterIndex];\n              // update block tracker subs\n              newFilterCount = objValues(filters).length;\n              updateBlockTrackerSubs({\n                prevFilterCount: prevFilterCount,\n                newFilterCount: newFilterCount\n              });\n            case 4:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10);\n    }));\n    return _uninstallFilter.apply(this, arguments);\n  }\n  function uninstallAllFilters() {\n    return _uninstallAllFilters.apply(this, arguments);\n  }\n  function _uninstallAllFilters() {\n    _uninstallAllFilters = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {\n      var prevFilterCount;\n      return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              prevFilterCount = objValues(filters).length;\n              filters = {};\n              // update block tracker subs\n              updateBlockTrackerSubs({\n                prevFilterCount: prevFilterCount,\n                newFilterCount: 0\n              });\n            case 3:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11);\n    }));\n    return _uninstallAllFilters.apply(this, arguments);\n  }\n  function updateBlockTrackerSubs(_ref5) {\n    var prevFilterCount = _ref5.prevFilterCount,\n      newFilterCount = _ref5.newFilterCount;\n    // subscribe\n    if (prevFilterCount === 0 && newFilterCount > 0) {\n      blockTracker.on('sync', filterUpdater);\n      return;\n    }\n    // unsubscribe\n    if (prevFilterCount > 0 && newFilterCount === 0) {\n      blockTracker.removeListener('sync', filterUpdater);\n      return;\n    }\n  }\n}\n\n// helper for turning filter constructors into rpc middleware\nfunction toFilterCreationMiddleware(createFilterFn) {\n  return toAsyncRpcMiddleware( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12() {\n    var filter,\n      result,\n      _args12 = arguments;\n    return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n      while (1) {\n        switch (_context12.prev = _context12.next) {\n          case 0:\n            _context12.next = 2;\n            return createFilterFn.apply(void 0, _args12);\n          case 2:\n            filter = _context12.sent;\n            result = intToHex(filter.id);\n            return _context12.abrupt(\"return\", result);\n          case 5:\n          case \"end\":\n            return _context12.stop();\n        }\n      }\n    }, _callee12);\n  })));\n}\n\n// helper for pulling out req.params and setting res.result\nfunction toAsyncRpcMiddleware(asyncFn) {\n  return createAsyncMiddleware( /*#__PURE__*/function () {\n    var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(req, res) {\n      var result;\n      return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              _context13.next = 2;\n              return asyncFn.apply(null, req.params);\n            case 2:\n              result = _context13.sent;\n              res.result = result;\n            case 4:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, _callee13);\n    }));\n    return function (_x9, _x10) {\n      return _ref7.apply(this, arguments);\n    };\n  }());\n}\nfunction mutexMiddlewareWrapper(_ref8) {\n  var mutex = _ref8.mutex;\n  return function (middleware) {\n    return /*#__PURE__*/function () {\n      var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(req, res, next, end) {\n        var releaseLock;\n        return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                _context14.next = 2;\n                return mutex.acquire();\n              case 2:\n                releaseLock = _context14.sent;\n                releaseLock();\n                middleware(req, res, next, end);\n              case 5:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14);\n      }));\n      return function (_x11, _x12, _x13, _x14) {\n        return _ref9.apply(this, arguments);\n      };\n    }();\n  };\n}\nfunction objValues(obj, fn) {\n  var values = [];\n  for (var key in obj) {\n    values.push(obj[key]);\n  }\n  return values;\n}","map":{"version":3,"names":["Mutex","require","createAsyncMiddleware","createJsonRpcMiddleware","LogFilter","BlockFilter","TxFilter","intToHex","hexToInt","module","exports","createEthFilterMiddleware","blockTracker","provider","filterIndex","filters","mutex","waitForFree","mutexMiddlewareWrapper","middleware","eth_newFilter","toFilterCreationMiddleware","newLogFilter","eth_newBlockFilter","newBlockFilter","eth_newPendingTransactionFilter","newPendingTransactionFilter","eth_uninstallFilter","toAsyncRpcMiddleware","uninstallFilterHandler","eth_getFilterChanges","getFilterChanges","eth_getFilterLogs","getFilterLogs","filterUpdater","oldBlock","newBlock","length","acquire","releaseLock","Promise","all","objValues","map","filter","update","console","error","uninstallFilter","destroy","uninstallAllFilters","params","installFilter","filterIndexHex","Error","results","getChangesAndClear","type","getAllResults","result","Boolean","prevFilterCount","getLatestBlock","currentBlock","initialize","id","idHex","newFilterCount","updateBlockTrackerSubs","on","removeListener","createFilterFn","asyncFn","req","res","apply","next","end","obj","fn","values","key","push"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/eth-json-rpc-filters/index.js"],"sourcesContent":["const Mutex = require('async-mutex').Mutex\nconst { createAsyncMiddleware } = require('json-rpc-engine')\nconst createJsonRpcMiddleware = require('eth-json-rpc-middleware/scaffold')\nconst LogFilter = require('./log-filter.js')\nconst BlockFilter = require('./block-filter.js')\nconst TxFilter = require('./tx-filter.js')\nconst { intToHex, hexToInt } = require('./hexUtils')\n\nmodule.exports = createEthFilterMiddleware\n\nfunction createEthFilterMiddleware({ blockTracker, provider }) {\n\n  // create filter collection\n  let filterIndex = 0\n  let filters = {}\n  // create update mutex\n  const mutex = new Mutex()\n  const waitForFree = mutexMiddlewareWrapper({ mutex })\n\n  const middleware = createJsonRpcMiddleware({\n    // install filters\n    eth_newFilter:                   waitForFree(toFilterCreationMiddleware(newLogFilter)),\n    eth_newBlockFilter:              waitForFree(toFilterCreationMiddleware(newBlockFilter)),\n    eth_newPendingTransactionFilter: waitForFree(toFilterCreationMiddleware(newPendingTransactionFilter)),\n    // uninstall filters\n    eth_uninstallFilter:             waitForFree(toAsyncRpcMiddleware(uninstallFilterHandler)),\n    // checking filter changes\n    eth_getFilterChanges:            waitForFree(toAsyncRpcMiddleware(getFilterChanges)),\n    eth_getFilterLogs:               waitForFree(toAsyncRpcMiddleware(getFilterLogs)),\n  })\n\n  // setup filter updating and destroy handler\n  const filterUpdater = async ({ oldBlock, newBlock }) => {\n    if (filters.length === 0) return\n    // lock update reads\n    const releaseLock = await mutex.acquire()\n    try {\n      // process all filters in parallel\n      await Promise.all(objValues(filters).map(async (filter) => {\n        try {\n         await filter.update({ oldBlock, newBlock })\n        } catch (err) {\n          // handle each error individually so filter update errors don't affect other filters\n          console.error(err)\n        }\n      }))\n    } catch (err) {\n      // log error so we don't skip the releaseLock\n      console.error(err)\n    }\n    // unlock update reads\n    releaseLock()\n  }\n\n  // expose filter methods directly\n  middleware.newLogFilter = newLogFilter\n  middleware.newBlockFilter = newBlockFilter\n  middleware.newPendingTransactionFilter = newPendingTransactionFilter\n  middleware.uninstallFilter = uninstallFilterHandler\n  middleware.getFilterChanges = getFilterChanges\n  middleware.getFilterLogs = getFilterLogs\n\n  // expose destroy method for cleanup\n  middleware.destroy = () => {\n    uninstallAllFilters()\n  }\n\n  return middleware\n\n  //\n  // new filters\n  //\n\n  async function newLogFilter(params) {\n    const filter = new LogFilter({ provider, params })\n    const filterIndex = await installFilter(filter)\n    return filter\n  }\n\n  async function newBlockFilter() {\n    const filter = new BlockFilter({ provider })\n    const filterIndex = await installFilter(filter)\n    return filter\n  }\n\n  async function newPendingTransactionFilter() {\n    const filter = new TxFilter({ provider })\n    const filterIndex = await installFilter(filter)\n    return filter\n  }\n\n  //\n  // get filter changes\n  //\n\n  async function getFilterChanges(filterIndexHex) {\n    const filterIndex = hexToInt(filterIndexHex)\n    const filter = filters[filterIndex]\n    if (!filter) {\n      throw new Error(`No filter for index \"${filterIndex}\"`)\n    }\n    const results = filter.getChangesAndClear()\n    return results\n  }\n\n  async function getFilterLogs(filterIndexHex) {\n    const filterIndex = hexToInt(filterIndexHex)\n    const filter = filters[filterIndex]\n    if (!filter) {\n      throw new Error(`No filter for index \"${filterIndex}\"`)\n    }\n    // only return results for log filters\n    if (filter.type === 'log') {\n      results = filter.getAllResults()\n    } else {\n      results = []\n    }\n    return results\n  }\n\n\n  //\n  // remove filters\n  //\n\n\n  async function uninstallFilterHandler(filterIndexHex) {\n    // check filter exists\n    const filterIndex = hexToInt(filterIndexHex)\n    const filter = filters[filterIndex]\n    const result = Boolean(filter)\n    // uninstall filter\n    if (result) {\n      await uninstallFilter(filterIndex)\n    }\n    return result\n  }\n\n  //\n  // utils\n  //\n\n  async function installFilter(filter) {\n    const prevFilterCount = objValues(filters).length\n    // install filter\n    const currentBlock = await blockTracker.getLatestBlock()\n    await filter.initialize({ currentBlock })\n    filterIndex++\n    filters[filterIndex] = filter\n    filter.id = filterIndex\n    filter.idHex = intToHex(filterIndex)\n    // update block tracker subs\n    const newFilterCount = objValues(filters).length\n    updateBlockTrackerSubs({ prevFilterCount, newFilterCount })\n    return filterIndex\n  }\n\n  async function uninstallFilter(filterIndex) {\n    const prevFilterCount = objValues(filters).length\n    delete filters[filterIndex]\n    // update block tracker subs\n    const newFilterCount = objValues(filters).length\n    updateBlockTrackerSubs({ prevFilterCount, newFilterCount })\n  }\n\n  async function uninstallAllFilters() {\n    const prevFilterCount = objValues(filters).length\n    filters = {}\n    // update block tracker subs\n    updateBlockTrackerSubs({ prevFilterCount, newFilterCount: 0 })\n  }\n\n  function updateBlockTrackerSubs({ prevFilterCount, newFilterCount }) {\n    // subscribe\n    if (prevFilterCount === 0 && newFilterCount > 0) {\n      blockTracker.on('sync', filterUpdater)\n      return\n    }\n    // unsubscribe\n    if (prevFilterCount > 0 && newFilterCount === 0) {\n      blockTracker.removeListener('sync', filterUpdater)\n      return\n    }\n  }\n\n}\n\n// helper for turning filter constructors into rpc middleware\nfunction toFilterCreationMiddleware(createFilterFn) {\n  return toAsyncRpcMiddleware(async (...args) => {\n    const filter = await createFilterFn(...args)\n    const result = intToHex(filter.id)\n    return result\n  })\n}\n\n// helper for pulling out req.params and setting res.result\nfunction toAsyncRpcMiddleware(asyncFn) {\n  return createAsyncMiddleware(async (req, res) => {\n    const result = await asyncFn.apply(null, req.params)\n    res.result = result\n  })\n}\n\nfunction mutexMiddlewareWrapper({ mutex }) {\n  return (middleware) => {\n    return async (req, res, next, end) => {\n      // wait for mutex available\n      // we can release immediately because\n      // we just need to make sure updates aren't active\n      const releaseLock = await mutex.acquire()\n      releaseLock()\n      middleware(req, res, next, end)\n    }\n  }\n}\n\nfunction objValues(obj, fn){\n  const values = []\n  for (let key in obj) {\n    values.push(obj[key])\n  }\n  return values\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}