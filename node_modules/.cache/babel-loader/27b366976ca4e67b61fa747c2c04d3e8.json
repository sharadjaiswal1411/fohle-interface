{"ast":null,"code":"\"use strict\";\n\n// Copyright (c) 2018-2022 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\nvar _defineProperty = require(\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty\");\nvar _classCallCheck = require(\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WalletSDKConnection = void 0;\nvar rxjs_1 = require(\"rxjs\");\nvar operators_1 = require(\"rxjs/operators\");\nvar Session_1 = require(\"../relay/Session\");\nvar types_1 = require(\"../types\");\nvar ClientMessage_1 = require(\"./ClientMessage\");\nvar DiagnosticLogger_1 = require(\"./DiagnosticLogger\");\nvar RxWebSocket_1 = require(\"./RxWebSocket\");\nvar ServerMessage_1 = require(\"./ServerMessage\");\nvar HEARTBEAT_INTERVAL = 10000;\nvar REQUEST_TIMEOUT = 60000;\n/**\n * Coinbase Wallet Connection\n */\nvar WalletSDKConnection = /*#__PURE__*/function () {\n  /**\n   * Constructor\n   * @param sessionId Session ID\n   * @param sessionKey Session Key\n   * @param linkAPIUrl Coinbase Wallet link server URL\n   * @param [WebSocketClass] Custom WebSocket implementation\n   */\n  function WalletSDKConnection(sessionId, sessionKey, linkAPIUrl, diagnostic) {\n    var _this = this;\n    var WebSocketClass = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : WebSocket;\n    _classCallCheck(this, WalletSDKConnection);\n    this.sessionId = sessionId;\n    this.sessionKey = sessionKey;\n    this.diagnostic = diagnostic;\n    this.subscriptions = new rxjs_1.Subscription();\n    this.destroyed = false;\n    this.lastHeartbeatResponse = 0;\n    this.nextReqId = (0, types_1.IntNumber)(1);\n    this.connectedSubject = new rxjs_1.BehaviorSubject(false);\n    this.linkedSubject = new rxjs_1.BehaviorSubject(false);\n    this.sessionConfigSubject = new rxjs_1.ReplaySubject(1);\n    var ws = new RxWebSocket_1.RxWebSocket(linkAPIUrl + \"/rpc\", WebSocketClass);\n    this.ws = ws;\n    // attempt to reconnect every 5 seconds when disconnected\n    this.subscriptions.add(ws.connectionState$.pipe((0, operators_1.tap)(function (state) {\n      var _a;\n      return (_a = _this.diagnostic) === null || _a === void 0 ? void 0 : _a.log(DiagnosticLogger_1.EVENTS.CONNECTED_STATE_CHANGE, {\n        state: state,\n        sessionIdHash: Session_1.Session.hash(sessionId)\n      });\n    }),\n    // ignore initial DISCONNECTED state\n    (0, operators_1.skip)(1),\n    // if DISCONNECTED and not destroyed\n    (0, operators_1.filter)(function (cs) {\n      return cs === RxWebSocket_1.ConnectionState.DISCONNECTED && !_this.destroyed;\n    }),\n    // wait 5 seconds\n    (0, operators_1.delay)(5000),\n    // check whether it's destroyed again\n    (0, operators_1.filter)(function (_) {\n      return !_this.destroyed;\n    }),\n    // reconnect\n    (0, operators_1.flatMap)(function (_) {\n      return ws.connect();\n    }), (0, operators_1.retry)()).subscribe());\n    // perform authentication upon connection\n    this.subscriptions.add(ws.connectionState$.pipe(\n    // ignore initial DISCONNECTED and CONNECTING states\n    (0, operators_1.skip)(2), (0, operators_1.switchMap)(function (cs) {\n      return (0, rxjs_1.iif)(function () {\n        return cs === RxWebSocket_1.ConnectionState.CONNECTED;\n      },\n      // if CONNECTED, authenticate, and then check link status\n      _this.authenticate().pipe((0, operators_1.tap)(function (_) {\n        return _this.sendIsLinked();\n      }), (0, operators_1.tap)(function (_) {\n        return _this.sendGetSessionConfig();\n      }), (0, operators_1.map)(function (_) {\n        return true;\n      })),\n      // if not CONNECTED, emit false immediately\n      (0, rxjs_1.of)(false));\n    }), (0, operators_1.distinctUntilChanged)(), (0, operators_1.catchError)(function (_) {\n      return (0, rxjs_1.of)(false);\n    })).subscribe(function (connected) {\n      return _this.connectedSubject.next(connected);\n    }));\n    // send heartbeat every n seconds while connected\n    this.subscriptions.add(ws.connectionState$.pipe(\n    // ignore initial DISCONNECTED state\n    (0, operators_1.skip)(1), (0, operators_1.switchMap)(function (cs) {\n      return (0, rxjs_1.iif)(function () {\n        return cs === RxWebSocket_1.ConnectionState.CONNECTED;\n      },\n      // if CONNECTED, start the heartbeat timer\n      (0, rxjs_1.timer)(0, HEARTBEAT_INTERVAL));\n    })).subscribe(function (i) {\n      return (\n        // first timer event updates lastHeartbeat timestamp\n        // subsequent calls send heartbeat message\n        i === 0 ? _this.updateLastHeartbeat() : _this.heartbeat()\n      );\n    }));\n    // handle server's heartbeat responses\n    this.subscriptions.add(ws.incomingData$.pipe((0, operators_1.filter)(function (m) {\n      return m === \"h\";\n    })).subscribe(function (_) {\n      return _this.updateLastHeartbeat();\n    }));\n    // handle link status updates\n    this.subscriptions.add(ws.incomingJSONData$.pipe((0, operators_1.filter)(function (m) {\n      return [\"IsLinkedOK\", \"Linked\"].includes(m.type);\n    })).subscribe(function (m) {\n      var _a;\n      var msg = m;\n      (_a = _this.diagnostic) === null || _a === void 0 ? void 0 : _a.log(DiagnosticLogger_1.EVENTS.LINKED, {\n        sessionIdHash: Session_1.Session.hash(sessionId),\n        linked: msg.linked,\n        type: m.type,\n        onlineGuests: msg.onlineGuests\n      });\n      _this.linkedSubject.next(msg.linked || msg.onlineGuests > 0);\n    }));\n    // handle session config updates\n    this.subscriptions.add(ws.incomingJSONData$.pipe((0, operators_1.filter)(function (m) {\n      return [\"GetSessionConfigOK\", \"SessionConfigUpdated\"].includes(m.type);\n    })).subscribe(function (m) {\n      var _a;\n      var msg = m;\n      (_a = _this.diagnostic) === null || _a === void 0 ? void 0 : _a.log(DiagnosticLogger_1.EVENTS.SESSION_CONFIG_RECEIVED, {\n        sessionIdHash: Session_1.Session.hash(sessionId),\n        metadata_keys: msg && msg.metadata ? Object.keys(msg.metadata) : undefined\n      });\n      _this.sessionConfigSubject.next({\n        webhookId: msg.webhookId,\n        webhookUrl: msg.webhookUrl,\n        metadata: msg.metadata\n      });\n    }));\n  }\n  /**\n   * Make a connection to the server\n   */\n  _createClass(WalletSDKConnection, [{\n    key: \"connect\",\n    value: function connect() {\n      var _a;\n      if (this.destroyed) {\n        throw new Error(\"instance is destroyed\");\n      }\n      (_a = this.diagnostic) === null || _a === void 0 ? void 0 : _a.log(DiagnosticLogger_1.EVENTS.STARTED_CONNECTING, {\n        sessionIdHash: Session_1.Session.hash(this.sessionId)\n      });\n      this.ws.connect().subscribe();\n    }\n    /**\n     * Terminate connection, and mark as destroyed. To reconnect, create a new\n     * instance of WalletSDKConnection\n     */\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var _a;\n      this.subscriptions.unsubscribe();\n      this.ws.disconnect();\n      (_a = this.diagnostic) === null || _a === void 0 ? void 0 : _a.log(DiagnosticLogger_1.EVENTS.DISCONNECTED, {\n        sessionIdHash: Session_1.Session.hash(this.sessionId)\n      });\n      this.destroyed = true;\n    }\n  }, {\n    key: \"isDestroyed\",\n    get: function get() {\n      return this.destroyed;\n    }\n    /**\n     * Emit true if connected and authenticated, else false\n     * @returns an Observable\n     */\n  }, {\n    key: \"connected$\",\n    get: function get() {\n      return this.connectedSubject.asObservable();\n    }\n    /**\n     * Emit once connected\n     * @returns an Observable\n     */\n  }, {\n    key: \"onceConnected$\",\n    get: function get() {\n      return this.connected$.pipe((0, operators_1.filter)(function (v) {\n        return v;\n      }), (0, operators_1.take)(1), (0, operators_1.map)(function () {\n        return void 0;\n      }));\n    }\n    /**\n     * Emit true if linked (a guest has joined before)\n     * @returns an Observable\n     */\n  }, {\n    key: \"linked$\",\n    get: function get() {\n      return this.linkedSubject.asObservable();\n    }\n    /**\n     * Emit once when linked\n     * @returns an Observable\n     */\n  }, {\n    key: \"onceLinked$\",\n    get: function get() {\n      return this.linked$.pipe((0, operators_1.filter)(function (v) {\n        return v;\n      }), (0, operators_1.take)(1), (0, operators_1.map)(function () {\n        return void 0;\n      }));\n    }\n    /**\n     * Emit current session config if available, and subsequent updates\n     * @returns an Observable for the session config\n     */\n  }, {\n    key: \"sessionConfig$\",\n    get: function get() {\n      return this.sessionConfigSubject.asObservable();\n    }\n    /**\n     * Emit incoming Event messages\n     * @returns an Observable for the messages\n     */\n  }, {\n    key: \"incomingEvent$\",\n    get: function get() {\n      return this.ws.incomingJSONData$.pipe((0, operators_1.filter)(function (m) {\n        if (m.type !== \"Event\") {\n          return false;\n        }\n        var sme = m;\n        return typeof sme.sessionId === \"string\" && typeof sme.eventId === \"string\" && typeof sme.event === \"string\" && typeof sme.data === \"string\";\n      }), (0, operators_1.map)(function (m) {\n        return m;\n      }));\n    }\n    /**\n     * Set session metadata in SessionConfig object\n     * @param key\n     * @param value\n     * @returns an Observable that completes when successful\n     */\n  }, {\n    key: \"setSessionMetadata\",\n    value: function setSessionMetadata(key, value) {\n      var _this2 = this;\n      var message = (0, ClientMessage_1.ClientMessageSetSessionConfig)({\n        id: (0, types_1.IntNumber)(this.nextReqId++),\n        sessionId: this.sessionId,\n        metadata: _defineProperty({}, key, value)\n      });\n      return this.onceConnected$.pipe((0, operators_1.flatMap)(function (_) {\n        return _this2.makeRequest(message);\n      }), (0, operators_1.map)(function (res) {\n        if ((0, ServerMessage_1.isServerMessageFail)(res)) {\n          throw new Error(res.error || \"failed to set session metadata\");\n        }\n      }));\n    }\n    /**\n     * Publish an event and emit event ID when successful\n     * @param event event name\n     * @param data event data\n     * @param callWebhook whether the webhook should be invoked\n     * @returns an Observable that emits event ID when successful\n     */\n  }, {\n    key: \"publishEvent\",\n    value: function publishEvent(event, data) {\n      var _this3 = this;\n      var callWebhook = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var message = (0, ClientMessage_1.ClientMessagePublishEvent)({\n        id: (0, types_1.IntNumber)(this.nextReqId++),\n        sessionId: this.sessionId,\n        event: event,\n        data: data,\n        callWebhook: callWebhook\n      });\n      return this.onceLinked$.pipe((0, operators_1.flatMap)(function (_) {\n        return _this3.makeRequest(message);\n      }), (0, operators_1.map)(function (res) {\n        if ((0, ServerMessage_1.isServerMessageFail)(res)) {\n          throw new Error(res.error || \"failed to publish event\");\n        }\n        return res.eventId;\n      }));\n    }\n  }, {\n    key: \"sendData\",\n    value: function sendData(message) {\n      this.ws.sendData(JSON.stringify(message));\n    }\n  }, {\n    key: \"updateLastHeartbeat\",\n    value: function updateLastHeartbeat() {\n      this.lastHeartbeatResponse = Date.now();\n    }\n  }, {\n    key: \"heartbeat\",\n    value: function heartbeat() {\n      if (Date.now() - this.lastHeartbeatResponse > HEARTBEAT_INTERVAL * 2) {\n        this.ws.disconnect();\n        return;\n      }\n      try {\n        this.ws.sendData(\"h\");\n      } catch (_a) {}\n    }\n  }, {\n    key: \"makeRequest\",\n    value: function makeRequest(message) {\n      var timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : REQUEST_TIMEOUT;\n      var reqId = message.id;\n      try {\n        this.sendData(message);\n      } catch (err) {\n        return (0, rxjs_1.throwError)(err);\n      }\n      // await server message with corresponding id\n      return this.ws.incomingJSONData$.pipe((0, operators_1.timeoutWith)(timeout, (0, rxjs_1.throwError)(new Error(\"request \".concat(reqId, \" timed out\")))), (0, operators_1.filter)(function (m) {\n        return m.id === reqId;\n      }), (0, operators_1.take)(1));\n    }\n  }, {\n    key: \"authenticate\",\n    value: function authenticate() {\n      var msg = (0, ClientMessage_1.ClientMessageHostSession)({\n        id: (0, types_1.IntNumber)(this.nextReqId++),\n        sessionId: this.sessionId,\n        sessionKey: this.sessionKey\n      });\n      return this.makeRequest(msg).pipe((0, operators_1.map)(function (res) {\n        if ((0, ServerMessage_1.isServerMessageFail)(res)) {\n          throw new Error(res.error || \"failed to authentcate\");\n        }\n      }));\n    }\n  }, {\n    key: \"sendIsLinked\",\n    value: function sendIsLinked() {\n      var msg = (0, ClientMessage_1.ClientMessageIsLinked)({\n        id: (0, types_1.IntNumber)(this.nextReqId++),\n        sessionId: this.sessionId\n      });\n      this.sendData(msg);\n    }\n  }, {\n    key: \"sendGetSessionConfig\",\n    value: function sendGetSessionConfig() {\n      var msg = (0, ClientMessage_1.ClientMessageGetSessionConfig)({\n        id: (0, types_1.IntNumber)(this.nextReqId++),\n        sessionId: this.sessionId\n      });\n      this.sendData(msg);\n    }\n  }]);\n  return WalletSDKConnection;\n}();\nexports.WalletSDKConnection = WalletSDKConnection;","map":{"version":3,"names":["Object","defineProperty","exports","value","WalletSDKConnection","rxjs_1","require","operators_1","Session_1","types_1","ClientMessage_1","DiagnosticLogger_1","RxWebSocket_1","ServerMessage_1","HEARTBEAT_INTERVAL","REQUEST_TIMEOUT","sessionId","sessionKey","linkAPIUrl","diagnostic","WebSocketClass","WebSocket","subscriptions","Subscription","destroyed","lastHeartbeatResponse","nextReqId","IntNumber","connectedSubject","BehaviorSubject","linkedSubject","sessionConfigSubject","ReplaySubject","ws","RxWebSocket","add","connectionState$","pipe","tap","state","_a","log","EVENTS","CONNECTED_STATE_CHANGE","sessionIdHash","Session","hash","skip","filter","cs","ConnectionState","DISCONNECTED","delay","_","flatMap","connect","retry","subscribe","switchMap","iif","CONNECTED","authenticate","sendIsLinked","sendGetSessionConfig","map","of","distinctUntilChanged","catchError","connected","next","timer","i","updateLastHeartbeat","heartbeat","incomingData$","m","incomingJSONData$","includes","type","msg","LINKED","linked","onlineGuests","SESSION_CONFIG_RECEIVED","metadata_keys","metadata","keys","undefined","webhookId","webhookUrl","Error","STARTED_CONNECTING","unsubscribe","disconnect","asObservable","connected$","v","take","linked$","sme","eventId","event","data","key","message","ClientMessageSetSessionConfig","id","onceConnected$","makeRequest","res","isServerMessageFail","error","callWebhook","ClientMessagePublishEvent","onceLinked$","sendData","JSON","stringify","Date","now","timeout","reqId","err","throwError","timeoutWith","ClientMessageHostSession","ClientMessageIsLinked","ClientMessageGetSessionConfig"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/@coinbase/wallet-sdk/dist/connection/WalletSDKConnection.js"],"sourcesContent":["\"use strict\";\n// Copyright (c) 2018-2022 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WalletSDKConnection = void 0;\nconst rxjs_1 = require(\"rxjs\");\nconst operators_1 = require(\"rxjs/operators\");\nconst Session_1 = require(\"../relay/Session\");\nconst types_1 = require(\"../types\");\nconst ClientMessage_1 = require(\"./ClientMessage\");\nconst DiagnosticLogger_1 = require(\"./DiagnosticLogger\");\nconst RxWebSocket_1 = require(\"./RxWebSocket\");\nconst ServerMessage_1 = require(\"./ServerMessage\");\nconst HEARTBEAT_INTERVAL = 10000;\nconst REQUEST_TIMEOUT = 60000;\n/**\n * Coinbase Wallet Connection\n */\nclass WalletSDKConnection {\n    /**\n     * Constructor\n     * @param sessionId Session ID\n     * @param sessionKey Session Key\n     * @param linkAPIUrl Coinbase Wallet link server URL\n     * @param [WebSocketClass] Custom WebSocket implementation\n     */\n    constructor(sessionId, sessionKey, linkAPIUrl, diagnostic, WebSocketClass = WebSocket) {\n        this.sessionId = sessionId;\n        this.sessionKey = sessionKey;\n        this.diagnostic = diagnostic;\n        this.subscriptions = new rxjs_1.Subscription();\n        this.destroyed = false;\n        this.lastHeartbeatResponse = 0;\n        this.nextReqId = (0, types_1.IntNumber)(1);\n        this.connectedSubject = new rxjs_1.BehaviorSubject(false);\n        this.linkedSubject = new rxjs_1.BehaviorSubject(false);\n        this.sessionConfigSubject = new rxjs_1.ReplaySubject(1);\n        const ws = new RxWebSocket_1.RxWebSocket(linkAPIUrl + \"/rpc\", WebSocketClass);\n        this.ws = ws;\n        // attempt to reconnect every 5 seconds when disconnected\n        this.subscriptions.add(ws.connectionState$\n            .pipe((0, operators_1.tap)(state => {\n            var _a;\n            return (_a = this.diagnostic) === null || _a === void 0 ? void 0 : _a.log(DiagnosticLogger_1.EVENTS.CONNECTED_STATE_CHANGE, {\n                state,\n                sessionIdHash: Session_1.Session.hash(sessionId),\n            });\n        }), \n        // ignore initial DISCONNECTED state\n        (0, operators_1.skip)(1), \n        // if DISCONNECTED and not destroyed\n        (0, operators_1.filter)(cs => cs === RxWebSocket_1.ConnectionState.DISCONNECTED && !this.destroyed), \n        // wait 5 seconds\n        (0, operators_1.delay)(5000), \n        // check whether it's destroyed again\n        (0, operators_1.filter)(_ => !this.destroyed), \n        // reconnect\n        (0, operators_1.flatMap)(_ => ws.connect()), (0, operators_1.retry)())\n            .subscribe());\n        // perform authentication upon connection\n        this.subscriptions.add(ws.connectionState$\n            .pipe(\n        // ignore initial DISCONNECTED and CONNECTING states\n        (0, operators_1.skip)(2), (0, operators_1.switchMap)(cs => (0, rxjs_1.iif)(() => cs === RxWebSocket_1.ConnectionState.CONNECTED, \n        // if CONNECTED, authenticate, and then check link status\n        this.authenticate().pipe((0, operators_1.tap)(_ => this.sendIsLinked()), (0, operators_1.tap)(_ => this.sendGetSessionConfig()), (0, operators_1.map)(_ => true)), \n        // if not CONNECTED, emit false immediately\n        (0, rxjs_1.of)(false))), (0, operators_1.distinctUntilChanged)(), (0, operators_1.catchError)(_ => (0, rxjs_1.of)(false)))\n            .subscribe(connected => this.connectedSubject.next(connected)));\n        // send heartbeat every n seconds while connected\n        this.subscriptions.add(ws.connectionState$\n            .pipe(\n        // ignore initial DISCONNECTED state\n        (0, operators_1.skip)(1), (0, operators_1.switchMap)(cs => (0, rxjs_1.iif)(() => cs === RxWebSocket_1.ConnectionState.CONNECTED, \n        // if CONNECTED, start the heartbeat timer\n        (0, rxjs_1.timer)(0, HEARTBEAT_INTERVAL))))\n            .subscribe(i => \n        // first timer event updates lastHeartbeat timestamp\n        // subsequent calls send heartbeat message\n        i === 0 ? this.updateLastHeartbeat() : this.heartbeat()));\n        // handle server's heartbeat responses\n        this.subscriptions.add(ws.incomingData$\n            .pipe((0, operators_1.filter)(m => m === \"h\"))\n            .subscribe(_ => this.updateLastHeartbeat()));\n        // handle link status updates\n        this.subscriptions.add(ws.incomingJSONData$\n            .pipe((0, operators_1.filter)(m => [\"IsLinkedOK\", \"Linked\"].includes(m.type)))\n            .subscribe(m => {\n            var _a;\n            const msg = m;\n            (_a = this.diagnostic) === null || _a === void 0 ? void 0 : _a.log(DiagnosticLogger_1.EVENTS.LINKED, {\n                sessionIdHash: Session_1.Session.hash(sessionId),\n                linked: msg.linked,\n                type: m.type,\n                onlineGuests: msg.onlineGuests,\n            });\n            this.linkedSubject.next(msg.linked || msg.onlineGuests > 0);\n        }));\n        // handle session config updates\n        this.subscriptions.add(ws.incomingJSONData$\n            .pipe((0, operators_1.filter)(m => [\"GetSessionConfigOK\", \"SessionConfigUpdated\"].includes(m.type)))\n            .subscribe(m => {\n            var _a;\n            const msg = m;\n            (_a = this.diagnostic) === null || _a === void 0 ? void 0 : _a.log(DiagnosticLogger_1.EVENTS.SESSION_CONFIG_RECEIVED, {\n                sessionIdHash: Session_1.Session.hash(sessionId),\n                metadata_keys: msg && msg.metadata ? Object.keys(msg.metadata) : undefined,\n            });\n            this.sessionConfigSubject.next({\n                webhookId: msg.webhookId,\n                webhookUrl: msg.webhookUrl,\n                metadata: msg.metadata,\n            });\n        }));\n    }\n    /**\n     * Make a connection to the server\n     */\n    connect() {\n        var _a;\n        if (this.destroyed) {\n            throw new Error(\"instance is destroyed\");\n        }\n        (_a = this.diagnostic) === null || _a === void 0 ? void 0 : _a.log(DiagnosticLogger_1.EVENTS.STARTED_CONNECTING, {\n            sessionIdHash: Session_1.Session.hash(this.sessionId),\n        });\n        this.ws.connect().subscribe();\n    }\n    /**\n     * Terminate connection, and mark as destroyed. To reconnect, create a new\n     * instance of WalletSDKConnection\n     */\n    destroy() {\n        var _a;\n        this.subscriptions.unsubscribe();\n        this.ws.disconnect();\n        (_a = this.diagnostic) === null || _a === void 0 ? void 0 : _a.log(DiagnosticLogger_1.EVENTS.DISCONNECTED, {\n            sessionIdHash: Session_1.Session.hash(this.sessionId),\n        });\n        this.destroyed = true;\n    }\n    get isDestroyed() {\n        return this.destroyed;\n    }\n    /**\n     * Emit true if connected and authenticated, else false\n     * @returns an Observable\n     */\n    get connected$() {\n        return this.connectedSubject.asObservable();\n    }\n    /**\n     * Emit once connected\n     * @returns an Observable\n     */\n    get onceConnected$() {\n        return this.connected$.pipe((0, operators_1.filter)(v => v), (0, operators_1.take)(1), (0, operators_1.map)(() => void 0));\n    }\n    /**\n     * Emit true if linked (a guest has joined before)\n     * @returns an Observable\n     */\n    get linked$() {\n        return this.linkedSubject.asObservable();\n    }\n    /**\n     * Emit once when linked\n     * @returns an Observable\n     */\n    get onceLinked$() {\n        return this.linked$.pipe((0, operators_1.filter)(v => v), (0, operators_1.take)(1), (0, operators_1.map)(() => void 0));\n    }\n    /**\n     * Emit current session config if available, and subsequent updates\n     * @returns an Observable for the session config\n     */\n    get sessionConfig$() {\n        return this.sessionConfigSubject.asObservable();\n    }\n    /**\n     * Emit incoming Event messages\n     * @returns an Observable for the messages\n     */\n    get incomingEvent$() {\n        return this.ws.incomingJSONData$.pipe((0, operators_1.filter)(m => {\n            if (m.type !== \"Event\") {\n                return false;\n            }\n            const sme = m;\n            return (typeof sme.sessionId === \"string\" &&\n                typeof sme.eventId === \"string\" &&\n                typeof sme.event === \"string\" &&\n                typeof sme.data === \"string\");\n        }), (0, operators_1.map)(m => m));\n    }\n    /**\n     * Set session metadata in SessionConfig object\n     * @param key\n     * @param value\n     * @returns an Observable that completes when successful\n     */\n    setSessionMetadata(key, value) {\n        const message = (0, ClientMessage_1.ClientMessageSetSessionConfig)({\n            id: (0, types_1.IntNumber)(this.nextReqId++),\n            sessionId: this.sessionId,\n            metadata: { [key]: value },\n        });\n        return this.onceConnected$.pipe((0, operators_1.flatMap)(_ => this.makeRequest(message)), (0, operators_1.map)(res => {\n            if ((0, ServerMessage_1.isServerMessageFail)(res)) {\n                throw new Error(res.error || \"failed to set session metadata\");\n            }\n        }));\n    }\n    /**\n     * Publish an event and emit event ID when successful\n     * @param event event name\n     * @param data event data\n     * @param callWebhook whether the webhook should be invoked\n     * @returns an Observable that emits event ID when successful\n     */\n    publishEvent(event, data, callWebhook = false) {\n        const message = (0, ClientMessage_1.ClientMessagePublishEvent)({\n            id: (0, types_1.IntNumber)(this.nextReqId++),\n            sessionId: this.sessionId,\n            event,\n            data,\n            callWebhook,\n        });\n        return this.onceLinked$.pipe((0, operators_1.flatMap)(_ => this.makeRequest(message)), (0, operators_1.map)(res => {\n            if ((0, ServerMessage_1.isServerMessageFail)(res)) {\n                throw new Error(res.error || \"failed to publish event\");\n            }\n            return res.eventId;\n        }));\n    }\n    sendData(message) {\n        this.ws.sendData(JSON.stringify(message));\n    }\n    updateLastHeartbeat() {\n        this.lastHeartbeatResponse = Date.now();\n    }\n    heartbeat() {\n        if (Date.now() - this.lastHeartbeatResponse > HEARTBEAT_INTERVAL * 2) {\n            this.ws.disconnect();\n            return;\n        }\n        try {\n            this.ws.sendData(\"h\");\n        }\n        catch (_a) { }\n    }\n    makeRequest(message, timeout = REQUEST_TIMEOUT) {\n        const reqId = message.id;\n        try {\n            this.sendData(message);\n        }\n        catch (err) {\n            return (0, rxjs_1.throwError)(err);\n        }\n        // await server message with corresponding id\n        return this.ws.incomingJSONData$.pipe((0, operators_1.timeoutWith)(timeout, (0, rxjs_1.throwError)(new Error(`request ${reqId} timed out`))), (0, operators_1.filter)(m => m.id === reqId), (0, operators_1.take)(1));\n    }\n    authenticate() {\n        const msg = (0, ClientMessage_1.ClientMessageHostSession)({\n            id: (0, types_1.IntNumber)(this.nextReqId++),\n            sessionId: this.sessionId,\n            sessionKey: this.sessionKey,\n        });\n        return this.makeRequest(msg).pipe((0, operators_1.map)(res => {\n            if ((0, ServerMessage_1.isServerMessageFail)(res)) {\n                throw new Error(res.error || \"failed to authentcate\");\n            }\n        }));\n    }\n    sendIsLinked() {\n        const msg = (0, ClientMessage_1.ClientMessageIsLinked)({\n            id: (0, types_1.IntNumber)(this.nextReqId++),\n            sessionId: this.sessionId,\n        });\n        this.sendData(msg);\n    }\n    sendGetSessionConfig() {\n        const msg = (0, ClientMessage_1.ClientMessageGetSessionConfig)({\n            id: (0, types_1.IntNumber)(this.nextReqId++),\n            sessionId: this.sessionId,\n        });\n        this.sendData(msg);\n    }\n}\nexports.WalletSDKConnection = WalletSDKConnection;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}