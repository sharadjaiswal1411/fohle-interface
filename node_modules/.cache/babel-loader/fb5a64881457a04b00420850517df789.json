{"ast":null,"code":"import _objectSpread from\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{tickToPrice}from'@uniswap/v3-sdk';import JSBI from'jsbi';var PRICE_FIXED_DIGITS=8;// Computes the numSurroundingTicks above or below the active tick.\nexport default function computeSurroundingTicks(token0,token1,activeTickProcessed,sortedTickData,pivot,ascending){var previousTickProcessed=_objectSpread({},activeTickProcessed);// Iterate outwards (either up or down depending on direction) from the active tick,\n// building active liquidity for every tick.\nvar processedTicks=[];for(var i=pivot+(ascending?1:-1);ascending?i<sortedTickData.length:i>=0;ascending?i++:i--){var tick=Number(sortedTickData[i].tick);var currentTickProcessed={liquidityActive:previousTickProcessed.liquidityActive,tick:tick,liquidityNet:JSBI.BigInt(sortedTickData[i].liquidityNet),price0:tickToPrice(token0,token1,tick).toFixed(PRICE_FIXED_DIGITS)};// Update the active liquidity.\n// If we are iterating ascending and we found an initialized tick we immediately apply\n// it to the current processed tick we are building.\n// If we are iterating descending, we don't want to apply the net liquidity until the following tick.\nif(ascending){currentTickProcessed.liquidityActive=JSBI.add(previousTickProcessed.liquidityActive,JSBI.BigInt(sortedTickData[i].liquidityNet));}else if(!ascending&&JSBI.notEqual(previousTickProcessed.liquidityNet,JSBI.BigInt(0))){// We are iterating descending, so look at the previous tick and apply any net liquidity.\ncurrentTickProcessed.liquidityActive=JSBI.subtract(previousTickProcessed.liquidityActive,previousTickProcessed.liquidityNet);}processedTicks.push(currentTickProcessed);previousTickProcessed=currentTickProcessed;}if(!ascending){processedTicks=processedTicks.reverse();}return processedTicks;}","map":{"version":3,"names":["tickToPrice","JSBI","PRICE_FIXED_DIGITS","computeSurroundingTicks","token0","token1","activeTickProcessed","sortedTickData","pivot","ascending","previousTickProcessed","processedTicks","i","length","tick","Number","currentTickProcessed","liquidityActive","liquidityNet","BigInt","price0","toFixed","add","notEqual","subtract","push","reverse"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/utils/computeSurroundingTicks.ts"],"sourcesContent":["import { Token } from '@uniswap/sdk-core'\nimport { tickToPrice } from '@uniswap/v3-sdk'\nimport { TickProcessed } from 'hooks/usePoolTickData'\nimport JSBI from 'jsbi'\n\nimport { Ticks } from '../graphql/thegraph/AllV3TicksQuery'\n\nconst PRICE_FIXED_DIGITS = 8\n\n// Computes the numSurroundingTicks above or below the active tick.\nexport default function computeSurroundingTicks(\n  token0: Token,\n  token1: Token,\n  activeTickProcessed: TickProcessed,\n  sortedTickData: Ticks,\n  pivot: number,\n  ascending: boolean\n): TickProcessed[] {\n  let previousTickProcessed: TickProcessed = {\n    ...activeTickProcessed,\n  }\n  // Iterate outwards (either up or down depending on direction) from the active tick,\n  // building active liquidity for every tick.\n  let processedTicks: TickProcessed[] = []\n  for (let i = pivot + (ascending ? 1 : -1); ascending ? i < sortedTickData.length : i >= 0; ascending ? i++ : i--) {\n    const tick = Number(sortedTickData[i].tick)\n    const currentTickProcessed: TickProcessed = {\n      liquidityActive: previousTickProcessed.liquidityActive,\n      tick,\n      liquidityNet: JSBI.BigInt(sortedTickData[i].liquidityNet),\n      price0: tickToPrice(token0, token1, tick).toFixed(PRICE_FIXED_DIGITS),\n    }\n\n    // Update the active liquidity.\n    // If we are iterating ascending and we found an initialized tick we immediately apply\n    // it to the current processed tick we are building.\n    // If we are iterating descending, we don't want to apply the net liquidity until the following tick.\n    if (ascending) {\n      currentTickProcessed.liquidityActive = JSBI.add(\n        previousTickProcessed.liquidityActive,\n        JSBI.BigInt(sortedTickData[i].liquidityNet)\n      )\n    } else if (!ascending && JSBI.notEqual(previousTickProcessed.liquidityNet, JSBI.BigInt(0))) {\n      // We are iterating descending, so look at the previous tick and apply any net liquidity.\n      currentTickProcessed.liquidityActive = JSBI.subtract(\n        previousTickProcessed.liquidityActive,\n        previousTickProcessed.liquidityNet\n      )\n    }\n\n    processedTicks.push(currentTickProcessed)\n    previousTickProcessed = currentTickProcessed\n  }\n\n  if (!ascending) {\n    processedTicks = processedTicks.reverse()\n  }\n\n  return processedTicks\n}\n"],"mappings":"2KACA,OAASA,WAAW,KAAQ,iBAAiB,CAE7C,MAAOC,KAAI,KAAM,MAAM,CAIvB,GAAMC,mBAAkB,CAAG,CAAC,CAE5B;AACA,cAAe,SAASC,wBAAuB,CAC7CC,MAAa,CACbC,MAAa,CACbC,mBAAkC,CAClCC,cAAqB,CACrBC,KAAa,CACbC,SAAkB,CACD,CACjB,GAAIC,sBAAoC,kBACnCJ,mBAAmB,CACvB,CACD;AACA;AACA,GAAIK,eAA+B,CAAG,EAAE,CACxC,IAAK,GAAIC,EAAC,CAAGJ,KAAK,EAAIC,SAAS,CAAG,CAAC,CAAG,CAAC,CAAC,CAAC,CAAEA,SAAS,CAAGG,CAAC,CAAGL,cAAc,CAACM,MAAM,CAAGD,CAAC,EAAI,CAAC,CAAEH,SAAS,CAAGG,CAAC,EAAE,CAAGA,CAAC,EAAE,CAAE,CAChH,GAAME,KAAI,CAAGC,MAAM,CAACR,cAAc,CAACK,CAAC,CAAC,CAACE,IAAI,CAAC,CAC3C,GAAME,qBAAmC,CAAG,CAC1CC,eAAe,CAAEP,qBAAqB,CAACO,eAAe,CACtDH,IAAI,CAAJA,IAAI,CACJI,YAAY,CAAEjB,IAAI,CAACkB,MAAM,CAACZ,cAAc,CAACK,CAAC,CAAC,CAACM,YAAY,CAAC,CACzDE,MAAM,CAAEpB,WAAW,CAACI,MAAM,CAAEC,MAAM,CAAES,IAAI,CAAC,CAACO,OAAO,CAACnB,kBAAkB,CACtE,CAAC,CAED;AACA;AACA;AACA;AACA,GAAIO,SAAS,CAAE,CACbO,oBAAoB,CAACC,eAAe,CAAGhB,IAAI,CAACqB,GAAG,CAC7CZ,qBAAqB,CAACO,eAAe,CACrChB,IAAI,CAACkB,MAAM,CAACZ,cAAc,CAACK,CAAC,CAAC,CAACM,YAAY,CAAC,CAC5C,CACH,CAAC,IAAM,IAAI,CAACT,SAAS,EAAIR,IAAI,CAACsB,QAAQ,CAACb,qBAAqB,CAACQ,YAAY,CAAEjB,IAAI,CAACkB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAE,CAC1F;AACAH,oBAAoB,CAACC,eAAe,CAAGhB,IAAI,CAACuB,QAAQ,CAClDd,qBAAqB,CAACO,eAAe,CACrCP,qBAAqB,CAACQ,YAAY,CACnC,CACH,CAEAP,cAAc,CAACc,IAAI,CAACT,oBAAoB,CAAC,CACzCN,qBAAqB,CAAGM,oBAAoB,CAC9C,CAEA,GAAI,CAACP,SAAS,CAAE,CACdE,cAAc,CAAGA,cAAc,CAACe,OAAO,EAAE,CAC3C,CAEA,MAAOf,eAAc,CACvB"},"metadata":{},"sourceType":"module"}