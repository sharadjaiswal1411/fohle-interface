{"ast":null,"code":"/**\n * List of all the networks supported by the Thera ECOSYSTEM\n */\n// export enum SupportedChainId {\n//   MAINNET = 1,\n//   ROPSTEN = 3,\n//   RINKEBY = 4,\n//   GOERLI = 5,\n//   KOVAN = 42,\n\n//   ARBITRUM_ONE = 42161,\n//   ARBITRUM_RINKEBY = 421611,\n\n//   OPTIMISM = 10,\n//   OPTIMISM_GOERLI = 420,\n\n//   POLYGON = 137,\n//   POLYGON_MUMBAI = 80001,\n\n//   OPTIMISTIC_KOVAN = 69,\n\n//   CELO = 42220,\n//   CELO_ALFAJORES = 44787,\n// }\n\nexport let SupportedChainId;\n\n// export const CHAIN_IDS_TO_NAMES = {\n//   [SupportedChainId.MAINNET]: 'mainnet',\n//   [SupportedChainId.ROPSTEN]: 'ropsten',\n//   [SupportedChainId.RINKEBY]: 'rinkeby',\n//   [SupportedChainId.GOERLI]: 'goerli',\n//   [SupportedChainId.KOVAN]: 'kovan',\n//   [SupportedChainId.POLYGON]: 'polygon',\n//   [SupportedChainId.POLYGON_MUMBAI]: 'polygon_mumbai',\n//   [SupportedChainId.CELO]: 'celo',\n//   [SupportedChainId.CELO_ALFAJORES]: 'celo_alfajores',\n//   [SupportedChainId.ARBITRUM_ONE]: 'arbitrum',\n//   [SupportedChainId.ARBITRUM_RINKEBY]: 'arbitrum_rinkeby',\n//   [SupportedChainId.OPTIMISM]: 'optimism',\n//   [SupportedChainId.OPTIMISM_GOERLI]: 'optimism_goerli',\n//   [SupportedChainId.OPTIMISTIC_KOVAN]: 'optimism_kovan',\n// }\n(function (SupportedChainId) {\n  SupportedChainId[SupportedChainId[\"POLYGON\"] = 137] = \"POLYGON\";\n  SupportedChainId[SupportedChainId[\"POLYGON_MUMBAI\"] = 80001] = \"POLYGON_MUMBAI\";\n})(SupportedChainId || (SupportedChainId = {}));\nexport const CHAIN_IDS_TO_NAMES = {\n  [SupportedChainId.POLYGON]: 'polygon',\n  [SupportedChainId.POLYGON_MUMBAI]: 'polygon_mumbai'\n};\n\n/**\n * Array of all the supported chain IDs\n */\nexport const ALL_SUPPORTED_CHAIN_IDS = Object.values(SupportedChainId).filter(id => typeof id === 'number');\nexport function isSupportedChain(chainId) {\n  return !!chainId && !!SupportedChainId[chainId];\n}\n\n// export const SUPPORTED_GAS_ESTIMATE_CHAIN_IDS = [\n//   SupportedChainId.MAINNET,\n//   SupportedChainId.POLYGON,\n//   SupportedChainId.CELO,\n//   SupportedChainId.OPTIMISM,\n//   SupportedChainId.ARBITRUM_ONE,\n// ]\n\nexport const SUPPORTED_GAS_ESTIMATE_CHAIN_IDS = [SupportedChainId.POLYGON];\n\n/**\n * Unsupported networks for V2 pool behavior.\n */\nexport const UNSUPPORTED_V2POOL_CHAIN_IDS = [SupportedChainId.POLYGON, SupportedChainId.OPTIMISM, SupportedChainId.ARBITRUM_ONE];\n\n// export const TESTNET_CHAIN_IDS = [\n//   SupportedChainId.ROPSTEN,\n//   SupportedChainId.RINKEBY,\n//   SupportedChainId.GOERLI,\n//   SupportedChainId.KOVAN,\n//   SupportedChainId.POLYGON_MUMBAI,\n//   SupportedChainId.ARBITRUM_RINKEBY,\n//   SupportedChainId.OPTIMISM_GOERLI,\n// ] as const\n\nexport const TESTNET_CHAIN_IDS = [SupportedChainId.POLYGON_MUMBAI];\n/**\n * All the chain IDs that are running the Ethereum protocol.\n */\n// export const L1_CHAIN_IDS = [\n//   SupportedChainId.MAINNET,\n//   SupportedChainId.ROPSTEN,\n//   SupportedChainId.RINKEBY,\n//   SupportedChainId.GOERLI,\n//   SupportedChainId.KOVAN,\n//   SupportedChainId.POLYGON,\n//   SupportedChainId.POLYGON_MUMBAI,\n//   SupportedChainId.CELO,\n//   SupportedChainId.CELO_ALFAJORES,\n// ] as const\n\nexport const L1_CHAIN_IDS = [SupportedChainId.POLYGON, SupportedChainId.POLYGON_MUMBAI];\n/**\n * Controls some L2 specific behavior, e.g. slippage tolerance, special UI behavior.\n * The expectation is that all of these networks have immediate transaction confirmation.\n */\n// export const L2_CHAIN_IDS = [\n//   SupportedChainId.ARBITRUM_ONE,\n//   SupportedChainId.ARBITRUM_RINKEBY,\n//   SupportedChainId.OPTIMISM,\n//   SupportedChainId.OPTIMISM_GOERLI,\n// ] as const\n\nexport const L2_CHAIN_IDS = [];","map":{"version":3,"names":["SupportedChainId","CHAIN_IDS_TO_NAMES","POLYGON","POLYGON_MUMBAI","ALL_SUPPORTED_CHAIN_IDS","Object","values","filter","id","isSupportedChain","chainId","SUPPORTED_GAS_ESTIMATE_CHAIN_IDS","UNSUPPORTED_V2POOL_CHAIN_IDS","OPTIMISM","ARBITRUM_ONE","TESTNET_CHAIN_IDS","L1_CHAIN_IDS","L2_CHAIN_IDS"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/constants/chains.ts"],"sourcesContent":["/**\n * List of all the networks supported by the Thera ECOSYSTEM\n */\n// export enum SupportedChainId {\n//   MAINNET = 1,\n//   ROPSTEN = 3,\n//   RINKEBY = 4,\n//   GOERLI = 5,\n//   KOVAN = 42,\n\n//   ARBITRUM_ONE = 42161,\n//   ARBITRUM_RINKEBY = 421611,\n\n//   OPTIMISM = 10,\n//   OPTIMISM_GOERLI = 420,\n\n//   POLYGON = 137,\n//   POLYGON_MUMBAI = 80001,\n\n//   OPTIMISTIC_KOVAN = 69,\n\n//   CELO = 42220,\n//   CELO_ALFAJORES = 44787,\n// }\n\n\nexport enum SupportedChainId {\n  POLYGON = 137,\n  POLYGON_MUMBAI = 80001,\n}\n\n// export const CHAIN_IDS_TO_NAMES = {\n//   [SupportedChainId.MAINNET]: 'mainnet',\n//   [SupportedChainId.ROPSTEN]: 'ropsten',\n//   [SupportedChainId.RINKEBY]: 'rinkeby',\n//   [SupportedChainId.GOERLI]: 'goerli',\n//   [SupportedChainId.KOVAN]: 'kovan',\n//   [SupportedChainId.POLYGON]: 'polygon',\n//   [SupportedChainId.POLYGON_MUMBAI]: 'polygon_mumbai',\n//   [SupportedChainId.CELO]: 'celo',\n//   [SupportedChainId.CELO_ALFAJORES]: 'celo_alfajores',\n//   [SupportedChainId.ARBITRUM_ONE]: 'arbitrum',\n//   [SupportedChainId.ARBITRUM_RINKEBY]: 'arbitrum_rinkeby',\n//   [SupportedChainId.OPTIMISM]: 'optimism',\n//   [SupportedChainId.OPTIMISM_GOERLI]: 'optimism_goerli',\n//   [SupportedChainId.OPTIMISTIC_KOVAN]: 'optimism_kovan',\n// }\n\n\nexport const CHAIN_IDS_TO_NAMES = {\n  [SupportedChainId.POLYGON]: 'polygon',\n  [SupportedChainId.POLYGON_MUMBAI]: 'polygon_mumbai',\n}\n\n/**\n * Array of all the supported chain IDs\n */\nexport const ALL_SUPPORTED_CHAIN_IDS: SupportedChainId[] = Object.values(SupportedChainId).filter(\n  (id) => typeof id === 'number'\n) as SupportedChainId[]\n\nexport function isSupportedChain(chainId: number | null | undefined): chainId is SupportedChainId {\n  return !!chainId && !!SupportedChainId[chainId]\n}\n\n// export const SUPPORTED_GAS_ESTIMATE_CHAIN_IDS = [\n//   SupportedChainId.MAINNET,\n//   SupportedChainId.POLYGON,\n//   SupportedChainId.CELO,\n//   SupportedChainId.OPTIMISM,\n//   SupportedChainId.ARBITRUM_ONE,\n// ]\n\nexport const SUPPORTED_GAS_ESTIMATE_CHAIN_IDS = [\n  SupportedChainId.POLYGON,\n]\n\n/**\n * Unsupported networks for V2 pool behavior.\n */\nexport const UNSUPPORTED_V2POOL_CHAIN_IDS = [\n  SupportedChainId.POLYGON,\n  SupportedChainId.OPTIMISM,\n  SupportedChainId.ARBITRUM_ONE,\n]\n\n// export const TESTNET_CHAIN_IDS = [\n//   SupportedChainId.ROPSTEN,\n//   SupportedChainId.RINKEBY,\n//   SupportedChainId.GOERLI,\n//   SupportedChainId.KOVAN,\n//   SupportedChainId.POLYGON_MUMBAI,\n//   SupportedChainId.ARBITRUM_RINKEBY,\n//   SupportedChainId.OPTIMISM_GOERLI,\n// ] as const\n\n\nexport const TESTNET_CHAIN_IDS = [\n\n  SupportedChainId.POLYGON_MUMBAI,\n\n] as const\n\nexport type SupportedTestnetChainId = typeof TESTNET_CHAIN_IDS[number]\n\n/**\n * All the chain IDs that are running the Ethereum protocol.\n */\n// export const L1_CHAIN_IDS = [\n//   SupportedChainId.MAINNET,\n//   SupportedChainId.ROPSTEN,\n//   SupportedChainId.RINKEBY,\n//   SupportedChainId.GOERLI,\n//   SupportedChainId.KOVAN,\n//   SupportedChainId.POLYGON,\n//   SupportedChainId.POLYGON_MUMBAI,\n//   SupportedChainId.CELO,\n//   SupportedChainId.CELO_ALFAJORES,\n// ] as const\n\n\nexport const L1_CHAIN_IDS = [\n  SupportedChainId.POLYGON,\n  SupportedChainId.POLYGON_MUMBAI,\n] as const\n\nexport type SupportedL1ChainId = typeof L1_CHAIN_IDS[number]\n\n/**\n * Controls some L2 specific behavior, e.g. slippage tolerance, special UI behavior.\n * The expectation is that all of these networks have immediate transaction confirmation.\n */\n// export const L2_CHAIN_IDS = [\n//   SupportedChainId.ARBITRUM_ONE,\n//   SupportedChainId.ARBITRUM_RINKEBY,\n//   SupportedChainId.OPTIMISM,\n//   SupportedChainId.OPTIMISM_GOERLI,\n// ] as const\n\nexport const L2_CHAIN_IDS = [\n \n] as const\n\nexport type SupportedL2ChainId = typeof L2_CHAIN_IDS[number]\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAGA,WAAYA,gBAAgB;;AAK5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,WApBYA,gBAAgB;EAAhBA,gBAAgB,CAAhBA,gBAAgB;EAAhBA,gBAAgB,CAAhBA,gBAAgB;AAAA,GAAhBA,gBAAgB,KAAhBA,gBAAgB;AAuB5B,OAAO,MAAMC,kBAAkB,GAAG;EAChC,CAACD,gBAAgB,CAACE,OAAO,GAAG,SAAS;EACrC,CAACF,gBAAgB,CAACG,cAAc,GAAG;AACrC,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMC,uBAA2C,GAAGC,MAAM,CAACC,MAAM,CAACN,gBAAgB,CAAC,CAACO,MAAM,CAC9FC,EAAE,IAAK,OAAOA,EAAE,KAAK,QAAQ,CACT;AAEvB,OAAO,SAASC,gBAAgB,CAACC,OAAkC,EAA+B;EAChG,OAAO,CAAC,CAACA,OAAO,IAAI,CAAC,CAACV,gBAAgB,CAACU,OAAO,CAAC;AACjD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,gCAAgC,GAAG,CAC9CX,gBAAgB,CAACE,OAAO,CACzB;;AAED;AACA;AACA;AACA,OAAO,MAAMU,4BAA4B,GAAG,CAC1CZ,gBAAgB,CAACE,OAAO,EACxBF,gBAAgB,CAACa,QAAQ,EACzBb,gBAAgB,CAACc,YAAY,CAC9B;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,OAAO,MAAMC,iBAAiB,GAAG,CAE/Bf,gBAAgB,CAACG,cAAc,CAEvB;AAIV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,OAAO,MAAMa,YAAY,GAAG,CAC1BhB,gBAAgB,CAACE,OAAO,EACxBF,gBAAgB,CAACG,cAAc,CACvB;AAIV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMc,YAAY,GAAG,EAElB"},"metadata":{},"sourceType":"module"}