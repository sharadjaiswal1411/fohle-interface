{"ast":null,"code":"var _s = $RefreshSig$();\nimport { nanoid } from '@reduxjs/toolkit';\nimport { SupportedChainId } from 'constants/chains';\nimport { RPC_PROVIDERS } from 'constants/providers';\nimport getTokenList from 'lib/hooks/useTokenList/fetchTokenList';\nimport resolveENSContentHash from 'lib/utils/resolveENSContentHash';\nimport { useCallback } from 'react';\nimport { useAppDispatch } from 'state/hooks';\nimport { fetchTokenList } from '../state/lists/actions';\nexport function useFetchListCallback() {\n  _s();\n  const dispatch = useAppDispatch();\n\n  // note: prevent dispatch if using for list search or unsupported list\n  return useCallback(async function (listUrl) {\n    let sendDispatch = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let skipValidation = arguments.length > 2 ? arguments[2] : undefined;\n    const requestId = nanoid();\n    sendDispatch && dispatch(fetchTokenList.pending({\n      requestId,\n      url: listUrl\n    }));\n    return getTokenList(listUrl, ensName => resolveENSContentHash(ensName, RPC_PROVIDERS[SupportedChainId.MAINNET]), skipValidation).then(tokenList => {\n      sendDispatch && dispatch(fetchTokenList.fulfilled({\n        url: listUrl,\n        tokenList,\n        requestId\n      }));\n      return tokenList;\n    }).catch(error => {\n      console.debug(`Failed to get list at url ${listUrl}`, error);\n      sendDispatch && dispatch(fetchTokenList.rejected({\n        url: listUrl,\n        requestId,\n        errorMessage: error.message\n      }));\n      throw error;\n    });\n  }, [dispatch]);\n}\n_s(useFetchListCallback, \"OqBVLt6aN3sywE9xSMcloJ9SYsA=\", false, function () {\n  return [useAppDispatch];\n});","map":{"version":3,"names":["nanoid","SupportedChainId","RPC_PROVIDERS","getTokenList","resolveENSContentHash","useCallback","useAppDispatch","fetchTokenList","useFetchListCallback","dispatch","listUrl","sendDispatch","skipValidation","requestId","pending","url","ensName","MAINNET","then","tokenList","fulfilled","catch","error","console","debug","rejected","errorMessage","message"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/hooks/useFetchListCallback.ts"],"sourcesContent":["import { nanoid } from '@reduxjs/toolkit'\nimport { TokenList } from '@uniswap/token-lists'\nimport { SupportedChainId } from 'constants/chains'\nimport { RPC_PROVIDERS } from 'constants/providers'\nimport getTokenList from 'lib/hooks/useTokenList/fetchTokenList'\nimport resolveENSContentHash from 'lib/utils/resolveENSContentHash'\nimport { useCallback } from 'react'\nimport { useAppDispatch } from 'state/hooks'\n\nimport { fetchTokenList } from '../state/lists/actions'\n\nexport function useFetchListCallback(): (\n  listUrl: string,\n  sendDispatch?: boolean,\n  skipValidation?: boolean\n) => Promise<TokenList> {\n  const dispatch = useAppDispatch()\n\n  // note: prevent dispatch if using for list search or unsupported list\n  return useCallback(\n    async (listUrl: string, sendDispatch = true, skipValidation?: boolean) => {\n      const requestId = nanoid()\n      sendDispatch && dispatch(fetchTokenList.pending({ requestId, url: listUrl }))\n      return getTokenList(\n        listUrl,\n        (ensName: string) => resolveENSContentHash(ensName, RPC_PROVIDERS[SupportedChainId.MAINNET]),\n        skipValidation\n      )\n        .then((tokenList) => {\n          sendDispatch && dispatch(fetchTokenList.fulfilled({ url: listUrl, tokenList, requestId }))\n          return tokenList\n        })\n        .catch((error) => {\n          console.debug(`Failed to get list at url ${listUrl}`, error)\n          sendDispatch && dispatch(fetchTokenList.rejected({ url: listUrl, requestId, errorMessage: error.message }))\n          throw error\n        })\n    },\n    [dispatch]\n  )\n}\n"],"mappings":";AAAA,SAASA,MAAM,QAAQ,kBAAkB;AAEzC,SAASC,gBAAgB,QAAQ,kBAAkB;AACnD,SAASC,aAAa,QAAQ,qBAAqB;AACnD,OAAOC,YAAY,MAAM,uCAAuC;AAChE,OAAOC,qBAAqB,MAAM,iCAAiC;AACnE,SAASC,WAAW,QAAQ,OAAO;AACnC,SAASC,cAAc,QAAQ,aAAa;AAE5C,SAASC,cAAc,QAAQ,wBAAwB;AAEvD,OAAO,SAASC,oBAAoB,GAIZ;EAAA;EACtB,MAAMC,QAAQ,GAAGH,cAAc,EAAE;;EAEjC;EACA,OAAOD,WAAW,CAChB,gBAAOK,OAAe,EAAoD;IAAA,IAAlDC,YAAY,uEAAG,IAAI;IAAA,IAAEC,cAAwB;IACnE,MAAMC,SAAS,GAAGb,MAAM,EAAE;IAC1BW,YAAY,IAAIF,QAAQ,CAACF,cAAc,CAACO,OAAO,CAAC;MAAED,SAAS;MAAEE,GAAG,EAAEL;IAAQ,CAAC,CAAC,CAAC;IAC7E,OAAOP,YAAY,CACjBO,OAAO,EACNM,OAAe,IAAKZ,qBAAqB,CAACY,OAAO,EAAEd,aAAa,CAACD,gBAAgB,CAACgB,OAAO,CAAC,CAAC,EAC5FL,cAAc,CACf,CACEM,IAAI,CAAEC,SAAS,IAAK;MACnBR,YAAY,IAAIF,QAAQ,CAACF,cAAc,CAACa,SAAS,CAAC;QAAEL,GAAG,EAAEL,OAAO;QAAES,SAAS;QAAEN;MAAU,CAAC,CAAC,CAAC;MAC1F,OAAOM,SAAS;IAClB,CAAC,CAAC,CACDE,KAAK,CAAEC,KAAK,IAAK;MAChBC,OAAO,CAACC,KAAK,CAAE,6BAA4Bd,OAAQ,EAAC,EAAEY,KAAK,CAAC;MAC5DX,YAAY,IAAIF,QAAQ,CAACF,cAAc,CAACkB,QAAQ,CAAC;QAAEV,GAAG,EAAEL,OAAO;QAAEG,SAAS;QAAEa,YAAY,EAAEJ,KAAK,CAACK;MAAQ,CAAC,CAAC,CAAC;MAC3G,MAAML,KAAK;IACb,CAAC,CAAC;EACN,CAAC,EACD,CAACb,QAAQ,CAAC,CACX;AACH;AAAC,GA7BeD,oBAAoB;EAAA,QAKjBF,cAAc;AAAA"},"metadata":{},"sourceType":"module"}