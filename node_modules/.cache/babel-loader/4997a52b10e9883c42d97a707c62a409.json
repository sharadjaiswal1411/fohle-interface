{"ast":null,"code":"var _s = $RefreshSig$();\nimport { Token } from '@uniswap/sdk-core';\nimport { useWeb3React } from '@web3-react/core';\nimport { SOCKS_CONTROLLER_ADDRESSES } from 'constants/addresses';\nimport { SupportedChainId } from 'constants/chains';\nimport { useMemo } from 'react';\nimport { useTokenBalance } from 'state/connection/hooks';\n\n// technically a 721, not an ERC20, but suffices for our purposes\nconst SOCKS = new Token(SupportedChainId.MAINNET, SOCKS_CONTROLLER_ADDRESSES[SupportedChainId.MAINNET], 0);\nexport function useHasSocks() {\n  _s();\n  const {\n    account,\n    chainId\n  } = useWeb3React();\n  const balance = useTokenBalance(account !== null && account !== void 0 ? account : undefined, chainId === SupportedChainId.MAINNET ? SOCKS : undefined);\n  return useMemo(() => Boolean(balance === null || balance === void 0 ? void 0 : balance.greaterThan(0)), [balance]);\n}\n_s(useHasSocks, \"fJhzlsERazWKbrMnb7dUFRzlf5k=\", false, function () {\n  return [useWeb3React, useTokenBalance];\n});","map":{"version":3,"names":["Token","useWeb3React","SOCKS_CONTROLLER_ADDRESSES","SupportedChainId","useMemo","useTokenBalance","SOCKS","MAINNET","useHasSocks","account","chainId","balance","undefined","Boolean","greaterThan"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/hooks/useSocksBalance.ts"],"sourcesContent":["import { Token } from '@uniswap/sdk-core'\nimport { useWeb3React } from '@web3-react/core'\nimport { SOCKS_CONTROLLER_ADDRESSES } from 'constants/addresses'\nimport { SupportedChainId } from 'constants/chains'\nimport { useMemo } from 'react'\nimport { useTokenBalance } from 'state/connection/hooks'\n\n// technically a 721, not an ERC20, but suffices for our purposes\nconst SOCKS = new Token(SupportedChainId.MAINNET, SOCKS_CONTROLLER_ADDRESSES[SupportedChainId.MAINNET], 0)\n\nexport function useHasSocks(): boolean | undefined {\n  const { account, chainId } = useWeb3React()\n\n  const balance = useTokenBalance(account ?? undefined, chainId === SupportedChainId.MAINNET ? SOCKS : undefined)\n\n  return useMemo(() => Boolean(balance?.greaterThan(0)), [balance])\n}\n"],"mappings":";AAAA,SAASA,KAAK,QAAQ,mBAAmB;AACzC,SAASC,YAAY,QAAQ,kBAAkB;AAC/C,SAASC,0BAA0B,QAAQ,qBAAqB;AAChE,SAASC,gBAAgB,QAAQ,kBAAkB;AACnD,SAASC,OAAO,QAAQ,OAAO;AAC/B,SAASC,eAAe,QAAQ,wBAAwB;;AAExD;AACA,MAAMC,KAAK,GAAG,IAAIN,KAAK,CAACG,gBAAgB,CAACI,OAAO,EAAEL,0BAA0B,CAACC,gBAAgB,CAACI,OAAO,CAAC,EAAE,CAAC,CAAC;AAE1G,OAAO,SAASC,WAAW,GAAwB;EAAA;EACjD,MAAM;IAAEC,OAAO;IAAEC;EAAQ,CAAC,GAAGT,YAAY,EAAE;EAE3C,MAAMU,OAAO,GAAGN,eAAe,CAACI,OAAO,aAAPA,OAAO,cAAPA,OAAO,GAAIG,SAAS,EAAEF,OAAO,KAAKP,gBAAgB,CAACI,OAAO,GAAGD,KAAK,GAAGM,SAAS,CAAC;EAE/G,OAAOR,OAAO,CAAC,MAAMS,OAAO,CAACF,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEG,WAAW,CAAC,CAAC,CAAC,CAAC,EAAE,CAACH,OAAO,CAAC,CAAC;AACnE;AAAC,GANeH,WAAW;EAAA,QACIP,YAAY,EAEzBI,eAAe;AAAA"},"metadata":{},"sourceType":"module"}