{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { updateVersion } from '../global/actions';\nconst now = () => new Date().getTime();\nexport const initialState = {};\nconst transactionSlice = createSlice({\n  name: 'transactions',\n  initialState,\n  reducers: {\n    addTransaction(transactions, _ref) {\n      var _transactions$chainId, _transactions$chainId2;\n      let {\n        payload: {\n          chainId,\n          from,\n          hash,\n          info\n        }\n      } = _ref;\n      if ((_transactions$chainId = transactions[chainId]) === null || _transactions$chainId === void 0 ? void 0 : _transactions$chainId[hash]) {\n        throw Error('Attempted to add existing transaction.');\n      }\n      const txs = (_transactions$chainId2 = transactions[chainId]) !== null && _transactions$chainId2 !== void 0 ? _transactions$chainId2 : {};\n      txs[hash] = {\n        hash,\n        info,\n        from,\n        addedTime: now()\n      };\n      transactions[chainId] = txs;\n    },\n    clearAllTransactions(transactions, _ref2) {\n      let {\n        payload: {\n          chainId\n        }\n      } = _ref2;\n      if (!transactions[chainId]) return;\n      transactions[chainId] = {};\n    },\n    checkedTransaction(transactions, _ref3) {\n      var _transactions$chainId3;\n      let {\n        payload: {\n          chainId,\n          hash,\n          blockNumber\n        }\n      } = _ref3;\n      const tx = (_transactions$chainId3 = transactions[chainId]) === null || _transactions$chainId3 === void 0 ? void 0 : _transactions$chainId3[hash];\n      if (!tx) {\n        return;\n      }\n      if (!tx.lastCheckedBlockNumber) {\n        tx.lastCheckedBlockNumber = blockNumber;\n      } else {\n        tx.lastCheckedBlockNumber = Math.max(blockNumber, tx.lastCheckedBlockNumber);\n      }\n    },\n    finalizeTransaction(transactions, _ref4) {\n      var _transactions$chainId4;\n      let {\n        payload: {\n          hash,\n          chainId,\n          receipt\n        }\n      } = _ref4;\n      const tx = (_transactions$chainId4 = transactions[chainId]) === null || _transactions$chainId4 === void 0 ? void 0 : _transactions$chainId4[hash];\n      if (!tx) {\n        return;\n      }\n      tx.receipt = receipt;\n      tx.confirmedTime = now();\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(updateVersion, transactions => {\n      // in case there are any transactions in the store with the old format, remove them\n      Object.keys(transactions).forEach(chainId => {\n        const chainTransactions = transactions[chainId];\n        Object.keys(chainTransactions).forEach(hash => {\n          if (!('info' in chainTransactions[hash])) {\n            // clear old transactions that don't have the right format\n            delete chainTransactions[hash];\n          }\n        });\n      });\n    });\n  }\n});\nexport const {\n  addTransaction,\n  clearAllTransactions,\n  checkedTransaction,\n  finalizeTransaction\n} = transactionSlice.actions;\nexport default transactionSlice.reducer;","map":{"version":3,"names":["createSlice","updateVersion","now","Date","getTime","initialState","transactionSlice","name","reducers","addTransaction","transactions","payload","chainId","from","hash","info","Error","txs","addedTime","clearAllTransactions","checkedTransaction","blockNumber","tx","lastCheckedBlockNumber","Math","max","finalizeTransaction","receipt","confirmedTime","extraReducers","builder","addCase","Object","keys","forEach","chainTransactions","actions","reducer"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/state/transactions/reducer.ts"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\n\nimport { updateVersion } from '../global/actions'\nimport { TransactionDetails } from './types'\n\nconst now = () => new Date().getTime()\n\nexport interface TransactionState {\n  [chainId: number]: {\n    [txHash: string]: TransactionDetails\n  }\n}\n\nexport const initialState: TransactionState = {}\n\nconst transactionSlice = createSlice({\n  name: 'transactions',\n  initialState,\n  reducers: {\n    addTransaction(transactions, { payload: { chainId, from, hash, info } }) {\n      if (transactions[chainId]?.[hash]) {\n        throw Error('Attempted to add existing transaction.')\n      }\n      const txs = transactions[chainId] ?? {}\n      txs[hash] = { hash, info, from, addedTime: now() }\n      transactions[chainId] = txs\n    },\n    clearAllTransactions(transactions, { payload: { chainId } }) {\n      if (!transactions[chainId]) return\n      transactions[chainId] = {}\n    },\n    checkedTransaction(transactions, { payload: { chainId, hash, blockNumber } }) {\n      const tx = transactions[chainId]?.[hash]\n      if (!tx) {\n        return\n      }\n      if (!tx.lastCheckedBlockNumber) {\n        tx.lastCheckedBlockNumber = blockNumber\n      } else {\n        tx.lastCheckedBlockNumber = Math.max(blockNumber, tx.lastCheckedBlockNumber)\n      }\n    },\n    finalizeTransaction(transactions, { payload: { hash, chainId, receipt } }) {\n      const tx = transactions[chainId]?.[hash]\n      if (!tx) {\n        return\n      }\n      tx.receipt = receipt\n      tx.confirmedTime = now()\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(updateVersion, (transactions) => {\n      // in case there are any transactions in the store with the old format, remove them\n      Object.keys(transactions).forEach((chainId) => {\n        const chainTransactions = transactions[chainId as unknown as number]\n        Object.keys(chainTransactions).forEach((hash) => {\n          if (!('info' in chainTransactions[hash])) {\n            // clear old transactions that don't have the right format\n            delete chainTransactions[hash]\n          }\n        })\n      })\n    })\n  },\n})\n\nexport const { addTransaction, clearAllTransactions, checkedTransaction, finalizeTransaction } =\n  transactionSlice.actions\nexport default transactionSlice.reducer\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,SAASC,aAAa,QAAQ,mBAAmB;AAGjD,MAAMC,GAAG,GAAG,MAAM,IAAIC,IAAI,EAAE,CAACC,OAAO,EAAE;AAQtC,OAAO,MAAMC,YAA8B,GAAG,CAAC,CAAC;AAEhD,MAAMC,gBAAgB,GAAGN,WAAW,CAAC;EACnCO,IAAI,EAAE,cAAc;EACpBF,YAAY;EACZG,QAAQ,EAAE;IACRC,cAAc,CAACC,YAAY,QAA8C;MAAA;MAAA,IAA5C;QAAEC,OAAO,EAAE;UAAEC,OAAO;UAAEC,IAAI;UAAEC,IAAI;UAAEC;QAAK;MAAE,CAAC;MACrE,6BAAIL,YAAY,CAACE,OAAO,CAAC,0DAArB,sBAAwBE,IAAI,CAAC,EAAE;QACjC,MAAME,KAAK,CAAC,wCAAwC,CAAC;MACvD;MACA,MAAMC,GAAG,6BAAGP,YAAY,CAACE,OAAO,CAAC,2EAAI,CAAC,CAAC;MACvCK,GAAG,CAACH,IAAI,CAAC,GAAG;QAAEA,IAAI;QAAEC,IAAI;QAAEF,IAAI;QAAEK,SAAS,EAAEhB,GAAG;MAAG,CAAC;MAClDQ,YAAY,CAACE,OAAO,CAAC,GAAGK,GAAG;IAC7B,CAAC;IACDE,oBAAoB,CAACT,YAAY,SAA4B;MAAA,IAA1B;QAAEC,OAAO,EAAE;UAAEC;QAAQ;MAAE,CAAC;MACzD,IAAI,CAACF,YAAY,CAACE,OAAO,CAAC,EAAE;MAC5BF,YAAY,CAACE,OAAO,CAAC,GAAG,CAAC,CAAC;IAC5B,CAAC;IACDQ,kBAAkB,CAACV,YAAY,SAA+C;MAAA;MAAA,IAA7C;QAAEC,OAAO,EAAE;UAAEC,OAAO;UAAEE,IAAI;UAAEO;QAAY;MAAE,CAAC;MAC1E,MAAMC,EAAE,6BAAGZ,YAAY,CAACE,OAAO,CAAC,2DAArB,uBAAwBE,IAAI,CAAC;MACxC,IAAI,CAACQ,EAAE,EAAE;QACP;MACF;MACA,IAAI,CAACA,EAAE,CAACC,sBAAsB,EAAE;QAC9BD,EAAE,CAACC,sBAAsB,GAAGF,WAAW;MACzC,CAAC,MAAM;QACLC,EAAE,CAACC,sBAAsB,GAAGC,IAAI,CAACC,GAAG,CAACJ,WAAW,EAAEC,EAAE,CAACC,sBAAsB,CAAC;MAC9E;IACF,CAAC;IACDG,mBAAmB,CAAChB,YAAY,SAA2C;MAAA;MAAA,IAAzC;QAAEC,OAAO,EAAE;UAAEG,IAAI;UAAEF,OAAO;UAAEe;QAAQ;MAAE,CAAC;MACvE,MAAML,EAAE,6BAAGZ,YAAY,CAACE,OAAO,CAAC,2DAArB,uBAAwBE,IAAI,CAAC;MACxC,IAAI,CAACQ,EAAE,EAAE;QACP;MACF;MACAA,EAAE,CAACK,OAAO,GAAGA,OAAO;MACpBL,EAAE,CAACM,aAAa,GAAG1B,GAAG,EAAE;IAC1B;EACF,CAAC;EACD2B,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CAACC,OAAO,CAAC9B,aAAa,EAAGS,YAAY,IAAK;MAC/C;MACAsB,MAAM,CAACC,IAAI,CAACvB,YAAY,CAAC,CAACwB,OAAO,CAAEtB,OAAO,IAAK;QAC7C,MAAMuB,iBAAiB,GAAGzB,YAAY,CAACE,OAAO,CAAsB;QACpEoB,MAAM,CAACC,IAAI,CAACE,iBAAiB,CAAC,CAACD,OAAO,CAAEpB,IAAI,IAAK;UAC/C,IAAI,EAAE,MAAM,IAAIqB,iBAAiB,CAACrB,IAAI,CAAC,CAAC,EAAE;YACxC;YACA,OAAOqB,iBAAiB,CAACrB,IAAI,CAAC;UAChC;QACF,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEL,cAAc;EAAEU,oBAAoB;EAAEC,kBAAkB;EAAEM;AAAoB,CAAC,GAC5FpB,gBAAgB,CAAC8B,OAAO;AAC1B,eAAe9B,gBAAgB,CAAC+B,OAAO"},"metadata":{},"sourceType":"module"}