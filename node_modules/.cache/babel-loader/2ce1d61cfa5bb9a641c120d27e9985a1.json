{"ast":null,"code":"import { CurrencyAmount, Fraction, Percent } from '@uniswap/sdk-core';\nimport { Pair } from '@uniswap/v2-sdk';\nimport { FeeAmount } from '@uniswap/v3-sdk';\nimport JSBI from 'jsbi';\nimport { ALLOWED_PRICE_IMPACT_HIGH, ALLOWED_PRICE_IMPACT_LOW, ALLOWED_PRICE_IMPACT_MEDIUM, BLOCKED_PRICE_IMPACT_NON_EXPERT, ONE_HUNDRED_PERCENT, ZERO_PERCENT } from '../constants/misc';\nconst THIRTY_BIPS_FEE = new Percent(JSBI.BigInt(30), JSBI.BigInt(10000));\nconst INPUT_FRACTION_AFTER_FEE = ONE_HUNDRED_PERCENT.subtract(THIRTY_BIPS_FEE);\n_c = INPUT_FRACTION_AFTER_FEE;\nexport function computeRealizedPriceImpact(trade) {\n  const realizedLpFeePercent = computeRealizedLPFeePercent(trade);\n  return trade.priceImpact.subtract(realizedLpFeePercent);\n}\n\n// computes realized lp fee as a percent\nfunction computeRealizedLPFeePercent(trade) {\n  let percent;\n\n  // Since routes are either all v2 or all v3 right now, calculate separately\n  if (trade.swaps[0].route.pools instanceof Pair) {\n    // for each hop in our trade, take away the x*y=k price impact from 0.3% fees\n    // e.g. for 3 tokens/2 hops: 1 - ((1 - .03) * (1-.03))\n    percent = ONE_HUNDRED_PERCENT.subtract(trade.swaps.reduce(currentFee => currentFee.multiply(INPUT_FRACTION_AFTER_FEE), ONE_HUNDRED_PERCENT));\n  } else {\n    percent = ZERO_PERCENT;\n    for (const swap of trade.swaps) {\n      const {\n        numerator,\n        denominator\n      } = swap.inputAmount.divide(trade.inputAmount);\n      const overallPercent = new Percent(numerator, denominator);\n      const routeRealizedLPFeePercent = overallPercent.multiply(ONE_HUNDRED_PERCENT.subtract(swap.route.pools.reduce((currentFee, pool) => {\n        const fee = pool instanceof Pair ?\n        // not currently possible given protocol check above, but not fatal\n        FeeAmount.MEDIUM : pool.fee;\n        return currentFee.multiply(ONE_HUNDRED_PERCENT.subtract(new Fraction(fee, 1000000)));\n      }, ONE_HUNDRED_PERCENT)));\n      percent = percent.add(routeRealizedLPFeePercent);\n    }\n  }\n  return new Percent(percent.numerator, percent.denominator);\n}\n\n// computes price breakdown for the trade\nexport function computeRealizedLPFeeAmount(trade) {\n  if (trade) {\n    const realizedLPFee = computeRealizedLPFeePercent(trade);\n\n    // the amount of the input that accrues to LPs\n    return CurrencyAmount.fromRawAmount(trade.inputAmount.currency, trade.inputAmount.multiply(realizedLPFee).quotient);\n  }\n  return undefined;\n}\nconst IMPACT_TIERS = [BLOCKED_PRICE_IMPACT_NON_EXPERT, ALLOWED_PRICE_IMPACT_HIGH, ALLOWED_PRICE_IMPACT_MEDIUM, ALLOWED_PRICE_IMPACT_LOW];\nexport function warningSeverity(priceImpact) {\n  if (!priceImpact) return 4;\n  let impact = IMPACT_TIERS.length;\n  for (const impactLevel of IMPACT_TIERS) {\n    if (impactLevel.lessThan(priceImpact)) return impact;\n    impact--;\n  }\n  return 0;\n}\nvar _c;\n$RefreshReg$(_c, \"INPUT_FRACTION_AFTER_FEE\");","map":{"version":3,"names":["CurrencyAmount","Fraction","Percent","Pair","FeeAmount","JSBI","ALLOWED_PRICE_IMPACT_HIGH","ALLOWED_PRICE_IMPACT_LOW","ALLOWED_PRICE_IMPACT_MEDIUM","BLOCKED_PRICE_IMPACT_NON_EXPERT","ONE_HUNDRED_PERCENT","ZERO_PERCENT","THIRTY_BIPS_FEE","BigInt","INPUT_FRACTION_AFTER_FEE","subtract","computeRealizedPriceImpact","trade","realizedLpFeePercent","computeRealizedLPFeePercent","priceImpact","percent","swaps","route","pools","reduce","currentFee","multiply","swap","numerator","denominator","inputAmount","divide","overallPercent","routeRealizedLPFeePercent","pool","fee","MEDIUM","add","computeRealizedLPFeeAmount","realizedLPFee","fromRawAmount","currency","quotient","undefined","IMPACT_TIERS","warningSeverity","impact","length","impactLevel","lessThan"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/utils/prices.ts"],"sourcesContent":["import { Trade } from '@uniswap/router-sdk'\nimport { Currency, CurrencyAmount, Fraction, Percent, TradeType } from '@uniswap/sdk-core'\nimport { Pair } from '@uniswap/v2-sdk'\nimport { FeeAmount } from '@uniswap/v3-sdk'\nimport JSBI from 'jsbi'\n\nimport {\n  ALLOWED_PRICE_IMPACT_HIGH,\n  ALLOWED_PRICE_IMPACT_LOW,\n  ALLOWED_PRICE_IMPACT_MEDIUM,\n  BLOCKED_PRICE_IMPACT_NON_EXPERT,\n  ONE_HUNDRED_PERCENT,\n  ZERO_PERCENT,\n} from '../constants/misc'\n\nconst THIRTY_BIPS_FEE = new Percent(JSBI.BigInt(30), JSBI.BigInt(10000))\nconst INPUT_FRACTION_AFTER_FEE = ONE_HUNDRED_PERCENT.subtract(THIRTY_BIPS_FEE)\n\nexport function computeRealizedPriceImpact(trade: Trade<Currency, Currency, TradeType>): Percent {\n  const realizedLpFeePercent = computeRealizedLPFeePercent(trade)\n  return trade.priceImpact.subtract(realizedLpFeePercent)\n}\n\n// computes realized lp fee as a percent\nfunction computeRealizedLPFeePercent(trade: Trade<Currency, Currency, TradeType>): Percent {\n  let percent: Percent\n\n  // Since routes are either all v2 or all v3 right now, calculate separately\n  if (trade.swaps[0].route.pools instanceof Pair) {\n    // for each hop in our trade, take away the x*y=k price impact from 0.3% fees\n    // e.g. for 3 tokens/2 hops: 1 - ((1 - .03) * (1-.03))\n    percent = ONE_HUNDRED_PERCENT.subtract(\n      trade.swaps.reduce<Percent>(\n        (currentFee: Percent): Percent => currentFee.multiply(INPUT_FRACTION_AFTER_FEE),\n        ONE_HUNDRED_PERCENT\n      )\n    )\n  } else {\n    percent = ZERO_PERCENT\n    for (const swap of trade.swaps) {\n      const { numerator, denominator } = swap.inputAmount.divide(trade.inputAmount)\n      const overallPercent = new Percent(numerator, denominator)\n\n      const routeRealizedLPFeePercent = overallPercent.multiply(\n        ONE_HUNDRED_PERCENT.subtract(\n          swap.route.pools.reduce<Percent>((currentFee: Percent, pool): Percent => {\n            const fee =\n              pool instanceof Pair\n                ? // not currently possible given protocol check above, but not fatal\n                  FeeAmount.MEDIUM\n                : pool.fee\n            return currentFee.multiply(ONE_HUNDRED_PERCENT.subtract(new Fraction(fee, 1_000_000)))\n          }, ONE_HUNDRED_PERCENT)\n        )\n      )\n\n      percent = percent.add(routeRealizedLPFeePercent)\n    }\n  }\n\n  return new Percent(percent.numerator, percent.denominator)\n}\n\n// computes price breakdown for the trade\nexport function computeRealizedLPFeeAmount(\n  trade?: Trade<Currency, Currency, TradeType> | null\n): CurrencyAmount<Currency> | undefined {\n  if (trade) {\n    const realizedLPFee = computeRealizedLPFeePercent(trade)\n\n    // the amount of the input that accrues to LPs\n    return CurrencyAmount.fromRawAmount(trade.inputAmount.currency, trade.inputAmount.multiply(realizedLPFee).quotient)\n  }\n\n  return undefined\n}\n\nconst IMPACT_TIERS = [\n  BLOCKED_PRICE_IMPACT_NON_EXPERT,\n  ALLOWED_PRICE_IMPACT_HIGH,\n  ALLOWED_PRICE_IMPACT_MEDIUM,\n  ALLOWED_PRICE_IMPACT_LOW,\n]\n\ntype WarningSeverity = 0 | 1 | 2 | 3 | 4\nexport function warningSeverity(priceImpact: Percent | undefined): WarningSeverity {\n  if (!priceImpact) return 4\n  let impact: WarningSeverity = IMPACT_TIERS.length as WarningSeverity\n  for (const impactLevel of IMPACT_TIERS) {\n    if (impactLevel.lessThan(priceImpact)) return impact\n    impact--\n  }\n  return 0\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}