{"ast":null,"code":"import { logger } from '@sentry/utils';\nimport { getCurrentHub } from './hub.js';\n\n/** A class object that can instantiate Client objects. */\n\n/**\n * Internal function to create a new SDK client instance. The client is\n * installed and then bound to the current scope.\n *\n * @param clientClass The client class to instantiate.\n * @param options Options to pass to the client.\n */\nfunction initAndBind(clientClass, options) {\n  if (options.debug === true) {\n    if (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) {\n      logger.enable();\n    } else {\n      // use `console.warn` rather than `logger.warn` since by non-debug bundles have all `logger.x` statements stripped\n      // eslint-disable-next-line no-console\n      console.warn('[Sentry] Cannot initialize SDK with `debug` option using a non-debug bundle.');\n    }\n  }\n  var hub = getCurrentHub();\n  var scope = hub.getScope();\n  if (scope) {\n    scope.update(options.initialScope);\n  }\n  var client = new clientClass(options);\n  hub.bindClient(client);\n}\nexport { initAndBind };","map":{"version":3,"sources":["../../src/sdk.ts"],"names":[],"mappings":";;;AAKA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAA,WAAA,CACA,WAAA,EACA,OAAA,EACA;EACA,IAAA,OAAA,CAAA,KAAA,KAAA,IAAA,EAAA;IACA,IAAA,OAAA,gBAAA,KAAA,WAAA,IAAA,gBAAA,EAAA;MACA,MAAA,CAAA,MAAA,EAAA;IACA,CAAA,MAAA;MACA;MACA;MACA,OAAA,CAAA,IAAA,CAAA,8EAAA,CAAA;IACA;EACA;EACA,IAAA,GAAA,GAAA,aAAA,EAAA;EACA,IAAA,KAAA,GAAA,GAAA,CAAA,QAAA,EAAA;EACA,IAAA,KAAA,EAAA;IACA,KAAA,CAAA,MAAA,CAAA,OAAA,CAAA,YAAA,CAAA;EACA;EAEA,IAAA,MAAA,GAAA,IAAA,WAAA,CAAA,OAAA,CAAA;EACA,GAAA,CAAA,UAAA,CAAA,MAAA,CAAA;AACA","sourcesContent":["import { Client, ClientOptions } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\nimport { getCurrentHub } from './hub';\n\n/** A class object that can instantiate Client objects. */\nexport type ClientClass<F extends Client, O extends ClientOptions> = new (options: O) => F;\n\n/**\n * Internal function to create a new SDK client instance. The client is\n * installed and then bound to the current scope.\n *\n * @param clientClass The client class to instantiate.\n * @param options Options to pass to the client.\n */\nexport function initAndBind<F extends Client, O extends ClientOptions>(\n  clientClass: ClientClass<F, O>,\n  options: O,\n): void {\n  if (options.debug === true) {\n    if (__DEBUG_BUILD__) {\n      logger.enable();\n    } else {\n      // use `console.warn` rather than `logger.warn` since by non-debug bundles have all `logger.x` statements stripped\n      // eslint-disable-next-line no-console\n      console.warn('[Sentry] Cannot initialize SDK with `debug` option using a non-debug bundle.');\n    }\n  }\n  const hub = getCurrentHub();\n  const scope = hub.getScope();\n  if (scope) {\n    scope.update(options.initialScope);\n  }\n\n  const client = new clientClass(options);\n  hub.bindClient(client);\n}\n"]},"metadata":{},"sourceType":"module"}