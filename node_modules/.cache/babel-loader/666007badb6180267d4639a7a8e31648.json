{"ast":null,"code":"var _s = $RefreshSig$();\nimport { gnosisSafeConnection, networkConnection } from 'connection';\nimport { getConnection } from 'connection/utils';\nimport { useEffect } from 'react';\nimport { useAppDispatch, useAppSelector } from 'state/hooks';\nimport { updateSelectedWallet } from 'state/user/reducer';\nasync function connect(connector) {\n  try {\n    if (connector.connectEagerly) {\n      await connector.connectEagerly();\n    } else {\n      await connector.activate();\n    }\n  } catch (error) {\n    console.debug(`web3-react eager connection error: ${error}`);\n  }\n}\nexport default function useEagerlyConnect() {\n  _s();\n  const dispatch = useAppDispatch();\n  const selectedWallet = useAppSelector(state => state.user.selectedWallet);\n  let selectedConnection;\n  if (selectedWallet) {\n    try {\n      selectedConnection = getConnection(selectedWallet);\n    } catch {\n      dispatch(updateSelectedWallet({\n        wallet: undefined\n      }));\n    }\n  }\n  useEffect(() => {\n    connect(gnosisSafeConnection.connector);\n    connect(networkConnection.connector);\n    if (selectedConnection) {\n      connect(selectedConnection.connector);\n    } // The dependency list is empty so this is only run once on mount\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n}\n_s(useEagerlyConnect, \"n93gkfi4TrotQnYB4OiLiiojgzk=\", false, function () {\n  return [useAppDispatch, useAppSelector];\n});","map":{"version":3,"names":["gnosisSafeConnection","networkConnection","getConnection","useEffect","useAppDispatch","useAppSelector","updateSelectedWallet","connect","connector","connectEagerly","activate","error","console","debug","useEagerlyConnect","dispatch","selectedWallet","state","user","selectedConnection","wallet","undefined"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/hooks/useEagerlyConnect.ts"],"sourcesContent":["import { Connector } from '@web3-react/types'\nimport { Connection, gnosisSafeConnection, networkConnection } from 'connection'\nimport { getConnection } from 'connection/utils'\nimport { useEffect } from 'react'\nimport { useAppDispatch, useAppSelector } from 'state/hooks'\nimport { updateSelectedWallet } from 'state/user/reducer'\n\nasync function connect(connector: Connector) {\n  try {\n    if (connector.connectEagerly) {\n      await connector.connectEagerly()\n    } else {\n      await connector.activate()\n    }\n  } catch (error) {\n    console.debug(`web3-react eager connection error: ${error}`)\n  }\n}\n\nexport default function useEagerlyConnect() {\n  const dispatch = useAppDispatch()\n\n  const selectedWallet = useAppSelector((state) => state.user.selectedWallet)\n\n  let selectedConnection: Connection | undefined\n  if (selectedWallet) {\n    try {\n      selectedConnection = getConnection(selectedWallet)\n    } catch {\n      dispatch(updateSelectedWallet({ wallet: undefined }))\n    }\n  }\n\n  useEffect(() => {\n    connect(gnosisSafeConnection.connector)\n    connect(networkConnection.connector)\n\n    if (selectedConnection) {\n      connect(selectedConnection.connector)\n    } // The dependency list is empty so this is only run once on mount\n  }, []) // eslint-disable-line react-hooks/exhaustive-deps\n}\n"],"mappings":";AACA,SAAqBA,oBAAoB,EAAEC,iBAAiB,QAAQ,YAAY;AAChF,SAASC,aAAa,QAAQ,kBAAkB;AAChD,SAASC,SAAS,QAAQ,OAAO;AACjC,SAASC,cAAc,EAAEC,cAAc,QAAQ,aAAa;AAC5D,SAASC,oBAAoB,QAAQ,oBAAoB;AAEzD,eAAeC,OAAO,CAACC,SAAoB,EAAE;EAC3C,IAAI;IACF,IAAIA,SAAS,CAACC,cAAc,EAAE;MAC5B,MAAMD,SAAS,CAACC,cAAc,EAAE;IAClC,CAAC,MAAM;MACL,MAAMD,SAAS,CAACE,QAAQ,EAAE;IAC5B;EACF,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACC,KAAK,CAAE,sCAAqCF,KAAM,EAAC,CAAC;EAC9D;AACF;AAEA,eAAe,SAASG,iBAAiB,GAAG;EAAA;EAC1C,MAAMC,QAAQ,GAAGX,cAAc,EAAE;EAEjC,MAAMY,cAAc,GAAGX,cAAc,CAAEY,KAAK,IAAKA,KAAK,CAACC,IAAI,CAACF,cAAc,CAAC;EAE3E,IAAIG,kBAA0C;EAC9C,IAAIH,cAAc,EAAE;IAClB,IAAI;MACFG,kBAAkB,GAAGjB,aAAa,CAACc,cAAc,CAAC;IACpD,CAAC,CAAC,MAAM;MACND,QAAQ,CAACT,oBAAoB,CAAC;QAAEc,MAAM,EAAEC;MAAU,CAAC,CAAC,CAAC;IACvD;EACF;EAEAlB,SAAS,CAAC,MAAM;IACdI,OAAO,CAACP,oBAAoB,CAACQ,SAAS,CAAC;IACvCD,OAAO,CAACN,iBAAiB,CAACO,SAAS,CAAC;IAEpC,IAAIW,kBAAkB,EAAE;MACtBZ,OAAO,CAACY,kBAAkB,CAACX,SAAS,CAAC;IACvC,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC,EAAC;AACT;AAAC,GAtBuBM,iBAAiB;EAAA,QACtBV,cAAc,EAERC,cAAc;AAAA"},"metadata":{},"sourceType":"module"}