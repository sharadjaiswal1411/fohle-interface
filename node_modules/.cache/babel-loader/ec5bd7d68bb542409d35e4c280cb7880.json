{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst codegen_1 = require(\"../../compile/codegen\");\nconst util_1 = require(\"../../compile/util\");\nconst error = {\n  message: \"must match exactly one schema in oneOf\",\n  params: _ref => {\n    let {\n      params\n    } = _ref;\n    return (0, codegen_1._)`{passingSchemas: ${params.passing}}`;\n  }\n};\nconst def = {\n  keyword: \"oneOf\",\n  schemaType: \"array\",\n  trackErrors: true,\n  error,\n  code(cxt) {\n    const {\n      gen,\n      schema,\n      parentSchema,\n      it\n    } = cxt;\n    /* istanbul ignore if */\n    if (!Array.isArray(schema)) throw new Error(\"ajv implementation error\");\n    if (it.opts.discriminator && parentSchema.discriminator) return;\n    const schArr = schema;\n    const valid = gen.let(\"valid\", false);\n    const passing = gen.let(\"passing\", null);\n    const schValid = gen.name(\"_valid\");\n    cxt.setParams({\n      passing\n    });\n    // TODO possibly fail straight away (with warning or exception) if there are two empty always valid schemas\n    gen.block(validateOneOf);\n    cxt.result(valid, () => cxt.reset(), () => cxt.error(true));\n    function validateOneOf() {\n      schArr.forEach((sch, i) => {\n        let schCxt;\n        if ((0, util_1.alwaysValidSchema)(it, sch)) {\n          gen.var(schValid, true);\n        } else {\n          schCxt = cxt.subschema({\n            keyword: \"oneOf\",\n            schemaProp: i,\n            compositeRule: true\n          }, schValid);\n        }\n        if (i > 0) {\n          gen.if((0, codegen_1._)`${schValid} && ${valid}`).assign(valid, false).assign(passing, (0, codegen_1._)`[${passing}, ${i}]`).else();\n        }\n        gen.if(schValid, () => {\n          gen.assign(valid, true);\n          gen.assign(passing, i);\n          if (schCxt) cxt.mergeEvaluated(schCxt, codegen_1.Name);\n        });\n      });\n    }\n  }\n};\nexports.default = def;","map":{"version":3,"sources":["../../../lib/vocabularies/applicator/oneOf.ts"],"names":[],"mappings":";;;;;AAOA,MAAA,SAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;AACA,MAAA,MAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;AASA,MAAM,KAAK,GAA2B;EACpC,OAAO,EAAE,wCAAwC;EACjD,MAAM,EAAE;IAAA,IAAC;MAAC;IAAM,CAAC;IAAA,OAAK,CAAA,CAAA,EAAA,SAAA,CAAA,CAAC,CAAA,oBAAoB,MAAM,CAAC,OAAO,GAAG;EAAA;CAC7D;AAED,MAAM,GAAG,GAA0B;EACjC,OAAO,EAAE,OAAO;EAChB,UAAU,EAAE,OAAO;EACnB,WAAW,EAAE,IAAI;EACjB,KAAK;EACL,IAAI,CAAC,GAAe,EAAA;IAClB,MAAM;MAAC,GAAG;MAAE,MAAM;MAAE,YAAY;MAAE;IAAE,CAAC,GAAG,GAAG;IAC3C;IACA,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC;IACvE,IAAI,EAAE,CAAC,IAAI,CAAC,aAAa,IAAI,YAAY,CAAC,aAAa,EAAE;IACzD,MAAM,MAAM,GAAgB,MAAM;IAClC,MAAM,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC,OAAO,EAAE,KAAK,CAAC;IACrC,MAAM,OAAO,GAAG,GAAG,CAAC,GAAG,CAAC,SAAS,EAAE,IAAI,CAAC;IACxC,MAAM,QAAQ,GAAG,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC;IACnC,GAAG,CAAC,SAAS,CAAC;MAAC;IAAO,CAAC,CAAC;IACxB;IAEA,GAAG,CAAC,KAAK,CAAC,aAAa,CAAC;IAExB,GAAG,CAAC,MAAM,CACR,KAAK,EACL,MAAM,GAAG,CAAC,KAAK,EAAE,EACjB,MAAM,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CACtB;IAED,SAAS,aAAa,GAAA;MACpB,MAAM,CAAC,OAAO,CAAC,CAAC,GAAc,EAAE,CAAS,KAAI;QAC3C,IAAI,MAA6B;QACjC,IAAI,CAAA,CAAA,EAAA,MAAA,CAAA,iBAAiB,EAAC,EAAE,EAAE,GAAG,CAAC,EAAE;UAC9B,GAAG,CAAC,GAAG,CAAC,QAAQ,EAAE,IAAI,CAAC;SACxB,MAAM;UACL,MAAM,GAAG,GAAG,CAAC,SAAS,CACpB;YACE,OAAO,EAAE,OAAO;YAChB,UAAU,EAAE,CAAC;YACb,aAAa,EAAE;WAChB,EACD,QAAQ,CACT;QACF;QAED,IAAI,CAAC,GAAG,CAAC,EAAE;UACT,GAAG,CACA,EAAE,CAAC,CAAA,CAAA,EAAA,SAAA,CAAA,CAAC,CAAA,GAAG,QAAQ,OAAO,KAAK,EAAE,CAAC,CAC9B,MAAM,CAAC,KAAK,EAAE,KAAK,CAAC,CACpB,MAAM,CAAC,OAAO,EAAE,CAAA,CAAA,EAAA,SAAA,CAAA,CAAC,CAAA,IAAI,OAAO,KAAK,CAAC,GAAG,CAAC,CACtC,IAAI,EAAE;QACV;QAED,GAAG,CAAC,EAAE,CAAC,QAAQ,EAAE,MAAK;UACpB,GAAG,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC;UACvB,GAAG,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,CAAC;UACtB,IAAI,MAAM,EAAE,GAAG,CAAC,cAAc,CAAC,MAAM,EAAE,SAAA,CAAA,IAAI,CAAC;QAC9C,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ;EACF;CACD;AAED,OAAA,CAAA,OAAA,GAAe,GAAG","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst codegen_1 = require(\"../../compile/codegen\");\nconst util_1 = require(\"../../compile/util\");\nconst error = {\n    message: \"must match exactly one schema in oneOf\",\n    params: ({ params }) => (0, codegen_1._) `{passingSchemas: ${params.passing}}`,\n};\nconst def = {\n    keyword: \"oneOf\",\n    schemaType: \"array\",\n    trackErrors: true,\n    error,\n    code(cxt) {\n        const { gen, schema, parentSchema, it } = cxt;\n        /* istanbul ignore if */\n        if (!Array.isArray(schema))\n            throw new Error(\"ajv implementation error\");\n        if (it.opts.discriminator && parentSchema.discriminator)\n            return;\n        const schArr = schema;\n        const valid = gen.let(\"valid\", false);\n        const passing = gen.let(\"passing\", null);\n        const schValid = gen.name(\"_valid\");\n        cxt.setParams({ passing });\n        // TODO possibly fail straight away (with warning or exception) if there are two empty always valid schemas\n        gen.block(validateOneOf);\n        cxt.result(valid, () => cxt.reset(), () => cxt.error(true));\n        function validateOneOf() {\n            schArr.forEach((sch, i) => {\n                let schCxt;\n                if ((0, util_1.alwaysValidSchema)(it, sch)) {\n                    gen.var(schValid, true);\n                }\n                else {\n                    schCxt = cxt.subschema({\n                        keyword: \"oneOf\",\n                        schemaProp: i,\n                        compositeRule: true,\n                    }, schValid);\n                }\n                if (i > 0) {\n                    gen\n                        .if((0, codegen_1._) `${schValid} && ${valid}`)\n                        .assign(valid, false)\n                        .assign(passing, (0, codegen_1._) `[${passing}, ${i}]`)\n                        .else();\n                }\n                gen.if(schValid, () => {\n                    gen.assign(valid, true);\n                    gen.assign(passing, i);\n                    if (schCxt)\n                        cxt.mergeEvaluated(schCxt, codegen_1.Name);\n                });\n            });\n        }\n    },\n};\nexports.default = def;\n//# sourceMappingURL=oneOf.js.map"]},"metadata":{},"sourceType":"script"}