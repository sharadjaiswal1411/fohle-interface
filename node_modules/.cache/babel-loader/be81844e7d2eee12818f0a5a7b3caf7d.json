{"ast":null,"code":"import { Interface } from '@ethersproject/abi';\nimport { toHex } from '@uniswap/v3-sdk';\nconst ERC20_INTERFACE = new Interface([{\n  constant: false,\n  inputs: [{\n    name: '_spender',\n    type: 'address'\n  }, {\n    name: '_value',\n    type: 'uint256'\n  }],\n  name: 'approve',\n  outputs: [{\n    name: '',\n    type: 'bool'\n  }],\n  payable: false,\n  stateMutability: 'nonpayable',\n  type: 'function'\n}]);\nexport default function approveAmountCalldata(amount, spender) {\n  if (!amount.currency.isToken) throw new Error('Must call with an amount of token');\n  const approveData = ERC20_INTERFACE.encodeFunctionData('approve', [spender, toHex(amount.quotient)]);\n  return {\n    to: amount.currency.address,\n    data: approveData,\n    value: '0x0'\n  };\n}","map":{"version":3,"names":["Interface","toHex","ERC20_INTERFACE","constant","inputs","name","type","outputs","payable","stateMutability","approveAmountCalldata","amount","spender","currency","isToken","Error","approveData","encodeFunctionData","quotient","to","address","data","value"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/utils/approveAmountCalldata.ts"],"sourcesContent":["import { Interface } from '@ethersproject/abi'\nimport { Currency, CurrencyAmount } from '@uniswap/sdk-core'\nimport { toHex } from '@uniswap/v3-sdk'\n\nimport { Erc20Interface } from '../abis/types/Erc20'\n\nconst ERC20_INTERFACE = new Interface([\n  {\n    constant: false,\n    inputs: [\n      { name: '_spender', type: 'address' },\n      { name: '_value', type: 'uint256' },\n    ],\n    name: 'approve',\n    outputs: [{ name: '', type: 'bool' }],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n]) as Erc20Interface\n\nexport default function approveAmountCalldata(\n  amount: CurrencyAmount<Currency>,\n  spender: string\n): { to: string; data: string; value: '0x0' } {\n  if (!amount.currency.isToken) throw new Error('Must call with an amount of token')\n  const approveData = ERC20_INTERFACE.encodeFunctionData('approve', [spender, toHex(amount.quotient)])\n  return {\n    to: amount.currency.address,\n    data: approveData,\n    value: '0x0',\n  }\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,oBAAoB;AAE9C,SAASC,KAAK,QAAQ,iBAAiB;AAIvC,MAAMC,eAAe,GAAG,IAAIF,SAAS,CAAC,CACpC;EACEG,QAAQ,EAAE,KAAK;EACfC,MAAM,EAAE,CACN;IAAEC,IAAI,EAAE,UAAU;IAAEC,IAAI,EAAE;EAAU,CAAC,EACrC;IAAED,IAAI,EAAE,QAAQ;IAAEC,IAAI,EAAE;EAAU,CAAC,CACpC;EACDD,IAAI,EAAE,SAAS;EACfE,OAAO,EAAE,CAAC;IAAEF,IAAI,EAAE,EAAE;IAAEC,IAAI,EAAE;EAAO,CAAC,CAAC;EACrCE,OAAO,EAAE,KAAK;EACdC,eAAe,EAAE,YAAY;EAC7BH,IAAI,EAAE;AACR,CAAC,CACF,CAAmB;AAEpB,eAAe,SAASI,qBAAqB,CAC3CC,MAAgC,EAChCC,OAAe,EAC6B;EAC5C,IAAI,CAACD,MAAM,CAACE,QAAQ,CAACC,OAAO,EAAE,MAAM,IAAIC,KAAK,CAAC,mCAAmC,CAAC;EAClF,MAAMC,WAAW,GAAGd,eAAe,CAACe,kBAAkB,CAAC,SAAS,EAAE,CAACL,OAAO,EAAEX,KAAK,CAACU,MAAM,CAACO,QAAQ,CAAC,CAAC,CAAC;EACpG,OAAO;IACLC,EAAE,EAAER,MAAM,CAACE,QAAQ,CAACO,OAAO;IAC3BC,IAAI,EAAEL,WAAW;IACjBM,KAAK,EAAE;EACT,CAAC;AACH"},"metadata":{},"sourceType":"module"}