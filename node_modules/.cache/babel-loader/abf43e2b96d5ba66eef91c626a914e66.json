{"ast":null,"code":"\"use strict\";\n\nfunction e(e) {\n  return e && \"object\" == typeof e && \"default\" in e ? e.default : e;\n}\nObject.defineProperty(exports, \"__esModule\", {\n  value: !0\n});\nvar n,\n  t,\n  a = e(require(\"tiny-invariant\")),\n  i = require(\"@uniswap/universal-router/artifacts/contracts/UniversalRouter.sol/UniversalRouter.json\"),\n  r = require(\"@ethersproject/abi\"),\n  p = require(\"ethers\"),\n  s = e(require(\"jsbi\")),\n  y = require(\"ethers/lib/utils\"),\n  u = require(\"@uniswap/v2-sdk\"),\n  d = require(\"@uniswap/v3-sdk\"),\n  o = require(\"@uniswap/router-sdk\"),\n  m = require(\"@uniswap/sdk-core\");\nfunction l(e, n) {\n  var t, a;\n  e.prototype = Object.create(n.prototype), e.prototype.constructor = e, t = e, a = n, (Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (e, n) {\n    return e.__proto__ = n, e;\n  })(t, a);\n}\nfunction T(e, n) {\n  (null == n || n > e.length) && (n = e.length);\n  for (var t = 0, a = new Array(n); t < n; t++) {\n    a[t] = e[t];\n  }\n  return a;\n}\nfunction c(e, n) {\n  var t = \"undefined\" != typeof Symbol && e[Symbol.iterator] || e[\"@@iterator\"];\n  if (t) return (t = t.call(e)).next.bind(t);\n  if (Array.isArray(e) || (t = function (e, n) {\n    if (e) {\n      if (\"string\" == typeof e) return T(e, void 0);\n      var t = Object.prototype.toString.call(e).slice(8, -1);\n      return \"Object\" === t && e.constructor && (t = e.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(e) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? T(e, void 0) : void 0;\n    }\n  }(e)) || n && e && \"number\" == typeof e.length) {\n    t && (e = t);\n    var a = 0;\n    return function () {\n      return a >= e.length ? {\n        done: !0\n      } : {\n        done: !1,\n        value: e[a++]\n      };\n    };\n  }\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n!function (e) {\n  e[e.V3_SWAP_EXACT_IN = 0] = \"V3_SWAP_EXACT_IN\", e[e.V3_SWAP_EXACT_OUT = 1] = \"V3_SWAP_EXACT_OUT\", e[e.PERMIT2_TRANSFER_FROM = 2] = \"PERMIT2_TRANSFER_FROM\", e[e.PERMIT2_PERMIT_BATCH = 3] = \"PERMIT2_PERMIT_BATCH\", e[e.SWEEP = 4] = \"SWEEP\", e[e.TRANSFER = 5] = \"TRANSFER\", e[e.PAY_PORTION = 6] = \"PAY_PORTION\", e[e.V2_SWAP_EXACT_IN = 8] = \"V2_SWAP_EXACT_IN\", e[e.V2_SWAP_EXACT_OUT = 9] = \"V2_SWAP_EXACT_OUT\", e[e.PERMIT = 10] = \"PERMIT\", e[e.WRAP_ETH = 11] = \"WRAP_ETH\", e[e.UNWRAP_WETH = 12] = \"UNWRAP_WETH\", e[e.PERMIT2_TRANSFER_FROM_BATCH = 13] = \"PERMIT2_TRANSFER_FROM_BATCH\", e[e.SEAPORT = 16] = \"SEAPORT\", e[e.LOOKS_RARE_721 = 17] = \"LOOKS_RARE_721\", e[e.NFTX = 18] = \"NFTX\", e[e.CRYPTOPUNKS = 19] = \"CRYPTOPUNKS\", e[e.LOOKS_RARE_1155 = 20] = \"LOOKS_RARE_1155\", e[e.OWNER_CHECK_721 = 21] = \"OWNER_CHECK_721\", e[e.OWNER_CHECK_1155 = 22] = \"OWNER_CHECK_1155\", e[e.X2Y2_721 = 24] = \"X2Y2_721\", e[e.SUDOSWAP = 25] = \"SUDOSWAP\", e[e.NFT20 = 26] = \"NFT20\", e[e.X2Y2_1155 = 27] = \"X2Y2_1155\", e[e.FOUNDATION = 28] = \"FOUNDATION\";\n}(t || (t = {}));\nvar f = new Set([t.SEAPORT, t.NFTX, t.LOOKS_RARE_721, t.LOOKS_RARE_1155, t.X2Y2_721, t.X2Y2_1155, t.FOUNDATION, t.SUDOSWAP, t.NFT20]),\n  b = ((n = {})[t.PERMIT] = [\"((address token,uint160 amount,uint48 expiration,uint48 nonce) details, address spender, uint256 sigDeadline)\", \"bytes\"], n[t.PERMIT2_PERMIT_BATCH] = [\"((address token,uint160 amount,uint48 expiration,uint48 nonce)[] details, address spender, uint256 sigDeadline)\", \"bytes\"], n[t.PERMIT2_TRANSFER_FROM] = [\"address\", \"address\", \"uint160\"], n[t.PERMIT2_TRANSFER_FROM_BATCH] = [\"bytes\"], n[t.TRANSFER] = [\"address\", \"address\", \"uint256\"], n[t.V3_SWAP_EXACT_IN] = [\"address\", \"uint256\", \"uint256\", \"bytes\", \"bool\"], n[t.V3_SWAP_EXACT_OUT] = [\"address\", \"uint256\", \"uint256\", \"bytes\", \"bool\"], n[t.V2_SWAP_EXACT_IN] = [\"address\", \"uint256\", \"uint256\", \"address[]\", \"bool\"], n[t.V2_SWAP_EXACT_OUT] = [\"address\", \"uint256\", \"uint256\", \"address[]\", \"bool\"], n[t.SEAPORT] = [\"uint256\", \"bytes\"], n[t.WRAP_ETH] = [\"address\", \"uint256\"], n[t.UNWRAP_WETH] = [\"address\", \"uint256\"], n[t.SWEEP] = [\"address\", \"address\", \"uint256\"], n[t.NFTX] = [\"uint256\", \"bytes\"], n[t.LOOKS_RARE_721] = [\"uint256\", \"bytes\", \"address\", \"address\", \"uint256\"], n[t.LOOKS_RARE_1155] = [\"uint256\", \"bytes\", \"address\", \"address\", \"uint256\", \"uint256\"], n[t.X2Y2_721] = [\"uint256\", \"bytes\", \"address\", \"address\", \"uint256\"], n[t.X2Y2_1155] = [\"uint256\", \"bytes\", \"address\", \"address\", \"uint256\", \"uint256\"], n[t.FOUNDATION] = [\"uint256\", \"bytes\", \"address\", \"address\", \"uint256\"], n[t.PAY_PORTION] = [\"address\", \"address\", \"uint256\"], n[t.SUDOSWAP] = [\"uint256\", \"bytes\"], n[t.OWNER_CHECK_721] = [\"address\", \"address\", \"uint256\"], n[t.OWNER_CHECK_1155] = [\"address\", \"address\", \"uint256\", \"uint256\"], n[t.NFT20] = [\"uint256\", \"bytes\"], n[t.CRYPTOPUNKS] = [\"uint256\", \"address\", \"uint256\"], n),\n  v = function () {\n    function e() {\n      this.commands = \"0x\", this.inputs = [];\n    }\n    return e.prototype.addCommand = function (e, n, t) {\n      void 0 === t && (t = !1);\n      var a = function (e, n) {\n        return {\n          type: e,\n          encodedInput: y.defaultAbiCoder.encode(b[e], n)\n        };\n      }(e, n);\n      if (this.inputs.push(a.encodedInput), t) {\n        if (!f.has(a.type)) throw new Error(\"command type: \" + a.type + \" cannot be allowed to revert\");\n        a.type = 128 | a.type;\n      }\n      this.commands = this.commands.concat(a.type.toString(16).padStart(2, \"0\"));\n    }, e;\n  }(),\n  I = p.BigNumber.from(2).pow(255),\n  A = \"0x0000000000000000000000000000000000000002\",\n  M = new m.Percent(s.BigInt(50), s.BigInt(100)),\n  S = function () {\n    function e(e, n) {\n      this.trade = e, this.options = n;\n    }\n    return e.prototype.encode = function (e, n) {\n      var a,\n        i = !0;\n      this.trade.inputAmount.currency.isNative && (e.addCommand(t.WRAP_ETH, [A, this.trade.maximumAmountIn(this.options.slippageTolerance).quotient.toString()]), i = !1), this.options.recipient = null != (a = this.options.recipient) ? a : \"0x0000000000000000000000000000000000000001\";\n      for (var r, p = this.trade.outputAmount.currency.isNative, s = this.trade.inputAmount.currency.isNative, y = this.trade.tradeType === m.TradeType.EXACT_INPUT && this.trade.routes.length > 2 || p, u = c(this.trade.swaps); !(r = u()).done;) {\n        var d = r.value;\n        switch (d.route.protocol) {\n          case o.Protocol.V2:\n            R(e, d, this.trade.tradeType, this.options, i, y);\n            break;\n          case o.Protocol.V3:\n            _(e, d, this.trade.tradeType, this.options, i, y);\n            break;\n          case o.Protocol.MIXED:\n            k(e, d, this.trade.tradeType, this.options, i, y);\n            break;\n          default:\n            throw new Error(\"UNSUPPORTED_TRADE_PROTOCOL\");\n        }\n      }\n      y && (p ? e.addCommand(t.UNWRAP_WETH, [this.options.recipient, this.trade.minimumAmountOut(this.options.slippageTolerance).quotient.toString()]) : e.addCommand(t.SWEEP, [this.trade.outputAmount.currency.wrapped.address, this.options.recipient, this.trade.minimumAmountOut(this.options.slippageTolerance).quotient.toString()])), s && (this.trade.tradeType === m.TradeType.EXACT_OUTPUT || this.trade.priceImpact.greaterThan(M)) && e.addCommand(t.UNWRAP_WETH, [this.options.recipient, 0]);\n    }, e;\n  }();\nfunction R(e, n, a, i, r, p) {\n  var s = n.route,\n    y = new u.Trade(s, a == m.TradeType.EXACT_INPUT ? n.inputAmount : n.outputAmount, a);\n  a == m.TradeType.EXACT_INPUT ? e.addCommand(t.V2_SWAP_EXACT_IN, [p ? A : i.recipient, y.maximumAmountIn(i.slippageTolerance).quotient.toString(), y.minimumAmountOut(i.slippageTolerance).quotient.toString(), s.path.map(function (e) {\n    return e.address;\n  }), r]) : a == m.TradeType.EXACT_OUTPUT && e.addCommand(t.V2_SWAP_EXACT_OUT, [p ? A : i.recipient, y.minimumAmountOut(i.slippageTolerance).quotient.toString(), y.maximumAmountIn(i.slippageTolerance).quotient.toString(), s.path.map(function (e) {\n    return e.address;\n  }), r]);\n}\nfunction _(e, n, a, i, r, p) {\n  var s = n.route,\n    y = d.Trade.createUncheckedTrade({\n      route: s,\n      inputAmount: n.inputAmount,\n      outputAmount: n.outputAmount,\n      tradeType: a\n    }),\n    u = d.encodeRouteToPath(s, y.tradeType === m.TradeType.EXACT_OUTPUT);\n  a == m.TradeType.EXACT_INPUT ? e.addCommand(t.V3_SWAP_EXACT_IN, [p ? A : i.recipient, y.maximumAmountIn(i.slippageTolerance).quotient.toString(), y.minimumAmountOut(i.slippageTolerance).quotient.toString(), u, r]) : a == m.TradeType.EXACT_OUTPUT && e.addCommand(t.V3_SWAP_EXACT_OUT, [p ? A : i.recipient, y.minimumAmountOut(i.slippageTolerance).quotient.toString(), y.maximumAmountIn(i.slippageTolerance).quotient.toString(), u, r]);\n}\nfunction k(e, n, a, i, r, p) {\n  var s = n.route,\n    y = n.inputAmount,\n    m = n.outputAmount,\n    l = p ? A : i.recipient;\n  if (1 === s.pools.length) {\n    if (s.pools[0] instanceof d.Pool) return _(e, n, a, i, r, p);\n    if (s.pools[0] instanceof u.Pair) return R(e, n, a, i, r, p);\n    throw new Error(\"Invalid route type\");\n  }\n  for (var T, c = o.MixedRouteTrade.createUncheckedTrade({\n      route: s,\n      inputAmount: y,\n      outputAmount: m,\n      tradeType: a\n    }), f = c.maximumAmountIn(i.slippageTolerance, y).quotient.toString(), b = c.minimumAmountOut(i.slippageTolerance, m).quotient.toString(), v = o.partitionMixedRouteByProtocol(s), M = function M(e) {\n      return e === v.length - 1;\n    }, S = s.input.wrapped, k = 0; k < v.length; k++) {\n    var O = v[k];\n    T = o.getOutputOfPools(O, S);\n    var C = new o.MixedRouteSDK([].concat(O), O[0].token0.equals(S) ? O[0].token0 : O[0].token1, T),\n      x = new o.MixedRoute(C);\n    if (S = T, function (e) {\n      return e.pools.every(function (e) {\n        return e instanceof d.Pool;\n      });\n    }(x)) {\n      var F = o.encodeMixedRouteToPath(x);\n      e.addCommand(t.V3_SWAP_EXACT_IN, [M(k) ? l : v[k + 1][0].liquidityToken.address, 0 == k ? f : I, M(k) ? b : 0, F, r && 0 === k]);\n    } else e.addCommand(t.V2_SWAP_EXACT_IN, [M(k) ? l : A, 0 === k ? f : I, M(k) ? b : 0, x.path.map(function (e) {\n      return e.address;\n    }), r && 0 === k]);\n  }\n}\nvar O = function () {\n  function e() {}\n  return e.swapNFTCallParameters = function (n, i) {\n    i.sender || a(!1);\n    for (var r, s = new v(), y = p.BigNumber.from(0), u = 1 != n.length || 1 != n[0].orders.length, d = c(n); !(r = d()).done;) {\n      var o = r.value;\n      o.encode(s, {\n        allowRevert: u\n      }), y = y.add(o.getTotalPrice());\n    }\n    return s.addCommand(t.SWEEP, [\"0x0000000000000000000000000000000000000000\", i.sender, 0]), e.encodePlan(s, y, i);\n  }, e.swapERC20CallParameters = function (n, i) {\n    var r = new v(),\n      s = new S(n, i),\n      y = s.trade.inputAmount.currency;\n    y.isNative && i.inputTokenPermit && a(!1), i.inputTokenPermit && function (e, n) {\n      e.addCommand(t.PERMIT, [n, n.signature]);\n    }(r, i.inputTokenPermit);\n    var u = p.BigNumber.from(y.isNative ? s.trade.maximumAmountIn(i.slippageTolerance).quotient.toString() : 0);\n    return s.encode(r, {\n      allowRevert: !1\n    }), e.encodePlan(r, u, {\n      deadline: i.deadlineOrPreviousBlockhash ? p.BigNumber.from(i.deadlineOrPreviousBlockhash) : void 0\n    });\n  }, e.encodePlan = function (n, t, a) {\n    void 0 === a && (a = {});\n    var i = n.commands,\n      r = n.inputs;\n    return {\n      calldata: e.INTERFACE.encodeFunctionData(a.deadline ? \"execute(bytes,bytes[],uint256)\" : \"execute(bytes,bytes[])\", a.deadline ? [i, r, a.deadline] : [i, r]),\n      value: t.toString()\n    };\n  }, e;\n}();\nO.INTERFACE = new r.Interface(i.abi);\nvar C,\n  x,\n  F = function F(e, n) {\n    n.length > 0 || a(!1), this.market = e, this.orders = n;\n  };\n(C = exports.Market || (exports.Market = {})).Foundation = \"foundation\", C.LooksRare = \"looksrare\", C.NFT20 = \"nft20\", C.NFTX = \"nftx\", C.Seaport = \"seaport\", C.Sudoswap = \"Sudoswap\", C.Cryptopunks = \"cryptopunks\", C.X2Y2 = \"x2y2\", (x = exports.TokenType || (exports.TokenType = {})).ERC721 = \"ERC721\", x.ERC1155 = \"ERC1155\", x.Cryptopunk = \"Cryptopunk\";\nvar P = function (e) {\n  function n(n) {\n    return e.call(this, exports.Market.Cryptopunks, n) || this;\n  }\n  l(n, e);\n  var a = n.prototype;\n  return a.encode = function (e, n) {\n    for (var a, i = c(this.orders); !(a = i()).done;) {\n      var r = a.value;\n      e.addCommand(t.CRYPTOPUNKS, [r.tokenId, r.recipient, r.value], n.allowRevert);\n    }\n  }, a.getBuyItems = function () {\n    for (var e, t = [], a = c(this.orders); !(e = a()).done;) {\n      t.push({\n        tokenAddress: n.CRYPTOPUNK_ADDRESS,\n        tokenId: e.value.tokenId,\n        tokenType: exports.TokenType.Cryptopunk\n      });\n    }\n    return t;\n  }, a.getTotalPrice = function () {\n    for (var e, n = p.BigNumber.from(0), t = c(this.orders); !(e = t()).done;) {\n      n = n.add(e.value.value);\n    }\n    return n;\n  }, n;\n}(F);\nP.CRYPTOPUNK_ADDRESS = \"0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb\";\nvar E = [{\n    inputs: [{\n      internalType: \"address payable\",\n      name: \"treasury\",\n      type: \"address\"\n    }, {\n      internalType: \"address\",\n      name: \"feth\",\n      type: \"address\"\n    }, {\n      internalType: \"address\",\n      name: \"royaltyRegistry\",\n      type: \"address\"\n    }, {\n      internalType: \"uint256\",\n      name: \"duration\",\n      type: \"uint256\"\n    }],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\"\n  }, {\n    inputs: [],\n    name: \"FoundationTreasuryNode_Address_Is_Not_A_Contract\",\n    type: \"error\"\n  }, {\n    inputs: [],\n    name: \"FoundationTreasuryNode_Caller_Not_Admin\",\n    type: \"error\"\n  }, {\n    inputs: [{\n      internalType: \"uint256\",\n      name: \"buyPrice\",\n      type: \"uint256\"\n    }],\n    name: \"NFTMarketBuyPrice_Cannot_Buy_At_Lower_Price\",\n    type: \"error\"\n  }, {\n    inputs: [],\n    name: \"NFTMarketBuyPrice_Cannot_Buy_Unset_Price\",\n    type: \"error\"\n  }, {\n    inputs: [],\n    name: \"NFTMarketBuyPrice_Cannot_Cancel_Unset_Price\",\n    type: \"error\"\n  }, {\n    inputs: [{\n      internalType: \"address\",\n      name: \"owner\",\n      type: \"address\"\n    }],\n    name: \"NFTMarketBuyPrice_Only_Owner_Can_Cancel_Price\",\n    type: \"error\"\n  }, {\n    inputs: [{\n      internalType: \"address\",\n      name: \"owner\",\n      type: \"address\"\n    }],\n    name: \"NFTMarketBuyPrice_Only_Owner_Can_Set_Price\",\n    type: \"error\"\n  }, {\n    inputs: [],\n    name: \"NFTMarketBuyPrice_Price_Already_Set\",\n    type: \"error\"\n  }, {\n    inputs: [],\n    name: \"NFTMarketBuyPrice_Price_Too_High\",\n    type: \"error\"\n  }, {\n    inputs: [{\n      internalType: \"address\",\n      name: \"seller\",\n      type: \"address\"\n    }],\n    name: \"NFTMarketBuyPrice_Seller_Mismatch\",\n    type: \"error\"\n  }, {\n    inputs: [],\n    name: \"NFTMarketCore_FETH_Address_Is_Not_A_Contract\",\n    type: \"error\"\n  }, {\n    inputs: [],\n    name: \"NFTMarketCore_Only_FETH_Can_Transfer_ETH\",\n    type: \"error\"\n  }, {\n    inputs: [],\n    name: \"NFTMarketCore_Seller_Not_Found\",\n    type: \"error\"\n  }, {\n    inputs: [],\n    name: \"NFTMarketFees_Address_Does_Not_Support_IRoyaltyRegistry\",\n    type: \"error\"\n  }, {\n    inputs: [],\n    name: \"NFTMarketOffer_Cannot_Be_Made_While_In_Auction\",\n    type: \"error\"\n  }, {\n    inputs: [{\n      internalType: \"uint256\",\n      name: \"currentOfferAmount\",\n      type: \"uint256\"\n    }],\n    name: \"NFTMarketOffer_Offer_Below_Min_Amount\",\n    type: \"error\"\n  }, {\n    inputs: [{\n      internalType: \"uint256\",\n      name: \"expiry\",\n      type: \"uint256\"\n    }],\n    name: \"NFTMarketOffer_Offer_Expired\",\n    type: \"error\"\n  }, {\n    inputs: [{\n      internalType: \"address\",\n      name: \"currentOfferFrom\",\n      type: \"address\"\n    }],\n    name: \"NFTMarketOffer_Offer_From_Does_Not_Match\",\n    type: \"error\"\n  }, {\n    inputs: [{\n      internalType: \"uint256\",\n      name: \"minOfferAmount\",\n      type: \"uint256\"\n    }],\n    name: \"NFTMarketOffer_Offer_Must_Be_At_Least_Min_Amount\",\n    type: \"error\"\n  }, {\n    inputs: [],\n    name: \"NFTMarketOffer_Provided_Contract_And_TokenId_Count_Must_Match\",\n    type: \"error\"\n  }, {\n    inputs: [],\n    name: \"NFTMarketOffer_Reason_Required\",\n    type: \"error\"\n  }, {\n    inputs: [{\n      internalType: \"uint256\",\n      name: \"auctionId\",\n      type: \"uint256\"\n    }],\n    name: \"NFTMarketReserveAuction_Already_Listed\",\n    type: \"error\"\n  }, {\n    inputs: [{\n      internalType: \"uint256\",\n      name: \"minAmount\",\n      type: \"uint256\"\n    }],\n    name: \"NFTMarketReserveAuction_Bid_Must_Be_At_Least_Min_Amount\",\n    type: \"error\"\n  }, {\n    inputs: [],\n    name: \"NFTMarketReserveAuction_Cannot_Admin_Cancel_Without_Reason\",\n    type: \"error\"\n  }, {\n    inputs: [{\n      internalType: \"uint256\",\n      name: \"reservePrice\",\n      type: \"uint256\"\n    }],\n    name: \"NFTMarketReserveAuction_Cannot_Bid_Lower_Than_Reserve_Price\",\n    type: \"error\"\n  }, {\n    inputs: [{\n      internalType: \"uint256\",\n      name: \"endTime\",\n      type: \"uint256\"\n    }],\n    name: \"NFTMarketReserveAuction_Cannot_Bid_On_Ended_Auction\",\n    type: \"error\"\n  }, {\n    inputs: [],\n    name: \"NFTMarketReserveAuction_Cannot_Bid_On_Nonexistent_Auction\",\n    type: \"error\"\n  }, {\n    inputs: [],\n    name: \"NFTMarketReserveAuction_Cannot_Cancel_Nonexistent_Auction\",\n    type: \"error\"\n  }, {\n    inputs: [],\n    name: \"NFTMarketReserveAuction_Cannot_Finalize_Already_Settled_Auction\",\n    type: \"error\"\n  }, {\n    inputs: [{\n      internalType: \"uint256\",\n      name: \"endTime\",\n      type: \"uint256\"\n    }],\n    name: \"NFTMarketReserveAuction_Cannot_Finalize_Auction_In_Progress\",\n    type: \"error\"\n  }, {\n    inputs: [],\n    name: \"NFTMarketReserveAuction_Cannot_Rebid_Over_Outstanding_Bid\",\n    type: \"error\"\n  }, {\n    inputs: [],\n    name: \"NFTMarketReserveAuction_Cannot_Update_Auction_In_Progress\",\n    type: \"error\"\n  }, {\n    inputs: [{\n      internalType: \"uint256\",\n      name: \"maxDuration\",\n      type: \"uint256\"\n    }],\n    name: \"NFTMarketReserveAuction_Exceeds_Max_Duration\",\n    type: \"error\"\n  }, {\n    inputs: [{\n      internalType: \"uint256\",\n      name: \"extensionDuration\",\n      type: \"uint256\"\n    }],\n    name: \"NFTMarketReserveAuction_Less_Than_Extension_Duration\",\n    type: \"error\"\n  }, {\n    inputs: [],\n    name: \"NFTMarketReserveAuction_Must_Set_Non_Zero_Reserve_Price\",\n    type: \"error\"\n  }, {\n    inputs: [{\n      internalType: \"address\",\n      name: \"seller\",\n      type: \"address\"\n    }],\n    name: \"NFTMarketReserveAuction_Not_Matching_Seller\",\n    type: \"error\"\n  }, {\n    inputs: [{\n      internalType: \"address\",\n      name: \"owner\",\n      type: \"address\"\n    }],\n    name: \"NFTMarketReserveAuction_Only_Owner_Can_Update_Auction\",\n    type: \"error\"\n  }, {\n    inputs: [],\n    name: \"NFTMarketReserveAuction_Price_Already_Set\",\n    type: \"error\"\n  }, {\n    inputs: [],\n    name: \"NFTMarketReserveAuction_Too_Much_Value_Provided\",\n    type: \"error\"\n  }, {\n    anonymous: !1,\n    inputs: [{\n      indexed: !0,\n      internalType: \"address\",\n      name: \"nftContract\",\n      type: \"address\"\n    }, {\n      indexed: !0,\n      internalType: \"uint256\",\n      name: \"tokenId\",\n      type: \"uint256\"\n    }, {\n      indexed: !0,\n      internalType: \"address\",\n      name: \"seller\",\n      type: \"address\"\n    }, {\n      indexed: !1,\n      internalType: \"address\",\n      name: \"buyer\",\n      type: \"address\"\n    }, {\n      indexed: !1,\n      internalType: \"uint256\",\n      name: \"protocolFee\",\n      type: \"uint256\"\n    }, {\n      indexed: !1,\n      internalType: \"uint256\",\n      name: \"creatorFee\",\n      type: \"uint256\"\n    }, {\n      indexed: !1,\n      internalType: \"uint256\",\n      name: \"sellerRev\",\n      type: \"uint256\"\n    }],\n    name: \"BuyPriceAccepted\",\n    type: \"event\"\n  }, {\n    anonymous: !1,\n    inputs: [{\n      indexed: !0,\n      internalType: \"address\",\n      name: \"nftContract\",\n      type: \"address\"\n    }, {\n      indexed: !0,\n      internalType: \"uint256\",\n      name: \"tokenId\",\n      type: \"uint256\"\n    }],\n    name: \"BuyPriceCanceled\",\n    type: \"event\"\n  }, {\n    anonymous: !1,\n    inputs: [{\n      indexed: !0,\n      internalType: \"address\",\n      name: \"nftContract\",\n      type: \"address\"\n    }, {\n      indexed: !0,\n      internalType: \"uint256\",\n      name: \"tokenId\",\n      type: \"uint256\"\n    }],\n    name: \"BuyPriceInvalidated\",\n    type: \"event\"\n  }, {\n    anonymous: !1,\n    inputs: [{\n      indexed: !0,\n      internalType: \"address\",\n      name: \"nftContract\",\n      type: \"address\"\n    }, {\n      indexed: !0,\n      internalType: \"uint256\",\n      name: \"tokenId\",\n      type: \"uint256\"\n    }, {\n      indexed: !0,\n      internalType: \"address\",\n      name: \"seller\",\n      type: \"address\"\n    }, {\n      indexed: !1,\n      internalType: \"uint256\",\n      name: \"price\",\n      type: \"uint256\"\n    }],\n    name: \"BuyPriceSet\",\n    type: \"event\"\n  }, {\n    anonymous: !1,\n    inputs: [{\n      indexed: !0,\n      internalType: \"address\",\n      name: \"nftContract\",\n      type: \"address\"\n    }, {\n      indexed: !0,\n      internalType: \"uint256\",\n      name: \"tokenId\",\n      type: \"uint256\"\n    }, {\n      indexed: !1,\n      internalType: \"address\",\n      name: \"buyReferrer\",\n      type: \"address\"\n    }, {\n      indexed: !1,\n      internalType: \"uint256\",\n      name: \"buyReferrerProtocolFee\",\n      type: \"uint256\"\n    }, {\n      indexed: !1,\n      internalType: \"uint256\",\n      name: \"buyReferrerSellerFee\",\n      type: \"uint256\"\n    }],\n    name: \"BuyReferralPaid\",\n    type: \"event\"\n  }, {\n    anonymous: !1,\n    inputs: [{\n      indexed: !1,\n      internalType: \"uint8\",\n      name: \"version\",\n      type: \"uint8\"\n    }],\n    name: \"Initialized\",\n    type: \"event\"\n  }, {\n    anonymous: !1,\n    inputs: [{\n      indexed: !0,\n      internalType: \"address\",\n      name: \"nftContract\",\n      type: \"address\"\n    }, {\n      indexed: !0,\n      internalType: \"uint256\",\n      name: \"tokenId\",\n      type: \"uint256\"\n    }, {\n      indexed: !0,\n      internalType: \"address\",\n      name: \"buyer\",\n      type: \"address\"\n    }, {\n      indexed: !1,\n      internalType: \"address\",\n      name: \"seller\",\n      type: \"address\"\n    }, {\n      indexed: !1,\n      internalType: \"uint256\",\n      name: \"protocolFee\",\n      type: \"uint256\"\n    }, {\n      indexed: !1,\n      internalType: \"uint256\",\n      name: \"creatorFee\",\n      type: \"uint256\"\n    }, {\n      indexed: !1,\n      internalType: \"uint256\",\n      name: \"sellerRev\",\n      type: \"uint256\"\n    }],\n    name: \"OfferAccepted\",\n    type: \"event\"\n  }, {\n    anonymous: !1,\n    inputs: [{\n      indexed: !0,\n      internalType: \"address\",\n      name: \"nftContract\",\n      type: \"address\"\n    }, {\n      indexed: !0,\n      internalType: \"uint256\",\n      name: \"tokenId\",\n      type: \"uint256\"\n    }, {\n      indexed: !1,\n      internalType: \"string\",\n      name: \"reason\",\n      type: \"string\"\n    }],\n    name: \"OfferCanceledByAdmin\",\n    type: \"event\"\n  }, {\n    anonymous: !1,\n    inputs: [{\n      indexed: !0,\n      internalType: \"address\",\n      name: \"nftContract\",\n      type: \"address\"\n    }, {\n      indexed: !0,\n      internalType: \"uint256\",\n      name: \"tokenId\",\n      type: \"uint256\"\n    }],\n    name: \"OfferInvalidated\",\n    type: \"event\"\n  }, {\n    anonymous: !1,\n    inputs: [{\n      indexed: !0,\n      internalType: \"address\",\n      name: \"nftContract\",\n      type: \"address\"\n    }, {\n      indexed: !0,\n      internalType: \"uint256\",\n      name: \"tokenId\",\n      type: \"uint256\"\n    }, {\n      indexed: !0,\n      internalType: \"address\",\n      name: \"buyer\",\n      type: \"address\"\n    }, {\n      indexed: !1,\n      internalType: \"uint256\",\n      name: \"amount\",\n      type: \"uint256\"\n    }, {\n      indexed: !1,\n      internalType: \"uint256\",\n      name: \"expiration\",\n      type: \"uint256\"\n    }],\n    name: \"OfferMade\",\n    type: \"event\"\n  }, {\n    anonymous: !1,\n    inputs: [{\n      indexed: !0,\n      internalType: \"uint256\",\n      name: \"auctionId\",\n      type: \"uint256\"\n    }, {\n      indexed: !0,\n      internalType: \"address\",\n      name: \"bidder\",\n      type: \"address\"\n    }, {\n      indexed: !1,\n      internalType: \"uint256\",\n      name: \"amount\",\n      type: \"uint256\"\n    }, {\n      indexed: !1,\n      internalType: \"uint256\",\n      name: \"endTime\",\n      type: \"uint256\"\n    }],\n    name: \"ReserveAuctionBidPlaced\",\n    type: \"event\"\n  }, {\n    anonymous: !1,\n    inputs: [{\n      indexed: !0,\n      internalType: \"uint256\",\n      name: \"auctionId\",\n      type: \"uint256\"\n    }],\n    name: \"ReserveAuctionCanceled\",\n    type: \"event\"\n  }, {\n    anonymous: !1,\n    inputs: [{\n      indexed: !0,\n      internalType: \"uint256\",\n      name: \"auctionId\",\n      type: \"uint256\"\n    }, {\n      indexed: !1,\n      internalType: \"string\",\n      name: \"reason\",\n      type: \"string\"\n    }],\n    name: \"ReserveAuctionCanceledByAdmin\",\n    type: \"event\"\n  }, {\n    anonymous: !1,\n    inputs: [{\n      indexed: !0,\n      internalType: \"address\",\n      name: \"seller\",\n      type: \"address\"\n    }, {\n      indexed: !0,\n      internalType: \"address\",\n      name: \"nftContract\",\n      type: \"address\"\n    }, {\n      indexed: !0,\n      internalType: \"uint256\",\n      name: \"tokenId\",\n      type: \"uint256\"\n    }, {\n      indexed: !1,\n      internalType: \"uint256\",\n      name: \"duration\",\n      type: \"uint256\"\n    }, {\n      indexed: !1,\n      internalType: \"uint256\",\n      name: \"extensionDuration\",\n      type: \"uint256\"\n    }, {\n      indexed: !1,\n      internalType: \"uint256\",\n      name: \"reservePrice\",\n      type: \"uint256\"\n    }, {\n      indexed: !1,\n      internalType: \"uint256\",\n      name: \"auctionId\",\n      type: \"uint256\"\n    }],\n    name: \"ReserveAuctionCreated\",\n    type: \"event\"\n  }, {\n    anonymous: !1,\n    inputs: [{\n      indexed: !0,\n      internalType: \"uint256\",\n      name: \"auctionId\",\n      type: \"uint256\"\n    }, {\n      indexed: !0,\n      internalType: \"address\",\n      name: \"seller\",\n      type: \"address\"\n    }, {\n      indexed: !0,\n      internalType: \"address\",\n      name: \"bidder\",\n      type: \"address\"\n    }, {\n      indexed: !1,\n      internalType: \"uint256\",\n      name: \"protocolFee\",\n      type: \"uint256\"\n    }, {\n      indexed: !1,\n      internalType: \"uint256\",\n      name: \"creatorFee\",\n      type: \"uint256\"\n    }, {\n      indexed: !1,\n      internalType: \"uint256\",\n      name: \"sellerRev\",\n      type: \"uint256\"\n    }],\n    name: \"ReserveAuctionFinalized\",\n    type: \"event\"\n  }, {\n    anonymous: !1,\n    inputs: [{\n      indexed: !0,\n      internalType: \"uint256\",\n      name: \"auctionId\",\n      type: \"uint256\"\n    }],\n    name: \"ReserveAuctionInvalidated\",\n    type: \"event\"\n  }, {\n    anonymous: !1,\n    inputs: [{\n      indexed: !0,\n      internalType: \"uint256\",\n      name: \"auctionId\",\n      type: \"uint256\"\n    }, {\n      indexed: !1,\n      internalType: \"uint256\",\n      name: \"reservePrice\",\n      type: \"uint256\"\n    }],\n    name: \"ReserveAuctionUpdated\",\n    type: \"event\"\n  }, {\n    anonymous: !1,\n    inputs: [{\n      indexed: !0,\n      internalType: \"address\",\n      name: \"user\",\n      type: \"address\"\n    }, {\n      indexed: !1,\n      internalType: \"uint256\",\n      name: \"amount\",\n      type: \"uint256\"\n    }],\n    name: \"WithdrawalToFETH\",\n    type: \"event\"\n  }, {\n    inputs: [{\n      internalType: \"address\",\n      name: \"nftContract\",\n      type: \"address\"\n    }, {\n      internalType: \"uint256\",\n      name: \"tokenId\",\n      type: \"uint256\"\n    }, {\n      internalType: \"address\",\n      name: \"offerFrom\",\n      type: \"address\"\n    }, {\n      internalType: \"uint256\",\n      name: \"minAmount\",\n      type: \"uint256\"\n    }],\n    name: \"acceptOffer\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"address[]\",\n      name: \"nftContracts\",\n      type: \"address[]\"\n    }, {\n      internalType: \"uint256[]\",\n      name: \"tokenIds\",\n      type: \"uint256[]\"\n    }, {\n      internalType: \"string\",\n      name: \"reason\",\n      type: \"string\"\n    }],\n    name: \"adminCancelOffers\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"uint256\",\n      name: \"auctionId\",\n      type: \"uint256\"\n    }, {\n      internalType: \"string\",\n      name: \"reason\",\n      type: \"string\"\n    }],\n    name: \"adminCancelReserveAuction\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"address\",\n      name: \"nftContract\",\n      type: \"address\"\n    }, {\n      internalType: \"uint256\",\n      name: \"tokenId\",\n      type: \"uint256\"\n    }, {\n      internalType: \"uint256\",\n      name: \"maxPrice\",\n      type: \"uint256\"\n    }],\n    name: \"buy\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"address\",\n      name: \"nftContract\",\n      type: \"address\"\n    }, {\n      internalType: \"uint256\",\n      name: \"tokenId\",\n      type: \"uint256\"\n    }, {\n      internalType: \"uint256\",\n      name: \"maxPrice\",\n      type: \"uint256\"\n    }, {\n      internalType: \"address payable\",\n      name: \"referrer\",\n      type: \"address\"\n    }],\n    name: \"buyV2\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"address\",\n      name: \"nftContract\",\n      type: \"address\"\n    }, {\n      internalType: \"uint256\",\n      name: \"tokenId\",\n      type: \"uint256\"\n    }],\n    name: \"cancelBuyPrice\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"uint256\",\n      name: \"auctionId\",\n      type: \"uint256\"\n    }],\n    name: \"cancelReserveAuction\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"address\",\n      name: \"nftContract\",\n      type: \"address\"\n    }, {\n      internalType: \"uint256\",\n      name: \"tokenId\",\n      type: \"uint256\"\n    }, {\n      internalType: \"uint256\",\n      name: \"reservePrice\",\n      type: \"uint256\"\n    }],\n    name: \"createReserveAuction\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"uint256\",\n      name: \"auctionId\",\n      type: \"uint256\"\n    }],\n    name: \"finalizeReserveAuction\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"address\",\n      name: \"nftContract\",\n      type: \"address\"\n    }, {\n      internalType: \"uint256\",\n      name: \"tokenId\",\n      type: \"uint256\"\n    }],\n    name: \"getBuyPrice\",\n    outputs: [{\n      internalType: \"address\",\n      name: \"seller\",\n      type: \"address\"\n    }, {\n      internalType: \"uint256\",\n      name: \"price\",\n      type: \"uint256\"\n    }],\n    stateMutability: \"view\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"address\",\n      name: \"nftContract\",\n      type: \"address\"\n    }, {\n      internalType: \"uint256\",\n      name: \"tokenId\",\n      type: \"uint256\"\n    }, {\n      internalType: \"uint256\",\n      name: \"price\",\n      type: \"uint256\"\n    }],\n    name: \"getFeesAndRecipients\",\n    outputs: [{\n      internalType: \"uint256\",\n      name: \"protocolFee\",\n      type: \"uint256\"\n    }, {\n      internalType: \"uint256\",\n      name: \"creatorRev\",\n      type: \"uint256\"\n    }, {\n      internalType: \"address payable[]\",\n      name: \"creatorRecipients\",\n      type: \"address[]\"\n    }, {\n      internalType: \"uint256[]\",\n      name: \"creatorShares\",\n      type: \"uint256[]\"\n    }, {\n      internalType: \"uint256\",\n      name: \"sellerRev\",\n      type: \"uint256\"\n    }, {\n      internalType: \"address payable\",\n      name: \"owner\",\n      type: \"address\"\n    }],\n    stateMutability: \"view\",\n    type: \"function\"\n  }, {\n    inputs: [],\n    name: \"getFethAddress\",\n    outputs: [{\n      internalType: \"address\",\n      name: \"fethAddress\",\n      type: \"address\"\n    }],\n    stateMutability: \"view\",\n    type: \"function\"\n  }, {\n    inputs: [],\n    name: \"getFoundationTreasury\",\n    outputs: [{\n      internalType: \"address payable\",\n      name: \"treasuryAddress\",\n      type: \"address\"\n    }],\n    stateMutability: \"view\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"address\",\n      name: \"nftContract\",\n      type: \"address\"\n    }, {\n      internalType: \"uint256\",\n      name: \"tokenId\",\n      type: \"uint256\"\n    }],\n    name: \"getImmutableRoyalties\",\n    outputs: [{\n      internalType: \"address payable[]\",\n      name: \"recipients\",\n      type: \"address[]\"\n    }, {\n      internalType: \"uint256[]\",\n      name: \"splitPerRecipientInBasisPoints\",\n      type: \"uint256[]\"\n    }],\n    stateMutability: \"view\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"uint256\",\n      name: \"auctionId\",\n      type: \"uint256\"\n    }],\n    name: \"getMinBidAmount\",\n    outputs: [{\n      internalType: \"uint256\",\n      name: \"minimum\",\n      type: \"uint256\"\n    }],\n    stateMutability: \"view\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"address\",\n      name: \"nftContract\",\n      type: \"address\"\n    }, {\n      internalType: \"uint256\",\n      name: \"tokenId\",\n      type: \"uint256\"\n    }],\n    name: \"getMinOfferAmount\",\n    outputs: [{\n      internalType: \"uint256\",\n      name: \"minimum\",\n      type: \"uint256\"\n    }],\n    stateMutability: \"view\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"address\",\n      name: \"nftContract\",\n      type: \"address\"\n    }, {\n      internalType: \"uint256\",\n      name: \"tokenId\",\n      type: \"uint256\"\n    }, {\n      internalType: \"address payable\",\n      name: \"creator\",\n      type: \"address\"\n    }],\n    name: \"getMutableRoyalties\",\n    outputs: [{\n      internalType: \"address payable[]\",\n      name: \"recipients\",\n      type: \"address[]\"\n    }, {\n      internalType: \"uint256[]\",\n      name: \"splitPerRecipientInBasisPoints\",\n      type: \"uint256[]\"\n    }],\n    stateMutability: \"view\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"address\",\n      name: \"nftContract\",\n      type: \"address\"\n    }, {\n      internalType: \"uint256\",\n      name: \"tokenId\",\n      type: \"uint256\"\n    }],\n    name: \"getOffer\",\n    outputs: [{\n      internalType: \"address\",\n      name: \"buyer\",\n      type: \"address\"\n    }, {\n      internalType: \"uint256\",\n      name: \"expiration\",\n      type: \"uint256\"\n    }, {\n      internalType: \"uint256\",\n      name: \"amount\",\n      type: \"uint256\"\n    }],\n    stateMutability: \"view\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"address\",\n      name: \"nftContract\",\n      type: \"address\"\n    }, {\n      internalType: \"uint256\",\n      name: \"tokenId\",\n      type: \"uint256\"\n    }],\n    name: \"getOfferReferrer\",\n    outputs: [{\n      internalType: \"address payable\",\n      name: \"referrer\",\n      type: \"address\"\n    }],\n    stateMutability: \"view\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"uint256\",\n      name: \"auctionId\",\n      type: \"uint256\"\n    }],\n    name: \"getReserveAuction\",\n    outputs: [{\n      components: [{\n        internalType: \"address\",\n        name: \"nftContract\",\n        type: \"address\"\n      }, {\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\"\n      }, {\n        internalType: \"address payable\",\n        name: \"seller\",\n        type: \"address\"\n      }, {\n        internalType: \"uint256\",\n        name: \"duration\",\n        type: \"uint256\"\n      }, {\n        internalType: \"uint256\",\n        name: \"extensionDuration\",\n        type: \"uint256\"\n      }, {\n        internalType: \"uint256\",\n        name: \"endTime\",\n        type: \"uint256\"\n      }, {\n        internalType: \"address payable\",\n        name: \"bidder\",\n        type: \"address\"\n      }, {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\"\n      }],\n      internalType: \"struct NFTMarketReserveAuction.ReserveAuction\",\n      name: \"auction\",\n      type: \"tuple\"\n    }],\n    stateMutability: \"view\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"uint256\",\n      name: \"auctionId\",\n      type: \"uint256\"\n    }],\n    name: \"getReserveAuctionBidReferrer\",\n    outputs: [{\n      internalType: \"address payable\",\n      name: \"referrer\",\n      type: \"address\"\n    }],\n    stateMutability: \"view\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"address\",\n      name: \"nftContract\",\n      type: \"address\"\n    }, {\n      internalType: \"uint256\",\n      name: \"tokenId\",\n      type: \"uint256\"\n    }],\n    name: \"getReserveAuctionIdFor\",\n    outputs: [{\n      internalType: \"uint256\",\n      name: \"auctionId\",\n      type: \"uint256\"\n    }],\n    stateMutability: \"view\",\n    type: \"function\"\n  }, {\n    inputs: [],\n    name: \"getRoyaltyRegistry\",\n    outputs: [{\n      internalType: \"address\",\n      name: \"registry\",\n      type: \"address\"\n    }],\n    stateMutability: \"view\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"address\",\n      name: \"nftContract\",\n      type: \"address\"\n    }, {\n      internalType: \"uint256\",\n      name: \"tokenId\",\n      type: \"uint256\"\n    }],\n    name: \"getTokenCreator\",\n    outputs: [{\n      internalType: \"address payable\",\n      name: \"creator\",\n      type: \"address\"\n    }],\n    stateMutability: \"view\",\n    type: \"function\"\n  }, {\n    inputs: [],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"address\",\n      name: \"nftContract\",\n      type: \"address\"\n    }, {\n      internalType: \"uint256\",\n      name: \"tokenId\",\n      type: \"uint256\"\n    }, {\n      internalType: \"uint256\",\n      name: \"amount\",\n      type: \"uint256\"\n    }],\n    name: \"makeOffer\",\n    outputs: [{\n      internalType: \"uint256\",\n      name: \"expiration\",\n      type: \"uint256\"\n    }],\n    stateMutability: \"payable\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"address\",\n      name: \"nftContract\",\n      type: \"address\"\n    }, {\n      internalType: \"uint256\",\n      name: \"tokenId\",\n      type: \"uint256\"\n    }, {\n      internalType: \"uint256\",\n      name: \"amount\",\n      type: \"uint256\"\n    }, {\n      internalType: \"address payable\",\n      name: \"referrer\",\n      type: \"address\"\n    }],\n    name: \"makeOfferV2\",\n    outputs: [{\n      internalType: \"uint256\",\n      name: \"expiration\",\n      type: \"uint256\"\n    }],\n    stateMutability: \"payable\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"uint256\",\n      name: \"auctionId\",\n      type: \"uint256\"\n    }],\n    name: \"placeBid\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"uint256\",\n      name: \"auctionId\",\n      type: \"uint256\"\n    }, {\n      internalType: \"uint256\",\n      name: \"amount\",\n      type: \"uint256\"\n    }, {\n      internalType: \"address payable\",\n      name: \"referrer\",\n      type: \"address\"\n    }],\n    name: \"placeBidV2\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"address\",\n      name: \"nftContract\",\n      type: \"address\"\n    }, {\n      internalType: \"uint256\",\n      name: \"tokenId\",\n      type: \"uint256\"\n    }, {\n      internalType: \"uint256\",\n      name: \"price\",\n      type: \"uint256\"\n    }],\n    name: \"setBuyPrice\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"uint256\",\n      name: \"auctionId\",\n      type: \"uint256\"\n    }, {\n      internalType: \"uint256\",\n      name: \"reservePrice\",\n      type: \"uint256\"\n    }],\n    name: \"updateReserveAuction\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  }, {\n    stateMutability: \"payable\",\n    type: \"receive\"\n  }],\n  h = function (e) {\n    function n(n) {\n      return e.call(this, exports.Market.Foundation, n) || this;\n    }\n    l(n, e);\n    var a = n.prototype;\n    return a.encode = function (e, a) {\n      for (var i, r = c(this.orders); !(i = r()).done;) {\n        var p = i.value,\n          s = n.INTERFACE.encodeFunctionData(\"buyV2\", [p.tokenAddress, p.tokenId, p.price, p.referrer]);\n        e.addCommand(t.FOUNDATION, [p.price, s, p.recipient, p.tokenAddress, p.tokenId], a.allowRevert);\n      }\n    }, a.getBuyItems = function () {\n      for (var e, n = [], t = c(this.orders); !(e = t()).done;) {\n        var a = e.value;\n        n.push({\n          tokenAddress: a.tokenAddress,\n          tokenId: a.tokenId,\n          tokenType: exports.TokenType.ERC721\n        });\n      }\n      return n;\n    }, a.getTotalPrice = function () {\n      for (var e, n = p.BigNumber.from(0), t = c(this.orders); !(e = t()).done;) {\n        n = n.add(e.value.price);\n      }\n      return n;\n    }, n;\n  }(F);\nh.INTERFACE = new r.Interface(E);\nvar w = [{\n    inputs: [{\n      internalType: \"address\",\n      name: \"_currencyManager\",\n      type: \"address\"\n    }, {\n      internalType: \"address\",\n      name: \"_executionManager\",\n      type: \"address\"\n    }, {\n      internalType: \"address\",\n      name: \"_royaltyFeeManager\",\n      type: \"address\"\n    }, {\n      internalType: \"address\",\n      name: \"_WETH\",\n      type: \"address\"\n    }, {\n      internalType: \"address\",\n      name: \"_protocolFeeRecipient\",\n      type: \"address\"\n    }],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\"\n  }, {\n    anonymous: !1,\n    inputs: [{\n      indexed: !0,\n      internalType: \"address\",\n      name: \"user\",\n      type: \"address\"\n    }, {\n      indexed: !1,\n      internalType: \"uint256\",\n      name: \"newMinNonce\",\n      type: \"uint256\"\n    }],\n    name: \"CancelAllOrders\",\n    type: \"event\"\n  }, {\n    anonymous: !1,\n    inputs: [{\n      indexed: !0,\n      internalType: \"address\",\n      name: \"user\",\n      type: \"address\"\n    }, {\n      indexed: !1,\n      internalType: \"uint256[]\",\n      name: \"orderNonces\",\n      type: \"uint256[]\"\n    }],\n    name: \"CancelMultipleOrders\",\n    type: \"event\"\n  }, {\n    anonymous: !1,\n    inputs: [{\n      indexed: !0,\n      internalType: \"address\",\n      name: \"currencyManager\",\n      type: \"address\"\n    }],\n    name: \"NewCurrencyManager\",\n    type: \"event\"\n  }, {\n    anonymous: !1,\n    inputs: [{\n      indexed: !0,\n      internalType: \"address\",\n      name: \"executionManager\",\n      type: \"address\"\n    }],\n    name: \"NewExecutionManager\",\n    type: \"event\"\n  }, {\n    anonymous: !1,\n    inputs: [{\n      indexed: !0,\n      internalType: \"address\",\n      name: \"protocolFeeRecipient\",\n      type: \"address\"\n    }],\n    name: \"NewProtocolFeeRecipient\",\n    type: \"event\"\n  }, {\n    anonymous: !1,\n    inputs: [{\n      indexed: !0,\n      internalType: \"address\",\n      name: \"royaltyFeeManager\",\n      type: \"address\"\n    }],\n    name: \"NewRoyaltyFeeManager\",\n    type: \"event\"\n  }, {\n    anonymous: !1,\n    inputs: [{\n      indexed: !0,\n      internalType: \"address\",\n      name: \"transferSelectorNFT\",\n      type: \"address\"\n    }],\n    name: \"NewTransferSelectorNFT\",\n    type: \"event\"\n  }, {\n    anonymous: !1,\n    inputs: [{\n      indexed: !0,\n      internalType: \"address\",\n      name: \"previousOwner\",\n      type: \"address\"\n    }, {\n      indexed: !0,\n      internalType: \"address\",\n      name: \"newOwner\",\n      type: \"address\"\n    }],\n    name: \"OwnershipTransferred\",\n    type: \"event\"\n  }, {\n    anonymous: !1,\n    inputs: [{\n      indexed: !0,\n      internalType: \"address\",\n      name: \"collection\",\n      type: \"address\"\n    }, {\n      indexed: !0,\n      internalType: \"uint256\",\n      name: \"tokenId\",\n      type: \"uint256\"\n    }, {\n      indexed: !0,\n      internalType: \"address\",\n      name: \"royaltyRecipient\",\n      type: \"address\"\n    }, {\n      indexed: !1,\n      internalType: \"address\",\n      name: \"currency\",\n      type: \"address\"\n    }, {\n      indexed: !1,\n      internalType: \"uint256\",\n      name: \"amount\",\n      type: \"uint256\"\n    }],\n    name: \"RoyaltyPayment\",\n    type: \"event\"\n  }, {\n    anonymous: !1,\n    inputs: [{\n      indexed: !1,\n      internalType: \"bytes32\",\n      name: \"orderHash\",\n      type: \"bytes32\"\n    }, {\n      indexed: !1,\n      internalType: \"uint256\",\n      name: \"orderNonce\",\n      type: \"uint256\"\n    }, {\n      indexed: !0,\n      internalType: \"address\",\n      name: \"taker\",\n      type: \"address\"\n    }, {\n      indexed: !0,\n      internalType: \"address\",\n      name: \"maker\",\n      type: \"address\"\n    }, {\n      indexed: !0,\n      internalType: \"address\",\n      name: \"strategy\",\n      type: \"address\"\n    }, {\n      indexed: !1,\n      internalType: \"address\",\n      name: \"currency\",\n      type: \"address\"\n    }, {\n      indexed: !1,\n      internalType: \"address\",\n      name: \"collection\",\n      type: \"address\"\n    }, {\n      indexed: !1,\n      internalType: \"uint256\",\n      name: \"tokenId\",\n      type: \"uint256\"\n    }, {\n      indexed: !1,\n      internalType: \"uint256\",\n      name: \"amount\",\n      type: \"uint256\"\n    }, {\n      indexed: !1,\n      internalType: \"uint256\",\n      name: \"price\",\n      type: \"uint256\"\n    }],\n    name: \"TakerAsk\",\n    type: \"event\"\n  }, {\n    anonymous: !1,\n    inputs: [{\n      indexed: !1,\n      internalType: \"bytes32\",\n      name: \"orderHash\",\n      type: \"bytes32\"\n    }, {\n      indexed: !1,\n      internalType: \"uint256\",\n      name: \"orderNonce\",\n      type: \"uint256\"\n    }, {\n      indexed: !0,\n      internalType: \"address\",\n      name: \"taker\",\n      type: \"address\"\n    }, {\n      indexed: !0,\n      internalType: \"address\",\n      name: \"maker\",\n      type: \"address\"\n    }, {\n      indexed: !0,\n      internalType: \"address\",\n      name: \"strategy\",\n      type: \"address\"\n    }, {\n      indexed: !1,\n      internalType: \"address\",\n      name: \"currency\",\n      type: \"address\"\n    }, {\n      indexed: !1,\n      internalType: \"address\",\n      name: \"collection\",\n      type: \"address\"\n    }, {\n      indexed: !1,\n      internalType: \"uint256\",\n      name: \"tokenId\",\n      type: \"uint256\"\n    }, {\n      indexed: !1,\n      internalType: \"uint256\",\n      name: \"amount\",\n      type: \"uint256\"\n    }, {\n      indexed: !1,\n      internalType: \"uint256\",\n      name: \"price\",\n      type: \"uint256\"\n    }],\n    name: \"TakerBid\",\n    type: \"event\"\n  }, {\n    inputs: [],\n    name: \"DOMAIN_SEPARATOR\",\n    outputs: [{\n      internalType: \"bytes32\",\n      name: \"\",\n      type: \"bytes32\"\n    }],\n    stateMutability: \"view\",\n    type: \"function\"\n  }, {\n    inputs: [],\n    name: \"WETH\",\n    outputs: [{\n      internalType: \"address\",\n      name: \"\",\n      type: \"address\"\n    }],\n    stateMutability: \"view\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"uint256\",\n      name: \"minNonce\",\n      type: \"uint256\"\n    }],\n    name: \"cancelAllOrdersForSender\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"uint256[]\",\n      name: \"orderNonces\",\n      type: \"uint256[]\"\n    }],\n    name: \"cancelMultipleMakerOrders\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  }, {\n    inputs: [],\n    name: \"currencyManager\",\n    outputs: [{\n      internalType: \"contract ICurrencyManager\",\n      name: \"\",\n      type: \"address\"\n    }],\n    stateMutability: \"view\",\n    type: \"function\"\n  }, {\n    inputs: [],\n    name: \"executionManager\",\n    outputs: [{\n      internalType: \"contract IExecutionManager\",\n      name: \"\",\n      type: \"address\"\n    }],\n    stateMutability: \"view\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"address\",\n      name: \"user\",\n      type: \"address\"\n    }, {\n      internalType: \"uint256\",\n      name: \"orderNonce\",\n      type: \"uint256\"\n    }],\n    name: \"isUserOrderNonceExecutedOrCancelled\",\n    outputs: [{\n      internalType: \"bool\",\n      name: \"\",\n      type: \"bool\"\n    }],\n    stateMutability: \"view\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      components: [{\n        internalType: \"bool\",\n        name: \"isOrderAsk\",\n        type: \"bool\"\n      }, {\n        internalType: \"address\",\n        name: \"taker\",\n        type: \"address\"\n      }, {\n        internalType: \"uint256\",\n        name: \"price\",\n        type: \"uint256\"\n      }, {\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\"\n      }, {\n        internalType: \"uint256\",\n        name: \"minPercentageToAsk\",\n        type: \"uint256\"\n      }, {\n        internalType: \"bytes\",\n        name: \"params\",\n        type: \"bytes\"\n      }],\n      internalType: \"struct OrderTypes.TakerOrder\",\n      name: \"takerBid\",\n      type: \"tuple\"\n    }, {\n      components: [{\n        internalType: \"bool\",\n        name: \"isOrderAsk\",\n        type: \"bool\"\n      }, {\n        internalType: \"address\",\n        name: \"signer\",\n        type: \"address\"\n      }, {\n        internalType: \"address\",\n        name: \"collection\",\n        type: \"address\"\n      }, {\n        internalType: \"uint256\",\n        name: \"price\",\n        type: \"uint256\"\n      }, {\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\"\n      }, {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\"\n      }, {\n        internalType: \"address\",\n        name: \"strategy\",\n        type: \"address\"\n      }, {\n        internalType: \"address\",\n        name: \"currency\",\n        type: \"address\"\n      }, {\n        internalType: \"uint256\",\n        name: \"nonce\",\n        type: \"uint256\"\n      }, {\n        internalType: \"uint256\",\n        name: \"startTime\",\n        type: \"uint256\"\n      }, {\n        internalType: \"uint256\",\n        name: \"endTime\",\n        type: \"uint256\"\n      }, {\n        internalType: \"uint256\",\n        name: \"minPercentageToAsk\",\n        type: \"uint256\"\n      }, {\n        internalType: \"bytes\",\n        name: \"params\",\n        type: \"bytes\"\n      }, {\n        internalType: \"uint8\",\n        name: \"v\",\n        type: \"uint8\"\n      }, {\n        internalType: \"bytes32\",\n        name: \"r\",\n        type: \"bytes32\"\n      }, {\n        internalType: \"bytes32\",\n        name: \"s\",\n        type: \"bytes32\"\n      }],\n      internalType: \"struct OrderTypes.MakerOrder\",\n      name: \"makerAsk\",\n      type: \"tuple\"\n    }],\n    name: \"matchAskWithTakerBid\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      components: [{\n        internalType: \"bool\",\n        name: \"isOrderAsk\",\n        type: \"bool\"\n      }, {\n        internalType: \"address\",\n        name: \"taker\",\n        type: \"address\"\n      }, {\n        internalType: \"uint256\",\n        name: \"price\",\n        type: \"uint256\"\n      }, {\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\"\n      }, {\n        internalType: \"uint256\",\n        name: \"minPercentageToAsk\",\n        type: \"uint256\"\n      }, {\n        internalType: \"bytes\",\n        name: \"params\",\n        type: \"bytes\"\n      }],\n      internalType: \"struct OrderTypes.TakerOrder\",\n      name: \"takerBid\",\n      type: \"tuple\"\n    }, {\n      components: [{\n        internalType: \"bool\",\n        name: \"isOrderAsk\",\n        type: \"bool\"\n      }, {\n        internalType: \"address\",\n        name: \"signer\",\n        type: \"address\"\n      }, {\n        internalType: \"address\",\n        name: \"collection\",\n        type: \"address\"\n      }, {\n        internalType: \"uint256\",\n        name: \"price\",\n        type: \"uint256\"\n      }, {\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\"\n      }, {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\"\n      }, {\n        internalType: \"address\",\n        name: \"strategy\",\n        type: \"address\"\n      }, {\n        internalType: \"address\",\n        name: \"currency\",\n        type: \"address\"\n      }, {\n        internalType: \"uint256\",\n        name: \"nonce\",\n        type: \"uint256\"\n      }, {\n        internalType: \"uint256\",\n        name: \"startTime\",\n        type: \"uint256\"\n      }, {\n        internalType: \"uint256\",\n        name: \"endTime\",\n        type: \"uint256\"\n      }, {\n        internalType: \"uint256\",\n        name: \"minPercentageToAsk\",\n        type: \"uint256\"\n      }, {\n        internalType: \"bytes\",\n        name: \"params\",\n        type: \"bytes\"\n      }, {\n        internalType: \"uint8\",\n        name: \"v\",\n        type: \"uint8\"\n      }, {\n        internalType: \"bytes32\",\n        name: \"r\",\n        type: \"bytes32\"\n      }, {\n        internalType: \"bytes32\",\n        name: \"s\",\n        type: \"bytes32\"\n      }],\n      internalType: \"struct OrderTypes.MakerOrder\",\n      name: \"makerAsk\",\n      type: \"tuple\"\n    }],\n    name: \"matchAskWithTakerBidUsingETHAndWETH\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      components: [{\n        internalType: \"bool\",\n        name: \"isOrderAsk\",\n        type: \"bool\"\n      }, {\n        internalType: \"address\",\n        name: \"taker\",\n        type: \"address\"\n      }, {\n        internalType: \"uint256\",\n        name: \"price\",\n        type: \"uint256\"\n      }, {\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\"\n      }, {\n        internalType: \"uint256\",\n        name: \"minPercentageToAsk\",\n        type: \"uint256\"\n      }, {\n        internalType: \"bytes\",\n        name: \"params\",\n        type: \"bytes\"\n      }],\n      internalType: \"struct OrderTypes.TakerOrder\",\n      name: \"takerAsk\",\n      type: \"tuple\"\n    }, {\n      components: [{\n        internalType: \"bool\",\n        name: \"isOrderAsk\",\n        type: \"bool\"\n      }, {\n        internalType: \"address\",\n        name: \"signer\",\n        type: \"address\"\n      }, {\n        internalType: \"address\",\n        name: \"collection\",\n        type: \"address\"\n      }, {\n        internalType: \"uint256\",\n        name: \"price\",\n        type: \"uint256\"\n      }, {\n        internalType: \"uint256\",\n        name: \"tokenId\",\n        type: \"uint256\"\n      }, {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\"\n      }, {\n        internalType: \"address\",\n        name: \"strategy\",\n        type: \"address\"\n      }, {\n        internalType: \"address\",\n        name: \"currency\",\n        type: \"address\"\n      }, {\n        internalType: \"uint256\",\n        name: \"nonce\",\n        type: \"uint256\"\n      }, {\n        internalType: \"uint256\",\n        name: \"startTime\",\n        type: \"uint256\"\n      }, {\n        internalType: \"uint256\",\n        name: \"endTime\",\n        type: \"uint256\"\n      }, {\n        internalType: \"uint256\",\n        name: \"minPercentageToAsk\",\n        type: \"uint256\"\n      }, {\n        internalType: \"bytes\",\n        name: \"params\",\n        type: \"bytes\"\n      }, {\n        internalType: \"uint8\",\n        name: \"v\",\n        type: \"uint8\"\n      }, {\n        internalType: \"bytes32\",\n        name: \"r\",\n        type: \"bytes32\"\n      }, {\n        internalType: \"bytes32\",\n        name: \"s\",\n        type: \"bytes32\"\n      }],\n      internalType: \"struct OrderTypes.MakerOrder\",\n      name: \"makerBid\",\n      type: \"tuple\"\n    }],\n    name: \"matchBidWithTakerAsk\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  }, {\n    inputs: [],\n    name: \"owner\",\n    outputs: [{\n      internalType: \"address\",\n      name: \"\",\n      type: \"address\"\n    }],\n    stateMutability: \"view\",\n    type: \"function\"\n  }, {\n    inputs: [],\n    name: \"protocolFeeRecipient\",\n    outputs: [{\n      internalType: \"address\",\n      name: \"\",\n      type: \"address\"\n    }],\n    stateMutability: \"view\",\n    type: \"function\"\n  }, {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  }, {\n    inputs: [],\n    name: \"royaltyFeeManager\",\n    outputs: [{\n      internalType: \"contract IRoyaltyFeeManager\",\n      name: \"\",\n      type: \"address\"\n    }],\n    stateMutability: \"view\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"address\",\n      name: \"newOwner\",\n      type: \"address\"\n    }],\n    name: \"transferOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  }, {\n    inputs: [],\n    name: \"transferSelectorNFT\",\n    outputs: [{\n      internalType: \"contract ITransferSelectorNFT\",\n      name: \"\",\n      type: \"address\"\n    }],\n    stateMutability: \"view\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"address\",\n      name: \"_currencyManager\",\n      type: \"address\"\n    }],\n    name: \"updateCurrencyManager\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"address\",\n      name: \"_executionManager\",\n      type: \"address\"\n    }],\n    name: \"updateExecutionManager\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"address\",\n      name: \"_protocolFeeRecipient\",\n      type: \"address\"\n    }],\n    name: \"updateProtocolFeeRecipient\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"address\",\n      name: \"_royaltyFeeManager\",\n      type: \"address\"\n    }],\n    name: \"updateRoyaltyFeeManager\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"address\",\n      name: \"_transferSelectorNFT\",\n      type: \"address\"\n    }],\n    name: \"updateTransferSelectorNFT\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"address\",\n      name: \"\",\n      type: \"address\"\n    }],\n    name: \"userMinOrderNonce\",\n    outputs: [{\n      internalType: \"uint256\",\n      name: \"\",\n      type: \"uint256\"\n    }],\n    stateMutability: \"view\",\n    type: \"function\"\n  }],\n  g = function (e) {\n    function n(n) {\n      return e.call(this, exports.Market.LooksRare, n) || this;\n    }\n    l(n, e);\n    var i = n.prototype;\n    return i.encode = function (e, i) {\n      for (var r, p = c(this.orders); !(r = p()).done;) {\n        var s = r.value,\n          y = n.INTERFACE.encodeFunctionData(\"matchAskWithTakerBidUsingETHAndWETH\", [s.takerOrder, s.makerOrder]);\n        s.tokenType == exports.TokenType.ERC721 ? (1 != s.makerOrder.amount && a(!1), e.addCommand(t.LOOKS_RARE_721, [s.makerOrder.price, y, s.recipient, s.makerOrder.collection, s.makerOrder.tokenId], i.allowRevert)) : s.tokenType == exports.TokenType.ERC1155 && e.addCommand(t.LOOKS_RARE_1155, [s.makerOrder.price, y, s.recipient, s.makerOrder.collection, s.makerOrder.tokenId, s.makerOrder.amount], i.allowRevert);\n      }\n    }, i.getBuyItems = function () {\n      for (var e, n = [], t = c(this.orders); !(e = t()).done;) {\n        var a = e.value;\n        n.push({\n          tokenAddress: a.makerOrder.collection,\n          tokenId: a.makerOrder.tokenId,\n          tokenType: a.tokenType\n        });\n      }\n      return n;\n    }, i.getTotalPrice = function () {\n      for (var e, n = p.BigNumber.from(0), t = c(this.orders); !(e = t()).done;) {\n        n = n.add(e.value.makerOrder.price);\n      }\n      return n;\n    }, n;\n  }(F);\ng.INTERFACE = new r.Interface(w);\nvar N = [{\n    anonymous: !1,\n    inputs: [{\n      indexed: !0,\n      internalType: \"address\",\n      name: \"previousOwner\",\n      type: \"address\"\n    }, {\n      indexed: !0,\n      internalType: \"address\",\n      name: \"newOwner\",\n      type: \"address\"\n    }],\n    name: \"OwnershipTransferred\",\n    type: \"event\"\n  }, {\n    inputs: [],\n    name: \"ETH\",\n    outputs: [{\n      internalType: \"address\",\n      name: \"\",\n      type: \"address\"\n    }],\n    stateMutability: \"view\",\n    type: \"function\"\n  }, {\n    inputs: [],\n    name: \"NFT20\",\n    outputs: [{\n      internalType: \"contract INFT20Factory\",\n      name: \"\",\n      type: \"address\"\n    }],\n    stateMutability: \"view\",\n    type: \"function\"\n  }, {\n    inputs: [],\n    name: \"UNIV2\",\n    outputs: [{\n      internalType: \"address\",\n      name: \"\",\n      type: \"address\"\n    }],\n    stateMutability: \"view\",\n    type: \"function\"\n  }, {\n    inputs: [],\n    name: \"UNIV3\",\n    outputs: [{\n      internalType: \"address\",\n      name: \"\",\n      type: \"address\"\n    }],\n    stateMutability: \"view\",\n    type: \"function\"\n  }, {\n    inputs: [],\n    name: \"WETH\",\n    outputs: [{\n      internalType: \"address\",\n      name: \"\",\n      type: \"address\"\n    }],\n    stateMutability: \"view\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"address\",\n      name: \"_nft\",\n      type: \"address\"\n    }, {\n      internalType: \"uint256[]\",\n      name: \"_toIds\",\n      type: \"uint256[]\"\n    }, {\n      internalType: \"uint256[]\",\n      name: \"_toAmounts\",\n      type: \"uint256[]\"\n    }, {\n      internalType: \"address\",\n      name: \"_receipient\",\n      type: \"address\"\n    }, {\n      internalType: \"uint24\",\n      name: \"_fee\",\n      type: \"uint24\"\n    }, {\n      internalType: \"bool\",\n      name: \"isV3\",\n      type: \"bool\"\n    }],\n    name: \"ethForNft\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"address\",\n      name: \"_nft\",\n      type: \"address\"\n    }, {\n      internalType: \"uint256[]\",\n      name: \"_ids\",\n      type: \"uint256[]\"\n    }, {\n      internalType: \"uint256[]\",\n      name: \"_amounts\",\n      type: \"uint256[]\"\n    }, {\n      internalType: \"bool\",\n      name: \"isErc721\",\n      type: \"bool\"\n    }, {\n      internalType: \"uint24\",\n      name: \"_fee\",\n      type: \"uint24\"\n    }, {\n      internalType: \"bool\",\n      name: \"isV3\",\n      type: \"bool\"\n    }],\n    name: \"nftForEth\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  }, {\n    inputs: [],\n    name: \"owner\",\n    outputs: [{\n      internalType: \"address\",\n      name: \"\",\n      type: \"address\"\n    }],\n    stateMutability: \"view\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"address\",\n      name: \"tokenAddress\",\n      type: \"address\"\n    }, {\n      internalType: \"uint256\",\n      name: \"tokenAmount\",\n      type: \"uint256\"\n    }, {\n      internalType: \"address\",\n      name: \"sendTo\",\n      type: \"address\"\n    }],\n    name: \"recoverERC20\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  }, {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"address\",\n      name: \"_registry\",\n      type: \"address\"\n    }],\n    name: \"setNFT20\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"address\",\n      name: \"newOwner\",\n      type: \"address\"\n    }],\n    name: \"transferOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  }, {\n    inputs: [],\n    name: \"withdrawEth\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\"\n  }, {\n    stateMutability: \"payable\",\n    type: \"receive\"\n  }],\n  V = function (e) {\n    function n(n) {\n      return e.call(this, exports.Market.NFT20, n) || this;\n    }\n    l(n, e);\n    var a = n.prototype;\n    return a.encode = function (e, a) {\n      for (var i, r = c(this.orders); !(i = r()).done;) {\n        var p = i.value,\n          s = n.INTERFACE.encodeFunctionData(\"ethForNft\", [p.tokenAddress, p.tokenIds, p.tokenAmounts, p.recipient, p.fee, p.isV3]);\n        e.addCommand(t.NFT20, [p.value, s], a.allowRevert);\n      }\n    }, a.getBuyItems = function () {\n      for (var e, n = [], t = c(this.orders); !(e = t()).done;) {\n        for (var a, i = e.value, r = c(i.tokenIds); !(a = r()).done;) {\n          n.push({\n            tokenAddress: i.tokenAddress,\n            tokenId: a.value,\n            tokenType: exports.TokenType.ERC721\n          });\n        }\n      }\n      return n;\n    }, a.getTotalPrice = function () {\n      for (var e, n = p.BigNumber.from(0), t = c(this.orders); !(e = t()).done;) {\n        n = n.add(e.value.value);\n      }\n      return n;\n    }, n;\n  }(F);\nV.INTERFACE = new r.Interface(N);\nvar B = [{\n    inputs: [{\n      internalType: \"address\",\n      name: \"_nftxFactory\",\n      type: \"address\"\n    }, {\n      internalType: \"address\",\n      name: \"_sushiRouter\",\n      type: \"address\"\n    }],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\"\n  }, {\n    anonymous: !1,\n    inputs: [{\n      indexed: !1,\n      internalType: \"uint256\",\n      name: \"count\",\n      type: \"uint256\"\n    }, {\n      indexed: !1,\n      internalType: \"uint256\",\n      name: \"ethSpent\",\n      type: \"uint256\"\n    }, {\n      indexed: !1,\n      internalType: \"address\",\n      name: \"to\",\n      type: \"address\"\n    }],\n    name: \"Buy\",\n    type: \"event\"\n  }, {\n    anonymous: !1,\n    inputs: [{\n      indexed: !0,\n      internalType: \"address\",\n      name: \"previousOwner\",\n      type: \"address\"\n    }, {\n      indexed: !0,\n      internalType: \"address\",\n      name: \"newOwner\",\n      type: \"address\"\n    }],\n    name: \"OwnershipTransferred\",\n    type: \"event\"\n  }, {\n    anonymous: !1,\n    inputs: [{\n      indexed: !1,\n      internalType: \"uint256\",\n      name: \"count\",\n      type: \"uint256\"\n    }, {\n      indexed: !1,\n      internalType: \"uint256\",\n      name: \"ethReceived\",\n      type: \"uint256\"\n    }, {\n      indexed: !1,\n      internalType: \"address\",\n      name: \"to\",\n      type: \"address\"\n    }],\n    name: \"Sell\",\n    type: \"event\"\n  }, {\n    anonymous: !1,\n    inputs: [{\n      indexed: !1,\n      internalType: \"uint256\",\n      name: \"count\",\n      type: \"uint256\"\n    }, {\n      indexed: !1,\n      internalType: \"uint256\",\n      name: \"ethSpent\",\n      type: \"uint256\"\n    }, {\n      indexed: !1,\n      internalType: \"address\",\n      name: \"to\",\n      type: \"address\"\n    }],\n    name: \"Swap\",\n    type: \"event\"\n  }, {\n    inputs: [],\n    name: \"WETH\",\n    outputs: [{\n      internalType: \"contract IWETH\",\n      name: \"\",\n      type: \"address\"\n    }],\n    stateMutability: \"view\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"uint256\",\n      name: \"vaultId\",\n      type: \"uint256\"\n    }, {\n      internalType: \"uint256\",\n      name: \"amount\",\n      type: \"uint256\"\n    }, {\n      internalType: \"uint256[]\",\n      name: \"specificIds\",\n      type: \"uint256[]\"\n    }, {\n      internalType: \"address[]\",\n      name: \"path\",\n      type: \"address[]\"\n    }, {\n      internalType: \"address\",\n      name: \"to\",\n      type: \"address\"\n    }],\n    name: \"buyAndRedeem\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"uint256\",\n      name: \"vaultId\",\n      type: \"uint256\"\n    }, {\n      internalType: \"uint256\",\n      name: \"amount\",\n      type: \"uint256\"\n    }, {\n      internalType: \"uint256[]\",\n      name: \"specificIds\",\n      type: \"uint256[]\"\n    }, {\n      internalType: \"uint256\",\n      name: \"maxWethIn\",\n      type: \"uint256\"\n    }, {\n      internalType: \"address[]\",\n      name: \"path\",\n      type: \"address[]\"\n    }, {\n      internalType: \"address\",\n      name: \"to\",\n      type: \"address\"\n    }],\n    name: \"buyAndRedeemWETH\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"uint256\",\n      name: \"vaultId\",\n      type: \"uint256\"\n    }, {\n      internalType: \"uint256[]\",\n      name: \"idsIn\",\n      type: \"uint256[]\"\n    }, {\n      internalType: \"uint256[]\",\n      name: \"amounts\",\n      type: \"uint256[]\"\n    }, {\n      internalType: \"uint256[]\",\n      name: \"specificIds\",\n      type: \"uint256[]\"\n    }, {\n      internalType: \"address[]\",\n      name: \"path\",\n      type: \"address[]\"\n    }, {\n      internalType: \"address\",\n      name: \"to\",\n      type: \"address\"\n    }],\n    name: \"buyAndSwap1155\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"uint256\",\n      name: \"vaultId\",\n      type: \"uint256\"\n    }, {\n      internalType: \"uint256[]\",\n      name: \"idsIn\",\n      type: \"uint256[]\"\n    }, {\n      internalType: \"uint256[]\",\n      name: \"amounts\",\n      type: \"uint256[]\"\n    }, {\n      internalType: \"uint256[]\",\n      name: \"specificIds\",\n      type: \"uint256[]\"\n    }, {\n      internalType: \"uint256\",\n      name: \"maxWethIn\",\n      type: \"uint256\"\n    }, {\n      internalType: \"address[]\",\n      name: \"path\",\n      type: \"address[]\"\n    }, {\n      internalType: \"address\",\n      name: \"to\",\n      type: \"address\"\n    }],\n    name: \"buyAndSwap1155WETH\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"uint256\",\n      name: \"vaultId\",\n      type: \"uint256\"\n    }, {\n      internalType: \"uint256[]\",\n      name: \"idsIn\",\n      type: \"uint256[]\"\n    }, {\n      internalType: \"uint256[]\",\n      name: \"specificIds\",\n      type: \"uint256[]\"\n    }, {\n      internalType: \"address[]\",\n      name: \"path\",\n      type: \"address[]\"\n    }, {\n      internalType: \"address\",\n      name: \"to\",\n      type: \"address\"\n    }],\n    name: \"buyAndSwap721\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"uint256\",\n      name: \"vaultId\",\n      type: \"uint256\"\n    }, {\n      internalType: \"uint256[]\",\n      name: \"idsIn\",\n      type: \"uint256[]\"\n    }, {\n      internalType: \"uint256[]\",\n      name: \"specificIds\",\n      type: \"uint256[]\"\n    }, {\n      internalType: \"uint256\",\n      name: \"maxWethIn\",\n      type: \"uint256\"\n    }, {\n      internalType: \"address[]\",\n      name: \"path\",\n      type: \"address[]\"\n    }, {\n      internalType: \"address\",\n      name: \"to\",\n      type: \"address\"\n    }],\n    name: \"buyAndSwap721WETH\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  }, {\n    inputs: [],\n    name: \"lpStaking\",\n    outputs: [{\n      internalType: \"contract INFTXLPStaking\",\n      name: \"\",\n      type: \"address\"\n    }],\n    stateMutability: \"view\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"uint256\",\n      name: \"vaultId\",\n      type: \"uint256\"\n    }, {\n      internalType: \"uint256[]\",\n      name: \"ids\",\n      type: \"uint256[]\"\n    }, {\n      internalType: \"uint256[]\",\n      name: \"amounts\",\n      type: \"uint256[]\"\n    }, {\n      internalType: \"uint256\",\n      name: \"minWethOut\",\n      type: \"uint256\"\n    }, {\n      internalType: \"address[]\",\n      name: \"path\",\n      type: \"address[]\"\n    }, {\n      internalType: \"address\",\n      name: \"to\",\n      type: \"address\"\n    }],\n    name: \"mintAndSell1155\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"uint256\",\n      name: \"vaultId\",\n      type: \"uint256\"\n    }, {\n      internalType: \"uint256[]\",\n      name: \"ids\",\n      type: \"uint256[]\"\n    }, {\n      internalType: \"uint256[]\",\n      name: \"amounts\",\n      type: \"uint256[]\"\n    }, {\n      internalType: \"uint256\",\n      name: \"minWethOut\",\n      type: \"uint256\"\n    }, {\n      internalType: \"address[]\",\n      name: \"path\",\n      type: \"address[]\"\n    }, {\n      internalType: \"address\",\n      name: \"to\",\n      type: \"address\"\n    }],\n    name: \"mintAndSell1155WETH\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"uint256\",\n      name: \"vaultId\",\n      type: \"uint256\"\n    }, {\n      internalType: \"uint256[]\",\n      name: \"ids\",\n      type: \"uint256[]\"\n    }, {\n      internalType: \"uint256\",\n      name: \"minEthOut\",\n      type: \"uint256\"\n    }, {\n      internalType: \"address[]\",\n      name: \"path\",\n      type: \"address[]\"\n    }, {\n      internalType: \"address\",\n      name: \"to\",\n      type: \"address\"\n    }],\n    name: \"mintAndSell721\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"uint256\",\n      name: \"vaultId\",\n      type: \"uint256\"\n    }, {\n      internalType: \"uint256[]\",\n      name: \"ids\",\n      type: \"uint256[]\"\n    }, {\n      internalType: \"uint256\",\n      name: \"minWethOut\",\n      type: \"uint256\"\n    }, {\n      internalType: \"address[]\",\n      name: \"path\",\n      type: \"address[]\"\n    }, {\n      internalType: \"address\",\n      name: \"to\",\n      type: \"address\"\n    }],\n    name: \"mintAndSell721WETH\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  }, {\n    inputs: [],\n    name: \"nftxFactory\",\n    outputs: [{\n      internalType: \"contract INFTXVaultFactory\",\n      name: \"\",\n      type: \"address\"\n    }],\n    stateMutability: \"view\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"address\",\n      name: \"\",\n      type: \"address\"\n    }, {\n      internalType: \"address\",\n      name: \"\",\n      type: \"address\"\n    }, {\n      internalType: \"uint256[]\",\n      name: \"\",\n      type: \"uint256[]\"\n    }, {\n      internalType: \"uint256[]\",\n      name: \"\",\n      type: \"uint256[]\"\n    }, {\n      internalType: \"bytes\",\n      name: \"\",\n      type: \"bytes\"\n    }],\n    name: \"onERC1155BatchReceived\",\n    outputs: [{\n      internalType: \"bytes4\",\n      name: \"\",\n      type: \"bytes4\"\n    }],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"address\",\n      name: \"\",\n      type: \"address\"\n    }, {\n      internalType: \"address\",\n      name: \"\",\n      type: \"address\"\n    }, {\n      internalType: \"uint256\",\n      name: \"\",\n      type: \"uint256\"\n    }, {\n      internalType: \"uint256\",\n      name: \"\",\n      type: \"uint256\"\n    }, {\n      internalType: \"bytes\",\n      name: \"\",\n      type: \"bytes\"\n    }],\n    name: \"onERC1155Received\",\n    outputs: [{\n      internalType: \"bytes4\",\n      name: \"\",\n      type: \"bytes4\"\n    }],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"address\",\n      name: \"\",\n      type: \"address\"\n    }, {\n      internalType: \"address\",\n      name: \"\",\n      type: \"address\"\n    }, {\n      internalType: \"uint256\",\n      name: \"\",\n      type: \"uint256\"\n    }, {\n      internalType: \"bytes\",\n      name: \"\",\n      type: \"bytes\"\n    }],\n    name: \"onERC721Received\",\n    outputs: [{\n      internalType: \"bytes4\",\n      name: \"\",\n      type: \"bytes4\"\n    }],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  }, {\n    inputs: [],\n    name: \"owner\",\n    outputs: [{\n      internalType: \"address\",\n      name: \"\",\n      type: \"address\"\n    }],\n    stateMutability: \"view\",\n    type: \"function\"\n  }, {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"address\",\n      name: \"token\",\n      type: \"address\"\n    }],\n    name: \"rescue\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"bytes4\",\n      name: \"interfaceId\",\n      type: \"bytes4\"\n    }],\n    name: \"supportsInterface\",\n    outputs: [{\n      internalType: \"bool\",\n      name: \"\",\n      type: \"bool\"\n    }],\n    stateMutability: \"view\",\n    type: \"function\"\n  }, {\n    inputs: [],\n    name: \"sushiRouter\",\n    outputs: [{\n      internalType: \"contract IUniswapV2Router01\",\n      name: \"\",\n      type: \"address\"\n    }],\n    stateMutability: \"view\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"address\",\n      name: \"newOwner\",\n      type: \"address\"\n    }],\n    name: \"transferOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  }, {\n    stateMutability: \"payable\",\n    type: \"receive\"\n  }],\n  L = function (e) {\n    function n(n) {\n      return e.call(this, exports.Market.NFTX, n) || this;\n    }\n    l(n, e);\n    var a = n.prototype;\n    return a.encode = function (e, a) {\n      for (var i, r = c(this.orders); !(i = r()).done;) {\n        var p = i.value,\n          s = n.INTERFACE.encodeFunctionData(\"buyAndRedeem\", [p.vaultId, p.tokenIds.length, p.tokenIds, [m.Ether.onChain(1).wrapped.address, p.vaultAddress], p.recipient]);\n        e.addCommand(t.NFTX, [p.value, s], a.allowRevert);\n      }\n    }, a.getBuyItems = function () {\n      for (var e, n = [], t = c(this.orders); !(e = t()).done;) {\n        for (var a, i = e.value, r = c(i.tokenIds); !(a = r()).done;) {\n          n.push({\n            tokenAddress: i.tokenAddress,\n            tokenId: a.value,\n            tokenType: exports.TokenType.ERC721\n          });\n        }\n      }\n      return n;\n    }, a.getTotalPrice = function () {\n      for (var e, n = p.BigNumber.from(0), t = c(this.orders); !(e = t()).done;) {\n        n = n.add(e.value.value);\n      }\n      return n;\n    }, n;\n  }(F);\nL.INTERFACE = new r.Interface(B);\nvar H = [{\n    inputs: [{\n      internalType: \"address\",\n      name: \"conduitController\",\n      type: \"address\"\n    }],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\"\n  }, {\n    inputs: [],\n    name: \"BadContractSignature\",\n    type: \"error\"\n  }, {\n    inputs: [],\n    name: \"BadFraction\",\n    type: \"error\"\n  }, {\n    inputs: [{\n      internalType: \"address\",\n      name: \"token\",\n      type: \"address\"\n    }, {\n      internalType: \"address\",\n      name: \"from\",\n      type: \"address\"\n    }, {\n      internalType: \"address\",\n      name: \"to\",\n      type: \"address\"\n    }, {\n      internalType: \"uint256\",\n      name: \"amount\",\n      type: \"uint256\"\n    }],\n    name: \"BadReturnValueFromERC20OnTransfer\",\n    type: \"error\"\n  }, {\n    inputs: [{\n      internalType: \"uint8\",\n      name: \"v\",\n      type: \"uint8\"\n    }],\n    name: \"BadSignatureV\",\n    type: \"error\"\n  }, {\n    inputs: [],\n    name: \"ConsiderationCriteriaResolverOutOfRange\",\n    type: \"error\"\n  }, {\n    inputs: [{\n      internalType: \"uint256\",\n      name: \"orderIndex\",\n      type: \"uint256\"\n    }, {\n      internalType: \"uint256\",\n      name: \"considerationIndex\",\n      type: \"uint256\"\n    }, {\n      internalType: \"uint256\",\n      name: \"shortfallAmount\",\n      type: \"uint256\"\n    }],\n    name: \"ConsiderationNotMet\",\n    type: \"error\"\n  }, {\n    inputs: [],\n    name: \"CriteriaNotEnabledForItem\",\n    type: \"error\"\n  }, {\n    inputs: [{\n      internalType: \"address\",\n      name: \"token\",\n      type: \"address\"\n    }, {\n      internalType: \"address\",\n      name: \"from\",\n      type: \"address\"\n    }, {\n      internalType: \"address\",\n      name: \"to\",\n      type: \"address\"\n    }, {\n      internalType: \"uint256[]\",\n      name: \"identifiers\",\n      type: \"uint256[]\"\n    }, {\n      internalType: \"uint256[]\",\n      name: \"amounts\",\n      type: \"uint256[]\"\n    }],\n    name: \"ERC1155BatchTransferGenericFailure\",\n    type: \"error\"\n  }, {\n    inputs: [{\n      internalType: \"address\",\n      name: \"account\",\n      type: \"address\"\n    }, {\n      internalType: \"uint256\",\n      name: \"amount\",\n      type: \"uint256\"\n    }],\n    name: \"EtherTransferGenericFailure\",\n    type: \"error\"\n  }, {\n    inputs: [],\n    name: \"InexactFraction\",\n    type: \"error\"\n  }, {\n    inputs: [],\n    name: \"InsufficientEtherSupplied\",\n    type: \"error\"\n  }, {\n    inputs: [],\n    name: \"Invalid1155BatchTransferEncoding\",\n    type: \"error\"\n  }, {\n    inputs: [],\n    name: \"InvalidBasicOrderParameterEncoding\",\n    type: \"error\"\n  }, {\n    inputs: [{\n      internalType: \"address\",\n      name: \"conduit\",\n      type: \"address\"\n    }],\n    name: \"InvalidCallToConduit\",\n    type: \"error\"\n  }, {\n    inputs: [],\n    name: \"InvalidCanceller\",\n    type: \"error\"\n  }, {\n    inputs: [{\n      internalType: \"bytes32\",\n      name: \"conduitKey\",\n      type: \"bytes32\"\n    }, {\n      internalType: \"address\",\n      name: \"conduit\",\n      type: \"address\"\n    }],\n    name: \"InvalidConduit\",\n    type: \"error\"\n  }, {\n    inputs: [],\n    name: \"InvalidERC721TransferAmount\",\n    type: \"error\"\n  }, {\n    inputs: [],\n    name: \"InvalidFulfillmentComponentData\",\n    type: \"error\"\n  }, {\n    inputs: [{\n      internalType: \"uint256\",\n      name: \"value\",\n      type: \"uint256\"\n    }],\n    name: \"InvalidMsgValue\",\n    type: \"error\"\n  }, {\n    inputs: [],\n    name: \"InvalidNativeOfferItem\",\n    type: \"error\"\n  }, {\n    inputs: [],\n    name: \"InvalidProof\",\n    type: \"error\"\n  }, {\n    inputs: [{\n      internalType: \"bytes32\",\n      name: \"orderHash\",\n      type: \"bytes32\"\n    }],\n    name: \"InvalidRestrictedOrder\",\n    type: \"error\"\n  }, {\n    inputs: [],\n    name: \"InvalidSignature\",\n    type: \"error\"\n  }, {\n    inputs: [],\n    name: \"InvalidSigner\",\n    type: \"error\"\n  }, {\n    inputs: [],\n    name: \"InvalidTime\",\n    type: \"error\"\n  }, {\n    inputs: [],\n    name: \"MismatchedFulfillmentOfferAndConsiderationComponents\",\n    type: \"error\"\n  }, {\n    inputs: [{\n      internalType: \"enum Side\",\n      name: \"side\",\n      type: \"uint8\"\n    }],\n    name: \"MissingFulfillmentComponentOnAggregation\",\n    type: \"error\"\n  }, {\n    inputs: [],\n    name: \"MissingItemAmount\",\n    type: \"error\"\n  }, {\n    inputs: [],\n    name: \"MissingOriginalConsiderationItems\",\n    type: \"error\"\n  }, {\n    inputs: [{\n      internalType: \"address\",\n      name: \"account\",\n      type: \"address\"\n    }],\n    name: \"NoContract\",\n    type: \"error\"\n  }, {\n    inputs: [],\n    name: \"NoReentrantCalls\",\n    type: \"error\"\n  }, {\n    inputs: [],\n    name: \"NoSpecifiedOrdersAvailable\",\n    type: \"error\"\n  }, {\n    inputs: [],\n    name: \"OfferAndConsiderationRequiredOnFulfillment\",\n    type: \"error\"\n  }, {\n    inputs: [],\n    name: \"OfferCriteriaResolverOutOfRange\",\n    type: \"error\"\n  }, {\n    inputs: [{\n      internalType: \"bytes32\",\n      name: \"orderHash\",\n      type: \"bytes32\"\n    }],\n    name: \"OrderAlreadyFilled\",\n    type: \"error\"\n  }, {\n    inputs: [],\n    name: \"OrderCriteriaResolverOutOfRange\",\n    type: \"error\"\n  }, {\n    inputs: [{\n      internalType: \"bytes32\",\n      name: \"orderHash\",\n      type: \"bytes32\"\n    }],\n    name: \"OrderIsCancelled\",\n    type: \"error\"\n  }, {\n    inputs: [{\n      internalType: \"bytes32\",\n      name: \"orderHash\",\n      type: \"bytes32\"\n    }],\n    name: \"OrderPartiallyFilled\",\n    type: \"error\"\n  }, {\n    inputs: [],\n    name: \"PartialFillsNotEnabledForOrder\",\n    type: \"error\"\n  }, {\n    inputs: [{\n      internalType: \"address\",\n      name: \"token\",\n      type: \"address\"\n    }, {\n      internalType: \"address\",\n      name: \"from\",\n      type: \"address\"\n    }, {\n      internalType: \"address\",\n      name: \"to\",\n      type: \"address\"\n    }, {\n      internalType: \"uint256\",\n      name: \"identifier\",\n      type: \"uint256\"\n    }, {\n      internalType: \"uint256\",\n      name: \"amount\",\n      type: \"uint256\"\n    }],\n    name: \"TokenTransferGenericFailure\",\n    type: \"error\"\n  }, {\n    inputs: [],\n    name: \"UnresolvedConsiderationCriteria\",\n    type: \"error\"\n  }, {\n    inputs: [],\n    name: \"UnresolvedOfferCriteria\",\n    type: \"error\"\n  }, {\n    inputs: [],\n    name: \"UnusedItemParameters\",\n    type: \"error\"\n  }, {\n    anonymous: !1,\n    inputs: [{\n      indexed: !1,\n      internalType: \"uint256\",\n      name: \"newCounter\",\n      type: \"uint256\"\n    }, {\n      indexed: !0,\n      internalType: \"address\",\n      name: \"offerer\",\n      type: \"address\"\n    }],\n    name: \"CounterIncremented\",\n    type: \"event\"\n  }, {\n    anonymous: !1,\n    inputs: [{\n      indexed: !1,\n      internalType: \"bytes32\",\n      name: \"orderHash\",\n      type: \"bytes32\"\n    }, {\n      indexed: !0,\n      internalType: \"address\",\n      name: \"offerer\",\n      type: \"address\"\n    }, {\n      indexed: !0,\n      internalType: \"address\",\n      name: \"zone\",\n      type: \"address\"\n    }],\n    name: \"OrderCancelled\",\n    type: \"event\"\n  }, {\n    anonymous: !1,\n    inputs: [{\n      indexed: !1,\n      internalType: \"bytes32\",\n      name: \"orderHash\",\n      type: \"bytes32\"\n    }, {\n      indexed: !0,\n      internalType: \"address\",\n      name: \"offerer\",\n      type: \"address\"\n    }, {\n      indexed: !0,\n      internalType: \"address\",\n      name: \"zone\",\n      type: \"address\"\n    }, {\n      indexed: !1,\n      internalType: \"address\",\n      name: \"recipient\",\n      type: \"address\"\n    }, {\n      components: [{\n        internalType: \"enum ItemType\",\n        name: \"itemType\",\n        type: \"uint8\"\n      }, {\n        internalType: \"address\",\n        name: \"token\",\n        type: \"address\"\n      }, {\n        internalType: \"uint256\",\n        name: \"identifier\",\n        type: \"uint256\"\n      }, {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\"\n      }],\n      indexed: !1,\n      internalType: \"struct SpentItem[]\",\n      name: \"offer\",\n      type: \"tuple[]\"\n    }, {\n      components: [{\n        internalType: \"enum ItemType\",\n        name: \"itemType\",\n        type: \"uint8\"\n      }, {\n        internalType: \"address\",\n        name: \"token\",\n        type: \"address\"\n      }, {\n        internalType: \"uint256\",\n        name: \"identifier\",\n        type: \"uint256\"\n      }, {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\"\n      }, {\n        internalType: \"address payable\",\n        name: \"recipient\",\n        type: \"address\"\n      }],\n      indexed: !1,\n      internalType: \"struct ReceivedItem[]\",\n      name: \"consideration\",\n      type: \"tuple[]\"\n    }],\n    name: \"OrderFulfilled\",\n    type: \"event\"\n  }, {\n    anonymous: !1,\n    inputs: [{\n      indexed: !1,\n      internalType: \"bytes32\",\n      name: \"orderHash\",\n      type: \"bytes32\"\n    }, {\n      indexed: !0,\n      internalType: \"address\",\n      name: \"offerer\",\n      type: \"address\"\n    }, {\n      indexed: !0,\n      internalType: \"address\",\n      name: \"zone\",\n      type: \"address\"\n    }],\n    name: \"OrderValidated\",\n    type: \"event\"\n  }, {\n    inputs: [{\n      components: [{\n        internalType: \"address\",\n        name: \"offerer\",\n        type: \"address\"\n      }, {\n        internalType: \"address\",\n        name: \"zone\",\n        type: \"address\"\n      }, {\n        components: [{\n          internalType: \"enum ItemType\",\n          name: \"itemType\",\n          type: \"uint8\"\n        }, {\n          internalType: \"address\",\n          name: \"token\",\n          type: \"address\"\n        }, {\n          internalType: \"uint256\",\n          name: \"identifierOrCriteria\",\n          type: \"uint256\"\n        }, {\n          internalType: \"uint256\",\n          name: \"startAmount\",\n          type: \"uint256\"\n        }, {\n          internalType: \"uint256\",\n          name: \"endAmount\",\n          type: \"uint256\"\n        }],\n        internalType: \"struct OfferItem[]\",\n        name: \"offer\",\n        type: \"tuple[]\"\n      }, {\n        components: [{\n          internalType: \"enum ItemType\",\n          name: \"itemType\",\n          type: \"uint8\"\n        }, {\n          internalType: \"address\",\n          name: \"token\",\n          type: \"address\"\n        }, {\n          internalType: \"uint256\",\n          name: \"identifierOrCriteria\",\n          type: \"uint256\"\n        }, {\n          internalType: \"uint256\",\n          name: \"startAmount\",\n          type: \"uint256\"\n        }, {\n          internalType: \"uint256\",\n          name: \"endAmount\",\n          type: \"uint256\"\n        }, {\n          internalType: \"address payable\",\n          name: \"recipient\",\n          type: \"address\"\n        }],\n        internalType: \"struct ConsiderationItem[]\",\n        name: \"consideration\",\n        type: \"tuple[]\"\n      }, {\n        internalType: \"enum OrderType\",\n        name: \"orderType\",\n        type: \"uint8\"\n      }, {\n        internalType: \"uint256\",\n        name: \"startTime\",\n        type: \"uint256\"\n      }, {\n        internalType: \"uint256\",\n        name: \"endTime\",\n        type: \"uint256\"\n      }, {\n        internalType: \"bytes32\",\n        name: \"zoneHash\",\n        type: \"bytes32\"\n      }, {\n        internalType: \"uint256\",\n        name: \"salt\",\n        type: \"uint256\"\n      }, {\n        internalType: \"bytes32\",\n        name: \"conduitKey\",\n        type: \"bytes32\"\n      }, {\n        internalType: \"uint256\",\n        name: \"counter\",\n        type: \"uint256\"\n      }],\n      internalType: \"struct OrderComponents[]\",\n      name: \"orders\",\n      type: \"tuple[]\"\n    }],\n    name: \"cancel\",\n    outputs: [{\n      internalType: \"bool\",\n      name: \"cancelled\",\n      type: \"bool\"\n    }],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      components: [{\n        components: [{\n          internalType: \"address\",\n          name: \"offerer\",\n          type: \"address\"\n        }, {\n          internalType: \"address\",\n          name: \"zone\",\n          type: \"address\"\n        }, {\n          components: [{\n            internalType: \"enum ItemType\",\n            name: \"itemType\",\n            type: \"uint8\"\n          }, {\n            internalType: \"address\",\n            name: \"token\",\n            type: \"address\"\n          }, {\n            internalType: \"uint256\",\n            name: \"identifierOrCriteria\",\n            type: \"uint256\"\n          }, {\n            internalType: \"uint256\",\n            name: \"startAmount\",\n            type: \"uint256\"\n          }, {\n            internalType: \"uint256\",\n            name: \"endAmount\",\n            type: \"uint256\"\n          }],\n          internalType: \"struct OfferItem[]\",\n          name: \"offer\",\n          type: \"tuple[]\"\n        }, {\n          components: [{\n            internalType: \"enum ItemType\",\n            name: \"itemType\",\n            type: \"uint8\"\n          }, {\n            internalType: \"address\",\n            name: \"token\",\n            type: \"address\"\n          }, {\n            internalType: \"uint256\",\n            name: \"identifierOrCriteria\",\n            type: \"uint256\"\n          }, {\n            internalType: \"uint256\",\n            name: \"startAmount\",\n            type: \"uint256\"\n          }, {\n            internalType: \"uint256\",\n            name: \"endAmount\",\n            type: \"uint256\"\n          }, {\n            internalType: \"address payable\",\n            name: \"recipient\",\n            type: \"address\"\n          }],\n          internalType: \"struct ConsiderationItem[]\",\n          name: \"consideration\",\n          type: \"tuple[]\"\n        }, {\n          internalType: \"enum OrderType\",\n          name: \"orderType\",\n          type: \"uint8\"\n        }, {\n          internalType: \"uint256\",\n          name: \"startTime\",\n          type: \"uint256\"\n        }, {\n          internalType: \"uint256\",\n          name: \"endTime\",\n          type: \"uint256\"\n        }, {\n          internalType: \"bytes32\",\n          name: \"zoneHash\",\n          type: \"bytes32\"\n        }, {\n          internalType: \"uint256\",\n          name: \"salt\",\n          type: \"uint256\"\n        }, {\n          internalType: \"bytes32\",\n          name: \"conduitKey\",\n          type: \"bytes32\"\n        }, {\n          internalType: \"uint256\",\n          name: \"totalOriginalConsiderationItems\",\n          type: \"uint256\"\n        }],\n        internalType: \"struct OrderParameters\",\n        name: \"parameters\",\n        type: \"tuple\"\n      }, {\n        internalType: \"uint120\",\n        name: \"numerator\",\n        type: \"uint120\"\n      }, {\n        internalType: \"uint120\",\n        name: \"denominator\",\n        type: \"uint120\"\n      }, {\n        internalType: \"bytes\",\n        name: \"signature\",\n        type: \"bytes\"\n      }, {\n        internalType: \"bytes\",\n        name: \"extraData\",\n        type: \"bytes\"\n      }],\n      internalType: \"struct AdvancedOrder\",\n      name: \"advancedOrder\",\n      type: \"tuple\"\n    }, {\n      components: [{\n        internalType: \"uint256\",\n        name: \"orderIndex\",\n        type: \"uint256\"\n      }, {\n        internalType: \"enum Side\",\n        name: \"side\",\n        type: \"uint8\"\n      }, {\n        internalType: \"uint256\",\n        name: \"index\",\n        type: \"uint256\"\n      }, {\n        internalType: \"uint256\",\n        name: \"identifier\",\n        type: \"uint256\"\n      }, {\n        internalType: \"bytes32[]\",\n        name: \"criteriaProof\",\n        type: \"bytes32[]\"\n      }],\n      internalType: \"struct CriteriaResolver[]\",\n      name: \"criteriaResolvers\",\n      type: \"tuple[]\"\n    }, {\n      internalType: \"bytes32\",\n      name: \"fulfillerConduitKey\",\n      type: \"bytes32\"\n    }, {\n      internalType: \"address\",\n      name: \"recipient\",\n      type: \"address\"\n    }],\n    name: \"fulfillAdvancedOrder\",\n    outputs: [{\n      internalType: \"bool\",\n      name: \"fulfilled\",\n      type: \"bool\"\n    }],\n    stateMutability: \"payable\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      components: [{\n        components: [{\n          internalType: \"address\",\n          name: \"offerer\",\n          type: \"address\"\n        }, {\n          internalType: \"address\",\n          name: \"zone\",\n          type: \"address\"\n        }, {\n          components: [{\n            internalType: \"enum ItemType\",\n            name: \"itemType\",\n            type: \"uint8\"\n          }, {\n            internalType: \"address\",\n            name: \"token\",\n            type: \"address\"\n          }, {\n            internalType: \"uint256\",\n            name: \"identifierOrCriteria\",\n            type: \"uint256\"\n          }, {\n            internalType: \"uint256\",\n            name: \"startAmount\",\n            type: \"uint256\"\n          }, {\n            internalType: \"uint256\",\n            name: \"endAmount\",\n            type: \"uint256\"\n          }],\n          internalType: \"struct OfferItem[]\",\n          name: \"offer\",\n          type: \"tuple[]\"\n        }, {\n          components: [{\n            internalType: \"enum ItemType\",\n            name: \"itemType\",\n            type: \"uint8\"\n          }, {\n            internalType: \"address\",\n            name: \"token\",\n            type: \"address\"\n          }, {\n            internalType: \"uint256\",\n            name: \"identifierOrCriteria\",\n            type: \"uint256\"\n          }, {\n            internalType: \"uint256\",\n            name: \"startAmount\",\n            type: \"uint256\"\n          }, {\n            internalType: \"uint256\",\n            name: \"endAmount\",\n            type: \"uint256\"\n          }, {\n            internalType: \"address payable\",\n            name: \"recipient\",\n            type: \"address\"\n          }],\n          internalType: \"struct ConsiderationItem[]\",\n          name: \"consideration\",\n          type: \"tuple[]\"\n        }, {\n          internalType: \"enum OrderType\",\n          name: \"orderType\",\n          type: \"uint8\"\n        }, {\n          internalType: \"uint256\",\n          name: \"startTime\",\n          type: \"uint256\"\n        }, {\n          internalType: \"uint256\",\n          name: \"endTime\",\n          type: \"uint256\"\n        }, {\n          internalType: \"bytes32\",\n          name: \"zoneHash\",\n          type: \"bytes32\"\n        }, {\n          internalType: \"uint256\",\n          name: \"salt\",\n          type: \"uint256\"\n        }, {\n          internalType: \"bytes32\",\n          name: \"conduitKey\",\n          type: \"bytes32\"\n        }, {\n          internalType: \"uint256\",\n          name: \"totalOriginalConsiderationItems\",\n          type: \"uint256\"\n        }],\n        internalType: \"struct OrderParameters\",\n        name: \"parameters\",\n        type: \"tuple\"\n      }, {\n        internalType: \"uint120\",\n        name: \"numerator\",\n        type: \"uint120\"\n      }, {\n        internalType: \"uint120\",\n        name: \"denominator\",\n        type: \"uint120\"\n      }, {\n        internalType: \"bytes\",\n        name: \"signature\",\n        type: \"bytes\"\n      }, {\n        internalType: \"bytes\",\n        name: \"extraData\",\n        type: \"bytes\"\n      }],\n      internalType: \"struct AdvancedOrder[]\",\n      name: \"advancedOrders\",\n      type: \"tuple[]\"\n    }, {\n      components: [{\n        internalType: \"uint256\",\n        name: \"orderIndex\",\n        type: \"uint256\"\n      }, {\n        internalType: \"enum Side\",\n        name: \"side\",\n        type: \"uint8\"\n      }, {\n        internalType: \"uint256\",\n        name: \"index\",\n        type: \"uint256\"\n      }, {\n        internalType: \"uint256\",\n        name: \"identifier\",\n        type: \"uint256\"\n      }, {\n        internalType: \"bytes32[]\",\n        name: \"criteriaProof\",\n        type: \"bytes32[]\"\n      }],\n      internalType: \"struct CriteriaResolver[]\",\n      name: \"criteriaResolvers\",\n      type: \"tuple[]\"\n    }, {\n      components: [{\n        internalType: \"uint256\",\n        name: \"orderIndex\",\n        type: \"uint256\"\n      }, {\n        internalType: \"uint256\",\n        name: \"itemIndex\",\n        type: \"uint256\"\n      }],\n      internalType: \"struct FulfillmentComponent[][]\",\n      name: \"offerFulfillments\",\n      type: \"tuple[][]\"\n    }, {\n      components: [{\n        internalType: \"uint256\",\n        name: \"orderIndex\",\n        type: \"uint256\"\n      }, {\n        internalType: \"uint256\",\n        name: \"itemIndex\",\n        type: \"uint256\"\n      }],\n      internalType: \"struct FulfillmentComponent[][]\",\n      name: \"considerationFulfillments\",\n      type: \"tuple[][]\"\n    }, {\n      internalType: \"bytes32\",\n      name: \"fulfillerConduitKey\",\n      type: \"bytes32\"\n    }, {\n      internalType: \"address\",\n      name: \"recipient\",\n      type: \"address\"\n    }, {\n      internalType: \"uint256\",\n      name: \"maximumFulfilled\",\n      type: \"uint256\"\n    }],\n    name: \"fulfillAvailableAdvancedOrders\",\n    outputs: [{\n      internalType: \"bool[]\",\n      name: \"availableOrders\",\n      type: \"bool[]\"\n    }, {\n      components: [{\n        components: [{\n          internalType: \"enum ItemType\",\n          name: \"itemType\",\n          type: \"uint8\"\n        }, {\n          internalType: \"address\",\n          name: \"token\",\n          type: \"address\"\n        }, {\n          internalType: \"uint256\",\n          name: \"identifier\",\n          type: \"uint256\"\n        }, {\n          internalType: \"uint256\",\n          name: \"amount\",\n          type: \"uint256\"\n        }, {\n          internalType: \"address payable\",\n          name: \"recipient\",\n          type: \"address\"\n        }],\n        internalType: \"struct ReceivedItem\",\n        name: \"item\",\n        type: \"tuple\"\n      }, {\n        internalType: \"address\",\n        name: \"offerer\",\n        type: \"address\"\n      }, {\n        internalType: \"bytes32\",\n        name: \"conduitKey\",\n        type: \"bytes32\"\n      }],\n      internalType: \"struct Execution[]\",\n      name: \"executions\",\n      type: \"tuple[]\"\n    }],\n    stateMutability: \"payable\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      components: [{\n        components: [{\n          internalType: \"address\",\n          name: \"offerer\",\n          type: \"address\"\n        }, {\n          internalType: \"address\",\n          name: \"zone\",\n          type: \"address\"\n        }, {\n          components: [{\n            internalType: \"enum ItemType\",\n            name: \"itemType\",\n            type: \"uint8\"\n          }, {\n            internalType: \"address\",\n            name: \"token\",\n            type: \"address\"\n          }, {\n            internalType: \"uint256\",\n            name: \"identifierOrCriteria\",\n            type: \"uint256\"\n          }, {\n            internalType: \"uint256\",\n            name: \"startAmount\",\n            type: \"uint256\"\n          }, {\n            internalType: \"uint256\",\n            name: \"endAmount\",\n            type: \"uint256\"\n          }],\n          internalType: \"struct OfferItem[]\",\n          name: \"offer\",\n          type: \"tuple[]\"\n        }, {\n          components: [{\n            internalType: \"enum ItemType\",\n            name: \"itemType\",\n            type: \"uint8\"\n          }, {\n            internalType: \"address\",\n            name: \"token\",\n            type: \"address\"\n          }, {\n            internalType: \"uint256\",\n            name: \"identifierOrCriteria\",\n            type: \"uint256\"\n          }, {\n            internalType: \"uint256\",\n            name: \"startAmount\",\n            type: \"uint256\"\n          }, {\n            internalType: \"uint256\",\n            name: \"endAmount\",\n            type: \"uint256\"\n          }, {\n            internalType: \"address payable\",\n            name: \"recipient\",\n            type: \"address\"\n          }],\n          internalType: \"struct ConsiderationItem[]\",\n          name: \"consideration\",\n          type: \"tuple[]\"\n        }, {\n          internalType: \"enum OrderType\",\n          name: \"orderType\",\n          type: \"uint8\"\n        }, {\n          internalType: \"uint256\",\n          name: \"startTime\",\n          type: \"uint256\"\n        }, {\n          internalType: \"uint256\",\n          name: \"endTime\",\n          type: \"uint256\"\n        }, {\n          internalType: \"bytes32\",\n          name: \"zoneHash\",\n          type: \"bytes32\"\n        }, {\n          internalType: \"uint256\",\n          name: \"salt\",\n          type: \"uint256\"\n        }, {\n          internalType: \"bytes32\",\n          name: \"conduitKey\",\n          type: \"bytes32\"\n        }, {\n          internalType: \"uint256\",\n          name: \"totalOriginalConsiderationItems\",\n          type: \"uint256\"\n        }],\n        internalType: \"struct OrderParameters\",\n        name: \"parameters\",\n        type: \"tuple\"\n      }, {\n        internalType: \"bytes\",\n        name: \"signature\",\n        type: \"bytes\"\n      }],\n      internalType: \"struct Order[]\",\n      name: \"orders\",\n      type: \"tuple[]\"\n    }, {\n      components: [{\n        internalType: \"uint256\",\n        name: \"orderIndex\",\n        type: \"uint256\"\n      }, {\n        internalType: \"uint256\",\n        name: \"itemIndex\",\n        type: \"uint256\"\n      }],\n      internalType: \"struct FulfillmentComponent[][]\",\n      name: \"offerFulfillments\",\n      type: \"tuple[][]\"\n    }, {\n      components: [{\n        internalType: \"uint256\",\n        name: \"orderIndex\",\n        type: \"uint256\"\n      }, {\n        internalType: \"uint256\",\n        name: \"itemIndex\",\n        type: \"uint256\"\n      }],\n      internalType: \"struct FulfillmentComponent[][]\",\n      name: \"considerationFulfillments\",\n      type: \"tuple[][]\"\n    }, {\n      internalType: \"bytes32\",\n      name: \"fulfillerConduitKey\",\n      type: \"bytes32\"\n    }, {\n      internalType: \"uint256\",\n      name: \"maximumFulfilled\",\n      type: \"uint256\"\n    }],\n    name: \"fulfillAvailableOrders\",\n    outputs: [{\n      internalType: \"bool[]\",\n      name: \"availableOrders\",\n      type: \"bool[]\"\n    }, {\n      components: [{\n        components: [{\n          internalType: \"enum ItemType\",\n          name: \"itemType\",\n          type: \"uint8\"\n        }, {\n          internalType: \"address\",\n          name: \"token\",\n          type: \"address\"\n        }, {\n          internalType: \"uint256\",\n          name: \"identifier\",\n          type: \"uint256\"\n        }, {\n          internalType: \"uint256\",\n          name: \"amount\",\n          type: \"uint256\"\n        }, {\n          internalType: \"address payable\",\n          name: \"recipient\",\n          type: \"address\"\n        }],\n        internalType: \"struct ReceivedItem\",\n        name: \"item\",\n        type: \"tuple\"\n      }, {\n        internalType: \"address\",\n        name: \"offerer\",\n        type: \"address\"\n      }, {\n        internalType: \"bytes32\",\n        name: \"conduitKey\",\n        type: \"bytes32\"\n      }],\n      internalType: \"struct Execution[]\",\n      name: \"executions\",\n      type: \"tuple[]\"\n    }],\n    stateMutability: \"payable\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      components: [{\n        internalType: \"address\",\n        name: \"considerationToken\",\n        type: \"address\"\n      }, {\n        internalType: \"uint256\",\n        name: \"considerationIdentifier\",\n        type: \"uint256\"\n      }, {\n        internalType: \"uint256\",\n        name: \"considerationAmount\",\n        type: \"uint256\"\n      }, {\n        internalType: \"address payable\",\n        name: \"offerer\",\n        type: \"address\"\n      }, {\n        internalType: \"address\",\n        name: \"zone\",\n        type: \"address\"\n      }, {\n        internalType: \"address\",\n        name: \"offerToken\",\n        type: \"address\"\n      }, {\n        internalType: \"uint256\",\n        name: \"offerIdentifier\",\n        type: \"uint256\"\n      }, {\n        internalType: \"uint256\",\n        name: \"offerAmount\",\n        type: \"uint256\"\n      }, {\n        internalType: \"enum BasicOrderType\",\n        name: \"basicOrderType\",\n        type: \"uint8\"\n      }, {\n        internalType: \"uint256\",\n        name: \"startTime\",\n        type: \"uint256\"\n      }, {\n        internalType: \"uint256\",\n        name: \"endTime\",\n        type: \"uint256\"\n      }, {\n        internalType: \"bytes32\",\n        name: \"zoneHash\",\n        type: \"bytes32\"\n      }, {\n        internalType: \"uint256\",\n        name: \"salt\",\n        type: \"uint256\"\n      }, {\n        internalType: \"bytes32\",\n        name: \"offererConduitKey\",\n        type: \"bytes32\"\n      }, {\n        internalType: \"bytes32\",\n        name: \"fulfillerConduitKey\",\n        type: \"bytes32\"\n      }, {\n        internalType: \"uint256\",\n        name: \"totalOriginalAdditionalRecipients\",\n        type: \"uint256\"\n      }, {\n        components: [{\n          internalType: \"uint256\",\n          name: \"amount\",\n          type: \"uint256\"\n        }, {\n          internalType: \"address payable\",\n          name: \"recipient\",\n          type: \"address\"\n        }],\n        internalType: \"struct AdditionalRecipient[]\",\n        name: \"additionalRecipients\",\n        type: \"tuple[]\"\n      }, {\n        internalType: \"bytes\",\n        name: \"signature\",\n        type: \"bytes\"\n      }],\n      internalType: \"struct BasicOrderParameters\",\n      name: \"parameters\",\n      type: \"tuple\"\n    }],\n    name: \"fulfillBasicOrder\",\n    outputs: [{\n      internalType: \"bool\",\n      name: \"fulfilled\",\n      type: \"bool\"\n    }],\n    stateMutability: \"payable\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      components: [{\n        components: [{\n          internalType: \"address\",\n          name: \"offerer\",\n          type: \"address\"\n        }, {\n          internalType: \"address\",\n          name: \"zone\",\n          type: \"address\"\n        }, {\n          components: [{\n            internalType: \"enum ItemType\",\n            name: \"itemType\",\n            type: \"uint8\"\n          }, {\n            internalType: \"address\",\n            name: \"token\",\n            type: \"address\"\n          }, {\n            internalType: \"uint256\",\n            name: \"identifierOrCriteria\",\n            type: \"uint256\"\n          }, {\n            internalType: \"uint256\",\n            name: \"startAmount\",\n            type: \"uint256\"\n          }, {\n            internalType: \"uint256\",\n            name: \"endAmount\",\n            type: \"uint256\"\n          }],\n          internalType: \"struct OfferItem[]\",\n          name: \"offer\",\n          type: \"tuple[]\"\n        }, {\n          components: [{\n            internalType: \"enum ItemType\",\n            name: \"itemType\",\n            type: \"uint8\"\n          }, {\n            internalType: \"address\",\n            name: \"token\",\n            type: \"address\"\n          }, {\n            internalType: \"uint256\",\n            name: \"identifierOrCriteria\",\n            type: \"uint256\"\n          }, {\n            internalType: \"uint256\",\n            name: \"startAmount\",\n            type: \"uint256\"\n          }, {\n            internalType: \"uint256\",\n            name: \"endAmount\",\n            type: \"uint256\"\n          }, {\n            internalType: \"address payable\",\n            name: \"recipient\",\n            type: \"address\"\n          }],\n          internalType: \"struct ConsiderationItem[]\",\n          name: \"consideration\",\n          type: \"tuple[]\"\n        }, {\n          internalType: \"enum OrderType\",\n          name: \"orderType\",\n          type: \"uint8\"\n        }, {\n          internalType: \"uint256\",\n          name: \"startTime\",\n          type: \"uint256\"\n        }, {\n          internalType: \"uint256\",\n          name: \"endTime\",\n          type: \"uint256\"\n        }, {\n          internalType: \"bytes32\",\n          name: \"zoneHash\",\n          type: \"bytes32\"\n        }, {\n          internalType: \"uint256\",\n          name: \"salt\",\n          type: \"uint256\"\n        }, {\n          internalType: \"bytes32\",\n          name: \"conduitKey\",\n          type: \"bytes32\"\n        }, {\n          internalType: \"uint256\",\n          name: \"totalOriginalConsiderationItems\",\n          type: \"uint256\"\n        }],\n        internalType: \"struct OrderParameters\",\n        name: \"parameters\",\n        type: \"tuple\"\n      }, {\n        internalType: \"bytes\",\n        name: \"signature\",\n        type: \"bytes\"\n      }],\n      internalType: \"struct Order\",\n      name: \"order\",\n      type: \"tuple\"\n    }, {\n      internalType: \"bytes32\",\n      name: \"fulfillerConduitKey\",\n      type: \"bytes32\"\n    }],\n    name: \"fulfillOrder\",\n    outputs: [{\n      internalType: \"bool\",\n      name: \"fulfilled\",\n      type: \"bool\"\n    }],\n    stateMutability: \"payable\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"address\",\n      name: \"offerer\",\n      type: \"address\"\n    }],\n    name: \"getCounter\",\n    outputs: [{\n      internalType: \"uint256\",\n      name: \"counter\",\n      type: \"uint256\"\n    }],\n    stateMutability: \"view\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      components: [{\n        internalType: \"address\",\n        name: \"offerer\",\n        type: \"address\"\n      }, {\n        internalType: \"address\",\n        name: \"zone\",\n        type: \"address\"\n      }, {\n        components: [{\n          internalType: \"enum ItemType\",\n          name: \"itemType\",\n          type: \"uint8\"\n        }, {\n          internalType: \"address\",\n          name: \"token\",\n          type: \"address\"\n        }, {\n          internalType: \"uint256\",\n          name: \"identifierOrCriteria\",\n          type: \"uint256\"\n        }, {\n          internalType: \"uint256\",\n          name: \"startAmount\",\n          type: \"uint256\"\n        }, {\n          internalType: \"uint256\",\n          name: \"endAmount\",\n          type: \"uint256\"\n        }],\n        internalType: \"struct OfferItem[]\",\n        name: \"offer\",\n        type: \"tuple[]\"\n      }, {\n        components: [{\n          internalType: \"enum ItemType\",\n          name: \"itemType\",\n          type: \"uint8\"\n        }, {\n          internalType: \"address\",\n          name: \"token\",\n          type: \"address\"\n        }, {\n          internalType: \"uint256\",\n          name: \"identifierOrCriteria\",\n          type: \"uint256\"\n        }, {\n          internalType: \"uint256\",\n          name: \"startAmount\",\n          type: \"uint256\"\n        }, {\n          internalType: \"uint256\",\n          name: \"endAmount\",\n          type: \"uint256\"\n        }, {\n          internalType: \"address payable\",\n          name: \"recipient\",\n          type: \"address\"\n        }],\n        internalType: \"struct ConsiderationItem[]\",\n        name: \"consideration\",\n        type: \"tuple[]\"\n      }, {\n        internalType: \"enum OrderType\",\n        name: \"orderType\",\n        type: \"uint8\"\n      }, {\n        internalType: \"uint256\",\n        name: \"startTime\",\n        type: \"uint256\"\n      }, {\n        internalType: \"uint256\",\n        name: \"endTime\",\n        type: \"uint256\"\n      }, {\n        internalType: \"bytes32\",\n        name: \"zoneHash\",\n        type: \"bytes32\"\n      }, {\n        internalType: \"uint256\",\n        name: \"salt\",\n        type: \"uint256\"\n      }, {\n        internalType: \"bytes32\",\n        name: \"conduitKey\",\n        type: \"bytes32\"\n      }, {\n        internalType: \"uint256\",\n        name: \"counter\",\n        type: \"uint256\"\n      }],\n      internalType: \"struct OrderComponents\",\n      name: \"order\",\n      type: \"tuple\"\n    }],\n    name: \"getOrderHash\",\n    outputs: [{\n      internalType: \"bytes32\",\n      name: \"orderHash\",\n      type: \"bytes32\"\n    }],\n    stateMutability: \"view\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"bytes32\",\n      name: \"orderHash\",\n      type: \"bytes32\"\n    }],\n    name: \"getOrderStatus\",\n    outputs: [{\n      internalType: \"bool\",\n      name: \"isValidated\",\n      type: \"bool\"\n    }, {\n      internalType: \"bool\",\n      name: \"isCancelled\",\n      type: \"bool\"\n    }, {\n      internalType: \"uint256\",\n      name: \"totalFilled\",\n      type: \"uint256\"\n    }, {\n      internalType: \"uint256\",\n      name: \"totalSize\",\n      type: \"uint256\"\n    }],\n    stateMutability: \"view\",\n    type: \"function\"\n  }, {\n    inputs: [],\n    name: \"incrementCounter\",\n    outputs: [{\n      internalType: \"uint256\",\n      name: \"newCounter\",\n      type: \"uint256\"\n    }],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  }, {\n    inputs: [],\n    name: \"information\",\n    outputs: [{\n      internalType: \"string\",\n      name: \"version\",\n      type: \"string\"\n    }, {\n      internalType: \"bytes32\",\n      name: \"domainSeparator\",\n      type: \"bytes32\"\n    }, {\n      internalType: \"address\",\n      name: \"conduitController\",\n      type: \"address\"\n    }],\n    stateMutability: \"view\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      components: [{\n        components: [{\n          internalType: \"address\",\n          name: \"offerer\",\n          type: \"address\"\n        }, {\n          internalType: \"address\",\n          name: \"zone\",\n          type: \"address\"\n        }, {\n          components: [{\n            internalType: \"enum ItemType\",\n            name: \"itemType\",\n            type: \"uint8\"\n          }, {\n            internalType: \"address\",\n            name: \"token\",\n            type: \"address\"\n          }, {\n            internalType: \"uint256\",\n            name: \"identifierOrCriteria\",\n            type: \"uint256\"\n          }, {\n            internalType: \"uint256\",\n            name: \"startAmount\",\n            type: \"uint256\"\n          }, {\n            internalType: \"uint256\",\n            name: \"endAmount\",\n            type: \"uint256\"\n          }],\n          internalType: \"struct OfferItem[]\",\n          name: \"offer\",\n          type: \"tuple[]\"\n        }, {\n          components: [{\n            internalType: \"enum ItemType\",\n            name: \"itemType\",\n            type: \"uint8\"\n          }, {\n            internalType: \"address\",\n            name: \"token\",\n            type: \"address\"\n          }, {\n            internalType: \"uint256\",\n            name: \"identifierOrCriteria\",\n            type: \"uint256\"\n          }, {\n            internalType: \"uint256\",\n            name: \"startAmount\",\n            type: \"uint256\"\n          }, {\n            internalType: \"uint256\",\n            name: \"endAmount\",\n            type: \"uint256\"\n          }, {\n            internalType: \"address payable\",\n            name: \"recipient\",\n            type: \"address\"\n          }],\n          internalType: \"struct ConsiderationItem[]\",\n          name: \"consideration\",\n          type: \"tuple[]\"\n        }, {\n          internalType: \"enum OrderType\",\n          name: \"orderType\",\n          type: \"uint8\"\n        }, {\n          internalType: \"uint256\",\n          name: \"startTime\",\n          type: \"uint256\"\n        }, {\n          internalType: \"uint256\",\n          name: \"endTime\",\n          type: \"uint256\"\n        }, {\n          internalType: \"bytes32\",\n          name: \"zoneHash\",\n          type: \"bytes32\"\n        }, {\n          internalType: \"uint256\",\n          name: \"salt\",\n          type: \"uint256\"\n        }, {\n          internalType: \"bytes32\",\n          name: \"conduitKey\",\n          type: \"bytes32\"\n        }, {\n          internalType: \"uint256\",\n          name: \"totalOriginalConsiderationItems\",\n          type: \"uint256\"\n        }],\n        internalType: \"struct OrderParameters\",\n        name: \"parameters\",\n        type: \"tuple\"\n      }, {\n        internalType: \"uint120\",\n        name: \"numerator\",\n        type: \"uint120\"\n      }, {\n        internalType: \"uint120\",\n        name: \"denominator\",\n        type: \"uint120\"\n      }, {\n        internalType: \"bytes\",\n        name: \"signature\",\n        type: \"bytes\"\n      }, {\n        internalType: \"bytes\",\n        name: \"extraData\",\n        type: \"bytes\"\n      }],\n      internalType: \"struct AdvancedOrder[]\",\n      name: \"advancedOrders\",\n      type: \"tuple[]\"\n    }, {\n      components: [{\n        internalType: \"uint256\",\n        name: \"orderIndex\",\n        type: \"uint256\"\n      }, {\n        internalType: \"enum Side\",\n        name: \"side\",\n        type: \"uint8\"\n      }, {\n        internalType: \"uint256\",\n        name: \"index\",\n        type: \"uint256\"\n      }, {\n        internalType: \"uint256\",\n        name: \"identifier\",\n        type: \"uint256\"\n      }, {\n        internalType: \"bytes32[]\",\n        name: \"criteriaProof\",\n        type: \"bytes32[]\"\n      }],\n      internalType: \"struct CriteriaResolver[]\",\n      name: \"criteriaResolvers\",\n      type: \"tuple[]\"\n    }, {\n      components: [{\n        components: [{\n          internalType: \"uint256\",\n          name: \"orderIndex\",\n          type: \"uint256\"\n        }, {\n          internalType: \"uint256\",\n          name: \"itemIndex\",\n          type: \"uint256\"\n        }],\n        internalType: \"struct FulfillmentComponent[]\",\n        name: \"offerComponents\",\n        type: \"tuple[]\"\n      }, {\n        components: [{\n          internalType: \"uint256\",\n          name: \"orderIndex\",\n          type: \"uint256\"\n        }, {\n          internalType: \"uint256\",\n          name: \"itemIndex\",\n          type: \"uint256\"\n        }],\n        internalType: \"struct FulfillmentComponent[]\",\n        name: \"considerationComponents\",\n        type: \"tuple[]\"\n      }],\n      internalType: \"struct Fulfillment[]\",\n      name: \"fulfillments\",\n      type: \"tuple[]\"\n    }],\n    name: \"matchAdvancedOrders\",\n    outputs: [{\n      components: [{\n        components: [{\n          internalType: \"enum ItemType\",\n          name: \"itemType\",\n          type: \"uint8\"\n        }, {\n          internalType: \"address\",\n          name: \"token\",\n          type: \"address\"\n        }, {\n          internalType: \"uint256\",\n          name: \"identifier\",\n          type: \"uint256\"\n        }, {\n          internalType: \"uint256\",\n          name: \"amount\",\n          type: \"uint256\"\n        }, {\n          internalType: \"address payable\",\n          name: \"recipient\",\n          type: \"address\"\n        }],\n        internalType: \"struct ReceivedItem\",\n        name: \"item\",\n        type: \"tuple\"\n      }, {\n        internalType: \"address\",\n        name: \"offerer\",\n        type: \"address\"\n      }, {\n        internalType: \"bytes32\",\n        name: \"conduitKey\",\n        type: \"bytes32\"\n      }],\n      internalType: \"struct Execution[]\",\n      name: \"executions\",\n      type: \"tuple[]\"\n    }],\n    stateMutability: \"payable\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      components: [{\n        components: [{\n          internalType: \"address\",\n          name: \"offerer\",\n          type: \"address\"\n        }, {\n          internalType: \"address\",\n          name: \"zone\",\n          type: \"address\"\n        }, {\n          components: [{\n            internalType: \"enum ItemType\",\n            name: \"itemType\",\n            type: \"uint8\"\n          }, {\n            internalType: \"address\",\n            name: \"token\",\n            type: \"address\"\n          }, {\n            internalType: \"uint256\",\n            name: \"identifierOrCriteria\",\n            type: \"uint256\"\n          }, {\n            internalType: \"uint256\",\n            name: \"startAmount\",\n            type: \"uint256\"\n          }, {\n            internalType: \"uint256\",\n            name: \"endAmount\",\n            type: \"uint256\"\n          }],\n          internalType: \"struct OfferItem[]\",\n          name: \"offer\",\n          type: \"tuple[]\"\n        }, {\n          components: [{\n            internalType: \"enum ItemType\",\n            name: \"itemType\",\n            type: \"uint8\"\n          }, {\n            internalType: \"address\",\n            name: \"token\",\n            type: \"address\"\n          }, {\n            internalType: \"uint256\",\n            name: \"identifierOrCriteria\",\n            type: \"uint256\"\n          }, {\n            internalType: \"uint256\",\n            name: \"startAmount\",\n            type: \"uint256\"\n          }, {\n            internalType: \"uint256\",\n            name: \"endAmount\",\n            type: \"uint256\"\n          }, {\n            internalType: \"address payable\",\n            name: \"recipient\",\n            type: \"address\"\n          }],\n          internalType: \"struct ConsiderationItem[]\",\n          name: \"consideration\",\n          type: \"tuple[]\"\n        }, {\n          internalType: \"enum OrderType\",\n          name: \"orderType\",\n          type: \"uint8\"\n        }, {\n          internalType: \"uint256\",\n          name: \"startTime\",\n          type: \"uint256\"\n        }, {\n          internalType: \"uint256\",\n          name: \"endTime\",\n          type: \"uint256\"\n        }, {\n          internalType: \"bytes32\",\n          name: \"zoneHash\",\n          type: \"bytes32\"\n        }, {\n          internalType: \"uint256\",\n          name: \"salt\",\n          type: \"uint256\"\n        }, {\n          internalType: \"bytes32\",\n          name: \"conduitKey\",\n          type: \"bytes32\"\n        }, {\n          internalType: \"uint256\",\n          name: \"totalOriginalConsiderationItems\",\n          type: \"uint256\"\n        }],\n        internalType: \"struct OrderParameters\",\n        name: \"parameters\",\n        type: \"tuple\"\n      }, {\n        internalType: \"bytes\",\n        name: \"signature\",\n        type: \"bytes\"\n      }],\n      internalType: \"struct Order[]\",\n      name: \"orders\",\n      type: \"tuple[]\"\n    }, {\n      components: [{\n        components: [{\n          internalType: \"uint256\",\n          name: \"orderIndex\",\n          type: \"uint256\"\n        }, {\n          internalType: \"uint256\",\n          name: \"itemIndex\",\n          type: \"uint256\"\n        }],\n        internalType: \"struct FulfillmentComponent[]\",\n        name: \"offerComponents\",\n        type: \"tuple[]\"\n      }, {\n        components: [{\n          internalType: \"uint256\",\n          name: \"orderIndex\",\n          type: \"uint256\"\n        }, {\n          internalType: \"uint256\",\n          name: \"itemIndex\",\n          type: \"uint256\"\n        }],\n        internalType: \"struct FulfillmentComponent[]\",\n        name: \"considerationComponents\",\n        type: \"tuple[]\"\n      }],\n      internalType: \"struct Fulfillment[]\",\n      name: \"fulfillments\",\n      type: \"tuple[]\"\n    }],\n    name: \"matchOrders\",\n    outputs: [{\n      components: [{\n        components: [{\n          internalType: \"enum ItemType\",\n          name: \"itemType\",\n          type: \"uint8\"\n        }, {\n          internalType: \"address\",\n          name: \"token\",\n          type: \"address\"\n        }, {\n          internalType: \"uint256\",\n          name: \"identifier\",\n          type: \"uint256\"\n        }, {\n          internalType: \"uint256\",\n          name: \"amount\",\n          type: \"uint256\"\n        }, {\n          internalType: \"address payable\",\n          name: \"recipient\",\n          type: \"address\"\n        }],\n        internalType: \"struct ReceivedItem\",\n        name: \"item\",\n        type: \"tuple\"\n      }, {\n        internalType: \"address\",\n        name: \"offerer\",\n        type: \"address\"\n      }, {\n        internalType: \"bytes32\",\n        name: \"conduitKey\",\n        type: \"bytes32\"\n      }],\n      internalType: \"struct Execution[]\",\n      name: \"executions\",\n      type: \"tuple[]\"\n    }],\n    stateMutability: \"payable\",\n    type: \"function\"\n  }, {\n    inputs: [],\n    name: \"name\",\n    outputs: [{\n      internalType: \"string\",\n      name: \"contractName\",\n      type: \"string\"\n    }],\n    stateMutability: \"pure\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      components: [{\n        components: [{\n          internalType: \"address\",\n          name: \"offerer\",\n          type: \"address\"\n        }, {\n          internalType: \"address\",\n          name: \"zone\",\n          type: \"address\"\n        }, {\n          components: [{\n            internalType: \"enum ItemType\",\n            name: \"itemType\",\n            type: \"uint8\"\n          }, {\n            internalType: \"address\",\n            name: \"token\",\n            type: \"address\"\n          }, {\n            internalType: \"uint256\",\n            name: \"identifierOrCriteria\",\n            type: \"uint256\"\n          }, {\n            internalType: \"uint256\",\n            name: \"startAmount\",\n            type: \"uint256\"\n          }, {\n            internalType: \"uint256\",\n            name: \"endAmount\",\n            type: \"uint256\"\n          }],\n          internalType: \"struct OfferItem[]\",\n          name: \"offer\",\n          type: \"tuple[]\"\n        }, {\n          components: [{\n            internalType: \"enum ItemType\",\n            name: \"itemType\",\n            type: \"uint8\"\n          }, {\n            internalType: \"address\",\n            name: \"token\",\n            type: \"address\"\n          }, {\n            internalType: \"uint256\",\n            name: \"identifierOrCriteria\",\n            type: \"uint256\"\n          }, {\n            internalType: \"uint256\",\n            name: \"startAmount\",\n            type: \"uint256\"\n          }, {\n            internalType: \"uint256\",\n            name: \"endAmount\",\n            type: \"uint256\"\n          }, {\n            internalType: \"address payable\",\n            name: \"recipient\",\n            type: \"address\"\n          }],\n          internalType: \"struct ConsiderationItem[]\",\n          name: \"consideration\",\n          type: \"tuple[]\"\n        }, {\n          internalType: \"enum OrderType\",\n          name: \"orderType\",\n          type: \"uint8\"\n        }, {\n          internalType: \"uint256\",\n          name: \"startTime\",\n          type: \"uint256\"\n        }, {\n          internalType: \"uint256\",\n          name: \"endTime\",\n          type: \"uint256\"\n        }, {\n          internalType: \"bytes32\",\n          name: \"zoneHash\",\n          type: \"bytes32\"\n        }, {\n          internalType: \"uint256\",\n          name: \"salt\",\n          type: \"uint256\"\n        }, {\n          internalType: \"bytes32\",\n          name: \"conduitKey\",\n          type: \"bytes32\"\n        }, {\n          internalType: \"uint256\",\n          name: \"totalOriginalConsiderationItems\",\n          type: \"uint256\"\n        }],\n        internalType: \"struct OrderParameters\",\n        name: \"parameters\",\n        type: \"tuple\"\n      }, {\n        internalType: \"bytes\",\n        name: \"signature\",\n        type: \"bytes\"\n      }],\n      internalType: \"struct Order[]\",\n      name: \"orders\",\n      type: \"tuple[]\"\n    }],\n    name: \"validate\",\n    outputs: [{\n      internalType: \"bool\",\n      name: \"validated\",\n      type: \"bool\"\n    }],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  }],\n  W = function (e) {\n    function n(n) {\n      return e.call(this, exports.Market.Seaport, n) || this;\n    }\n    l(n, e);\n    var a = n.prototype;\n    return a.encode = function (e, a) {\n      for (var i, r = c(this.orders); !(i = r()).done;) {\n        for (var p, s = i.value, y = [], u = s.items.map(function (e, n) {\n            return [{\n              orderIndex: n,\n              itemIndex: 0\n            }];\n          }), d = this.getConsiderationFulfillments(s.items), o = c(s.items); !(p = o()).done;) {\n          var m = this.getAdvancedOrderParams(p.value);\n          y.push(m.advancedOrder);\n        }\n        var l;\n        l = 1 == y.length ? n.INTERFACE.encodeFunctionData(\"fulfillAdvancedOrder\", [y[0], [], n.OPENSEA_CONDUIT_KEY, s.recipient]) : n.INTERFACE.encodeFunctionData(\"fulfillAvailableAdvancedOrders\", [y, [], u, d, n.OPENSEA_CONDUIT_KEY, s.recipient, 100]), e.addCommand(t.SEAPORT, [this.getTotalPrice().toString(), l], a.allowRevert);\n      }\n    }, a.getBuyItems = function () {\n      for (var e, n = [], t = c(this.orders); !(e = t()).done;) {\n        for (var a, i = c(e.value.items); !(a = i()).done;) {\n          for (var r, p = c(a.value.parameters.offer); !(r = p()).done;) {\n            var s = r.value;\n            n.push({\n              tokenAddress: s.token,\n              tokenId: s.identifierOrCriteria,\n              tokenType: exports.TokenType.ERC721\n            });\n          }\n        }\n      }\n      return n;\n    }, a.getTotalPrice = function () {\n      for (var e, n = p.BigNumber.from(0), t = c(this.orders); !(e = t()).done;) {\n        for (var a, i = c(e.value.items); !(a = i()).done;) {\n          n = n.add(this.calculateValue(a.value.parameters.consideration));\n        }\n      }\n      return n;\n    }, a.getConsiderationFulfillments = function (e) {\n      var n = [],\n        t = [];\n      for (var a in e) {\n        var i = e[a],\n          r = function r(e) {\n            var r = i.parameters.consideration[e];\n            -1 === t.findIndex(function (e) {\n              return e === r.recipient;\n            }) && t.push(r.recipient);\n            var p = t.findIndex(function (e) {\n              return e === r.recipient;\n            });\n            n[p] ? n[p].push({\n              orderIndex: a,\n              itemIndex: e\n            }) : n.push([{\n              orderIndex: a,\n              itemIndex: e\n            }]);\n          };\n        for (var p in i.parameters.consideration) {\n          r(p);\n        }\n      }\n      return n;\n    }, a.getAdvancedOrderParams = function (e) {\n      return {\n        advancedOrder: {\n          parameters: e.parameters,\n          numerator: p.BigNumber.from(\"1\"),\n          denominator: p.BigNumber.from(\"1\"),\n          signature: e.signature,\n          extraData: \"0x00\"\n        },\n        value: this.calculateValue(e.parameters.consideration)\n      };\n    }, a.calculateValue = function (e) {\n      return e.reduce(function (e, n) {\n        return e.add(n.startAmount);\n      }, p.BigNumber.from(0));\n    }, n;\n  }(F);\nW.INTERFACE = new r.Interface(H), W.OPENSEA_CONDUIT_KEY = \"0x0000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000\";\nvar U = [{\n    inputs: [{\n      internalType: \"contract ILSSVMPairFactoryLike\",\n      name: \"_factory\",\n      type: \"address\"\n    }],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\"\n  }, {\n    inputs: [],\n    name: \"factory\",\n    outputs: [{\n      internalType: \"contract ILSSVMPairFactoryLike\",\n      name: \"\",\n      type: \"address\"\n    }],\n    stateMutability: \"view\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"contract ERC20\",\n      name: \"token\",\n      type: \"address\"\n    }, {\n      internalType: \"address\",\n      name: \"from\",\n      type: \"address\"\n    }, {\n      internalType: \"address\",\n      name: \"to\",\n      type: \"address\"\n    }, {\n      internalType: \"uint256\",\n      name: \"amount\",\n      type: \"uint256\"\n    }, {\n      internalType: \"enum ILSSVMPairFactoryLike.PairVariant\",\n      name: \"variant\",\n      type: \"uint8\"\n    }],\n    name: \"pairTransferERC20From\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"contract IERC721\",\n      name: \"nft\",\n      type: \"address\"\n    }, {\n      internalType: \"address\",\n      name: \"from\",\n      type: \"address\"\n    }, {\n      internalType: \"address\",\n      name: \"to\",\n      type: \"address\"\n    }, {\n      internalType: \"uint256\",\n      name: \"id\",\n      type: \"uint256\"\n    }, {\n      internalType: \"enum ILSSVMPairFactoryLike.PairVariant\",\n      name: \"variant\",\n      type: \"uint8\"\n    }],\n    name: \"pairTransferNFTFrom\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      components: [{\n        components: [{\n          internalType: \"contract LSSVMPair\",\n          name: \"pair\",\n          type: \"address\"\n        }, {\n          internalType: \"uint256\",\n          name: \"numItems\",\n          type: \"uint256\"\n        }],\n        internalType: \"struct LSSVMRouter.PairSwapAny\",\n        name: \"swapInfo\",\n        type: \"tuple\"\n      }, {\n        internalType: \"uint256\",\n        name: \"maxCost\",\n        type: \"uint256\"\n      }],\n      internalType: \"struct LSSVMRouter.RobustPairSwapAny[]\",\n      name: \"swapList\",\n      type: \"tuple[]\"\n    }, {\n      internalType: \"uint256\",\n      name: \"inputAmount\",\n      type: \"uint256\"\n    }, {\n      internalType: \"address\",\n      name: \"nftRecipient\",\n      type: \"address\"\n    }, {\n      internalType: \"uint256\",\n      name: \"deadline\",\n      type: \"uint256\"\n    }],\n    name: \"robustSwapERC20ForAnyNFTs\",\n    outputs: [{\n      internalType: \"uint256\",\n      name: \"remainingValue\",\n      type: \"uint256\"\n    }],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      components: [{\n        components: [{\n          internalType: \"contract LSSVMPair\",\n          name: \"pair\",\n          type: \"address\"\n        }, {\n          internalType: \"uint256[]\",\n          name: \"nftIds\",\n          type: \"uint256[]\"\n        }],\n        internalType: \"struct LSSVMRouter.PairSwapSpecific\",\n        name: \"swapInfo\",\n        type: \"tuple\"\n      }, {\n        internalType: \"uint256\",\n        name: \"maxCost\",\n        type: \"uint256\"\n      }],\n      internalType: \"struct LSSVMRouter.RobustPairSwapSpecific[]\",\n      name: \"swapList\",\n      type: \"tuple[]\"\n    }, {\n      internalType: \"uint256\",\n      name: \"inputAmount\",\n      type: \"uint256\"\n    }, {\n      internalType: \"address\",\n      name: \"nftRecipient\",\n      type: \"address\"\n    }, {\n      internalType: \"uint256\",\n      name: \"deadline\",\n      type: \"uint256\"\n    }],\n    name: \"robustSwapERC20ForSpecificNFTs\",\n    outputs: [{\n      internalType: \"uint256\",\n      name: \"remainingValue\",\n      type: \"uint256\"\n    }],\n    stateMutability: \"payable\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      components: [{\n        components: [{\n          components: [{\n            internalType: \"contract LSSVMPair\",\n            name: \"pair\",\n            type: \"address\"\n          }, {\n            internalType: \"uint256[]\",\n            name: \"nftIds\",\n            type: \"uint256[]\"\n          }],\n          internalType: \"struct LSSVMRouter.PairSwapSpecific\",\n          name: \"swapInfo\",\n          type: \"tuple\"\n        }, {\n          internalType: \"uint256\",\n          name: \"maxCost\",\n          type: \"uint256\"\n        }],\n        internalType: \"struct LSSVMRouter.RobustPairSwapSpecific[]\",\n        name: \"tokenToNFTTrades\",\n        type: \"tuple[]\"\n      }, {\n        components: [{\n          components: [{\n            internalType: \"contract LSSVMPair\",\n            name: \"pair\",\n            type: \"address\"\n          }, {\n            internalType: \"uint256[]\",\n            name: \"nftIds\",\n            type: \"uint256[]\"\n          }],\n          internalType: \"struct LSSVMRouter.PairSwapSpecific\",\n          name: \"swapInfo\",\n          type: \"tuple\"\n        }, {\n          internalType: \"uint256\",\n          name: \"minOutput\",\n          type: \"uint256\"\n        }],\n        internalType: \"struct LSSVMRouter.RobustPairSwapSpecificForToken[]\",\n        name: \"nftToTokenTrades\",\n        type: \"tuple[]\"\n      }, {\n        internalType: \"uint256\",\n        name: \"inputAmount\",\n        type: \"uint256\"\n      }, {\n        internalType: \"address payable\",\n        name: \"tokenRecipient\",\n        type: \"address\"\n      }, {\n        internalType: \"address\",\n        name: \"nftRecipient\",\n        type: \"address\"\n      }],\n      internalType: \"struct LSSVMRouter.RobustPairNFTsFoTokenAndTokenforNFTsTrade\",\n      name: \"params\",\n      type: \"tuple\"\n    }],\n    name: \"robustSwapERC20ForSpecificNFTsAndNFTsToToken\",\n    outputs: [{\n      internalType: \"uint256\",\n      name: \"remainingValue\",\n      type: \"uint256\"\n    }, {\n      internalType: \"uint256\",\n      name: \"outputAmount\",\n      type: \"uint256\"\n    }],\n    stateMutability: \"payable\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      components: [{\n        components: [{\n          internalType: \"contract LSSVMPair\",\n          name: \"pair\",\n          type: \"address\"\n        }, {\n          internalType: \"uint256\",\n          name: \"numItems\",\n          type: \"uint256\"\n        }],\n        internalType: \"struct LSSVMRouter.PairSwapAny\",\n        name: \"swapInfo\",\n        type: \"tuple\"\n      }, {\n        internalType: \"uint256\",\n        name: \"maxCost\",\n        type: \"uint256\"\n      }],\n      internalType: \"struct LSSVMRouter.RobustPairSwapAny[]\",\n      name: \"swapList\",\n      type: \"tuple[]\"\n    }, {\n      internalType: \"address payable\",\n      name: \"ethRecipient\",\n      type: \"address\"\n    }, {\n      internalType: \"address\",\n      name: \"nftRecipient\",\n      type: \"address\"\n    }, {\n      internalType: \"uint256\",\n      name: \"deadline\",\n      type: \"uint256\"\n    }],\n    name: \"robustSwapETHForAnyNFTs\",\n    outputs: [{\n      internalType: \"uint256\",\n      name: \"remainingValue\",\n      type: \"uint256\"\n    }],\n    stateMutability: \"payable\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      components: [{\n        components: [{\n          internalType: \"contract LSSVMPair\",\n          name: \"pair\",\n          type: \"address\"\n        }, {\n          internalType: \"uint256[]\",\n          name: \"nftIds\",\n          type: \"uint256[]\"\n        }],\n        internalType: \"struct LSSVMRouter.PairSwapSpecific\",\n        name: \"swapInfo\",\n        type: \"tuple\"\n      }, {\n        internalType: \"uint256\",\n        name: \"maxCost\",\n        type: \"uint256\"\n      }],\n      internalType: \"struct LSSVMRouter.RobustPairSwapSpecific[]\",\n      name: \"swapList\",\n      type: \"tuple[]\"\n    }, {\n      internalType: \"address payable\",\n      name: \"ethRecipient\",\n      type: \"address\"\n    }, {\n      internalType: \"address\",\n      name: \"nftRecipient\",\n      type: \"address\"\n    }, {\n      internalType: \"uint256\",\n      name: \"deadline\",\n      type: \"uint256\"\n    }],\n    name: \"robustSwapETHForSpecificNFTs\",\n    outputs: [{\n      internalType: \"uint256\",\n      name: \"remainingValue\",\n      type: \"uint256\"\n    }],\n    stateMutability: \"payable\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      components: [{\n        components: [{\n          components: [{\n            internalType: \"contract LSSVMPair\",\n            name: \"pair\",\n            type: \"address\"\n          }, {\n            internalType: \"uint256[]\",\n            name: \"nftIds\",\n            type: \"uint256[]\"\n          }],\n          internalType: \"struct LSSVMRouter.PairSwapSpecific\",\n          name: \"swapInfo\",\n          type: \"tuple\"\n        }, {\n          internalType: \"uint256\",\n          name: \"maxCost\",\n          type: \"uint256\"\n        }],\n        internalType: \"struct LSSVMRouter.RobustPairSwapSpecific[]\",\n        name: \"tokenToNFTTrades\",\n        type: \"tuple[]\"\n      }, {\n        components: [{\n          components: [{\n            internalType: \"contract LSSVMPair\",\n            name: \"pair\",\n            type: \"address\"\n          }, {\n            internalType: \"uint256[]\",\n            name: \"nftIds\",\n            type: \"uint256[]\"\n          }],\n          internalType: \"struct LSSVMRouter.PairSwapSpecific\",\n          name: \"swapInfo\",\n          type: \"tuple\"\n        }, {\n          internalType: \"uint256\",\n          name: \"minOutput\",\n          type: \"uint256\"\n        }],\n        internalType: \"struct LSSVMRouter.RobustPairSwapSpecificForToken[]\",\n        name: \"nftToTokenTrades\",\n        type: \"tuple[]\"\n      }, {\n        internalType: \"uint256\",\n        name: \"inputAmount\",\n        type: \"uint256\"\n      }, {\n        internalType: \"address payable\",\n        name: \"tokenRecipient\",\n        type: \"address\"\n      }, {\n        internalType: \"address\",\n        name: \"nftRecipient\",\n        type: \"address\"\n      }],\n      internalType: \"struct LSSVMRouter.RobustPairNFTsFoTokenAndTokenforNFTsTrade\",\n      name: \"params\",\n      type: \"tuple\"\n    }],\n    name: \"robustSwapETHForSpecificNFTsAndNFTsToToken\",\n    outputs: [{\n      internalType: \"uint256\",\n      name: \"remainingValue\",\n      type: \"uint256\"\n    }, {\n      internalType: \"uint256\",\n      name: \"outputAmount\",\n      type: \"uint256\"\n    }],\n    stateMutability: \"payable\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      components: [{\n        components: [{\n          internalType: \"contract LSSVMPair\",\n          name: \"pair\",\n          type: \"address\"\n        }, {\n          internalType: \"uint256[]\",\n          name: \"nftIds\",\n          type: \"uint256[]\"\n        }],\n        internalType: \"struct LSSVMRouter.PairSwapSpecific\",\n        name: \"swapInfo\",\n        type: \"tuple\"\n      }, {\n        internalType: \"uint256\",\n        name: \"minOutput\",\n        type: \"uint256\"\n      }],\n      internalType: \"struct LSSVMRouter.RobustPairSwapSpecificForToken[]\",\n      name: \"swapList\",\n      type: \"tuple[]\"\n    }, {\n      internalType: \"address payable\",\n      name: \"tokenRecipient\",\n      type: \"address\"\n    }, {\n      internalType: \"uint256\",\n      name: \"deadline\",\n      type: \"uint256\"\n    }],\n    name: \"robustSwapNFTsForToken\",\n    outputs: [{\n      internalType: \"uint256\",\n      name: \"outputAmount\",\n      type: \"uint256\"\n    }],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      components: [{\n        internalType: \"contract LSSVMPair\",\n        name: \"pair\",\n        type: \"address\"\n      }, {\n        internalType: \"uint256\",\n        name: \"numItems\",\n        type: \"uint256\"\n      }],\n      internalType: \"struct LSSVMRouter.PairSwapAny[]\",\n      name: \"swapList\",\n      type: \"tuple[]\"\n    }, {\n      internalType: \"uint256\",\n      name: \"inputAmount\",\n      type: \"uint256\"\n    }, {\n      internalType: \"address\",\n      name: \"nftRecipient\",\n      type: \"address\"\n    }, {\n      internalType: \"uint256\",\n      name: \"deadline\",\n      type: \"uint256\"\n    }],\n    name: \"swapERC20ForAnyNFTs\",\n    outputs: [{\n      internalType: \"uint256\",\n      name: \"remainingValue\",\n      type: \"uint256\"\n    }],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      components: [{\n        internalType: \"contract LSSVMPair\",\n        name: \"pair\",\n        type: \"address\"\n      }, {\n        internalType: \"uint256[]\",\n        name: \"nftIds\",\n        type: \"uint256[]\"\n      }],\n      internalType: \"struct LSSVMRouter.PairSwapSpecific[]\",\n      name: \"swapList\",\n      type: \"tuple[]\"\n    }, {\n      internalType: \"uint256\",\n      name: \"inputAmount\",\n      type: \"uint256\"\n    }, {\n      internalType: \"address\",\n      name: \"nftRecipient\",\n      type: \"address\"\n    }, {\n      internalType: \"uint256\",\n      name: \"deadline\",\n      type: \"uint256\"\n    }],\n    name: \"swapERC20ForSpecificNFTs\",\n    outputs: [{\n      internalType: \"uint256\",\n      name: \"remainingValue\",\n      type: \"uint256\"\n    }],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      components: [{\n        internalType: \"contract LSSVMPair\",\n        name: \"pair\",\n        type: \"address\"\n      }, {\n        internalType: \"uint256\",\n        name: \"numItems\",\n        type: \"uint256\"\n      }],\n      internalType: \"struct LSSVMRouter.PairSwapAny[]\",\n      name: \"swapList\",\n      type: \"tuple[]\"\n    }, {\n      internalType: \"address payable\",\n      name: \"ethRecipient\",\n      type: \"address\"\n    }, {\n      internalType: \"address\",\n      name: \"nftRecipient\",\n      type: \"address\"\n    }, {\n      internalType: \"uint256\",\n      name: \"deadline\",\n      type: \"uint256\"\n    }],\n    name: \"swapETHForAnyNFTs\",\n    outputs: [{\n      internalType: \"uint256\",\n      name: \"remainingValue\",\n      type: \"uint256\"\n    }],\n    stateMutability: \"payable\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      components: [{\n        internalType: \"contract LSSVMPair\",\n        name: \"pair\",\n        type: \"address\"\n      }, {\n        internalType: \"uint256[]\",\n        name: \"nftIds\",\n        type: \"uint256[]\"\n      }],\n      internalType: \"struct LSSVMRouter.PairSwapSpecific[]\",\n      name: \"swapList\",\n      type: \"tuple[]\"\n    }, {\n      internalType: \"address payable\",\n      name: \"ethRecipient\",\n      type: \"address\"\n    }, {\n      internalType: \"address\",\n      name: \"nftRecipient\",\n      type: \"address\"\n    }, {\n      internalType: \"uint256\",\n      name: \"deadline\",\n      type: \"uint256\"\n    }],\n    name: \"swapETHForSpecificNFTs\",\n    outputs: [{\n      internalType: \"uint256\",\n      name: \"remainingValue\",\n      type: \"uint256\"\n    }],\n    stateMutability: \"payable\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      components: [{\n        components: [{\n          internalType: \"contract LSSVMPair\",\n          name: \"pair\",\n          type: \"address\"\n        }, {\n          internalType: \"uint256[]\",\n          name: \"nftIds\",\n          type: \"uint256[]\"\n        }],\n        internalType: \"struct LSSVMRouter.PairSwapSpecific[]\",\n        name: \"nftToTokenTrades\",\n        type: \"tuple[]\"\n      }, {\n        components: [{\n          internalType: \"contract LSSVMPair\",\n          name: \"pair\",\n          type: \"address\"\n        }, {\n          internalType: \"uint256\",\n          name: \"numItems\",\n          type: \"uint256\"\n        }],\n        internalType: \"struct LSSVMRouter.PairSwapAny[]\",\n        name: \"tokenToNFTTrades\",\n        type: \"tuple[]\"\n      }],\n      internalType: \"struct LSSVMRouter.NFTsForAnyNFTsTrade\",\n      name: \"trade\",\n      type: \"tuple\"\n    }, {\n      internalType: \"uint256\",\n      name: \"inputAmount\",\n      type: \"uint256\"\n    }, {\n      internalType: \"uint256\",\n      name: \"minOutput\",\n      type: \"uint256\"\n    }, {\n      internalType: \"address\",\n      name: \"nftRecipient\",\n      type: \"address\"\n    }, {\n      internalType: \"uint256\",\n      name: \"deadline\",\n      type: \"uint256\"\n    }],\n    name: \"swapNFTsForAnyNFTsThroughERC20\",\n    outputs: [{\n      internalType: \"uint256\",\n      name: \"outputAmount\",\n      type: \"uint256\"\n    }],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      components: [{\n        components: [{\n          internalType: \"contract LSSVMPair\",\n          name: \"pair\",\n          type: \"address\"\n        }, {\n          internalType: \"uint256[]\",\n          name: \"nftIds\",\n          type: \"uint256[]\"\n        }],\n        internalType: \"struct LSSVMRouter.PairSwapSpecific[]\",\n        name: \"nftToTokenTrades\",\n        type: \"tuple[]\"\n      }, {\n        components: [{\n          internalType: \"contract LSSVMPair\",\n          name: \"pair\",\n          type: \"address\"\n        }, {\n          internalType: \"uint256\",\n          name: \"numItems\",\n          type: \"uint256\"\n        }],\n        internalType: \"struct LSSVMRouter.PairSwapAny[]\",\n        name: \"tokenToNFTTrades\",\n        type: \"tuple[]\"\n      }],\n      internalType: \"struct LSSVMRouter.NFTsForAnyNFTsTrade\",\n      name: \"trade\",\n      type: \"tuple\"\n    }, {\n      internalType: \"uint256\",\n      name: \"minOutput\",\n      type: \"uint256\"\n    }, {\n      internalType: \"address payable\",\n      name: \"ethRecipient\",\n      type: \"address\"\n    }, {\n      internalType: \"address\",\n      name: \"nftRecipient\",\n      type: \"address\"\n    }, {\n      internalType: \"uint256\",\n      name: \"deadline\",\n      type: \"uint256\"\n    }],\n    name: \"swapNFTsForAnyNFTsThroughETH\",\n    outputs: [{\n      internalType: \"uint256\",\n      name: \"outputAmount\",\n      type: \"uint256\"\n    }],\n    stateMutability: \"payable\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      components: [{\n        components: [{\n          internalType: \"contract LSSVMPair\",\n          name: \"pair\",\n          type: \"address\"\n        }, {\n          internalType: \"uint256[]\",\n          name: \"nftIds\",\n          type: \"uint256[]\"\n        }],\n        internalType: \"struct LSSVMRouter.PairSwapSpecific[]\",\n        name: \"nftToTokenTrades\",\n        type: \"tuple[]\"\n      }, {\n        components: [{\n          internalType: \"contract LSSVMPair\",\n          name: \"pair\",\n          type: \"address\"\n        }, {\n          internalType: \"uint256[]\",\n          name: \"nftIds\",\n          type: \"uint256[]\"\n        }],\n        internalType: \"struct LSSVMRouter.PairSwapSpecific[]\",\n        name: \"tokenToNFTTrades\",\n        type: \"tuple[]\"\n      }],\n      internalType: \"struct LSSVMRouter.NFTsForSpecificNFTsTrade\",\n      name: \"trade\",\n      type: \"tuple\"\n    }, {\n      internalType: \"uint256\",\n      name: \"inputAmount\",\n      type: \"uint256\"\n    }, {\n      internalType: \"uint256\",\n      name: \"minOutput\",\n      type: \"uint256\"\n    }, {\n      internalType: \"address\",\n      name: \"nftRecipient\",\n      type: \"address\"\n    }, {\n      internalType: \"uint256\",\n      name: \"deadline\",\n      type: \"uint256\"\n    }],\n    name: \"swapNFTsForSpecificNFTsThroughERC20\",\n    outputs: [{\n      internalType: \"uint256\",\n      name: \"outputAmount\",\n      type: \"uint256\"\n    }],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      components: [{\n        components: [{\n          internalType: \"contract LSSVMPair\",\n          name: \"pair\",\n          type: \"address\"\n        }, {\n          internalType: \"uint256[]\",\n          name: \"nftIds\",\n          type: \"uint256[]\"\n        }],\n        internalType: \"struct LSSVMRouter.PairSwapSpecific[]\",\n        name: \"nftToTokenTrades\",\n        type: \"tuple[]\"\n      }, {\n        components: [{\n          internalType: \"contract LSSVMPair\",\n          name: \"pair\",\n          type: \"address\"\n        }, {\n          internalType: \"uint256[]\",\n          name: \"nftIds\",\n          type: \"uint256[]\"\n        }],\n        internalType: \"struct LSSVMRouter.PairSwapSpecific[]\",\n        name: \"tokenToNFTTrades\",\n        type: \"tuple[]\"\n      }],\n      internalType: \"struct LSSVMRouter.NFTsForSpecificNFTsTrade\",\n      name: \"trade\",\n      type: \"tuple\"\n    }, {\n      internalType: \"uint256\",\n      name: \"minOutput\",\n      type: \"uint256\"\n    }, {\n      internalType: \"address payable\",\n      name: \"ethRecipient\",\n      type: \"address\"\n    }, {\n      internalType: \"address\",\n      name: \"nftRecipient\",\n      type: \"address\"\n    }, {\n      internalType: \"uint256\",\n      name: \"deadline\",\n      type: \"uint256\"\n    }],\n    name: \"swapNFTsForSpecificNFTsThroughETH\",\n    outputs: [{\n      internalType: \"uint256\",\n      name: \"outputAmount\",\n      type: \"uint256\"\n    }],\n    stateMutability: \"payable\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      components: [{\n        internalType: \"contract LSSVMPair\",\n        name: \"pair\",\n        type: \"address\"\n      }, {\n        internalType: \"uint256[]\",\n        name: \"nftIds\",\n        type: \"uint256[]\"\n      }],\n      internalType: \"struct LSSVMRouter.PairSwapSpecific[]\",\n      name: \"swapList\",\n      type: \"tuple[]\"\n    }, {\n      internalType: \"uint256\",\n      name: \"minOutput\",\n      type: \"uint256\"\n    }, {\n      internalType: \"address\",\n      name: \"tokenRecipient\",\n      type: \"address\"\n    }, {\n      internalType: \"uint256\",\n      name: \"deadline\",\n      type: \"uint256\"\n    }],\n    name: \"swapNFTsForToken\",\n    outputs: [{\n      internalType: \"uint256\",\n      name: \"outputAmount\",\n      type: \"uint256\"\n    }],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  }, {\n    stateMutability: \"payable\",\n    type: \"receive\"\n  }],\n  D = function (e) {\n    function n(n) {\n      return e.call(this, exports.Market.Sudoswap, n) || this;\n    }\n    l(n, e);\n    var a = n.prototype;\n    return a.encode = function (e, a) {\n      for (var i, r = c(this.orders); !(i = r()).done;) {\n        var s = i.value,\n          y = n.INTERFACE.encodeFunctionData(\"robustSwapETHForSpecificNFTs\", [s.swaps.map(function (e) {\n            return {\n              swapInfo: e.swapInfo,\n              maxCost: e.maxCost\n            };\n          }), s.ethRecipient, s.nftRecipient, s.deadline]),\n          u = s.swaps.reduce(function (e, n) {\n            return e.add(n.maxCost);\n          }, p.BigNumber.from(0));\n        e.addCommand(t.SUDOSWAP, [u, y], a.allowRevert);\n      }\n    }, a.getBuyItems = function () {\n      for (var e, n = [], t = c(this.orders); !(e = t()).done;) {\n        for (var a, i = c(e.value.swaps); !(a = i()).done;) {\n          for (var r, p = a.value, s = c(p.swapInfo.nftIds); !(r = s()).done;) {\n            n.push({\n              tokenAddress: p.tokenAddress,\n              tokenId: r.value,\n              tokenType: exports.TokenType.ERC721\n            });\n          }\n        }\n      }\n      return n;\n    }, a.getTotalPrice = function () {\n      for (var e, n = p.BigNumber.from(0), t = c(this.orders); !(e = t()).done;) {\n        for (var a, i = c(e.value.swaps); !(a = i()).done;) {\n          n = n.add(a.value.maxCost);\n        }\n      }\n      return n;\n    }, n;\n  }(F);\nD.INTERFACE = new r.Interface(U);\nvar X = [{\n    anonymous: !1,\n    inputs: [{\n      indexed: !0,\n      internalType: \"bytes32\",\n      name: \"itemHash\",\n      type: \"bytes32\"\n    }, {\n      indexed: !1,\n      internalType: \"address\",\n      name: \"currency\",\n      type: \"address\"\n    }, {\n      indexed: !1,\n      internalType: \"address\",\n      name: \"to\",\n      type: \"address\"\n    }, {\n      indexed: !1,\n      internalType: \"uint256\",\n      name: \"amount\",\n      type: \"uint256\"\n    }, {\n      indexed: !1,\n      internalType: \"uint256\",\n      name: \"incentive\",\n      type: \"uint256\"\n    }],\n    name: \"EvAuctionRefund\",\n    type: \"event\"\n  }, {\n    anonymous: !1,\n    inputs: [{\n      indexed: !0,\n      internalType: \"bytes32\",\n      name: \"itemHash\",\n      type: \"bytes32\"\n    }],\n    name: \"EvCancel\",\n    type: \"event\"\n  }, {\n    anonymous: !1,\n    inputs: [{\n      indexed: !1,\n      internalType: \"address\",\n      name: \"delegate\",\n      type: \"address\"\n    }, {\n      indexed: !1,\n      internalType: \"bool\",\n      name: \"isRemoval\",\n      type: \"bool\"\n    }],\n    name: \"EvDelegate\",\n    type: \"event\"\n  }, {\n    anonymous: !1,\n    inputs: [{\n      indexed: !1,\n      internalType: \"uint256\",\n      name: \"index\",\n      type: \"uint256\"\n    }, {\n      indexed: !1,\n      internalType: \"bytes\",\n      name: \"error\",\n      type: \"bytes\"\n    }],\n    name: \"EvFailure\",\n    type: \"event\"\n  }, {\n    anonymous: !1,\n    inputs: [{\n      indexed: !1,\n      internalType: \"uint256\",\n      name: \"newValue\",\n      type: \"uint256\"\n    }],\n    name: \"EvFeeCapUpdate\",\n    type: \"event\"\n  }, {\n    anonymous: !1,\n    inputs: [{\n      indexed: !0,\n      internalType: \"bytes32\",\n      name: \"itemHash\",\n      type: \"bytes32\"\n    }, {\n      indexed: !1,\n      internalType: \"address\",\n      name: \"maker\",\n      type: \"address\"\n    }, {\n      indexed: !1,\n      internalType: \"address\",\n      name: \"taker\",\n      type: \"address\"\n    }, {\n      indexed: !1,\n      internalType: \"uint256\",\n      name: \"orderSalt\",\n      type: \"uint256\"\n    }, {\n      indexed: !1,\n      internalType: \"uint256\",\n      name: \"settleSalt\",\n      type: \"uint256\"\n    }, {\n      indexed: !1,\n      internalType: \"uint256\",\n      name: \"intent\",\n      type: \"uint256\"\n    }, {\n      indexed: !1,\n      internalType: \"uint256\",\n      name: \"delegateType\",\n      type: \"uint256\"\n    }, {\n      indexed: !1,\n      internalType: \"uint256\",\n      name: \"deadline\",\n      type: \"uint256\"\n    }, {\n      indexed: !1,\n      internalType: \"contract IERC20Upgradeable\",\n      name: \"currency\",\n      type: \"address\"\n    }, {\n      indexed: !1,\n      internalType: \"bytes\",\n      name: \"dataMask\",\n      type: \"bytes\"\n    }, {\n      components: [{\n        internalType: \"uint256\",\n        name: \"price\",\n        type: \"uint256\"\n      }, {\n        internalType: \"bytes\",\n        name: \"data\",\n        type: \"bytes\"\n      }],\n      indexed: !1,\n      internalType: \"struct Market.OrderItem\",\n      name: \"item\",\n      type: \"tuple\"\n    }, {\n      components: [{\n        internalType: \"enum Market.Op\",\n        name: \"op\",\n        type: \"uint8\"\n      }, {\n        internalType: \"uint256\",\n        name: \"orderIdx\",\n        type: \"uint256\"\n      }, {\n        internalType: \"uint256\",\n        name: \"itemIdx\",\n        type: \"uint256\"\n      }, {\n        internalType: \"uint256\",\n        name: \"price\",\n        type: \"uint256\"\n      }, {\n        internalType: \"bytes32\",\n        name: \"itemHash\",\n        type: \"bytes32\"\n      }, {\n        internalType: \"contract IDelegate\",\n        name: \"executionDelegate\",\n        type: \"address\"\n      }, {\n        internalType: \"bytes\",\n        name: \"dataReplacement\",\n        type: \"bytes\"\n      }, {\n        internalType: \"uint256\",\n        name: \"bidIncentivePct\",\n        type: \"uint256\"\n      }, {\n        internalType: \"uint256\",\n        name: \"aucMinIncrementPct\",\n        type: \"uint256\"\n      }, {\n        internalType: \"uint256\",\n        name: \"aucIncDurationSecs\",\n        type: \"uint256\"\n      }, {\n        components: [{\n          internalType: \"uint256\",\n          name: \"percentage\",\n          type: \"uint256\"\n        }, {\n          internalType: \"address\",\n          name: \"to\",\n          type: \"address\"\n        }],\n        internalType: \"struct Market.Fee[]\",\n        name: \"fees\",\n        type: \"tuple[]\"\n      }],\n      indexed: !1,\n      internalType: \"struct Market.SettleDetail\",\n      name: \"detail\",\n      type: \"tuple\"\n    }],\n    name: \"EvInventory\",\n    type: \"event\"\n  }, {\n    anonymous: !1,\n    inputs: [{\n      indexed: !1,\n      internalType: \"bytes32\",\n      name: \"itemHash\",\n      type: \"bytes32\"\n    }, {\n      indexed: !1,\n      internalType: \"address\",\n      name: \"currency\",\n      type: \"address\"\n    }, {\n      indexed: !1,\n      internalType: \"address\",\n      name: \"to\",\n      type: \"address\"\n    }, {\n      indexed: !1,\n      internalType: \"uint256\",\n      name: \"amount\",\n      type: \"uint256\"\n    }],\n    name: \"EvProfit\",\n    type: \"event\"\n  }, {\n    anonymous: !1,\n    inputs: [{\n      indexed: !1,\n      internalType: \"address\",\n      name: \"signer\",\n      type: \"address\"\n    }, {\n      indexed: !1,\n      internalType: \"bool\",\n      name: \"isRemoval\",\n      type: \"bool\"\n    }],\n    name: \"EvSigner\",\n    type: \"event\"\n  }, {\n    anonymous: !1,\n    inputs: [{\n      indexed: !0,\n      internalType: \"address\",\n      name: \"previousOwner\",\n      type: \"address\"\n    }, {\n      indexed: !0,\n      internalType: \"address\",\n      name: \"newOwner\",\n      type: \"address\"\n    }],\n    name: \"OwnershipTransferred\",\n    type: \"event\"\n  }, {\n    anonymous: !1,\n    inputs: [{\n      indexed: !1,\n      internalType: \"address\",\n      name: \"account\",\n      type: \"address\"\n    }],\n    name: \"Paused\",\n    type: \"event\"\n  }, {\n    anonymous: !1,\n    inputs: [{\n      indexed: !1,\n      internalType: \"address\",\n      name: \"account\",\n      type: \"address\"\n    }],\n    name: \"Unpaused\",\n    type: \"event\"\n  }, {\n    inputs: [],\n    name: \"RATE_BASE\",\n    outputs: [{\n      internalType: \"uint256\",\n      name: \"\",\n      type: \"uint256\"\n    }],\n    stateMutability: \"view\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"bytes32[]\",\n      name: \"itemHashes\",\n      type: \"bytes32[]\"\n    }, {\n      internalType: \"uint256\",\n      name: \"deadline\",\n      type: \"uint256\"\n    }, {\n      internalType: \"uint8\",\n      name: \"v\",\n      type: \"uint8\"\n    }, {\n      internalType: \"bytes32\",\n      name: \"r\",\n      type: \"bytes32\"\n    }, {\n      internalType: \"bytes32\",\n      name: \"s\",\n      type: \"bytes32\"\n    }],\n    name: \"cancel\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"address\",\n      name: \"\",\n      type: \"address\"\n    }],\n    name: \"delegates\",\n    outputs: [{\n      internalType: \"bool\",\n      name: \"\",\n      type: \"bool\"\n    }],\n    stateMutability: \"view\",\n    type: \"function\"\n  }, {\n    inputs: [],\n    name: \"feeCapPct\",\n    outputs: [{\n      internalType: \"uint256\",\n      name: \"\",\n      type: \"uint256\"\n    }],\n    stateMutability: \"view\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"uint256\",\n      name: \"feeCapPct_\",\n      type: \"uint256\"\n    }, {\n      internalType: \"address\",\n      name: \"weth_\",\n      type: \"address\"\n    }],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"bytes32\",\n      name: \"\",\n      type: \"bytes32\"\n    }],\n    name: \"inventoryStatus\",\n    outputs: [{\n      internalType: \"enum Market.InvStatus\",\n      name: \"\",\n      type: \"uint8\"\n    }],\n    stateMutability: \"view\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"bytes32\",\n      name: \"\",\n      type: \"bytes32\"\n    }],\n    name: \"ongoingAuctions\",\n    outputs: [{\n      internalType: \"uint256\",\n      name: \"price\",\n      type: \"uint256\"\n    }, {\n      internalType: \"uint256\",\n      name: \"netPrice\",\n      type: \"uint256\"\n    }, {\n      internalType: \"uint256\",\n      name: \"endAt\",\n      type: \"uint256\"\n    }, {\n      internalType: \"address\",\n      name: \"bidder\",\n      type: \"address\"\n    }],\n    stateMutability: \"view\",\n    type: \"function\"\n  }, {\n    inputs: [],\n    name: \"owner\",\n    outputs: [{\n      internalType: \"address\",\n      name: \"\",\n      type: \"address\"\n    }],\n    stateMutability: \"view\",\n    type: \"function\"\n  }, {\n    inputs: [],\n    name: \"pause\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  }, {\n    inputs: [],\n    name: \"paused\",\n    outputs: [{\n      internalType: \"bool\",\n      name: \"\",\n      type: \"bool\"\n    }],\n    stateMutability: \"view\",\n    type: \"function\"\n  }, {\n    inputs: [],\n    name: \"renounceOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      components: [{\n        components: [{\n          internalType: \"uint256\",\n          name: \"salt\",\n          type: \"uint256\"\n        }, {\n          internalType: \"address\",\n          name: \"user\",\n          type: \"address\"\n        }, {\n          internalType: \"uint256\",\n          name: \"network\",\n          type: \"uint256\"\n        }, {\n          internalType: \"uint256\",\n          name: \"intent\",\n          type: \"uint256\"\n        }, {\n          internalType: \"uint256\",\n          name: \"delegateType\",\n          type: \"uint256\"\n        }, {\n          internalType: \"uint256\",\n          name: \"deadline\",\n          type: \"uint256\"\n        }, {\n          internalType: \"contract IERC20Upgradeable\",\n          name: \"currency\",\n          type: \"address\"\n        }, {\n          internalType: \"bytes\",\n          name: \"dataMask\",\n          type: \"bytes\"\n        }, {\n          components: [{\n            internalType: \"uint256\",\n            name: \"price\",\n            type: \"uint256\"\n          }, {\n            internalType: \"bytes\",\n            name: \"data\",\n            type: \"bytes\"\n          }],\n          internalType: \"struct Market.OrderItem[]\",\n          name: \"items\",\n          type: \"tuple[]\"\n        }, {\n          internalType: \"bytes32\",\n          name: \"r\",\n          type: \"bytes32\"\n        }, {\n          internalType: \"bytes32\",\n          name: \"s\",\n          type: \"bytes32\"\n        }, {\n          internalType: \"uint8\",\n          name: \"v\",\n          type: \"uint8\"\n        }, {\n          internalType: \"uint8\",\n          name: \"signVersion\",\n          type: \"uint8\"\n        }],\n        internalType: \"struct Market.Order[]\",\n        name: \"orders\",\n        type: \"tuple[]\"\n      }, {\n        components: [{\n          internalType: \"enum Market.Op\",\n          name: \"op\",\n          type: \"uint8\"\n        }, {\n          internalType: \"uint256\",\n          name: \"orderIdx\",\n          type: \"uint256\"\n        }, {\n          internalType: \"uint256\",\n          name: \"itemIdx\",\n          type: \"uint256\"\n        }, {\n          internalType: \"uint256\",\n          name: \"price\",\n          type: \"uint256\"\n        }, {\n          internalType: \"bytes32\",\n          name: \"itemHash\",\n          type: \"bytes32\"\n        }, {\n          internalType: \"contract IDelegate\",\n          name: \"executionDelegate\",\n          type: \"address\"\n        }, {\n          internalType: \"bytes\",\n          name: \"dataReplacement\",\n          type: \"bytes\"\n        }, {\n          internalType: \"uint256\",\n          name: \"bidIncentivePct\",\n          type: \"uint256\"\n        }, {\n          internalType: \"uint256\",\n          name: \"aucMinIncrementPct\",\n          type: \"uint256\"\n        }, {\n          internalType: \"uint256\",\n          name: \"aucIncDurationSecs\",\n          type: \"uint256\"\n        }, {\n          components: [{\n            internalType: \"uint256\",\n            name: \"percentage\",\n            type: \"uint256\"\n          }, {\n            internalType: \"address\",\n            name: \"to\",\n            type: \"address\"\n          }],\n          internalType: \"struct Market.Fee[]\",\n          name: \"fees\",\n          type: \"tuple[]\"\n        }],\n        internalType: \"struct Market.SettleDetail[]\",\n        name: \"details\",\n        type: \"tuple[]\"\n      }, {\n        components: [{\n          internalType: \"uint256\",\n          name: \"salt\",\n          type: \"uint256\"\n        }, {\n          internalType: \"uint256\",\n          name: \"deadline\",\n          type: \"uint256\"\n        }, {\n          internalType: \"uint256\",\n          name: \"amountToEth\",\n          type: \"uint256\"\n        }, {\n          internalType: \"uint256\",\n          name: \"amountToWeth\",\n          type: \"uint256\"\n        }, {\n          internalType: \"address\",\n          name: \"user\",\n          type: \"address\"\n        }, {\n          internalType: \"bool\",\n          name: \"canFail\",\n          type: \"bool\"\n        }],\n        internalType: \"struct Market.SettleShared\",\n        name: \"shared\",\n        type: \"tuple\"\n      }, {\n        internalType: \"bytes32\",\n        name: \"r\",\n        type: \"bytes32\"\n      }, {\n        internalType: \"bytes32\",\n        name: \"s\",\n        type: \"bytes32\"\n      }, {\n        internalType: \"uint8\",\n        name: \"v\",\n        type: \"uint8\"\n      }],\n      internalType: \"struct Market.RunInput\",\n      name: \"input\",\n      type: \"tuple\"\n    }],\n    name: \"run\",\n    outputs: [],\n    stateMutability: \"payable\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      components: [{\n        internalType: \"uint256\",\n        name: \"salt\",\n        type: \"uint256\"\n      }, {\n        internalType: \"address\",\n        name: \"user\",\n        type: \"address\"\n      }, {\n        internalType: \"uint256\",\n        name: \"network\",\n        type: \"uint256\"\n      }, {\n        internalType: \"uint256\",\n        name: \"intent\",\n        type: \"uint256\"\n      }, {\n        internalType: \"uint256\",\n        name: \"delegateType\",\n        type: \"uint256\"\n      }, {\n        internalType: \"uint256\",\n        name: \"deadline\",\n        type: \"uint256\"\n      }, {\n        internalType: \"contract IERC20Upgradeable\",\n        name: \"currency\",\n        type: \"address\"\n      }, {\n        internalType: \"bytes\",\n        name: \"dataMask\",\n        type: \"bytes\"\n      }, {\n        components: [{\n          internalType: \"uint256\",\n          name: \"price\",\n          type: \"uint256\"\n        }, {\n          internalType: \"bytes\",\n          name: \"data\",\n          type: \"bytes\"\n        }],\n        internalType: \"struct Market.OrderItem[]\",\n        name: \"items\",\n        type: \"tuple[]\"\n      }, {\n        internalType: \"bytes32\",\n        name: \"r\",\n        type: \"bytes32\"\n      }, {\n        internalType: \"bytes32\",\n        name: \"s\",\n        type: \"bytes32\"\n      }, {\n        internalType: \"uint8\",\n        name: \"v\",\n        type: \"uint8\"\n      }, {\n        internalType: \"uint8\",\n        name: \"signVersion\",\n        type: \"uint8\"\n      }],\n      internalType: \"struct Market.Order\",\n      name: \"order\",\n      type: \"tuple\"\n    }, {\n      components: [{\n        internalType: \"uint256\",\n        name: \"salt\",\n        type: \"uint256\"\n      }, {\n        internalType: \"uint256\",\n        name: \"deadline\",\n        type: \"uint256\"\n      }, {\n        internalType: \"uint256\",\n        name: \"amountToEth\",\n        type: \"uint256\"\n      }, {\n        internalType: \"uint256\",\n        name: \"amountToWeth\",\n        type: \"uint256\"\n      }, {\n        internalType: \"address\",\n        name: \"user\",\n        type: \"address\"\n      }, {\n        internalType: \"bool\",\n        name: \"canFail\",\n        type: \"bool\"\n      }],\n      internalType: \"struct Market.SettleShared\",\n      name: \"shared\",\n      type: \"tuple\"\n    }, {\n      components: [{\n        internalType: \"enum Market.Op\",\n        name: \"op\",\n        type: \"uint8\"\n      }, {\n        internalType: \"uint256\",\n        name: \"orderIdx\",\n        type: \"uint256\"\n      }, {\n        internalType: \"uint256\",\n        name: \"itemIdx\",\n        type: \"uint256\"\n      }, {\n        internalType: \"uint256\",\n        name: \"price\",\n        type: \"uint256\"\n      }, {\n        internalType: \"bytes32\",\n        name: \"itemHash\",\n        type: \"bytes32\"\n      }, {\n        internalType: \"contract IDelegate\",\n        name: \"executionDelegate\",\n        type: \"address\"\n      }, {\n        internalType: \"bytes\",\n        name: \"dataReplacement\",\n        type: \"bytes\"\n      }, {\n        internalType: \"uint256\",\n        name: \"bidIncentivePct\",\n        type: \"uint256\"\n      }, {\n        internalType: \"uint256\",\n        name: \"aucMinIncrementPct\",\n        type: \"uint256\"\n      }, {\n        internalType: \"uint256\",\n        name: \"aucIncDurationSecs\",\n        type: \"uint256\"\n      }, {\n        components: [{\n          internalType: \"uint256\",\n          name: \"percentage\",\n          type: \"uint256\"\n        }, {\n          internalType: \"address\",\n          name: \"to\",\n          type: \"address\"\n        }],\n        internalType: \"struct Market.Fee[]\",\n        name: \"fees\",\n        type: \"tuple[]\"\n      }],\n      internalType: \"struct Market.SettleDetail\",\n      name: \"detail\",\n      type: \"tuple\"\n    }],\n    name: \"run1\",\n    outputs: [{\n      internalType: \"uint256\",\n      name: \"\",\n      type: \"uint256\"\n    }],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"address\",\n      name: \"\",\n      type: \"address\"\n    }],\n    name: \"signers\",\n    outputs: [{\n      internalType: \"bool\",\n      name: \"\",\n      type: \"bool\"\n    }],\n    stateMutability: \"view\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"address\",\n      name: \"newOwner\",\n      type: \"address\"\n    }],\n    name: \"transferOwnership\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  }, {\n    inputs: [],\n    name: \"unpause\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"address[]\",\n      name: \"toAdd\",\n      type: \"address[]\"\n    }, {\n      internalType: \"address[]\",\n      name: \"toRemove\",\n      type: \"address[]\"\n    }],\n    name: \"updateDelegates\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"uint256\",\n      name: \"val\",\n      type: \"uint256\"\n    }],\n    name: \"updateFeeCap\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  }, {\n    inputs: [{\n      internalType: \"address[]\",\n      name: \"toAdd\",\n      type: \"address[]\"\n    }, {\n      internalType: \"address[]\",\n      name: \"toRemove\",\n      type: \"address[]\"\n    }],\n    name: \"updateSigners\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\"\n  }, {\n    inputs: [],\n    name: \"weth\",\n    outputs: [{\n      internalType: \"contract IWETHUpgradable\",\n      name: \"\",\n      type: \"address\"\n    }],\n    stateMutability: \"view\",\n    type: \"function\"\n  }, {\n    stateMutability: \"payable\",\n    type: \"receive\"\n  }],\n  K = function (e) {\n    function n(n) {\n      return e.call(this, exports.Market.X2Y2, n) || this;\n    }\n    l(n, e);\n    var a = n.prototype;\n    return a.encode = function (e, a) {\n      for (var i, r = c(this.orders); !(i = r()).done;) {\n        var p = i.value,\n          s = n.INTERFACE.getSighash(n.INTERFACE.getFunction(\"run\")) + p.signedInput.slice(2);\n        p.tokenType == exports.TokenType.ERC721 ? e.addCommand(t.X2Y2_721, [p.price, s, p.recipient, p.tokenAddress, p.tokenId], a.allowRevert) : p.tokenType == exports.TokenType.ERC1155 && e.addCommand(t.X2Y2_1155, [p.price, s, p.recipient, p.tokenAddress, p.tokenId, p.tokenAmount], a.allowRevert);\n      }\n    }, a.getBuyItems = function () {\n      for (var e, n = [], t = c(this.orders); !(e = t()).done;) {\n        var a = e.value;\n        n.push({\n          tokenAddress: a.tokenAddress,\n          tokenId: a.tokenId,\n          tokenType: a.tokenType\n        });\n      }\n      return n;\n    }, a.getTotalPrice = function () {\n      for (var e, n = p.BigNumber.from(0), t = c(this.orders); !(e = t()).done;) {\n        n = n.add(e.value.price);\n      }\n      return n;\n    }, n;\n  }(F);\nK.INTERFACE = new r.Interface(X), exports.CryptopunkTrade = P, exports.FoundationTrade = h, exports.LooksRareTrade = g, exports.NFT20Trade = V, exports.NFTTrade = F, exports.NFTXTrade = L, exports.PERMIT2_ADDRESS = \"0x000000000022D473030F116dDEE9F6B43aC78BA3\", exports.SeaportTrade = W, exports.SudoswapTrade = D, exports.SwapRouter = O, exports.UNIVERSAL_ROUTER_ADDRESS = function (e) {\n  switch (e) {\n    case 1:\n      return \"0xEf1c6E67703c7BD7107eed8303Fbe6EC2554BF6B\";\n    case 5:\n      return \"0x4648a43B2C14Da09FdF82B161150d3F634f40491\";\n    case 137:\n      return \"0x4C60051384bd2d3C01bfc845Cf5F4b44bcbE9de5\";\n    case 10:\n      return \"0xb555edF5dcF85f42cEeF1f3630a52A108E55A654\";\n    case 42161:\n      return \"0x4C60051384bd2d3C01bfc845Cf5F4b44bcbE9de5\";\n    case 420:\n    case 421613:\n      return \"0x4648a43B2C14Da09FdF82B161150d3F634f40491\";\n    case 42220:\n      return \"0xC73d61d192FB994157168Fb56730FdEc64C9Cb8F\";\n    default:\n      throw new Error(\"Universal Router not deployed on chain \" + e);\n  }\n}, exports.UniswapTrade = S, exports.X2Y2Trade = K;","map":{"version":3,"sources":["../src/utils/routerCommands.ts","../src/utils/constants.ts","../src/entities/protocols/uniswap.ts","../src/swapRouter.ts","../src/utils/permit2.ts","../src/entities/NFTTrade.ts","../src/entities/protocols/cryptopunk.ts","../src/entities/protocols/foundation.ts","../src/entities/protocols/looksRare.ts","../src/entities/protocols/nft20.ts","../src/entities/protocols/nftx.ts","../src/entities/protocols/seaport.ts","../src/entities/protocols/sudoswap.ts","../src/entities/protocols/x2y2.ts"],"names":["CommandType","REVERTABLE_COMMANDS","Set","SEAPORT","NFTX","LOOKS_RARE_721","LOOKS_RARE_1155","X2Y2_721","X2Y2_1155","FOUNDATION","SUDOSWAP","NFT20","ABI_DEFINITION","PERMIT","PERMIT2_PERMIT_BATCH","PERMIT2_TRANSFER_FROM","PERMIT2_TRANSFER_FROM_BATCH","TRANSFER","V3_SWAP_EXACT_IN","V3_SWAP_EXACT_OUT","V2_SWAP_EXACT_IN","V2_SWAP_EXACT_OUT","WRAP_ETH","UNWRAP_WETH","SWEEP","PAY_PORTION","OWNER_CHECK_721","OWNER_CHECK_1155","CRYPTOPUNKS","RoutePlanner","this","commands","inputs","addCommand","type","parameters","allowRevert","command","createCommand","push","encodedInput","has","Error","concat","toString","padStart","defaultAbiCoder","encode","chainId","CONTRACT_BALANCE","BigNumber","from","pow","ADDRESS_THIS","REFUND_ETH_PRICE_IMPACT_THRESHOLD","Percent","JSBI","BigInt","UniswapTrade","trade","options","planner","_config","payerIsUser","inputAmount","currency","isNative","maximumAmountIn","slippageTolerance","quotient","recipient","tradeType","TradeType","EXACT_INPUT","routes","length","outputIsNative","outputAmount","inputIsNative","routerMustCustody","swap","swaps","route","protocol","Protocol","V2","addV2Swap","V3","addV3Swap","MIXED","addMixedSwap","minimumAmountOut","wrapped","address","EXACT_OUTPUT","V2Trade","path","map","pool","V3Trade","createUncheckedTrade","encodeRouteToPath","tradeRecipient","pools","Pool","Pair","MixedRouteTrade","amountIn","amountOut","sections","partitionMixedRouteByProtocol","isLastSectionInRoute","i","outputToken","inputToken","input","section","getOutputOfPools","newRouteOriginal","MixedRouteSDK","token0","equals","token1","newRoute","MixedRoute","every","mixedRouteIsAllV3","encodeMixedRouteToPath","liquidityToken","priceImpact","greaterThan","SwapRouter","Interface","abi","swapNFTCallParameters","trades","config","invariant","sender","totalPrice","orders","add","getTotalPrice","encodePlan","swapERC20CallParameters","inputCurrency","inputTokenPermit","encodePermit","nativeCurrencyValue","deadline","deadlineOrPreviousBlockhash","undefined","INTERFACE","encodeFunctionData","calldata","value","permit","signature","NFTTrade","market","Market","TokenType","CryptopunkTrade","_inheritsLoose","_NFTTrade","Cryptopunks","item","tokenId","_proto","getBuyItems","buyItems","tokenAddress","CRYPTOPUNK_ADDRESS","tokenType","Cryptopunk","total","FoundationTrade","Foundation","price","referrer","ERC721","LooksRareTrade","LooksRare","takerOrder","makerOrder","amount","collection","ERC1155","NFT20Trade","order","tokenIds","tokenAmounts","fee","isV3","NFTXTrade","vaultId","Ether","onChain","vaultAddress","SeaportTrade","Seaport","advancedOrders","orderFulfillments","items","_","index","orderIndex","itemIndex","considerationFulFillments","getConsiderationFulfillments","advancedOrder","getAdvancedOrderParams","OPENSEA_CONDUIT_KEY","offer","token","identifierOrCriteria","calculateValue","consideration","protocolDatas","considerationFulfillments","considerationRecipients","protocolData","j","_loop","findIndex","x","recipientIndex","data","numerator","denominator","extraData","considerations","reduce","amt","startAmount","SudoswapTrade","Sudoswap","swapInfo","maxCost","ethRecipient","nftRecipient","prevVal","nftIds","X2Y2Trade","X2Y2","getSighash","getFunction","signedInput","slice","tokenAmount"],"mappings":"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","sourcesContent":["import { defaultAbiCoder } from 'ethers/lib/utils'\n\n/**\n * CommandTypes\n * @description Flags that modify a command's execution\n * @enum {number}\n */\nexport enum CommandType {\n  V3_SWAP_EXACT_IN = 0x00,\n  V3_SWAP_EXACT_OUT = 0x01,\n  PERMIT2_TRANSFER_FROM = 0x02,\n  PERMIT2_PERMIT_BATCH = 0x03,\n  SWEEP = 0x04,\n  TRANSFER = 0x05,\n  PAY_PORTION = 0x06,\n\n  V2_SWAP_EXACT_IN = 0x08,\n  V2_SWAP_EXACT_OUT = 0x09,\n  PERMIT = 0x0a,\n  WRAP_ETH = 0x0b,\n  UNWRAP_WETH = 0x0c,\n  PERMIT2_TRANSFER_FROM_BATCH = 0x0d,\n\n  // NFT-related command types\n  SEAPORT = 0x10,\n  LOOKS_RARE_721 = 0x11,\n  NFTX = 0x12,\n  CRYPTOPUNKS = 0x13,\n  LOOKS_RARE_1155 = 0x14,\n  OWNER_CHECK_721 = 0x15,\n  OWNER_CHECK_1155 = 0x16,\n\n  X2Y2_721 = 0x18,\n  SUDOSWAP = 0x19,\n  NFT20 = 0x1a,\n  X2Y2_1155 = 0x1b,\n  FOUNDATION = 0x1c,\n}\n\nconst PERMIT_STRUCT =\n  '((address token,uint160 amount,uint48 expiration,uint48 nonce) details, address spender, uint256 sigDeadline)'\n\nconst PERMIT_BATCH_STRUCT =\n  '((address token,uint160 amount,uint48 expiration,uint48 nonce)[] details, address spender, uint256 sigDeadline)'\n\nconst ALLOW_REVERT_FLAG = 0x80\n\nconst REVERTABLE_COMMANDS = new Set<CommandType>([\n  CommandType.SEAPORT,\n  CommandType.NFTX,\n  CommandType.LOOKS_RARE_721,\n  CommandType.LOOKS_RARE_1155,\n  CommandType.X2Y2_721,\n  CommandType.X2Y2_1155,\n  CommandType.FOUNDATION,\n  CommandType.SUDOSWAP,\n  CommandType.NFT20,\n])\n\nconst ABI_DEFINITION: { [key in CommandType]: string[] } = {\n  [CommandType.PERMIT]: [PERMIT_STRUCT, 'bytes'],\n  [CommandType.PERMIT2_PERMIT_BATCH]: [PERMIT_BATCH_STRUCT, 'bytes'],\n  [CommandType.PERMIT2_TRANSFER_FROM]: ['address', 'address', 'uint160'],\n  [CommandType.PERMIT2_TRANSFER_FROM_BATCH]: ['bytes'],\n  [CommandType.TRANSFER]: ['address', 'address', 'uint256'],\n  [CommandType.V3_SWAP_EXACT_IN]: ['address', 'uint256', 'uint256', 'bytes', 'bool'],\n  [CommandType.V3_SWAP_EXACT_OUT]: ['address', 'uint256', 'uint256', 'bytes', 'bool'],\n  [CommandType.V2_SWAP_EXACT_IN]: ['address', 'uint256', 'uint256', 'address[]', 'bool'],\n  [CommandType.V2_SWAP_EXACT_OUT]: ['address', 'uint256', 'uint256', 'address[]', 'bool'],\n  [CommandType.SEAPORT]: ['uint256', 'bytes'],\n  [CommandType.WRAP_ETH]: ['address', 'uint256'],\n  [CommandType.UNWRAP_WETH]: ['address', 'uint256'],\n  [CommandType.SWEEP]: ['address', 'address', 'uint256'],\n  [CommandType.NFTX]: ['uint256', 'bytes'],\n  [CommandType.LOOKS_RARE_721]: ['uint256', 'bytes', 'address', 'address', 'uint256'],\n  [CommandType.LOOKS_RARE_1155]: ['uint256', 'bytes', 'address', 'address', 'uint256', 'uint256'],\n  [CommandType.X2Y2_721]: ['uint256', 'bytes', 'address', 'address', 'uint256'],\n  [CommandType.X2Y2_1155]: ['uint256', 'bytes', 'address', 'address', 'uint256', 'uint256'],\n  [CommandType.FOUNDATION]: ['uint256', 'bytes', 'address', 'address', 'uint256'],\n  [CommandType.PAY_PORTION]: ['address', 'address', 'uint256'],\n  [CommandType.SUDOSWAP]: ['uint256', 'bytes'],\n  [CommandType.OWNER_CHECK_721]: ['address', 'address', 'uint256'],\n  [CommandType.OWNER_CHECK_1155]: ['address', 'address', 'uint256', 'uint256'],\n  [CommandType.NFT20]: ['uint256', 'bytes'],\n  [CommandType.CRYPTOPUNKS]: ['uint256', 'address', 'uint256'],\n}\n\nexport class RoutePlanner {\n  commands: string\n  inputs: string[]\n\n  constructor() {\n    this.commands = '0x'\n    this.inputs = []\n  }\n\n  addCommand(type: CommandType, parameters: any[], allowRevert = false): void {\n    let command = createCommand(type, parameters)\n    this.inputs.push(command.encodedInput)\n    if (allowRevert) {\n      if (!REVERTABLE_COMMANDS.has(command.type)) {\n        throw new Error(`command type: ${command.type} cannot be allowed to revert`)\n      }\n      command.type = command.type | ALLOW_REVERT_FLAG\n    }\n\n    this.commands = this.commands.concat(command.type.toString(16).padStart(2, '0'))\n  }\n}\n\nexport type RouterCommand = {\n  type: CommandType\n  encodedInput: string\n}\n\nexport function createCommand(type: CommandType, parameters: any[]): RouterCommand {\n  const encodedInput = defaultAbiCoder.encode(ABI_DEFINITION[type], parameters)\n  return { type, encodedInput }\n}\n","import { BigNumber } from 'ethers'\n\nexport const UNIVERSAL_ROUTER_ADDRESS = (chainId: number): string => {\n  switch (chainId) {\n    case 1: //mainnet\n      return '0xEf1c6E67703c7BD7107eed8303Fbe6EC2554BF6B'\n    case 5: // goerli\n      return '0x4648a43B2C14Da09FdF82B161150d3F634f40491'\n    case 137: // polygon\n      return '0x4C60051384bd2d3C01bfc845Cf5F4b44bcbE9de5'\n    case 10: // optimism\n      return '0xb555edF5dcF85f42cEeF1f3630a52A108E55A654'\n    case 42161: // arbitrum\n      return '0x4C60051384bd2d3C01bfc845Cf5F4b44bcbE9de5'\n    case 420: // optimism goerli\n      return '0x4648a43B2C14Da09FdF82B161150d3F634f40491'\n    case 421613: // arbitrum goerli\n      return '0x4648a43B2C14Da09FdF82B161150d3F634f40491'\n    case 42220: // celo\n      return '0xC73d61d192FB994157168Fb56730FdEc64C9Cb8F'\n    default:\n      throw new Error(`Universal Router not deployed on chain ${chainId}`)\n  }\n}\nexport const PERMIT2_ADDRESS = '0x000000000022D473030F116dDEE9F6B43aC78BA3'\n\nexport const CONTRACT_BALANCE = BigNumber.from(2).pow(255)\nexport const ETH_ADDRESS = '0x0000000000000000000000000000000000000000'\n\nexport const MSG_SENDER = '0x0000000000000000000000000000000000000001'\nexport const ADDRESS_THIS = '0x0000000000000000000000000000000000000002'\n","import JSBI from 'jsbi'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { Trade as V2Trade, Pair } from '@uniswap/v2-sdk'\nimport { Trade as V3Trade, Pool, encodeRouteToPath } from '@uniswap/v3-sdk'\nimport {\n  Trade as RouterTrade,\n  MixedRouteTrade,\n  Protocol,\n  IRoute,\n  RouteV2,\n  RouteV3,\n  MixedRouteSDK,\n  MixedRoute,\n  SwapOptions as RouterSwapOptions,\n  getOutputOfPools,\n  encodeMixedRouteToPath,\n  partitionMixedRouteByProtocol,\n} from '@uniswap/router-sdk'\nimport { Permit2Permit } from '../../utils/permit2'\nimport { Currency, TradeType, CurrencyAmount, Percent } from '@uniswap/sdk-core'\nimport { Command, TradeConfig } from '../Command'\nimport { MSG_SENDER, ADDRESS_THIS, CONTRACT_BALANCE } from '../../utils/constants'\n\n// the existing router permit object doesn't include enough data for permit2\n// so we extend swap options with the permit2 permit\nexport type SwapOptions = Omit<RouterSwapOptions, 'inputTokenPermit'> & {\n  inputTokenPermit?: Permit2Permit\n}\n\nconst REFUND_ETH_PRICE_IMPACT_THRESHOLD = new Percent(JSBI.BigInt(50), JSBI.BigInt(100))\n\ninterface Swap<TInput extends Currency, TOutput extends Currency> {\n  route: IRoute<TInput, TOutput, Pair | Pool>\n  inputAmount: CurrencyAmount<TInput>\n  outputAmount: CurrencyAmount<TOutput>\n}\n\n// Wrapper for uniswap router-sdk trade entity to encode swaps for Universal Router\n// also translates trade objects from previous (v2, v3) SDKs\nexport class UniswapTrade implements Command {\n  constructor(public trade: RouterTrade<Currency, Currency, TradeType>, public options: SwapOptions) {}\n\n  encode(planner: RoutePlanner, _config: TradeConfig): void {\n    let payerIsUser = true\n    if (this.trade.inputAmount.currency.isNative) {\n      // TODO: optimize if only one v2 pool we can directly send this to the pool\n      planner.addCommand(CommandType.WRAP_ETH, [\n        ADDRESS_THIS,\n        this.trade.maximumAmountIn(this.options.slippageTolerance).quotient.toString(),\n      ])\n      // since WETH is now owned by the router, the router pays for inputs\n      payerIsUser = false\n    }\n    this.options.recipient = this.options.recipient ?? MSG_SENDER\n\n    // flag for whether we want to perform slippage check on aggregate output of multiple routes\n    //   1. when there are >2 exact input trades. this is only a heuristic,\n    //      as it's still more gas-expensive even in this case, but has benefits\n    //      in that the reversion probability is lower\n    const performAggregatedSlippageCheck =\n      this.trade.tradeType === TradeType.EXACT_INPUT && this.trade.routes.length > 2\n    const outputIsNative = this.trade.outputAmount.currency.isNative\n    const inputIsNative = this.trade.inputAmount.currency.isNative\n    const routerMustCustody = performAggregatedSlippageCheck || outputIsNative\n\n    for (const swap of this.trade.swaps) {\n      switch (swap.route.protocol) {\n        case Protocol.V2:\n          addV2Swap(planner, swap, this.trade.tradeType, this.options, payerIsUser, routerMustCustody)\n          break\n        case Protocol.V3:\n          addV3Swap(planner, swap, this.trade.tradeType, this.options, payerIsUser, routerMustCustody)\n          break\n        case Protocol.MIXED:\n          addMixedSwap(planner, swap, this.trade.tradeType, this.options, payerIsUser, routerMustCustody)\n          break\n        default:\n          throw new Error('UNSUPPORTED_TRADE_PROTOCOL')\n      }\n    }\n\n    if (routerMustCustody) {\n      if (outputIsNative) {\n        planner.addCommand(CommandType.UNWRAP_WETH, [\n          this.options.recipient,\n          this.trade.minimumAmountOut(this.options.slippageTolerance).quotient.toString(),\n        ])\n      } else {\n        planner.addCommand(CommandType.SWEEP, [\n          this.trade.outputAmount.currency.wrapped.address,\n          this.options.recipient,\n          this.trade.minimumAmountOut(this.options.slippageTolerance).quotient.toString(),\n        ])\n      }\n    }\n\n    if (inputIsNative && (this.trade.tradeType === TradeType.EXACT_OUTPUT || riskOfPartialFill(this.trade))) {\n      // for exactOutput swaps that take native currency as input\n      // we need to send back the change to the user\n      planner.addCommand(CommandType.UNWRAP_WETH, [this.options.recipient, 0])\n    }\n  }\n}\n\n// encode a uniswap v2 swap\nfunction addV2Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { route, inputAmount, outputAmount }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const trade = new V2Trade(\n    route as RouteV2<TInput, TOutput>,\n    tradeType == TradeType.EXACT_INPUT ? inputAmount : outputAmount,\n    tradeType\n  )\n\n  if (tradeType == TradeType.EXACT_INPUT) {\n    planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [\n      // if native, we have to unwrap so keep in the router for now\n      routerMustCustody ? ADDRESS_THIS : options.recipient,\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      route.path.map((pool) => pool.address),\n      payerIsUser,\n    ])\n  } else if (tradeType == TradeType.EXACT_OUTPUT) {\n    planner.addCommand(CommandType.V2_SWAP_EXACT_OUT, [\n      routerMustCustody ? ADDRESS_THIS : options.recipient,\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      route.path.map((pool) => pool.address),\n      payerIsUser,\n    ])\n  }\n}\n\n// encode a uniswap v3 swap\nfunction addV3Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { route, inputAmount, outputAmount }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const trade = V3Trade.createUncheckedTrade({\n    route: route as RouteV3<TInput, TOutput>,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const path = encodeRouteToPath(route as RouteV3<TInput, TOutput>, trade.tradeType === TradeType.EXACT_OUTPUT)\n  if (tradeType == TradeType.EXACT_INPUT) {\n    planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [\n      routerMustCustody ? ADDRESS_THIS : options.recipient,\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      path,\n      payerIsUser,\n    ])\n  } else if (tradeType == TradeType.EXACT_OUTPUT) {\n    planner.addCommand(CommandType.V3_SWAP_EXACT_OUT, [\n      routerMustCustody ? ADDRESS_THIS : options.recipient,\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      path,\n      payerIsUser,\n    ])\n  }\n}\n\n// encode a mixed route swap, i.e. including both v2 and v3 pools\nfunction addMixedSwap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  swap: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const { route, inputAmount, outputAmount } = swap\n  const tradeRecipient = routerMustCustody ? ADDRESS_THIS : options.recipient\n\n  // single hop, so it can be reduced to plain v2 or v3 swap logic\n  if (route.pools.length === 1) {\n    if (route.pools[0] instanceof Pool) {\n      return addV3Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else if (route.pools[0] instanceof Pair) {\n      return addV2Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else {\n      throw new Error('Invalid route type')\n    }\n  }\n\n  const trade = MixedRouteTrade.createUncheckedTrade({\n    route: route as MixedRoute<TInput, TOutput>,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const amountIn = trade.maximumAmountIn(options.slippageTolerance, inputAmount).quotient.toString()\n  const amountOut = trade.minimumAmountOut(options.slippageTolerance, outputAmount).quotient.toString()\n\n  // logic from\n  // https://github.com/Uniswap/router-sdk/blob/d8eed164e6c79519983844ca8b6a3fc24ebcb8f8/src/swapRouter.ts#L276\n  const sections = partitionMixedRouteByProtocol(route as MixedRoute<TInput, TOutput>)\n  const isLastSectionInRoute = (i: number) => {\n    return i === sections.length - 1\n  }\n\n  let outputToken\n  let inputToken = route.input.wrapped\n\n  for (let i = 0; i < sections.length; i++) {\n    const section = sections[i]\n    /// Now, we get output of this section\n    outputToken = getOutputOfPools(section, inputToken)\n\n    const newRouteOriginal = new MixedRouteSDK(\n      [...section],\n      section[0].token0.equals(inputToken) ? section[0].token0 : section[0].token1,\n      outputToken\n    )\n    const newRoute = new MixedRoute(newRouteOriginal)\n\n    /// Previous output is now input\n    inputToken = outputToken\n\n    const mixedRouteIsAllV3 = (route: MixedRouteSDK<Currency, Currency>) => {\n      return route.pools.every((pool) => pool instanceof Pool)\n    }\n\n    if (mixedRouteIsAllV3(newRoute)) {\n      const path: string = encodeMixedRouteToPath(newRoute)\n\n      planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [\n        // if not last section: send tokens directly to the first v2 pair of the next section\n        // note: because of the partitioning function we can be sure that the next section is v2\n        isLastSectionInRoute(i) ? tradeRecipient : (sections[i + 1][0] as Pair).liquidityToken.address,\n        i == 0 ? amountIn : CONTRACT_BALANCE, // amountIn\n        !isLastSectionInRoute(i) ? 0 : amountOut, // amountOut\n        path, // path\n        payerIsUser && i === 0, // payerIsUser\n      ])\n    } else {\n      planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [\n        isLastSectionInRoute(i) ? tradeRecipient : ADDRESS_THIS, // recipient\n        i === 0 ? amountIn : CONTRACT_BALANCE, // amountIn\n        !isLastSectionInRoute(i) ? 0 : amountOut, // amountOutMin\n        newRoute.path.map((pool) => pool.address), // path\n        payerIsUser && i === 0,\n      ])\n    }\n  }\n}\n\n// if price impact is very high, there's a chance of hitting max/min prices resulting in a partial fill of the swap\nfunction riskOfPartialFill(trade: RouterTrade<Currency, Currency, TradeType>): boolean {\n  return trade.priceImpact.greaterThan(REFUND_ETH_PRICE_IMPACT_THRESHOLD)\n}\n","import invariant from 'tiny-invariant'\nimport { abi } from '@uniswap/universal-router/artifacts/contracts/UniversalRouter.sol/UniversalRouter.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport { MethodParameters } from '@uniswap/v3-sdk'\nimport { Trade as RouterTrade } from '@uniswap/router-sdk'\nimport { Currency, TradeType, Token } from '@uniswap/sdk-core'\nimport { NFTTrade, SupportedProtocolsData } from './entities/NFTTrade'\nimport { UniswapTrade, SwapOptions } from './entities/protocols/uniswap'\nimport { CommandType, RoutePlanner } from './utils/routerCommands'\nimport { encodePermit } from './utils/permit2'\nimport { ETH_ADDRESS } from './utils/constants'\n\nexport type SwapRouterConfig = {\n  sender?: string // address\n  deadline?: BigNumberish\n}\n\nexport abstract class SwapRouter {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given swap.\n   * @param trades to produce call parameters for\n   */\n  public static swapNFTCallParameters(\n    trades: NFTTrade<SupportedProtocolsData>[],\n    config: SwapRouterConfig\n  ): MethodParameters {\n    invariant(!!config.sender, 'SENDER_REQUIRED')\n    let planner = new RoutePlanner()\n    let totalPrice = BigNumber.from(0)\n\n    const allowRevert = trades.length == 1 && trades[0].orders.length == 1 ? false : true\n\n    for (const trade of trades) {\n      trade.encode(planner, { allowRevert })\n      totalPrice = totalPrice.add(trade.getTotalPrice())\n    }\n\n    planner.addCommand(CommandType.SWEEP, [ETH_ADDRESS, config.sender, 0])\n    return SwapRouter.encodePlan(planner, totalPrice, config)\n  }\n\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trades to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapERC20CallParameters(\n    trades: RouterTrade<Currency, Currency, TradeType>,\n    options: SwapOptions\n  ): MethodParameters {\n    // TODO: use permit if signature included in options\n    const planner = new RoutePlanner()\n\n    const trade: UniswapTrade = new UniswapTrade(trades, options)\n\n    const inputCurrency = trade.trade.inputAmount.currency\n    invariant(!(inputCurrency.isNative && !!options.inputTokenPermit), 'NATIVE_INPUT_PERMIT')\n    if (options.inputTokenPermit) {\n      encodePermit(planner, options.inputTokenPermit)\n    }\n\n    const nativeCurrencyValue = inputCurrency.isNative\n      ? BigNumber.from(trade.trade.maximumAmountIn(options.slippageTolerance).quotient.toString())\n      : BigNumber.from(0)\n\n    trade.encode(planner, { allowRevert: false })\n    return SwapRouter.encodePlan(planner, nativeCurrencyValue, {\n      deadline: options.deadlineOrPreviousBlockhash ? BigNumber.from(options.deadlineOrPreviousBlockhash) : undefined,\n    })\n  }\n\n  /**\n   * Encodes a planned route into a method name and parameters for the Router contract.\n   * @param planner the planned route\n   * @param nativeCurrencyValue the native currency value of the planned route\n   * @param config the router config\n   */\n  private static encodePlan(\n    planner: RoutePlanner,\n    nativeCurrencyValue: BigNumber,\n    config: SwapRouterConfig = {}\n  ): MethodParameters {\n    const { commands, inputs } = planner\n\n    const functionSignature = !!config.deadline ? 'execute(bytes,bytes[],uint256)' : 'execute(bytes,bytes[])'\n    const parameters = !!config.deadline ? [commands, inputs, config.deadline] : [commands, inputs]\n    const calldata = SwapRouter.INTERFACE.encodeFunctionData(functionSignature, parameters)\n    return { calldata, value: nativeCurrencyValue.toString() }\n  }\n}\n","import { PermitSingle } from '@uniswap/permit2-sdk'\nimport { CommandType, RoutePlanner } from './routerCommands'\n\nexport interface Permit2Permit extends PermitSingle {\n  signature: string\n}\n\nexport function encodePermit(planner: RoutePlanner, permit: Permit2Permit): void {\n  planner.addCommand(CommandType.PERMIT, [permit, permit.signature])\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumberish } from 'ethers'\nimport { SeaportData } from './protocols/seaport'\nimport { FoundationData } from './protocols/foundation'\nimport { NFTXData } from './protocols/nftx'\nimport { NFT20Data } from './protocols/nft20'\nimport { RoutePlanner } from '../utils/routerCommands'\nimport { Command, TradeConfig } from './Command'\nimport { LooksRareData } from './protocols/looksRare'\nimport { SudoswapData } from './protocols/sudoswap'\nimport { CryptopunkData } from './protocols/cryptopunk'\nimport { X2Y2Data } from './protocols/x2y2'\n\nexport type SupportedProtocolsData =\n  | SeaportData\n  | FoundationData\n  | NFTXData\n  | LooksRareData\n  | X2Y2Data\n  | CryptopunkData\n  | NFT20Data\n  | SudoswapData\n\nexport abstract class NFTTrade<T> implements Command {\n  readonly orders: T[]\n  readonly market: Market\n\n  constructor(market: Market, orders: T[]) {\n    invariant(orders.length > 0, 'no buy Items')\n    this.market = market\n    this.orders = orders\n  }\n\n  abstract encode(planner: RoutePlanner, config: TradeConfig): void\n\n  abstract getBuyItems(): BuyItem[]\n\n  abstract getTotalPrice(): BigNumberish\n}\n\nexport type BuyItem = {\n  tokenAddress: string\n  tokenId: BigNumberish\n  tokenType: TokenType\n  amount?: BigNumberish // for 1155\n}\n\nexport enum Market {\n  Foundation = 'foundation',\n  LooksRare = 'looksrare',\n  NFT20 = 'nft20',\n  NFTX = 'nftx',\n  Seaport = 'seaport',\n  Sudoswap = 'Sudoswap',\n  Cryptopunks = 'cryptopunks',\n  X2Y2 = 'x2y2',\n}\n\nexport enum TokenType {\n  ERC721 = 'ERC721',\n  ERC1155 = 'ERC1155',\n  Cryptopunk = 'Cryptopunk',\n}\n","import { TradeConfig } from '../Command'\nimport { NFTTrade, Market, TokenType, BuyItem } from '../NFTTrade'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type CryptopunkData = {\n  tokenId: BigNumberish\n  recipient: string\n  value: BigNumberish\n}\n\nexport class CryptopunkTrade extends NFTTrade<CryptopunkData> {\n  public static CRYPTOPUNK_ADDRESS: string = '0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb'\n\n  constructor(orders: CryptopunkData[]) {\n    super(Market.Cryptopunks, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      planner.addCommand(CommandType.CRYPTOPUNKS, [item.tokenId, item.recipient, item.value], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: CryptopunkTrade.CRYPTOPUNK_ADDRESS,\n        tokenId: item.tokenId,\n        tokenType: TokenType.Cryptopunk,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumberish {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/Foundation.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type FoundationData = {\n  recipient: string\n  tokenAddress: string\n  tokenId: BigNumberish\n  price: BigNumberish\n  referrer: string // address\n}\n\nexport class FoundationTrade extends NFTTrade<FoundationData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: FoundationData[]) {\n    super(Market.Foundation, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      const calldata = FoundationTrade.INTERFACE.encodeFunctionData('buyV2', [\n        item.tokenAddress,\n        item.tokenId,\n        item.price,\n        item.referrer,\n      ])\n      planner.addCommand(\n        CommandType.FOUNDATION,\n        [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId],\n        config.allowRevert\n      )\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: item.tokenAddress,\n        tokenId: item.tokenId,\n        tokenType: TokenType.ERC721,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumberish {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.price)\n    }\n    return total\n  }\n}\n","import invariant from 'tiny-invariant'\nimport abi from '../../../abis/LooksRare.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type MakerOrder = {\n  collection: string\n  tokenId: BigNumberish\n  isOrderAsk: true\n  signer: string\n  strategy: string\n  currency: string\n  amount: BigNumberish\n  price: BigNumberish\n  minPercentageToAsk: BigNumberish\n  nonce: BigNumberish\n  startTime: BigNumberish\n  endTime: BigNumberish\n  v: BigNumberish\n  r: string\n  s: string\n  params: string\n}\n\nexport type TakerOrder = {\n  minPercentageToAsk: BigNumberish\n  price: BigNumberish\n  taker: string\n  tokenId: BigNumberish\n  isOrderAsk: boolean\n  params: string\n}\n\nexport type LooksRareData = {\n  makerOrder: MakerOrder\n  takerOrder: TakerOrder\n  recipient: string\n  tokenType: TokenType\n}\n\nexport class LooksRareTrade extends NFTTrade<LooksRareData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: LooksRareData[]) {\n    super(Market.LooksRare, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      const calldata = LooksRareTrade.INTERFACE.encodeFunctionData('matchAskWithTakerBidUsingETHAndWETH', [\n        item.takerOrder,\n        item.makerOrder,\n      ])\n\n      if (item.tokenType == TokenType.ERC721) {\n        invariant(item.makerOrder.amount == 1, 'ERC721 token amount must be 1')\n        planner.addCommand(\n          CommandType.LOOKS_RARE_721,\n          [item.makerOrder.price, calldata, item.recipient, item.makerOrder.collection, item.makerOrder.tokenId],\n          config.allowRevert\n        )\n      } else if (item.tokenType == TokenType.ERC1155) {\n        planner.addCommand(\n          CommandType.LOOKS_RARE_1155,\n          [\n            item.makerOrder.price,\n            calldata,\n            item.recipient,\n            item.makerOrder.collection,\n            item.makerOrder.tokenId,\n            item.makerOrder.amount,\n          ],\n          config.allowRevert\n        )\n      }\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: item.makerOrder.collection,\n        tokenId: item.makerOrder.tokenId,\n        tokenType: item.tokenType,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumberish {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.makerOrder.price)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/NFT20.json'\nimport { Interface } from '@ethersproject/abi'\nimport { TradeConfig } from '../Command'\nimport { NFTTrade, Market, TokenType, BuyItem } from '../NFTTrade'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type NFT20Data = {\n  tokenAddress: string\n  tokenIds: BigNumberish[]\n  tokenAmounts: BigNumberish[]\n  recipient: string\n  fee: BigNumberish\n  isV3: boolean\n  value: BigNumberish\n}\n\nexport class NFT20Trade extends NFTTrade<NFT20Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: NFT20Data[]) {\n    super(Market.NFT20, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = NFT20Trade.INTERFACE.encodeFunctionData('ethForNft', [\n        order.tokenAddress,\n        order.tokenIds,\n        order.tokenAmounts,\n        order.recipient,\n        order.fee,\n        order.isV3,\n      ])\n      planner.addCommand(CommandType.NFT20, [order.value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const pool of this.orders) {\n      for (const tokenId of pool.tokenIds) {\n        buyItems.push({\n          tokenAddress: pool.tokenAddress,\n          tokenId: tokenId,\n          tokenType: TokenType.ERC721,\n        })\n      }\n    }\n\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumberish {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/NFTXZap.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport { Ether } from '@uniswap/sdk-core'\n\nexport type NFTXData = {\n  recipient: string\n  vaultAddress: string\n  vaultId: BigNumberish\n  tokenAddress: string\n  tokenIds: BigNumberish[]\n  value: BigNumber\n}\n\nexport class NFTXTrade extends NFTTrade<NFTXData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: NFTXData[]) {\n    super(Market.NFTX, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = NFTXTrade.INTERFACE.encodeFunctionData('buyAndRedeem', [\n        order.vaultId,\n        order.tokenIds.length,\n        order.tokenIds,\n        [Ether.onChain(1).wrapped.address, order.vaultAddress],\n        order.recipient,\n      ])\n      planner.addCommand(CommandType.NFTX, [order.value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const tokenId of order.tokenIds) {\n        buyItems.push({\n          tokenAddress: order.tokenAddress,\n          tokenId: tokenId,\n          tokenType: TokenType.ERC721,\n        })\n      }\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumberish {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/Seaport.json'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\n\nexport type SeaportData = {\n  items: Order[]\n  recipient: string // address\n}\n\nexport type FulfillmentComponent = {\n  orderIndex: BigNumberish\n  itemIndex: BigNumberish\n}\n\nexport type OfferItem = {\n  itemType: BigNumberish // enum\n  token: string // address\n  identifierOrCriteria: BigNumberish\n  startAmount: BigNumberish\n  endAmount: BigNumberish\n}\n\nexport type ConsiderationItem = OfferItem & {\n  recipient: string\n}\n\nexport type Order = {\n  parameters: OrderParameters\n  signature: string\n}\n\ntype OrderParameters = {\n  offerer: string // address,\n  offer: OfferItem[]\n  consideration: ConsiderationItem[]\n  orderType: BigNumberish // enum\n  startTime: BigNumberish\n  endTime: BigNumberish\n  zoneHash: string // bytes32\n  zone: string // address\n  salt: BigNumberish\n  conduitKey: string // bytes32,\n  totalOriginalConsiderationItems: BigNumberish\n}\n\nexport type AdvancedOrder = Order & {\n  numerator: BigNumber // uint120\n  denominator: BigNumber // uint120\n  extraData: string // bytes\n}\n\nexport class SeaportTrade extends NFTTrade<SeaportData> {\n  public static INTERFACE: Interface = new Interface(abi)\n  public static OPENSEA_CONDUIT_KEY: string = '0x0000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000'\n\n  constructor(orders: SeaportData[]) {\n    super(Market.Seaport, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      let advancedOrders: AdvancedOrder[] = []\n      let orderFulfillments: FulfillmentComponent[][] = order.items.map((_, index) => [\n        { orderIndex: index, itemIndex: 0 },\n      ])\n      let considerationFulFillments: FulfillmentComponent[][] = this.getConsiderationFulfillments(order.items)\n\n      for (const item of order.items) {\n        const { advancedOrder } = this.getAdvancedOrderParams(item)\n        advancedOrders.push(advancedOrder)\n      }\n\n      let calldata: string\n      if (advancedOrders.length == 1) {\n        calldata = SeaportTrade.INTERFACE.encodeFunctionData('fulfillAdvancedOrder', [\n          advancedOrders[0],\n          [],\n          SeaportTrade.OPENSEA_CONDUIT_KEY,\n          order.recipient,\n        ])\n      } else {\n        calldata = SeaportTrade.INTERFACE.encodeFunctionData('fulfillAvailableAdvancedOrders', [\n          advancedOrders,\n          [],\n          orderFulfillments,\n          considerationFulFillments,\n          SeaportTrade.OPENSEA_CONDUIT_KEY,\n          order.recipient,\n          100, // TODO: look into making this a better number\n        ])\n      }\n      planner.addCommand(CommandType.SEAPORT, [this.getTotalPrice().toString(), calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        for (const offer of item.parameters.offer) {\n          buyItems.push({\n            tokenAddress: offer.token,\n            tokenId: offer.identifierOrCriteria,\n            tokenType: TokenType.ERC721,\n          })\n        }\n      }\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let totalPrice = BigNumber.from(0)\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        totalPrice = totalPrice.add(this.calculateValue(item.parameters.consideration))\n      }\n    }\n    return totalPrice\n  }\n\n  private getConsiderationFulfillments(protocolDatas: Order[]): FulfillmentComponent[][] {\n    let considerationFulfillments: FulfillmentComponent[][] = []\n    const considerationRecipients: string[] = []\n\n    for (const i in protocolDatas) {\n      const protocolData = protocolDatas[i]\n\n      for (const j in protocolData.parameters.consideration) {\n        const item = protocolData.parameters.consideration[j]\n\n        if (considerationRecipients.findIndex((x) => x === item.recipient) === -1) {\n          considerationRecipients.push(item.recipient)\n        }\n\n        const recipientIndex = considerationRecipients.findIndex((x) => x === item.recipient)\n\n        if (!considerationFulfillments[recipientIndex]) {\n          considerationFulfillments.push([\n            {\n              orderIndex: i,\n              itemIndex: j,\n            },\n          ])\n        } else {\n          considerationFulfillments[recipientIndex].push({\n            orderIndex: i,\n            itemIndex: j,\n          })\n        }\n      }\n    }\n    return considerationFulfillments\n  }\n\n  private getAdvancedOrderParams(data: Order): { advancedOrder: AdvancedOrder; value: BigNumber } {\n    const advancedOrder = {\n      parameters: data.parameters,\n      numerator: BigNumber.from('1'),\n      denominator: BigNumber.from('1'),\n      signature: data.signature,\n      extraData: '0x00',\n    }\n    const value = this.calculateValue(data.parameters.consideration)\n    return { advancedOrder, value }\n  }\n\n  private calculateValue(considerations: ConsiderationItem[]): BigNumber {\n    return considerations.reduce(\n      (amt: BigNumber, consideration: ConsiderationItem) => amt.add(consideration.startAmount),\n      BigNumber.from(0)\n    )\n  }\n}\n","import abi from '../../../abis/Sudoswap.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\ntype PairSwap = {\n  swapInfo: {\n    pair: string // address\n    nftIds: BigNumberish[]\n  }\n  tokenAddress: string // address\n  maxCost: BigNumberish\n}\n\nexport type SudoswapData = {\n  swaps: PairSwap[]\n  nftRecipient: string\n  ethRecipient: string\n  deadline: BigNumberish\n}\n\nexport class SudoswapTrade extends NFTTrade<SudoswapData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: SudoswapData[]) {\n    super(Market.Sudoswap, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = SudoswapTrade.INTERFACE.encodeFunctionData('robustSwapETHForSpecificNFTs', [\n        order.swaps.map((swap) => {\n          return { swapInfo: swap.swapInfo, maxCost: swap.maxCost }\n        }),\n        order.ethRecipient,\n        order.nftRecipient,\n        order.deadline,\n      ])\n      const value = order.swaps.reduce((prevVal, swap) => {\n        return prevVal.add(swap.maxCost)\n      }, BigNumber.from(0))\n      planner.addCommand(CommandType.SUDOSWAP, [value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const swap of order.swaps) {\n        for (const tokenId of swap.swapInfo.nftIds) {\n          buyItems.push({\n            tokenAddress: swap.tokenAddress,\n            tokenId,\n            tokenType: TokenType.ERC721,\n          })\n        }\n      }\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumberish {\n    let total = BigNumber.from(0)\n    for (const order of this.orders) {\n      for (const swap of order.swaps) {\n        total = total.add(swap.maxCost)\n      }\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/X2Y2.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\ntype X2Y2PartialData = {\n  signedInput: string\n  recipient: string\n  tokenAddress: string\n  tokenId: BigNumberish\n  price: BigNumberish\n}\n\nexport type X2Y2_721_Data = X2Y2PartialData & {\n  tokenType: TokenType.ERC721\n}\n\nexport type X2Y2_1155_Data = X2Y2PartialData & {\n  tokenType: TokenType.ERC1155\n  tokenAmount: BigNumberish\n}\n\nexport type X2Y2Data = X2Y2_721_Data | X2Y2_1155_Data\n\nexport class X2Y2Trade extends NFTTrade<X2Y2Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: X2Y2Data[]) {\n    super(Market.X2Y2, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      const functionSelector = X2Y2Trade.INTERFACE.getSighash(X2Y2Trade.INTERFACE.getFunction('run'))\n      const calldata = functionSelector + item.signedInput.slice(2)\n\n      if (item.tokenType == TokenType.ERC721) {\n        planner.addCommand(\n          CommandType.X2Y2_721,\n          [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId],\n          config.allowRevert\n        )\n      } else if (item.tokenType == TokenType.ERC1155) {\n        planner.addCommand(\n          CommandType.X2Y2_1155,\n          [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId, item.tokenAmount],\n          config.allowRevert\n        )\n      }\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: item.tokenAddress,\n        tokenId: item.tokenId,\n        tokenType: item.tokenType,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumberish {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.price)\n    }\n    return total\n  }\n}\n"]},"metadata":{},"sourceType":"script"}