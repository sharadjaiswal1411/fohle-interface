{"ast":null,"code":"import{getAddress}from\"@ethersproject/address\";import{AddressZero}from\"@ethersproject/constants\";import{Contract}from\"@ethersproject/contracts\";// returns the checksummed address if the address is valid, otherwise returns false\nexport function isAddress(value){try{// Alphabetical letters must be made lowercase for getAddress to work.\n// See documentation here: https://docs.ethers.io/v5/api/utils/address/\nreturn getAddress(value.toLowerCase());}catch(_unused){return false;}}// shorten the checksummed version of the input address to have 0x + 4 characters at start and end\nexport function shortenAddress(address){var chars=arguments.length>1&&arguments[1]!==undefined?arguments[1]:4;var parsed=isAddress(address);if(!parsed){throw Error(\"Invalid 'address' parameter '\".concat(address,\"'.\"));}return\"\".concat(parsed.substring(0,chars+2),\"...\").concat(parsed.substring(42-chars));}export var currentTimestamp=function currentTimestamp(){return new Date().getTime();};// account is not optional\nfunction getSigner(provider,account){return provider.getSigner(account).connectUnchecked();}// account is optional\nfunction getProviderOrSigner(provider,account){return account?getSigner(provider,account):provider;}// account is optional\nexport function getContract(address,ABI,provider,account){if(!isAddress(address)||address===AddressZero){throw Error(\"Invalid 'address' parameter '\".concat(address,\"'.\"));}return new Contract(address,ABI,getProviderOrSigner(provider,account));}export function escapeRegExp(string){return string.replace(/[.*+?^${}()|[\\]\\\\]/g,\"\\\\$&\");// $& means the whole matched string\n}export function feeTierPercent(fee){return(fee/10000).toPrecision(1)+\"%\";}export function notEmpty(value){return value!==null&&value!==undefined;}","map":{"version":3,"names":["getAddress","AddressZero","Contract","isAddress","value","toLowerCase","shortenAddress","address","chars","parsed","Error","substring","currentTimestamp","Date","getTime","getSigner","provider","account","connectUnchecked","getProviderOrSigner","getContract","ABI","escapeRegExp","string","replace","feeTierPercent","fee","toPrecision","notEmpty","undefined"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/utils/index.ts"],"sourcesContent":["import { getAddress } from \"@ethersproject/address\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport type { JsonRpcProvider, JsonRpcSigner } from \"@ethersproject/providers\";\n\n// returns the checksummed address if the address is valid, otherwise returns false\nexport function isAddress(value: any): string | false {\n  try {\n    // Alphabetical letters must be made lowercase for getAddress to work.\n    // See documentation here: https://docs.ethers.io/v5/api/utils/address/\n    return getAddress(value.toLowerCase());\n  } catch {\n    return false;\n  }\n}\n\n// shorten the checksummed version of the input address to have 0x + 4 characters at start and end\nexport function shortenAddress(address: string, chars = 4): string {\n  const parsed = isAddress(address);\n  if (!parsed) {\n    throw Error(`Invalid 'address' parameter '${address}'.`);\n  }\n  return `${parsed.substring(0, chars + 2)}...${parsed.substring(42 - chars)}`;\n}\n\nexport const currentTimestamp = () => new Date().getTime();\n\n// account is not optional\nfunction getSigner(provider: JsonRpcProvider, account: string): JsonRpcSigner {\n  return provider.getSigner(account).connectUnchecked();\n}\n\n// account is optional\nfunction getProviderOrSigner(\n  provider: JsonRpcProvider,\n  account?: string\n): JsonRpcProvider | JsonRpcSigner {\n  return account ? getSigner(provider, account) : provider;\n}\n\n// account is optional\nexport function getContract(\n  address: string,\n  ABI: any,\n  provider: JsonRpcProvider,\n  account?: string\n): Contract {\n  if (!isAddress(address) || address === AddressZero) {\n    throw Error(`Invalid 'address' parameter '${address}'.`);\n  }\n\n  return new Contract(\n    address,\n    ABI,\n    getProviderOrSigner(provider, account) as any\n  );\n}\n\nexport function escapeRegExp(string: string): string {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\"); // $& means the whole matched string\n}\n\nexport function feeTierPercent(fee: number): string {\n  return (fee / 10000).toPrecision(1) + \"%\";\n}\n\nexport function notEmpty<TValue>(\n  value: TValue | null | undefined\n): value is TValue {\n  return value !== null && value !== undefined;\n}\n"],"mappings":"AAAA,OAASA,UAAU,KAAQ,wBAAwB,CACnD,OAASC,WAAW,KAAQ,0BAA0B,CACtD,OAASC,QAAQ,KAAQ,0BAA0B,CAGnD;AACA,MAAO,SAASC,UAAS,CAACC,KAAU,CAAkB,CACpD,GAAI,CACF;AACA;AACA,MAAOJ,WAAU,CAACI,KAAK,CAACC,WAAW,EAAE,CAAC,CACxC,CAAE,cAAM,CACN,MAAO,MAAK,CACd,CACF,CAEA;AACA,MAAO,SAASC,eAAc,CAACC,OAAe,CAAqB,IAAnBC,MAAK,2DAAG,CAAC,CACvD,GAAMC,OAAM,CAAGN,SAAS,CAACI,OAAO,CAAC,CACjC,GAAI,CAACE,MAAM,CAAE,CACX,KAAMC,MAAK,wCAAiCH,OAAO,OAAK,CAC1D,CACA,gBAAUE,MAAM,CAACE,SAAS,CAAC,CAAC,CAAEH,KAAK,CAAG,CAAC,CAAC,eAAMC,MAAM,CAACE,SAAS,CAAC,EAAE,CAAGH,KAAK,CAAC,EAC5E,CAEA,MAAO,IAAMI,iBAAgB,CAAG,QAAnBA,iBAAgB,SAAS,IAAIC,KAAI,EAAE,CAACC,OAAO,EAAE,GAE1D;AACA,QAASC,UAAS,CAACC,QAAyB,CAAEC,OAAe,CAAiB,CAC5E,MAAOD,SAAQ,CAACD,SAAS,CAACE,OAAO,CAAC,CAACC,gBAAgB,EAAE,CACvD,CAEA;AACA,QAASC,oBAAmB,CAC1BH,QAAyB,CACzBC,OAAgB,CACiB,CACjC,MAAOA,QAAO,CAAGF,SAAS,CAACC,QAAQ,CAAEC,OAAO,CAAC,CAAGD,QAAQ,CAC1D,CAEA;AACA,MAAO,SAASI,YAAW,CACzBb,OAAe,CACfc,GAAQ,CACRL,QAAyB,CACzBC,OAAgB,CACN,CACV,GAAI,CAACd,SAAS,CAACI,OAAO,CAAC,EAAIA,OAAO,GAAKN,WAAW,CAAE,CAClD,KAAMS,MAAK,wCAAiCH,OAAO,OAAK,CAC1D,CAEA,MAAO,IAAIL,SAAQ,CACjBK,OAAO,CACPc,GAAG,CACHF,mBAAmB,CAACH,QAAQ,CAAEC,OAAO,CAAC,CACvC,CACH,CAEA,MAAO,SAASK,aAAY,CAACC,MAAc,CAAU,CACnD,MAAOA,OAAM,CAACC,OAAO,CAAC,qBAAqB,CAAE,MAAM,CAAC,CAAE;AACxD,CAEA,MAAO,SAASC,eAAc,CAACC,GAAW,CAAU,CAClD,MAAO,CAACA,GAAG,CAAG,KAAK,EAAEC,WAAW,CAAC,CAAC,CAAC,CAAG,GAAG,CAC3C,CAEA,MAAO,SAASC,SAAQ,CACtBxB,KAAgC,CACf,CACjB,MAAOA,MAAK,GAAK,IAAI,EAAIA,KAAK,GAAKyB,SAAS,CAC9C"},"metadata":{},"sourceType":"module"}