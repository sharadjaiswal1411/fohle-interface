{"ast":null,"code":"import { createReducer } from '@reduxjs/toolkit';\nimport { parsedQueryString } from 'hooks/useParsedQueryString';\nimport { Field, replaceSwapState, selectCurrency, setRecipient, switchCurrencies, typeInput } from './actions';\nimport { queryParametersToSwapState } from './hooks';\nconst initialState = queryParametersToSwapState(parsedQueryString());\nexport default createReducer(initialState, builder => builder.addCase(replaceSwapState, (state, _ref) => {\n  let {\n    payload: {\n      typedValue,\n      recipient,\n      field,\n      inputCurrencyId,\n      outputCurrencyId\n    }\n  } = _ref;\n  return {\n    [Field.INPUT]: {\n      currencyId: inputCurrencyId !== null && inputCurrencyId !== void 0 ? inputCurrencyId : null\n    },\n    [Field.OUTPUT]: {\n      currencyId: outputCurrencyId !== null && outputCurrencyId !== void 0 ? outputCurrencyId : null\n    },\n    independentField: field,\n    typedValue,\n    recipient\n  };\n}).addCase(selectCurrency, (state, _ref2) => {\n  let {\n    payload: {\n      currencyId,\n      field\n    }\n  } = _ref2;\n  const otherField = field === Field.INPUT ? Field.OUTPUT : Field.INPUT;\n  if (currencyId === state[otherField].currencyId) {\n    // the case where we have to swap the order\n    return {\n      ...state,\n      independentField: state.independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT,\n      [field]: {\n        currencyId\n      },\n      [otherField]: {\n        currencyId: state[field].currencyId\n      }\n    };\n  } else {\n    // the normal case\n    return {\n      ...state,\n      [field]: {\n        currencyId\n      }\n    };\n  }\n}).addCase(switchCurrencies, state => {\n  return {\n    ...state,\n    independentField: state.independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT,\n    [Field.INPUT]: {\n      currencyId: state[Field.OUTPUT].currencyId\n    },\n    [Field.OUTPUT]: {\n      currencyId: state[Field.INPUT].currencyId\n    }\n  };\n}).addCase(typeInput, (state, _ref3) => {\n  let {\n    payload: {\n      field,\n      typedValue\n    }\n  } = _ref3;\n  return {\n    ...state,\n    independentField: field,\n    typedValue\n  };\n}).addCase(setRecipient, (state, _ref4) => {\n  let {\n    payload: {\n      recipient\n    }\n  } = _ref4;\n  state.recipient = recipient;\n}));","map":{"version":3,"names":["createReducer","parsedQueryString","Field","replaceSwapState","selectCurrency","setRecipient","switchCurrencies","typeInput","queryParametersToSwapState","initialState","builder","addCase","state","payload","typedValue","recipient","field","inputCurrencyId","outputCurrencyId","INPUT","currencyId","OUTPUT","independentField","otherField"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/state/swap/reducer.ts"],"sourcesContent":["import { createReducer } from '@reduxjs/toolkit'\nimport { parsedQueryString } from 'hooks/useParsedQueryString'\n\nimport { Field, replaceSwapState, selectCurrency, setRecipient, switchCurrencies, typeInput } from './actions'\nimport { queryParametersToSwapState } from './hooks'\n\nexport interface SwapState {\n  readonly independentField: Field\n  readonly typedValue: string\n  readonly [Field.INPUT]: {\n    readonly currencyId: string | undefined | null\n  }\n  readonly [Field.OUTPUT]: {\n    readonly currencyId: string | undefined | null\n  }\n  // the typed recipient address or ENS name, or null if swap should go to sender\n  readonly recipient: string | null\n}\n\nconst initialState: SwapState = queryParametersToSwapState(parsedQueryString())\n\nexport default createReducer<SwapState>(initialState, (builder) =>\n  builder\n    .addCase(\n      replaceSwapState,\n      (state, { payload: { typedValue, recipient, field, inputCurrencyId, outputCurrencyId } }) => {\n        return {\n          [Field.INPUT]: {\n            currencyId: inputCurrencyId ?? null,\n          },\n          [Field.OUTPUT]: {\n            currencyId: outputCurrencyId ?? null,\n          },\n          independentField: field,\n          typedValue,\n          recipient,\n        }\n      }\n    )\n    .addCase(selectCurrency, (state, { payload: { currencyId, field } }) => {\n      const otherField = field === Field.INPUT ? Field.OUTPUT : Field.INPUT\n      if (currencyId === state[otherField].currencyId) {\n        // the case where we have to swap the order\n        return {\n          ...state,\n          independentField: state.independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT,\n          [field]: { currencyId },\n          [otherField]: { currencyId: state[field].currencyId },\n        }\n      } else {\n        // the normal case\n        return {\n          ...state,\n          [field]: { currencyId },\n        }\n      }\n    })\n    .addCase(switchCurrencies, (state) => {\n      return {\n        ...state,\n        independentField: state.independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT,\n        [Field.INPUT]: { currencyId: state[Field.OUTPUT].currencyId },\n        [Field.OUTPUT]: { currencyId: state[Field.INPUT].currencyId },\n      }\n    })\n    .addCase(typeInput, (state, { payload: { field, typedValue } }) => {\n      return {\n        ...state,\n        independentField: field,\n        typedValue,\n      }\n    })\n    .addCase(setRecipient, (state, { payload: { recipient } }) => {\n      state.recipient = recipient\n    })\n)\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}