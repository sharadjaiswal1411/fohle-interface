{"ast":null,"code":"import { uuid4, dateTimestampInSeconds, consoleSandbox, logger, GLOBAL_OBJ, isNodeEnv, getGlobalSingleton } from '@sentry/utils';\nimport { Scope } from './scope.js';\nimport { closeSession, makeSession, updateSession } from './session.js';\n\n/**\n * API compatibility version of this hub.\n *\n * WARNING: This number should only be increased when the global interface\n * changes and new methods are introduced.\n *\n * @hidden\n */\nconst API_VERSION = 4;\n\n/**\n * Default maximum number of breadcrumbs added to an event. Can be overwritten\n * with {@link Options.maxBreadcrumbs}.\n */\nconst DEFAULT_BREADCRUMBS = 100;\n\n/**\n * A layer in the process stack.\n * @hidden\n */\n\n/**\n * @inheritDoc\n */\nclass Hub {\n  /** Is a {@link Layer}[] containing the client and scope */\n  __init() {\n    this._stack = [{}];\n  }\n\n  /** Contains the last event id of a captured event.  */\n\n  /**\n   * Creates a new instance of the hub, will push one {@link Layer} into the\n   * internal stack on creation.\n   *\n   * @param client bound to the hub.\n   * @param scope bound to the hub.\n   * @param version number, higher number means higher priority.\n   */\n  constructor(client) {\n    let scope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Scope();\n    let _version = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : API_VERSION;\n    ;\n    this._version = _version;\n    Hub.prototype.__init.call(this);\n    this.getStackTop().scope = scope;\n    if (client) {\n      this.bindClient(client);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isOlderThan(version) {\n    return this._version < version;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  bindClient(client) {\n    const top = this.getStackTop();\n    top.client = client;\n    if (client && client.setupIntegrations) {\n      client.setupIntegrations();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  pushScope() {\n    // We want to clone the content of prev scope\n    const scope = Scope.clone(this.getScope());\n    this.getStack().push({\n      client: this.getClient(),\n      scope\n    });\n    return scope;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  popScope() {\n    if (this.getStack().length <= 1) return false;\n    return !!this.getStack().pop();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  withScope(callback) {\n    const scope = this.pushScope();\n    try {\n      callback(scope);\n    } finally {\n      this.popScope();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getClient() {\n    return this.getStackTop().client;\n  }\n\n  /** Returns the scope of the top stack. */\n  getScope() {\n    return this.getStackTop().scope;\n  }\n\n  /** Returns the scope stack for domains or the process. */\n  getStack() {\n    return this._stack;\n  }\n\n  /** Returns the topmost scope layer in the order domain > local > process. */\n  getStackTop() {\n    return this._stack[this._stack.length - 1];\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  captureException(exception, hint) {\n    const eventId = this._lastEventId = hint && hint.event_id ? hint.event_id : uuid4();\n    const syntheticException = new Error('Sentry syntheticException');\n    this._withClient((client, scope) => {\n      client.captureException(exception, {\n        originalException: exception,\n        syntheticException,\n        ...hint,\n        event_id: eventId\n      }, scope);\n    });\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  captureMessage(message,\n  // eslint-disable-next-line deprecation/deprecation\n  level, hint) {\n    const eventId = this._lastEventId = hint && hint.event_id ? hint.event_id : uuid4();\n    const syntheticException = new Error(message);\n    this._withClient((client, scope) => {\n      client.captureMessage(message, level, {\n        originalException: message,\n        syntheticException,\n        ...hint,\n        event_id: eventId\n      }, scope);\n    });\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  captureEvent(event, hint) {\n    const eventId = hint && hint.event_id ? hint.event_id : uuid4();\n    if (event.type !== 'transaction') {\n      this._lastEventId = eventId;\n    }\n    this._withClient((client, scope) => {\n      client.captureEvent(event, {\n        ...hint,\n        event_id: eventId\n      }, scope);\n    });\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  lastEventId() {\n    return this._lastEventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  addBreadcrumb(breadcrumb, hint) {\n    const {\n      scope,\n      client\n    } = this.getStackTop();\n    if (!scope || !client) return;\n\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const {\n      beforeBreadcrumb = null,\n      maxBreadcrumbs = DEFAULT_BREADCRUMBS\n    } = client.getOptions && client.getOptions() || {};\n    if (maxBreadcrumbs <= 0) return;\n    const timestamp = dateTimestampInSeconds();\n    const mergedBreadcrumb = {\n      timestamp,\n      ...breadcrumb\n    };\n    const finalBreadcrumb = beforeBreadcrumb ? consoleSandbox(() => beforeBreadcrumb(mergedBreadcrumb, hint)) : mergedBreadcrumb;\n    if (finalBreadcrumb === null) return;\n    scope.addBreadcrumb(finalBreadcrumb, maxBreadcrumbs);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setUser(user) {\n    const scope = this.getScope();\n    if (scope) scope.setUser(user);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setTags(tags) {\n    const scope = this.getScope();\n    if (scope) scope.setTags(tags);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setExtras(extras) {\n    const scope = this.getScope();\n    if (scope) scope.setExtras(extras);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setTag(key, value) {\n    const scope = this.getScope();\n    if (scope) scope.setTag(key, value);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setExtra(key, extra) {\n    const scope = this.getScope();\n    if (scope) scope.setExtra(key, extra);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  setContext(name, context) {\n    const scope = this.getScope();\n    if (scope) scope.setContext(name, context);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  configureScope(callback) {\n    const {\n      scope,\n      client\n    } = this.getStackTop();\n    if (scope && client) {\n      callback(scope);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  run(callback) {\n    const oldHub = makeMain(this);\n    try {\n      callback(this);\n    } finally {\n      makeMain(oldHub);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  getIntegration(integration) {\n    const client = this.getClient();\n    if (!client) return null;\n    try {\n      return client.getIntegration(integration);\n    } catch (_oO) {\n      (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.warn(`Cannot retrieve integration ${integration.id} from the current Hub`);\n      return null;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  startTransaction(context, customSamplingContext) {\n    return this._callExtensionMethod('startTransaction', context, customSamplingContext);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  traceHeaders() {\n    return this._callExtensionMethod('traceHeaders');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  captureSession() {\n    let endSession = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    // both send the update and pull the session from the scope\n    if (endSession) {\n      return this.endSession();\n    }\n\n    // only send the update\n    this._sendSessionUpdate();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  endSession() {\n    const layer = this.getStackTop();\n    const scope = layer && layer.scope;\n    const session = scope && scope.getSession();\n    if (session) {\n      closeSession(session);\n    }\n    this._sendSessionUpdate();\n\n    // the session is over; take it off of the scope\n    if (scope) {\n      scope.setSession();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  startSession(context) {\n    const {\n      scope,\n      client\n    } = this.getStackTop();\n    const {\n      release,\n      environment\n    } = client && client.getOptions() || {};\n\n    // Will fetch userAgent if called from browser sdk\n    const {\n      userAgent\n    } = GLOBAL_OBJ.navigator || {};\n    const session = makeSession({\n      release,\n      environment,\n      ...(scope && {\n        user: scope.getUser()\n      }),\n      ...(userAgent && {\n        userAgent\n      }),\n      ...context\n    });\n    if (scope) {\n      // End existing session if there's one\n      const currentSession = scope.getSession && scope.getSession();\n      if (currentSession && currentSession.status === 'ok') {\n        updateSession(currentSession, {\n          status: 'exited'\n        });\n      }\n      this.endSession();\n\n      // Afterwards we set the new session on the scope\n      scope.setSession(session);\n    }\n    return session;\n  }\n\n  /**\n   * Returns if default PII should be sent to Sentry and propagated in ourgoing requests\n   * when Tracing is used.\n   */\n  shouldSendDefaultPii() {\n    const client = this.getClient();\n    const options = client && client.getOptions();\n    return Boolean(options && options.sendDefaultPii);\n  }\n\n  /**\n   * Sends the current Session on the scope\n   */\n  _sendSessionUpdate() {\n    const {\n      scope,\n      client\n    } = this.getStackTop();\n    if (!scope) return;\n    const session = scope.getSession();\n    if (session) {\n      if (client && client.captureSession) {\n        client.captureSession(session);\n      }\n    }\n  }\n\n  /**\n   * Internal helper function to call a method on the top client if it exists.\n   *\n   * @param method The method to call on the client.\n   * @param args Arguments to pass to the client function.\n   */\n  _withClient(callback) {\n    const {\n      scope,\n      client\n    } = this.getStackTop();\n    if (client) {\n      callback(client, scope);\n    }\n  }\n\n  /**\n   * Calls global extension method and binding current instance to the function call\n   */\n  // @ts-ignore Function lacks ending return statement and return type does not include 'undefined'. ts(2366)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  _callExtensionMethod(method) {\n    const carrier = getMainCarrier();\n    const sentry = carrier.__SENTRY__;\n    if (sentry && sentry.extensions && typeof sentry.extensions[method] === 'function') {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n      return sentry.extensions[method].apply(this, args);\n    }\n    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.warn(`Extension method ${method} couldn't be found, doing nothing.`);\n  }\n}\n\n/**\n * Returns the global shim registry.\n *\n * FIXME: This function is problematic, because despite always returning a valid Carrier,\n * it has an optional `__SENTRY__` property, which then in turn requires us to always perform an unnecessary check\n * at the call-site. We always access the carrier through this function, so we can guarantee that `__SENTRY__` is there.\n **/\nfunction getMainCarrier() {\n  GLOBAL_OBJ.__SENTRY__ = GLOBAL_OBJ.__SENTRY__ || {\n    extensions: {},\n    hub: undefined\n  };\n  return GLOBAL_OBJ;\n}\n\n/**\n * Replaces the current main hub with the passed one on the global object\n *\n * @returns The old replaced hub\n */\nfunction makeMain(hub) {\n  const registry = getMainCarrier();\n  const oldHub = getHubFromCarrier(registry);\n  setHubOnCarrier(registry, hub);\n  return oldHub;\n}\n\n/**\n * Returns the default hub instance.\n *\n * If a hub is already registered in the global carrier but this module\n * contains a more recent version, it replaces the registered version.\n * Otherwise, the currently registered hub will be returned.\n */\nfunction getCurrentHub() {\n  // Get main carrier (global for every environment)\n  const registry = getMainCarrier();\n\n  // If there's no hub, or its an old API, assign a new one\n  if (!hasHubOnCarrier(registry) || getHubFromCarrier(registry).isOlderThan(API_VERSION)) {\n    setHubOnCarrier(registry, new Hub());\n  }\n\n  // Prefer domains over global if they are there (applicable only to Node environment)\n  if (isNodeEnv()) {\n    return getHubFromActiveDomain(registry);\n  }\n  // Return hub that lives on a global object\n  return getHubFromCarrier(registry);\n}\n\n/**\n * Try to read the hub from an active domain, and fallback to the registry if one doesn't exist\n * @returns discovered hub\n */\nfunction getHubFromActiveDomain(registry) {\n  try {\n    const sentry = getMainCarrier().__SENTRY__;\n    const activeDomain = sentry && sentry.extensions && sentry.extensions.domain && sentry.extensions.domain.active;\n\n    // If there's no active domain, just return global hub\n    if (!activeDomain) {\n      return getHubFromCarrier(registry);\n    }\n\n    // If there's no hub on current domain, or it's an old API, assign a new one\n    if (!hasHubOnCarrier(activeDomain) || getHubFromCarrier(activeDomain).isOlderThan(API_VERSION)) {\n      const registryHubTopStack = getHubFromCarrier(registry).getStackTop();\n      setHubOnCarrier(activeDomain, new Hub(registryHubTopStack.client, Scope.clone(registryHubTopStack.scope)));\n    }\n\n    // Return hub that lives on a domain\n    return getHubFromCarrier(activeDomain);\n  } catch (_Oo) {\n    // Return hub that lives on a global object\n    return getHubFromCarrier(registry);\n  }\n}\n\n/**\n * This will tell whether a carrier has a hub on it or not\n * @param carrier object\n */\nfunction hasHubOnCarrier(carrier) {\n  return !!(carrier && carrier.__SENTRY__ && carrier.__SENTRY__.hub);\n}\n\n/**\n * This will create a new {@link Hub} and add to the passed object on\n * __SENTRY__.hub.\n * @param carrier object\n * @hidden\n */\nfunction getHubFromCarrier(carrier) {\n  return getGlobalSingleton('hub', () => new Hub(), carrier);\n}\n\n/**\n * This will set passed {@link Hub} on the passed object's __SENTRY__.hub attribute\n * @param carrier object\n * @param hub Hub\n * @returns A boolean indicating success or failure\n */\nfunction setHubOnCarrier(carrier, hub) {\n  if (!carrier) return false;\n  const __SENTRY__ = carrier.__SENTRY__ = carrier.__SENTRY__ || {};\n  __SENTRY__.hub = hub;\n  return true;\n}\nexport { API_VERSION, Hub, getCurrentHub, getHubFromCarrier, getMainCarrier, makeMain, setHubOnCarrier };","map":{"version":3,"sources":["../../src/hub.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable max-lines */\nimport {\n  Breadcrumb,\n  BreadcrumbHint,\n  Client,\n  CustomSamplingContext,\n  Event,\n  EventHint,\n  Extra,\n  Extras,\n  Hub as HubInterface,\n  Integration,\n  IntegrationClass,\n  Primitive,\n  Session,\n  SessionContext,\n  Severity,\n  SeverityLevel,\n  Transaction,\n  TransactionContext,\n  User,\n} from '@sentry/types';\nimport {\n  consoleSandbox,\n  dateTimestampInSeconds,\n  getGlobalSingleton,\n  GLOBAL_OBJ,\n  isNodeEnv,\n  logger,\n  uuid4,\n} from '@sentry/utils';\n\nimport { Scope } from './scope';\nimport { closeSession, makeSession, updateSession } from './session';\n\n/**\n * API compatibility version of this hub.\n *\n * WARNING: This number should only be increased when the global interface\n * changes and new methods are introduced.\n *\n * @hidden\n */\nexport const API_VERSION = 4;\n\n/**\n * Default maximum number of breadcrumbs added to an event. Can be overwritten\n * with {@link Options.maxBreadcrumbs}.\n */\nconst DEFAULT_BREADCRUMBS = 100;\n\n/**\n * A layer in the process stack.\n * @hidden\n */\nexport interface Layer {\n  client?: Client;\n  scope?: Scope;\n}\n\n/**\n * An object that contains a hub and maintains a scope stack.\n * @hidden\n */\nexport interface Carrier {\n  __SENTRY__?: {\n    hub?: Hub;\n    /**\n     * Extra Hub properties injected by various SDKs\n     */\n    integrations?: Integration[];\n    extensions?: {\n      /** Hack to prevent bundlers from breaking our usage of the domain package in the cross-platform Hub package */\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      domain?: { [key: string]: any };\n    } & {\n      /** Extension methods for the hub, which are bound to the current Hub instance */\n      // eslint-disable-next-line @typescript-eslint/ban-types\n      [key: string]: Function;\n    };\n  };\n}\n\n/**\n * @inheritDoc\n */\nexport class Hub implements HubInterface {\n  /** Is a {@link Layer}[] containing the client and scope */\n  private readonly _stack: Layer[] = [{}];\n\n  /** Contains the last event id of a captured event.  */\n  private _lastEventId?: string;\n\n  /**\n   * Creates a new instance of the hub, will push one {@link Layer} into the\n   * internal stack on creation.\n   *\n   * @param client bound to the hub.\n   * @param scope bound to the hub.\n   * @param version number, higher number means higher priority.\n   */\n  public constructor(client?: Client, scope: Scope = new Scope(), private readonly _version: number = API_VERSION) {\n    this.getStackTop().scope = scope;\n    if (client) {\n      this.bindClient(client);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public isOlderThan(version: number): boolean {\n    return this._version < version;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public bindClient(client?: Client): void {\n    const top = this.getStackTop();\n    top.client = client;\n    if (client && client.setupIntegrations) {\n      client.setupIntegrations();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public pushScope(): Scope {\n    // We want to clone the content of prev scope\n    const scope = Scope.clone(this.getScope());\n    this.getStack().push({\n      client: this.getClient(),\n      scope,\n    });\n    return scope;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public popScope(): boolean {\n    if (this.getStack().length <= 1) return false;\n    return !!this.getStack().pop();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public withScope(callback: (scope: Scope) => void): void {\n    const scope = this.pushScope();\n    try {\n      callback(scope);\n    } finally {\n      this.popScope();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getClient<C extends Client>(): C | undefined {\n    return this.getStackTop().client as C;\n  }\n\n  /** Returns the scope of the top stack. */\n  public getScope(): Scope | undefined {\n    return this.getStackTop().scope;\n  }\n\n  /** Returns the scope stack for domains or the process. */\n  public getStack(): Layer[] {\n    return this._stack;\n  }\n\n  /** Returns the topmost scope layer in the order domain > local > process. */\n  public getStackTop(): Layer {\n    return this._stack[this._stack.length - 1];\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  public captureException(exception: any, hint?: EventHint): string {\n    const eventId = (this._lastEventId = hint && hint.event_id ? hint.event_id : uuid4());\n    const syntheticException = new Error('Sentry syntheticException');\n    this._withClient((client, scope) => {\n      client.captureException(\n        exception,\n        {\n          originalException: exception,\n          syntheticException,\n          ...hint,\n          event_id: eventId,\n        },\n        scope,\n      );\n    });\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureMessage(\n    message: string,\n    // eslint-disable-next-line deprecation/deprecation\n    level?: Severity | SeverityLevel,\n    hint?: EventHint,\n  ): string {\n    const eventId = (this._lastEventId = hint && hint.event_id ? hint.event_id : uuid4());\n    const syntheticException = new Error(message);\n    this._withClient((client, scope) => {\n      client.captureMessage(\n        message,\n        level,\n        {\n          originalException: message,\n          syntheticException,\n          ...hint,\n          event_id: eventId,\n        },\n        scope,\n      );\n    });\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureEvent(event: Event, hint?: EventHint): string {\n    const eventId = hint && hint.event_id ? hint.event_id : uuid4();\n    if (event.type !== 'transaction') {\n      this._lastEventId = eventId;\n    }\n\n    this._withClient((client, scope) => {\n      client.captureEvent(event, { ...hint, event_id: eventId }, scope);\n    });\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public lastEventId(): string | undefined {\n    return this._lastEventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addBreadcrumb(breadcrumb: Breadcrumb, hint?: BreadcrumbHint): void {\n    const { scope, client } = this.getStackTop();\n\n    if (!scope || !client) return;\n\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const { beforeBreadcrumb = null, maxBreadcrumbs = DEFAULT_BREADCRUMBS } =\n      (client.getOptions && client.getOptions()) || {};\n\n    if (maxBreadcrumbs <= 0) return;\n\n    const timestamp = dateTimestampInSeconds();\n    const mergedBreadcrumb = { timestamp, ...breadcrumb };\n    const finalBreadcrumb = beforeBreadcrumb\n      ? (consoleSandbox(() => beforeBreadcrumb(mergedBreadcrumb, hint)) as Breadcrumb | null)\n      : mergedBreadcrumb;\n\n    if (finalBreadcrumb === null) return;\n\n    scope.addBreadcrumb(finalBreadcrumb, maxBreadcrumbs);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setUser(user: User | null): void {\n    const scope = this.getScope();\n    if (scope) scope.setUser(user);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTags(tags: { [key: string]: Primitive }): void {\n    const scope = this.getScope();\n    if (scope) scope.setTags(tags);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtras(extras: Extras): void {\n    const scope = this.getScope();\n    if (scope) scope.setExtras(extras);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTag(key: string, value: Primitive): void {\n    const scope = this.getScope();\n    if (scope) scope.setTag(key, value);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtra(key: string, extra: Extra): void {\n    const scope = this.getScope();\n    if (scope) scope.setExtra(key, extra);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public setContext(name: string, context: { [key: string]: any } | null): void {\n    const scope = this.getScope();\n    if (scope) scope.setContext(name, context);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public configureScope(callback: (scope: Scope) => void): void {\n    const { scope, client } = this.getStackTop();\n    if (scope && client) {\n      callback(scope);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public run(callback: (hub: Hub) => void): void {\n    const oldHub = makeMain(this);\n    try {\n      callback(this);\n    } finally {\n      makeMain(oldHub);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getIntegration<T extends Integration>(integration: IntegrationClass<T>): T | null {\n    const client = this.getClient();\n    if (!client) return null;\n    try {\n      return client.getIntegration(integration);\n    } catch (_oO) {\n      __DEBUG_BUILD__ && logger.warn(`Cannot retrieve integration ${integration.id} from the current Hub`);\n      return null;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public startTransaction(context: TransactionContext, customSamplingContext?: CustomSamplingContext): Transaction {\n    return this._callExtensionMethod('startTransaction', context, customSamplingContext);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public traceHeaders(): { [key: string]: string } {\n    return this._callExtensionMethod<{ [key: string]: string }>('traceHeaders');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureSession(endSession: boolean = false): void {\n    // both send the update and pull the session from the scope\n    if (endSession) {\n      return this.endSession();\n    }\n\n    // only send the update\n    this._sendSessionUpdate();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public endSession(): void {\n    const layer = this.getStackTop();\n    const scope = layer && layer.scope;\n    const session = scope && scope.getSession();\n    if (session) {\n      closeSession(session);\n    }\n    this._sendSessionUpdate();\n\n    // the session is over; take it off of the scope\n    if (scope) {\n      scope.setSession();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public startSession(context?: SessionContext): Session {\n    const { scope, client } = this.getStackTop();\n    const { release, environment } = (client && client.getOptions()) || {};\n\n    // Will fetch userAgent if called from browser sdk\n    const { userAgent } = GLOBAL_OBJ.navigator || {};\n\n    const session = makeSession({\n      release,\n      environment,\n      ...(scope && { user: scope.getUser() }),\n      ...(userAgent && { userAgent }),\n      ...context,\n    });\n\n    if (scope) {\n      // End existing session if there's one\n      const currentSession = scope.getSession && scope.getSession();\n      if (currentSession && currentSession.status === 'ok') {\n        updateSession(currentSession, { status: 'exited' });\n      }\n      this.endSession();\n\n      // Afterwards we set the new session on the scope\n      scope.setSession(session);\n    }\n\n    return session;\n  }\n\n  /**\n   * Returns if default PII should be sent to Sentry and propagated in ourgoing requests\n   * when Tracing is used.\n   */\n  public shouldSendDefaultPii(): boolean {\n    const client = this.getClient();\n    const options = client && client.getOptions();\n    return Boolean(options && options.sendDefaultPii);\n  }\n\n  /**\n   * Sends the current Session on the scope\n   */\n  private _sendSessionUpdate(): void {\n    const { scope, client } = this.getStackTop();\n    if (!scope) return;\n\n    const session = scope.getSession();\n    if (session) {\n      if (client && client.captureSession) {\n        client.captureSession(session);\n      }\n    }\n  }\n\n  /**\n   * Internal helper function to call a method on the top client if it exists.\n   *\n   * @param method The method to call on the client.\n   * @param args Arguments to pass to the client function.\n   */\n  private _withClient(callback: (client: Client, scope: Scope | undefined) => void): void {\n    const { scope, client } = this.getStackTop();\n    if (client) {\n      callback(client, scope);\n    }\n  }\n\n  /**\n   * Calls global extension method and binding current instance to the function call\n   */\n  // @ts-ignore Function lacks ending return statement and return type does not include 'undefined'. ts(2366)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _callExtensionMethod<T>(method: string, ...args: any[]): T {\n    const carrier = getMainCarrier();\n    const sentry = carrier.__SENTRY__;\n    if (sentry && sentry.extensions && typeof sentry.extensions[method] === 'function') {\n      return sentry.extensions[method].apply(this, args);\n    }\n    __DEBUG_BUILD__ && logger.warn(`Extension method ${method} couldn't be found, doing nothing.`);\n  }\n}\n\n/**\n * Returns the global shim registry.\n *\n * FIXME: This function is problematic, because despite always returning a valid Carrier,\n * it has an optional `__SENTRY__` property, which then in turn requires us to always perform an unnecessary check\n * at the call-site. We always access the carrier through this function, so we can guarantee that `__SENTRY__` is there.\n **/\nexport function getMainCarrier(): Carrier {\n  GLOBAL_OBJ.__SENTRY__ = GLOBAL_OBJ.__SENTRY__ || {\n    extensions: {},\n    hub: undefined,\n  };\n  return GLOBAL_OBJ;\n}\n\n/**\n * Replaces the current main hub with the passed one on the global object\n *\n * @returns The old replaced hub\n */\nexport function makeMain(hub: Hub): Hub {\n  const registry = getMainCarrier();\n  const oldHub = getHubFromCarrier(registry);\n  setHubOnCarrier(registry, hub);\n  return oldHub;\n}\n\n/**\n * Returns the default hub instance.\n *\n * If a hub is already registered in the global carrier but this module\n * contains a more recent version, it replaces the registered version.\n * Otherwise, the currently registered hub will be returned.\n */\nexport function getCurrentHub(): Hub {\n  // Get main carrier (global for every environment)\n  const registry = getMainCarrier();\n\n  // If there's no hub, or its an old API, assign a new one\n  if (!hasHubOnCarrier(registry) || getHubFromCarrier(registry).isOlderThan(API_VERSION)) {\n    setHubOnCarrier(registry, new Hub());\n  }\n\n  // Prefer domains over global if they are there (applicable only to Node environment)\n  if (isNodeEnv()) {\n    return getHubFromActiveDomain(registry);\n  }\n  // Return hub that lives on a global object\n  return getHubFromCarrier(registry);\n}\n\n/**\n * Try to read the hub from an active domain, and fallback to the registry if one doesn't exist\n * @returns discovered hub\n */\nfunction getHubFromActiveDomain(registry: Carrier): Hub {\n  try {\n    const sentry = getMainCarrier().__SENTRY__;\n    const activeDomain = sentry && sentry.extensions && sentry.extensions.domain && sentry.extensions.domain.active;\n\n    // If there's no active domain, just return global hub\n    if (!activeDomain) {\n      return getHubFromCarrier(registry);\n    }\n\n    // If there's no hub on current domain, or it's an old API, assign a new one\n    if (!hasHubOnCarrier(activeDomain) || getHubFromCarrier(activeDomain).isOlderThan(API_VERSION)) {\n      const registryHubTopStack = getHubFromCarrier(registry).getStackTop();\n      setHubOnCarrier(activeDomain, new Hub(registryHubTopStack.client, Scope.clone(registryHubTopStack.scope)));\n    }\n\n    // Return hub that lives on a domain\n    return getHubFromCarrier(activeDomain);\n  } catch (_Oo) {\n    // Return hub that lives on a global object\n    return getHubFromCarrier(registry);\n  }\n}\n\n/**\n * This will tell whether a carrier has a hub on it or not\n * @param carrier object\n */\nfunction hasHubOnCarrier(carrier: Carrier): boolean {\n  return !!(carrier && carrier.__SENTRY__ && carrier.__SENTRY__.hub);\n}\n\n/**\n * This will create a new {@link Hub} and add to the passed object on\n * __SENTRY__.hub.\n * @param carrier object\n * @hidden\n */\nexport function getHubFromCarrier(carrier: Carrier): Hub {\n  return getGlobalSingleton<Hub>('hub', () => new Hub(), carrier);\n}\n\n/**\n * This will set passed {@link Hub} on the passed object's __SENTRY__.hub attribute\n * @param carrier object\n * @param hub Hub\n * @returns A boolean indicating success or failure\n */\nexport function setHubOnCarrier(carrier: Carrier, hub: Hub): boolean {\n  if (!carrier) return false;\n  const __SENTRY__ = (carrier.__SENTRY__ = carrier.__SENTRY__ || {});\n  __SENTRY__.hub = hub;\n  return true;\n}\n"]},"metadata":{},"sourceType":"module"}