{"ast":null,"code":"import { CeloNetworkInfo, PolygonNetworkInfo } from \"constants/networks\";\nimport { CELO_ADDRESS, MATIC_ADDRESS, WETH_ADDRESSES } from \"../constants\";\nexport function serializeToken(token) {\n  return {\n    chainId: token.chainId,\n    address: token.address,\n    decimals: token.decimals,\n    symbol: token.symbol,\n    name: token.name\n  };\n}\nexport function formatTokenSymbol(address, symbol, activeNetwork) {\n  // dumb catch for matic\n  if (address === MATIC_ADDRESS && activeNetwork === PolygonNetworkInfo) {\n    return \"MATIC\";\n  }\n\n  // dumb catch for Celo\n  if (address === CELO_ADDRESS && activeNetwork === CeloNetworkInfo) {\n    return \"CELO\";\n  }\n  if (WETH_ADDRESSES.includes(address)) {\n    return \"ETH\";\n  }\n  return symbol;\n}\nexport function formatTokenName(address, name, activeNetwork) {\n  // dumb catch for matic\n  if (address === MATIC_ADDRESS && activeNetwork === PolygonNetworkInfo) {\n    return \"MATIC\";\n  }\n\n  // dumb catch for Celo\n  if (address === CELO_ADDRESS && activeNetwork === CeloNetworkInfo) {\n    return \"CELO\";\n  }\n  if (WETH_ADDRESSES.includes(address)) {\n    return \"Ether\";\n  }\n  return name;\n}","map":{"version":3,"names":["CeloNetworkInfo","PolygonNetworkInfo","CELO_ADDRESS","MATIC_ADDRESS","WETH_ADDRESSES","serializeToken","token","chainId","address","decimals","symbol","name","formatTokenSymbol","activeNetwork","includes","formatTokenName"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/utils/tokens.ts"],"sourcesContent":["import { Token } from \"@uniswap/sdk-core\"\nimport {\n  CeloNetworkInfo,\n  NetworkInfo,\n  PolygonNetworkInfo,\n} from \"constants/networks\"\nimport { CELO_ADDRESS, MATIC_ADDRESS, WETH_ADDRESSES } from \"../constants\"\n\nexport interface SerializedToken {\n  chainId: number;\n  address: string;\n  decimals: number;\n  symbol?: string;\n  name?: string;\n}\n\nexport function serializeToken(token: Token): SerializedToken {\n  return {\n    chainId: token.chainId,\n    address: token.address,\n    decimals: token.decimals,\n    symbol: token.symbol,\n    name: token.name,\n  };\n}\n\nexport function formatTokenSymbol(\n  address: string,\n  symbol: string,\n  activeNetwork?: NetworkInfo\n) {\n  // dumb catch for matic\n  if (address === MATIC_ADDRESS && activeNetwork === PolygonNetworkInfo) {\n    return \"MATIC\";\n  }\n\n  // dumb catch for Celo\n  if (address === CELO_ADDRESS && activeNetwork === CeloNetworkInfo) {\n    return \"CELO\";\n  }\n\n  if (WETH_ADDRESSES.includes(address)) {\n    return \"ETH\";\n  }\n  return symbol;\n}\n\nexport function formatTokenName(\n  address: string,\n  name: string,\n  activeNetwork?: NetworkInfo\n) {\n  // dumb catch for matic\n  if (address === MATIC_ADDRESS && activeNetwork === PolygonNetworkInfo) {\n    return \"MATIC\";\n  }\n\n  // dumb catch for Celo\n  if (address === CELO_ADDRESS && activeNetwork === CeloNetworkInfo) {\n    return \"CELO\";\n  }\n\n  if (WETH_ADDRESSES.includes(address)) {\n    return \"Ether\";\n  }\n  return name;\n}\n"],"mappings":"AACA,SACEA,eAAe,EAEfC,kBAAkB,QACb,oBAAoB;AAC3B,SAASC,YAAY,EAAEC,aAAa,EAAEC,cAAc,QAAQ,cAAc;AAU1E,OAAO,SAASC,cAAc,CAACC,KAAY,EAAmB;EAC5D,OAAO;IACLC,OAAO,EAAED,KAAK,CAACC,OAAO;IACtBC,OAAO,EAAEF,KAAK,CAACE,OAAO;IACtBC,QAAQ,EAAEH,KAAK,CAACG,QAAQ;IACxBC,MAAM,EAAEJ,KAAK,CAACI,MAAM;IACpBC,IAAI,EAAEL,KAAK,CAACK;EACd,CAAC;AACH;AAEA,OAAO,SAASC,iBAAiB,CAC/BJ,OAAe,EACfE,MAAc,EACdG,aAA2B,EAC3B;EACA;EACA,IAAIL,OAAO,KAAKL,aAAa,IAAIU,aAAa,KAAKZ,kBAAkB,EAAE;IACrE,OAAO,OAAO;EAChB;;EAEA;EACA,IAAIO,OAAO,KAAKN,YAAY,IAAIW,aAAa,KAAKb,eAAe,EAAE;IACjE,OAAO,MAAM;EACf;EAEA,IAAII,cAAc,CAACU,QAAQ,CAACN,OAAO,CAAC,EAAE;IACpC,OAAO,KAAK;EACd;EACA,OAAOE,MAAM;AACf;AAEA,OAAO,SAASK,eAAe,CAC7BP,OAAe,EACfG,IAAY,EACZE,aAA2B,EAC3B;EACA;EACA,IAAIL,OAAO,KAAKL,aAAa,IAAIU,aAAa,KAAKZ,kBAAkB,EAAE;IACrE,OAAO,OAAO;EAChB;;EAEA;EACA,IAAIO,OAAO,KAAKN,YAAY,IAAIW,aAAa,KAAKb,eAAe,EAAE;IACjE,OAAO,MAAM;EACf;EAEA,IAAII,cAAc,CAACU,QAAQ,CAACN,OAAO,CAAC,EAAE;IACpC,OAAO,OAAO;EAChB;EACA,OAAOG,IAAI;AACb"},"metadata":{},"sourceType":"module"}