{"ast":null,"code":"import{Fraction}from'@uniswap/sdk-core';import{DEFAULT_LOCALE}from'constants/locales';import JSBI from'jsbi';import formatLocaleNumber from'lib/utils/formatLocaleNumber';export function formatCurrencyAmount(amount,sigFigs){var locale=arguments.length>2&&arguments[2]!==undefined?arguments[2]:DEFAULT_LOCALE;var fixedDecimals=arguments.length>3?arguments[3]:undefined;if(!amount){return'-';}if(JSBI.equal(amount.quotient,JSBI.BigInt(0))){return'0';}if(amount.divide(amount.decimalScale).lessThan(new Fraction(1,100000))){return\"<\".concat(formatLocaleNumber({number:0.00001,locale:locale}));}return formatLocaleNumber({number:amount,locale:locale,sigFigs:sigFigs,fixedDecimals:fixedDecimals});}export function formatPrice(price,sigFigs){var locale=arguments.length>2&&arguments[2]!==undefined?arguments[2]:DEFAULT_LOCALE;if(!price){return'-';}if(parseFloat(price.toFixed(sigFigs))<0.0001){return\"<\".concat(formatLocaleNumber({number:0.00001,locale:locale}));}return formatLocaleNumber({number:price,locale:locale,sigFigs:sigFigs});}","map":{"version":3,"names":["Fraction","DEFAULT_LOCALE","JSBI","formatLocaleNumber","formatCurrencyAmount","amount","sigFigs","locale","fixedDecimals","equal","quotient","BigInt","divide","decimalScale","lessThan","number","formatPrice","price","parseFloat","toFixed"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/utils/formatCurrencyAmount.ts"],"sourcesContent":["import { Currency, CurrencyAmount, Fraction, Price } from '@uniswap/sdk-core'\nimport { DEFAULT_LOCALE, SupportedLocale } from 'constants/locales'\nimport JSBI from 'jsbi'\nimport formatLocaleNumber from 'lib/utils/formatLocaleNumber'\n\nexport function formatCurrencyAmount(\n  amount: CurrencyAmount<Currency> | undefined,\n  sigFigs: number,\n  locale: SupportedLocale = DEFAULT_LOCALE,\n  fixedDecimals?: number\n): string {\n  if (!amount) {\n    return '-'\n  }\n\n  if (JSBI.equal(amount.quotient, JSBI.BigInt(0))) {\n    return '0'\n  }\n\n  if (amount.divide(amount.decimalScale).lessThan(new Fraction(1, 100000))) {\n    return `<${formatLocaleNumber({ number: 0.00001, locale })}`\n  }\n\n  return formatLocaleNumber({ number: amount, locale, sigFigs, fixedDecimals })\n}\n\nexport function formatPrice(\n  price: Price<Currency, Currency> | undefined,\n  sigFigs: number,\n  locale: SupportedLocale = DEFAULT_LOCALE\n): string {\n  if (!price) {\n    return '-'\n  }\n\n  if (parseFloat(price.toFixed(sigFigs)) < 0.0001) {\n    return `<${formatLocaleNumber({ number: 0.00001, locale })}`\n  }\n\n  return formatLocaleNumber({ number: price, locale, sigFigs })\n}\n"],"mappings":"AAAA,OAAmCA,QAAQ,KAAe,mBAAmB,CAC7E,OAASC,cAAc,KAAyB,mBAAmB,CACnE,MAAOC,KAAI,KAAM,MAAM,CACvB,MAAOC,mBAAkB,KAAM,8BAA8B,CAE7D,MAAO,SAASC,qBAAoB,CAClCC,MAA4C,CAC5CC,OAAe,CAGP,IAFRC,OAAuB,2DAAGN,cAAc,IACxCO,cAAsB,2CAEtB,GAAI,CAACH,MAAM,CAAE,CACX,MAAO,GAAG,CACZ,CAEA,GAAIH,IAAI,CAACO,KAAK,CAACJ,MAAM,CAACK,QAAQ,CAAER,IAAI,CAACS,MAAM,CAAC,CAAC,CAAC,CAAC,CAAE,CAC/C,MAAO,GAAG,CACZ,CAEA,GAAIN,MAAM,CAACO,MAAM,CAACP,MAAM,CAACQ,YAAY,CAAC,CAACC,QAAQ,CAAC,GAAId,SAAQ,CAAC,CAAC,CAAE,MAAM,CAAC,CAAC,CAAE,CACxE,iBAAWG,kBAAkB,CAAC,CAAEY,MAAM,CAAE,OAAO,CAAER,MAAM,CAANA,MAAO,CAAC,CAAC,EAC5D,CAEA,MAAOJ,mBAAkB,CAAC,CAAEY,MAAM,CAAEV,MAAM,CAAEE,MAAM,CAANA,MAAM,CAAED,OAAO,CAAPA,OAAO,CAAEE,aAAa,CAAbA,aAAc,CAAC,CAAC,CAC/E,CAEA,MAAO,SAASQ,YAAW,CACzBC,KAA4C,CAC5CX,OAAe,CAEP,IADRC,OAAuB,2DAAGN,cAAc,CAExC,GAAI,CAACgB,KAAK,CAAE,CACV,MAAO,GAAG,CACZ,CAEA,GAAIC,UAAU,CAACD,KAAK,CAACE,OAAO,CAACb,OAAO,CAAC,CAAC,CAAG,MAAM,CAAE,CAC/C,iBAAWH,kBAAkB,CAAC,CAAEY,MAAM,CAAE,OAAO,CAAER,MAAM,CAANA,MAAO,CAAC,CAAC,EAC5D,CAEA,MAAOJ,mBAAkB,CAAC,CAAEY,MAAM,CAAEE,KAAK,CAAEV,MAAM,CAANA,MAAM,CAAED,OAAO,CAAPA,OAAQ,CAAC,CAAC,CAC/D"},"metadata":{},"sourceType":"module"}