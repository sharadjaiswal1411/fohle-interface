{"ast":null,"code":"import _regeneratorRuntime from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { _nullishCoalesce } from './_nullishCoalesce.js';\n\n// adapted from Sucrase (https://github.com/alangpierce/sucrase)\n\n/**\n * Polyfill for the nullish coalescing operator (`??`), when used in situations where at least one of the values is the\n * result of an async operation.\n *\n * Note that the RHS is wrapped in a function so that if it's a computed value, that evaluation won't happen unless the\n * LHS evaluates to a nullish value, to mimic the operator's short-circuiting behavior.\n *\n * Adapted from Sucrase (https://github.com/alangpierce/sucrase)\n *\n * @param lhs The value of the expression to the left of the `??`\n * @param rhsFn A function returning the value of the expression to the right of the `??`\n * @returns The LHS value, unless it's `null` or `undefined`, in which case, the RHS value\n */\n// eslint-disable-next-line @sentry-internal/sdk/no-async-await\nfunction _asyncNullishCoalesce(_x, _x2) {\n  return _asyncNullishCoalesce2.apply(this, arguments);\n} // Sucrase version:\n// async function _asyncNullishCoalesce(lhs, rhsFn) {\n//   if (lhs != null) {\n//     return lhs;\n//   } else {\n//     return await rhsFn();\n//   }\n// }\nfunction _asyncNullishCoalesce2() {\n  _asyncNullishCoalesce2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(lhs, rhsFn) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", _nullishCoalesce(lhs, rhsFn));\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _asyncNullishCoalesce2.apply(this, arguments);\n}\nexport { _asyncNullishCoalesce };","map":{"version":3,"sources":["../../../src/buildPolyfills/_asyncNullishCoalesce.ts"],"names":[],"mappings":";;;;AAAA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,SACA,qBAAA;EAAA;AAAA,EAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;EAAA,kFAXA,iBAAA,GAAA,EAAA,KAAA;IAAA;MAAA;QAAA;UAAA;YAAA,iCACA,gBAAA,CAAA,GAAA,EAAA,KAAA,CAAA;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CACA;EAAA;AAAA","sourcesContent":["// adapted from Sucrase (https://github.com/alangpierce/sucrase)\n\nimport { _nullishCoalesce } from './_nullishCoalesce';\n\n/**\n * Polyfill for the nullish coalescing operator (`??`), when used in situations where at least one of the values is the\n * result of an async operation.\n *\n * Note that the RHS is wrapped in a function so that if it's a computed value, that evaluation won't happen unless the\n * LHS evaluates to a nullish value, to mimic the operator's short-circuiting behavior.\n *\n * Adapted from Sucrase (https://github.com/alangpierce/sucrase)\n *\n * @param lhs The value of the expression to the left of the `??`\n * @param rhsFn A function returning the value of the expression to the right of the `??`\n * @returns The LHS value, unless it's `null` or `undefined`, in which case, the RHS value\n */\n// eslint-disable-next-line @sentry-internal/sdk/no-async-await\nexport async function _asyncNullishCoalesce(lhs: unknown, rhsFn: () => unknown): Promise<unknown> {\n  return _nullishCoalesce(lhs, rhsFn);\n}\n\n// Sucrase version:\n// async function _asyncNullishCoalesce(lhs, rhsFn) {\n//   if (lhs != null) {\n//     return lhs;\n//   } else {\n//     return await rhsFn();\n//   }\n// }\n"]},"metadata":{},"sourceType":"module"}