{"ast":null,"code":"import _regeneratorRuntime from\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _objectSpread from\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _toConsumableArray from\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _asyncToGenerator from\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import dayjs from\"dayjs\";/**\n * Used to get large amounts of data when\n * @param query\n * @param localClient\n * @param vars - any variables that are passed in every query\n * @param values - the keys that are used as the values to map over if\n * @param skipCount - amount of entities to skip per query\n */export function splitQuery(_x,_x2,_x3,_x4){return _splitQuery.apply(this,arguments);}function _splitQuery(){_splitQuery=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(query,client,vars,values){var skipCount,fetchedData,allFound,skip,end,sliced,result,_args=arguments;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:skipCount=_args.length>4&&_args[4]!==undefined?_args[4]:1000;fetchedData={};allFound=false;skip=0;_context.prev=4;case 5:if(allFound){_context.next=16;break;}end=values.length;if(skip+skipCount<values.length){end=skip+skipCount;}sliced=values.slice(skip,end);_context.next=11;return client.query({query:query.apply(void 0,_toConsumableArray(vars).concat([sliced])),fetchPolicy:\"network-only\"});case 11:result=_context.sent;fetchedData=_objectSpread(_objectSpread({},fetchedData),result.data);if(Object.keys(result.data).length<skipCount||skip+skipCount>values.length){allFound=true;}else{skip+=skipCount;}_context.next=5;break;case 16:return _context.abrupt(\"return\",fetchedData);case 19:_context.prev=19;_context.t0=_context[\"catch\"](4);console.log(_context.t0);return _context.abrupt(\"return\",undefined);case 23:case\"end\":return _context.stop();}}},_callee,null,[[4,19]]);}));return _splitQuery.apply(this,arguments);}export function useDeltaTimestamps(){var utcCurrentTime=dayjs();var t1=utcCurrentTime.subtract(1,\"day\").startOf(\"minute\").unix();var t2=utcCurrentTime.subtract(2,\"day\").startOf(\"minute\").unix();var tWeek=utcCurrentTime.subtract(1,\"week\").startOf(\"minute\").unix();return[t1,t2,tWeek];}","map":{"version":3,"names":["dayjs","splitQuery","query","client","vars","values","skipCount","fetchedData","allFound","skip","end","length","sliced","slice","fetchPolicy","result","data","Object","keys","console","log","undefined","useDeltaTimestamps","utcCurrentTime","t1","subtract","startOf","unix","t2","tWeek"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/utils/queries.ts"],"sourcesContent":["import { ApolloClient, NormalizedCacheObject } from \"@apollo/client\";\nimport dayjs from \"dayjs\";\n\n/**\n * Used to get large amounts of data when\n * @param query\n * @param localClient\n * @param vars - any variables that are passed in every query\n * @param values - the keys that are used as the values to map over if\n * @param skipCount - amount of entities to skip per query\n */\nexport async function splitQuery<Type>(\n  query: any,\n  client: ApolloClient<NormalizedCacheObject>,\n  vars: any[],\n  values: any[],\n  skipCount = 1000\n) {\n  let fetchedData = {};\n  let allFound = false;\n  let skip = 0;\n  try {\n    while (!allFound) {\n      let end = values.length;\n      if (skip + skipCount < values.length) {\n        end = skip + skipCount;\n      }\n      const sliced = values.slice(skip, end);\n      const result = await client.query<Type>({\n        query: query(...vars, sliced),\n        fetchPolicy: \"network-only\",\n      });\n      fetchedData = {\n        ...fetchedData,\n        ...result.data,\n      };\n      if (\n        Object.keys(result.data).length < skipCount ||\n        skip + skipCount > values.length\n      ) {\n        allFound = true;\n      } else {\n        skip += skipCount;\n      }\n    }\n    return fetchedData;\n  } catch (e) {\n    console.log(e);\n    return undefined;\n  }\n}\n\nexport function useDeltaTimestamps(): [number, number, number] {\n  const utcCurrentTime = dayjs();\n  const t1 = utcCurrentTime.subtract(1, \"day\").startOf(\"minute\").unix();\n  const t2 = utcCurrentTime.subtract(2, \"day\").startOf(\"minute\").unix();\n  const tWeek = utcCurrentTime.subtract(1, \"week\").startOf(\"minute\").unix();\n  return [t1, t2, tWeek];\n}\n"],"mappings":"orBACA,MAAOA,MAAK,KAAM,OAAO,CAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,eAAsBC,WAAU,2DAuC/B,2FAvCM,iBACLC,KAAU,CACVC,MAA2C,CAC3CC,IAAW,CACXC,MAAa,4LACbC,SAAS,+CAAG,IAAI,CAEZC,WAAW,CAAG,CAAC,CAAC,CAChBC,QAAQ,CAAG,KAAK,CAChBC,IAAI,CAAG,CAAC,2BAEFD,QAAQ,0BACVE,GAAG,CAAGL,MAAM,CAACM,MAAM,CACvB,GAAIF,IAAI,CAAGH,SAAS,CAAGD,MAAM,CAACM,MAAM,CAAE,CACpCD,GAAG,CAAGD,IAAI,CAAGH,SAAS,CACxB,CACMM,MAAM,CAAGP,MAAM,CAACQ,KAAK,CAACJ,IAAI,CAAEC,GAAG,CAAC,wBACjBP,OAAM,CAACD,KAAK,CAAO,CACtCA,KAAK,CAAEA,KAAK,iCAAIE,IAAI,UAAEQ,MAAM,GAAC,CAC7BE,WAAW,CAAE,cACf,CAAC,CAAC,SAHIC,MAAM,eAIZR,WAAW,gCACNA,WAAW,EACXQ,MAAM,CAACC,IAAI,CACf,CACD,GACEC,MAAM,CAACC,IAAI,CAACH,MAAM,CAACC,IAAI,CAAC,CAACL,MAAM,CAAGL,SAAS,EAC3CG,IAAI,CAAGH,SAAS,CAAGD,MAAM,CAACM,MAAM,CAChC,CACAH,QAAQ,CAAG,IAAI,CACjB,CAAC,IAAM,CACLC,IAAI,EAAIH,SAAS,CACnB,CAAC,8DAEIC,WAAW,4DAElBY,OAAO,CAACC,GAAG,aAAG,CAAC,gCACRC,SAAS,uEAEnB,6CAED,MAAO,SAASC,mBAAkB,EAA6B,CAC7D,GAAMC,eAAc,CAAGvB,KAAK,EAAE,CAC9B,GAAMwB,GAAE,CAAGD,cAAc,CAACE,QAAQ,CAAC,CAAC,CAAE,KAAK,CAAC,CAACC,OAAO,CAAC,QAAQ,CAAC,CAACC,IAAI,EAAE,CACrE,GAAMC,GAAE,CAAGL,cAAc,CAACE,QAAQ,CAAC,CAAC,CAAE,KAAK,CAAC,CAACC,OAAO,CAAC,QAAQ,CAAC,CAACC,IAAI,EAAE,CACrE,GAAME,MAAK,CAAGN,cAAc,CAACE,QAAQ,CAAC,CAAC,CAAE,MAAM,CAAC,CAACC,OAAO,CAAC,QAAQ,CAAC,CAACC,IAAI,EAAE,CACzE,MAAO,CAACH,EAAE,CAAEI,EAAE,CAAEC,KAAK,CAAC,CACxB"},"metadata":{},"sourceType":"module"}