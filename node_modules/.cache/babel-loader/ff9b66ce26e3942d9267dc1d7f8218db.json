{"ast":null,"code":"import _toConsumableArray from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { isPlainObject, dateTimestampInSeconds, SyncPromise, logger, isThenable, arrayify, getGlobalSingleton } from '@sentry/utils';\nimport { updateSession } from './session.js';\n\n/**\n * Default value for maximum number of breadcrumbs added to an event.\n */\nvar DEFAULT_MAX_BREADCRUMBS = 100;\n\n/**\n * Holds additional event information. {@link Scope.applyToEvent} will be\n * called by the client before an event will be sent.\n */\nvar Scope = /*#__PURE__*/function () {\n  /** Flag if notifying is happening. */\n\n  /** Callback for client to receive scope changes. */\n\n  /** Callback list that will be called after {@link applyToEvent}. */\n\n  /** Array of breadcrumbs. */\n\n  /** User */\n\n  /** Tags */\n\n  /** Extra */\n\n  /** Contexts */\n\n  /** Attachments */\n\n  /**\n   * A place to stash data which is needed at some point in the SDK's event processing pipeline but which shouldn't get\n   * sent to Sentry\n   */\n\n  /** Fingerprint */\n\n  /** Severity */\n  // eslint-disable-next-line deprecation/deprecation\n\n  /** Transaction Name */\n\n  /** Span */\n\n  /** Session */\n\n  /** Request Mode Session Status */\n\n  // NOTE: Any field which gets added here should get added not only to the constructor but also to the `clone` method.\n\n  function Scope() {\n    _classCallCheck(this, Scope);\n    this._notifyingListeners = false;\n    this._scopeListeners = [];\n    this._eventProcessors = [];\n    this._breadcrumbs = [];\n    this._attachments = [];\n    this._user = {};\n    this._tags = {};\n    this._extra = {};\n    this._contexts = {};\n    this._sdkProcessingMetadata = {};\n  }\n\n  /**\n   * Inherit values from the parent scope.\n   * @param scope to clone.\n   */\n  _createClass(Scope, [{\n    key: \"addScopeListener\",\n    value:\n    /**\n     * Add internal on change listener. Used for sub SDKs that need to store the scope.\n     * @hidden\n     */\n    function addScopeListener(callback) {\n      this._scopeListeners.push(callback);\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"addEventProcessor\",\n    value: function addEventProcessor(callback) {\n      this._eventProcessors.push(callback);\n      return this;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setUser\",\n    value: function setUser(user) {\n      this._user = user || {};\n      if (this._session) {\n        updateSession(this._session, {\n          user: user\n        });\n      }\n      this._notifyScopeListeners();\n      return this;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"getUser\",\n    value: function getUser() {\n      return this._user;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"getRequestSession\",\n    value: function getRequestSession() {\n      return this._requestSession;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setRequestSession\",\n    value: function setRequestSession(requestSession) {\n      this._requestSession = requestSession;\n      return this;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setTags\",\n    value: function setTags(tags) {\n      this._tags = _objectSpread(_objectSpread({}, this._tags), tags);\n      this._notifyScopeListeners();\n      return this;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setTag\",\n    value: function setTag(key, value) {\n      this._tags = _objectSpread(_objectSpread({}, this._tags), {}, _defineProperty({}, key, value));\n      this._notifyScopeListeners();\n      return this;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setExtras\",\n    value: function setExtras(extras) {\n      this._extra = _objectSpread(_objectSpread({}, this._extra), extras);\n      this._notifyScopeListeners();\n      return this;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setExtra\",\n    value: function setExtra(key, extra) {\n      this._extra = _objectSpread(_objectSpread({}, this._extra), {}, _defineProperty({}, key, extra));\n      this._notifyScopeListeners();\n      return this;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setFingerprint\",\n    value: function setFingerprint(fingerprint) {\n      this._fingerprint = fingerprint;\n      this._notifyScopeListeners();\n      return this;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setLevel\",\n    value: function setLevel(\n    // eslint-disable-next-line deprecation/deprecation\n    level) {\n      this._level = level;\n      this._notifyScopeListeners();\n      return this;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setTransactionName\",\n    value: function setTransactionName(name) {\n      this._transactionName = name;\n      this._notifyScopeListeners();\n      return this;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setContext\",\n    value: function setContext(key, context) {\n      if (context === null) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete this._contexts[key];\n      } else {\n        this._contexts[key] = context;\n      }\n      this._notifyScopeListeners();\n      return this;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setSpan\",\n    value: function setSpan(span) {\n      this._span = span;\n      this._notifyScopeListeners();\n      return this;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"getSpan\",\n    value: function getSpan() {\n      return this._span;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"getTransaction\",\n    value: function getTransaction() {\n      // Often, this span (if it exists at all) will be a transaction, but it's not guaranteed to be. Regardless, it will\n      // have a pointer to the currently-active transaction.\n      var span = this.getSpan();\n      return span && span.transaction;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"setSession\",\n    value: function setSession(session) {\n      if (!session) {\n        delete this._session;\n      } else {\n        this._session = session;\n      }\n      this._notifyScopeListeners();\n      return this;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"getSession\",\n    value: function getSession() {\n      return this._session;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"update\",\n    value: function update(captureContext) {\n      if (!captureContext) {\n        return this;\n      }\n      if (typeof captureContext === 'function') {\n        var updatedScope = captureContext(this);\n        return updatedScope instanceof Scope ? updatedScope : this;\n      }\n      if (captureContext instanceof Scope) {\n        this._tags = _objectSpread(_objectSpread({}, this._tags), captureContext._tags);\n        this._extra = _objectSpread(_objectSpread({}, this._extra), captureContext._extra);\n        this._contexts = _objectSpread(_objectSpread({}, this._contexts), captureContext._contexts);\n        if (captureContext._user && Object.keys(captureContext._user).length) {\n          this._user = captureContext._user;\n        }\n        if (captureContext._level) {\n          this._level = captureContext._level;\n        }\n        if (captureContext._fingerprint) {\n          this._fingerprint = captureContext._fingerprint;\n        }\n        if (captureContext._requestSession) {\n          this._requestSession = captureContext._requestSession;\n        }\n      } else if (isPlainObject(captureContext)) {\n        // eslint-disable-next-line no-param-reassign\n        captureContext = captureContext;\n        this._tags = _objectSpread(_objectSpread({}, this._tags), captureContext.tags);\n        this._extra = _objectSpread(_objectSpread({}, this._extra), captureContext.extra);\n        this._contexts = _objectSpread(_objectSpread({}, this._contexts), captureContext.contexts);\n        if (captureContext.user) {\n          this._user = captureContext.user;\n        }\n        if (captureContext.level) {\n          this._level = captureContext.level;\n        }\n        if (captureContext.fingerprint) {\n          this._fingerprint = captureContext.fingerprint;\n        }\n        if (captureContext.requestSession) {\n          this._requestSession = captureContext.requestSession;\n        }\n      }\n      return this;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this._breadcrumbs = [];\n      this._tags = {};\n      this._extra = {};\n      this._user = {};\n      this._contexts = {};\n      this._level = undefined;\n      this._transactionName = undefined;\n      this._fingerprint = undefined;\n      this._requestSession = undefined;\n      this._span = undefined;\n      this._session = undefined;\n      this._notifyScopeListeners();\n      this._attachments = [];\n      return this;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"addBreadcrumb\",\n    value: function addBreadcrumb(breadcrumb, maxBreadcrumbs) {\n      var maxCrumbs = typeof maxBreadcrumbs === 'number' ? maxBreadcrumbs : DEFAULT_MAX_BREADCRUMBS;\n\n      // No data has been changed, so don't notify scope listeners\n      if (maxCrumbs <= 0) {\n        return this;\n      }\n      var mergedBreadcrumb = _objectSpread({\n        timestamp: dateTimestampInSeconds()\n      }, breadcrumb);\n      this._breadcrumbs = [].concat(_toConsumableArray(this._breadcrumbs), [mergedBreadcrumb]).slice(-maxCrumbs);\n      this._notifyScopeListeners();\n      return this;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"clearBreadcrumbs\",\n    value: function clearBreadcrumbs() {\n      this._breadcrumbs = [];\n      this._notifyScopeListeners();\n      return this;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"addAttachment\",\n    value: function addAttachment(attachment) {\n      this._attachments.push(attachment);\n      return this;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"getAttachments\",\n    value: function getAttachments() {\n      return this._attachments;\n    }\n\n    /**\n     * @inheritDoc\n     */\n  }, {\n    key: \"clearAttachments\",\n    value: function clearAttachments() {\n      this._attachments = [];\n      return this;\n    }\n\n    /**\n     * Applies data from the scope to the event and runs all event processors on it.\n     *\n     * @param event Event\n     * @param hint Object containing additional information about the original exception, for use by the event processors.\n     * @hidden\n     */\n  }, {\n    key: \"applyToEvent\",\n    value: function applyToEvent(event) {\n      var hint = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (this._extra && Object.keys(this._extra).length) {\n        event.extra = _objectSpread(_objectSpread({}, this._extra), event.extra);\n      }\n      if (this._tags && Object.keys(this._tags).length) {\n        event.tags = _objectSpread(_objectSpread({}, this._tags), event.tags);\n      }\n      if (this._user && Object.keys(this._user).length) {\n        event.user = _objectSpread(_objectSpread({}, this._user), event.user);\n      }\n      if (this._contexts && Object.keys(this._contexts).length) {\n        event.contexts = _objectSpread(_objectSpread({}, this._contexts), event.contexts);\n      }\n      if (this._level) {\n        event.level = this._level;\n      }\n      if (this._transactionName) {\n        event.transaction = this._transactionName;\n      }\n\n      // We want to set the trace context for normal events only if there isn't already\n      // a trace context on the event. There is a product feature in place where we link\n      // errors with transaction and it relies on that.\n      if (this._span) {\n        event.contexts = _objectSpread({\n          trace: this._span.getTraceContext()\n        }, event.contexts);\n        var transactionName = this._span.transaction && this._span.transaction.name;\n        if (transactionName) {\n          event.tags = _objectSpread({\n            transaction: transactionName\n          }, event.tags);\n        }\n      }\n      this._applyFingerprint(event);\n      event.breadcrumbs = [].concat(_toConsumableArray(event.breadcrumbs || []), _toConsumableArray(this._breadcrumbs));\n      event.breadcrumbs = event.breadcrumbs.length > 0 ? event.breadcrumbs : undefined;\n      event.sdkProcessingMetadata = _objectSpread(_objectSpread({}, event.sdkProcessingMetadata), this._sdkProcessingMetadata);\n      return this._notifyEventProcessors([].concat(_toConsumableArray(getGlobalEventProcessors()), _toConsumableArray(this._eventProcessors)), event, hint);\n    }\n\n    /**\n     * Add data which will be accessible during event processing but won't get sent to Sentry\n     */\n  }, {\n    key: \"setSDKProcessingMetadata\",\n    value: function setSDKProcessingMetadata(newData) {\n      this._sdkProcessingMetadata = _objectSpread(_objectSpread({}, this._sdkProcessingMetadata), newData);\n      return this;\n    }\n\n    /**\n     * This will be called after {@link applyToEvent} is finished.\n     */\n  }, {\n    key: \"_notifyEventProcessors\",\n    value: function _notifyEventProcessors(processors, event, hint) {\n      var _this = this;\n      var index = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n      return new SyncPromise(function (resolve, reject) {\n        var processor = processors[index];\n        if (event === null || typeof processor !== 'function') {\n          resolve(event);\n        } else {\n          var result = processor(_objectSpread({}, event), hint);\n          (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && processor.id && result === null && logger.log(\"Event processor \\\"\".concat(processor.id, \"\\\" dropped event\"));\n          if (isThenable(result)) {\n            void result.then(function (final) {\n              return _this._notifyEventProcessors(processors, final, hint, index + 1).then(resolve);\n            }).then(null, reject);\n          } else {\n            void _this._notifyEventProcessors(processors, result, hint, index + 1).then(resolve).then(null, reject);\n          }\n        }\n      });\n    }\n\n    /**\n     * This will be called on every set call.\n     */\n  }, {\n    key: \"_notifyScopeListeners\",\n    value: function _notifyScopeListeners() {\n      var _this2 = this;\n      // We need this check for this._notifyingListeners to be able to work on scope during updates\n      // If this check is not here we'll produce endless recursion when something is done with the scope\n      // during the callback.\n      if (!this._notifyingListeners) {\n        this._notifyingListeners = true;\n        this._scopeListeners.forEach(function (callback) {\n          callback(_this2);\n        });\n        this._notifyingListeners = false;\n      }\n    }\n\n    /**\n     * Applies fingerprint from the scope to the event if there's one,\n     * uses message if there's one instead or get rid of empty fingerprint\n     */\n  }, {\n    key: \"_applyFingerprint\",\n    value: function _applyFingerprint(event) {\n      // Make sure it's an array first and we actually have something in place\n      event.fingerprint = event.fingerprint ? arrayify(event.fingerprint) : [];\n\n      // If we have something on the scope, then merge it with event\n      if (this._fingerprint) {\n        event.fingerprint = event.fingerprint.concat(this._fingerprint);\n      }\n\n      // If we have no data at all, remove empty array default\n      if (event.fingerprint && !event.fingerprint.length) {\n        delete event.fingerprint;\n      }\n    }\n  }], [{\n    key: \"clone\",\n    value: function clone(scope) {\n      var newScope = new Scope();\n      if (scope) {\n        newScope._breadcrumbs = _toConsumableArray(scope._breadcrumbs);\n        newScope._tags = _objectSpread({}, scope._tags);\n        newScope._extra = _objectSpread({}, scope._extra);\n        newScope._contexts = _objectSpread({}, scope._contexts);\n        newScope._user = scope._user;\n        newScope._level = scope._level;\n        newScope._span = scope._span;\n        newScope._session = scope._session;\n        newScope._transactionName = scope._transactionName;\n        newScope._fingerprint = scope._fingerprint;\n        newScope._eventProcessors = _toConsumableArray(scope._eventProcessors);\n        newScope._requestSession = scope._requestSession;\n        newScope._attachments = _toConsumableArray(scope._attachments);\n        newScope._sdkProcessingMetadata = _objectSpread({}, scope._sdkProcessingMetadata);\n      }\n      return newScope;\n    }\n  }]);\n  return Scope;\n}();\n/**\n * Returns the global event processors.\n */\nfunction getGlobalEventProcessors() {\n  return getGlobalSingleton('globalEventProcessors', function () {\n    return [];\n  });\n}\n\n/**\n * Add a EventProcessor to be kept globally.\n * @param callback EventProcessor to add\n */\nfunction addGlobalEventProcessor(callback) {\n  getGlobalEventProcessors().push(callback);\n}\nexport { Scope, addGlobalEventProcessor };","map":{"version":3,"sources":["../../src/scope.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable max-lines */\nimport {\n  Attachment,\n  Breadcrumb,\n  CaptureContext,\n  Context,\n  Contexts,\n  Event,\n  EventHint,\n  EventProcessor,\n  Extra,\n  Extras,\n  Primitive,\n  RequestSession,\n  Scope as ScopeInterface,\n  ScopeContext,\n  Session,\n  Severity,\n  SeverityLevel,\n  Span,\n  Transaction,\n  User,\n} from '@sentry/types';\nimport {\n  arrayify,\n  dateTimestampInSeconds,\n  getGlobalSingleton,\n  isPlainObject,\n  isThenable,\n  logger,\n  SyncPromise,\n} from '@sentry/utils';\n\nimport { updateSession } from './session';\n\n/**\n * Default value for maximum number of breadcrumbs added to an event.\n */\nconst DEFAULT_MAX_BREADCRUMBS = 100;\n\n/**\n * Holds additional event information. {@link Scope.applyToEvent} will be\n * called by the client before an event will be sent.\n */\nexport class Scope implements ScopeInterface {\n  /** Flag if notifying is happening. */\n  protected _notifyingListeners: boolean;\n\n  /** Callback for client to receive scope changes. */\n  protected _scopeListeners: Array<(scope: Scope) => void>;\n\n  /** Callback list that will be called after {@link applyToEvent}. */\n  protected _eventProcessors: EventProcessor[];\n\n  /** Array of breadcrumbs. */\n  protected _breadcrumbs: Breadcrumb[];\n\n  /** User */\n  protected _user: User;\n\n  /** Tags */\n  protected _tags: { [key: string]: Primitive };\n\n  /** Extra */\n  protected _extra: Extras;\n\n  /** Contexts */\n  protected _contexts: Contexts;\n\n  /** Attachments */\n  protected _attachments: Attachment[];\n\n  /**\n   * A place to stash data which is needed at some point in the SDK's event processing pipeline but which shouldn't get\n   * sent to Sentry\n   */\n  protected _sdkProcessingMetadata: { [key: string]: unknown };\n\n  /** Fingerprint */\n  protected _fingerprint?: string[];\n\n  /** Severity */\n  // eslint-disable-next-line deprecation/deprecation\n  protected _level?: Severity | SeverityLevel;\n\n  /** Transaction Name */\n  protected _transactionName?: string;\n\n  /** Span */\n  protected _span?: Span;\n\n  /** Session */\n  protected _session?: Session;\n\n  /** Request Mode Session Status */\n  protected _requestSession?: RequestSession;\n\n  // NOTE: Any field which gets added here should get added not only to the constructor but also to the `clone` method.\n\n  public constructor() {\n    this._notifyingListeners = false;\n    this._scopeListeners = [];\n    this._eventProcessors = [];\n    this._breadcrumbs = [];\n    this._attachments = [];\n    this._user = {};\n    this._tags = {};\n    this._extra = {};\n    this._contexts = {};\n    this._sdkProcessingMetadata = {};\n  }\n\n  /**\n   * Inherit values from the parent scope.\n   * @param scope to clone.\n   */\n  public static clone(scope?: Scope): Scope {\n    const newScope = new Scope();\n    if (scope) {\n      newScope._breadcrumbs = [...scope._breadcrumbs];\n      newScope._tags = { ...scope._tags };\n      newScope._extra = { ...scope._extra };\n      newScope._contexts = { ...scope._contexts };\n      newScope._user = scope._user;\n      newScope._level = scope._level;\n      newScope._span = scope._span;\n      newScope._session = scope._session;\n      newScope._transactionName = scope._transactionName;\n      newScope._fingerprint = scope._fingerprint;\n      newScope._eventProcessors = [...scope._eventProcessors];\n      newScope._requestSession = scope._requestSession;\n      newScope._attachments = [...scope._attachments];\n      newScope._sdkProcessingMetadata = { ...scope._sdkProcessingMetadata };\n    }\n    return newScope;\n  }\n\n  /**\n   * Add internal on change listener. Used for sub SDKs that need to store the scope.\n   * @hidden\n   */\n  public addScopeListener(callback: (scope: Scope) => void): void {\n    this._scopeListeners.push(callback);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addEventProcessor(callback: EventProcessor): this {\n    this._eventProcessors.push(callback);\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setUser(user: User | null): this {\n    this._user = user || {};\n    if (this._session) {\n      updateSession(this._session, { user });\n    }\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getUser(): User | undefined {\n    return this._user;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getRequestSession(): RequestSession | undefined {\n    return this._requestSession;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setRequestSession(requestSession?: RequestSession): this {\n    this._requestSession = requestSession;\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTags(tags: { [key: string]: Primitive }): this {\n    this._tags = {\n      ...this._tags,\n      ...tags,\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTag(key: string, value: Primitive): this {\n    this._tags = { ...this._tags, [key]: value };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtras(extras: Extras): this {\n    this._extra = {\n      ...this._extra,\n      ...extras,\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtra(key: string, extra: Extra): this {\n    this._extra = { ...this._extra, [key]: extra };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setFingerprint(fingerprint: string[]): this {\n    this._fingerprint = fingerprint;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setLevel(\n    // eslint-disable-next-line deprecation/deprecation\n    level: Severity | SeverityLevel,\n  ): this {\n    this._level = level;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTransactionName(name?: string): this {\n    this._transactionName = name;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setContext(key: string, context: Context | null): this {\n    if (context === null) {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this._contexts[key];\n    } else {\n      this._contexts[key] = context;\n    }\n\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setSpan(span?: Span): this {\n    this._span = span;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getSpan(): Span | undefined {\n    return this._span;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getTransaction(): Transaction | undefined {\n    // Often, this span (if it exists at all) will be a transaction, but it's not guaranteed to be. Regardless, it will\n    // have a pointer to the currently-active transaction.\n    const span = this.getSpan();\n    return span && span.transaction;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setSession(session?: Session): this {\n    if (!session) {\n      delete this._session;\n    } else {\n      this._session = session;\n    }\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getSession(): Session | undefined {\n    return this._session;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public update(captureContext?: CaptureContext): this {\n    if (!captureContext) {\n      return this;\n    }\n\n    if (typeof captureContext === 'function') {\n      const updatedScope = (captureContext as <T>(scope: T) => T)(this);\n      return updatedScope instanceof Scope ? updatedScope : this;\n    }\n\n    if (captureContext instanceof Scope) {\n      this._tags = { ...this._tags, ...captureContext._tags };\n      this._extra = { ...this._extra, ...captureContext._extra };\n      this._contexts = { ...this._contexts, ...captureContext._contexts };\n      if (captureContext._user && Object.keys(captureContext._user).length) {\n        this._user = captureContext._user;\n      }\n      if (captureContext._level) {\n        this._level = captureContext._level;\n      }\n      if (captureContext._fingerprint) {\n        this._fingerprint = captureContext._fingerprint;\n      }\n      if (captureContext._requestSession) {\n        this._requestSession = captureContext._requestSession;\n      }\n    } else if (isPlainObject(captureContext)) {\n      // eslint-disable-next-line no-param-reassign\n      captureContext = captureContext as ScopeContext;\n      this._tags = { ...this._tags, ...captureContext.tags };\n      this._extra = { ...this._extra, ...captureContext.extra };\n      this._contexts = { ...this._contexts, ...captureContext.contexts };\n      if (captureContext.user) {\n        this._user = captureContext.user;\n      }\n      if (captureContext.level) {\n        this._level = captureContext.level;\n      }\n      if (captureContext.fingerprint) {\n        this._fingerprint = captureContext.fingerprint;\n      }\n      if (captureContext.requestSession) {\n        this._requestSession = captureContext.requestSession;\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public clear(): this {\n    this._breadcrumbs = [];\n    this._tags = {};\n    this._extra = {};\n    this._user = {};\n    this._contexts = {};\n    this._level = undefined;\n    this._transactionName = undefined;\n    this._fingerprint = undefined;\n    this._requestSession = undefined;\n    this._span = undefined;\n    this._session = undefined;\n    this._notifyScopeListeners();\n    this._attachments = [];\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addBreadcrumb(breadcrumb: Breadcrumb, maxBreadcrumbs?: number): this {\n    const maxCrumbs = typeof maxBreadcrumbs === 'number' ? maxBreadcrumbs : DEFAULT_MAX_BREADCRUMBS;\n\n    // No data has been changed, so don't notify scope listeners\n    if (maxCrumbs <= 0) {\n      return this;\n    }\n\n    const mergedBreadcrumb = {\n      timestamp: dateTimestampInSeconds(),\n      ...breadcrumb,\n    };\n    this._breadcrumbs = [...this._breadcrumbs, mergedBreadcrumb].slice(-maxCrumbs);\n    this._notifyScopeListeners();\n\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public clearBreadcrumbs(): this {\n    this._breadcrumbs = [];\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addAttachment(attachment: Attachment): this {\n    this._attachments.push(attachment);\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getAttachments(): Attachment[] {\n    return this._attachments;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public clearAttachments(): this {\n    this._attachments = [];\n    return this;\n  }\n\n  /**\n   * Applies data from the scope to the event and runs all event processors on it.\n   *\n   * @param event Event\n   * @param hint Object containing additional information about the original exception, for use by the event processors.\n   * @hidden\n   */\n  public applyToEvent(event: Event, hint: EventHint = {}): PromiseLike<Event | null> {\n    if (this._extra && Object.keys(this._extra).length) {\n      event.extra = { ...this._extra, ...event.extra };\n    }\n    if (this._tags && Object.keys(this._tags).length) {\n      event.tags = { ...this._tags, ...event.tags };\n    }\n    if (this._user && Object.keys(this._user).length) {\n      event.user = { ...this._user, ...event.user };\n    }\n    if (this._contexts && Object.keys(this._contexts).length) {\n      event.contexts = { ...this._contexts, ...event.contexts };\n    }\n    if (this._level) {\n      event.level = this._level;\n    }\n    if (this._transactionName) {\n      event.transaction = this._transactionName;\n    }\n\n    // We want to set the trace context for normal events only if there isn't already\n    // a trace context on the event. There is a product feature in place where we link\n    // errors with transaction and it relies on that.\n    if (this._span) {\n      event.contexts = { trace: this._span.getTraceContext(), ...event.contexts };\n      const transactionName = this._span.transaction && this._span.transaction.name;\n      if (transactionName) {\n        event.tags = { transaction: transactionName, ...event.tags };\n      }\n    }\n\n    this._applyFingerprint(event);\n\n    event.breadcrumbs = [...(event.breadcrumbs || []), ...this._breadcrumbs];\n    event.breadcrumbs = event.breadcrumbs.length > 0 ? event.breadcrumbs : undefined;\n\n    event.sdkProcessingMetadata = { ...event.sdkProcessingMetadata, ...this._sdkProcessingMetadata };\n\n    return this._notifyEventProcessors([...getGlobalEventProcessors(), ...this._eventProcessors], event, hint);\n  }\n\n  /**\n   * Add data which will be accessible during event processing but won't get sent to Sentry\n   */\n  public setSDKProcessingMetadata(newData: { [key: string]: unknown }): this {\n    this._sdkProcessingMetadata = { ...this._sdkProcessingMetadata, ...newData };\n\n    return this;\n  }\n\n  /**\n   * This will be called after {@link applyToEvent} is finished.\n   */\n  protected _notifyEventProcessors(\n    processors: EventProcessor[],\n    event: Event | null,\n    hint: EventHint,\n    index: number = 0,\n  ): PromiseLike<Event | null> {\n    return new SyncPromise<Event | null>((resolve, reject) => {\n      const processor = processors[index];\n      if (event === null || typeof processor !== 'function') {\n        resolve(event);\n      } else {\n        const result = processor({ ...event }, hint) as Event | null;\n\n        __DEBUG_BUILD__ &&\n          processor.id &&\n          result === null &&\n          logger.log(`Event processor \"${processor.id}\" dropped event`);\n\n        if (isThenable(result)) {\n          void result\n            .then(final => this._notifyEventProcessors(processors, final, hint, index + 1).then(resolve))\n            .then(null, reject);\n        } else {\n          void this._notifyEventProcessors(processors, result, hint, index + 1)\n            .then(resolve)\n            .then(null, reject);\n        }\n      }\n    });\n  }\n\n  /**\n   * This will be called on every set call.\n   */\n  protected _notifyScopeListeners(): void {\n    // We need this check for this._notifyingListeners to be able to work on scope during updates\n    // If this check is not here we'll produce endless recursion when something is done with the scope\n    // during the callback.\n    if (!this._notifyingListeners) {\n      this._notifyingListeners = true;\n      this._scopeListeners.forEach(callback => {\n        callback(this);\n      });\n      this._notifyingListeners = false;\n    }\n  }\n\n  /**\n   * Applies fingerprint from the scope to the event if there's one,\n   * uses message if there's one instead or get rid of empty fingerprint\n   */\n  private _applyFingerprint(event: Event): void {\n    // Make sure it's an array first and we actually have something in place\n    event.fingerprint = event.fingerprint ? arrayify(event.fingerprint) : [];\n\n    // If we have something on the scope, then merge it with event\n    if (this._fingerprint) {\n      event.fingerprint = event.fingerprint.concat(this._fingerprint);\n    }\n\n    // If we have no data at all, remove empty array default\n    if (event.fingerprint && !event.fingerprint.length) {\n      delete event.fingerprint;\n    }\n  }\n}\n\n/**\n * Returns the global event processors.\n */\nfunction getGlobalEventProcessors(): EventProcessor[] {\n  return getGlobalSingleton<EventProcessor[]>('globalEventProcessors', () => []);\n}\n\n/**\n * Add a EventProcessor to be kept globally.\n * @param callback EventProcessor to add\n */\nexport function addGlobalEventProcessor(callback: EventProcessor): void {\n  getGlobalEventProcessors().push(callback);\n}\n"]},"metadata":{},"sourceType":"module"}