{"ast":null,"code":"var _s = $RefreshSig$();\nimport { Trans } from \"@lingui/react\";\nimport { useWeb3React } from '@web3-react/core';\nimport useENS from 'hooks/useENS';\nimport { useSwapCallArguments } from 'hooks/useSwapCallArguments';\nimport { useMemo } from 'react';\nimport useSendSwapTransaction from './useSendSwapTransaction';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport let SwapCallbackState;\n(function (SwapCallbackState) {\n  SwapCallbackState[SwapCallbackState[\"INVALID\"] = 0] = \"INVALID\";\n  SwapCallbackState[SwapCallbackState[\"LOADING\"] = 1] = \"LOADING\";\n  SwapCallbackState[SwapCallbackState[\"VALID\"] = 2] = \"VALID\";\n})(SwapCallbackState || (SwapCallbackState = {}));\n// returns a function that will execute a swap, if the parameters are all valid\n// and the user has approved the slippage adjusted input amount for the trade\nexport function useSwapCallback(_ref) {\n  _s();\n  let {\n    trade,\n    allowedSlippage,\n    recipientAddressOrName,\n    signatureData,\n    deadline,\n    feeOptions\n  } = _ref;\n  const {\n    account,\n    chainId,\n    provider\n  } = useWeb3React();\n  console.log(\"abc\", {\n    trade,\n    allowedSlippage,\n    recipientAddressOrName,\n    signatureData,\n    deadline,\n    feeOptions\n  });\n  const swapCalls = useSwapCallArguments(trade, allowedSlippage, recipientAddressOrName, signatureData, deadline, feeOptions);\n  const {\n    callback\n  } = useSendSwapTransaction(account, chainId, provider, trade, swapCalls);\n  const {\n    address: recipientAddress\n  } = useENS(recipientAddressOrName);\n  const recipient = recipientAddressOrName === null ? account : recipientAddress;\n  return useMemo(() => {\n    if (!trade || !provider || !account || !chainId || !callback) {\n      return {\n        state: SwapCallbackState.INVALID,\n        error: /*#__PURE__*/_jsxDEV(Trans, {\n          id: \"Missing dependencies\"\n        }, void 0, false, void 0, this)\n      };\n    }\n    if (!recipient) {\n      if (recipientAddressOrName !== null) {\n        return {\n          state: SwapCallbackState.INVALID,\n          error: /*#__PURE__*/_jsxDEV(Trans, {\n            id: \"Invalid recipient\"\n          }, void 0, false, void 0, this)\n        };\n      } else {\n        return {\n          state: SwapCallbackState.LOADING\n        };\n      }\n    }\n    return {\n      state: SwapCallbackState.VALID,\n      callback: async () => callback()\n    };\n  }, [trade, provider, account, chainId, callback, recipient, recipientAddressOrName]);\n}\n_s(useSwapCallback, \"QWWtjRMjNEExxkXx/EkRNtROhCk=\", false, function () {\n  return [useWeb3React, useSwapCallArguments, useSendSwapTransaction, useENS];\n});","map":{"version":3,"names":["useWeb3React","useENS","useSwapCallArguments","useMemo","useSendSwapTransaction","SwapCallbackState","useSwapCallback","trade","allowedSlippage","recipientAddressOrName","signatureData","deadline","feeOptions","account","chainId","provider","console","log","swapCalls","callback","address","recipientAddress","recipient","state","INVALID","error","LOADING","VALID"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/lib/hooks/swap/useSwapCallback.tsx"],"sourcesContent":["// eslint-disable-next-line no-restricted-imports\nimport { BigNumber } from '@ethersproject/bignumber'\nimport type { TransactionResponse } from '@ethersproject/providers'\nimport { Trans } from '@lingui/macro'\nimport { Trade } from '@uniswap/router-sdk'\nimport { Currency, Percent, TradeType } from '@uniswap/sdk-core'\nimport { FeeOptions } from '@uniswap/v3-sdk'\nimport { useWeb3React } from '@web3-react/core'\nimport useENS from 'hooks/useENS'\nimport { SignatureData } from 'hooks/useERC20Permit'\nimport { useSwapCallArguments } from 'hooks/useSwapCallArguments'\nimport { ReactNode, useMemo } from 'react'\n\nimport useSendSwapTransaction from './useSendSwapTransaction'\n\nexport enum SwapCallbackState {\n  INVALID,\n  LOADING,\n  VALID,\n}\n\ninterface UseSwapCallbackReturns {\n  state: SwapCallbackState\n  callback?: () => Promise<TransactionResponse>\n  error?: ReactNode\n}\ninterface UseSwapCallbackArgs {\n  trade: Trade<Currency, Currency, TradeType> | undefined // trade to execute, required\n  allowedSlippage: Percent // in bips\n  recipientAddressOrName: string | null | undefined // the ENS name or address of the recipient of the trade, or null if swap should be returned to sender\n  signatureData: SignatureData | null | undefined\n  deadline: BigNumber | undefined\n  feeOptions?: FeeOptions\n}\n\n// returns a function that will execute a swap, if the parameters are all valid\n// and the user has approved the slippage adjusted input amount for the trade\nexport function useSwapCallback({\n  trade,\n  allowedSlippage,\n  recipientAddressOrName,\n  signatureData,\n  deadline,\n  feeOptions,\n}: UseSwapCallbackArgs): UseSwapCallbackReturns {\n  const { account, chainId, provider } = useWeb3React()\nconsole.log(\"abc\",{ trade,\n    allowedSlippage,\n    recipientAddressOrName,\n    signatureData,\n    deadline,\n    feeOptions});\n  const swapCalls = useSwapCallArguments(\n    trade,\n    allowedSlippage,\n    recipientAddressOrName,\n    signatureData,\n    deadline,\n    feeOptions\n  )\n  const { callback } = useSendSwapTransaction(account, chainId, provider, trade, swapCalls)\n\n  const { address: recipientAddress } = useENS(recipientAddressOrName)\n  const recipient = recipientAddressOrName === null ? account : recipientAddress\n\n  return useMemo(() => {\n    if (!trade || !provider || !account || !chainId || !callback) {\n      return { state: SwapCallbackState.INVALID, error: <Trans>Missing dependencies</Trans> }\n    }\n    if (!recipient) {\n      if (recipientAddressOrName !== null) {\n        return { state: SwapCallbackState.INVALID, error: <Trans>Invalid recipient</Trans> }\n      } else {\n        return { state: SwapCallbackState.LOADING }\n      }\n    }\n\n    return {\n      state: SwapCallbackState.VALID,\n      callback: async () => callback(),\n    }\n  }, [trade, provider, account, chainId, callback, recipient, recipientAddressOrName])\n}\n"],"mappings":";;AAOA,SAASA,YAAY,QAAQ,kBAAkB;AAC/C,OAAOC,MAAM,MAAM,cAAc;AAEjC,SAASC,oBAAoB,QAAQ,4BAA4B;AACjE,SAAoBC,OAAO,QAAQ,OAAO;AAE1C,OAAOC,sBAAsB,MAAM,0BAA0B;AAAA;AAE7D,WAAYC,iBAAiB;AAI5B,WAJWA,iBAAiB;EAAjBA,iBAAiB,CAAjBA,iBAAiB;EAAjBA,iBAAiB,CAAjBA,iBAAiB;EAAjBA,iBAAiB,CAAjBA,iBAAiB;AAAA,GAAjBA,iBAAiB,KAAjBA,iBAAiB;AAoB7B;AACA;AACA,OAAO,SAASC,eAAe,OAOiB;EAAA;EAAA,IAPhB;IAC9BC,KAAK;IACLC,eAAe;IACfC,sBAAsB;IACtBC,aAAa;IACbC,QAAQ;IACRC;EACmB,CAAC;EACpB,MAAM;IAAEC,OAAO;IAAEC,OAAO;IAAEC;EAAS,CAAC,GAAGf,YAAY,EAAE;EACvDgB,OAAO,CAACC,GAAG,CAAC,KAAK,EAAC;IAAEV,KAAK;IACrBC,eAAe;IACfC,sBAAsB;IACtBC,aAAa;IACbC,QAAQ;IACRC;EAAU,CAAC,CAAC;EACd,MAAMM,SAAS,GAAGhB,oBAAoB,CACpCK,KAAK,EACLC,eAAe,EACfC,sBAAsB,EACtBC,aAAa,EACbC,QAAQ,EACRC,UAAU,CACX;EACD,MAAM;IAAEO;EAAS,CAAC,GAAGf,sBAAsB,CAACS,OAAO,EAAEC,OAAO,EAAEC,QAAQ,EAAER,KAAK,EAAEW,SAAS,CAAC;EAEzF,MAAM;IAAEE,OAAO,EAAEC;EAAiB,CAAC,GAAGpB,MAAM,CAACQ,sBAAsB,CAAC;EACpE,MAAMa,SAAS,GAAGb,sBAAsB,KAAK,IAAI,GAAGI,OAAO,GAAGQ,gBAAgB;EAE9E,OAAOlB,OAAO,CAAC,MAAM;IACnB,IAAI,CAACI,KAAK,IAAI,CAACQ,QAAQ,IAAI,CAACF,OAAO,IAAI,CAACC,OAAO,IAAI,CAACK,QAAQ,EAAE;MAC5D,OAAO;QAAEI,KAAK,EAAElB,iBAAiB,CAACmB,OAAO;QAAEC,KAAK,eAAE;UAAA;QAAA;MAAoC,CAAC;IACzF;IACA,IAAI,CAACH,SAAS,EAAE;MACd,IAAIb,sBAAsB,KAAK,IAAI,EAAE;QACnC,OAAO;UAAEc,KAAK,EAAElB,iBAAiB,CAACmB,OAAO;UAAEC,KAAK,eAAE;YAAA;UAAA;QAAiC,CAAC;MACtF,CAAC,MAAM;QACL,OAAO;UAAEF,KAAK,EAAElB,iBAAiB,CAACqB;QAAQ,CAAC;MAC7C;IACF;IAEA,OAAO;MACLH,KAAK,EAAElB,iBAAiB,CAACsB,KAAK;MAC9BR,QAAQ,EAAE,YAAYA,QAAQ;IAChC,CAAC;EACH,CAAC,EAAE,CAACZ,KAAK,EAAEQ,QAAQ,EAAEF,OAAO,EAAEC,OAAO,EAAEK,QAAQ,EAAEG,SAAS,EAAEb,sBAAsB,CAAC,CAAC;AACtF;AAAC,GA7CeH,eAAe;EAAA,QAQUN,YAAY,EAOjCE,oBAAoB,EAQjBE,sBAAsB,EAELH,MAAM;AAAA"},"metadata":{},"sourceType":"module"}