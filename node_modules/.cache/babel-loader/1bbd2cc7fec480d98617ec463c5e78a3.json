{"ast":null,"code":"import _createForOfIteratorHelper from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _createClass from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _inherits from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { Route } from 'workbox-routing/Route.js';\nimport { generateURLVariations } from './utils/generateURLVariations.js';\nimport './_version.js';\n/**\n * A subclass of [Route]{@link module:workbox-routing.Route} that takes a\n * [PrecacheController]{@link module:workbox-precaching.PrecacheController}\n * instance and uses it to match incoming requests and handle fetching\n * responses from the precache.\n *\n * @memberof module:workbox-precaching\n * @extends module:workbox-routing.Route\n */\nvar PrecacheRoute = /*#__PURE__*/function (_Route) {\n  _inherits(PrecacheRoute, _Route);\n  var _super = _createSuper(PrecacheRoute);\n  /**\n   * @param {PrecacheController} precacheController A `PrecacheController`\n   * instance used to both match requests and respond to fetch events.\n   * @param {Object} [options] Options to control how requests are matched\n   * against the list of precached URLs.\n   * @param {string} [options.directoryIndex=index.html] The `directoryIndex` will\n   * check cache entries for a URLs ending with '/' to see if there is a hit when\n   * appending the `directoryIndex` value.\n   * @param {Array<RegExp>} [options.ignoreURLParametersMatching=[/^utm_/, /^fbclid$/]] An\n   * array of regex's to remove search params when looking for a cache match.\n   * @param {boolean} [options.cleanURLs=true] The `cleanURLs` option will\n   * check the cache for the URL with a `.html` added to the end of the end.\n   * @param {module:workbox-precaching~urlManipulation} [options.urlManipulation]\n   * This is a function that should take a URL and return an array of\n   * alternative URLs that should be checked for precache matches.\n   */\n  function PrecacheRoute(precacheController, options) {\n    _classCallCheck(this, PrecacheRoute);\n    var match = function match(_ref) {\n      var request = _ref.request;\n      var urlsToCacheKeys = precacheController.getURLsToCacheKeys();\n      var _iterator = _createForOfIteratorHelper(generateURLVariations(request.url, options)),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var possibleURL = _step.value;\n          var cacheKey = urlsToCacheKeys.get(possibleURL);\n          if (cacheKey) {\n            return {\n              cacheKey: cacheKey\n            };\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      if (process.env.NODE_ENV !== 'production') {\n        logger.debug(\"Precaching did not find a match for \" + getFriendlyURL(request.url));\n      }\n      return;\n    };\n    return _super.call(this, match, precacheController.strategy);\n  }\n  return _createClass(PrecacheRoute);\n}(Route);\nexport { PrecacheRoute };","map":{"version":3,"names":["logger","getFriendlyURL","Route","generateURLVariations","PrecacheRoute","precacheController","options","match","request","urlsToCacheKeys","getURLsToCacheKeys","url","possibleURL","cacheKey","get","process","env","NODE_ENV","debug","strategy"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/workbox-precaching/PrecacheRoute.js"],"sourcesContent":["/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { Route } from 'workbox-routing/Route.js';\nimport { generateURLVariations } from './utils/generateURLVariations.js';\nimport './_version.js';\n/**\n * A subclass of [Route]{@link module:workbox-routing.Route} that takes a\n * [PrecacheController]{@link module:workbox-precaching.PrecacheController}\n * instance and uses it to match incoming requests and handle fetching\n * responses from the precache.\n *\n * @memberof module:workbox-precaching\n * @extends module:workbox-routing.Route\n */\nclass PrecacheRoute extends Route {\n    /**\n     * @param {PrecacheController} precacheController A `PrecacheController`\n     * instance used to both match requests and respond to fetch events.\n     * @param {Object} [options] Options to control how requests are matched\n     * against the list of precached URLs.\n     * @param {string} [options.directoryIndex=index.html] The `directoryIndex` will\n     * check cache entries for a URLs ending with '/' to see if there is a hit when\n     * appending the `directoryIndex` value.\n     * @param {Array<RegExp>} [options.ignoreURLParametersMatching=[/^utm_/, /^fbclid$/]] An\n     * array of regex's to remove search params when looking for a cache match.\n     * @param {boolean} [options.cleanURLs=true] The `cleanURLs` option will\n     * check the cache for the URL with a `.html` added to the end of the end.\n     * @param {module:workbox-precaching~urlManipulation} [options.urlManipulation]\n     * This is a function that should take a URL and return an array of\n     * alternative URLs that should be checked for precache matches.\n     */\n    constructor(precacheController, options) {\n        const match = ({ request }) => {\n            const urlsToCacheKeys = precacheController.getURLsToCacheKeys();\n            for (const possibleURL of generateURLVariations(request.url, options)) {\n                const cacheKey = urlsToCacheKeys.get(possibleURL);\n                if (cacheKey) {\n                    return { cacheKey };\n                }\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Precaching did not find a match for ` +\n                    getFriendlyURL(request.url));\n            }\n            return;\n        };\n        super(match, precacheController.strategy);\n    }\n}\nexport { PrecacheRoute };\n"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,MAAM,QAAQ,iCAAiC;AACxD,SAASC,cAAc,QAAQ,yCAAyC;AACxE,SAASC,KAAK,QAAQ,0BAA0B;AAChD,SAASC,qBAAqB,QAAQ,kCAAkC;AACxE,OAAO,eAAe;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA,IASMC,aAAa;EAAA;EAAA;EACf;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,uBAAYC,kBAAkB,EAAEC,OAAO,EAAE;IAAA;IACrC,IAAMC,KAAK,GAAG,SAARA,KAAK,OAAoB;MAAA,IAAdC,OAAO,QAAPA,OAAO;MACpB,IAAMC,eAAe,GAAGJ,kBAAkB,CAACK,kBAAkB,EAAE;MAAC,2CACtCP,qBAAqB,CAACK,OAAO,CAACG,GAAG,EAAEL,OAAO,CAAC;QAAA;MAAA;QAArE,oDAAuE;UAAA,IAA5DM,WAAW;UAClB,IAAMC,QAAQ,GAAGJ,eAAe,CAACK,GAAG,CAACF,WAAW,CAAC;UACjD,IAAIC,QAAQ,EAAE;YACV,OAAO;cAAEA,QAAQ,EAARA;YAAS,CAAC;UACvB;QACJ;MAAC;QAAA;MAAA;QAAA;MAAA;MACD,IAAIE,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;QACvCjB,MAAM,CAACkB,KAAK,CAAC,yCACTjB,cAAc,CAACO,OAAO,CAACG,GAAG,CAAC,CAAC;MACpC;MACA;IACJ,CAAC;IAAC,yBACIJ,KAAK,EAAEF,kBAAkB,CAACc,QAAQ;EAC5C;EAAC;AAAA,EAjCuBjB,KAAK;AAmCjC,SAASE,aAAa"},"metadata":{},"sourceType":"module"}