{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport { useMemo } from 'react';\nimport { apolloClient } from './apollo';\nconst query = gql`\n  query AllV3Ticks($poolAddress: String!, $skip: Int!) {\n    ticks(first: 1000, skip: $skip, where: { poolAddress: $poolAddress }, orderBy: tickIdx) {\n      tick: tickIdx\n      liquidityNet\n      price0\n      price1\n    }\n  }\n`;\nexport default function useAllV3TicksQuery(poolAddress, skip, interval) {\n  _s();\n  const {\n    data,\n    loading: isLoading,\n    error\n  } = useQuery(query, {\n    variables: {\n      poolAddress: poolAddress === null || poolAddress === void 0 ? void 0 : poolAddress.toLowerCase(),\n      skip\n    },\n    pollInterval: interval,\n    client: apolloClient\n  });\n  return useMemo(() => ({\n    error,\n    isLoading,\n    data\n  }), [data, error, isLoading]);\n}\n_s(useAllV3TicksQuery, \"gjuHhMOhlMwRR9OS8d0j/7tnAaI=\", false, function () {\n  return [useQuery];\n});","map":{"version":3,"names":["useQuery","gql","useMemo","apolloClient","query","useAllV3TicksQuery","poolAddress","skip","interval","data","loading","isLoading","error","variables","toLowerCase","pollInterval","client"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/graphql/thegraph/AllV3TicksQuery.ts"],"sourcesContent":["import { useQuery } from '@apollo/client'\nimport gql from 'graphql-tag'\nimport { useMemo } from 'react'\n\nimport { AllV3TicksQuery } from './__generated__/types-and-hooks'\nimport { apolloClient } from './apollo'\n\nconst query = gql`\n  query AllV3Ticks($poolAddress: String!, $skip: Int!) {\n    ticks(first: 1000, skip: $skip, where: { poolAddress: $poolAddress }, orderBy: tickIdx) {\n      tick: tickIdx\n      liquidityNet\n      price0\n      price1\n    }\n  }\n`\n\nexport type Ticks = AllV3TicksQuery['ticks']\nexport type TickData = Ticks[number]\n\nexport default function useAllV3TicksQuery(poolAddress: string | undefined, skip: number, interval: number) {\n  const {\n    data,\n    loading: isLoading,\n    error,\n  } = useQuery(query, {\n    variables: {\n      poolAddress: poolAddress?.toLowerCase(),\n      skip,\n    },\n    pollInterval: interval,\n    client: apolloClient,\n  })\n\n  return useMemo(\n    () => ({\n      error,\n      isLoading,\n      data,\n    }),\n    [data, error, isLoading]\n  )\n}\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,gBAAgB;AACzC,OAAOC,GAAG,MAAM,aAAa;AAC7B,SAASC,OAAO,QAAQ,OAAO;AAG/B,SAASC,YAAY,QAAQ,UAAU;AAEvC,MAAMC,KAAK,GAAGH,GAAI;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAKD,eAAe,SAASI,kBAAkB,CAACC,WAA+B,EAAEC,IAAY,EAAEC,QAAgB,EAAE;EAAA;EAC1G,MAAM;IACJC,IAAI;IACJC,OAAO,EAAEC,SAAS;IAClBC;EACF,CAAC,GAAGZ,QAAQ,CAACI,KAAK,EAAE;IAClBS,SAAS,EAAE;MACTP,WAAW,EAAEA,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEQ,WAAW,EAAE;MACvCP;IACF,CAAC;IACDQ,YAAY,EAAEP,QAAQ;IACtBQ,MAAM,EAAEb;EACV,CAAC,CAAC;EAEF,OAAOD,OAAO,CACZ,OAAO;IACLU,KAAK;IACLD,SAAS;IACTF;EACF,CAAC,CAAC,EACF,CAACA,IAAI,EAAEG,KAAK,EAAED,SAAS,CAAC,CACzB;AACH;AAAC,GAtBuBN,kBAAkB;EAAA,QAKpCL,QAAQ;AAAA"},"metadata":{},"sourceType":"module"}