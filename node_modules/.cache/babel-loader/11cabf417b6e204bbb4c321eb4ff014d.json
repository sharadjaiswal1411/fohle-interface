{"ast":null,"code":"export var PluginType;\n(function (PluginType) {\n  PluginType[\"BEFORE\"] = \"before\";\n  PluginType[\"ENRICHMENT\"] = \"enrichment\";\n  PluginType[\"DESTINATION\"] = \"destination\";\n})(PluginType || (PluginType = {}));","map":{"version":3,"sources":["../../src/plugin.ts"],"names":[],"mappings":"AAIA,OAAA,IAAY,UAIX;AAJD,CAAA,UAAY,UAAU,EAAA;EACpB,UAAA,CAAA,QAAA,CAAA,GAAA,QAAiB;EACjB,UAAA,CAAA,YAAA,CAAA,GAAA,YAAyB;EACzB,UAAA,CAAA,aAAA,CAAA,GAAA,aAA2B;AAC7B,CAAC,EAJW,UAAU,KAAV,UAAU,GAAA,CAAA,CAAA,CAAA,CAAA","sourcesContent":["import { Event } from './event';\nimport { Config } from './config';\nimport { Result } from './result';\n\nexport enum PluginType {\n  BEFORE = 'before',\n  ENRICHMENT = 'enrichment',\n  DESTINATION = 'destination',\n}\n\nexport interface BeforePlugin {\n  name: string;\n  type: PluginType.BEFORE;\n  setup(config: Config): Promise<void>;\n  execute(context: Event): Promise<Event>;\n}\n\nexport interface EnrichmentPlugin {\n  name: string;\n  type: PluginType.ENRICHMENT;\n  setup(config: Config): Promise<void>;\n  execute(context: Event): Promise<Event>;\n}\n\nexport interface DestinationPlugin {\n  name: string;\n  type: PluginType.DESTINATION;\n  setup(config: Config): Promise<void>;\n  execute(context: Event): Promise<Result>;\n  flush?(): Promise<void>;\n}\n\nexport type Plugin = BeforePlugin | EnrichmentPlugin | DestinationPlugin;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}