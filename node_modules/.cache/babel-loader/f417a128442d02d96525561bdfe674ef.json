{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$(),\n  _s5 = $RefreshSig$();\nimport { abi as MERKLE_DISTRIBUTOR_ABI } from '@uniswap/merkle-distributor/build/MerkleDistributor.json';\nimport { CurrencyAmount } from '@uniswap/sdk-core';\nimport { useWeb3React } from '@web3-react/core';\nimport { MERKLE_DISTRIBUTOR_ADDRESS } from 'constants/addresses';\nimport JSBI from 'jsbi';\nimport { useSingleCallResult } from 'lib/hooks/multicall';\nimport { useEffect, useState } from 'react';\nimport { UNI } from '../../constants/tokens';\nimport { useContract } from '../../hooks/useContract';\nimport { isAddress } from '../../utils';\nimport { calculateGasMargin } from '../../utils/calculateGasMargin';\nimport { useTransactionAdder } from '../transactions/hooks';\nimport { TransactionType } from '../transactions/types';\nfunction useMerkleDistributorContract() {\n  _s();\n  return useContract(MERKLE_DISTRIBUTOR_ADDRESS, MERKLE_DISTRIBUTOR_ABI, true);\n}\n_s(useMerkleDistributorContract, \"OieRxpBRupXKKSB/Daj7yBGbdgo=\", false, function () {\n  return [useContract];\n});\nlet FETCH_CLAIM_MAPPING_PROMISE = null;\nfunction fetchClaimMapping() {\n  var _FETCH_CLAIM_MAPPING_;\n  return (_FETCH_CLAIM_MAPPING_ = FETCH_CLAIM_MAPPING_PROMISE) !== null && _FETCH_CLAIM_MAPPING_ !== void 0 ? _FETCH_CLAIM_MAPPING_ : FETCH_CLAIM_MAPPING_PROMISE = fetch(`https://raw.githubusercontent.com/Uniswap/mrkl-drop-data-chunks/final/chunks/mapping.json`).then(res => res.json()).catch(error => {\n    console.error('Failed to get claims mapping', error);\n    FETCH_CLAIM_MAPPING_PROMISE = null;\n  });\n}\nconst FETCH_CLAIM_FILE_PROMISES = {};\nfunction fetchClaimFile(key) {\n  var _FETCH_CLAIM_FILE_PRO;\n  return (_FETCH_CLAIM_FILE_PRO = FETCH_CLAIM_FILE_PROMISES[key]) !== null && _FETCH_CLAIM_FILE_PRO !== void 0 ? _FETCH_CLAIM_FILE_PRO : FETCH_CLAIM_FILE_PROMISES[key] = fetch(`https://raw.githubusercontent.com/Uniswap/mrkl-drop-data-chunks/final/chunks/${key}.json`).then(res => res.json()).catch(error => {\n    console.error(`Failed to get claim file mapping for starting address ${key}`, error);\n    delete FETCH_CLAIM_FILE_PROMISES[key];\n  });\n}\nconst FETCH_CLAIM_PROMISES = {};\n// returns the claim for the given address, or null if not valid\nfunction fetchClaim(account) {\n  var _FETCH_CLAIM_PROMISES;\n  const formatted = isAddress(account);\n  if (!formatted) return Promise.reject(new Error('Invalid address'));\n  return (_FETCH_CLAIM_PROMISES = FETCH_CLAIM_PROMISES[account]) !== null && _FETCH_CLAIM_PROMISES !== void 0 ? _FETCH_CLAIM_PROMISES : FETCH_CLAIM_PROMISES[account] = fetchClaimMapping().then(mapping => {\n    const sorted = Object.keys(mapping).sort((a, b) => a.toLowerCase() < b.toLowerCase() ? -1 : 1);\n    for (const startingAddress of sorted) {\n      const lastAddress = mapping[startingAddress];\n      if (startingAddress.toLowerCase() <= formatted.toLowerCase()) {\n        if (formatted.toLowerCase() <= lastAddress.toLowerCase()) {\n          return startingAddress;\n        }\n      } else {\n        throw new Error(`Claim for ${formatted} was not found in partial search`);\n      }\n    }\n    throw new Error(`Claim for ${formatted} was not found after searching all mappings`);\n  }).then(fetchClaimFile).then(result => {\n    if (result[formatted]) return result[formatted];\n    throw new Error(`Claim for ${formatted} was not found in claim file!`);\n  }).catch(error => {\n    console.debug('Claim fetch failed', error);\n    throw error;\n  });\n}\n\n// parse distributorContract blob and detect if user has claim data\n// null means we know it does not\nfunction useUserClaimData(account) {\n  _s2();\n  const {\n    chainId\n  } = useWeb3React();\n  const [claimInfo, setClaimInfo] = useState({});\n  useEffect(() => {\n    if (!account || chainId !== 1) return;\n    fetchClaim(account).then(accountClaimInfo => setClaimInfo(claimInfo => {\n      return {\n        ...claimInfo,\n        [account]: accountClaimInfo\n      };\n    })).catch(() => {\n      setClaimInfo(claimInfo => {\n        return {\n          ...claimInfo,\n          [account]: null\n        };\n      });\n    });\n  }, [account, chainId]);\n  return account && chainId === 1 ? claimInfo[account] : null;\n}\n\n// check if user is in blob and has not yet claimed UNI\n_s2(useUserClaimData, \"QbP3RB/iM+/UznKBQ0Fzva11ifA=\", false, function () {\n  return [useWeb3React];\n});\nexport function useUserHasAvailableClaim(account) {\n  _s3();\n  var _isClaimedResult$resu;\n  const userClaimData = useUserClaimData(account);\n  const distributorContract = useMerkleDistributorContract();\n  const isClaimedResult = useSingleCallResult(distributorContract, 'isClaimed', [userClaimData === null || userClaimData === void 0 ? void 0 : userClaimData.index]);\n  // user is in blob and contract marks as unclaimed\n  return Boolean(userClaimData && !isClaimedResult.loading && ((_isClaimedResult$resu = isClaimedResult.result) === null || _isClaimedResult$resu === void 0 ? void 0 : _isClaimedResult$resu[0]) === false);\n}\n_s3(useUserHasAvailableClaim, \"S6ll+G1SAwuSUg0umNHnklxJjYY=\", false, function () {\n  return [useUserClaimData, useMerkleDistributorContract, useSingleCallResult];\n});\nexport function useUserUnclaimedAmount(account) {\n  _s4();\n  const {\n    chainId\n  } = useWeb3React();\n  const userClaimData = useUserClaimData(account);\n  const canClaim = useUserHasAvailableClaim(account);\n  const uni = chainId ? UNI[chainId] : undefined;\n  if (!uni) return undefined;\n  if (!canClaim || !userClaimData) {\n    return CurrencyAmount.fromRawAmount(uni, JSBI.BigInt(0));\n  }\n  return CurrencyAmount.fromRawAmount(uni, JSBI.BigInt(userClaimData.amount));\n}\n_s4(useUserUnclaimedAmount, \"XeZ4jXy1Gv9VWSm55pexsKmNtXw=\", false, function () {\n  return [useWeb3React, useUserClaimData, useUserHasAvailableClaim];\n});\nexport function useClaimCallback(account) {\n  _s5();\n  // get claim data for this account\n  const {\n    provider,\n    chainId\n  } = useWeb3React();\n  const claimData = useUserClaimData(account);\n\n  // used for popup summary\n  const unclaimedAmount = useUserUnclaimedAmount(account);\n  const addTransaction = useTransactionAdder();\n  const distributorContract = useMerkleDistributorContract();\n  const claimCallback = async function () {\n    if (!claimData || !account || !provider || !chainId || !distributorContract) return;\n    const args = [claimData.index, account, claimData.amount, claimData.proof];\n    return distributorContract.estimateGas['claim'](...args, {}).then(estimatedGasLimit => {\n      return distributorContract.claim(...args, {\n        value: null,\n        gasLimit: calculateGasMargin(estimatedGasLimit)\n      }).then(response => {\n        addTransaction(response, {\n          type: TransactionType.CLAIM,\n          recipient: account,\n          uniAmountRaw: unclaimedAmount === null || unclaimedAmount === void 0 ? void 0 : unclaimedAmount.quotient.toString()\n        });\n        return response.hash;\n      });\n    });\n  };\n  return {\n    claimCallback\n  };\n}\n_s5(useClaimCallback, \"Ci8yQE2NJFk+Jwey0EePWtPIBZM=\", false, function () {\n  return [useWeb3React, useUserClaimData, useUserUnclaimedAmount, useTransactionAdder, useMerkleDistributorContract];\n});","map":{"version":3,"names":["abi","MERKLE_DISTRIBUTOR_ABI","CurrencyAmount","useWeb3React","MERKLE_DISTRIBUTOR_ADDRESS","JSBI","useSingleCallResult","useEffect","useState","UNI","useContract","isAddress","calculateGasMargin","useTransactionAdder","TransactionType","useMerkleDistributorContract","FETCH_CLAIM_MAPPING_PROMISE","fetchClaimMapping","fetch","then","res","json","catch","error","console","FETCH_CLAIM_FILE_PROMISES","fetchClaimFile","key","FETCH_CLAIM_PROMISES","fetchClaim","account","formatted","Promise","reject","Error","mapping","sorted","Object","keys","sort","a","b","toLowerCase","startingAddress","lastAddress","result","debug","useUserClaimData","chainId","claimInfo","setClaimInfo","accountClaimInfo","useUserHasAvailableClaim","userClaimData","distributorContract","isClaimedResult","index","Boolean","loading","useUserUnclaimedAmount","canClaim","uni","undefined","fromRawAmount","BigInt","amount","useClaimCallback","provider","claimData","unclaimedAmount","addTransaction","claimCallback","args","proof","estimateGas","estimatedGasLimit","claim","value","gasLimit","response","type","CLAIM","recipient","uniAmountRaw","quotient","toString","hash"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/state/claim/hooks.ts"],"sourcesContent":["import type { TransactionResponse } from '@ethersproject/providers'\nimport { abi as MERKLE_DISTRIBUTOR_ABI } from '@uniswap/merkle-distributor/build/MerkleDistributor.json'\nimport { CurrencyAmount, Token } from '@uniswap/sdk-core'\nimport { useWeb3React } from '@web3-react/core'\nimport { MERKLE_DISTRIBUTOR_ADDRESS } from 'constants/addresses'\nimport JSBI from 'jsbi'\nimport { useSingleCallResult } from 'lib/hooks/multicall'\nimport { useEffect, useState } from 'react'\n\nimport { UNI } from '../../constants/tokens'\nimport { useContract } from '../../hooks/useContract'\nimport { isAddress } from '../../utils'\nimport { calculateGasMargin } from '../../utils/calculateGasMargin'\nimport { useTransactionAdder } from '../transactions/hooks'\nimport { TransactionType } from '../transactions/types'\n\nfunction useMerkleDistributorContract() {\n  return useContract(MERKLE_DISTRIBUTOR_ADDRESS, MERKLE_DISTRIBUTOR_ABI, true)\n}\n\ninterface UserClaimData {\n  index: number\n  amount: string\n  proof: string[]\n  flags?: {\n    isSOCKS: boolean\n    isLP: boolean\n    isUser: boolean\n  }\n}\n\ntype LastAddress = string\ntype ClaimAddressMapping = { [firstAddress: string]: LastAddress }\nlet FETCH_CLAIM_MAPPING_PROMISE: Promise<ClaimAddressMapping> | null = null\nfunction fetchClaimMapping(): Promise<ClaimAddressMapping> {\n  return (\n    FETCH_CLAIM_MAPPING_PROMISE ??\n    (FETCH_CLAIM_MAPPING_PROMISE = fetch(\n      `https://raw.githubusercontent.com/Uniswap/mrkl-drop-data-chunks/final/chunks/mapping.json`\n    )\n      .then((res) => res.json())\n      .catch((error) => {\n        console.error('Failed to get claims mapping', error)\n        FETCH_CLAIM_MAPPING_PROMISE = null\n      }))\n  )\n}\n\nconst FETCH_CLAIM_FILE_PROMISES: { [startingAddress: string]: Promise<{ [address: string]: UserClaimData }> } = {}\nfunction fetchClaimFile(key: string): Promise<{ [address: string]: UserClaimData }> {\n  return (\n    FETCH_CLAIM_FILE_PROMISES[key] ??\n    (FETCH_CLAIM_FILE_PROMISES[key] = fetch(\n      `https://raw.githubusercontent.com/Uniswap/mrkl-drop-data-chunks/final/chunks/${key}.json`\n    )\n      .then((res) => res.json())\n      .catch((error) => {\n        console.error(`Failed to get claim file mapping for starting address ${key}`, error)\n        delete FETCH_CLAIM_FILE_PROMISES[key]\n      }))\n  )\n}\n\nconst FETCH_CLAIM_PROMISES: { [key: string]: Promise<UserClaimData> } = {}\n// returns the claim for the given address, or null if not valid\nfunction fetchClaim(account: string): Promise<UserClaimData> {\n  const formatted = isAddress(account)\n  if (!formatted) return Promise.reject(new Error('Invalid address'))\n\n  return (\n    FETCH_CLAIM_PROMISES[account] ??\n    (FETCH_CLAIM_PROMISES[account] = fetchClaimMapping()\n      .then((mapping) => {\n        const sorted = Object.keys(mapping).sort((a, b) => (a.toLowerCase() < b.toLowerCase() ? -1 : 1))\n\n        for (const startingAddress of sorted) {\n          const lastAddress = mapping[startingAddress]\n          if (startingAddress.toLowerCase() <= formatted.toLowerCase()) {\n            if (formatted.toLowerCase() <= lastAddress.toLowerCase()) {\n              return startingAddress\n            }\n          } else {\n            throw new Error(`Claim for ${formatted} was not found in partial search`)\n          }\n        }\n        throw new Error(`Claim for ${formatted} was not found after searching all mappings`)\n      })\n      .then(fetchClaimFile)\n      .then((result) => {\n        if (result[formatted]) return result[formatted]\n        throw new Error(`Claim for ${formatted} was not found in claim file!`)\n      })\n      .catch((error) => {\n        console.debug('Claim fetch failed', error)\n        throw error\n      }))\n  )\n}\n\n// parse distributorContract blob and detect if user has claim data\n// null means we know it does not\nfunction useUserClaimData(account: string | null | undefined): UserClaimData | null {\n  const { chainId } = useWeb3React()\n\n  const [claimInfo, setClaimInfo] = useState<{ [account: string]: UserClaimData | null }>({})\n\n  useEffect(() => {\n    if (!account || chainId !== 1) return\n\n    fetchClaim(account)\n      .then((accountClaimInfo) =>\n        setClaimInfo((claimInfo) => {\n          return {\n            ...claimInfo,\n            [account]: accountClaimInfo,\n          }\n        })\n      )\n      .catch(() => {\n        setClaimInfo((claimInfo) => {\n          return {\n            ...claimInfo,\n            [account]: null,\n          }\n        })\n      })\n  }, [account, chainId])\n\n  return account && chainId === 1 ? claimInfo[account] : null\n}\n\n// check if user is in blob and has not yet claimed UNI\nexport function useUserHasAvailableClaim(account: string | null | undefined): boolean {\n  const userClaimData = useUserClaimData(account)\n  const distributorContract = useMerkleDistributorContract()\n  const isClaimedResult = useSingleCallResult(distributorContract, 'isClaimed', [userClaimData?.index])\n  // user is in blob and contract marks as unclaimed\n  return Boolean(userClaimData && !isClaimedResult.loading && isClaimedResult.result?.[0] === false)\n}\n\nexport function useUserUnclaimedAmount(account: string | null | undefined): CurrencyAmount<Token> | undefined {\n  const { chainId } = useWeb3React()\n  const userClaimData = useUserClaimData(account)\n  const canClaim = useUserHasAvailableClaim(account)\n\n  const uni = chainId ? UNI[chainId] : undefined\n  if (!uni) return undefined\n  if (!canClaim || !userClaimData) {\n    return CurrencyAmount.fromRawAmount(uni, JSBI.BigInt(0))\n  }\n  return CurrencyAmount.fromRawAmount(uni, JSBI.BigInt(userClaimData.amount))\n}\n\nexport function useClaimCallback(account: string | null | undefined): {\n  claimCallback: () => Promise<string>\n} {\n  // get claim data for this account\n  const { provider, chainId } = useWeb3React()\n  const claimData = useUserClaimData(account)\n\n  // used for popup summary\n  const unclaimedAmount: CurrencyAmount<Token> | undefined = useUserUnclaimedAmount(account)\n  const addTransaction = useTransactionAdder()\n  const distributorContract = useMerkleDistributorContract()\n\n  const claimCallback = async function () {\n    if (!claimData || !account || !provider || !chainId || !distributorContract) return\n\n    const args = [claimData.index, account, claimData.amount, claimData.proof]\n\n    return distributorContract.estimateGas['claim'](...args, {}).then((estimatedGasLimit) => {\n      return distributorContract\n        .claim(...args, { value: null, gasLimit: calculateGasMargin(estimatedGasLimit) })\n        .then((response: TransactionResponse) => {\n          addTransaction(response, {\n            type: TransactionType.CLAIM,\n            recipient: account,\n            uniAmountRaw: unclaimedAmount?.quotient.toString(),\n          })\n          return response.hash\n        })\n    })\n  }\n\n  return { claimCallback }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}