{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { filterToKey } from './utils';\nconst slice = createSlice({\n  name: 'logs',\n  initialState: {},\n  reducers: {\n    addListener(state, _ref) {\n      let {\n        payload: {\n          chainId,\n          filter\n        }\n      } = _ref;\n      if (!state[chainId]) state[chainId] = {};\n      const key = filterToKey(filter);\n      if (!state[chainId][key]) state[chainId][key] = {\n        listeners: 1\n      };else state[chainId][key].listeners++;\n    },\n    fetchingLogs(state, _ref2) {\n      let {\n        payload: {\n          chainId,\n          filters,\n          blockNumber\n        }\n      } = _ref2;\n      if (!state[chainId]) return;\n      for (const filter of filters) {\n        const key = filterToKey(filter);\n        if (!state[chainId][key]) continue;\n        state[chainId][key].fetchingBlockNumber = blockNumber;\n      }\n    },\n    fetchedLogs(state, _ref3) {\n      let {\n        payload: {\n          chainId,\n          filter,\n          results\n        }\n      } = _ref3;\n      if (!state[chainId]) return;\n      const key = filterToKey(filter);\n      const fetchState = state[chainId][key];\n      if (!fetchState || fetchState.results && fetchState.results.blockNumber > results.blockNumber) return;\n      fetchState.results = results;\n    },\n    fetchedLogsError(state, _ref4) {\n      let {\n        payload: {\n          chainId,\n          filter,\n          blockNumber\n        }\n      } = _ref4;\n      if (!state[chainId]) return;\n      const key = filterToKey(filter);\n      const fetchState = state[chainId][key];\n      if (!fetchState || fetchState.results && fetchState.results.blockNumber > blockNumber) return;\n      fetchState.results = {\n        blockNumber,\n        error: true\n      };\n    },\n    removeListener(state, _ref5) {\n      let {\n        payload: {\n          chainId,\n          filter\n        }\n      } = _ref5;\n      if (!state[chainId]) return;\n      const key = filterToKey(filter);\n      if (!state[chainId][key]) return;\n      state[chainId][key].listeners--;\n    }\n  }\n});\nexport default slice.reducer;\nexport const {\n  addListener,\n  removeListener,\n  fetchedLogs,\n  fetchedLogsError,\n  fetchingLogs\n} = slice.actions;","map":{"version":3,"names":["createSlice","filterToKey","slice","name","initialState","reducers","addListener","state","payload","chainId","filter","key","listeners","fetchingLogs","filters","blockNumber","fetchingBlockNumber","fetchedLogs","results","fetchState","fetchedLogsError","error","removeListener","reducer","actions"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/state/logs/slice.ts"],"sourcesContent":["import type { Filter } from '@ethersproject/providers'\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\nimport { filterToKey, Log } from './utils'\n\ninterface LogsState {\n  [chainId: number]: {\n    [filterKey: string]: {\n      listeners: number\n      fetchingBlockNumber?: number\n      results?:\n        | {\n            blockNumber: number\n            logs: Log[]\n            error?: undefined\n          }\n        | {\n            blockNumber: number\n            logs?: undefined\n            error: true\n          }\n    }\n  }\n}\n\nconst slice = createSlice({\n  name: 'logs',\n  initialState: {} as LogsState,\n  reducers: {\n    addListener(state, { payload: { chainId, filter } }: PayloadAction<{ chainId: number; filter: Filter }>) {\n      if (!state[chainId]) state[chainId] = {}\n      const key = filterToKey(filter)\n      if (!state[chainId][key])\n        state[chainId][key] = {\n          listeners: 1,\n        }\n      else state[chainId][key].listeners++\n    },\n    fetchingLogs(\n      state,\n      {\n        payload: { chainId, filters, blockNumber },\n      }: PayloadAction<{ chainId: number; filters: Filter[]; blockNumber: number }>\n    ) {\n      if (!state[chainId]) return\n      for (const filter of filters) {\n        const key = filterToKey(filter)\n        if (!state[chainId][key]) continue\n        state[chainId][key].fetchingBlockNumber = blockNumber\n      }\n    },\n    fetchedLogs(\n      state,\n      {\n        payload: { chainId, filter, results },\n      }: PayloadAction<{ chainId: number; filter: Filter; results: { blockNumber: number; logs: Log[] } }>\n    ) {\n      if (!state[chainId]) return\n      const key = filterToKey(filter)\n      const fetchState = state[chainId][key]\n      if (!fetchState || (fetchState.results && fetchState.results.blockNumber > results.blockNumber)) return\n      fetchState.results = results\n    },\n    fetchedLogsError(\n      state,\n      {\n        payload: { chainId, filter, blockNumber },\n      }: PayloadAction<{ chainId: number; blockNumber: number; filter: Filter }>\n    ) {\n      if (!state[chainId]) return\n      const key = filterToKey(filter)\n      const fetchState = state[chainId][key]\n      if (!fetchState || (fetchState.results && fetchState.results.blockNumber > blockNumber)) return\n      fetchState.results = {\n        blockNumber,\n        error: true,\n      }\n    },\n    removeListener(state, { payload: { chainId, filter } }: PayloadAction<{ chainId: number; filter: Filter }>) {\n      if (!state[chainId]) return\n      const key = filterToKey(filter)\n      if (!state[chainId][key]) return\n      state[chainId][key].listeners--\n    },\n  },\n})\n\nexport default slice.reducer\nexport const { addListener, removeListener, fetchedLogs, fetchedLogsError, fetchingLogs } = slice.actions\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}