{"ast":null,"code":"import { syntaxError } from '../error/syntaxError.mjs';\nimport { Location, OperationTypeNode } from './ast.mjs';\nimport { DirectiveLocation } from './directiveLocation.mjs';\nimport { Kind } from './kinds.mjs';\nimport { isPunctuatorTokenKind, Lexer } from './lexer.mjs';\nimport { isSource, Source } from './source.mjs';\nimport { TokenKind } from './tokenKind.mjs';\n/**\n * Configuration options to control parser behavior\n */\n\n/**\n * Given a GraphQL source, parses it into a Document.\n * Throws GraphQLError if a syntax error is encountered.\n */\nexport function parse(source, options) {\n  const parser = new Parser(source, options);\n  return parser.parseDocument();\n}\n/**\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\n * that value.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Values directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: valueFromAST().\n */\n\nexport function parseValue(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const value = parser.parseValueLiteral(false);\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Similar to parseValue(), but raises a parse error if it encounters a\n * variable. The return type will be a constant value.\n */\n\nexport function parseConstValue(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const value = parser.parseConstValueLiteral();\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\n * that type.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Types directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: typeFromAST().\n */\n\nexport function parseType(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const type = parser.parseTypeReference();\n  parser.expectToken(TokenKind.EOF);\n  return type;\n}\n/**\n * This class is exported only to assist people in implementing their own parsers\n * without duplicating too much code and should be used only as last resort for cases\n * such as experimental syntax or if certain features could not be contributed upstream.\n *\n * It is still part of the internal API and is versioned, so any changes to it are never\n * considered breaking changes. If you still need to support multiple versions of the\n * library, please use the `versionInfo` variable for version detection.\n *\n * @internal\n */\n\nexport class Parser {\n  constructor(source, options) {\n    const sourceObj = isSource(source) ? source : new Source(source);\n    this._lexer = new Lexer(sourceObj);\n    this._options = options;\n  }\n  /**\n   * Converts a name lex token into a name parse node.\n   */\n\n  parseName() {\n    const token = this.expectToken(TokenKind.NAME);\n    return this.node(token, {\n      kind: Kind.NAME,\n      value: token.value\n    });\n  } // Implements the parsing rules in the Document section.\n\n  /**\n   * Document : Definition+\n   */\n\n  parseDocument() {\n    return this.node(this._lexer.token, {\n      kind: Kind.DOCUMENT,\n      definitions: this.many(TokenKind.SOF, this.parseDefinition, TokenKind.EOF)\n    });\n  }\n  /**\n   * Definition :\n   *   - ExecutableDefinition\n   *   - TypeSystemDefinition\n   *   - TypeSystemExtension\n   *\n   * ExecutableDefinition :\n   *   - OperationDefinition\n   *   - FragmentDefinition\n   *\n   * TypeSystemDefinition :\n   *   - SchemaDefinition\n   *   - TypeDefinition\n   *   - DirectiveDefinition\n   *\n   * TypeDefinition :\n   *   - ScalarTypeDefinition\n   *   - ObjectTypeDefinition\n   *   - InterfaceTypeDefinition\n   *   - UnionTypeDefinition\n   *   - EnumTypeDefinition\n   *   - InputObjectTypeDefinition\n   */\n\n  parseDefinition() {\n    if (this.peek(TokenKind.BRACE_L)) {\n      return this.parseOperationDefinition();\n    } // Many definitions begin with a description and require a lookahead.\n\n    const hasDescription = this.peekDescription();\n    const keywordToken = hasDescription ? this._lexer.lookahead() : this._lexer.token;\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaDefinition();\n        case 'scalar':\n          return this.parseScalarTypeDefinition();\n        case 'type':\n          return this.parseObjectTypeDefinition();\n        case 'interface':\n          return this.parseInterfaceTypeDefinition();\n        case 'union':\n          return this.parseUnionTypeDefinition();\n        case 'enum':\n          return this.parseEnumTypeDefinition();\n        case 'input':\n          return this.parseInputObjectTypeDefinition();\n        case 'directive':\n          return this.parseDirectiveDefinition();\n      }\n      if (hasDescription) {\n        throw syntaxError(this._lexer.source, this._lexer.token.start, 'Unexpected description, descriptions are supported only on type definitions.');\n      }\n      switch (keywordToken.value) {\n        case 'query':\n        case 'mutation':\n        case 'subscription':\n          return this.parseOperationDefinition();\n        case 'fragment':\n          return this.parseFragmentDefinition();\n        case 'extend':\n          return this.parseTypeSystemExtension();\n      }\n    }\n    throw this.unexpected(keywordToken);\n  } // Implements the parsing rules in the Operations section.\n\n  /**\n   * OperationDefinition :\n   *  - SelectionSet\n   *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\n   */\n\n  parseOperationDefinition() {\n    const start = this._lexer.token;\n    if (this.peek(TokenKind.BRACE_L)) {\n      return this.node(start, {\n        kind: Kind.OPERATION_DEFINITION,\n        operation: OperationTypeNode.QUERY,\n        name: undefined,\n        variableDefinitions: [],\n        directives: [],\n        selectionSet: this.parseSelectionSet()\n      });\n    }\n    const operation = this.parseOperationType();\n    let name;\n    if (this.peek(TokenKind.NAME)) {\n      name = this.parseName();\n    }\n    return this.node(start, {\n      kind: Kind.OPERATION_DEFINITION,\n      operation,\n      name,\n      variableDefinitions: this.parseVariableDefinitions(),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet()\n    });\n  }\n  /**\n   * OperationType : one of query mutation subscription\n   */\n\n  parseOperationType() {\n    const operationToken = this.expectToken(TokenKind.NAME);\n    switch (operationToken.value) {\n      case 'query':\n        return OperationTypeNode.QUERY;\n      case 'mutation':\n        return OperationTypeNode.MUTATION;\n      case 'subscription':\n        return OperationTypeNode.SUBSCRIPTION;\n    }\n    throw this.unexpected(operationToken);\n  }\n  /**\n   * VariableDefinitions : ( VariableDefinition+ )\n   */\n\n  parseVariableDefinitions() {\n    return this.optionalMany(TokenKind.PAREN_L, this.parseVariableDefinition, TokenKind.PAREN_R);\n  }\n  /**\n   * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?\n   */\n\n  parseVariableDefinition() {\n    return this.node(this._lexer.token, {\n      kind: Kind.VARIABLE_DEFINITION,\n      variable: this.parseVariable(),\n      type: (this.expectToken(TokenKind.COLON), this.parseTypeReference()),\n      defaultValue: this.expectOptionalToken(TokenKind.EQUALS) ? this.parseConstValueLiteral() : undefined,\n      directives: this.parseConstDirectives()\n    });\n  }\n  /**\n   * Variable : $ Name\n   */\n\n  parseVariable() {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.DOLLAR);\n    return this.node(start, {\n      kind: Kind.VARIABLE,\n      name: this.parseName()\n    });\n  }\n  /**\n   * ```\n   * SelectionSet : { Selection+ }\n   * ```\n   */\n\n  parseSelectionSet() {\n    return this.node(this._lexer.token, {\n      kind: Kind.SELECTION_SET,\n      selections: this.many(TokenKind.BRACE_L, this.parseSelection, TokenKind.BRACE_R)\n    });\n  }\n  /**\n   * Selection :\n   *   - Field\n   *   - FragmentSpread\n   *   - InlineFragment\n   */\n\n  parseSelection() {\n    return this.peek(TokenKind.SPREAD) ? this.parseFragment() : this.parseField();\n  }\n  /**\n   * Field : Alias? Name Arguments? Directives? SelectionSet?\n   *\n   * Alias : Name :\n   */\n\n  parseField() {\n    const start = this._lexer.token;\n    const nameOrAlias = this.parseName();\n    let alias;\n    let name;\n    if (this.expectOptionalToken(TokenKind.COLON)) {\n      alias = nameOrAlias;\n      name = this.parseName();\n    } else {\n      name = nameOrAlias;\n    }\n    return this.node(start, {\n      kind: Kind.FIELD,\n      alias,\n      name,\n      arguments: this.parseArguments(false),\n      directives: this.parseDirectives(false),\n      selectionSet: this.peek(TokenKind.BRACE_L) ? this.parseSelectionSet() : undefined\n    });\n  }\n  /**\n   * Arguments[Const] : ( Argument[?Const]+ )\n   */\n\n  parseArguments(isConst) {\n    const item = isConst ? this.parseConstArgument : this.parseArgument;\n    return this.optionalMany(TokenKind.PAREN_L, item, TokenKind.PAREN_R);\n  }\n  /**\n   * Argument[Const] : Name : Value[?Const]\n   */\n\n  parseArgument() {\n    let isConst = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    const start = this._lexer.token;\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return this.node(start, {\n      kind: Kind.ARGUMENT,\n      name,\n      value: this.parseValueLiteral(isConst)\n    });\n  }\n  parseConstArgument() {\n    return this.parseArgument(true);\n  } // Implements the parsing rules in the Fragments section.\n\n  /**\n   * Corresponds to both FragmentSpread and InlineFragment in the spec.\n   *\n   * FragmentSpread : ... FragmentName Directives?\n   *\n   * InlineFragment : ... TypeCondition? Directives? SelectionSet\n   */\n\n  parseFragment() {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.SPREAD);\n    const hasTypeCondition = this.expectOptionalKeyword('on');\n    if (!hasTypeCondition && this.peek(TokenKind.NAME)) {\n      return this.node(start, {\n        kind: Kind.FRAGMENT_SPREAD,\n        name: this.parseFragmentName(),\n        directives: this.parseDirectives(false)\n      });\n    }\n    return this.node(start, {\n      kind: Kind.INLINE_FRAGMENT,\n      typeCondition: hasTypeCondition ? this.parseNamedType() : undefined,\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet()\n    });\n  }\n  /**\n   * FragmentDefinition :\n   *   - fragment FragmentName on TypeCondition Directives? SelectionSet\n   *\n   * TypeCondition : NamedType\n   */\n\n  parseFragmentDefinition() {\n    var _this$_options;\n    const start = this._lexer.token;\n    this.expectKeyword('fragment'); // Legacy support for defining variables within fragments changes\n    // the grammar of FragmentDefinition:\n    //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet\n\n    if (((_this$_options = this._options) === null || _this$_options === void 0 ? void 0 : _this$_options.allowLegacyFragmentVariables) === true) {\n      return this.node(start, {\n        kind: Kind.FRAGMENT_DEFINITION,\n        name: this.parseFragmentName(),\n        variableDefinitions: this.parseVariableDefinitions(),\n        typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n        directives: this.parseDirectives(false),\n        selectionSet: this.parseSelectionSet()\n      });\n    }\n    return this.node(start, {\n      kind: Kind.FRAGMENT_DEFINITION,\n      name: this.parseFragmentName(),\n      typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet()\n    });\n  }\n  /**\n   * FragmentName : Name but not `on`\n   */\n\n  parseFragmentName() {\n    if (this._lexer.token.value === 'on') {\n      throw this.unexpected();\n    }\n    return this.parseName();\n  } // Implements the parsing rules in the Values section.\n\n  /**\n   * Value[Const] :\n   *   - [~Const] Variable\n   *   - IntValue\n   *   - FloatValue\n   *   - StringValue\n   *   - BooleanValue\n   *   - NullValue\n   *   - EnumValue\n   *   - ListValue[?Const]\n   *   - ObjectValue[?Const]\n   *\n   * BooleanValue : one of `true` `false`\n   *\n   * NullValue : `null`\n   *\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n\n  parseValueLiteral(isConst) {\n    const token = this._lexer.token;\n    switch (token.kind) {\n      case TokenKind.BRACKET_L:\n        return this.parseList(isConst);\n      case TokenKind.BRACE_L:\n        return this.parseObject(isConst);\n      case TokenKind.INT:\n        this._lexer.advance();\n        return this.node(token, {\n          kind: Kind.INT,\n          value: token.value\n        });\n      case TokenKind.FLOAT:\n        this._lexer.advance();\n        return this.node(token, {\n          kind: Kind.FLOAT,\n          value: token.value\n        });\n      case TokenKind.STRING:\n      case TokenKind.BLOCK_STRING:\n        return this.parseStringLiteral();\n      case TokenKind.NAME:\n        this._lexer.advance();\n        switch (token.value) {\n          case 'true':\n            return this.node(token, {\n              kind: Kind.BOOLEAN,\n              value: true\n            });\n          case 'false':\n            return this.node(token, {\n              kind: Kind.BOOLEAN,\n              value: false\n            });\n          case 'null':\n            return this.node(token, {\n              kind: Kind.NULL\n            });\n          default:\n            return this.node(token, {\n              kind: Kind.ENUM,\n              value: token.value\n            });\n        }\n      case TokenKind.DOLLAR:\n        if (isConst) {\n          this.expectToken(TokenKind.DOLLAR);\n          if (this._lexer.token.kind === TokenKind.NAME) {\n            const varName = this._lexer.token.value;\n            throw syntaxError(this._lexer.source, token.start, `Unexpected variable \"$${varName}\" in constant value.`);\n          } else {\n            throw this.unexpected(token);\n          }\n        }\n        return this.parseVariable();\n      default:\n        throw this.unexpected();\n    }\n  }\n  parseConstValueLiteral() {\n    return this.parseValueLiteral(true);\n  }\n  parseStringLiteral() {\n    const token = this._lexer.token;\n    this._lexer.advance();\n    return this.node(token, {\n      kind: Kind.STRING,\n      value: token.value,\n      block: token.kind === TokenKind.BLOCK_STRING\n    });\n  }\n  /**\n   * ListValue[Const] :\n   *   - [ ]\n   *   - [ Value[?Const]+ ]\n   */\n\n  parseList(isConst) {\n    const item = () => this.parseValueLiteral(isConst);\n    return this.node(this._lexer.token, {\n      kind: Kind.LIST,\n      values: this.any(TokenKind.BRACKET_L, item, TokenKind.BRACKET_R)\n    });\n  }\n  /**\n   * ```\n   * ObjectValue[Const] :\n   *   - { }\n   *   - { ObjectField[?Const]+ }\n   * ```\n   */\n\n  parseObject(isConst) {\n    const item = () => this.parseObjectField(isConst);\n    return this.node(this._lexer.token, {\n      kind: Kind.OBJECT,\n      fields: this.any(TokenKind.BRACE_L, item, TokenKind.BRACE_R)\n    });\n  }\n  /**\n   * ObjectField[Const] : Name : Value[?Const]\n   */\n\n  parseObjectField(isConst) {\n    const start = this._lexer.token;\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return this.node(start, {\n      kind: Kind.OBJECT_FIELD,\n      name,\n      value: this.parseValueLiteral(isConst)\n    });\n  } // Implements the parsing rules in the Directives section.\n\n  /**\n   * Directives[Const] : Directive[?Const]+\n   */\n\n  parseDirectives(isConst) {\n    const directives = [];\n    while (this.peek(TokenKind.AT)) {\n      directives.push(this.parseDirective(isConst));\n    }\n    return directives;\n  }\n  parseConstDirectives() {\n    return this.parseDirectives(true);\n  }\n  /**\n   * ```\n   * Directive[Const] : @ Name Arguments[?Const]?\n   * ```\n   */\n\n  parseDirective(isConst) {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.AT);\n    return this.node(start, {\n      kind: Kind.DIRECTIVE,\n      name: this.parseName(),\n      arguments: this.parseArguments(isConst)\n    });\n  } // Implements the parsing rules in the Types section.\n\n  /**\n   * Type :\n   *   - NamedType\n   *   - ListType\n   *   - NonNullType\n   */\n\n  parseTypeReference() {\n    const start = this._lexer.token;\n    let type;\n    if (this.expectOptionalToken(TokenKind.BRACKET_L)) {\n      const innerType = this.parseTypeReference();\n      this.expectToken(TokenKind.BRACKET_R);\n      type = this.node(start, {\n        kind: Kind.LIST_TYPE,\n        type: innerType\n      });\n    } else {\n      type = this.parseNamedType();\n    }\n    if (this.expectOptionalToken(TokenKind.BANG)) {\n      return this.node(start, {\n        kind: Kind.NON_NULL_TYPE,\n        type\n      });\n    }\n    return type;\n  }\n  /**\n   * NamedType : Name\n   */\n\n  parseNamedType() {\n    return this.node(this._lexer.token, {\n      kind: Kind.NAMED_TYPE,\n      name: this.parseName()\n    });\n  } // Implements the parsing rules in the Type Definition section.\n\n  peekDescription() {\n    return this.peek(TokenKind.STRING) || this.peek(TokenKind.BLOCK_STRING);\n  }\n  /**\n   * Description : StringValue\n   */\n\n  parseDescription() {\n    if (this.peekDescription()) {\n      return this.parseStringLiteral();\n    }\n  }\n  /**\n   * ```\n   * SchemaDefinition : Description? schema Directives[Const]? { OperationTypeDefinition+ }\n   * ```\n   */\n\n  parseSchemaDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('schema');\n    const directives = this.parseConstDirectives();\n    const operationTypes = this.many(TokenKind.BRACE_L, this.parseOperationTypeDefinition, TokenKind.BRACE_R);\n    return this.node(start, {\n      kind: Kind.SCHEMA_DEFINITION,\n      description,\n      directives,\n      operationTypes\n    });\n  }\n  /**\n   * OperationTypeDefinition : OperationType : NamedType\n   */\n\n  parseOperationTypeDefinition() {\n    const start = this._lexer.token;\n    const operation = this.parseOperationType();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseNamedType();\n    return this.node(start, {\n      kind: Kind.OPERATION_TYPE_DEFINITION,\n      operation,\n      type\n    });\n  }\n  /**\n   * ScalarTypeDefinition : Description? scalar Name Directives[Const]?\n   */\n\n  parseScalarTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('scalar');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.SCALAR_TYPE_DEFINITION,\n      description,\n      name,\n      directives\n    });\n  }\n  /**\n   * ObjectTypeDefinition :\n   *   Description?\n   *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?\n   */\n\n  parseObjectTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('type');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.OBJECT_TYPE_DEFINITION,\n      description,\n      name,\n      interfaces,\n      directives,\n      fields\n    });\n  }\n  /**\n   * ImplementsInterfaces :\n   *   - implements `&`? NamedType\n   *   - ImplementsInterfaces & NamedType\n   */\n\n  parseImplementsInterfaces() {\n    return this.expectOptionalKeyword('implements') ? this.delimitedMany(TokenKind.AMP, this.parseNamedType) : [];\n  }\n  /**\n   * ```\n   * FieldsDefinition : { FieldDefinition+ }\n   * ```\n   */\n\n  parseFieldsDefinition() {\n    return this.optionalMany(TokenKind.BRACE_L, this.parseFieldDefinition, TokenKind.BRACE_R);\n  }\n  /**\n   * FieldDefinition :\n   *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?\n   */\n\n  parseFieldDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseName();\n    const args = this.parseArgumentDefs();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseTypeReference();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.FIELD_DEFINITION,\n      description,\n      name,\n      arguments: args,\n      type,\n      directives\n    });\n  }\n  /**\n   * ArgumentsDefinition : ( InputValueDefinition+ )\n   */\n\n  parseArgumentDefs() {\n    return this.optionalMany(TokenKind.PAREN_L, this.parseInputValueDef, TokenKind.PAREN_R);\n  }\n  /**\n   * InputValueDefinition :\n   *   - Description? Name : Type DefaultValue? Directives[Const]?\n   */\n\n  parseInputValueDef() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseTypeReference();\n    let defaultValue;\n    if (this.expectOptionalToken(TokenKind.EQUALS)) {\n      defaultValue = this.parseConstValueLiteral();\n    }\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.INPUT_VALUE_DEFINITION,\n      description,\n      name,\n      type,\n      defaultValue,\n      directives\n    });\n  }\n  /**\n   * InterfaceTypeDefinition :\n   *   - Description? interface Name Directives[Const]? FieldsDefinition?\n   */\n\n  parseInterfaceTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('interface');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.INTERFACE_TYPE_DEFINITION,\n      description,\n      name,\n      interfaces,\n      directives,\n      fields\n    });\n  }\n  /**\n   * UnionTypeDefinition :\n   *   - Description? union Name Directives[Const]? UnionMemberTypes?\n   */\n\n  parseUnionTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('union');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const types = this.parseUnionMemberTypes();\n    return this.node(start, {\n      kind: Kind.UNION_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      types\n    });\n  }\n  /**\n   * UnionMemberTypes :\n   *   - = `|`? NamedType\n   *   - UnionMemberTypes | NamedType\n   */\n\n  parseUnionMemberTypes() {\n    return this.expectOptionalToken(TokenKind.EQUALS) ? this.delimitedMany(TokenKind.PIPE, this.parseNamedType) : [];\n  }\n  /**\n   * EnumTypeDefinition :\n   *   - Description? enum Name Directives[Const]? EnumValuesDefinition?\n   */\n\n  parseEnumTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('enum');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const values = this.parseEnumValuesDefinition();\n    return this.node(start, {\n      kind: Kind.ENUM_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      values\n    });\n  }\n  /**\n   * ```\n   * EnumValuesDefinition : { EnumValueDefinition+ }\n   * ```\n   */\n\n  parseEnumValuesDefinition() {\n    return this.optionalMany(TokenKind.BRACE_L, this.parseEnumValueDefinition, TokenKind.BRACE_R);\n  }\n  /**\n   * EnumValueDefinition : Description? EnumValue Directives[Const]?\n   */\n\n  parseEnumValueDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseEnumValueName();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.ENUM_VALUE_DEFINITION,\n      description,\n      name,\n      directives\n    });\n  }\n  /**\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n\n  parseEnumValueName() {\n    if (this._lexer.token.value === 'true' || this._lexer.token.value === 'false' || this._lexer.token.value === 'null') {\n      throw syntaxError(this._lexer.source, this._lexer.token.start, `${getTokenDesc(this._lexer.token)} is reserved and cannot be used for an enum value.`);\n    }\n    return this.parseName();\n  }\n  /**\n   * InputObjectTypeDefinition :\n   *   - Description? input Name Directives[Const]? InputFieldsDefinition?\n   */\n\n  parseInputObjectTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('input');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseInputFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      fields\n    });\n  }\n  /**\n   * ```\n   * InputFieldsDefinition : { InputValueDefinition+ }\n   * ```\n   */\n\n  parseInputFieldsDefinition() {\n    return this.optionalMany(TokenKind.BRACE_L, this.parseInputValueDef, TokenKind.BRACE_R);\n  }\n  /**\n   * TypeSystemExtension :\n   *   - SchemaExtension\n   *   - TypeExtension\n   *\n   * TypeExtension :\n   *   - ScalarTypeExtension\n   *   - ObjectTypeExtension\n   *   - InterfaceTypeExtension\n   *   - UnionTypeExtension\n   *   - EnumTypeExtension\n   *   - InputObjectTypeDefinition\n   */\n\n  parseTypeSystemExtension() {\n    const keywordToken = this._lexer.lookahead();\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaExtension();\n        case 'scalar':\n          return this.parseScalarTypeExtension();\n        case 'type':\n          return this.parseObjectTypeExtension();\n        case 'interface':\n          return this.parseInterfaceTypeExtension();\n        case 'union':\n          return this.parseUnionTypeExtension();\n        case 'enum':\n          return this.parseEnumTypeExtension();\n        case 'input':\n          return this.parseInputObjectTypeExtension();\n      }\n    }\n    throw this.unexpected(keywordToken);\n  }\n  /**\n   * ```\n   * SchemaExtension :\n   *  - extend schema Directives[Const]? { OperationTypeDefinition+ }\n   *  - extend schema Directives[Const]\n   * ```\n   */\n\n  parseSchemaExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('schema');\n    const directives = this.parseConstDirectives();\n    const operationTypes = this.optionalMany(TokenKind.BRACE_L, this.parseOperationTypeDefinition, TokenKind.BRACE_R);\n    if (directives.length === 0 && operationTypes.length === 0) {\n      throw this.unexpected();\n    }\n    return this.node(start, {\n      kind: Kind.SCHEMA_EXTENSION,\n      directives,\n      operationTypes\n    });\n  }\n  /**\n   * ScalarTypeExtension :\n   *   - extend scalar Name Directives[Const]\n   */\n\n  parseScalarTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('scalar');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    if (directives.length === 0) {\n      throw this.unexpected();\n    }\n    return this.node(start, {\n      kind: Kind.SCALAR_TYPE_EXTENSION,\n      name,\n      directives\n    });\n  }\n  /**\n   * ObjectTypeExtension :\n   *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend type Name ImplementsInterfaces? Directives[Const]\n   *  - extend type Name ImplementsInterfaces\n   */\n\n  parseObjectTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('type');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n    if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n    return this.node(start, {\n      kind: Kind.OBJECT_TYPE_EXTENSION,\n      name,\n      interfaces,\n      directives,\n      fields\n    });\n  }\n  /**\n   * InterfaceTypeExtension :\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]\n   *  - extend interface Name ImplementsInterfaces\n   */\n\n  parseInterfaceTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('interface');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n    if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n    return this.node(start, {\n      kind: Kind.INTERFACE_TYPE_EXTENSION,\n      name,\n      interfaces,\n      directives,\n      fields\n    });\n  }\n  /**\n   * UnionTypeExtension :\n   *   - extend union Name Directives[Const]? UnionMemberTypes\n   *   - extend union Name Directives[Const]\n   */\n\n  parseUnionTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('union');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const types = this.parseUnionMemberTypes();\n    if (directives.length === 0 && types.length === 0) {\n      throw this.unexpected();\n    }\n    return this.node(start, {\n      kind: Kind.UNION_TYPE_EXTENSION,\n      name,\n      directives,\n      types\n    });\n  }\n  /**\n   * EnumTypeExtension :\n   *   - extend enum Name Directives[Const]? EnumValuesDefinition\n   *   - extend enum Name Directives[Const]\n   */\n\n  parseEnumTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('enum');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const values = this.parseEnumValuesDefinition();\n    if (directives.length === 0 && values.length === 0) {\n      throw this.unexpected();\n    }\n    return this.node(start, {\n      kind: Kind.ENUM_TYPE_EXTENSION,\n      name,\n      directives,\n      values\n    });\n  }\n  /**\n   * InputObjectTypeExtension :\n   *   - extend input Name Directives[Const]? InputFieldsDefinition\n   *   - extend input Name Directives[Const]\n   */\n\n  parseInputObjectTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('input');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseInputFieldsDefinition();\n    if (directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n    return this.node(start, {\n      kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,\n      name,\n      directives,\n      fields\n    });\n  }\n  /**\n   * ```\n   * DirectiveDefinition :\n   *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations\n   * ```\n   */\n\n  parseDirectiveDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('directive');\n    this.expectToken(TokenKind.AT);\n    const name = this.parseName();\n    const args = this.parseArgumentDefs();\n    const repeatable = this.expectOptionalKeyword('repeatable');\n    this.expectKeyword('on');\n    const locations = this.parseDirectiveLocations();\n    return this.node(start, {\n      kind: Kind.DIRECTIVE_DEFINITION,\n      description,\n      name,\n      arguments: args,\n      repeatable,\n      locations\n    });\n  }\n  /**\n   * DirectiveLocations :\n   *   - `|`? DirectiveLocation\n   *   - DirectiveLocations | DirectiveLocation\n   */\n\n  parseDirectiveLocations() {\n    return this.delimitedMany(TokenKind.PIPE, this.parseDirectiveLocation);\n  }\n  /*\n   * DirectiveLocation :\n   *   - ExecutableDirectiveLocation\n   *   - TypeSystemDirectiveLocation\n   *\n   * ExecutableDirectiveLocation : one of\n   *   `QUERY`\n   *   `MUTATION`\n   *   `SUBSCRIPTION`\n   *   `FIELD`\n   *   `FRAGMENT_DEFINITION`\n   *   `FRAGMENT_SPREAD`\n   *   `INLINE_FRAGMENT`\n   *\n   * TypeSystemDirectiveLocation : one of\n   *   `SCHEMA`\n   *   `SCALAR`\n   *   `OBJECT`\n   *   `FIELD_DEFINITION`\n   *   `ARGUMENT_DEFINITION`\n   *   `INTERFACE`\n   *   `UNION`\n   *   `ENUM`\n   *   `ENUM_VALUE`\n   *   `INPUT_OBJECT`\n   *   `INPUT_FIELD_DEFINITION`\n   */\n\n  parseDirectiveLocation() {\n    const start = this._lexer.token;\n    const name = this.parseName();\n    if (Object.prototype.hasOwnProperty.call(DirectiveLocation, name.value)) {\n      return name;\n    }\n    throw this.unexpected(start);\n  } // Core parsing utility functions\n\n  /**\n   * Returns a node that, if configured to do so, sets a \"loc\" field as a\n   * location object, used to identify the place in the source that created a\n   * given parsed object.\n   */\n\n  node(startToken, node) {\n    var _this$_options2;\n    if (((_this$_options2 = this._options) === null || _this$_options2 === void 0 ? void 0 : _this$_options2.noLocation) !== true) {\n      node.loc = new Location(startToken, this._lexer.lastToken, this._lexer.source);\n    }\n    return node;\n  }\n  /**\n   * Determines if the next token is of a given kind\n   */\n\n  peek(kind) {\n    return this._lexer.token.kind === kind;\n  }\n  /**\n   * If the next token is of the given kind, return that token after advancing the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n\n  expectToken(kind) {\n    const token = this._lexer.token;\n    if (token.kind === kind) {\n      this._lexer.advance();\n      return token;\n    }\n    throw syntaxError(this._lexer.source, token.start, `Expected ${getTokenKindDesc(kind)}, found ${getTokenDesc(token)}.`);\n  }\n  /**\n   * If the next token is of the given kind, return \"true\" after advancing the lexer.\n   * Otherwise, do not change the parser state and return \"false\".\n   */\n\n  expectOptionalToken(kind) {\n    const token = this._lexer.token;\n    if (token.kind === kind) {\n      this._lexer.advance();\n      return true;\n    }\n    return false;\n  }\n  /**\n   * If the next token is a given keyword, advance the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n\n  expectKeyword(value) {\n    const token = this._lexer.token;\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this._lexer.advance();\n    } else {\n      throw syntaxError(this._lexer.source, token.start, `Expected \"${value}\", found ${getTokenDesc(token)}.`);\n    }\n  }\n  /**\n   * If the next token is a given keyword, return \"true\" after advancing the lexer.\n   * Otherwise, do not change the parser state and return \"false\".\n   */\n\n  expectOptionalKeyword(value) {\n    const token = this._lexer.token;\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this._lexer.advance();\n      return true;\n    }\n    return false;\n  }\n  /**\n   * Helper function for creating an error when an unexpected lexed token is encountered.\n   */\n\n  unexpected(atToken) {\n    const token = atToken !== null && atToken !== void 0 ? atToken : this._lexer.token;\n    return syntaxError(this._lexer.source, token.start, `Unexpected ${getTokenDesc(token)}.`);\n  }\n  /**\n   * Returns a possibly empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  any(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    const nodes = [];\n    while (!this.expectOptionalToken(closeKind)) {\n      nodes.push(parseFn.call(this));\n    }\n    return nodes;\n  }\n  /**\n   * Returns a list of parse nodes, determined by the parseFn.\n   * It can be empty only if open token is missing otherwise it will always return non-empty list\n   * that begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  optionalMany(openKind, parseFn, closeKind) {\n    if (this.expectOptionalToken(openKind)) {\n      const nodes = [];\n      do {\n        nodes.push(parseFn.call(this));\n      } while (!this.expectOptionalToken(closeKind));\n      return nodes;\n    }\n    return [];\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  many(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    const nodes = [];\n    do {\n      nodes.push(parseFn.call(this));\n    } while (!this.expectOptionalToken(closeKind));\n    return nodes;\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list may begin with a lex token of delimiterKind followed by items separated by lex tokens of tokenKind.\n   * Advances the parser to the next lex token after last item in the list.\n   */\n\n  delimitedMany(delimiterKind, parseFn) {\n    this.expectOptionalToken(delimiterKind);\n    const nodes = [];\n    do {\n      nodes.push(parseFn.call(this));\n    } while (this.expectOptionalToken(delimiterKind));\n    return nodes;\n  }\n}\n/**\n * A helper function to describe a token as a string for debugging.\n */\n\nfunction getTokenDesc(token) {\n  const value = token.value;\n  return getTokenKindDesc(token.kind) + (value != null ? ` \"${value}\"` : '');\n}\n/**\n * A helper function to describe a token kind as a string for debugging.\n */\n\nfunction getTokenKindDesc(kind) {\n  return isPunctuatorTokenKind(kind) ? `\"${kind}\"` : kind;\n}","map":{"version":3,"names":["syntaxError","Location","OperationTypeNode","DirectiveLocation","Kind","isPunctuatorTokenKind","Lexer","isSource","Source","TokenKind","parse","source","options","parser","Parser","parseDocument","parseValue","expectToken","SOF","value","parseValueLiteral","EOF","parseConstValue","parseConstValueLiteral","parseType","type","parseTypeReference","constructor","sourceObj","_lexer","_options","parseName","token","NAME","node","kind","DOCUMENT","definitions","many","parseDefinition","peek","BRACE_L","parseOperationDefinition","hasDescription","peekDescription","keywordToken","lookahead","parseSchemaDefinition","parseScalarTypeDefinition","parseObjectTypeDefinition","parseInterfaceTypeDefinition","parseUnionTypeDefinition","parseEnumTypeDefinition","parseInputObjectTypeDefinition","parseDirectiveDefinition","start","parseFragmentDefinition","parseTypeSystemExtension","unexpected","OPERATION_DEFINITION","operation","QUERY","name","undefined","variableDefinitions","directives","selectionSet","parseSelectionSet","parseOperationType","parseVariableDefinitions","parseDirectives","operationToken","MUTATION","SUBSCRIPTION","optionalMany","PAREN_L","parseVariableDefinition","PAREN_R","VARIABLE_DEFINITION","variable","parseVariable","COLON","defaultValue","expectOptionalToken","EQUALS","parseConstDirectives","DOLLAR","VARIABLE","SELECTION_SET","selections","parseSelection","BRACE_R","SPREAD","parseFragment","parseField","nameOrAlias","alias","FIELD","arguments","parseArguments","isConst","item","parseConstArgument","parseArgument","ARGUMENT","hasTypeCondition","expectOptionalKeyword","FRAGMENT_SPREAD","parseFragmentName","INLINE_FRAGMENT","typeCondition","parseNamedType","_this$_options","expectKeyword","allowLegacyFragmentVariables","FRAGMENT_DEFINITION","BRACKET_L","parseList","parseObject","INT","advance","FLOAT","STRING","BLOCK_STRING","parseStringLiteral","BOOLEAN","NULL","ENUM","varName","block","LIST","values","any","BRACKET_R","parseObjectField","OBJECT","fields","OBJECT_FIELD","AT","push","parseDirective","DIRECTIVE","innerType","LIST_TYPE","BANG","NON_NULL_TYPE","NAMED_TYPE","parseDescription","description","operationTypes","parseOperationTypeDefinition","SCHEMA_DEFINITION","OPERATION_TYPE_DEFINITION","SCALAR_TYPE_DEFINITION","interfaces","parseImplementsInterfaces","parseFieldsDefinition","OBJECT_TYPE_DEFINITION","delimitedMany","AMP","parseFieldDefinition","args","parseArgumentDefs","FIELD_DEFINITION","parseInputValueDef","INPUT_VALUE_DEFINITION","INTERFACE_TYPE_DEFINITION","types","parseUnionMemberTypes","UNION_TYPE_DEFINITION","PIPE","parseEnumValuesDefinition","ENUM_TYPE_DEFINITION","parseEnumValueDefinition","parseEnumValueName","ENUM_VALUE_DEFINITION","getTokenDesc","parseInputFieldsDefinition","INPUT_OBJECT_TYPE_DEFINITION","parseSchemaExtension","parseScalarTypeExtension","parseObjectTypeExtension","parseInterfaceTypeExtension","parseUnionTypeExtension","parseEnumTypeExtension","parseInputObjectTypeExtension","length","SCHEMA_EXTENSION","SCALAR_TYPE_EXTENSION","OBJECT_TYPE_EXTENSION","INTERFACE_TYPE_EXTENSION","UNION_TYPE_EXTENSION","ENUM_TYPE_EXTENSION","INPUT_OBJECT_TYPE_EXTENSION","repeatable","locations","parseDirectiveLocations","DIRECTIVE_DEFINITION","parseDirectiveLocation","Object","prototype","hasOwnProperty","call","startToken","_this$_options2","noLocation","loc","lastToken","getTokenKindDesc","atToken","openKind","parseFn","closeKind","nodes","delimiterKind"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/graphql/language/parser.mjs"],"sourcesContent":["import { syntaxError } from '../error/syntaxError.mjs';\nimport { Location, OperationTypeNode } from './ast.mjs';\nimport { DirectiveLocation } from './directiveLocation.mjs';\nimport { Kind } from './kinds.mjs';\nimport { isPunctuatorTokenKind, Lexer } from './lexer.mjs';\nimport { isSource, Source } from './source.mjs';\nimport { TokenKind } from './tokenKind.mjs';\n/**\n * Configuration options to control parser behavior\n */\n\n/**\n * Given a GraphQL source, parses it into a Document.\n * Throws GraphQLError if a syntax error is encountered.\n */\nexport function parse(source, options) {\n  const parser = new Parser(source, options);\n  return parser.parseDocument();\n}\n/**\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\n * that value.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Values directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: valueFromAST().\n */\n\nexport function parseValue(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const value = parser.parseValueLiteral(false);\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Similar to parseValue(), but raises a parse error if it encounters a\n * variable. The return type will be a constant value.\n */\n\nexport function parseConstValue(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const value = parser.parseConstValueLiteral();\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\n * that type.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Types directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: typeFromAST().\n */\n\nexport function parseType(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const type = parser.parseTypeReference();\n  parser.expectToken(TokenKind.EOF);\n  return type;\n}\n/**\n * This class is exported only to assist people in implementing their own parsers\n * without duplicating too much code and should be used only as last resort for cases\n * such as experimental syntax or if certain features could not be contributed upstream.\n *\n * It is still part of the internal API and is versioned, so any changes to it are never\n * considered breaking changes. If you still need to support multiple versions of the\n * library, please use the `versionInfo` variable for version detection.\n *\n * @internal\n */\n\nexport class Parser {\n  constructor(source, options) {\n    const sourceObj = isSource(source) ? source : new Source(source);\n    this._lexer = new Lexer(sourceObj);\n    this._options = options;\n  }\n  /**\n   * Converts a name lex token into a name parse node.\n   */\n\n  parseName() {\n    const token = this.expectToken(TokenKind.NAME);\n    return this.node(token, {\n      kind: Kind.NAME,\n      value: token.value,\n    });\n  } // Implements the parsing rules in the Document section.\n\n  /**\n   * Document : Definition+\n   */\n\n  parseDocument() {\n    return this.node(this._lexer.token, {\n      kind: Kind.DOCUMENT,\n      definitions: this.many(\n        TokenKind.SOF,\n        this.parseDefinition,\n        TokenKind.EOF,\n      ),\n    });\n  }\n  /**\n   * Definition :\n   *   - ExecutableDefinition\n   *   - TypeSystemDefinition\n   *   - TypeSystemExtension\n   *\n   * ExecutableDefinition :\n   *   - OperationDefinition\n   *   - FragmentDefinition\n   *\n   * TypeSystemDefinition :\n   *   - SchemaDefinition\n   *   - TypeDefinition\n   *   - DirectiveDefinition\n   *\n   * TypeDefinition :\n   *   - ScalarTypeDefinition\n   *   - ObjectTypeDefinition\n   *   - InterfaceTypeDefinition\n   *   - UnionTypeDefinition\n   *   - EnumTypeDefinition\n   *   - InputObjectTypeDefinition\n   */\n\n  parseDefinition() {\n    if (this.peek(TokenKind.BRACE_L)) {\n      return this.parseOperationDefinition();\n    } // Many definitions begin with a description and require a lookahead.\n\n    const hasDescription = this.peekDescription();\n    const keywordToken = hasDescription\n      ? this._lexer.lookahead()\n      : this._lexer.token;\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaDefinition();\n\n        case 'scalar':\n          return this.parseScalarTypeDefinition();\n\n        case 'type':\n          return this.parseObjectTypeDefinition();\n\n        case 'interface':\n          return this.parseInterfaceTypeDefinition();\n\n        case 'union':\n          return this.parseUnionTypeDefinition();\n\n        case 'enum':\n          return this.parseEnumTypeDefinition();\n\n        case 'input':\n          return this.parseInputObjectTypeDefinition();\n\n        case 'directive':\n          return this.parseDirectiveDefinition();\n      }\n\n      if (hasDescription) {\n        throw syntaxError(\n          this._lexer.source,\n          this._lexer.token.start,\n          'Unexpected description, descriptions are supported only on type definitions.',\n        );\n      }\n\n      switch (keywordToken.value) {\n        case 'query':\n        case 'mutation':\n        case 'subscription':\n          return this.parseOperationDefinition();\n\n        case 'fragment':\n          return this.parseFragmentDefinition();\n\n        case 'extend':\n          return this.parseTypeSystemExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  } // Implements the parsing rules in the Operations section.\n\n  /**\n   * OperationDefinition :\n   *  - SelectionSet\n   *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\n   */\n\n  parseOperationDefinition() {\n    const start = this._lexer.token;\n\n    if (this.peek(TokenKind.BRACE_L)) {\n      return this.node(start, {\n        kind: Kind.OPERATION_DEFINITION,\n        operation: OperationTypeNode.QUERY,\n        name: undefined,\n        variableDefinitions: [],\n        directives: [],\n        selectionSet: this.parseSelectionSet(),\n      });\n    }\n\n    const operation = this.parseOperationType();\n    let name;\n\n    if (this.peek(TokenKind.NAME)) {\n      name = this.parseName();\n    }\n\n    return this.node(start, {\n      kind: Kind.OPERATION_DEFINITION,\n      operation,\n      name,\n      variableDefinitions: this.parseVariableDefinitions(),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * OperationType : one of query mutation subscription\n   */\n\n  parseOperationType() {\n    const operationToken = this.expectToken(TokenKind.NAME);\n\n    switch (operationToken.value) {\n      case 'query':\n        return OperationTypeNode.QUERY;\n\n      case 'mutation':\n        return OperationTypeNode.MUTATION;\n\n      case 'subscription':\n        return OperationTypeNode.SUBSCRIPTION;\n    }\n\n    throw this.unexpected(operationToken);\n  }\n  /**\n   * VariableDefinitions : ( VariableDefinition+ )\n   */\n\n  parseVariableDefinitions() {\n    return this.optionalMany(\n      TokenKind.PAREN_L,\n      this.parseVariableDefinition,\n      TokenKind.PAREN_R,\n    );\n  }\n  /**\n   * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?\n   */\n\n  parseVariableDefinition() {\n    return this.node(this._lexer.token, {\n      kind: Kind.VARIABLE_DEFINITION,\n      variable: this.parseVariable(),\n      type: (this.expectToken(TokenKind.COLON), this.parseTypeReference()),\n      defaultValue: this.expectOptionalToken(TokenKind.EQUALS)\n        ? this.parseConstValueLiteral()\n        : undefined,\n      directives: this.parseConstDirectives(),\n    });\n  }\n  /**\n   * Variable : $ Name\n   */\n\n  parseVariable() {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.DOLLAR);\n    return this.node(start, {\n      kind: Kind.VARIABLE,\n      name: this.parseName(),\n    });\n  }\n  /**\n   * ```\n   * SelectionSet : { Selection+ }\n   * ```\n   */\n\n  parseSelectionSet() {\n    return this.node(this._lexer.token, {\n      kind: Kind.SELECTION_SET,\n      selections: this.many(\n        TokenKind.BRACE_L,\n        this.parseSelection,\n        TokenKind.BRACE_R,\n      ),\n    });\n  }\n  /**\n   * Selection :\n   *   - Field\n   *   - FragmentSpread\n   *   - InlineFragment\n   */\n\n  parseSelection() {\n    return this.peek(TokenKind.SPREAD)\n      ? this.parseFragment()\n      : this.parseField();\n  }\n  /**\n   * Field : Alias? Name Arguments? Directives? SelectionSet?\n   *\n   * Alias : Name :\n   */\n\n  parseField() {\n    const start = this._lexer.token;\n    const nameOrAlias = this.parseName();\n    let alias;\n    let name;\n\n    if (this.expectOptionalToken(TokenKind.COLON)) {\n      alias = nameOrAlias;\n      name = this.parseName();\n    } else {\n      name = nameOrAlias;\n    }\n\n    return this.node(start, {\n      kind: Kind.FIELD,\n      alias,\n      name,\n      arguments: this.parseArguments(false),\n      directives: this.parseDirectives(false),\n      selectionSet: this.peek(TokenKind.BRACE_L)\n        ? this.parseSelectionSet()\n        : undefined,\n    });\n  }\n  /**\n   * Arguments[Const] : ( Argument[?Const]+ )\n   */\n\n  parseArguments(isConst) {\n    const item = isConst ? this.parseConstArgument : this.parseArgument;\n    return this.optionalMany(TokenKind.PAREN_L, item, TokenKind.PAREN_R);\n  }\n  /**\n   * Argument[Const] : Name : Value[?Const]\n   */\n\n  parseArgument(isConst = false) {\n    const start = this._lexer.token;\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return this.node(start, {\n      kind: Kind.ARGUMENT,\n      name,\n      value: this.parseValueLiteral(isConst),\n    });\n  }\n\n  parseConstArgument() {\n    return this.parseArgument(true);\n  } // Implements the parsing rules in the Fragments section.\n\n  /**\n   * Corresponds to both FragmentSpread and InlineFragment in the spec.\n   *\n   * FragmentSpread : ... FragmentName Directives?\n   *\n   * InlineFragment : ... TypeCondition? Directives? SelectionSet\n   */\n\n  parseFragment() {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.SPREAD);\n    const hasTypeCondition = this.expectOptionalKeyword('on');\n\n    if (!hasTypeCondition && this.peek(TokenKind.NAME)) {\n      return this.node(start, {\n        kind: Kind.FRAGMENT_SPREAD,\n        name: this.parseFragmentName(),\n        directives: this.parseDirectives(false),\n      });\n    }\n\n    return this.node(start, {\n      kind: Kind.INLINE_FRAGMENT,\n      typeCondition: hasTypeCondition ? this.parseNamedType() : undefined,\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * FragmentDefinition :\n   *   - fragment FragmentName on TypeCondition Directives? SelectionSet\n   *\n   * TypeCondition : NamedType\n   */\n\n  parseFragmentDefinition() {\n    var _this$_options;\n\n    const start = this._lexer.token;\n    this.expectKeyword('fragment'); // Legacy support for defining variables within fragments changes\n    // the grammar of FragmentDefinition:\n    //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet\n\n    if (\n      ((_this$_options = this._options) === null || _this$_options === void 0\n        ? void 0\n        : _this$_options.allowLegacyFragmentVariables) === true\n    ) {\n      return this.node(start, {\n        kind: Kind.FRAGMENT_DEFINITION,\n        name: this.parseFragmentName(),\n        variableDefinitions: this.parseVariableDefinitions(),\n        typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n        directives: this.parseDirectives(false),\n        selectionSet: this.parseSelectionSet(),\n      });\n    }\n\n    return this.node(start, {\n      kind: Kind.FRAGMENT_DEFINITION,\n      name: this.parseFragmentName(),\n      typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * FragmentName : Name but not `on`\n   */\n\n  parseFragmentName() {\n    if (this._lexer.token.value === 'on') {\n      throw this.unexpected();\n    }\n\n    return this.parseName();\n  } // Implements the parsing rules in the Values section.\n\n  /**\n   * Value[Const] :\n   *   - [~Const] Variable\n   *   - IntValue\n   *   - FloatValue\n   *   - StringValue\n   *   - BooleanValue\n   *   - NullValue\n   *   - EnumValue\n   *   - ListValue[?Const]\n   *   - ObjectValue[?Const]\n   *\n   * BooleanValue : one of `true` `false`\n   *\n   * NullValue : `null`\n   *\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n\n  parseValueLiteral(isConst) {\n    const token = this._lexer.token;\n\n    switch (token.kind) {\n      case TokenKind.BRACKET_L:\n        return this.parseList(isConst);\n\n      case TokenKind.BRACE_L:\n        return this.parseObject(isConst);\n\n      case TokenKind.INT:\n        this._lexer.advance();\n\n        return this.node(token, {\n          kind: Kind.INT,\n          value: token.value,\n        });\n\n      case TokenKind.FLOAT:\n        this._lexer.advance();\n\n        return this.node(token, {\n          kind: Kind.FLOAT,\n          value: token.value,\n        });\n\n      case TokenKind.STRING:\n      case TokenKind.BLOCK_STRING:\n        return this.parseStringLiteral();\n\n      case TokenKind.NAME:\n        this._lexer.advance();\n\n        switch (token.value) {\n          case 'true':\n            return this.node(token, {\n              kind: Kind.BOOLEAN,\n              value: true,\n            });\n\n          case 'false':\n            return this.node(token, {\n              kind: Kind.BOOLEAN,\n              value: false,\n            });\n\n          case 'null':\n            return this.node(token, {\n              kind: Kind.NULL,\n            });\n\n          default:\n            return this.node(token, {\n              kind: Kind.ENUM,\n              value: token.value,\n            });\n        }\n\n      case TokenKind.DOLLAR:\n        if (isConst) {\n          this.expectToken(TokenKind.DOLLAR);\n\n          if (this._lexer.token.kind === TokenKind.NAME) {\n            const varName = this._lexer.token.value;\n            throw syntaxError(\n              this._lexer.source,\n              token.start,\n              `Unexpected variable \"$${varName}\" in constant value.`,\n            );\n          } else {\n            throw this.unexpected(token);\n          }\n        }\n\n        return this.parseVariable();\n\n      default:\n        throw this.unexpected();\n    }\n  }\n\n  parseConstValueLiteral() {\n    return this.parseValueLiteral(true);\n  }\n\n  parseStringLiteral() {\n    const token = this._lexer.token;\n\n    this._lexer.advance();\n\n    return this.node(token, {\n      kind: Kind.STRING,\n      value: token.value,\n      block: token.kind === TokenKind.BLOCK_STRING,\n    });\n  }\n  /**\n   * ListValue[Const] :\n   *   - [ ]\n   *   - [ Value[?Const]+ ]\n   */\n\n  parseList(isConst) {\n    const item = () => this.parseValueLiteral(isConst);\n\n    return this.node(this._lexer.token, {\n      kind: Kind.LIST,\n      values: this.any(TokenKind.BRACKET_L, item, TokenKind.BRACKET_R),\n    });\n  }\n  /**\n   * ```\n   * ObjectValue[Const] :\n   *   - { }\n   *   - { ObjectField[?Const]+ }\n   * ```\n   */\n\n  parseObject(isConst) {\n    const item = () => this.parseObjectField(isConst);\n\n    return this.node(this._lexer.token, {\n      kind: Kind.OBJECT,\n      fields: this.any(TokenKind.BRACE_L, item, TokenKind.BRACE_R),\n    });\n  }\n  /**\n   * ObjectField[Const] : Name : Value[?Const]\n   */\n\n  parseObjectField(isConst) {\n    const start = this._lexer.token;\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return this.node(start, {\n      kind: Kind.OBJECT_FIELD,\n      name,\n      value: this.parseValueLiteral(isConst),\n    });\n  } // Implements the parsing rules in the Directives section.\n\n  /**\n   * Directives[Const] : Directive[?Const]+\n   */\n\n  parseDirectives(isConst) {\n    const directives = [];\n\n    while (this.peek(TokenKind.AT)) {\n      directives.push(this.parseDirective(isConst));\n    }\n\n    return directives;\n  }\n\n  parseConstDirectives() {\n    return this.parseDirectives(true);\n  }\n  /**\n   * ```\n   * Directive[Const] : @ Name Arguments[?Const]?\n   * ```\n   */\n\n  parseDirective(isConst) {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.AT);\n    return this.node(start, {\n      kind: Kind.DIRECTIVE,\n      name: this.parseName(),\n      arguments: this.parseArguments(isConst),\n    });\n  } // Implements the parsing rules in the Types section.\n\n  /**\n   * Type :\n   *   - NamedType\n   *   - ListType\n   *   - NonNullType\n   */\n\n  parseTypeReference() {\n    const start = this._lexer.token;\n    let type;\n\n    if (this.expectOptionalToken(TokenKind.BRACKET_L)) {\n      const innerType = this.parseTypeReference();\n      this.expectToken(TokenKind.BRACKET_R);\n      type = this.node(start, {\n        kind: Kind.LIST_TYPE,\n        type: innerType,\n      });\n    } else {\n      type = this.parseNamedType();\n    }\n\n    if (this.expectOptionalToken(TokenKind.BANG)) {\n      return this.node(start, {\n        kind: Kind.NON_NULL_TYPE,\n        type,\n      });\n    }\n\n    return type;\n  }\n  /**\n   * NamedType : Name\n   */\n\n  parseNamedType() {\n    return this.node(this._lexer.token, {\n      kind: Kind.NAMED_TYPE,\n      name: this.parseName(),\n    });\n  } // Implements the parsing rules in the Type Definition section.\n\n  peekDescription() {\n    return this.peek(TokenKind.STRING) || this.peek(TokenKind.BLOCK_STRING);\n  }\n  /**\n   * Description : StringValue\n   */\n\n  parseDescription() {\n    if (this.peekDescription()) {\n      return this.parseStringLiteral();\n    }\n  }\n  /**\n   * ```\n   * SchemaDefinition : Description? schema Directives[Const]? { OperationTypeDefinition+ }\n   * ```\n   */\n\n  parseSchemaDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('schema');\n    const directives = this.parseConstDirectives();\n    const operationTypes = this.many(\n      TokenKind.BRACE_L,\n      this.parseOperationTypeDefinition,\n      TokenKind.BRACE_R,\n    );\n    return this.node(start, {\n      kind: Kind.SCHEMA_DEFINITION,\n      description,\n      directives,\n      operationTypes,\n    });\n  }\n  /**\n   * OperationTypeDefinition : OperationType : NamedType\n   */\n\n  parseOperationTypeDefinition() {\n    const start = this._lexer.token;\n    const operation = this.parseOperationType();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseNamedType();\n    return this.node(start, {\n      kind: Kind.OPERATION_TYPE_DEFINITION,\n      operation,\n      type,\n    });\n  }\n  /**\n   * ScalarTypeDefinition : Description? scalar Name Directives[Const]?\n   */\n\n  parseScalarTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('scalar');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.SCALAR_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n    });\n  }\n  /**\n   * ObjectTypeDefinition :\n   *   Description?\n   *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?\n   */\n\n  parseObjectTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('type');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.OBJECT_TYPE_DEFINITION,\n      description,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ImplementsInterfaces :\n   *   - implements `&`? NamedType\n   *   - ImplementsInterfaces & NamedType\n   */\n\n  parseImplementsInterfaces() {\n    return this.expectOptionalKeyword('implements')\n      ? this.delimitedMany(TokenKind.AMP, this.parseNamedType)\n      : [];\n  }\n  /**\n   * ```\n   * FieldsDefinition : { FieldDefinition+ }\n   * ```\n   */\n\n  parseFieldsDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseFieldDefinition,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * FieldDefinition :\n   *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?\n   */\n\n  parseFieldDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseName();\n    const args = this.parseArgumentDefs();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseTypeReference();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.FIELD_DEFINITION,\n      description,\n      name,\n      arguments: args,\n      type,\n      directives,\n    });\n  }\n  /**\n   * ArgumentsDefinition : ( InputValueDefinition+ )\n   */\n\n  parseArgumentDefs() {\n    return this.optionalMany(\n      TokenKind.PAREN_L,\n      this.parseInputValueDef,\n      TokenKind.PAREN_R,\n    );\n  }\n  /**\n   * InputValueDefinition :\n   *   - Description? Name : Type DefaultValue? Directives[Const]?\n   */\n\n  parseInputValueDef() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseTypeReference();\n    let defaultValue;\n\n    if (this.expectOptionalToken(TokenKind.EQUALS)) {\n      defaultValue = this.parseConstValueLiteral();\n    }\n\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.INPUT_VALUE_DEFINITION,\n      description,\n      name,\n      type,\n      defaultValue,\n      directives,\n    });\n  }\n  /**\n   * InterfaceTypeDefinition :\n   *   - Description? interface Name Directives[Const]? FieldsDefinition?\n   */\n\n  parseInterfaceTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('interface');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.INTERFACE_TYPE_DEFINITION,\n      description,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * UnionTypeDefinition :\n   *   - Description? union Name Directives[Const]? UnionMemberTypes?\n   */\n\n  parseUnionTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('union');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const types = this.parseUnionMemberTypes();\n    return this.node(start, {\n      kind: Kind.UNION_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      types,\n    });\n  }\n  /**\n   * UnionMemberTypes :\n   *   - = `|`? NamedType\n   *   - UnionMemberTypes | NamedType\n   */\n\n  parseUnionMemberTypes() {\n    return this.expectOptionalToken(TokenKind.EQUALS)\n      ? this.delimitedMany(TokenKind.PIPE, this.parseNamedType)\n      : [];\n  }\n  /**\n   * EnumTypeDefinition :\n   *   - Description? enum Name Directives[Const]? EnumValuesDefinition?\n   */\n\n  parseEnumTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('enum');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const values = this.parseEnumValuesDefinition();\n    return this.node(start, {\n      kind: Kind.ENUM_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      values,\n    });\n  }\n  /**\n   * ```\n   * EnumValuesDefinition : { EnumValueDefinition+ }\n   * ```\n   */\n\n  parseEnumValuesDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseEnumValueDefinition,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * EnumValueDefinition : Description? EnumValue Directives[Const]?\n   */\n\n  parseEnumValueDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseEnumValueName();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.ENUM_VALUE_DEFINITION,\n      description,\n      name,\n      directives,\n    });\n  }\n  /**\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n\n  parseEnumValueName() {\n    if (\n      this._lexer.token.value === 'true' ||\n      this._lexer.token.value === 'false' ||\n      this._lexer.token.value === 'null'\n    ) {\n      throw syntaxError(\n        this._lexer.source,\n        this._lexer.token.start,\n        `${getTokenDesc(\n          this._lexer.token,\n        )} is reserved and cannot be used for an enum value.`,\n      );\n    }\n\n    return this.parseName();\n  }\n  /**\n   * InputObjectTypeDefinition :\n   *   - Description? input Name Directives[Const]? InputFieldsDefinition?\n   */\n\n  parseInputObjectTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('input');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseInputFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ```\n   * InputFieldsDefinition : { InputValueDefinition+ }\n   * ```\n   */\n\n  parseInputFieldsDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseInputValueDef,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * TypeSystemExtension :\n   *   - SchemaExtension\n   *   - TypeExtension\n   *\n   * TypeExtension :\n   *   - ScalarTypeExtension\n   *   - ObjectTypeExtension\n   *   - InterfaceTypeExtension\n   *   - UnionTypeExtension\n   *   - EnumTypeExtension\n   *   - InputObjectTypeDefinition\n   */\n\n  parseTypeSystemExtension() {\n    const keywordToken = this._lexer.lookahead();\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaExtension();\n\n        case 'scalar':\n          return this.parseScalarTypeExtension();\n\n        case 'type':\n          return this.parseObjectTypeExtension();\n\n        case 'interface':\n          return this.parseInterfaceTypeExtension();\n\n        case 'union':\n          return this.parseUnionTypeExtension();\n\n        case 'enum':\n          return this.parseEnumTypeExtension();\n\n        case 'input':\n          return this.parseInputObjectTypeExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  }\n  /**\n   * ```\n   * SchemaExtension :\n   *  - extend schema Directives[Const]? { OperationTypeDefinition+ }\n   *  - extend schema Directives[Const]\n   * ```\n   */\n\n  parseSchemaExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('schema');\n    const directives = this.parseConstDirectives();\n    const operationTypes = this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseOperationTypeDefinition,\n      TokenKind.BRACE_R,\n    );\n\n    if (directives.length === 0 && operationTypes.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.SCHEMA_EXTENSION,\n      directives,\n      operationTypes,\n    });\n  }\n  /**\n   * ScalarTypeExtension :\n   *   - extend scalar Name Directives[Const]\n   */\n\n  parseScalarTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('scalar');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n\n    if (directives.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.SCALAR_TYPE_EXTENSION,\n      name,\n      directives,\n    });\n  }\n  /**\n   * ObjectTypeExtension :\n   *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend type Name ImplementsInterfaces? Directives[Const]\n   *  - extend type Name ImplementsInterfaces\n   */\n\n  parseObjectTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('type');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n\n    if (\n      interfaces.length === 0 &&\n      directives.length === 0 &&\n      fields.length === 0\n    ) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.OBJECT_TYPE_EXTENSION,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * InterfaceTypeExtension :\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]\n   *  - extend interface Name ImplementsInterfaces\n   */\n\n  parseInterfaceTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('interface');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n\n    if (\n      interfaces.length === 0 &&\n      directives.length === 0 &&\n      fields.length === 0\n    ) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.INTERFACE_TYPE_EXTENSION,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * UnionTypeExtension :\n   *   - extend union Name Directives[Const]? UnionMemberTypes\n   *   - extend union Name Directives[Const]\n   */\n\n  parseUnionTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('union');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const types = this.parseUnionMemberTypes();\n\n    if (directives.length === 0 && types.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.UNION_TYPE_EXTENSION,\n      name,\n      directives,\n      types,\n    });\n  }\n  /**\n   * EnumTypeExtension :\n   *   - extend enum Name Directives[Const]? EnumValuesDefinition\n   *   - extend enum Name Directives[Const]\n   */\n\n  parseEnumTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('enum');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const values = this.parseEnumValuesDefinition();\n\n    if (directives.length === 0 && values.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.ENUM_TYPE_EXTENSION,\n      name,\n      directives,\n      values,\n    });\n  }\n  /**\n   * InputObjectTypeExtension :\n   *   - extend input Name Directives[Const]? InputFieldsDefinition\n   *   - extend input Name Directives[Const]\n   */\n\n  parseInputObjectTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('input');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseInputFieldsDefinition();\n\n    if (directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,\n      name,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ```\n   * DirectiveDefinition :\n   *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations\n   * ```\n   */\n\n  parseDirectiveDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('directive');\n    this.expectToken(TokenKind.AT);\n    const name = this.parseName();\n    const args = this.parseArgumentDefs();\n    const repeatable = this.expectOptionalKeyword('repeatable');\n    this.expectKeyword('on');\n    const locations = this.parseDirectiveLocations();\n    return this.node(start, {\n      kind: Kind.DIRECTIVE_DEFINITION,\n      description,\n      name,\n      arguments: args,\n      repeatable,\n      locations,\n    });\n  }\n  /**\n   * DirectiveLocations :\n   *   - `|`? DirectiveLocation\n   *   - DirectiveLocations | DirectiveLocation\n   */\n\n  parseDirectiveLocations() {\n    return this.delimitedMany(TokenKind.PIPE, this.parseDirectiveLocation);\n  }\n  /*\n   * DirectiveLocation :\n   *   - ExecutableDirectiveLocation\n   *   - TypeSystemDirectiveLocation\n   *\n   * ExecutableDirectiveLocation : one of\n   *   `QUERY`\n   *   `MUTATION`\n   *   `SUBSCRIPTION`\n   *   `FIELD`\n   *   `FRAGMENT_DEFINITION`\n   *   `FRAGMENT_SPREAD`\n   *   `INLINE_FRAGMENT`\n   *\n   * TypeSystemDirectiveLocation : one of\n   *   `SCHEMA`\n   *   `SCALAR`\n   *   `OBJECT`\n   *   `FIELD_DEFINITION`\n   *   `ARGUMENT_DEFINITION`\n   *   `INTERFACE`\n   *   `UNION`\n   *   `ENUM`\n   *   `ENUM_VALUE`\n   *   `INPUT_OBJECT`\n   *   `INPUT_FIELD_DEFINITION`\n   */\n\n  parseDirectiveLocation() {\n    const start = this._lexer.token;\n    const name = this.parseName();\n\n    if (Object.prototype.hasOwnProperty.call(DirectiveLocation, name.value)) {\n      return name;\n    }\n\n    throw this.unexpected(start);\n  } // Core parsing utility functions\n\n  /**\n   * Returns a node that, if configured to do so, sets a \"loc\" field as a\n   * location object, used to identify the place in the source that created a\n   * given parsed object.\n   */\n\n  node(startToken, node) {\n    var _this$_options2;\n\n    if (\n      ((_this$_options2 = this._options) === null || _this$_options2 === void 0\n        ? void 0\n        : _this$_options2.noLocation) !== true\n    ) {\n      node.loc = new Location(\n        startToken,\n        this._lexer.lastToken,\n        this._lexer.source,\n      );\n    }\n\n    return node;\n  }\n  /**\n   * Determines if the next token is of a given kind\n   */\n\n  peek(kind) {\n    return this._lexer.token.kind === kind;\n  }\n  /**\n   * If the next token is of the given kind, return that token after advancing the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n\n  expectToken(kind) {\n    const token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this._lexer.advance();\n\n      return token;\n    }\n\n    throw syntaxError(\n      this._lexer.source,\n      token.start,\n      `Expected ${getTokenKindDesc(kind)}, found ${getTokenDesc(token)}.`,\n    );\n  }\n  /**\n   * If the next token is of the given kind, return \"true\" after advancing the lexer.\n   * Otherwise, do not change the parser state and return \"false\".\n   */\n\n  expectOptionalToken(kind) {\n    const token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this._lexer.advance();\n\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * If the next token is a given keyword, advance the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n\n  expectKeyword(value) {\n    const token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this._lexer.advance();\n    } else {\n      throw syntaxError(\n        this._lexer.source,\n        token.start,\n        `Expected \"${value}\", found ${getTokenDesc(token)}.`,\n      );\n    }\n  }\n  /**\n   * If the next token is a given keyword, return \"true\" after advancing the lexer.\n   * Otherwise, do not change the parser state and return \"false\".\n   */\n\n  expectOptionalKeyword(value) {\n    const token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this._lexer.advance();\n\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Helper function for creating an error when an unexpected lexed token is encountered.\n   */\n\n  unexpected(atToken) {\n    const token =\n      atToken !== null && atToken !== void 0 ? atToken : this._lexer.token;\n    return syntaxError(\n      this._lexer.source,\n      token.start,\n      `Unexpected ${getTokenDesc(token)}.`,\n    );\n  }\n  /**\n   * Returns a possibly empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  any(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    const nodes = [];\n\n    while (!this.expectOptionalToken(closeKind)) {\n      nodes.push(parseFn.call(this));\n    }\n\n    return nodes;\n  }\n  /**\n   * Returns a list of parse nodes, determined by the parseFn.\n   * It can be empty only if open token is missing otherwise it will always return non-empty list\n   * that begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  optionalMany(openKind, parseFn, closeKind) {\n    if (this.expectOptionalToken(openKind)) {\n      const nodes = [];\n\n      do {\n        nodes.push(parseFn.call(this));\n      } while (!this.expectOptionalToken(closeKind));\n\n      return nodes;\n    }\n\n    return [];\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  many(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    const nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (!this.expectOptionalToken(closeKind));\n\n    return nodes;\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list may begin with a lex token of delimiterKind followed by items separated by lex tokens of tokenKind.\n   * Advances the parser to the next lex token after last item in the list.\n   */\n\n  delimitedMany(delimiterKind, parseFn) {\n    this.expectOptionalToken(delimiterKind);\n    const nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (this.expectOptionalToken(delimiterKind));\n\n    return nodes;\n  }\n}\n/**\n * A helper function to describe a token as a string for debugging.\n */\n\nfunction getTokenDesc(token) {\n  const value = token.value;\n  return getTokenKindDesc(token.kind) + (value != null ? ` \"${value}\"` : '');\n}\n/**\n * A helper function to describe a token kind as a string for debugging.\n */\n\nfunction getTokenKindDesc(kind) {\n  return isPunctuatorTokenKind(kind) ? `\"${kind}\"` : kind;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}