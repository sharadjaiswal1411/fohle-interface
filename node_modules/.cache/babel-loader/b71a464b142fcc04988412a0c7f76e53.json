{"ast":null,"code":"import _slicedToArray from\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _defineProperty from\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";// HOW TO USE:\n// the hook returns a record of booleans, where the key is the name of the breakpoint\n// if the screen size is greater than or equal to the breakpoint, the value will be true\n// for example if the screen size is 1024px, the value of the 'md' key will be true and the value of the 'lg' key will be true\n// if you were to check if the screen is smaller than a breakpoint you would check if it is false\nimport{useEffect,useState}from'react';import{BREAKPOINTS}from'theme';var isClient=typeof window!=='undefined';function getScreenSize(){return Object.keys(BREAKPOINTS).reduce(function(obj,key){return Object.assign(obj,_defineProperty({},key,isClient?window.innerWidth>=BREAKPOINTS[key]:false));},{});}export function useScreenSize(){var _useState=useState(getScreenSize()),_useState2=_slicedToArray(_useState,2),screenSize=_useState2[0],setScreenSize=_useState2[1];useEffect(function(){function handleResize(){setScreenSize(getScreenSize());}if(isClient){window.addEventListener('resize',handleResize);return function(){window.removeEventListener('resize',handleResize);};}return undefined;},[]);return screenSize;}","map":{"version":3,"names":["useEffect","useState","BREAKPOINTS","isClient","window","getScreenSize","Object","keys","reduce","obj","key","assign","innerWidth","useScreenSize","screenSize","setScreenSize","handleResize","addEventListener","removeEventListener","undefined"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/hooks/useScreenSize.ts"],"sourcesContent":["// HOW TO USE:\n// the hook returns a record of booleans, where the key is the name of the breakpoint\n// if the screen size is greater than or equal to the breakpoint, the value will be true\n// for example if the screen size is 1024px, the value of the 'md' key will be true and the value of the 'lg' key will be true\n// if you were to check if the screen is smaller than a breakpoint you would check if it is false\n\nimport { useEffect, useState } from 'react'\nimport { BREAKPOINTS } from 'theme'\n\nconst isClient = typeof window !== 'undefined'\n\nfunction getScreenSize(): Record<keyof typeof BREAKPOINTS, boolean> {\n  return Object.keys(BREAKPOINTS).reduce(\n    (obj, key) =>\n      Object.assign(obj, {\n        [key]: isClient ? window.innerWidth >= BREAKPOINTS[key as keyof typeof BREAKPOINTS] : false,\n      }),\n    {} as Record<keyof typeof BREAKPOINTS, boolean>\n  )\n}\n\nexport function useScreenSize(): Record<keyof typeof BREAKPOINTS, boolean> {\n  const [screenSize, setScreenSize] = useState(getScreenSize())\n\n  useEffect(() => {\n    function handleResize() {\n      setScreenSize(getScreenSize())\n    }\n\n    if (isClient) {\n      window.addEventListener('resize', handleResize)\n      return () => {\n        window.removeEventListener('resize', handleResize)\n      }\n    }\n    return undefined\n  }, [])\n\n  return screenSize\n}\n"],"mappings":"0VAAA;AACA;AACA;AACA;AACA;AAEA,OAASA,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAC3C,OAASC,WAAW,KAAQ,OAAO,CAEnC,GAAMC,SAAQ,CAAG,MAAOC,OAAM,GAAK,WAAW,CAE9C,QAASC,cAAa,EAA8C,CAClE,MAAOC,OAAM,CAACC,IAAI,CAACL,WAAW,CAAC,CAACM,MAAM,CACpC,SAACC,GAAG,CAAEC,GAAG,QACPJ,OAAM,CAACK,MAAM,CAACF,GAAG,oBACdC,GAAG,CAAGP,QAAQ,CAAGC,MAAM,CAACQ,UAAU,EAAIV,WAAW,CAACQ,GAAG,CAA6B,CAAG,KAAK,EAC3F,GACJ,CAAC,CAAC,CACH,CACH,CAEA,MAAO,SAASG,cAAa,EAA8C,CACzE,cAAoCZ,QAAQ,CAACI,aAAa,EAAE,CAAC,wCAAtDS,UAAU,eAAEC,aAAa,eAEhCf,SAAS,CAAC,UAAM,CACd,QAASgB,aAAY,EAAG,CACtBD,aAAa,CAACV,aAAa,EAAE,CAAC,CAChC,CAEA,GAAIF,QAAQ,CAAE,CACZC,MAAM,CAACa,gBAAgB,CAAC,QAAQ,CAAED,YAAY,CAAC,CAC/C,MAAO,WAAM,CACXZ,MAAM,CAACc,mBAAmB,CAAC,QAAQ,CAAEF,YAAY,CAAC,CACpD,CAAC,CACH,CACA,MAAOG,UAAS,CAClB,CAAC,CAAE,EAAE,CAAC,CAEN,MAAOL,WAAU,CACnB"},"metadata":{},"sourceType":"module"}