{"ast":null,"code":"import _regeneratorRuntime from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _ from 'lodash';\nimport stats from 'stats-lite';\nimport { UniswapInterfaceMulticall__factory } from '../types/v3/factories/UniswapInterfaceMulticall__factory';\nimport { UNISWAP_MULTICALL_ADDRESSES } from '../util/addresses';\nimport { log } from '../util/log';\nimport { IMulticallProvider } from './multicall-provider';\n/**\n * The UniswapMulticall contract has added functionality for limiting the amount of gas\n * that each call within the multicall can consume. This is useful for operations where\n * a call could consume such a large amount of gas that it causes the node to error out\n * with an out of gas error.\n *\n * @export\n * @class UniswapMulticallProvider\n */\nexport var UniswapMulticallProvider = /*#__PURE__*/function (_IMulticallProvider) {\n  _inherits(UniswapMulticallProvider, _IMulticallProvider);\n  var _super = _createSuper(UniswapMulticallProvider);\n  function UniswapMulticallProvider(chainId, provider) {\n    var _this;\n    var gasLimitPerCall = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1000000;\n    _classCallCheck(this, UniswapMulticallProvider);\n    _this = _super.call(this);\n    _this.chainId = chainId;\n    _this.provider = provider;\n    _this.gasLimitPerCall = gasLimitPerCall;\n    var multicallAddress = UNISWAP_MULTICALL_ADDRESSES[_this.chainId];\n    if (!multicallAddress) {\n      throw new Error(\"No address for Uniswap Multicall Contract on chain id: \".concat(chainId));\n    }\n    _this.multicallContract = UniswapInterfaceMulticall__factory.connect(multicallAddress, _this.provider);\n    return _this;\n  }\n  _createClass(UniswapMulticallProvider, [{\n    key: \"callSameFunctionOnMultipleContracts\",\n    value: function () {\n      var _callSameFunctionOnMultipleContracts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(params) {\n        var _this2 = this;\n        var _a, addresses, contractInterface, functionName, functionParams, providerConfig, blockNumberOverride, fragment, callData, calls, _yield$this$multicall, blockNumber, aggregateResults, results, i, _aggregateResults$i, success, returnData;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                addresses = params.addresses, contractInterface = params.contractInterface, functionName = params.functionName, functionParams = params.functionParams, providerConfig = params.providerConfig;\n                blockNumberOverride = (_a = providerConfig === null || providerConfig === void 0 ? void 0 : providerConfig.blockNumber) !== null && _a !== void 0 ? _a : undefined;\n                fragment = contractInterface.getFunction(functionName);\n                callData = contractInterface.encodeFunctionData(fragment, functionParams);\n                calls = _.map(addresses, function (address) {\n                  return {\n                    target: address,\n                    callData: callData,\n                    gasLimit: _this2.gasLimitPerCall\n                  };\n                });\n                log.debug({\n                  calls: calls\n                }, \"About to multicall for \".concat(functionName, \" across \").concat(addresses.length, \" addresses\"));\n                _context.next = 8;\n                return this.multicallContract.callStatic.multicall(calls, {\n                  blockTag: blockNumberOverride\n                });\n              case 8:\n                _yield$this$multicall = _context.sent;\n                blockNumber = _yield$this$multicall.blockNumber;\n                aggregateResults = _yield$this$multicall.returnData;\n                results = [];\n                i = 0;\n              case 13:\n                if (!(i < aggregateResults.length)) {\n                  _context.next = 23;\n                  break;\n                }\n                _aggregateResults$i = aggregateResults[i], success = _aggregateResults$i.success, returnData = _aggregateResults$i.returnData; // Return data \"0x\" is sometimes returned for invalid calls.\n                if (!(!success || returnData.length <= 2)) {\n                  _context.next = 19;\n                  break;\n                }\n                log.debug({\n                  result: aggregateResults[i]\n                }, \"Invalid result calling \".concat(functionName, \" on address \").concat(addresses[i]));\n                results.push({\n                  success: false,\n                  returnData: returnData\n                });\n                return _context.abrupt(\"continue\", 20);\n              case 19:\n                results.push({\n                  success: true,\n                  result: contractInterface.decodeFunctionResult(fragment, returnData)\n                });\n              case 20:\n                i++;\n                _context.next = 13;\n                break;\n              case 23:\n                log.debug({\n                  results: results\n                }, \"Results for multicall on \".concat(functionName, \" across \").concat(addresses.length, \" addresses as of block \").concat(blockNumber));\n                return _context.abrupt(\"return\", {\n                  blockNumber: blockNumber,\n                  results: results\n                });\n              case 25:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function callSameFunctionOnMultipleContracts(_x) {\n        return _callSameFunctionOnMultipleContracts.apply(this, arguments);\n      }\n      return callSameFunctionOnMultipleContracts;\n    }()\n  }, {\n    key: \"callSameFunctionOnContractWithMultipleParams\",\n    value: function () {\n      var _callSameFunctionOnContractWithMultipleParams = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(params) {\n        var _a, _b, address, contractInterface, functionName, functionParams, additionalConfig, providerConfig, fragment, gasLimitPerCall, blockNumberOverride, calls, _yield$this$multicall2, blockNumber, aggregateResults, results, gasUsedForSuccess, i, _aggregateResults$i2, success, returnData, gasUsed;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                address = params.address, contractInterface = params.contractInterface, functionName = params.functionName, functionParams = params.functionParams, additionalConfig = params.additionalConfig, providerConfig = params.providerConfig;\n                fragment = contractInterface.getFunction(functionName);\n                gasLimitPerCall = (_a = additionalConfig === null || additionalConfig === void 0 ? void 0 : additionalConfig.gasLimitPerCallOverride) !== null && _a !== void 0 ? _a : this.gasLimitPerCall;\n                blockNumberOverride = (_b = providerConfig === null || providerConfig === void 0 ? void 0 : providerConfig.blockNumber) !== null && _b !== void 0 ? _b : undefined;\n                calls = _.map(functionParams, function (functionParam) {\n                  var callData = contractInterface.encodeFunctionData(fragment, functionParam);\n                  return {\n                    target: address,\n                    callData: callData,\n                    gasLimit: gasLimitPerCall\n                  };\n                });\n                log.debug({\n                  calls: calls\n                }, \"About to multicall for \".concat(functionName, \" at address \").concat(address, \" with \").concat(functionParams.length, \" different sets of params\"));\n                _context2.next = 8;\n                return this.multicallContract.callStatic.multicall(calls, {\n                  blockTag: blockNumberOverride\n                });\n              case 8:\n                _yield$this$multicall2 = _context2.sent;\n                blockNumber = _yield$this$multicall2.blockNumber;\n                aggregateResults = _yield$this$multicall2.returnData;\n                results = [];\n                gasUsedForSuccess = [];\n                i = 0;\n              case 14:\n                if (!(i < aggregateResults.length)) {\n                  _context2.next = 25;\n                  break;\n                }\n                _aggregateResults$i2 = aggregateResults[i], success = _aggregateResults$i2.success, returnData = _aggregateResults$i2.returnData, gasUsed = _aggregateResults$i2.gasUsed; // Return data \"0x\" is sometimes returned for invalid pools.\n                if (!(!success || returnData.length <= 2)) {\n                  _context2.next = 20;\n                  break;\n                }\n                log.debug({\n                  result: aggregateResults[i]\n                }, \"Invalid result calling \".concat(functionName, \" with params \").concat(functionParams[i]));\n                results.push({\n                  success: false,\n                  returnData: returnData\n                });\n                return _context2.abrupt(\"continue\", 22);\n              case 20:\n                gasUsedForSuccess.push(gasUsed.toNumber());\n                results.push({\n                  success: true,\n                  result: contractInterface.decodeFunctionResult(fragment, returnData)\n                });\n              case 22:\n                i++;\n                _context2.next = 14;\n                break;\n              case 25:\n                log.debug({\n                  results: results,\n                  functionName: functionName,\n                  address: address\n                }, \"Results for multicall for \".concat(functionName, \" at address \").concat(address, \" with \").concat(functionParams.length, \" different sets of params. Results as of block \").concat(blockNumber));\n                return _context2.abrupt(\"return\", {\n                  blockNumber: blockNumber,\n                  results: results,\n                  approxGasUsedPerSuccessCall: stats.percentile(gasUsedForSuccess, 99)\n                });\n              case 27:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function callSameFunctionOnContractWithMultipleParams(_x2) {\n        return _callSameFunctionOnContractWithMultipleParams.apply(this, arguments);\n      }\n      return callSameFunctionOnContractWithMultipleParams;\n    }()\n  }, {\n    key: \"callMultipleFunctionsOnSameContract\",\n    value: function () {\n      var _callMultipleFunctionsOnSameContract = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(params) {\n        var _a, _b, address, contractInterface, functionNames, functionParams, additionalConfig, providerConfig, gasLimitPerCall, blockNumberOverride, calls, _yield$this$multicall3, blockNumber, aggregateResults, results, gasUsedForSuccess, i, fragment, _aggregateResults$i3, success, returnData, gasUsed;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                address = params.address, contractInterface = params.contractInterface, functionNames = params.functionNames, functionParams = params.functionParams, additionalConfig = params.additionalConfig, providerConfig = params.providerConfig;\n                gasLimitPerCall = (_a = additionalConfig === null || additionalConfig === void 0 ? void 0 : additionalConfig.gasLimitPerCallOverride) !== null && _a !== void 0 ? _a : this.gasLimitPerCall;\n                blockNumberOverride = (_b = providerConfig === null || providerConfig === void 0 ? void 0 : providerConfig.blockNumber) !== null && _b !== void 0 ? _b : undefined;\n                calls = _.map(functionNames, function (functionName, i) {\n                  var fragment = contractInterface.getFunction(functionName);\n                  var param = functionParams ? functionParams[i] : [];\n                  var callData = contractInterface.encodeFunctionData(fragment, param);\n                  return {\n                    target: address,\n                    callData: callData,\n                    gasLimit: gasLimitPerCall\n                  };\n                });\n                log.debug({\n                  calls: calls\n                }, \"About to multicall for \".concat(functionNames.length, \" functions at address \").concat(address, \" with \").concat(functionParams === null || functionParams === void 0 ? void 0 : functionParams.length, \" different sets of params\"));\n                _context3.next = 7;\n                return this.multicallContract.callStatic.multicall(calls, {\n                  blockTag: blockNumberOverride\n                });\n              case 7:\n                _yield$this$multicall3 = _context3.sent;\n                blockNumber = _yield$this$multicall3.blockNumber;\n                aggregateResults = _yield$this$multicall3.returnData;\n                results = [];\n                gasUsedForSuccess = [];\n                i = 0;\n              case 13:\n                if (!(i < aggregateResults.length)) {\n                  _context3.next = 25;\n                  break;\n                }\n                fragment = contractInterface.getFunction(functionNames[i]);\n                _aggregateResults$i3 = aggregateResults[i], success = _aggregateResults$i3.success, returnData = _aggregateResults$i3.returnData, gasUsed = _aggregateResults$i3.gasUsed; // Return data \"0x\" is sometimes returned for invalid pools.\n                if (!(!success || returnData.length <= 2)) {\n                  _context3.next = 20;\n                  break;\n                }\n                log.debug({\n                  result: aggregateResults[i]\n                }, \"Invalid result calling \".concat(functionNames[i], \" with \").concat(functionParams ? functionParams[i] : '0', \" params\"));\n                results.push({\n                  success: false,\n                  returnData: returnData\n                });\n                return _context3.abrupt(\"continue\", 22);\n              case 20:\n                gasUsedForSuccess.push(gasUsed.toNumber());\n                results.push({\n                  success: true,\n                  result: contractInterface.decodeFunctionResult(fragment, returnData)\n                });\n              case 22:\n                i++;\n                _context3.next = 13;\n                break;\n              case 25:\n                log.debug({\n                  results: results,\n                  functionNames: functionNames,\n                  address: address\n                }, \"Results for multicall for \".concat(functionNames.length, \" functions at address \").concat(address, \" with \").concat(functionParams ? functionParams.length : ' 0', \" different sets of params. Results as of block \").concat(blockNumber));\n                return _context3.abrupt(\"return\", {\n                  blockNumber: blockNumber,\n                  results: results,\n                  approxGasUsedPerSuccessCall: stats.percentile(gasUsedForSuccess, 99)\n                });\n              case 27:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function callMultipleFunctionsOnSameContract(_x3) {\n        return _callMultipleFunctionsOnSameContract.apply(this, arguments);\n      }\n      return callMultipleFunctionsOnSameContract;\n    }()\n  }]);\n  return UniswapMulticallProvider;\n}(IMulticallProvider);","map":{"version":3,"sources":["../../../src/providers/multicall-uniswap-provider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import _ from 'lodash';\nimport stats from 'stats-lite';\nimport { UniswapInterfaceMulticall__factory } from '../types/v3/factories/UniswapInterfaceMulticall__factory';\nimport { UNISWAP_MULTICALL_ADDRESSES } from '../util/addresses';\nimport { log } from '../util/log';\nimport { IMulticallProvider, } from './multicall-provider';\n/**\n * The UniswapMulticall contract has added functionality for limiting the amount of gas\n * that each call within the multicall can consume. This is useful for operations where\n * a call could consume such a large amount of gas that it causes the node to error out\n * with an out of gas error.\n *\n * @export\n * @class UniswapMulticallProvider\n */\nexport class UniswapMulticallProvider extends IMulticallProvider {\n    constructor(chainId, provider, gasLimitPerCall = 1000000) {\n        super();\n        this.chainId = chainId;\n        this.provider = provider;\n        this.gasLimitPerCall = gasLimitPerCall;\n        const multicallAddress = UNISWAP_MULTICALL_ADDRESSES[this.chainId];\n        if (!multicallAddress) {\n            throw new Error(`No address for Uniswap Multicall Contract on chain id: ${chainId}`);\n        }\n        this.multicallContract = UniswapInterfaceMulticall__factory.connect(multicallAddress, this.provider);\n    }\n    async callSameFunctionOnMultipleContracts(params) {\n        var _a;\n        const { addresses, contractInterface, functionName, functionParams, providerConfig, } = params;\n        const blockNumberOverride = (_a = providerConfig === null || providerConfig === void 0 ? void 0 : providerConfig.blockNumber) !== null && _a !== void 0 ? _a : undefined;\n        const fragment = contractInterface.getFunction(functionName);\n        const callData = contractInterface.encodeFunctionData(fragment, functionParams);\n        const calls = _.map(addresses, (address) => {\n            return {\n                target: address,\n                callData,\n                gasLimit: this.gasLimitPerCall,\n            };\n        });\n        log.debug({ calls }, `About to multicall for ${functionName} across ${addresses.length} addresses`);\n        const { blockNumber, returnData: aggregateResults } = await this.multicallContract.callStatic.multicall(calls, {\n            blockTag: blockNumberOverride,\n        });\n        const results = [];\n        for (let i = 0; i < aggregateResults.length; i++) {\n            const { success, returnData } = aggregateResults[i];\n            // Return data \"0x\" is sometimes returned for invalid calls.\n            if (!success || returnData.length <= 2) {\n                log.debug({ result: aggregateResults[i] }, `Invalid result calling ${functionName} on address ${addresses[i]}`);\n                results.push({\n                    success: false,\n                    returnData,\n                });\n                continue;\n            }\n            results.push({\n                success: true,\n                result: contractInterface.decodeFunctionResult(fragment, returnData),\n            });\n        }\n        log.debug({ results }, `Results for multicall on ${functionName} across ${addresses.length} addresses as of block ${blockNumber}`);\n        return { blockNumber, results };\n    }\n    async callSameFunctionOnContractWithMultipleParams(params) {\n        var _a, _b;\n        const { address, contractInterface, functionName, functionParams, additionalConfig, providerConfig, } = params;\n        const fragment = contractInterface.getFunction(functionName);\n        const gasLimitPerCall = (_a = additionalConfig === null || additionalConfig === void 0 ? void 0 : additionalConfig.gasLimitPerCallOverride) !== null && _a !== void 0 ? _a : this.gasLimitPerCall;\n        const blockNumberOverride = (_b = providerConfig === null || providerConfig === void 0 ? void 0 : providerConfig.blockNumber) !== null && _b !== void 0 ? _b : undefined;\n        const calls = _.map(functionParams, (functionParam) => {\n            const callData = contractInterface.encodeFunctionData(fragment, functionParam);\n            return {\n                target: address,\n                callData,\n                gasLimit: gasLimitPerCall,\n            };\n        });\n        log.debug({ calls }, `About to multicall for ${functionName} at address ${address} with ${functionParams.length} different sets of params`);\n        const { blockNumber, returnData: aggregateResults } = await this.multicallContract.callStatic.multicall(calls, {\n            blockTag: blockNumberOverride,\n        });\n        const results = [];\n        const gasUsedForSuccess = [];\n        for (let i = 0; i < aggregateResults.length; i++) {\n            const { success, returnData, gasUsed } = aggregateResults[i];\n            // Return data \"0x\" is sometimes returned for invalid pools.\n            if (!success || returnData.length <= 2) {\n                log.debug({ result: aggregateResults[i] }, `Invalid result calling ${functionName} with params ${functionParams[i]}`);\n                results.push({\n                    success: false,\n                    returnData,\n                });\n                continue;\n            }\n            gasUsedForSuccess.push(gasUsed.toNumber());\n            results.push({\n                success: true,\n                result: contractInterface.decodeFunctionResult(fragment, returnData),\n            });\n        }\n        log.debug({ results, functionName, address }, `Results for multicall for ${functionName} at address ${address} with ${functionParams.length} different sets of params. Results as of block ${blockNumber}`);\n        return {\n            blockNumber,\n            results,\n            approxGasUsedPerSuccessCall: stats.percentile(gasUsedForSuccess, 99),\n        };\n    }\n    async callMultipleFunctionsOnSameContract(params) {\n        var _a, _b;\n        const { address, contractInterface, functionNames, functionParams, additionalConfig, providerConfig, } = params;\n        const gasLimitPerCall = (_a = additionalConfig === null || additionalConfig === void 0 ? void 0 : additionalConfig.gasLimitPerCallOverride) !== null && _a !== void 0 ? _a : this.gasLimitPerCall;\n        const blockNumberOverride = (_b = providerConfig === null || providerConfig === void 0 ? void 0 : providerConfig.blockNumber) !== null && _b !== void 0 ? _b : undefined;\n        const calls = _.map(functionNames, (functionName, i) => {\n            const fragment = contractInterface.getFunction(functionName);\n            const param = functionParams ? functionParams[i] : [];\n            const callData = contractInterface.encodeFunctionData(fragment, param);\n            return {\n                target: address,\n                callData,\n                gasLimit: gasLimitPerCall,\n            };\n        });\n        log.debug({ calls }, `About to multicall for ${functionNames.length} functions at address ${address} with ${functionParams === null || functionParams === void 0 ? void 0 : functionParams.length} different sets of params`);\n        const { blockNumber, returnData: aggregateResults } = await this.multicallContract.callStatic.multicall(calls, {\n            blockTag: blockNumberOverride,\n        });\n        const results = [];\n        const gasUsedForSuccess = [];\n        for (let i = 0; i < aggregateResults.length; i++) {\n            const fragment = contractInterface.getFunction(functionNames[i]);\n            const { success, returnData, gasUsed } = aggregateResults[i];\n            // Return data \"0x\" is sometimes returned for invalid pools.\n            if (!success || returnData.length <= 2) {\n                log.debug({ result: aggregateResults[i] }, `Invalid result calling ${functionNames[i]} with ${functionParams ? functionParams[i] : '0'} params`);\n                results.push({\n                    success: false,\n                    returnData,\n                });\n                continue;\n            }\n            gasUsedForSuccess.push(gasUsed.toNumber());\n            results.push({\n                success: true,\n                result: contractInterface.decodeFunctionResult(fragment, returnData),\n            });\n        }\n        log.debug({ results, functionNames, address }, `Results for multicall for ${functionNames.length} functions at address ${address} with ${functionParams ? functionParams.length : ' 0'} different sets of params. Results as of block ${blockNumber}`);\n        return {\n            blockNumber,\n            results,\n            approxGasUsedPerSuccessCall: stats.percentile(gasUsedForSuccess, 99),\n        };\n    }\n}\n//# sourceMappingURL=data:application/json;base64,"]},"metadata":{},"sourceType":"module"}