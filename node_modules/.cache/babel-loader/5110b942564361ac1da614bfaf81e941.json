{"ast":null,"code":"var _s = $RefreshSig$();\nimport { TradeType } from '@uniswap/sdk-core';\nimport { useMemo } from 'react';\n/**\n * Returns query arguments for the Routing API query or undefined if the\n * query should be skipped. Input arguments do not need to be memoized, as they will\n * be destructured.\n */\nexport function useRoutingAPIArguments(_ref) {\n  _s();\n  let {\n    tokenIn,\n    tokenOut,\n    amount,\n    tradeType,\n    routerPreference\n  } = _ref;\n  return useMemo(() => !tokenIn || !tokenOut || !amount || tokenIn.equals(tokenOut) ? undefined : {\n    amount: amount.quotient.toString(),\n    tokenInAddress: tokenIn.wrapped.address,\n    tokenInChainId: tokenIn.wrapped.chainId,\n    tokenInDecimals: tokenIn.wrapped.decimals,\n    tokenInSymbol: tokenIn.wrapped.symbol,\n    tokenOutAddress: tokenOut.wrapped.address,\n    tokenOutChainId: tokenOut.wrapped.chainId,\n    tokenOutDecimals: tokenOut.wrapped.decimals,\n    tokenOutSymbol: tokenOut.wrapped.symbol,\n    routerPreference,\n    type: tradeType === TradeType.EXACT_INPUT ? 'exactIn' : 'exactOut'\n  }, [amount, routerPreference, tokenIn, tokenOut, tradeType]);\n}\n_s(useRoutingAPIArguments, \"nwk+m61qLgjDVUp4IGV/072DDN4=\");","map":{"version":3,"names":["TradeType","useMemo","useRoutingAPIArguments","tokenIn","tokenOut","amount","tradeType","routerPreference","equals","undefined","quotient","toString","tokenInAddress","wrapped","address","tokenInChainId","chainId","tokenInDecimals","decimals","tokenInSymbol","symbol","tokenOutAddress","tokenOutChainId","tokenOutDecimals","tokenOutSymbol","type","EXACT_INPUT"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/lib/hooks/routing/useRoutingAPIArguments.ts"],"sourcesContent":["import { Currency, CurrencyAmount, TradeType } from '@uniswap/sdk-core'\nimport { useMemo } from 'react'\nimport { RouterPreference } from 'state/routing/slice'\n\n/**\n * Returns query arguments for the Routing API query or undefined if the\n * query should be skipped. Input arguments do not need to be memoized, as they will\n * be destructured.\n */\nexport function useRoutingAPIArguments({\n  tokenIn,\n  tokenOut,\n  amount,\n  tradeType,\n  routerPreference,\n}: {\n  tokenIn: Currency | undefined\n  tokenOut: Currency | undefined\n  amount: CurrencyAmount<Currency> | undefined\n  tradeType: TradeType\n  routerPreference: RouterPreference\n}) {\n  return useMemo(\n    () =>\n      !tokenIn || !tokenOut || !amount || tokenIn.equals(tokenOut)\n        ? undefined\n        : {\n            amount: amount.quotient.toString(),\n            tokenInAddress: tokenIn.wrapped.address,\n            tokenInChainId: tokenIn.wrapped.chainId,\n            tokenInDecimals: tokenIn.wrapped.decimals,\n            tokenInSymbol: tokenIn.wrapped.symbol,\n            tokenOutAddress: tokenOut.wrapped.address,\n            tokenOutChainId: tokenOut.wrapped.chainId,\n            tokenOutDecimals: tokenOut.wrapped.decimals,\n            tokenOutSymbol: tokenOut.wrapped.symbol,\n            routerPreference,\n            type: (tradeType === TradeType.EXACT_INPUT ? 'exactIn' : 'exactOut') as 'exactIn' | 'exactOut',\n          },\n    [amount, routerPreference, tokenIn, tokenOut, tradeType]\n  )\n}\n"],"mappings":";AAAA,SAAmCA,SAAS,QAAQ,mBAAmB;AACvE,SAASC,OAAO,QAAQ,OAAO;AAG/B;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,sBAAsB,OAYnC;EAAA;EAAA,IAZoC;IACrCC,OAAO;IACPC,QAAQ;IACRC,MAAM;IACNC,SAAS;IACTC;EAOF,CAAC;EACC,OAAON,OAAO,CACZ,MACE,CAACE,OAAO,IAAI,CAACC,QAAQ,IAAI,CAACC,MAAM,IAAIF,OAAO,CAACK,MAAM,CAACJ,QAAQ,CAAC,GACxDK,SAAS,GACT;IACEJ,MAAM,EAAEA,MAAM,CAACK,QAAQ,CAACC,QAAQ,EAAE;IAClCC,cAAc,EAAET,OAAO,CAACU,OAAO,CAACC,OAAO;IACvCC,cAAc,EAAEZ,OAAO,CAACU,OAAO,CAACG,OAAO;IACvCC,eAAe,EAAEd,OAAO,CAACU,OAAO,CAACK,QAAQ;IACzCC,aAAa,EAAEhB,OAAO,CAACU,OAAO,CAACO,MAAM;IACrCC,eAAe,EAAEjB,QAAQ,CAACS,OAAO,CAACC,OAAO;IACzCQ,eAAe,EAAElB,QAAQ,CAACS,OAAO,CAACG,OAAO;IACzCO,gBAAgB,EAAEnB,QAAQ,CAACS,OAAO,CAACK,QAAQ;IAC3CM,cAAc,EAAEpB,QAAQ,CAACS,OAAO,CAACO,MAAM;IACvCb,gBAAgB;IAChBkB,IAAI,EAAGnB,SAAS,KAAKN,SAAS,CAAC0B,WAAW,GAAG,SAAS,GAAG;EAC3D,CAAC,EACP,CAACrB,MAAM,EAAEE,gBAAgB,EAAEJ,OAAO,EAAEC,QAAQ,EAAEE,SAAS,CAAC,CACzD;AACH;AAAC,GAhCeJ,sBAAsB"},"metadata":{},"sourceType":"module"}