{"ast":null,"code":"import retry from 'async-retry';\nimport Timeout from 'await-timeout';\nimport axios from 'axios';\nimport { log } from '../util/log';\n/**\n * Gets subgraph pools from a URI. The URI shoudl contain a JSON\n * stringified array of V2SubgraphPool objects or V3SubgraphPool\n * objects.\n *\n * @export\n * @class URISubgraphProvider\n * @template TSubgraphPool\n */\nexport class URISubgraphProvider {\n  constructor(chainId, uri) {\n    let timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 6000;\n    let retries = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 2;\n    this.chainId = chainId;\n    this.uri = uri;\n    this.timeout = timeout;\n    this.retries = retries;\n  }\n  async getPools() {\n    log.info({\n      uri: this.uri\n    }, `About to get subgraph pools from URI ${this.uri}`);\n    let allPools = [];\n    await retry(async () => {\n      const timeout = new Timeout();\n      const timerPromise = timeout.set(this.timeout).then(() => {\n        throw new Error(`Timed out getting pools from subgraph: ${this.timeout}`);\n      });\n      let response;\n      /* eslint-disable no-useless-catch */\n      try {\n        response = await Promise.race([axios.get(this.uri), timerPromise]);\n      } catch (err) {\n        throw err;\n      } finally {\n        timeout.clear();\n      }\n      /* eslint-enable no-useless-catch */\n      const {\n        data: poolsBuffer,\n        status\n      } = response;\n      if (status != 200) {\n        log.error({\n          response\n        }, `Unabled to get pools from ${this.uri}.`);\n        throw new Error(`Unable to get pools from ${this.uri}`);\n      }\n      const pools = poolsBuffer;\n      log.info({\n        uri: this.uri,\n        chain: this.chainId\n      }, `Got subgraph pools from uri. Num: ${pools.length}`);\n      allPools = pools;\n    }, {\n      retries: this.retries,\n      onRetry: (err, retry) => {\n        log.info({\n          err\n        }, `Failed to get pools from uri ${this.uri}. Retry attempt: ${retry}`);\n      }\n    });\n    return allPools;\n  }\n}","map":{"version":3,"sources":["../../../src/providers/uri-subgraph-provider.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,aAAa;AAC/B,OAAO,OAAO,MAAM,eAAe;AACnC,OAAO,KAAK,MAAM,OAAO;AAGzB,SAAS,GAAG,QAAQ,aAAa;AAKjC;;;;;;;;AAQG;AACH,OAAM,MAAO,mBAAmB,CAAA;EAG9B,WAAA,CACU,OAAgB,EAChB,GAAW,EAEA;IAAA,IADX,OAAA,uEAAU,IAAI;IAAA,IACd,OAAA,uEAAU,CAAC;IAHX,IAAA,CAAA,OAAO,GAAP,OAAO;IACP,IAAA,CAAA,GAAG,GAAH,GAAG;IACH,IAAA,CAAA,OAAO,GAAP,OAAO;IACP,IAAA,CAAA,OAAO,GAAP,OAAO;EACd;EAEI,MAAM,QAAQ,GAAA;IACnB,GAAG,CAAC,IAAI,CACN;MAAE,GAAG,EAAE,IAAI,CAAC;IAAG,CAAE,EACjB,wCAAwC,IAAI,CAAC,GAAG,EAAE,CACnD;IAED,IAAI,QAAQ,GAAoB,EAAE;IAElC,MAAM,KAAK,CACT,YAAW;MACT,MAAM,OAAO,GAAG,IAAI,OAAO,EAAE;MAC7B,MAAM,YAAY,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,MAAK;QACvD,MAAM,IAAI,KAAK,CACb,0CAA0C,IAAI,CAAC,OAAO,EAAE,CACzD;MACH,CAAC,CAAC;MAEF,IAAI,QAAQ;MAEZ;MACA,IAAI;QACF,QAAQ,GAAG,MAAM,OAAO,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,CAAC;OACnE,CAAC,OAAO,GAAG,EAAE;QACZ,MAAM,GAAG;OACV,SAAS;QACR,OAAO,CAAC,KAAK,EAAE;MAChB;MACD;MAEA,MAAM;QAAE,IAAI,EAAE,WAAW;QAAE;MAAM,CAAE,GAAG,QAAQ;MAE9C,IAAI,MAAM,IAAI,GAAG,EAAE;QACjB,GAAG,CAAC,KAAK,CAAC;UAAE;QAAQ,CAAE,EAAE,6BAA6B,IAAI,CAAC,GAAG,GAAG,CAAC;QAEjE,MAAM,IAAI,KAAK,CAAC,4BAA4B,IAAI,CAAC,GAAG,EAAE,CAAC;MACxD;MAED,MAAM,KAAK,GAAG,WAA8B;MAE5C,GAAG,CAAC,IAAI,CACN;QAAE,GAAG,EAAE,IAAI,CAAC,GAAG;QAAE,KAAK,EAAE,IAAI,CAAC;MAAO,CAAE,EACtC,qCAAqC,KAAK,CAAC,MAAM,EAAE,CACpD;MAED,QAAQ,GAAG,KAAK;IAClB,CAAC,EACD;MACE,OAAO,EAAE,IAAI,CAAC,OAAO;MACrB,OAAO,EAAE,CAAC,GAAG,EAAE,KAAK,KAAI;QACtB,GAAG,CAAC,IAAI,CACN;UAAE;QAAG,CAAE,EACP,gCAAgC,IAAI,CAAC,GAAG,oBAAoB,KAAK,EAAE,CACpE;MACH;KACD,CACF;IAED,OAAO,QAAQ;EACjB;AACD","sourceRoot":"","sourcesContent":["import retry from 'async-retry';\nimport Timeout from 'await-timeout';\nimport axios from 'axios';\nimport { log } from '../util/log';\n/**\n * Gets subgraph pools from a URI. The URI shoudl contain a JSON\n * stringified array of V2SubgraphPool objects or V3SubgraphPool\n * objects.\n *\n * @export\n * @class URISubgraphProvider\n * @template TSubgraphPool\n */\nexport class URISubgraphProvider {\n    constructor(chainId, uri, timeout = 6000, retries = 2) {\n        this.chainId = chainId;\n        this.uri = uri;\n        this.timeout = timeout;\n        this.retries = retries;\n    }\n    async getPools() {\n        log.info({ uri: this.uri }, `About to get subgraph pools from URI ${this.uri}`);\n        let allPools = [];\n        await retry(async () => {\n            const timeout = new Timeout();\n            const timerPromise = timeout.set(this.timeout).then(() => {\n                throw new Error(`Timed out getting pools from subgraph: ${this.timeout}`);\n            });\n            let response;\n            /* eslint-disable no-useless-catch */\n            try {\n                response = await Promise.race([axios.get(this.uri), timerPromise]);\n            }\n            catch (err) {\n                throw err;\n            }\n            finally {\n                timeout.clear();\n            }\n            /* eslint-enable no-useless-catch */\n            const { data: poolsBuffer, status } = response;\n            if (status != 200) {\n                log.error({ response }, `Unabled to get pools from ${this.uri}.`);\n                throw new Error(`Unable to get pools from ${this.uri}`);\n            }\n            const pools = poolsBuffer;\n            log.info({ uri: this.uri, chain: this.chainId }, `Got subgraph pools from uri. Num: ${pools.length}`);\n            allPools = pools;\n        }, {\n            retries: this.retries,\n            onRetry: (err, retry) => {\n                log.info({ err }, `Failed to get pools from uri ${this.uri}. Retry attempt: ${retry}`);\n            },\n        });\n        return allPools;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXJpLXN1YmdyYXBoLXByb3ZpZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3Byb3ZpZGVycy91cmktc3ViZ3JhcGgtcHJvdmlkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxLQUFLLE1BQU0sYUFBYSxDQUFDO0FBQ2hDLE9BQU8sT0FBTyxNQUFNLGVBQWUsQ0FBQztBQUNwQyxPQUFPLEtBQUssTUFBTSxPQUFPLENBQUM7QUFHMUIsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUtsQzs7Ozs7Ozs7R0FRRztBQUNILE1BQU0sT0FBTyxtQkFBbUI7SUFHOUIsWUFDVSxPQUFnQixFQUNoQixHQUFXLEVBQ1gsVUFBVSxJQUFJLEVBQ2QsVUFBVSxDQUFDO1FBSFgsWUFBTyxHQUFQLE9BQU8sQ0FBUztRQUNoQixRQUFHLEdBQUgsR0FBRyxDQUFRO1FBQ1gsWUFBTyxHQUFQLE9BQU8sQ0FBTztRQUNkLFlBQU8sR0FBUCxPQUFPLENBQUk7SUFDbEIsQ0FBQztJQUVHLEtBQUssQ0FBQyxRQUFRO1FBQ25CLEdBQUcsQ0FBQyxJQUFJLENBQ04sRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUNqQix3Q0FBd0MsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUNuRCxDQUFDO1FBRUYsSUFBSSxRQUFRLEdBQW9CLEVBQUUsQ0FBQztRQUVuQyxNQUFNLEtBQUssQ0FDVCxLQUFLLElBQUksRUFBRTtZQUNULE1BQU0sT0FBTyxHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7WUFDOUIsTUFBTSxZQUFZLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRTtnQkFDdkQsTUFBTSxJQUFJLEtBQUssQ0FDYiwwQ0FBMEMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUN6RCxDQUFDO1lBQ0osQ0FBQyxDQUFDLENBQUM7WUFFSCxJQUFJLFFBQVEsQ0FBQztZQUViLHFDQUFxQztZQUNyQyxJQUFJO2dCQUNGLFFBQVEsR0FBRyxNQUFNLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDO2FBQ3BFO1lBQUMsT0FBTyxHQUFHLEVBQUU7Z0JBQ1osTUFBTSxHQUFHLENBQUM7YUFDWDtvQkFBUztnQkFDUixPQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7YUFDakI7WUFDRCxvQ0FBb0M7WUFFcEMsTUFBTSxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLEdBQUcsUUFBUSxDQUFDO1lBRS9DLElBQUksTUFBTSxJQUFJLEdBQUcsRUFBRTtnQkFDakIsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLFFBQVEsRUFBRSxFQUFFLDZCQUE2QixJQUFJLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQztnQkFFbEUsTUFBTSxJQUFJLEtBQUssQ0FBQyw0QkFBNEIsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7YUFDekQ7WUFFRCxNQUFNLEtBQUssR0FBRyxXQUE4QixDQUFDO1lBRTdDLEdBQUcsQ0FBQyxJQUFJLENBQ04sRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUN0QyxxQ0FBcUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUNwRCxDQUFDO1lBRUYsUUFBUSxHQUFHLEtBQUssQ0FBQztRQUNuQixDQUFDLEVBQ0Q7WUFDRSxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU87WUFDckIsT0FBTyxFQUFFLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxFQUFFO2dCQUN0QixHQUFHLENBQUMsSUFBSSxDQUNOLEVBQUUsR0FBRyxFQUFFLEVBQ1AsZ0NBQWdDLElBQUksQ0FBQyxHQUFHLG9CQUFvQixLQUFLLEVBQUUsQ0FDcEUsQ0FBQztZQUNKLENBQUM7U0FDRixDQUNGLENBQUM7UUFFRixPQUFPLFFBQVEsQ0FBQztJQUNsQixDQUFDO0NBQ0YifQ=="]},"metadata":{},"sourceType":"module"}