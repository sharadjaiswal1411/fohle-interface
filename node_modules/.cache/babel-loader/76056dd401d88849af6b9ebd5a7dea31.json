{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nvar _a, _b, _c, _d;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getAdvancedOrderNumeratorDenominator = exports.generateFulfillOrdersFulfillments = exports.fulfillAvailableOrders = exports.validateAndSanitizeFromOrderStatus = exports.fulfillStandardOrder = exports.fulfillBasicOrder = exports.shouldUseBasicFulfill = void 0;\nvar ethers_1 = require(\"ethers\");\nvar constants_1 = require(\"../constants\");\nvar approval_1 = require(\"./approval\");\nvar balanceAndApprovalCheck_1 = require(\"./balanceAndApprovalCheck\");\nvar criteria_1 = require(\"./criteria\");\nvar gcd_1 = require(\"./gcd\");\nvar item_1 = require(\"./item\");\nvar order_1 = require(\"./order\");\nvar usecase_1 = require(\"./usecase\");\n/**\n * We should use basic fulfill order if the order adheres to the following criteria:\n * 1. The order should not be partially filled.\n * 2. The order only contains a single offer item and contains at least one consideration item\n * 3. The order does not offer an item with Ether (or other native tokens) as its item type.\n * 4. The order only contains a single ERC721 or ERC1155 item and that item is not criteria-based\n * 5. All other items have the same Native or ERC20 item type and token\n * 6. All items have the same startAmount and endAmount\n * 7. First consideration item must contain the offerer as the recipient\n * 8. If the order has multiple consideration items and all consideration items other than the\n *    first consideration item have the same item type as the offered item, the offered item\n *    amount is not less than the sum of all consideration item amounts excluding the\n *    first consideration item amount\n * 9. The token on native currency items needs to be set to the null address and the identifier on\n *    currencies needs to be zero, and the amounts on the 721 item need to be 1\n */\nvar shouldUseBasicFulfill = function (_a, totalFilled) {\n  var offer = _a.offer,\n    consideration = _a.consideration,\n    offerer = _a.offerer;\n  // 1. The order must not be partially filled\n  if (!totalFilled.eq(0)) {\n    return false;\n  }\n  // 2. Must be single offer and at least one consideration\n  if (offer.length > 1 || consideration.length === 0) {\n    return false;\n  }\n  var allItems = __spreadArray(__spreadArray([], __read(offer), false), __read(consideration), false);\n  var nfts = allItems.filter(function (_a) {\n    var itemType = _a.itemType;\n    return [constants_1.ItemType.ERC721, constants_1.ItemType.ERC1155].includes(itemType);\n  });\n  var nftsWithCriteria = allItems.filter(function (_a) {\n    var itemType = _a.itemType;\n    return (0, item_1.isCriteriaItem)(itemType);\n  });\n  var offersNativeCurrency = (0, item_1.isNativeCurrencyItem)(offer[0]);\n  // 3. The order does not offer an item with Ether (or other native tokens) as its item type.\n  if (offersNativeCurrency) {\n    return false;\n  }\n  // 4. The order only contains a single ERC721 or ERC1155 item and that item is not criteria-based\n  if (nfts.length !== 1 || nftsWithCriteria.length !== 0) {\n    return false;\n  }\n  // 5. All currencies need to have the same address and item type (Native, ERC20)\n  if (!(0, order_1.areAllCurrenciesSame)({\n    offer: offer,\n    consideration: consideration\n  })) {\n    return false;\n  }\n  // 6. All individual items need to have the same startAmount and endAmount\n  var differentStartAndEndAmount = allItems.some(function (_a) {\n    var startAmount = _a.startAmount,\n      endAmount = _a.endAmount;\n    return startAmount !== endAmount;\n  });\n  if (differentStartAndEndAmount) {\n    return false;\n  }\n  var _b = __read(consideration),\n    firstConsideration = _b[0],\n    restConsideration = _b.slice(1);\n  // 7. First consideration item must contain the offerer as the recipient\n  var firstConsiderationRecipientIsNotOfferer = firstConsideration.recipient.toLowerCase() !== offerer.toLowerCase();\n  if (firstConsiderationRecipientIsNotOfferer) {\n    return false;\n  }\n  // 8. If the order has multiple consideration items and all consideration items other than the\n  // first consideration item have the same item type as the offered item, the offered item\n  // amount is not less than the sum of all consideration item amounts excluding the\n  // first consideration item amount\n  if (consideration.length > 1 && restConsideration.every(function (item) {\n    return item.itemType === offer[0].itemType;\n  }) && (0, order_1.totalItemsAmount)(restConsideration).endAmount.gt(offer[0].endAmount)) {\n    return false;\n  }\n  var currencies = allItems.filter(item_1.isCurrencyItem);\n  //  9. The token on native currency items needs to be set to the null address and the identifier on\n  //  currencies needs to be zero, and the amounts on the 721 item need to be 1\n  var nativeCurrencyIsZeroAddress = currencies.filter(function (_a) {\n    var itemType = _a.itemType;\n    return itemType === constants_1.ItemType.NATIVE;\n  }).every(function (_a) {\n    var token = _a.token;\n    return token === ethers_1.ethers.constants.AddressZero;\n  });\n  var currencyIdentifiersAreZero = currencies.every(function (_a) {\n    var identifierOrCriteria = _a.identifierOrCriteria;\n    return ethers_1.BigNumber.from(identifierOrCriteria).eq(0);\n  });\n  var erc721sAreSingleAmount = nfts.filter(function (_a) {\n    var itemType = _a.itemType;\n    return itemType === constants_1.ItemType.ERC721;\n  }).every(function (_a) {\n    var endAmount = _a.endAmount;\n    return endAmount === \"1\";\n  });\n  return nativeCurrencyIsZeroAddress && currencyIdentifiersAreZero && erc721sAreSingleAmount;\n};\nexports.shouldUseBasicFulfill = shouldUseBasicFulfill;\nvar offerAndConsiderationFulfillmentMapping = (_a = {}, _a[constants_1.ItemType.ERC20] = (_b = {}, _b[constants_1.ItemType.ERC721] = constants_1.BasicOrderRouteType.ERC721_TO_ERC20, _b[constants_1.ItemType.ERC1155] = constants_1.BasicOrderRouteType.ERC1155_TO_ERC20, _b), _a[constants_1.ItemType.ERC721] = (_c = {}, _c[constants_1.ItemType.NATIVE] = constants_1.BasicOrderRouteType.ETH_TO_ERC721, _c[constants_1.ItemType.ERC20] = constants_1.BasicOrderRouteType.ERC20_TO_ERC721, _c), _a[constants_1.ItemType.ERC1155] = (_d = {}, _d[constants_1.ItemType.NATIVE] = constants_1.BasicOrderRouteType.ETH_TO_ERC1155, _d[constants_1.ItemType.ERC20] = constants_1.BasicOrderRouteType.ERC20_TO_ERC1155, _d), _a);\nfunction fulfillBasicOrder(_a) {\n  var _b, _c;\n  var order = _a.order,\n    seaportContract = _a.seaportContract,\n    offererBalancesAndApprovals = _a.offererBalancesAndApprovals,\n    fulfillerBalancesAndApprovals = _a.fulfillerBalancesAndApprovals,\n    timeBasedItemParams = _a.timeBasedItemParams,\n    offererOperator = _a.offererOperator,\n    fulfillerOperator = _a.fulfillerOperator,\n    signer = _a.signer,\n    _d = _a.tips,\n    tips = _d === void 0 ? [] : _d,\n    _e = _a.conduitKey,\n    conduitKey = _e === void 0 ? constants_1.NO_CONDUIT : _e;\n  return __awaiter(this, void 0, void 0, function () {\n    var _f, offer, consideration, considerationIncludingTips, offerItem, _g, forOfferer, forAdditionalRecipients, basicOrderRouteType, additionalRecipients, considerationWithoutOfferItemType, totalNativeAmount, insufficientApprovals, basicOrderParameters, payableOverrides, approvalActions, exchangeAction, actions;\n    return __generator(this, function (_h) {\n      switch (_h.label) {\n        case 0:\n          _f = order.parameters, offer = _f.offer, consideration = _f.consideration;\n          considerationIncludingTips = __spreadArray(__spreadArray([], __read(consideration), false), __read(tips), false);\n          offerItem = offer[0];\n          _g = __read(considerationIncludingTips), forOfferer = _g[0], forAdditionalRecipients = _g.slice(1);\n          basicOrderRouteType = (_b = offerAndConsiderationFulfillmentMapping[offerItem.itemType]) === null || _b === void 0 ? void 0 : _b[forOfferer.itemType];\n          if (basicOrderRouteType === undefined) {\n            throw new Error(\"Order parameters did not result in a valid basic fulfillment\");\n          }\n          additionalRecipients = forAdditionalRecipients.map(function (_a) {\n            var startAmount = _a.startAmount,\n              recipient = _a.recipient;\n            return {\n              amount: startAmount,\n              recipient: recipient\n            };\n          });\n          considerationWithoutOfferItemType = considerationIncludingTips.filter(function (item) {\n            return item.itemType !== offer[0].itemType;\n          });\n          totalNativeAmount = (_c = (0, item_1.getSummedTokenAndIdentifierAmounts)({\n            items: considerationWithoutOfferItemType,\n            criterias: [],\n            timeBasedItemParams: __assign(__assign({}, timeBasedItemParams), {\n              isConsiderationItem: true\n            })\n          })[ethers_1.ethers.constants.AddressZero]) === null || _c === void 0 ? void 0 : _c[\"0\"];\n          insufficientApprovals = (0, balanceAndApprovalCheck_1.validateBasicFulfillBalancesAndApprovals)({\n            offer: offer,\n            consideration: considerationIncludingTips,\n            offererBalancesAndApprovals: offererBalancesAndApprovals,\n            fulfillerBalancesAndApprovals: fulfillerBalancesAndApprovals,\n            timeBasedItemParams: timeBasedItemParams,\n            offererOperator: offererOperator,\n            fulfillerOperator: fulfillerOperator\n          });\n          basicOrderParameters = {\n            offerer: order.parameters.offerer,\n            offererConduitKey: order.parameters.conduitKey,\n            zone: order.parameters.zone,\n            //  Note the use of a \"basicOrderType\" enum;\n            //  this represents both the usual order type as well as the \"route\"\n            //  of the basic order (a simple derivation function for the basic order\n            //  type is `basicOrderType = orderType + (4 * basicOrderRoute)`.)\n            basicOrderType: order.parameters.orderType + 4 * basicOrderRouteType,\n            offerToken: offerItem.token,\n            offerIdentifier: offerItem.identifierOrCriteria,\n            offerAmount: offerItem.endAmount,\n            considerationToken: forOfferer.token,\n            considerationIdentifier: forOfferer.identifierOrCriteria,\n            considerationAmount: forOfferer.endAmount,\n            startTime: order.parameters.startTime,\n            endTime: order.parameters.endTime,\n            salt: order.parameters.salt,\n            totalOriginalAdditionalRecipients: order.parameters.consideration.length - 1,\n            signature: order.signature,\n            fulfillerConduitKey: conduitKey,\n            additionalRecipients: additionalRecipients,\n            zoneHash: order.parameters.zoneHash\n          };\n          payableOverrides = {\n            value: totalNativeAmount\n          };\n          return [4 /*yield*/, (0, approval_1.getApprovalActions)(insufficientApprovals, signer)];\n        case 1:\n          approvalActions = _h.sent();\n          exchangeAction = {\n            type: \"exchange\",\n            transactionMethods: (0, usecase_1.getTransactionMethods)(seaportContract.connect(signer), \"fulfillBasicOrder\", [basicOrderParameters, payableOverrides])\n          };\n          actions = __spreadArray(__spreadArray([], __read(approvalActions), false), [exchangeAction], false);\n          return [2 /*return*/, {\n            actions: actions,\n            executeAllActions: function () {\n              return (0, usecase_1.executeAllActions)(actions);\n            }\n          }];\n      }\n    });\n  });\n}\nexports.fulfillBasicOrder = fulfillBasicOrder;\nfunction fulfillStandardOrder(_a) {\n  var _b;\n  var order = _a.order,\n    _c = _a.unitsToFill,\n    unitsToFill = _c === void 0 ? 0 : _c,\n    totalSize = _a.totalSize,\n    totalFilled = _a.totalFilled,\n    offerCriteria = _a.offerCriteria,\n    considerationCriteria = _a.considerationCriteria,\n    _d = _a.tips,\n    tips = _d === void 0 ? [] : _d,\n    extraData = _a.extraData,\n    seaportContract = _a.seaportContract,\n    offererBalancesAndApprovals = _a.offererBalancesAndApprovals,\n    fulfillerBalancesAndApprovals = _a.fulfillerBalancesAndApprovals,\n    offererOperator = _a.offererOperator,\n    fulfillerOperator = _a.fulfillerOperator,\n    timeBasedItemParams = _a.timeBasedItemParams,\n    conduitKey = _a.conduitKey,\n    recipientAddress = _a.recipientAddress,\n    signer = _a.signer;\n  return __awaiter(this, void 0, void 0, function () {\n    var orderWithAdjustedFills, _e, offer, consideration, considerationIncludingTips, offerCriteriaItems, considerationCriteriaItems, hasCriteriaItems, totalNativeAmount, insufficientApprovals, payableOverrides, approvalActions, isGift, useAdvanced, orderAccountingForTips, _f, numerator, denominator, exchangeAction, actions;\n    return __generator(this, function (_g) {\n      switch (_g.label) {\n        case 0:\n          orderWithAdjustedFills = unitsToFill ? (0, order_1.mapOrderAmountsFromUnitsToFill)(order, {\n            unitsToFill: unitsToFill,\n            totalFilled: totalFilled,\n            totalSize: totalSize\n          }) :\n          // Else, we adjust the order by the remaining order left to be fulfilled\n          (0, order_1.mapOrderAmountsFromFilledStatus)(order, {\n            totalFilled: totalFilled,\n            totalSize: totalSize\n          });\n          _e = orderWithAdjustedFills.parameters, offer = _e.offer, consideration = _e.consideration;\n          considerationIncludingTips = __spreadArray(__spreadArray([], __read(consideration), false), __read(tips), false);\n          offerCriteriaItems = offer.filter(function (_a) {\n            var itemType = _a.itemType;\n            return (0, item_1.isCriteriaItem)(itemType);\n          });\n          considerationCriteriaItems = considerationIncludingTips.filter(function (_a) {\n            var itemType = _a.itemType;\n            return (0, item_1.isCriteriaItem)(itemType);\n          });\n          hasCriteriaItems = offerCriteriaItems.length > 0 || considerationCriteriaItems.length > 0;\n          if (offerCriteriaItems.length !== offerCriteria.length || considerationCriteriaItems.length !== considerationCriteria.length) {\n            throw new Error(\"You must supply the appropriate criterias for criteria based items\");\n          }\n          totalNativeAmount = (_b = (0, item_1.getSummedTokenAndIdentifierAmounts)({\n            items: considerationIncludingTips,\n            criterias: considerationCriteria,\n            timeBasedItemParams: __assign(__assign({}, timeBasedItemParams), {\n              isConsiderationItem: true\n            })\n          })[ethers_1.ethers.constants.AddressZero]) === null || _b === void 0 ? void 0 : _b[\"0\"];\n          insufficientApprovals = (0, balanceAndApprovalCheck_1.validateStandardFulfillBalancesAndApprovals)({\n            offer: offer,\n            consideration: considerationIncludingTips,\n            offerCriteria: offerCriteria,\n            considerationCriteria: considerationCriteria,\n            offererBalancesAndApprovals: offererBalancesAndApprovals,\n            fulfillerBalancesAndApprovals: fulfillerBalancesAndApprovals,\n            timeBasedItemParams: timeBasedItemParams,\n            offererOperator: offererOperator,\n            fulfillerOperator: fulfillerOperator\n          });\n          payableOverrides = {\n            value: totalNativeAmount\n          };\n          return [4 /*yield*/, (0, approval_1.getApprovalActions)(insufficientApprovals, signer)];\n        case 1:\n          approvalActions = _g.sent();\n          isGift = recipientAddress !== ethers_1.ethers.constants.AddressZero;\n          useAdvanced = Boolean(unitsToFill) || hasCriteriaItems || isGift;\n          orderAccountingForTips = __assign(__assign({}, order), {\n            parameters: __assign(__assign({}, order.parameters), {\n              consideration: __spreadArray(__spreadArray([], __read(order.parameters.consideration), false), __read(tips), false),\n              totalOriginalConsiderationItems: consideration.length\n            })\n          });\n          _f = (0, exports.getAdvancedOrderNumeratorDenominator)(order, unitsToFill), numerator = _f.numerator, denominator = _f.denominator;\n          exchangeAction = {\n            type: \"exchange\",\n            transactionMethods: useAdvanced ? (0, usecase_1.getTransactionMethods)(seaportContract.connect(signer), \"fulfillAdvancedOrder\", [__assign(__assign({}, orderAccountingForTips), {\n              numerator: numerator,\n              denominator: denominator,\n              extraData: extraData !== null && extraData !== void 0 ? extraData : \"0x\"\n            }), hasCriteriaItems ? (0, criteria_1.generateCriteriaResolvers)({\n              orders: [order],\n              offerCriterias: [offerCriteria],\n              considerationCriterias: [considerationCriteria]\n            }) : [], conduitKey, recipientAddress, payableOverrides]) : (0, usecase_1.getTransactionMethods)(seaportContract.connect(signer), \"fulfillOrder\", [orderAccountingForTips, conduitKey, payableOverrides])\n          };\n          actions = __spreadArray(__spreadArray([], __read(approvalActions), false), [exchangeAction], false);\n          return [2 /*return*/, {\n            actions: actions,\n            executeAllActions: function () {\n              return (0, usecase_1.executeAllActions)(actions);\n            }\n          }];\n      }\n    });\n  });\n}\nexports.fulfillStandardOrder = fulfillStandardOrder;\nfunction validateAndSanitizeFromOrderStatus(order, orderStatus) {\n  var isValidated = orderStatus.isValidated,\n    isCancelled = orderStatus.isCancelled,\n    totalFilled = orderStatus.totalFilled,\n    totalSize = orderStatus.totalSize;\n  if (totalSize.gt(0) && totalFilled.div(totalSize).eq(1)) {\n    throw new Error(\"The order you are trying to fulfill is already filled\");\n  }\n  if (isCancelled) {\n    throw new Error(\"The order you are trying to fulfill is cancelled\");\n  }\n  if (isValidated) {\n    // If the order is already validated, manually wipe the signature off of the order to save gas\n    return {\n      parameters: __assign({}, order.parameters),\n      signature: \"0x\"\n    };\n  }\n  return order;\n}\nexports.validateAndSanitizeFromOrderStatus = validateAndSanitizeFromOrderStatus;\nfunction fulfillAvailableOrders(_a) {\n  var ordersMetadata = _a.ordersMetadata,\n    seaportContract = _a.seaportContract,\n    fulfillerBalancesAndApprovals = _a.fulfillerBalancesAndApprovals,\n    fulfillerOperator = _a.fulfillerOperator,\n    currentBlockTimestamp = _a.currentBlockTimestamp,\n    ascendingAmountTimestampBuffer = _a.ascendingAmountTimestampBuffer,\n    conduitKey = _a.conduitKey,\n    signer = _a.signer,\n    recipientAddress = _a.recipientAddress;\n  return __awaiter(this, void 0, void 0, function () {\n    var sanitizedOrdersMetadata, ordersMetadataWithAdjustedFills, totalNativeAmount, totalInsufficientApprovals, hasCriteriaItems, addApprovalIfNeeded, payableOverrides, approvalActions, advancedOrdersWithTips, _b, offerFulfillments, considerationFulfillments, exchangeAction, actions;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          sanitizedOrdersMetadata = ordersMetadata.map(function (orderMetadata) {\n            return __assign(__assign({}, orderMetadata), {\n              order: validateAndSanitizeFromOrderStatus(orderMetadata.order, orderMetadata.orderStatus)\n            });\n          });\n          ordersMetadataWithAdjustedFills = sanitizedOrdersMetadata.map(function (orderMetadata) {\n            return __assign(__assign({}, orderMetadata), {\n              // If we are supplying units to fill, we adjust the order by the minimum of the amount to fill and\n              // the remaining order left to be fulfilled\n              order: orderMetadata.unitsToFill ? (0, order_1.mapOrderAmountsFromUnitsToFill)(orderMetadata.order, {\n                unitsToFill: orderMetadata.unitsToFill,\n                totalFilled: orderMetadata.orderStatus.totalFilled,\n                totalSize: orderMetadata.orderStatus.totalSize\n              }) :\n              // Else, we adjust the order by the remaining order left to be fulfilled\n              (0, order_1.mapOrderAmountsFromFilledStatus)(orderMetadata.order, {\n                totalFilled: orderMetadata.orderStatus.totalFilled,\n                totalSize: orderMetadata.orderStatus.totalSize\n              })\n            });\n          });\n          totalNativeAmount = ethers_1.BigNumber.from(0);\n          totalInsufficientApprovals = [];\n          hasCriteriaItems = false;\n          addApprovalIfNeeded = function (orderInsufficientApprovals) {\n            orderInsufficientApprovals.forEach(function (insufficientApproval) {\n              if (!totalInsufficientApprovals.find(function (approval) {\n                return approval.token === insufficientApproval.token;\n              })) {\n                totalInsufficientApprovals.push(insufficientApproval);\n              }\n            });\n          };\n          ordersMetadataWithAdjustedFills.forEach(function (_a) {\n            var _b, _c;\n            var order = _a.order,\n              tips = _a.tips,\n              offerCriteria = _a.offerCriteria,\n              considerationCriteria = _a.considerationCriteria,\n              offererBalancesAndApprovals = _a.offererBalancesAndApprovals,\n              offererOperator = _a.offererOperator;\n            var considerationIncludingTips = __spreadArray(__spreadArray([], __read(order.parameters.consideration), false), __read(tips), false);\n            var timeBasedItemParams = {\n              startTime: order.parameters.startTime,\n              endTime: order.parameters.endTime,\n              currentBlockTimestamp: currentBlockTimestamp,\n              ascendingAmountTimestampBuffer: ascendingAmountTimestampBuffer,\n              isConsiderationItem: true\n            };\n            totalNativeAmount = totalNativeAmount.add((_c = (_b = (0, item_1.getSummedTokenAndIdentifierAmounts)({\n              items: considerationIncludingTips,\n              criterias: considerationCriteria,\n              timeBasedItemParams: timeBasedItemParams\n            })[ethers_1.ethers.constants.AddressZero]) === null || _b === void 0 ? void 0 : _b[\"0\"]) !== null && _c !== void 0 ? _c : ethers_1.BigNumber.from(0));\n            var insufficientApprovals = (0, balanceAndApprovalCheck_1.validateStandardFulfillBalancesAndApprovals)({\n              offer: order.parameters.offer,\n              consideration: considerationIncludingTips,\n              offerCriteria: offerCriteria,\n              considerationCriteria: considerationCriteria,\n              offererBalancesAndApprovals: offererBalancesAndApprovals,\n              fulfillerBalancesAndApprovals: fulfillerBalancesAndApprovals,\n              timeBasedItemParams: timeBasedItemParams,\n              offererOperator: offererOperator,\n              fulfillerOperator: fulfillerOperator\n            });\n            var offerCriteriaItems = order.parameters.offer.filter(function (_a) {\n              var itemType = _a.itemType;\n              return (0, item_1.isCriteriaItem)(itemType);\n            });\n            var considerationCriteriaItems = considerationIncludingTips.filter(function (_a) {\n              var itemType = _a.itemType;\n              return (0, item_1.isCriteriaItem)(itemType);\n            });\n            if (offerCriteriaItems.length !== offerCriteria.length || considerationCriteriaItems.length !== considerationCriteria.length) {\n              throw new Error(\"You must supply the appropriate criterias for criteria based items\");\n            }\n            addApprovalIfNeeded(insufficientApprovals);\n          });\n          payableOverrides = {\n            value: totalNativeAmount\n          };\n          return [4 /*yield*/, (0, approval_1.getApprovalActions)(totalInsufficientApprovals, signer)];\n        case 1:\n          approvalActions = _c.sent();\n          advancedOrdersWithTips = sanitizedOrdersMetadata.map(function (_a) {\n            var order = _a.order,\n              _b = _a.unitsToFill,\n              unitsToFill = _b === void 0 ? 0 : _b,\n              tips = _a.tips,\n              extraData = _a.extraData;\n            var _c = (0, exports.getAdvancedOrderNumeratorDenominator)(order, unitsToFill),\n              numerator = _c.numerator,\n              denominator = _c.denominator;\n            var considerationIncludingTips = __spreadArray(__spreadArray([], __read(order.parameters.consideration), false), __read(tips), false);\n            return __assign(__assign({}, order), {\n              parameters: __assign(__assign({}, order.parameters), {\n                consideration: considerationIncludingTips,\n                totalOriginalConsiderationItems: order.parameters.consideration.length\n              }),\n              numerator: numerator,\n              denominator: denominator,\n              extraData: extraData\n            });\n          });\n          _b = generateFulfillOrdersFulfillments(ordersMetadata), offerFulfillments = _b.offerFulfillments, considerationFulfillments = _b.considerationFulfillments;\n          exchangeAction = {\n            type: \"exchange\",\n            transactionMethods: (0, usecase_1.getTransactionMethods)(seaportContract.connect(signer), \"fulfillAvailableAdvancedOrders\", [advancedOrdersWithTips, hasCriteriaItems ? (0, criteria_1.generateCriteriaResolvers)({\n              orders: ordersMetadata.map(function (_a) {\n                var order = _a.order;\n                return order;\n              }),\n              offerCriterias: ordersMetadata.map(function (_a) {\n                var offerCriteria = _a.offerCriteria;\n                return offerCriteria;\n              }),\n              considerationCriterias: ordersMetadata.map(function (_a) {\n                var considerationCriteria = _a.considerationCriteria;\n                return considerationCriteria;\n              })\n            }) : [], offerFulfillments, considerationFulfillments, conduitKey, recipientAddress, advancedOrdersWithTips.length, payableOverrides])\n          };\n          actions = __spreadArray(__spreadArray([], __read(approvalActions), false), [exchangeAction], false);\n          return [2 /*return*/, {\n            actions: actions,\n            executeAllActions: function () {\n              return (0, usecase_1.executeAllActions)(actions);\n            }\n          }];\n      }\n    });\n  });\n}\nexports.fulfillAvailableOrders = fulfillAvailableOrders;\nfunction generateFulfillOrdersFulfillments(ordersMetadata) {\n  var hashAggregateKey = function (_a) {\n    var sourceOrDestination = _a.sourceOrDestination,\n      _b = _a.operator,\n      operator = _b === void 0 ? \"\" : _b,\n      token = _a.token,\n      identifier = _a.identifier;\n    return \"\".concat(sourceOrDestination, \"-\").concat(operator, \"-\").concat(token, \"-\").concat(identifier);\n  };\n  var offerAggregatedFulfillments = {};\n  var considerationAggregatedFulfillments = {};\n  ordersMetadata.forEach(function (_a, orderIndex) {\n    var order = _a.order,\n      offererOperator = _a.offererOperator,\n      offerCriteria = _a.offerCriteria;\n    var itemToCriteria = (0, criteria_1.getItemToCriteriaMap)(order.parameters.offer, offerCriteria);\n    return order.parameters.offer.forEach(function (item, itemIndex) {\n      var _a, _b, _c;\n      var aggregateKey = \"\".concat(hashAggregateKey({\n        sourceOrDestination: order.parameters.offerer,\n        operator: offererOperator,\n        token: item.token,\n        identifier: (_b = (_a = itemToCriteria.get(item)) === null || _a === void 0 ? void 0 : _a.identifier) !== null && _b !== void 0 ? _b : item.identifierOrCriteria\n        // We tack on the index to ensure that erc721s can never be aggregated and instead must be in separate arrays\n      })).concat((0, item_1.isErc721Item)(item.itemType) ? itemIndex : \"\");\n      offerAggregatedFulfillments[aggregateKey] = __spreadArray(__spreadArray([], __read((_c = offerAggregatedFulfillments[aggregateKey]) !== null && _c !== void 0 ? _c : []), false), [{\n        orderIndex: orderIndex,\n        itemIndex: itemIndex\n      }], false);\n    });\n  });\n  ordersMetadata.forEach(function (_a, orderIndex) {\n    var order = _a.order,\n      considerationCriteria = _a.considerationCriteria,\n      tips = _a.tips;\n    var itemToCriteria = (0, criteria_1.getItemToCriteriaMap)(order.parameters.consideration, considerationCriteria);\n    return __spreadArray(__spreadArray([], __read(order.parameters.consideration), false), __read(tips), false).forEach(function (item, itemIndex) {\n      var _a, _b, _c;\n      var aggregateKey = \"\".concat(hashAggregateKey({\n        sourceOrDestination: item.recipient,\n        token: item.token,\n        identifier: (_b = (_a = itemToCriteria.get(item)) === null || _a === void 0 ? void 0 : _a.identifier) !== null && _b !== void 0 ? _b : item.identifierOrCriteria\n        // We tack on the index to ensure that erc721s can never be aggregated and instead must be in separate arrays\n      })).concat((0, item_1.isErc721Item)(item.itemType) ? itemIndex : \"\");\n      considerationAggregatedFulfillments[aggregateKey] = __spreadArray(__spreadArray([], __read((_c = considerationAggregatedFulfillments[aggregateKey]) !== null && _c !== void 0 ? _c : []), false), [{\n        orderIndex: orderIndex,\n        itemIndex: itemIndex\n      }], false);\n    });\n  });\n  return {\n    offerFulfillments: Object.values(offerAggregatedFulfillments),\n    considerationFulfillments: Object.values(considerationAggregatedFulfillments)\n  };\n}\nexports.generateFulfillOrdersFulfillments = generateFulfillOrdersFulfillments;\nvar getAdvancedOrderNumeratorDenominator = function (order, unitsToFill) {\n  // Used for advanced order cases\n  var maxUnits = (0, item_1.getMaximumSizeForOrder)(order);\n  var unitsToFillBn = ethers_1.BigNumber.from(unitsToFill);\n  // Reduce the numerator/denominator as optimization\n  var unitsGcd = (0, gcd_1.gcd)(unitsToFillBn, maxUnits);\n  var numerator = unitsToFill ? unitsToFillBn.div(unitsGcd) : ethers_1.BigNumber.from(1);\n  var denominator = unitsToFill ? maxUnits.div(unitsGcd) : ethers_1.BigNumber.from(1);\n  return {\n    numerator: numerator,\n    denominator: denominator\n  };\n};\nexports.getAdvancedOrderNumeratorDenominator = getAdvancedOrderNumeratorDenominator;","map":{"version":3,"sources":["../../src/utils/fulfill.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nvar _a, _b, _c, _d;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getAdvancedOrderNumeratorDenominator = exports.generateFulfillOrdersFulfillments = exports.fulfillAvailableOrders = exports.validateAndSanitizeFromOrderStatus = exports.fulfillStandardOrder = exports.fulfillBasicOrder = exports.shouldUseBasicFulfill = void 0;\nvar ethers_1 = require(\"ethers\");\nvar constants_1 = require(\"../constants\");\nvar approval_1 = require(\"./approval\");\nvar balanceAndApprovalCheck_1 = require(\"./balanceAndApprovalCheck\");\nvar criteria_1 = require(\"./criteria\");\nvar gcd_1 = require(\"./gcd\");\nvar item_1 = require(\"./item\");\nvar order_1 = require(\"./order\");\nvar usecase_1 = require(\"./usecase\");\n/**\n * We should use basic fulfill order if the order adheres to the following criteria:\n * 1. The order should not be partially filled.\n * 2. The order only contains a single offer item and contains at least one consideration item\n * 3. The order does not offer an item with Ether (or other native tokens) as its item type.\n * 4. The order only contains a single ERC721 or ERC1155 item and that item is not criteria-based\n * 5. All other items have the same Native or ERC20 item type and token\n * 6. All items have the same startAmount and endAmount\n * 7. First consideration item must contain the offerer as the recipient\n * 8. If the order has multiple consideration items and all consideration items other than the\n *    first consideration item have the same item type as the offered item, the offered item\n *    amount is not less than the sum of all consideration item amounts excluding the\n *    first consideration item amount\n * 9. The token on native currency items needs to be set to the null address and the identifier on\n *    currencies needs to be zero, and the amounts on the 721 item need to be 1\n */\nvar shouldUseBasicFulfill = function (_a, totalFilled) {\n    var offer = _a.offer, consideration = _a.consideration, offerer = _a.offerer;\n    // 1. The order must not be partially filled\n    if (!totalFilled.eq(0)) {\n        return false;\n    }\n    // 2. Must be single offer and at least one consideration\n    if (offer.length > 1 || consideration.length === 0) {\n        return false;\n    }\n    var allItems = __spreadArray(__spreadArray([], __read(offer), false), __read(consideration), false);\n    var nfts = allItems.filter(function (_a) {\n        var itemType = _a.itemType;\n        return [constants_1.ItemType.ERC721, constants_1.ItemType.ERC1155].includes(itemType);\n    });\n    var nftsWithCriteria = allItems.filter(function (_a) {\n        var itemType = _a.itemType;\n        return (0, item_1.isCriteriaItem)(itemType);\n    });\n    var offersNativeCurrency = (0, item_1.isNativeCurrencyItem)(offer[0]);\n    // 3. The order does not offer an item with Ether (or other native tokens) as its item type.\n    if (offersNativeCurrency) {\n        return false;\n    }\n    // 4. The order only contains a single ERC721 or ERC1155 item and that item is not criteria-based\n    if (nfts.length !== 1 || nftsWithCriteria.length !== 0) {\n        return false;\n    }\n    // 5. All currencies need to have the same address and item type (Native, ERC20)\n    if (!(0, order_1.areAllCurrenciesSame)({ offer: offer, consideration: consideration })) {\n        return false;\n    }\n    // 6. All individual items need to have the same startAmount and endAmount\n    var differentStartAndEndAmount = allItems.some(function (_a) {\n        var startAmount = _a.startAmount, endAmount = _a.endAmount;\n        return startAmount !== endAmount;\n    });\n    if (differentStartAndEndAmount) {\n        return false;\n    }\n    var _b = __read(consideration), firstConsideration = _b[0], restConsideration = _b.slice(1);\n    // 7. First consideration item must contain the offerer as the recipient\n    var firstConsiderationRecipientIsNotOfferer = firstConsideration.recipient.toLowerCase() !== offerer.toLowerCase();\n    if (firstConsiderationRecipientIsNotOfferer) {\n        return false;\n    }\n    // 8. If the order has multiple consideration items and all consideration items other than the\n    // first consideration item have the same item type as the offered item, the offered item\n    // amount is not less than the sum of all consideration item amounts excluding the\n    // first consideration item amount\n    if (consideration.length > 1 &&\n        restConsideration.every(function (item) { return item.itemType === offer[0].itemType; }) &&\n        (0, order_1.totalItemsAmount)(restConsideration).endAmount.gt(offer[0].endAmount)) {\n        return false;\n    }\n    var currencies = allItems.filter(item_1.isCurrencyItem);\n    //  9. The token on native currency items needs to be set to the null address and the identifier on\n    //  currencies needs to be zero, and the amounts on the 721 item need to be 1\n    var nativeCurrencyIsZeroAddress = currencies\n        .filter(function (_a) {\n        var itemType = _a.itemType;\n        return itemType === constants_1.ItemType.NATIVE;\n    })\n        .every(function (_a) {\n        var token = _a.token;\n        return token === ethers_1.ethers.constants.AddressZero;\n    });\n    var currencyIdentifiersAreZero = currencies.every(function (_a) {\n        var identifierOrCriteria = _a.identifierOrCriteria;\n        return ethers_1.BigNumber.from(identifierOrCriteria).eq(0);\n    });\n    var erc721sAreSingleAmount = nfts\n        .filter(function (_a) {\n        var itemType = _a.itemType;\n        return itemType === constants_1.ItemType.ERC721;\n    })\n        .every(function (_a) {\n        var endAmount = _a.endAmount;\n        return endAmount === \"1\";\n    });\n    return (nativeCurrencyIsZeroAddress &&\n        currencyIdentifiersAreZero &&\n        erc721sAreSingleAmount);\n};\nexports.shouldUseBasicFulfill = shouldUseBasicFulfill;\nvar offerAndConsiderationFulfillmentMapping = (_a = {},\n    _a[constants_1.ItemType.ERC20] = (_b = {},\n        _b[constants_1.ItemType.ERC721] = constants_1.BasicOrderRouteType.ERC721_TO_ERC20,\n        _b[constants_1.ItemType.ERC1155] = constants_1.BasicOrderRouteType.ERC1155_TO_ERC20,\n        _b),\n    _a[constants_1.ItemType.ERC721] = (_c = {},\n        _c[constants_1.ItemType.NATIVE] = constants_1.BasicOrderRouteType.ETH_TO_ERC721,\n        _c[constants_1.ItemType.ERC20] = constants_1.BasicOrderRouteType.ERC20_TO_ERC721,\n        _c),\n    _a[constants_1.ItemType.ERC1155] = (_d = {},\n        _d[constants_1.ItemType.NATIVE] = constants_1.BasicOrderRouteType.ETH_TO_ERC1155,\n        _d[constants_1.ItemType.ERC20] = constants_1.BasicOrderRouteType.ERC20_TO_ERC1155,\n        _d),\n    _a);\nfunction fulfillBasicOrder(_a) {\n    var _b, _c;\n    var order = _a.order, seaportContract = _a.seaportContract, offererBalancesAndApprovals = _a.offererBalancesAndApprovals, fulfillerBalancesAndApprovals = _a.fulfillerBalancesAndApprovals, timeBasedItemParams = _a.timeBasedItemParams, offererOperator = _a.offererOperator, fulfillerOperator = _a.fulfillerOperator, signer = _a.signer, _d = _a.tips, tips = _d === void 0 ? [] : _d, _e = _a.conduitKey, conduitKey = _e === void 0 ? constants_1.NO_CONDUIT : _e;\n    return __awaiter(this, void 0, void 0, function () {\n        var _f, offer, consideration, considerationIncludingTips, offerItem, _g, forOfferer, forAdditionalRecipients, basicOrderRouteType, additionalRecipients, considerationWithoutOfferItemType, totalNativeAmount, insufficientApprovals, basicOrderParameters, payableOverrides, approvalActions, exchangeAction, actions;\n        return __generator(this, function (_h) {\n            switch (_h.label) {\n                case 0:\n                    _f = order.parameters, offer = _f.offer, consideration = _f.consideration;\n                    considerationIncludingTips = __spreadArray(__spreadArray([], __read(consideration), false), __read(tips), false);\n                    offerItem = offer[0];\n                    _g = __read(considerationIncludingTips), forOfferer = _g[0], forAdditionalRecipients = _g.slice(1);\n                    basicOrderRouteType = (_b = offerAndConsiderationFulfillmentMapping[offerItem.itemType]) === null || _b === void 0 ? void 0 : _b[forOfferer.itemType];\n                    if (basicOrderRouteType === undefined) {\n                        throw new Error(\"Order parameters did not result in a valid basic fulfillment\");\n                    }\n                    additionalRecipients = forAdditionalRecipients.map(function (_a) {\n                        var startAmount = _a.startAmount, recipient = _a.recipient;\n                        return ({\n                            amount: startAmount,\n                            recipient: recipient,\n                        });\n                    });\n                    considerationWithoutOfferItemType = considerationIncludingTips.filter(function (item) { return item.itemType !== offer[0].itemType; });\n                    totalNativeAmount = (_c = (0, item_1.getSummedTokenAndIdentifierAmounts)({\n                        items: considerationWithoutOfferItemType,\n                        criterias: [],\n                        timeBasedItemParams: __assign(__assign({}, timeBasedItemParams), { isConsiderationItem: true }),\n                    })[ethers_1.ethers.constants.AddressZero]) === null || _c === void 0 ? void 0 : _c[\"0\"];\n                    insufficientApprovals = (0, balanceAndApprovalCheck_1.validateBasicFulfillBalancesAndApprovals)({\n                        offer: offer,\n                        consideration: considerationIncludingTips,\n                        offererBalancesAndApprovals: offererBalancesAndApprovals,\n                        fulfillerBalancesAndApprovals: fulfillerBalancesAndApprovals,\n                        timeBasedItemParams: timeBasedItemParams,\n                        offererOperator: offererOperator,\n                        fulfillerOperator: fulfillerOperator,\n                    });\n                    basicOrderParameters = {\n                        offerer: order.parameters.offerer,\n                        offererConduitKey: order.parameters.conduitKey,\n                        zone: order.parameters.zone,\n                        //  Note the use of a \"basicOrderType\" enum;\n                        //  this represents both the usual order type as well as the \"route\"\n                        //  of the basic order (a simple derivation function for the basic order\n                        //  type is `basicOrderType = orderType + (4 * basicOrderRoute)`.)\n                        basicOrderType: order.parameters.orderType + 4 * basicOrderRouteType,\n                        offerToken: offerItem.token,\n                        offerIdentifier: offerItem.identifierOrCriteria,\n                        offerAmount: offerItem.endAmount,\n                        considerationToken: forOfferer.token,\n                        considerationIdentifier: forOfferer.identifierOrCriteria,\n                        considerationAmount: forOfferer.endAmount,\n                        startTime: order.parameters.startTime,\n                        endTime: order.parameters.endTime,\n                        salt: order.parameters.salt,\n                        totalOriginalAdditionalRecipients: order.parameters.consideration.length - 1,\n                        signature: order.signature,\n                        fulfillerConduitKey: conduitKey,\n                        additionalRecipients: additionalRecipients,\n                        zoneHash: order.parameters.zoneHash,\n                    };\n                    payableOverrides = { value: totalNativeAmount };\n                    return [4 /*yield*/, (0, approval_1.getApprovalActions)(insufficientApprovals, signer)];\n                case 1:\n                    approvalActions = _h.sent();\n                    exchangeAction = {\n                        type: \"exchange\",\n                        transactionMethods: (0, usecase_1.getTransactionMethods)(seaportContract.connect(signer), \"fulfillBasicOrder\", [basicOrderParameters, payableOverrides]),\n                    };\n                    actions = __spreadArray(__spreadArray([], __read(approvalActions), false), [exchangeAction], false);\n                    return [2 /*return*/, {\n                            actions: actions,\n                            executeAllActions: function () {\n                                return (0, usecase_1.executeAllActions)(actions);\n                            },\n                        }];\n            }\n        });\n    });\n}\nexports.fulfillBasicOrder = fulfillBasicOrder;\nfunction fulfillStandardOrder(_a) {\n    var _b;\n    var order = _a.order, _c = _a.unitsToFill, unitsToFill = _c === void 0 ? 0 : _c, totalSize = _a.totalSize, totalFilled = _a.totalFilled, offerCriteria = _a.offerCriteria, considerationCriteria = _a.considerationCriteria, _d = _a.tips, tips = _d === void 0 ? [] : _d, extraData = _a.extraData, seaportContract = _a.seaportContract, offererBalancesAndApprovals = _a.offererBalancesAndApprovals, fulfillerBalancesAndApprovals = _a.fulfillerBalancesAndApprovals, offererOperator = _a.offererOperator, fulfillerOperator = _a.fulfillerOperator, timeBasedItemParams = _a.timeBasedItemParams, conduitKey = _a.conduitKey, recipientAddress = _a.recipientAddress, signer = _a.signer;\n    return __awaiter(this, void 0, void 0, function () {\n        var orderWithAdjustedFills, _e, offer, consideration, considerationIncludingTips, offerCriteriaItems, considerationCriteriaItems, hasCriteriaItems, totalNativeAmount, insufficientApprovals, payableOverrides, approvalActions, isGift, useAdvanced, orderAccountingForTips, _f, numerator, denominator, exchangeAction, actions;\n        return __generator(this, function (_g) {\n            switch (_g.label) {\n                case 0:\n                    orderWithAdjustedFills = unitsToFill\n                        ? (0, order_1.mapOrderAmountsFromUnitsToFill)(order, {\n                            unitsToFill: unitsToFill,\n                            totalFilled: totalFilled,\n                            totalSize: totalSize,\n                        })\n                        : // Else, we adjust the order by the remaining order left to be fulfilled\n                            (0, order_1.mapOrderAmountsFromFilledStatus)(order, {\n                                totalFilled: totalFilled,\n                                totalSize: totalSize,\n                            });\n                    _e = orderWithAdjustedFills.parameters, offer = _e.offer, consideration = _e.consideration;\n                    considerationIncludingTips = __spreadArray(__spreadArray([], __read(consideration), false), __read(tips), false);\n                    offerCriteriaItems = offer.filter(function (_a) {\n                        var itemType = _a.itemType;\n                        return (0, item_1.isCriteriaItem)(itemType);\n                    });\n                    considerationCriteriaItems = considerationIncludingTips.filter(function (_a) {\n                        var itemType = _a.itemType;\n                        return (0, item_1.isCriteriaItem)(itemType);\n                    });\n                    hasCriteriaItems = offerCriteriaItems.length > 0 || considerationCriteriaItems.length > 0;\n                    if (offerCriteriaItems.length !== offerCriteria.length ||\n                        considerationCriteriaItems.length !== considerationCriteria.length) {\n                        throw new Error(\"You must supply the appropriate criterias for criteria based items\");\n                    }\n                    totalNativeAmount = (_b = (0, item_1.getSummedTokenAndIdentifierAmounts)({\n                        items: considerationIncludingTips,\n                        criterias: considerationCriteria,\n                        timeBasedItemParams: __assign(__assign({}, timeBasedItemParams), { isConsiderationItem: true }),\n                    })[ethers_1.ethers.constants.AddressZero]) === null || _b === void 0 ? void 0 : _b[\"0\"];\n                    insufficientApprovals = (0, balanceAndApprovalCheck_1.validateStandardFulfillBalancesAndApprovals)({\n                        offer: offer,\n                        consideration: considerationIncludingTips,\n                        offerCriteria: offerCriteria,\n                        considerationCriteria: considerationCriteria,\n                        offererBalancesAndApprovals: offererBalancesAndApprovals,\n                        fulfillerBalancesAndApprovals: fulfillerBalancesAndApprovals,\n                        timeBasedItemParams: timeBasedItemParams,\n                        offererOperator: offererOperator,\n                        fulfillerOperator: fulfillerOperator,\n                    });\n                    payableOverrides = { value: totalNativeAmount };\n                    return [4 /*yield*/, (0, approval_1.getApprovalActions)(insufficientApprovals, signer)];\n                case 1:\n                    approvalActions = _g.sent();\n                    isGift = recipientAddress !== ethers_1.ethers.constants.AddressZero;\n                    useAdvanced = Boolean(unitsToFill) || hasCriteriaItems || isGift;\n                    orderAccountingForTips = __assign(__assign({}, order), { parameters: __assign(__assign({}, order.parameters), { consideration: __spreadArray(__spreadArray([], __read(order.parameters.consideration), false), __read(tips), false), totalOriginalConsiderationItems: consideration.length }) });\n                    _f = (0, exports.getAdvancedOrderNumeratorDenominator)(order, unitsToFill), numerator = _f.numerator, denominator = _f.denominator;\n                    exchangeAction = {\n                        type: \"exchange\",\n                        transactionMethods: useAdvanced\n                            ? (0, usecase_1.getTransactionMethods)(seaportContract.connect(signer), \"fulfillAdvancedOrder\", [\n                                __assign(__assign({}, orderAccountingForTips), { numerator: numerator, denominator: denominator, extraData: extraData !== null && extraData !== void 0 ? extraData : \"0x\" }),\n                                hasCriteriaItems\n                                    ? (0, criteria_1.generateCriteriaResolvers)({\n                                        orders: [order],\n                                        offerCriterias: [offerCriteria],\n                                        considerationCriterias: [considerationCriteria],\n                                    })\n                                    : [],\n                                conduitKey,\n                                recipientAddress,\n                                payableOverrides,\n                            ])\n                            : (0, usecase_1.getTransactionMethods)(seaportContract.connect(signer), \"fulfillOrder\", [\n                                orderAccountingForTips,\n                                conduitKey,\n                                payableOverrides,\n                            ]),\n                    };\n                    actions = __spreadArray(__spreadArray([], __read(approvalActions), false), [exchangeAction], false);\n                    return [2 /*return*/, {\n                            actions: actions,\n                            executeAllActions: function () {\n                                return (0, usecase_1.executeAllActions)(actions);\n                            },\n                        }];\n            }\n        });\n    });\n}\nexports.fulfillStandardOrder = fulfillStandardOrder;\nfunction validateAndSanitizeFromOrderStatus(order, orderStatus) {\n    var isValidated = orderStatus.isValidated, isCancelled = orderStatus.isCancelled, totalFilled = orderStatus.totalFilled, totalSize = orderStatus.totalSize;\n    if (totalSize.gt(0) && totalFilled.div(totalSize).eq(1)) {\n        throw new Error(\"The order you are trying to fulfill is already filled\");\n    }\n    if (isCancelled) {\n        throw new Error(\"The order you are trying to fulfill is cancelled\");\n    }\n    if (isValidated) {\n        // If the order is already validated, manually wipe the signature off of the order to save gas\n        return { parameters: __assign({}, order.parameters), signature: \"0x\" };\n    }\n    return order;\n}\nexports.validateAndSanitizeFromOrderStatus = validateAndSanitizeFromOrderStatus;\nfunction fulfillAvailableOrders(_a) {\n    var ordersMetadata = _a.ordersMetadata, seaportContract = _a.seaportContract, fulfillerBalancesAndApprovals = _a.fulfillerBalancesAndApprovals, fulfillerOperator = _a.fulfillerOperator, currentBlockTimestamp = _a.currentBlockTimestamp, ascendingAmountTimestampBuffer = _a.ascendingAmountTimestampBuffer, conduitKey = _a.conduitKey, signer = _a.signer, recipientAddress = _a.recipientAddress;\n    return __awaiter(this, void 0, void 0, function () {\n        var sanitizedOrdersMetadata, ordersMetadataWithAdjustedFills, totalNativeAmount, totalInsufficientApprovals, hasCriteriaItems, addApprovalIfNeeded, payableOverrides, approvalActions, advancedOrdersWithTips, _b, offerFulfillments, considerationFulfillments, exchangeAction, actions;\n        return __generator(this, function (_c) {\n            switch (_c.label) {\n                case 0:\n                    sanitizedOrdersMetadata = ordersMetadata.map(function (orderMetadata) { return (__assign(__assign({}, orderMetadata), { order: validateAndSanitizeFromOrderStatus(orderMetadata.order, orderMetadata.orderStatus) })); });\n                    ordersMetadataWithAdjustedFills = sanitizedOrdersMetadata.map(function (orderMetadata) { return (__assign(__assign({}, orderMetadata), { \n                        // If we are supplying units to fill, we adjust the order by the minimum of the amount to fill and\n                        // the remaining order left to be fulfilled\n                        order: orderMetadata.unitsToFill\n                            ? (0, order_1.mapOrderAmountsFromUnitsToFill)(orderMetadata.order, {\n                                unitsToFill: orderMetadata.unitsToFill,\n                                totalFilled: orderMetadata.orderStatus.totalFilled,\n                                totalSize: orderMetadata.orderStatus.totalSize,\n                            })\n                            : // Else, we adjust the order by the remaining order left to be fulfilled\n                                (0, order_1.mapOrderAmountsFromFilledStatus)(orderMetadata.order, {\n                                    totalFilled: orderMetadata.orderStatus.totalFilled,\n                                    totalSize: orderMetadata.orderStatus.totalSize,\n                                }) })); });\n                    totalNativeAmount = ethers_1.BigNumber.from(0);\n                    totalInsufficientApprovals = [];\n                    hasCriteriaItems = false;\n                    addApprovalIfNeeded = function (orderInsufficientApprovals) {\n                        orderInsufficientApprovals.forEach(function (insufficientApproval) {\n                            if (!totalInsufficientApprovals.find(function (approval) { return approval.token === insufficientApproval.token; })) {\n                                totalInsufficientApprovals.push(insufficientApproval);\n                            }\n                        });\n                    };\n                    ordersMetadataWithAdjustedFills.forEach(function (_a) {\n                        var _b, _c;\n                        var order = _a.order, tips = _a.tips, offerCriteria = _a.offerCriteria, considerationCriteria = _a.considerationCriteria, offererBalancesAndApprovals = _a.offererBalancesAndApprovals, offererOperator = _a.offererOperator;\n                        var considerationIncludingTips = __spreadArray(__spreadArray([], __read(order.parameters.consideration), false), __read(tips), false);\n                        var timeBasedItemParams = {\n                            startTime: order.parameters.startTime,\n                            endTime: order.parameters.endTime,\n                            currentBlockTimestamp: currentBlockTimestamp,\n                            ascendingAmountTimestampBuffer: ascendingAmountTimestampBuffer,\n                            isConsiderationItem: true,\n                        };\n                        totalNativeAmount = totalNativeAmount.add((_c = (_b = (0, item_1.getSummedTokenAndIdentifierAmounts)({\n                            items: considerationIncludingTips,\n                            criterias: considerationCriteria,\n                            timeBasedItemParams: timeBasedItemParams,\n                        })[ethers_1.ethers.constants.AddressZero]) === null || _b === void 0 ? void 0 : _b[\"0\"]) !== null && _c !== void 0 ? _c : ethers_1.BigNumber.from(0));\n                        var insufficientApprovals = (0, balanceAndApprovalCheck_1.validateStandardFulfillBalancesAndApprovals)({\n                            offer: order.parameters.offer,\n                            consideration: considerationIncludingTips,\n                            offerCriteria: offerCriteria,\n                            considerationCriteria: considerationCriteria,\n                            offererBalancesAndApprovals: offererBalancesAndApprovals,\n                            fulfillerBalancesAndApprovals: fulfillerBalancesAndApprovals,\n                            timeBasedItemParams: timeBasedItemParams,\n                            offererOperator: offererOperator,\n                            fulfillerOperator: fulfillerOperator,\n                        });\n                        var offerCriteriaItems = order.parameters.offer.filter(function (_a) {\n                            var itemType = _a.itemType;\n                            return (0, item_1.isCriteriaItem)(itemType);\n                        });\n                        var considerationCriteriaItems = considerationIncludingTips.filter(function (_a) {\n                            var itemType = _a.itemType;\n                            return (0, item_1.isCriteriaItem)(itemType);\n                        });\n                        if (offerCriteriaItems.length !== offerCriteria.length ||\n                            considerationCriteriaItems.length !== considerationCriteria.length) {\n                            throw new Error(\"You must supply the appropriate criterias for criteria based items\");\n                        }\n                        addApprovalIfNeeded(insufficientApprovals);\n                    });\n                    payableOverrides = { value: totalNativeAmount };\n                    return [4 /*yield*/, (0, approval_1.getApprovalActions)(totalInsufficientApprovals, signer)];\n                case 1:\n                    approvalActions = _c.sent();\n                    advancedOrdersWithTips = sanitizedOrdersMetadata.map(function (_a) {\n                        var order = _a.order, _b = _a.unitsToFill, unitsToFill = _b === void 0 ? 0 : _b, tips = _a.tips, extraData = _a.extraData;\n                        var _c = (0, exports.getAdvancedOrderNumeratorDenominator)(order, unitsToFill), numerator = _c.numerator, denominator = _c.denominator;\n                        var considerationIncludingTips = __spreadArray(__spreadArray([], __read(order.parameters.consideration), false), __read(tips), false);\n                        return __assign(__assign({}, order), { parameters: __assign(__assign({}, order.parameters), { consideration: considerationIncludingTips, totalOriginalConsiderationItems: order.parameters.consideration.length }), numerator: numerator, denominator: denominator, extraData: extraData });\n                    });\n                    _b = generateFulfillOrdersFulfillments(ordersMetadata), offerFulfillments = _b.offerFulfillments, considerationFulfillments = _b.considerationFulfillments;\n                    exchangeAction = {\n                        type: \"exchange\",\n                        transactionMethods: (0, usecase_1.getTransactionMethods)(seaportContract.connect(signer), \"fulfillAvailableAdvancedOrders\", [\n                            advancedOrdersWithTips,\n                            hasCriteriaItems\n                                ? (0, criteria_1.generateCriteriaResolvers)({\n                                    orders: ordersMetadata.map(function (_a) {\n                                        var order = _a.order;\n                                        return order;\n                                    }),\n                                    offerCriterias: ordersMetadata.map(function (_a) {\n                                        var offerCriteria = _a.offerCriteria;\n                                        return offerCriteria;\n                                    }),\n                                    considerationCriterias: ordersMetadata.map(function (_a) {\n                                        var considerationCriteria = _a.considerationCriteria;\n                                        return considerationCriteria;\n                                    }),\n                                })\n                                : [],\n                            offerFulfillments,\n                            considerationFulfillments,\n                            conduitKey,\n                            recipientAddress,\n                            advancedOrdersWithTips.length,\n                            payableOverrides,\n                        ]),\n                    };\n                    actions = __spreadArray(__spreadArray([], __read(approvalActions), false), [exchangeAction], false);\n                    return [2 /*return*/, {\n                            actions: actions,\n                            executeAllActions: function () {\n                                return (0, usecase_1.executeAllActions)(actions);\n                            },\n                        }];\n            }\n        });\n    });\n}\nexports.fulfillAvailableOrders = fulfillAvailableOrders;\nfunction generateFulfillOrdersFulfillments(ordersMetadata) {\n    var hashAggregateKey = function (_a) {\n        var sourceOrDestination = _a.sourceOrDestination, _b = _a.operator, operator = _b === void 0 ? \"\" : _b, token = _a.token, identifier = _a.identifier;\n        return \"\".concat(sourceOrDestination, \"-\").concat(operator, \"-\").concat(token, \"-\").concat(identifier);\n    };\n    var offerAggregatedFulfillments = {};\n    var considerationAggregatedFulfillments = {};\n    ordersMetadata.forEach(function (_a, orderIndex) {\n        var order = _a.order, offererOperator = _a.offererOperator, offerCriteria = _a.offerCriteria;\n        var itemToCriteria = (0, criteria_1.getItemToCriteriaMap)(order.parameters.offer, offerCriteria);\n        return order.parameters.offer.forEach(function (item, itemIndex) {\n            var _a, _b, _c;\n            var aggregateKey = \"\".concat(hashAggregateKey({\n                sourceOrDestination: order.parameters.offerer,\n                operator: offererOperator,\n                token: item.token,\n                identifier: (_b = (_a = itemToCriteria.get(item)) === null || _a === void 0 ? void 0 : _a.identifier) !== null && _b !== void 0 ? _b : item.identifierOrCriteria,\n                // We tack on the index to ensure that erc721s can never be aggregated and instead must be in separate arrays\n            })).concat((0, item_1.isErc721Item)(item.itemType) ? itemIndex : \"\");\n            offerAggregatedFulfillments[aggregateKey] = __spreadArray(__spreadArray([], __read(((_c = offerAggregatedFulfillments[aggregateKey]) !== null && _c !== void 0 ? _c : [])), false), [\n                { orderIndex: orderIndex, itemIndex: itemIndex },\n            ], false);\n        });\n    });\n    ordersMetadata.forEach(function (_a, orderIndex) {\n        var order = _a.order, considerationCriteria = _a.considerationCriteria, tips = _a.tips;\n        var itemToCriteria = (0, criteria_1.getItemToCriteriaMap)(order.parameters.consideration, considerationCriteria);\n        return __spreadArray(__spreadArray([], __read(order.parameters.consideration), false), __read(tips), false).forEach(function (item, itemIndex) {\n            var _a, _b, _c;\n            var aggregateKey = \"\".concat(hashAggregateKey({\n                sourceOrDestination: item.recipient,\n                token: item.token,\n                identifier: (_b = (_a = itemToCriteria.get(item)) === null || _a === void 0 ? void 0 : _a.identifier) !== null && _b !== void 0 ? _b : item.identifierOrCriteria,\n                // We tack on the index to ensure that erc721s can never be aggregated and instead must be in separate arrays\n            })).concat((0, item_1.isErc721Item)(item.itemType) ? itemIndex : \"\");\n            considerationAggregatedFulfillments[aggregateKey] = __spreadArray(__spreadArray([], __read(((_c = considerationAggregatedFulfillments[aggregateKey]) !== null && _c !== void 0 ? _c : [])), false), [\n                { orderIndex: orderIndex, itemIndex: itemIndex },\n            ], false);\n        });\n    });\n    return {\n        offerFulfillments: Object.values(offerAggregatedFulfillments),\n        considerationFulfillments: Object.values(considerationAggregatedFulfillments),\n    };\n}\nexports.generateFulfillOrdersFulfillments = generateFulfillOrdersFulfillments;\nvar getAdvancedOrderNumeratorDenominator = function (order, unitsToFill) {\n    // Used for advanced order cases\n    var maxUnits = (0, item_1.getMaximumSizeForOrder)(order);\n    var unitsToFillBn = ethers_1.BigNumber.from(unitsToFill);\n    // Reduce the numerator/denominator as optimization\n    var unitsGcd = (0, gcd_1.gcd)(unitsToFillBn, maxUnits);\n    var numerator = unitsToFill\n        ? unitsToFillBn.div(unitsGcd)\n        : ethers_1.BigNumber.from(1);\n    var denominator = unitsToFill ? maxUnits.div(unitsGcd) : ethers_1.BigNumber.from(1);\n    return { numerator: numerator, denominator: denominator };\n};\nexports.getAdvancedOrderNumeratorDenominator = getAdvancedOrderNumeratorDenominator;\n//# sourceMappingURL=fulfill.js.map"]},"metadata":{},"sourceType":"script"}