{"ast":null,"code":"var _s = $RefreshSig$();\n// HOW TO USE:\n// the hook returns a record of booleans, where the key is the name of the breakpoint\n// if the screen size is greater than or equal to the breakpoint, the value will be true\n// for example if the screen size is 1024px, the value of the 'md' key will be true and the value of the 'lg' key will be true\n// if you were to check if the screen is smaller than a breakpoint you would check if it is false\n\nimport { useEffect, useState } from 'react';\nimport { BREAKPOINTS } from 'theme';\nconst isClient = typeof window !== 'undefined';\nfunction getScreenSize() {\n  return Object.keys(BREAKPOINTS).reduce((obj, key) => Object.assign(obj, {\n    [key]: isClient ? window.innerWidth >= BREAKPOINTS[key] : false\n  }), {});\n}\nexport function useScreenSize() {\n  _s();\n  const [screenSize, setScreenSize] = useState(getScreenSize());\n  useEffect(() => {\n    function handleResize() {\n      setScreenSize(getScreenSize());\n    }\n    if (isClient) {\n      window.addEventListener('resize', handleResize);\n      return () => {\n        window.removeEventListener('resize', handleResize);\n      };\n    }\n    return undefined;\n  }, []);\n  return screenSize;\n}\n_s(useScreenSize, \"w7rUOHkWKzcwUV9WA8NFgLJhfyU=\");","map":{"version":3,"names":["useEffect","useState","BREAKPOINTS","isClient","window","getScreenSize","Object","keys","reduce","obj","key","assign","innerWidth","useScreenSize","screenSize","setScreenSize","handleResize","addEventListener","removeEventListener","undefined"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/hooks/useScreenSize.ts"],"sourcesContent":["// HOW TO USE:\n// the hook returns a record of booleans, where the key is the name of the breakpoint\n// if the screen size is greater than or equal to the breakpoint, the value will be true\n// for example if the screen size is 1024px, the value of the 'md' key will be true and the value of the 'lg' key will be true\n// if you were to check if the screen is smaller than a breakpoint you would check if it is false\n\nimport { useEffect, useState } from 'react'\nimport { BREAKPOINTS } from 'theme'\n\nconst isClient = typeof window !== 'undefined'\n\nfunction getScreenSize(): Record<keyof typeof BREAKPOINTS, boolean> {\n  return Object.keys(BREAKPOINTS).reduce(\n    (obj, key) =>\n      Object.assign(obj, {\n        [key]: isClient ? window.innerWidth >= BREAKPOINTS[key as keyof typeof BREAKPOINTS] : false,\n      }),\n    {} as Record<keyof typeof BREAKPOINTS, boolean>\n  )\n}\n\nexport function useScreenSize(): Record<keyof typeof BREAKPOINTS, boolean> {\n  const [screenSize, setScreenSize] = useState(getScreenSize())\n\n  useEffect(() => {\n    function handleResize() {\n      setScreenSize(getScreenSize())\n    }\n\n    if (isClient) {\n      window.addEventListener('resize', handleResize)\n      return () => {\n        window.removeEventListener('resize', handleResize)\n      }\n    }\n    return undefined\n  }, [])\n\n  return screenSize\n}\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;;AAEA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,OAAO;AAEnC,MAAMC,QAAQ,GAAG,OAAOC,MAAM,KAAK,WAAW;AAE9C,SAASC,aAAa,GAA8C;EAClE,OAAOC,MAAM,CAACC,IAAI,CAACL,WAAW,CAAC,CAACM,MAAM,CACpC,CAACC,GAAG,EAAEC,GAAG,KACPJ,MAAM,CAACK,MAAM,CAACF,GAAG,EAAE;IACjB,CAACC,GAAG,GAAGP,QAAQ,GAAGC,MAAM,CAACQ,UAAU,IAAIV,WAAW,CAACQ,GAAG,CAA6B,GAAG;EACxF,CAAC,CAAC,EACJ,CAAC,CAAC,CACH;AACH;AAEA,OAAO,SAASG,aAAa,GAA8C;EAAA;EACzE,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGd,QAAQ,CAACI,aAAa,EAAE,CAAC;EAE7DL,SAAS,CAAC,MAAM;IACd,SAASgB,YAAY,GAAG;MACtBD,aAAa,CAACV,aAAa,EAAE,CAAC;IAChC;IAEA,IAAIF,QAAQ,EAAE;MACZC,MAAM,CAACa,gBAAgB,CAAC,QAAQ,EAAED,YAAY,CAAC;MAC/C,OAAO,MAAM;QACXZ,MAAM,CAACc,mBAAmB,CAAC,QAAQ,EAAEF,YAAY,CAAC;MACpD,CAAC;IACH;IACA,OAAOG,SAAS;EAClB,CAAC,EAAE,EAAE,CAAC;EAEN,OAAOL,UAAU;AACnB;AAAC,GAlBeD,aAAa"},"metadata":{},"sourceType":"module"}