{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useMemo } from 'react';\n\n/** Sorts currency amounts (descending). */\nfunction balanceComparator(a, b) {\n  if (a && b) {\n    return a.greaterThan(b) ? -1 : a.equalTo(b) ? 0 : 1;\n  } else if (a === null || a === void 0 ? void 0 : a.greaterThan('0')) {\n    return -1;\n  } else if (b === null || b === void 0 ? void 0 : b.greaterThan('0')) {\n    return 1;\n  }\n  return 0;\n}\n/** Sorts tokens by currency amount (descending), then safety, then symbol (ascending). */\nexport function tokenComparator(balances, a, b) {\n  // Sorts by balances\n  const balanceComparison = balanceComparator(balances[a.address], balances[b.address]);\n  if (balanceComparison !== 0) return balanceComparison;\n\n  // Sorts by symbol\n  if (a.symbol && b.symbol) {\n    return a.symbol.toLowerCase() < b.symbol.toLowerCase() ? -1 : 1;\n  }\n  return -1;\n}\n\n/** Sorts tokens by query, giving precedence to exact matches and partial matches. */\nexport function useSortTokensByQuery(query, tokens) {\n  _s();\n  return useMemo(() => {\n    if (!tokens) {\n      return [];\n    }\n    const matches = query.toLowerCase().split(/\\s+/).filter(s => s.length > 0);\n    if (matches.length > 1) {\n      return tokens;\n    }\n    const exactMatches = [];\n    const symbolSubtrings = [];\n    const rest = [];\n\n    // sort tokens by exact match -> subtring on symbol match -> rest\n    const trimmedQuery = query.toLowerCase().trim();\n    tokens.map(token => {\n      var _token$symbol;\n      const symbol = (_token$symbol = token.symbol) === null || _token$symbol === void 0 ? void 0 : _token$symbol.toLowerCase();\n      if (symbol === matches[0]) {\n        return exactMatches.push(token);\n      } else if (symbol === null || symbol === void 0 ? void 0 : symbol.startsWith(trimmedQuery)) {\n        return symbolSubtrings.push(token);\n      } else {\n        return rest.push(token);\n      }\n    });\n    return [...exactMatches, ...symbolSubtrings, ...rest];\n  }, [tokens, query]);\n}\n_s(useSortTokensByQuery, \"nwk+m61qLgjDVUp4IGV/072DDN4=\");","map":{"version":3,"names":["useMemo","balanceComparator","a","b","greaterThan","equalTo","tokenComparator","balances","balanceComparison","address","symbol","toLowerCase","useSortTokensByQuery","query","tokens","matches","split","filter","s","length","exactMatches","symbolSubtrings","rest","trimmedQuery","trim","map","token","push","startsWith"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/lib/hooks/useTokenList/sorting.ts"],"sourcesContent":["import { Currency, CurrencyAmount, Token } from '@uniswap/sdk-core'\nimport { TokenInfo } from '@uniswap/token-lists'\nimport { useMemo } from 'react'\n\n/** Sorts currency amounts (descending). */\nfunction balanceComparator(a?: CurrencyAmount<Currency>, b?: CurrencyAmount<Currency>) {\n  if (a && b) {\n    return a.greaterThan(b) ? -1 : a.equalTo(b) ? 0 : 1\n  } else if (a?.greaterThan('0')) {\n    return -1\n  } else if (b?.greaterThan('0')) {\n    return 1\n  }\n  return 0\n}\n\ntype TokenBalances = { [tokenAddress: string]: CurrencyAmount<Token> | undefined }\n\n/** Sorts tokens by currency amount (descending), then safety, then symbol (ascending). */\nexport function tokenComparator(balances: TokenBalances, a: Token, b: Token) {\n  // Sorts by balances\n  const balanceComparison = balanceComparator(balances[a.address], balances[b.address])\n  if (balanceComparison !== 0) return balanceComparison\n\n  // Sorts by symbol\n  if (a.symbol && b.symbol) {\n    return a.symbol.toLowerCase() < b.symbol.toLowerCase() ? -1 : 1\n  }\n\n  return -1\n}\n\n/** Sorts tokens by query, giving precedence to exact matches and partial matches. */\nexport function useSortTokensByQuery<T extends Token | TokenInfo>(query: string, tokens?: T[]): T[] {\n  return useMemo(() => {\n    if (!tokens) {\n      return []\n    }\n\n    const matches = query\n      .toLowerCase()\n      .split(/\\s+/)\n      .filter((s) => s.length > 0)\n\n    if (matches.length > 1) {\n      return tokens\n    }\n\n    const exactMatches: T[] = []\n    const symbolSubtrings: T[] = []\n    const rest: T[] = []\n\n    // sort tokens by exact match -> subtring on symbol match -> rest\n    const trimmedQuery = query.toLowerCase().trim()\n    tokens.map((token) => {\n      const symbol = token.symbol?.toLowerCase()\n      if (symbol === matches[0]) {\n        return exactMatches.push(token)\n      } else if (symbol?.startsWith(trimmedQuery)) {\n        return symbolSubtrings.push(token)\n      } else {\n        return rest.push(token)\n      }\n    })\n\n    return [...exactMatches, ...symbolSubtrings, ...rest]\n  }, [tokens, query])\n}\n"],"mappings":";AAEA,SAASA,OAAO,QAAQ,OAAO;;AAE/B;AACA,SAASC,iBAAiB,CAACC,CAA4B,EAAEC,CAA4B,EAAE;EACrF,IAAID,CAAC,IAAIC,CAAC,EAAE;IACV,OAAOD,CAAC,CAACE,WAAW,CAACD,CAAC,CAAC,GAAG,CAAC,CAAC,GAAGD,CAAC,CAACG,OAAO,CAACF,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC;EACrD,CAAC,MAAM,IAAID,CAAC,aAADA,CAAC,uBAADA,CAAC,CAAEE,WAAW,CAAC,GAAG,CAAC,EAAE;IAC9B,OAAO,CAAC,CAAC;EACX,CAAC,MAAM,IAAID,CAAC,aAADA,CAAC,uBAADA,CAAC,CAAEC,WAAW,CAAC,GAAG,CAAC,EAAE;IAC9B,OAAO,CAAC;EACV;EACA,OAAO,CAAC;AACV;AAIA;AACA,OAAO,SAASE,eAAe,CAACC,QAAuB,EAAEL,CAAQ,EAAEC,CAAQ,EAAE;EAC3E;EACA,MAAMK,iBAAiB,GAAGP,iBAAiB,CAACM,QAAQ,CAACL,CAAC,CAACO,OAAO,CAAC,EAAEF,QAAQ,CAACJ,CAAC,CAACM,OAAO,CAAC,CAAC;EACrF,IAAID,iBAAiB,KAAK,CAAC,EAAE,OAAOA,iBAAiB;;EAErD;EACA,IAAIN,CAAC,CAACQ,MAAM,IAAIP,CAAC,CAACO,MAAM,EAAE;IACxB,OAAOR,CAAC,CAACQ,MAAM,CAACC,WAAW,EAAE,GAAGR,CAAC,CAACO,MAAM,CAACC,WAAW,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC;EACjE;EAEA,OAAO,CAAC,CAAC;AACX;;AAEA;AACA,OAAO,SAASC,oBAAoB,CAA8BC,KAAa,EAAEC,MAAY,EAAO;EAAA;EAClG,OAAOd,OAAO,CAAC,MAAM;IACnB,IAAI,CAACc,MAAM,EAAE;MACX,OAAO,EAAE;IACX;IAEA,MAAMC,OAAO,GAAGF,KAAK,CAClBF,WAAW,EAAE,CACbK,KAAK,CAAC,KAAK,CAAC,CACZC,MAAM,CAAEC,CAAC,IAAKA,CAAC,CAACC,MAAM,GAAG,CAAC,CAAC;IAE9B,IAAIJ,OAAO,CAACI,MAAM,GAAG,CAAC,EAAE;MACtB,OAAOL,MAAM;IACf;IAEA,MAAMM,YAAiB,GAAG,EAAE;IAC5B,MAAMC,eAAoB,GAAG,EAAE;IAC/B,MAAMC,IAAS,GAAG,EAAE;;IAEpB;IACA,MAAMC,YAAY,GAAGV,KAAK,CAACF,WAAW,EAAE,CAACa,IAAI,EAAE;IAC/CV,MAAM,CAACW,GAAG,CAAEC,KAAK,IAAK;MAAA;MACpB,MAAMhB,MAAM,oBAAGgB,KAAK,CAAChB,MAAM,kDAAZ,cAAcC,WAAW,EAAE;MAC1C,IAAID,MAAM,KAAKK,OAAO,CAAC,CAAC,CAAC,EAAE;QACzB,OAAOK,YAAY,CAACO,IAAI,CAACD,KAAK,CAAC;MACjC,CAAC,MAAM,IAAIhB,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEkB,UAAU,CAACL,YAAY,CAAC,EAAE;QAC3C,OAAOF,eAAe,CAACM,IAAI,CAACD,KAAK,CAAC;MACpC,CAAC,MAAM;QACL,OAAOJ,IAAI,CAACK,IAAI,CAACD,KAAK,CAAC;MACzB;IACF,CAAC,CAAC;IAEF,OAAO,CAAC,GAAGN,YAAY,EAAE,GAAGC,eAAe,EAAE,GAAGC,IAAI,CAAC;EACvD,CAAC,EAAE,CAACR,MAAM,EAAED,KAAK,CAAC,CAAC;AACrB;AAAC,GAlCeD,oBAAoB"},"metadata":{},"sourceType":"module"}