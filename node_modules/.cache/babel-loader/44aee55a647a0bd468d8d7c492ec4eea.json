{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useWeb3React } from '@web3-react/core';\nimport { SupportedChainId } from 'constants/chains';\nimport { nativeOnChain } from 'constants/tokens';\nimport { useMemo } from 'react';\nexport default function useNativeCurrency() {\n  _s();\n  const {\n    chainId\n  } = useWeb3React();\n  return useMemo(() => chainId ? nativeOnChain(chainId) :\n  // display mainnet when not connected\n  nativeOnChain(SupportedChainId.MAINNET), [chainId]);\n}\n_s(useNativeCurrency, \"ARXJQdl1Tr2ytTu0YufD558EwWE=\", false, function () {\n  return [useWeb3React];\n});","map":{"version":3,"names":["useWeb3React","SupportedChainId","nativeOnChain","useMemo","useNativeCurrency","chainId","MAINNET"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/lib/hooks/useNativeCurrency.ts"],"sourcesContent":["import { NativeCurrency, Token } from '@uniswap/sdk-core'\nimport { useWeb3React } from '@web3-react/core'\nimport { SupportedChainId } from 'constants/chains'\nimport { nativeOnChain } from 'constants/tokens'\nimport { useMemo } from 'react'\n\nexport default function useNativeCurrency(): NativeCurrency | Token {\n  const { chainId } = useWeb3React()\n  return useMemo(\n    () =>\n      chainId\n        ? nativeOnChain(chainId)\n        : // display mainnet when not connected\n          nativeOnChain(SupportedChainId.MAINNET),\n    [chainId]\n  )\n}\n"],"mappings":";AACA,SAASA,YAAY,QAAQ,kBAAkB;AAC/C,SAASC,gBAAgB,QAAQ,kBAAkB;AACnD,SAASC,aAAa,QAAQ,kBAAkB;AAChD,SAASC,OAAO,QAAQ,OAAO;AAE/B,eAAe,SAASC,iBAAiB,GAA2B;EAAA;EAClE,MAAM;IAAEC;EAAQ,CAAC,GAAGL,YAAY,EAAE;EAClC,OAAOG,OAAO,CACZ,MACEE,OAAO,GACHH,aAAa,CAACG,OAAO,CAAC;EACtB;EACAH,aAAa,CAACD,gBAAgB,CAACK,OAAO,CAAC,EAC7C,CAACD,OAAO,CAAC,CACV;AACH;AAAC,GAVuBD,iBAAiB;EAAA,QACnBJ,YAAY;AAAA"},"metadata":{},"sourceType":"module"}