{"ast":null,"code":"import{createSlice}from'@reduxjs/toolkit';import{updateVersion}from'../global/actions';var now=function now(){return new Date().getTime();};export var initialState={};var transactionSlice=createSlice({name:'transactions',initialState:initialState,reducers:{addTransaction:function addTransaction(transactions,_ref){var _transactions$chainId,_transactions$chainId2;var _ref$payload=_ref.payload,chainId=_ref$payload.chainId,from=_ref$payload.from,hash=_ref$payload.hash,info=_ref$payload.info;if((_transactions$chainId=transactions[chainId])===null||_transactions$chainId===void 0?void 0:_transactions$chainId[hash]){throw Error('Attempted to add existing transaction.');}var txs=(_transactions$chainId2=transactions[chainId])!==null&&_transactions$chainId2!==void 0?_transactions$chainId2:{};txs[hash]={hash:hash,info:info,from:from,addedTime:now()};transactions[chainId]=txs;},clearAllTransactions:function clearAllTransactions(transactions,_ref2){var chainId=_ref2.payload.chainId;if(!transactions[chainId])return;transactions[chainId]={};},checkedTransaction:function checkedTransaction(transactions,_ref3){var _transactions$chainId3;var _ref3$payload=_ref3.payload,chainId=_ref3$payload.chainId,hash=_ref3$payload.hash,blockNumber=_ref3$payload.blockNumber;var tx=(_transactions$chainId3=transactions[chainId])===null||_transactions$chainId3===void 0?void 0:_transactions$chainId3[hash];if(!tx){return;}if(!tx.lastCheckedBlockNumber){tx.lastCheckedBlockNumber=blockNumber;}else{tx.lastCheckedBlockNumber=Math.max(blockNumber,tx.lastCheckedBlockNumber);}},finalizeTransaction:function finalizeTransaction(transactions,_ref4){var _transactions$chainId4;var _ref4$payload=_ref4.payload,hash=_ref4$payload.hash,chainId=_ref4$payload.chainId,receipt=_ref4$payload.receipt;var tx=(_transactions$chainId4=transactions[chainId])===null||_transactions$chainId4===void 0?void 0:_transactions$chainId4[hash];if(!tx){return;}tx.receipt=receipt;tx.confirmedTime=now();}},extraReducers:function extraReducers(builder){builder.addCase(updateVersion,function(transactions){// in case there are any transactions in the store with the old format, remove them\nObject.keys(transactions).forEach(function(chainId){var chainTransactions=transactions[chainId];Object.keys(chainTransactions).forEach(function(hash){if(!('info'in chainTransactions[hash])){// clear old transactions that don't have the right format\ndelete chainTransactions[hash];}});});});}});var _transactionSlice$act=transactionSlice.actions,addTransaction=_transactionSlice$act.addTransaction,clearAllTransactions=_transactionSlice$act.clearAllTransactions,checkedTransaction=_transactionSlice$act.checkedTransaction,finalizeTransaction=_transactionSlice$act.finalizeTransaction;export{addTransaction,clearAllTransactions,checkedTransaction,finalizeTransaction};export default transactionSlice.reducer;","map":{"version":3,"names":["createSlice","updateVersion","now","Date","getTime","initialState","transactionSlice","name","reducers","addTransaction","transactions","payload","chainId","from","hash","info","Error","txs","addedTime","clearAllTransactions","checkedTransaction","blockNumber","tx","lastCheckedBlockNumber","Math","max","finalizeTransaction","receipt","confirmedTime","extraReducers","builder","addCase","Object","keys","forEach","chainTransactions","actions","reducer"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/state/transactions/reducer.ts"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\n\nimport { updateVersion } from '../global/actions'\nimport { TransactionDetails } from './types'\n\nconst now = () => new Date().getTime()\n\nexport interface TransactionState {\n  [chainId: number]: {\n    [txHash: string]: TransactionDetails\n  }\n}\n\nexport const initialState: TransactionState = {}\n\nconst transactionSlice = createSlice({\n  name: 'transactions',\n  initialState,\n  reducers: {\n    addTransaction(transactions, { payload: { chainId, from, hash, info } }) {\n      if (transactions[chainId]?.[hash]) {\n        throw Error('Attempted to add existing transaction.')\n      }\n      const txs = transactions[chainId] ?? {}\n      txs[hash] = { hash, info, from, addedTime: now() }\n      transactions[chainId] = txs\n    },\n    clearAllTransactions(transactions, { payload: { chainId } }) {\n      if (!transactions[chainId]) return\n      transactions[chainId] = {}\n    },\n    checkedTransaction(transactions, { payload: { chainId, hash, blockNumber } }) {\n      const tx = transactions[chainId]?.[hash]\n      if (!tx) {\n        return\n      }\n      if (!tx.lastCheckedBlockNumber) {\n        tx.lastCheckedBlockNumber = blockNumber\n      } else {\n        tx.lastCheckedBlockNumber = Math.max(blockNumber, tx.lastCheckedBlockNumber)\n      }\n    },\n    finalizeTransaction(transactions, { payload: { hash, chainId, receipt } }) {\n      const tx = transactions[chainId]?.[hash]\n      if (!tx) {\n        return\n      }\n      tx.receipt = receipt\n      tx.confirmedTime = now()\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(updateVersion, (transactions) => {\n      // in case there are any transactions in the store with the old format, remove them\n      Object.keys(transactions).forEach((chainId) => {\n        const chainTransactions = transactions[chainId as unknown as number]\n        Object.keys(chainTransactions).forEach((hash) => {\n          if (!('info' in chainTransactions[hash])) {\n            // clear old transactions that don't have the right format\n            delete chainTransactions[hash]\n          }\n        })\n      })\n    })\n  },\n})\n\nexport const { addTransaction, clearAllTransactions, checkedTransaction, finalizeTransaction } =\n  transactionSlice.actions\nexport default transactionSlice.reducer\n"],"mappings":"AAAA,OAASA,WAAW,KAAQ,kBAAkB,CAE9C,OAASC,aAAa,KAAQ,mBAAmB,CAGjD,GAAMC,IAAG,CAAG,QAANA,IAAG,SAAS,IAAIC,KAAI,EAAE,CAACC,OAAO,EAAE,GAQtC,MAAO,IAAMC,aAA8B,CAAG,CAAC,CAAC,CAEhD,GAAMC,iBAAgB,CAAGN,WAAW,CAAC,CACnCO,IAAI,CAAE,cAAc,CACpBF,YAAY,CAAZA,YAAY,CACZG,QAAQ,CAAE,CACRC,cAAc,yBAACC,YAAY,MAA8C,wEAA1CC,OAAO,CAAIC,OAAO,cAAPA,OAAO,CAAEC,IAAI,cAAJA,IAAI,CAAEC,IAAI,cAAJA,IAAI,CAAEC,IAAI,cAAJA,IAAI,CACjE,0BAAIL,YAAY,CAACE,OAAO,CAAC,gDAArB,sBAAwBE,IAAI,CAAC,CAAE,CACjC,KAAME,MAAK,CAAC,wCAAwC,CAAC,CACvD,CACA,GAAMC,IAAG,yBAAGP,YAAY,CAACE,OAAO,CAAC,iEAAI,CAAC,CAAC,CACvCK,GAAG,CAACH,IAAI,CAAC,CAAG,CAAEA,IAAI,CAAJA,IAAI,CAAEC,IAAI,CAAJA,IAAI,CAAEF,IAAI,CAAJA,IAAI,CAAEK,SAAS,CAAEhB,GAAG,EAAG,CAAC,CAClDQ,YAAY,CAACE,OAAO,CAAC,CAAGK,GAAG,CAC7B,CAAC,CACDE,oBAAoB,+BAACT,YAAY,OAA4B,IAAbE,QAAO,OAAlBD,OAAO,CAAIC,OAAO,CACrD,GAAI,CAACF,YAAY,CAACE,OAAO,CAAC,CAAE,OAC5BF,YAAY,CAACE,OAAO,CAAC,CAAG,CAAC,CAAC,CAC5B,CAAC,CACDQ,kBAAkB,6BAACV,YAAY,OAA+C,oDAA3CC,OAAO,CAAIC,OAAO,eAAPA,OAAO,CAAEE,IAAI,eAAJA,IAAI,CAAEO,WAAW,eAAXA,WAAW,CACtE,GAAMC,GAAE,yBAAGZ,YAAY,CAACE,OAAO,CAAC,iDAArB,uBAAwBE,IAAI,CAAC,CACxC,GAAI,CAACQ,EAAE,CAAE,CACP,OACF,CACA,GAAI,CAACA,EAAE,CAACC,sBAAsB,CAAE,CAC9BD,EAAE,CAACC,sBAAsB,CAAGF,WAAW,CACzC,CAAC,IAAM,CACLC,EAAE,CAACC,sBAAsB,CAAGC,IAAI,CAACC,GAAG,CAACJ,WAAW,CAAEC,EAAE,CAACC,sBAAsB,CAAC,CAC9E,CACF,CAAC,CACDG,mBAAmB,8BAAChB,YAAY,OAA2C,oDAAvCC,OAAO,CAAIG,IAAI,eAAJA,IAAI,CAAEF,OAAO,eAAPA,OAAO,CAAEe,OAAO,eAAPA,OAAO,CACnE,GAAML,GAAE,yBAAGZ,YAAY,CAACE,OAAO,CAAC,iDAArB,uBAAwBE,IAAI,CAAC,CACxC,GAAI,CAACQ,EAAE,CAAE,CACP,OACF,CACAA,EAAE,CAACK,OAAO,CAAGA,OAAO,CACpBL,EAAE,CAACM,aAAa,CAAG1B,GAAG,EAAE,CAC1B,CACF,CAAC,CACD2B,aAAa,CAAE,uBAACC,OAAO,CAAK,CAC1BA,OAAO,CAACC,OAAO,CAAC9B,aAAa,CAAE,SAACS,YAAY,CAAK,CAC/C;AACAsB,MAAM,CAACC,IAAI,CAACvB,YAAY,CAAC,CAACwB,OAAO,CAAC,SAACtB,OAAO,CAAK,CAC7C,GAAMuB,kBAAiB,CAAGzB,YAAY,CAACE,OAAO,CAAsB,CACpEoB,MAAM,CAACC,IAAI,CAACE,iBAAiB,CAAC,CAACD,OAAO,CAAC,SAACpB,IAAI,CAAK,CAC/C,GAAI,EAAE,MAAM,EAAIqB,kBAAiB,CAACrB,IAAI,CAAC,CAAC,CAAE,CACxC;AACA,MAAOqB,kBAAiB,CAACrB,IAAI,CAAC,CAChC,CACF,CAAC,CAAC,CACJ,CAAC,CAAC,CACJ,CAAC,CAAC,CACJ,CACF,CAAC,CAAC,CAEK,0BACLR,gBAAgB,CAAC8B,OAAO,CADX3B,cAAc,uBAAdA,cAAc,CAAEU,oBAAoB,uBAApBA,oBAAoB,CAAEC,kBAAkB,uBAAlBA,kBAAkB,CAAEM,mBAAmB,uBAAnBA,mBAAmB,CAClE,mFAC1B,cAAepB,iBAAgB,CAAC+B,OAAO"},"metadata":{},"sourceType":"module"}