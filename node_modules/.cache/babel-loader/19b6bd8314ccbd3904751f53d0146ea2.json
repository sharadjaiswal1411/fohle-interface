{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateSchemaDeps = exports.validatePropertyDeps = exports.error = void 0;\nconst codegen_1 = require(\"../../compile/codegen\");\nconst util_1 = require(\"../../compile/util\");\nconst code_1 = require(\"../code\");\nexports.error = {\n  message: _ref => {\n    let {\n      params: {\n        property,\n        depsCount,\n        deps\n      }\n    } = _ref;\n    const property_ies = depsCount === 1 ? \"property\" : \"properties\";\n    return (0, codegen_1.str)`must have ${property_ies} ${deps} when property ${property} is present`;\n  },\n  params: _ref2 => {\n    let {\n      params: {\n        property,\n        depsCount,\n        deps,\n        missingProperty\n      }\n    } = _ref2;\n    return (0, codegen_1._)`{property: ${property},\n    missingProperty: ${missingProperty},\n    depsCount: ${depsCount},\n    deps: ${deps}}`;\n  } // TODO change to reference\n};\n\nconst def = {\n  keyword: \"dependencies\",\n  type: \"object\",\n  schemaType: \"object\",\n  error: exports.error,\n  code(cxt) {\n    const [propDeps, schDeps] = splitDependencies(cxt);\n    validatePropertyDeps(cxt, propDeps);\n    validateSchemaDeps(cxt, schDeps);\n  }\n};\nfunction splitDependencies(_ref3) {\n  let {\n    schema\n  } = _ref3;\n  const propertyDeps = {};\n  const schemaDeps = {};\n  for (const key in schema) {\n    if (key === \"__proto__\") continue;\n    const deps = Array.isArray(schema[key]) ? propertyDeps : schemaDeps;\n    deps[key] = schema[key];\n  }\n  return [propertyDeps, schemaDeps];\n}\nfunction validatePropertyDeps(cxt) {\n  let propertyDeps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : cxt.schema;\n  const {\n    gen,\n    data,\n    it\n  } = cxt;\n  if (Object.keys(propertyDeps).length === 0) return;\n  const missing = gen.let(\"missing\");\n  for (const prop in propertyDeps) {\n    const deps = propertyDeps[prop];\n    if (deps.length === 0) continue;\n    const hasProperty = (0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties);\n    cxt.setParams({\n      property: prop,\n      depsCount: deps.length,\n      deps: deps.join(\", \")\n    });\n    if (it.allErrors) {\n      gen.if(hasProperty, () => {\n        for (const depProp of deps) {\n          (0, code_1.checkReportMissingProp)(cxt, depProp);\n        }\n      });\n    } else {\n      gen.if((0, codegen_1._)`${hasProperty} && (${(0, code_1.checkMissingProp)(cxt, deps, missing)})`);\n      (0, code_1.reportMissingProp)(cxt, missing);\n      gen.else();\n    }\n  }\n}\nexports.validatePropertyDeps = validatePropertyDeps;\nfunction validateSchemaDeps(cxt) {\n  let schemaDeps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : cxt.schema;\n  const {\n    gen,\n    data,\n    keyword,\n    it\n  } = cxt;\n  const valid = gen.name(\"valid\");\n  for (const prop in schemaDeps) {\n    if ((0, util_1.alwaysValidSchema)(it, schemaDeps[prop])) continue;\n    gen.if((0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties), () => {\n      const schCxt = cxt.subschema({\n        keyword,\n        schemaProp: prop\n      }, valid);\n      cxt.mergeValidEvaluated(schCxt, valid);\n    }, () => gen.var(valid, true) // TODO var\n    );\n\n    cxt.ok(valid);\n  }\n}\nexports.validateSchemaDeps = validateSchemaDeps;\nexports.default = def;","map":{"version":3,"sources":["../../../lib/vocabularies/applicator/dependencies.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.validateSchemaDeps = exports.validatePropertyDeps = exports.error = void 0;\nconst codegen_1 = require(\"../../compile/codegen\");\nconst util_1 = require(\"../../compile/util\");\nconst code_1 = require(\"../code\");\nexports.error = {\n    message: ({ params: { property, depsCount, deps } }) => {\n        const property_ies = depsCount === 1 ? \"property\" : \"properties\";\n        return (0, codegen_1.str) `must have ${property_ies} ${deps} when property ${property} is present`;\n    },\n    params: ({ params: { property, depsCount, deps, missingProperty } }) => (0, codegen_1._) `{property: ${property},\n    missingProperty: ${missingProperty},\n    depsCount: ${depsCount},\n    deps: ${deps}}`, // TODO change to reference\n};\nconst def = {\n    keyword: \"dependencies\",\n    type: \"object\",\n    schemaType: \"object\",\n    error: exports.error,\n    code(cxt) {\n        const [propDeps, schDeps] = splitDependencies(cxt);\n        validatePropertyDeps(cxt, propDeps);\n        validateSchemaDeps(cxt, schDeps);\n    },\n};\nfunction splitDependencies({ schema }) {\n    const propertyDeps = {};\n    const schemaDeps = {};\n    for (const key in schema) {\n        if (key === \"__proto__\")\n            continue;\n        const deps = Array.isArray(schema[key]) ? propertyDeps : schemaDeps;\n        deps[key] = schema[key];\n    }\n    return [propertyDeps, schemaDeps];\n}\nfunction validatePropertyDeps(cxt, propertyDeps = cxt.schema) {\n    const { gen, data, it } = cxt;\n    if (Object.keys(propertyDeps).length === 0)\n        return;\n    const missing = gen.let(\"missing\");\n    for (const prop in propertyDeps) {\n        const deps = propertyDeps[prop];\n        if (deps.length === 0)\n            continue;\n        const hasProperty = (0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties);\n        cxt.setParams({\n            property: prop,\n            depsCount: deps.length,\n            deps: deps.join(\", \"),\n        });\n        if (it.allErrors) {\n            gen.if(hasProperty, () => {\n                for (const depProp of deps) {\n                    (0, code_1.checkReportMissingProp)(cxt, depProp);\n                }\n            });\n        }\n        else {\n            gen.if((0, codegen_1._) `${hasProperty} && (${(0, code_1.checkMissingProp)(cxt, deps, missing)})`);\n            (0, code_1.reportMissingProp)(cxt, missing);\n            gen.else();\n        }\n    }\n}\nexports.validatePropertyDeps = validatePropertyDeps;\nfunction validateSchemaDeps(cxt, schemaDeps = cxt.schema) {\n    const { gen, data, keyword, it } = cxt;\n    const valid = gen.name(\"valid\");\n    for (const prop in schemaDeps) {\n        if ((0, util_1.alwaysValidSchema)(it, schemaDeps[prop]))\n            continue;\n        gen.if((0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties), () => {\n            const schCxt = cxt.subschema({ keyword, schemaProp: prop }, valid);\n            cxt.mergeValidEvaluated(schCxt, valid);\n        }, () => gen.var(valid, true) // TODO var\n        );\n        cxt.ok(valid);\n    }\n}\nexports.validateSchemaDeps = validateSchemaDeps;\nexports.default = def;\n//# sourceMappingURL=dependencies.js.map"]},"metadata":{},"sourceType":"script"}