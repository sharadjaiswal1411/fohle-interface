{"ast":null,"code":"import _classCallCheck from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { isJsonRpcRequest, isJsonRpcResponseSuccess, isJsonRpcResponseError, isInternalEvent, isReservedEvent } from \"@walletconnect/utils\";\nvar EventManager = /*#__PURE__*/function () {\n  function EventManager() {\n    _classCallCheck(this, EventManager);\n    this._eventEmitters = [];\n  }\n  _createClass(EventManager, [{\n    key: \"subscribe\",\n    value: function subscribe(eventEmitter) {\n      this._eventEmitters.push(eventEmitter);\n    }\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe(event) {\n      this._eventEmitters = this._eventEmitters.filter(function (x) {\n        return x.event !== event;\n      });\n    }\n  }, {\n    key: \"trigger\",\n    value: function trigger(payload) {\n      var eventEmitters = [];\n      var event;\n      if (isJsonRpcRequest(payload)) {\n        event = payload.method;\n      } else if (isJsonRpcResponseSuccess(payload) || isJsonRpcResponseError(payload)) {\n        event = \"response:\".concat(payload.id);\n      } else if (isInternalEvent(payload)) {\n        event = payload.event;\n      } else {\n        event = \"\";\n      }\n      if (event) {\n        eventEmitters = this._eventEmitters.filter(function (eventEmitter) {\n          return eventEmitter.event === event;\n        });\n      }\n      if ((!eventEmitters || !eventEmitters.length) && !isReservedEvent(event) && !isInternalEvent(event)) {\n        eventEmitters = this._eventEmitters.filter(function (eventEmitter) {\n          return eventEmitter.event === \"call_request\";\n        });\n      }\n      eventEmitters.forEach(function (eventEmitter) {\n        if (isJsonRpcResponseError(payload)) {\n          var error = new Error(payload.error.message);\n          eventEmitter.callback(error, null);\n        } else {\n          eventEmitter.callback(null, payload);\n        }\n      });\n    }\n  }]);\n  return EventManager;\n}();\nexport default EventManager;","map":{"version":3,"sources":["../../src/events.ts"],"names":[],"mappings":";;AAAA,SACE,gBAAgB,EAChB,wBAAwB,EACxB,sBAAsB,EACtB,eAAe,EACf,eAAe,QACV,sBAAsB;AAAC,IAWxB,YAAY;EAGhB,wBAAA;IAAA;IACE,IAAI,CAAC,cAAc,GAAG,EAAE;EAC1B;EAAC;IAAA;IAAA,OAEM,mBAAU,YAA2B,EAAA;MAC1C,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,YAAY,CAAC;IACxC;EAAC;IAAA;IAAA,OAEM,qBAAY,KAAa,EAAA;MAC9B,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,UAAA,CAAC;QAAA,OAAI,CAAC,CAAC,KAAK,KAAK,KAAK;MAAA,EAAC;IAC1E;EAAC;IAAA;IAAA,OAEM,iBACL,OAA2F,EAAA;MAE3F,IAAI,aAAa,GAAoB,EAAE;MACvC,IAAI,KAAa;MAEjB,IAAI,gBAAgB,CAAC,OAAO,CAAC,EAAE;QAC7B,KAAK,GAAG,OAAO,CAAC,MAAM;OACvB,MAAM,IAAI,wBAAwB,CAAC,OAAO,CAAC,IAAI,sBAAsB,CAAC,OAAO,CAAC,EAAE;QAC/E,KAAK,sBAAe,OAAO,CAAC,EAAE,CAAE;OACjC,MAAM,IAAI,eAAe,CAAC,OAAO,CAAC,EAAE;QACnC,KAAK,GAAG,OAAO,CAAC,KAAK;OACtB,MAAM;QACL,KAAK,GAAG,EAAE;MACX;MAED,IAAI,KAAK,EAAE;QACT,aAAa,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CACxC,UAAC,YAA2B;UAAA,OAAK,YAAY,CAAC,KAAK,KAAK,KAAK;QAAA,EAC9D;MACF;MAED,IACE,CAAC,CAAC,aAAa,IAAI,CAAC,aAAa,CAAC,MAAM,KACxC,CAAC,eAAe,CAAC,KAAK,CAAC,IACvB,CAAC,eAAe,CAAC,KAAK,CAAC,EACvB;QACA,aAAa,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CACxC,UAAC,YAA2B;UAAA,OAAK,YAAY,CAAC,KAAK,KAAK,cAAc;QAAA,EACvE;MACF;MAED,aAAa,CAAC,OAAO,CAAC,UAAC,YAA2B,EAAI;QACpD,IAAI,sBAAsB,CAAC,OAAO,CAAC,EAAE;UACnC,IAAM,KAAK,GAAG,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC;UAC9C,YAAY,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC;SACnC,MAAM;UACL,YAAY,CAAC,QAAQ,CAAC,IAAI,EAAE,OAAO,CAAC;QACrC;MACH,CAAC,CAAC;IACJ;EAAC;EAAA;AAAA;AAGH,eAAe,YAAY","sourceRoot":"","sourcesContent":["import { isJsonRpcRequest, isJsonRpcResponseSuccess, isJsonRpcResponseError, isInternalEvent, isReservedEvent, } from \"@walletconnect/utils\";\nclass EventManager {\n    constructor() {\n        this._eventEmitters = [];\n    }\n    subscribe(eventEmitter) {\n        this._eventEmitters.push(eventEmitter);\n    }\n    unsubscribe(event) {\n        this._eventEmitters = this._eventEmitters.filter(x => x.event !== event);\n    }\n    trigger(payload) {\n        let eventEmitters = [];\n        let event;\n        if (isJsonRpcRequest(payload)) {\n            event = payload.method;\n        }\n        else if (isJsonRpcResponseSuccess(payload) || isJsonRpcResponseError(payload)) {\n            event = `response:${payload.id}`;\n        }\n        else if (isInternalEvent(payload)) {\n            event = payload.event;\n        }\n        else {\n            event = \"\";\n        }\n        if (event) {\n            eventEmitters = this._eventEmitters.filter((eventEmitter) => eventEmitter.event === event);\n        }\n        if ((!eventEmitters || !eventEmitters.length) &&\n            !isReservedEvent(event) &&\n            !isInternalEvent(event)) {\n            eventEmitters = this._eventEmitters.filter((eventEmitter) => eventEmitter.event === \"call_request\");\n        }\n        eventEmitters.forEach((eventEmitter) => {\n            if (isJsonRpcResponseError(payload)) {\n                const error = new Error(payload.error.message);\n                eventEmitter.callback(error, null);\n            }\n            else {\n                eventEmitter.callback(null, payload);\n            }\n        });\n    }\n}\nexport default EventManager;\n//# sourceMappingURL=events.js.map"]},"metadata":{},"sourceType":"module"}