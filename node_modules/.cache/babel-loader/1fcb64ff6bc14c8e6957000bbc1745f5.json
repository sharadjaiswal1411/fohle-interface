{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nvar mh = require('multihashes');\nvar multibase = require('multibase');\nvar multicodec = require('multicodec');\nvar CIDUtil = require('./cid-util');\nvar uint8ArrayConcat = require('uint8arrays/concat');\nvar uint8ArrayToString = require('uint8arrays/to-string');\nvar uint8ArrayEquals = require('uint8arrays/equals');\nvar codecs = multicodec.nameToCode;\nvar codecInts = /** @type {CodecName[]} */Object.keys(codecs).reduce(function (p, name) {\n  p[codecs[name]] = name;\n  return p;\n}, /** @type {Record<CodecCode, CodecName>} */{});\nvar symbol = Symbol.for('@ipld/js-cid/CID');\n\n/**\n * @typedef {Object} SerializedCID\n * @property {string} codec\n * @property {number} version\n * @property {Uint8Array} hash\n */\n/**\n * @typedef {0|1} CIDVersion\n * @typedef {import('multibase').BaseNameOrCode} BaseNameOrCode\n * @typedef {import('multicodec').CodecName} CodecName\n * @typedef {import('multicodec').CodecCode} CodecCode\n */\n\n/**\n * Class representing a CID `<mbase><version><mcodec><mhash>`\n * , as defined in [ipld/cid](https://github.com/multiformats/cid).\n *\n * @class CID\n */\nvar CID = /*#__PURE__*/function (_Symbol$for) {\n  /**\n   * Create a new CID.\n   *\n   * The algorithm for argument input is roughly:\n   * ```\n   * if (cid)\n   *   -> create a copy\n   * else if (str)\n   *   if (1st char is on multibase table) -> CID String\n   *   else -> bs58 encoded multihash\n   * else if (Uint8Array)\n   *   if (1st byte is 0 or 1) -> CID\n   *   else -> multihash\n   * else if (Number)\n   *   -> construct CID by parts\n   * ```\n   *\n   * @param {CIDVersion | string | Uint8Array | CID} version\n   * @param {string|number} [codec]\n   * @param {Uint8Array} [multihash]\n   * @param {string} [multibaseName]\n   *\n   * @example\n   * new CID(<version>, <codec>, <multihash>, <multibaseName>)\n   * new CID(<cidStr>)\n   * new CID(<cid.bytes>)\n   * new CID(<multihash>)\n   * new CID(<bs58 encoded multihash>)\n   * new CID(<cid>)\n   */\n  function CID(version, codec, multihash, multibaseName) {\n    _classCallCheck(this, CID);\n    // We have below three blank field accessors only because\n    // otherwise TS will not pick them up if done after assignemnts\n\n    /**\n     * The version of the CID.\n     *\n     * @type {CIDVersion}\n     */\n    // eslint-disable-next-line no-unused-expressions\n    this.version;\n\n    /**\n     * The codec of the CID.\n     *\n     * @deprecated\n     * @type {CodecName}\n     */\n    // eslint-disable-next-line no-unused-expressions\n    this.codec;\n\n    /**\n     * The multihash of the CID.\n     *\n     * @type {Uint8Array}\n     */\n    // eslint-disable-next-line no-unused-expressions\n    this.multihash;\n    Object.defineProperty(this, symbol, {\n      value: true\n    });\n    if (CID.isCID(version)) {\n      // version is an exising CID instance\n      var cid = /** @type {CID} */version;\n      this.version = cid.version;\n      this.codec = cid.codec;\n      this.multihash = cid.multihash;\n      // Default guard for when a CID < 0.7 is passed with no multibaseName\n      // @ts-ignore\n      this.multibaseName = cid.multibaseName || (cid.version === 0 ? 'base58btc' : 'base32');\n      return;\n    }\n    if (typeof version === 'string') {\n      // e.g. 'base32' or false\n      var baseName = multibase.isEncoded(version);\n      if (baseName) {\n        // version is a CID String encoded with multibase, so v1\n        var _cid = multibase.decode(version);\n        this.version = /** @type {CIDVersion} */parseInt(_cid[0].toString(), 16);\n        this.codec = multicodec.getCodec(_cid.slice(1));\n        this.multihash = multicodec.rmPrefix(_cid.slice(1));\n        this.multibaseName = baseName;\n      } else {\n        // version is a base58btc string multihash, so v0\n        this.version = 0;\n        this.codec = 'dag-pb';\n        this.multihash = mh.fromB58String(version);\n        this.multibaseName = 'base58btc';\n      }\n      CID.validateCID(this);\n      Object.defineProperty(this, 'string', {\n        value: version\n      });\n      return;\n    }\n    if (version instanceof Uint8Array) {\n      var v = parseInt(version[0].toString(), 16);\n      if (v === 1) {\n        // version is a CID Uint8Array\n        var _cid2 = version;\n        this.version = v;\n        this.codec = multicodec.getCodec(_cid2.slice(1));\n        this.multihash = multicodec.rmPrefix(_cid2.slice(1));\n        this.multibaseName = 'base32';\n      } else {\n        // version is a raw multihash Uint8Array, so v0\n        this.version = 0;\n        this.codec = 'dag-pb';\n        this.multihash = version;\n        this.multibaseName = 'base58btc';\n      }\n      CID.validateCID(this);\n      return;\n    }\n\n    // otherwise, assemble the CID from the parameters\n\n    this.version = version;\n    if (typeof codec === 'number') {\n      // @ts-ignore\n      codec = codecInts[codec];\n    }\n    this.codec = /** @type {CodecName} */codec;\n    this.multihash = /** @type {Uint8Array} */multihash;\n\n    /**\n     * Multibase name as string.\n     *\n     * @deprecated\n     * @type {string}\n     */\n    this.multibaseName = multibaseName || (version === 0 ? 'base58btc' : 'base32');\n    CID.validateCID(this);\n  }\n\n  /**\n   * The CID as a `Uint8Array`\n   *\n   * @returns {Uint8Array}\n   *\n   */\n  _createClass(CID, [{\n    key: \"bytes\",\n    get: function get() {\n      // @ts-ignore\n      var bytes = this._bytes;\n      if (!bytes) {\n        if (this.version === 0) {\n          bytes = this.multihash;\n        } else if (this.version === 1) {\n          var codec = multicodec.getCodeVarint(this.codec);\n          bytes = uint8ArrayConcat([[1], codec, this.multihash], 1 + codec.byteLength + this.multihash.byteLength);\n        } else {\n          throw new Error('unsupported version');\n        }\n\n        // Cache this Uint8Array so it doesn't have to be recreated\n        Object.defineProperty(this, '_bytes', {\n          value: bytes\n        });\n      }\n      return bytes;\n    }\n\n    /**\n     * The prefix of the CID.\n     *\n     * @returns {Uint8Array}\n     */\n  }, {\n    key: \"prefix\",\n    get: function get() {\n      var codec = multicodec.getCodeVarint(this.codec);\n      var multihash = mh.prefix(this.multihash);\n      var prefix = uint8ArrayConcat([[this.version], codec, multihash], 1 + codec.byteLength + multihash.byteLength);\n      return prefix;\n    }\n\n    /**\n     * The codec of the CID in its number form.\n     *\n     * @returns {CodecCode}\n     */\n  }, {\n    key: \"code\",\n    get: function get() {\n      return codecs[this.codec];\n    }\n\n    /**\n     * Convert to a CID of version `0`.\n     *\n     * @returns {CID}\n     */\n  }, {\n    key: \"toV0\",\n    value: function toV0() {\n      if (this.codec !== 'dag-pb') {\n        throw new Error('Cannot convert a non dag-pb CID to CIDv0');\n      }\n      var _mh$decode = mh.decode(this.multihash),\n        name = _mh$decode.name,\n        length = _mh$decode.length;\n      if (name !== 'sha2-256') {\n        throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0');\n      }\n      if (length !== 32) {\n        throw new Error('Cannot convert non 32 byte multihash CID to CIDv0');\n      }\n      return new CID(0, this.codec, this.multihash);\n    }\n\n    /**\n     * Convert to a CID of version `1`.\n     *\n     * @returns {CID}\n     */\n  }, {\n    key: \"toV1\",\n    value: function toV1() {\n      return new CID(1, this.codec, this.multihash);\n    }\n\n    /**\n     * Encode the CID into a string.\n     *\n     * @param {BaseNameOrCode} [base=this.multibaseName] - Base encoding to use.\n     * @returns {string}\n     */\n  }, {\n    key: \"toBaseEncodedString\",\n    value: function toBaseEncodedString() {\n      var base = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.multibaseName;\n      // @ts-ignore non enumerable cache property\n      if (this.string && this.string.length !== 0 && base === this.multibaseName) {\n        // @ts-ignore non enumerable cache property\n        return this.string;\n      }\n      var str;\n      if (this.version === 0) {\n        if (base !== 'base58btc') {\n          throw new Error('not supported with CIDv0, to support different bases, please migrate the instance do CIDv1, you can do that through cid.toV1()');\n        }\n        str = mh.toB58String(this.multihash);\n      } else if (this.version === 1) {\n        str = uint8ArrayToString(multibase.encode(base, this.bytes));\n      } else {\n        throw new Error('unsupported version');\n      }\n      if (base === this.multibaseName) {\n        // cache the string value\n        Object.defineProperty(this, 'string', {\n          value: str\n        });\n      }\n      return str;\n    }\n\n    /**\n     * CID(QmdfTbBqBPQ7VNxZEYEj14VmRuZBkqFbiwReogJgS1zR1n)\n     *\n     * @returns {string}\n     */\n  }, {\n    key: _Symbol$for,\n    value: function value() {\n      return 'CID(' + this.toString() + ')';\n    }\n\n    /**\n     * Encode the CID into a string.\n     *\n     * @param {BaseNameOrCode} [base=this.multibaseName] - Base encoding to use.\n     * @returns {string}\n     */\n  }, {\n    key: \"toString\",\n    value: function toString(base) {\n      return this.toBaseEncodedString(base);\n    }\n\n    /**\n     * Serialize to a plain object.\n     *\n     * @returns {SerializedCID}\n     */\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        codec: this.codec,\n        version: this.version,\n        hash: this.multihash\n      };\n    }\n\n    /**\n     * Compare equality with another CID.\n     *\n     * @param {CID} other\n     * @returns {boolean}\n     */\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      return this.codec === other.codec && this.version === other.version && uint8ArrayEquals(this.multihash, other.multihash);\n    }\n\n    /**\n     * Test if the given input is a valid CID object.\n     * Throws if it is not.\n     *\n     * @param {any} other - The other CID.\n     * @returns {void}\n     */\n  }], [{\n    key: \"validateCID\",\n    value: function validateCID(other) {\n      var errorMsg = CIDUtil.checkCIDComponents(other);\n      if (errorMsg) {\n        throw new Error(errorMsg);\n      }\n    }\n\n    /**\n     * Check if object is a CID instance\n     *\n     * @param {any} value\n     * @returns {value is CID}\n     */\n  }, {\n    key: \"isCID\",\n    value: function isCID(value) {\n      return value instanceof CID || Boolean(value && value[symbol]);\n    }\n  }]);\n  return CID;\n}(Symbol.for('nodejs.util.inspect.custom'));\nCID.codecs = codecs;\nmodule.exports = CID;","map":{"version":3,"names":["mh","require","multibase","multicodec","CIDUtil","uint8ArrayConcat","uint8ArrayToString","uint8ArrayEquals","codecs","nameToCode","codecInts","Object","keys","reduce","p","name","symbol","Symbol","for","CID","version","codec","multihash","multibaseName","defineProperty","value","isCID","cid","baseName","isEncoded","decode","parseInt","toString","getCodec","slice","rmPrefix","fromB58String","validateCID","Uint8Array","v","bytes","_bytes","getCodeVarint","byteLength","Error","prefix","length","base","string","str","toB58String","encode","toBaseEncodedString","hash","other","errorMsg","checkCIDComponents","Boolean","module","exports"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/cids/src/index.js"],"sourcesContent":["'use strict'\n\nconst mh = require('multihashes')\nconst multibase = require('multibase')\nconst multicodec = require('multicodec')\nconst CIDUtil = require('./cid-util')\nconst uint8ArrayConcat = require('uint8arrays/concat')\nconst uint8ArrayToString = require('uint8arrays/to-string')\nconst uint8ArrayEquals = require('uint8arrays/equals')\n\nconst codecs = multicodec.nameToCode\nconst codecInts = /** @type {CodecName[]} */(Object.keys(codecs)).reduce((p, name) => {\n  p[codecs[name]] = name\n  return p\n}, /** @type {Record<CodecCode, CodecName>} */({}))\n\nconst symbol = Symbol.for('@ipld/js-cid/CID')\n\n/**\n * @typedef {Object} SerializedCID\n * @property {string} codec\n * @property {number} version\n * @property {Uint8Array} hash\n */\n/**\n * @typedef {0|1} CIDVersion\n * @typedef {import('multibase').BaseNameOrCode} BaseNameOrCode\n * @typedef {import('multicodec').CodecName} CodecName\n * @typedef {import('multicodec').CodecCode} CodecCode\n */\n\n/**\n * Class representing a CID `<mbase><version><mcodec><mhash>`\n * , as defined in [ipld/cid](https://github.com/multiformats/cid).\n *\n * @class CID\n */\nclass CID {\n  /**\n   * Create a new CID.\n   *\n   * The algorithm for argument input is roughly:\n   * ```\n   * if (cid)\n   *   -> create a copy\n   * else if (str)\n   *   if (1st char is on multibase table) -> CID String\n   *   else -> bs58 encoded multihash\n   * else if (Uint8Array)\n   *   if (1st byte is 0 or 1) -> CID\n   *   else -> multihash\n   * else if (Number)\n   *   -> construct CID by parts\n   * ```\n   *\n   * @param {CIDVersion | string | Uint8Array | CID} version\n   * @param {string|number} [codec]\n   * @param {Uint8Array} [multihash]\n   * @param {string} [multibaseName]\n   *\n   * @example\n   * new CID(<version>, <codec>, <multihash>, <multibaseName>)\n   * new CID(<cidStr>)\n   * new CID(<cid.bytes>)\n   * new CID(<multihash>)\n   * new CID(<bs58 encoded multihash>)\n   * new CID(<cid>)\n   */\n  constructor (version, codec, multihash, multibaseName) {\n    // We have below three blank field accessors only because\n    // otherwise TS will not pick them up if done after assignemnts\n\n    /**\n     * The version of the CID.\n     *\n     * @type {CIDVersion}\n     */\n    // eslint-disable-next-line no-unused-expressions\n    this.version\n\n    /**\n     * The codec of the CID.\n     *\n     * @deprecated\n     * @type {CodecName}\n     */\n    // eslint-disable-next-line no-unused-expressions\n    this.codec\n\n    /**\n     * The multihash of the CID.\n     *\n     * @type {Uint8Array}\n     */\n    // eslint-disable-next-line no-unused-expressions\n    this.multihash\n\n    Object.defineProperty(this, symbol, { value: true })\n    if (CID.isCID(version)) {\n      // version is an exising CID instance\n      const cid = /** @type {CID} */(version)\n      this.version = cid.version\n      this.codec = cid.codec\n      this.multihash = cid.multihash\n      // Default guard for when a CID < 0.7 is passed with no multibaseName\n      // @ts-ignore\n      this.multibaseName = cid.multibaseName || (cid.version === 0 ? 'base58btc' : 'base32')\n      return\n    }\n\n    if (typeof version === 'string') {\n      // e.g. 'base32' or false\n      const baseName = multibase.isEncoded(version)\n      if (baseName) {\n        // version is a CID String encoded with multibase, so v1\n        const cid = multibase.decode(version)\n        this.version = /** @type {CIDVersion} */(parseInt(cid[0].toString(), 16))\n        this.codec = multicodec.getCodec(cid.slice(1))\n        this.multihash = multicodec.rmPrefix(cid.slice(1))\n        this.multibaseName = baseName\n      } else {\n        // version is a base58btc string multihash, so v0\n        this.version = 0\n        this.codec = 'dag-pb'\n        this.multihash = mh.fromB58String(version)\n        this.multibaseName = 'base58btc'\n      }\n      CID.validateCID(this)\n      Object.defineProperty(this, 'string', { value: version })\n      return\n    }\n\n    if (version instanceof Uint8Array) {\n      const v = parseInt(version[0].toString(), 16)\n      if (v === 1) {\n        // version is a CID Uint8Array\n        const cid = version\n        this.version = v\n        this.codec = multicodec.getCodec(cid.slice(1))\n        this.multihash = multicodec.rmPrefix(cid.slice(1))\n        this.multibaseName = 'base32'\n      } else {\n        // version is a raw multihash Uint8Array, so v0\n        this.version = 0\n        this.codec = 'dag-pb'\n        this.multihash = version\n        this.multibaseName = 'base58btc'\n      }\n      CID.validateCID(this)\n      return\n    }\n\n    // otherwise, assemble the CID from the parameters\n\n    this.version = version\n\n    if (typeof codec === 'number') {\n      // @ts-ignore\n      codec = codecInts[codec]\n    }\n\n    this.codec = /** @type {CodecName} */ (codec)\n\n    this.multihash = /** @type {Uint8Array} */ (multihash)\n\n    /**\n     * Multibase name as string.\n     *\n     * @deprecated\n     * @type {string}\n     */\n    this.multibaseName = multibaseName || (version === 0 ? 'base58btc' : 'base32')\n\n    CID.validateCID(this)\n  }\n\n  /**\n   * The CID as a `Uint8Array`\n   *\n   * @returns {Uint8Array}\n   *\n   */\n  get bytes () {\n    // @ts-ignore\n    let bytes = this._bytes\n\n    if (!bytes) {\n      if (this.version === 0) {\n        bytes = this.multihash\n      } else if (this.version === 1) {\n        const codec = multicodec.getCodeVarint(this.codec)\n        bytes = uint8ArrayConcat([\n          [1], codec, this.multihash\n        ], 1 + codec.byteLength + this.multihash.byteLength)\n      } else {\n        throw new Error('unsupported version')\n      }\n\n      // Cache this Uint8Array so it doesn't have to be recreated\n      Object.defineProperty(this, '_bytes', { value: bytes })\n    }\n\n    return bytes\n  }\n\n  /**\n   * The prefix of the CID.\n   *\n   * @returns {Uint8Array}\n   */\n  get prefix () {\n    const codec = multicodec.getCodeVarint(this.codec)\n    const multihash = mh.prefix(this.multihash)\n    const prefix = uint8ArrayConcat([\n      [this.version], codec, multihash\n    ], 1 + codec.byteLength + multihash.byteLength)\n\n    return prefix\n  }\n\n  /**\n   * The codec of the CID in its number form.\n   *\n   * @returns {CodecCode}\n   */\n  get code () {\n    return codecs[this.codec]\n  }\n\n  /**\n   * Convert to a CID of version `0`.\n   *\n   * @returns {CID}\n   */\n  toV0 () {\n    if (this.codec !== 'dag-pb') {\n      throw new Error('Cannot convert a non dag-pb CID to CIDv0')\n    }\n\n    const { name, length } = mh.decode(this.multihash)\n\n    if (name !== 'sha2-256') {\n      throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0')\n    }\n\n    if (length !== 32) {\n      throw new Error('Cannot convert non 32 byte multihash CID to CIDv0')\n    }\n\n    return new CID(0, this.codec, this.multihash)\n  }\n\n  /**\n   * Convert to a CID of version `1`.\n   *\n   * @returns {CID}\n   */\n  toV1 () {\n    return new CID(1, this.codec, this.multihash)\n  }\n\n  /**\n   * Encode the CID into a string.\n   *\n   * @param {BaseNameOrCode} [base=this.multibaseName] - Base encoding to use.\n   * @returns {string}\n   */\n  toBaseEncodedString (base = this.multibaseName) {\n    // @ts-ignore non enumerable cache property\n    if (this.string && this.string.length !== 0 && base === this.multibaseName) {\n      // @ts-ignore non enumerable cache property\n      return this.string\n    }\n    let str\n    if (this.version === 0) {\n      if (base !== 'base58btc') {\n        throw new Error('not supported with CIDv0, to support different bases, please migrate the instance do CIDv1, you can do that through cid.toV1()')\n      }\n      str = mh.toB58String(this.multihash)\n    } else if (this.version === 1) {\n      str = uint8ArrayToString(multibase.encode(base, this.bytes))\n    } else {\n      throw new Error('unsupported version')\n    }\n    if (base === this.multibaseName) {\n      // cache the string value\n      Object.defineProperty(this, 'string', { value: str })\n    }\n    return str\n  }\n\n  /**\n   * CID(QmdfTbBqBPQ7VNxZEYEj14VmRuZBkqFbiwReogJgS1zR1n)\n   *\n   * @returns {string}\n   */\n  [Symbol.for('nodejs.util.inspect.custom')] () {\n    return 'CID(' + this.toString() + ')'\n  }\n\n  /**\n   * Encode the CID into a string.\n   *\n   * @param {BaseNameOrCode} [base=this.multibaseName] - Base encoding to use.\n   * @returns {string}\n   */\n  toString (base) {\n    return this.toBaseEncodedString(base)\n  }\n\n  /**\n   * Serialize to a plain object.\n   *\n   * @returns {SerializedCID}\n   */\n  toJSON () {\n    return {\n      codec: this.codec,\n      version: this.version,\n      hash: this.multihash\n    }\n  }\n\n  /**\n   * Compare equality with another CID.\n   *\n   * @param {CID} other\n   * @returns {boolean}\n   */\n  equals (other) {\n    return this.codec === other.codec &&\n      this.version === other.version &&\n      uint8ArrayEquals(this.multihash, other.multihash)\n  }\n\n  /**\n   * Test if the given input is a valid CID object.\n   * Throws if it is not.\n   *\n   * @param {any} other - The other CID.\n   * @returns {void}\n   */\n  static validateCID (other) {\n    const errorMsg = CIDUtil.checkCIDComponents(other)\n    if (errorMsg) {\n      throw new Error(errorMsg)\n    }\n  }\n\n  /**\n   * Check if object is a CID instance\n   *\n   * @param {any} value\n   * @returns {value is CID}\n   */\n  static isCID (value) {\n    return value instanceof CID || Boolean(value && value[symbol])\n  }\n}\n\nCID.codecs = codecs\n\nmodule.exports = CID\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}