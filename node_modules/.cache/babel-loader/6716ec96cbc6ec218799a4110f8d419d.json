{"ast":null,"code":"/**\n * Obliterator Iterator Class\n * ===========================\n *\n * Simple class representing the library's iterators.\n */\n\n/**\n * Iterator class.\n *\n * @constructor\n * @param {function} next - Next function.\n */\nfunction Iterator(next) {\n  if (typeof next !== 'function') throw new Error('obliterator/iterator: expecting a function!');\n  this.next = next;\n}\n\n/**\n * If symbols are supported, we add `next` to `Symbol.iterator`.\n */\nif (typeof Symbol !== 'undefined') Iterator.prototype[Symbol.iterator] = function () {\n  return this;\n};\n\n/**\n * Returning an iterator of the given values.\n *\n * @param  {any...} values - Values.\n * @return {Iterator}\n */\nIterator.of = function () {\n  var args = arguments,\n    l = args.length,\n    i = 0;\n  return new Iterator(function () {\n    if (i >= l) return {\n      done: true\n    };\n    return {\n      done: false,\n      value: args[i++]\n    };\n  });\n};\n\n/**\n * Returning an empty iterator.\n *\n * @return {Iterator}\n */\nIterator.empty = function () {\n  var iterator = new Iterator(function () {\n    return {\n      done: true\n    };\n  });\n  return iterator;\n};\n\n/**\n * Returning an iterator over the given indexed sequence.\n *\n * @param  {string|Array} sequence - Target sequence.\n * @return {Iterator}\n */\nIterator.fromSequence = function (sequence) {\n  var i = 0,\n    l = sequence.length;\n  return new Iterator(function () {\n    if (i >= l) return {\n      done: true\n    };\n    return {\n      done: false,\n      value: sequence[i++]\n    };\n  });\n};\n\n/**\n * Returning whether the given value is an iterator.\n *\n * @param  {any} value - Value.\n * @return {boolean}\n */\nIterator.is = function (value) {\n  if (value instanceof Iterator) return true;\n  return typeof value === 'object' && value !== null && typeof value.next === 'function';\n};\n\n/**\n * Exporting.\n */\nmodule.exports = Iterator;","map":{"version":3,"names":["Iterator","next","Error","Symbol","prototype","iterator","of","args","arguments","l","length","i","done","value","empty","fromSequence","sequence","is","module","exports"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/obliterator/iterator.js"],"sourcesContent":["/**\n * Obliterator Iterator Class\n * ===========================\n *\n * Simple class representing the library's iterators.\n */\n\n/**\n * Iterator class.\n *\n * @constructor\n * @param {function} next - Next function.\n */\nfunction Iterator(next) {\n  if (typeof next !== 'function')\n    throw new Error('obliterator/iterator: expecting a function!');\n\n  this.next = next;\n}\n\n/**\n * If symbols are supported, we add `next` to `Symbol.iterator`.\n */\nif (typeof Symbol !== 'undefined')\n  Iterator.prototype[Symbol.iterator] = function () {\n    return this;\n  };\n\n/**\n * Returning an iterator of the given values.\n *\n * @param  {any...} values - Values.\n * @return {Iterator}\n */\nIterator.of = function () {\n  var args = arguments,\n    l = args.length,\n    i = 0;\n\n  return new Iterator(function () {\n    if (i >= l) return {done: true};\n\n    return {done: false, value: args[i++]};\n  });\n};\n\n/**\n * Returning an empty iterator.\n *\n * @return {Iterator}\n */\nIterator.empty = function () {\n  var iterator = new Iterator(function () {\n    return {done: true};\n  });\n\n  return iterator;\n};\n\n/**\n * Returning an iterator over the given indexed sequence.\n *\n * @param  {string|Array} sequence - Target sequence.\n * @return {Iterator}\n */\nIterator.fromSequence = function (sequence) {\n  var i = 0,\n    l = sequence.length;\n\n  return new Iterator(function () {\n    if (i >= l) return {done: true};\n\n    return {done: false, value: sequence[i++]};\n  });\n};\n\n/**\n * Returning whether the given value is an iterator.\n *\n * @param  {any} value - Value.\n * @return {boolean}\n */\nIterator.is = function (value) {\n  if (value instanceof Iterator) return true;\n\n  return (\n    typeof value === 'object' &&\n    value !== null &&\n    typeof value.next === 'function'\n  );\n};\n\n/**\n * Exporting.\n */\nmodule.exports = Iterator;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,QAAQ,CAACC,IAAI,EAAE;EACtB,IAAI,OAAOA,IAAI,KAAK,UAAU,EAC5B,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;EAEhE,IAAI,CAACD,IAAI,GAAGA,IAAI;AAClB;;AAEA;AACA;AACA;AACA,IAAI,OAAOE,MAAM,KAAK,WAAW,EAC/BH,QAAQ,CAACI,SAAS,CAACD,MAAM,CAACE,QAAQ,CAAC,GAAG,YAAY;EAChD,OAAO,IAAI;AACb,CAAC;;AAEH;AACA;AACA;AACA;AACA;AACA;AACAL,QAAQ,CAACM,EAAE,GAAG,YAAY;EACxB,IAAIC,IAAI,GAAGC,SAAS;IAClBC,CAAC,GAAGF,IAAI,CAACG,MAAM;IACfC,CAAC,GAAG,CAAC;EAEP,OAAO,IAAIX,QAAQ,CAAC,YAAY;IAC9B,IAAIW,CAAC,IAAIF,CAAC,EAAE,OAAO;MAACG,IAAI,EAAE;IAAI,CAAC;IAE/B,OAAO;MAACA,IAAI,EAAE,KAAK;MAAEC,KAAK,EAAEN,IAAI,CAACI,CAAC,EAAE;IAAC,CAAC;EACxC,CAAC,CAAC;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAX,QAAQ,CAACc,KAAK,GAAG,YAAY;EAC3B,IAAIT,QAAQ,GAAG,IAAIL,QAAQ,CAAC,YAAY;IACtC,OAAO;MAACY,IAAI,EAAE;IAAI,CAAC;EACrB,CAAC,CAAC;EAEF,OAAOP,QAAQ;AACjB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACAL,QAAQ,CAACe,YAAY,GAAG,UAAUC,QAAQ,EAAE;EAC1C,IAAIL,CAAC,GAAG,CAAC;IACPF,CAAC,GAAGO,QAAQ,CAACN,MAAM;EAErB,OAAO,IAAIV,QAAQ,CAAC,YAAY;IAC9B,IAAIW,CAAC,IAAIF,CAAC,EAAE,OAAO;MAACG,IAAI,EAAE;IAAI,CAAC;IAE/B,OAAO;MAACA,IAAI,EAAE,KAAK;MAAEC,KAAK,EAAEG,QAAQ,CAACL,CAAC,EAAE;IAAC,CAAC;EAC5C,CAAC,CAAC;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACAX,QAAQ,CAACiB,EAAE,GAAG,UAAUJ,KAAK,EAAE;EAC7B,IAAIA,KAAK,YAAYb,QAAQ,EAAE,OAAO,IAAI;EAE1C,OACE,OAAOa,KAAK,KAAK,QAAQ,IACzBA,KAAK,KAAK,IAAI,IACd,OAAOA,KAAK,CAACZ,IAAI,KAAK,UAAU;AAEpC,CAAC;;AAED;AACA;AACA;AACAiB,MAAM,CAACC,OAAO,GAAGnB,QAAQ"},"metadata":{},"sourceType":"script"}