{"ast":null,"code":"import _slicedToArray from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { getCurrentHub } from '@sentry/core';\nimport { addInstrumentationHandler, isString, isPrimitive, isErrorEvent, getLocationHref, logger, addExceptionMechanism } from '@sentry/utils';\nimport { eventFromUnknownInput } from '../eventbuilder.js';\nimport { shouldIgnoreOnError } from '../helpers.js';\n\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n\n/** Global handlers */\nvar GlobalHandlers = /*#__PURE__*/function () {\n  /** JSDoc */\n  function GlobalHandlers(options) {\n    _classCallCheck(this, GlobalHandlers);\n    ;\n    GlobalHandlers.prototype.__init.call(this);\n    GlobalHandlers.prototype.__init2.call(this);\n    this._options = _objectSpread({\n      onerror: true,\n      onunhandledrejection: true\n    }, options);\n  }\n  /**\n   * @inheritDoc\n   */\n  _createClass(GlobalHandlers, [{\n    key: \"__init\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __init() {\n      this.name = GlobalHandlers.id;\n    }\n\n    /** JSDoc */\n\n    /**\n     * Stores references functions to installing handlers. Will set to undefined\n     * after they have been run so that they are not used twice.\n     */\n  }, {\n    key: \"__init2\",\n    value: function __init2() {\n      this._installFunc = {\n        onerror: _installGlobalOnErrorHandler,\n        onunhandledrejection: _installGlobalOnUnhandledRejectionHandler\n      };\n    }\n  }, {\n    key: \"setupOnce\",\n    value: function setupOnce() {\n      Error.stackTraceLimit = 50;\n      var options = this._options;\n\n      // We can disable guard-for-in as we construct the options object above + do checks against\n      // `this._installFunc` for the property.\n      // eslint-disable-next-line guard-for-in\n      for (var key in options) {\n        var installFunc = this._installFunc[key];\n        if (installFunc && options[key]) {\n          globalHandlerLog(key);\n          installFunc();\n          this._installFunc[key] = undefined;\n        }\n      }\n    }\n  }], [{\n    key: \"__initStatic\",\n    value:\n    /**\n     * @inheritDoc\n     */\n    function __initStatic() {\n      this.id = 'GlobalHandlers';\n    }\n  }]);\n  return GlobalHandlers;\n}();\nGlobalHandlers.__initStatic();\n\n/** JSDoc */\nfunction _installGlobalOnErrorHandler() {\n  addInstrumentationHandler('error',\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  function (data) {\n    var _getHubAndOptions = getHubAndOptions(),\n      _getHubAndOptions2 = _slicedToArray(_getHubAndOptions, 3),\n      hub = _getHubAndOptions2[0],\n      stackParser = _getHubAndOptions2[1],\n      attachStacktrace = _getHubAndOptions2[2];\n    if (!hub.getIntegration(GlobalHandlers)) {\n      return;\n    }\n    var msg = data.msg,\n      url = data.url,\n      line = data.line,\n      column = data.column,\n      error = data.error;\n    if (shouldIgnoreOnError() || error && error.__sentry_own_request__) {\n      return;\n    }\n    var event = error === undefined && isString(msg) ? _eventFromIncompleteOnError(msg, url, line, column) : _enhanceEventWithInitialFrame(eventFromUnknownInput(stackParser, error || msg, undefined, attachStacktrace, false), url, line, column);\n    event.level = 'error';\n    addMechanismAndCapture(hub, error, event, 'onerror');\n  });\n}\n\n/** JSDoc */\nfunction _installGlobalOnUnhandledRejectionHandler() {\n  addInstrumentationHandler('unhandledrejection',\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  function (e) {\n    var _getHubAndOptions3 = getHubAndOptions(),\n      _getHubAndOptions4 = _slicedToArray(_getHubAndOptions3, 3),\n      hub = _getHubAndOptions4[0],\n      stackParser = _getHubAndOptions4[1],\n      attachStacktrace = _getHubAndOptions4[2];\n    if (!hub.getIntegration(GlobalHandlers)) {\n      return;\n    }\n    var error = e;\n\n    // dig the object of the rejection out of known event types\n    try {\n      // PromiseRejectionEvents store the object of the rejection under 'reason'\n      // see https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent\n      if ('reason' in e) {\n        error = e.reason;\n      }\n      // something, somewhere, (likely a browser extension) effectively casts PromiseRejectionEvents\n      // to CustomEvents, moving the `promise` and `reason` attributes of the PRE into\n      // the CustomEvent's `detail` attribute, since they're not part of CustomEvent's spec\n      // see https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent and\n      // https://github.com/getsentry/sentry-javascript/issues/2380\n      else if ('detail' in e && 'reason' in e.detail) {\n        error = e.detail.reason;\n      }\n    } catch (_oO) {\n      // no-empty\n    }\n    if (shouldIgnoreOnError() || error && error.__sentry_own_request__) {\n      return true;\n    }\n    var event = isPrimitive(error) ? _eventFromRejectionWithPrimitive(error) : eventFromUnknownInput(stackParser, error, undefined, attachStacktrace, true);\n    event.level = 'error';\n    addMechanismAndCapture(hub, error, event, 'onunhandledrejection');\n    return;\n  });\n}\n\n/**\n * Create an event from a promise rejection where the `reason` is a primitive.\n *\n * @param reason: The `reason` property of the promise rejection\n * @returns An Event object with an appropriate `exception` value\n */\nfunction _eventFromRejectionWithPrimitive(reason) {\n  return {\n    exception: {\n      values: [{\n        type: 'UnhandledRejection',\n        // String() is needed because the Primitive type includes symbols (which can't be automatically stringified)\n        value: \"Non-Error promise rejection captured with value: \".concat(String(reason))\n      }]\n    }\n  };\n}\n\n/**\n * This function creates a stack from an old, error-less onerror handler.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _eventFromIncompleteOnError(msg, url, line, column) {\n  var ERROR_TYPES_RE = /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/i;\n\n  // If 'message' is ErrorEvent, get real message from inside\n  var message = isErrorEvent(msg) ? msg.message : msg;\n  var name = 'Error';\n  var groups = message.match(ERROR_TYPES_RE);\n  if (groups) {\n    name = groups[1];\n    message = groups[2];\n  }\n  var event = {\n    exception: {\n      values: [{\n        type: name,\n        value: message\n      }]\n    }\n  };\n  return _enhanceEventWithInitialFrame(event, url, line, column);\n}\n\n/** JSDoc */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _enhanceEventWithInitialFrame(event, url, line, column) {\n  // event.exception\n  var e = event.exception = event.exception || {};\n  // event.exception.values\n  var ev = e.values = e.values || [];\n  // event.exception.values[0]\n  var ev0 = ev[0] = ev[0] || {};\n  // event.exception.values[0].stacktrace\n  var ev0s = ev0.stacktrace = ev0.stacktrace || {};\n  // event.exception.values[0].stacktrace.frames\n  var ev0sf = ev0s.frames = ev0s.frames || [];\n  var colno = isNaN(parseInt(column, 10)) ? undefined : column;\n  var lineno = isNaN(parseInt(line, 10)) ? undefined : line;\n  var filename = isString(url) && url.length > 0 ? url : getLocationHref();\n\n  // event.exception.values[0].stacktrace.frames\n  if (ev0sf.length === 0) {\n    ev0sf.push({\n      colno: colno,\n      filename: filename,\n      function: '?',\n      in_app: true,\n      lineno: lineno\n    });\n  }\n  return event;\n}\nfunction globalHandlerLog(type) {\n  (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log(\"Global Handler attached: \".concat(type));\n}\nfunction addMechanismAndCapture(hub, error, event, type) {\n  addExceptionMechanism(event, {\n    handled: false,\n    type: type\n  });\n  hub.captureEvent(event, {\n    originalException: error\n  });\n}\nfunction getHubAndOptions() {\n  var hub = getCurrentHub();\n  var client = hub.getClient();\n  var options = client && client.getOptions() || {\n    stackParser: function stackParser() {\n      return [];\n    },\n    attachStacktrace: false\n  };\n  return [hub, options.stackParser, options.attachStacktrace];\n}\nexport { GlobalHandlers };","map":{"version":3,"sources":["../../../../src/integrations/globalhandlers.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-member-access */\nimport { getCurrentHub } from '@sentry/core';\nimport { Event, EventHint, Hub, Integration, Primitive, StackParser } from '@sentry/types';\nimport {\n  addExceptionMechanism,\n  addInstrumentationHandler,\n  getLocationHref,\n  isErrorEvent,\n  isPrimitive,\n  isString,\n  logger,\n} from '@sentry/utils';\n\nimport { BrowserClient } from '../client';\nimport { eventFromUnknownInput } from '../eventbuilder';\nimport { shouldIgnoreOnError } from '../helpers';\n\ntype GlobalHandlersIntegrationsOptionKeys = 'onerror' | 'onunhandledrejection';\n\n/** JSDoc */\ntype GlobalHandlersIntegrations = Record<GlobalHandlersIntegrationsOptionKeys, boolean>;\n\n/** Global handlers */\nexport class GlobalHandlers implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'GlobalHandlers';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = GlobalHandlers.id;\n\n  /** JSDoc */\n  private readonly _options: GlobalHandlersIntegrations;\n\n  /**\n   * Stores references functions to installing handlers. Will set to undefined\n   * after they have been run so that they are not used twice.\n   */\n  private _installFunc: Record<GlobalHandlersIntegrationsOptionKeys, (() => void) | undefined> = {\n    onerror: _installGlobalOnErrorHandler,\n    onunhandledrejection: _installGlobalOnUnhandledRejectionHandler,\n  };\n\n  /** JSDoc */\n  public constructor(options?: GlobalHandlersIntegrations) {\n    this._options = {\n      onerror: true,\n      onunhandledrejection: true,\n      ...options,\n    };\n  }\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    Error.stackTraceLimit = 50;\n    const options = this._options;\n\n    // We can disable guard-for-in as we construct the options object above + do checks against\n    // `this._installFunc` for the property.\n    // eslint-disable-next-line guard-for-in\n    for (const key in options) {\n      const installFunc = this._installFunc[key as GlobalHandlersIntegrationsOptionKeys];\n      if (installFunc && options[key as GlobalHandlersIntegrationsOptionKeys]) {\n        globalHandlerLog(key);\n        installFunc();\n        this._installFunc[key as GlobalHandlersIntegrationsOptionKeys] = undefined;\n      }\n    }\n  }\n}\n\n/** JSDoc */\nfunction _installGlobalOnErrorHandler(): void {\n  addInstrumentationHandler(\n    'error',\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (data: { msg: any; url: any; line: any; column: any; error: any }) => {\n      const [hub, stackParser, attachStacktrace] = getHubAndOptions();\n      if (!hub.getIntegration(GlobalHandlers)) {\n        return;\n      }\n      const { msg, url, line, column, error } = data;\n      if (shouldIgnoreOnError() || (error && error.__sentry_own_request__)) {\n        return;\n      }\n\n      const event =\n        error === undefined && isString(msg)\n          ? _eventFromIncompleteOnError(msg, url, line, column)\n          : _enhanceEventWithInitialFrame(\n              eventFromUnknownInput(stackParser, error || msg, undefined, attachStacktrace, false),\n              url,\n              line,\n              column,\n            );\n\n      event.level = 'error';\n\n      addMechanismAndCapture(hub, error, event, 'onerror');\n    },\n  );\n}\n\n/** JSDoc */\nfunction _installGlobalOnUnhandledRejectionHandler(): void {\n  addInstrumentationHandler(\n    'unhandledrejection',\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (e: any) => {\n      const [hub, stackParser, attachStacktrace] = getHubAndOptions();\n      if (!hub.getIntegration(GlobalHandlers)) {\n        return;\n      }\n      let error = e;\n\n      // dig the object of the rejection out of known event types\n      try {\n        // PromiseRejectionEvents store the object of the rejection under 'reason'\n        // see https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent\n        if ('reason' in e) {\n          error = e.reason;\n        }\n        // something, somewhere, (likely a browser extension) effectively casts PromiseRejectionEvents\n        // to CustomEvents, moving the `promise` and `reason` attributes of the PRE into\n        // the CustomEvent's `detail` attribute, since they're not part of CustomEvent's spec\n        // see https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent and\n        // https://github.com/getsentry/sentry-javascript/issues/2380\n        else if ('detail' in e && 'reason' in e.detail) {\n          error = e.detail.reason;\n        }\n      } catch (_oO) {\n        // no-empty\n      }\n\n      if (shouldIgnoreOnError() || (error && error.__sentry_own_request__)) {\n        return true;\n      }\n\n      const event = isPrimitive(error)\n        ? _eventFromRejectionWithPrimitive(error)\n        : eventFromUnknownInput(stackParser, error, undefined, attachStacktrace, true);\n\n      event.level = 'error';\n\n      addMechanismAndCapture(hub, error, event, 'onunhandledrejection');\n      return;\n    },\n  );\n}\n\n/**\n * Create an event from a promise rejection where the `reason` is a primitive.\n *\n * @param reason: The `reason` property of the promise rejection\n * @returns An Event object with an appropriate `exception` value\n */\nfunction _eventFromRejectionWithPrimitive(reason: Primitive): Event {\n  return {\n    exception: {\n      values: [\n        {\n          type: 'UnhandledRejection',\n          // String() is needed because the Primitive type includes symbols (which can't be automatically stringified)\n          value: `Non-Error promise rejection captured with value: ${String(reason)}`,\n        },\n      ],\n    },\n  };\n}\n\n/**\n * This function creates a stack from an old, error-less onerror handler.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _eventFromIncompleteOnError(msg: any, url: any, line: any, column: any): Event {\n  const ERROR_TYPES_RE =\n    /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/i;\n\n  // If 'message' is ErrorEvent, get real message from inside\n  let message = isErrorEvent(msg) ? msg.message : msg;\n  let name = 'Error';\n\n  const groups = message.match(ERROR_TYPES_RE);\n  if (groups) {\n    name = groups[1];\n    message = groups[2];\n  }\n\n  const event = {\n    exception: {\n      values: [\n        {\n          type: name,\n          value: message,\n        },\n      ],\n    },\n  };\n\n  return _enhanceEventWithInitialFrame(event, url, line, column);\n}\n\n/** JSDoc */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _enhanceEventWithInitialFrame(event: Event, url: any, line: any, column: any): Event {\n  // event.exception\n  const e = (event.exception = event.exception || {});\n  // event.exception.values\n  const ev = (e.values = e.values || []);\n  // event.exception.values[0]\n  const ev0 = (ev[0] = ev[0] || {});\n  // event.exception.values[0].stacktrace\n  const ev0s = (ev0.stacktrace = ev0.stacktrace || {});\n  // event.exception.values[0].stacktrace.frames\n  const ev0sf = (ev0s.frames = ev0s.frames || []);\n\n  const colno = isNaN(parseInt(column, 10)) ? undefined : column;\n  const lineno = isNaN(parseInt(line, 10)) ? undefined : line;\n  const filename = isString(url) && url.length > 0 ? url : getLocationHref();\n\n  // event.exception.values[0].stacktrace.frames\n  if (ev0sf.length === 0) {\n    ev0sf.push({\n      colno,\n      filename,\n      function: '?',\n      in_app: true,\n      lineno,\n    });\n  }\n\n  return event;\n}\n\nfunction globalHandlerLog(type: string): void {\n  __DEBUG_BUILD__ && logger.log(`Global Handler attached: ${type}`);\n}\n\nfunction addMechanismAndCapture(hub: Hub, error: EventHint['originalException'], event: Event, type: string): void {\n  addExceptionMechanism(event, {\n    handled: false,\n    type,\n  });\n  hub.captureEvent(event, {\n    originalException: error,\n  });\n}\n\nfunction getHubAndOptions(): [Hub, StackParser, boolean | undefined] {\n  const hub = getCurrentHub();\n  const client = hub.getClient<BrowserClient>();\n  const options = (client && client.getOptions()) || {\n    stackParser: () => [],\n    attachStacktrace: false,\n  };\n  return [hub, options.stackParser, options.attachStacktrace];\n}\n"]},"metadata":{},"sourceType":"module"}