{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useUpdatePoolData, useAllPoolData, useAddPoolKeys } from './hooks';\nimport { useEffect, useMemo } from 'react';\nimport { useTopPoolAddresses } from 'data/pools/topPools';\nimport { usePoolDatas } from 'data/pools/poolData';\nimport { POOL_HIDE } from '../../constants';\nimport { useParams } from 'react-router-dom';\nimport { useWeb3React } from '@web3-react/core';\nimport { chainIdToBackendName } from 'graphql/data/util';\nimport { SupportedNetwork } from 'constants/networks';\nexport default function Updater() {\n  _s();\n  // updaters\n  const {\n    chainName: chainNameParam\n  } = useParams();\n  const {\n    chainId: connectedChainId\n  } = useWeb3React();\n  const connectedChainName = chainIdToBackendName(connectedChainId);\n  const networkName = (chainNameParam ? chainNameParam : connectedChainName).toUpperCase();\n  const updatePoolData = useUpdatePoolData();\n  const addPoolKeys = useAddPoolKeys();\n\n  // data\n  const allPoolData = useAllPoolData();\n  const {\n    loading,\n    error,\n    addresses\n  } = useTopPoolAddresses();\n\n  // add top pools on first load\n  useEffect(() => {\n    if (addresses && !error && !loading) {\n      addPoolKeys(addresses);\n    }\n  }, [addPoolKeys, addresses, error, loading]);\n\n  // load data for pools we need to hide\n  useEffect(() => {\n    addPoolKeys(POOL_HIDE[SupportedNetwork[networkName]]);\n  }, [addPoolKeys, SupportedNetwork[networkName]]);\n\n  // detect for which addresses we havent loaded pool data yet\n  const unfetchedPoolAddresses = useMemo(() => {\n    return Object.keys(allPoolData).reduce((accum, key) => {\n      const poolData = allPoolData[key];\n      if (!poolData.data || !poolData.lastUpdated) {\n        accum.push(key);\n      }\n      return accum;\n    }, []);\n  }, [allPoolData]);\n\n  // update unloaded pool entries with fetched data\n  const {\n    error: poolDataError,\n    loading: poolDataLoading,\n    data: poolDatas\n  } = usePoolDatas(unfetchedPoolAddresses);\n  useEffect(() => {\n    if (poolDatas && !poolDataError && !poolDataLoading) {\n      updatePoolData(Object.values(poolDatas));\n    }\n  }, [poolDataError, poolDataLoading, poolDatas, updatePoolData]);\n  return null;\n}\n_s(Updater, \"5qz5AMS6SZVFX1NcesO272Za+bw=\", false, function () {\n  return [useParams, useWeb3React, useUpdatePoolData, useAddPoolKeys, useAllPoolData, useTopPoolAddresses, usePoolDatas];\n});\n_c = Updater;\nvar _c;\n$RefreshReg$(_c, \"Updater\");","map":{"version":3,"names":["useUpdatePoolData","useAllPoolData","useAddPoolKeys","useEffect","useMemo","useTopPoolAddresses","usePoolDatas","POOL_HIDE","useParams","useWeb3React","chainIdToBackendName","SupportedNetwork","Updater","chainName","chainNameParam","chainId","connectedChainId","connectedChainName","networkName","toUpperCase","updatePoolData","addPoolKeys","allPoolData","loading","error","addresses","unfetchedPoolAddresses","Object","keys","reduce","accum","key","poolData","data","lastUpdated","push","poolDataError","poolDataLoading","poolDatas","values"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/state/pools/updater.ts"],"sourcesContent":["import { useUpdatePoolData, useAllPoolData, useAddPoolKeys } from './hooks'\nimport { useEffect, useMemo } from 'react'\nimport { useTopPoolAddresses } from 'data/pools/topPools'\nimport { usePoolDatas } from 'data/pools/poolData'\nimport { POOL_HIDE } from '../../constants'\nimport { useActiveNetworkVersion } from 'state/application/hooks'\n\nimport { useParams } from 'react-router-dom'\nimport { useWeb3React } from '@web3-react/core'\nimport { chainIdToBackendName } from 'graphql/data/util'\nimport { SupportedNetwork } from 'constants/networks'\n\nexport default function Updater(): null {\n  // updaters\n  const { chainName: chainNameParam } = useParams<{ chainName?: string }>()\n  const { chainId: connectedChainId } = useWeb3React()\n  const connectedChainName = chainIdToBackendName(connectedChainId)\n  const networkName:any=(chainNameParam? chainNameParam : connectedChainName).toUpperCase();\n\n\n  const updatePoolData = useUpdatePoolData()\n  const addPoolKeys = useAddPoolKeys()\n\n  // data\n  const allPoolData = useAllPoolData()\n  const { loading, error, addresses } = useTopPoolAddresses()\n\n  // add top pools on first load\n  useEffect(() => {\n    if (addresses && !error && !loading) {\n      addPoolKeys(addresses)\n    }\n  }, [addPoolKeys, addresses, error, loading])\n\n  // load data for pools we need to hide\n  useEffect(() => {\n    addPoolKeys(POOL_HIDE[SupportedNetwork[networkName]])\n  }, [addPoolKeys, SupportedNetwork[networkName]])\n\n  // detect for which addresses we havent loaded pool data yet\n  const unfetchedPoolAddresses = useMemo(() => {\n    return Object.keys(allPoolData).reduce((accum: string[], key) => {\n      const poolData = allPoolData[key]\n      if (!poolData.data || !poolData.lastUpdated) {\n        accum.push(key)\n      }\n      return accum\n    }, [])\n  }, [allPoolData])\n\n  // update unloaded pool entries with fetched data\n  const { error: poolDataError, loading: poolDataLoading, data: poolDatas } = usePoolDatas(unfetchedPoolAddresses)\n\n  useEffect(() => {\n    if (poolDatas && !poolDataError && !poolDataLoading) {\n      updatePoolData(Object.values(poolDatas))\n    }\n  }, [poolDataError, poolDataLoading, poolDatas, updatePoolData])\n\n  return null\n}"],"mappings":";AAAA,SAASA,iBAAiB,EAAEC,cAAc,EAAEC,cAAc,QAAQ,SAAS;AAC3E,SAASC,SAAS,EAAEC,OAAO,QAAQ,OAAO;AAC1C,SAASC,mBAAmB,QAAQ,qBAAqB;AACzD,SAASC,YAAY,QAAQ,qBAAqB;AAClD,SAASC,SAAS,QAAQ,iBAAiB;AAG3C,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,SAASC,YAAY,QAAQ,kBAAkB;AAC/C,SAASC,oBAAoB,QAAQ,mBAAmB;AACxD,SAASC,gBAAgB,QAAQ,oBAAoB;AAErD,eAAe,SAASC,OAAO,GAAS;EAAA;EACtC;EACA,MAAM;IAAEC,SAAS,EAAEC;EAAe,CAAC,GAAGN,SAAS,EAA0B;EACzE,MAAM;IAAEO,OAAO,EAAEC;EAAiB,CAAC,GAAGP,YAAY,EAAE;EACpD,MAAMQ,kBAAkB,GAAGP,oBAAoB,CAACM,gBAAgB,CAAC;EACjE,MAAME,WAAe,GAAC,CAACJ,cAAc,GAAEA,cAAc,GAAGG,kBAAkB,EAAEE,WAAW,EAAE;EAGzF,MAAMC,cAAc,GAAGpB,iBAAiB,EAAE;EAC1C,MAAMqB,WAAW,GAAGnB,cAAc,EAAE;;EAEpC;EACA,MAAMoB,WAAW,GAAGrB,cAAc,EAAE;EACpC,MAAM;IAAEsB,OAAO;IAAEC,KAAK;IAAEC;EAAU,CAAC,GAAGpB,mBAAmB,EAAE;;EAE3D;EACAF,SAAS,CAAC,MAAM;IACd,IAAIsB,SAAS,IAAI,CAACD,KAAK,IAAI,CAACD,OAAO,EAAE;MACnCF,WAAW,CAACI,SAAS,CAAC;IACxB;EACF,CAAC,EAAE,CAACJ,WAAW,EAAEI,SAAS,EAAED,KAAK,EAAED,OAAO,CAAC,CAAC;;EAE5C;EACApB,SAAS,CAAC,MAAM;IACdkB,WAAW,CAACd,SAAS,CAACI,gBAAgB,CAACO,WAAW,CAAC,CAAC,CAAC;EACvD,CAAC,EAAE,CAACG,WAAW,EAAEV,gBAAgB,CAACO,WAAW,CAAC,CAAC,CAAC;;EAEhD;EACA,MAAMQ,sBAAsB,GAAGtB,OAAO,CAAC,MAAM;IAC3C,OAAOuB,MAAM,CAACC,IAAI,CAACN,WAAW,CAAC,CAACO,MAAM,CAAC,CAACC,KAAe,EAAEC,GAAG,KAAK;MAC/D,MAAMC,QAAQ,GAAGV,WAAW,CAACS,GAAG,CAAC;MACjC,IAAI,CAACC,QAAQ,CAACC,IAAI,IAAI,CAACD,QAAQ,CAACE,WAAW,EAAE;QAC3CJ,KAAK,CAACK,IAAI,CAACJ,GAAG,CAAC;MACjB;MACA,OAAOD,KAAK;IACd,CAAC,EAAE,EAAE,CAAC;EACR,CAAC,EAAE,CAACR,WAAW,CAAC,CAAC;;EAEjB;EACA,MAAM;IAAEE,KAAK,EAAEY,aAAa;IAAEb,OAAO,EAAEc,eAAe;IAAEJ,IAAI,EAAEK;EAAU,CAAC,GAAGhC,YAAY,CAACoB,sBAAsB,CAAC;EAEhHvB,SAAS,CAAC,MAAM;IACd,IAAImC,SAAS,IAAI,CAACF,aAAa,IAAI,CAACC,eAAe,EAAE;MACnDjB,cAAc,CAACO,MAAM,CAACY,MAAM,CAACD,SAAS,CAAC,CAAC;IAC1C;EACF,CAAC,EAAE,CAACF,aAAa,EAAEC,eAAe,EAAEC,SAAS,EAAElB,cAAc,CAAC,CAAC;EAE/D,OAAO,IAAI;AACb;AAAC,GAhDuBR,OAAO;EAAA,QAESJ,SAAS,EACTC,YAAY,EAK3BT,iBAAiB,EACpBE,cAAc,EAGdD,cAAc,EACII,mBAAmB,EA0BmBC,YAAY;AAAA;AAAA,KAvClEM,OAAO;AAAA;AAAA"},"metadata":{},"sourceType":"module"}