{"ast":null,"code":"// This optional code is used to register a service worker.\n// register() is not called by default.\nimport{isProductionEnv,isStagingEnv}from'utils/env';// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\nvar isLocalhost=Boolean(window.location.hostname==='localhost'||// [::1] is the IPv6 localhost address.\nwindow.location.hostname==='[::1]'||// 127.0.0.0/8 are considered localhost for IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));function registerValidSW(swUrl,config){navigator.serviceWorker.register(swUrl).then(function(registration){registration.onupdatefound=function(){var installingWorker=registration.installing;if(installingWorker==null){return;}installingWorker.onstatechange=function(){if(installingWorker.state==='installed'){if(navigator.serviceWorker.controller){// At this point, the updated precached content has been fetched,\n// but the previous service worker will still serve the older\n// content until all client tabs are closed.\nconsole.log('New content is available and will be used when all '+'tabs for this page are closed. See https://cra.link/PWA.');// Execute callback\nif(config&&config.onUpdate){config.onUpdate(registration);}}else{// At this point, everything has been precached.\n// It's the perfect time to display a\n// \"Content is cached for offline use.\" message.\nconsole.log('Content is cached for offline use.');// Execute callback\nif(config&&config.onSuccess){config.onSuccess(registration);}}}};};}).catch(function(error){console.error('Error during service worker registration:',error);});}function checkValidServiceWorker(swUrl,config){// Check if the service worker can be found. If it can't reload the page.\nfetch(swUrl,{headers:{'Service-Worker':'script'}}).then(function(response){// Ensure service worker exists, and that we really are getting a JS file.\nvar contentType=response.headers.get('content-type');if(response.status===404||contentType!=null&&contentType.indexOf('javascript')===-1){// No service worker found. Probably a different app. Reload the page.\nnavigator.serviceWorker.ready.then(function(registration){registration.unregister().then(function(){window.location.reload();});});}else{// Service worker found. Proceed as normal.\nregisterValidSW(swUrl,config);}}).catch(function(){console.log('No internet connection found. App is running in offline mode.');});}export function register(config){if((isProductionEnv()||isStagingEnv())&&'serviceWorker'in navigator){// The URL constructor is available in all browsers that support SW.\nvar publicUrl=new URL(process.env.PUBLIC_URL,window.location.href);if(publicUrl.origin!==window.location.origin){// Our service worker won't work if PUBLIC_URL is on a different origin\n// from what our page is served on. This might happen if a CDN is used to\n// serve assets; see https://github.com/facebook/create-react-app/issues/2374\nreturn;}window.addEventListener('load',function(){var swUrl=\"\".concat(process.env.PUBLIC_URL,\"/service-worker.js\");if(isLocalhost){// This is running on localhost. Let's check if a service worker still exists or not.\ncheckValidServiceWorker(swUrl,config);// Add some additional logging to localhost, pointing developers to the\n// service worker/PWA documentation.\nnavigator.serviceWorker.ready.then(function(){console.log('This web app is being served cache-first by a service '+'worker. To learn more, visit https://cra.link/PWA');});}else{// Is not localhost. Just register service worker\nregisterValidSW(swUrl,config);}});}}export function unregister(){if('serviceWorker'in navigator){navigator.serviceWorker.ready.then(function(registration){registration.unregister();}).catch(function(error){console.error(error.message);});}}","map":{"version":3,"names":["isProductionEnv","isStagingEnv","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","checkValidServiceWorker","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","publicUrl","URL","process","env","PUBLIC_URL","href","origin","addEventListener","message"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/serviceWorkerRegistration.ts"],"sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\nimport { isProductionEnv, isStagingEnv } from 'utils/env'\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function register(config?: Config) {\n  if ((isProductionEnv() || isStagingEnv()) && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}