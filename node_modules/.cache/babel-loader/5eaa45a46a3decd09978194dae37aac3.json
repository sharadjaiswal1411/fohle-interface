{"ast":null,"code":"import { WrappedTokenInfo } from 'state/lists/wrappedTokenInfo';\nconst mapCache = typeof WeakMap !== 'undefined' ? new WeakMap() : null;\nexport function tokensToChainTokenMap(tokens) {\n  const cached = mapCache === null || mapCache === void 0 ? void 0 : mapCache.get(tokens);\n  if (cached) return cached;\n  const [list, infos] = Array.isArray(tokens) ? [undefined, tokens] : [tokens, tokens.tokens];\n  const map = infos.reduce((map, info) => {\n    try {\n      var _map$token$chainId;\n      const token = new WrappedTokenInfo(info, list);\n      if (((_map$token$chainId = map[token.chainId]) === null || _map$token$chainId === void 0 ? void 0 : _map$token$chainId[token.address]) !== undefined) {\n        console.warn(`Duplicate token skipped: ${token.address}`);\n        return map;\n      }\n      if (!map[token.chainId]) {\n        map[token.chainId] = {};\n      }\n      map[token.chainId][token.address] = {\n        token,\n        list\n      };\n      return map;\n    } catch {\n      return map;\n    }\n  }, {});\n  mapCache === null || mapCache === void 0 ? void 0 : mapCache.set(tokens, map);\n  return map;\n}","map":{"version":3,"names":["WrappedTokenInfo","mapCache","WeakMap","tokensToChainTokenMap","tokens","cached","get","list","infos","Array","isArray","undefined","map","reduce","info","token","chainId","address","console","warn","set"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/fohle-interface/src/lib/hooks/useTokenList/utils.ts"],"sourcesContent":["import { TokenInfo, TokenList } from '@uniswap/token-lists'\nimport { WrappedTokenInfo } from 'state/lists/wrappedTokenInfo'\n\ntype TokenMap = Readonly<{ [tokenAddress: string]: { token: WrappedTokenInfo; list?: TokenList } }>\nexport type ChainTokenMap = Readonly<{ [chainId: number]: TokenMap }>\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: Mutable<T[P]>\n}\n\nconst mapCache = typeof WeakMap !== 'undefined' ? new WeakMap<TokenList | TokenInfo[], ChainTokenMap>() : null\n\nexport function tokensToChainTokenMap(tokens: TokenList | TokenInfo[]): ChainTokenMap {\n  const cached = mapCache?.get(tokens)\n  if (cached) return cached\n\n  const [list, infos] = Array.isArray(tokens) ? [undefined, tokens] : [tokens, tokens.tokens]\n  const map = infos.reduce<Mutable<ChainTokenMap>>((map, info) => {\n    try {\n      const token = new WrappedTokenInfo(info, list)\n      if (map[token.chainId]?.[token.address] !== undefined) {\n        console.warn(`Duplicate token skipped: ${token.address}`)\n        return map\n      }\n      if (!map[token.chainId]) {\n        map[token.chainId] = {}\n      }\n      map[token.chainId][token.address] = { token, list }\n      return map\n    } catch {\n      return map\n    }\n  }, {}) as ChainTokenMap\n  mapCache?.set(tokens, map)\n  return map\n}\n"],"mappings":"AACA,SAASA,gBAAgB,QAAQ,8BAA8B;AAS/D,MAAMC,QAAQ,GAAG,OAAOC,OAAO,KAAK,WAAW,GAAG,IAAIA,OAAO,EAA0C,GAAG,IAAI;AAE9G,OAAO,SAASC,qBAAqB,CAACC,MAA+B,EAAiB;EACpF,MAAMC,MAAM,GAAGJ,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEK,GAAG,CAACF,MAAM,CAAC;EACpC,IAAIC,MAAM,EAAE,OAAOA,MAAM;EAEzB,MAAM,CAACE,IAAI,EAAEC,KAAK,CAAC,GAAGC,KAAK,CAACC,OAAO,CAACN,MAAM,CAAC,GAAG,CAACO,SAAS,EAAEP,MAAM,CAAC,GAAG,CAACA,MAAM,EAAEA,MAAM,CAACA,MAAM,CAAC;EAC3F,MAAMQ,GAAG,GAAGJ,KAAK,CAACK,MAAM,CAAyB,CAACD,GAAG,EAAEE,IAAI,KAAK;IAC9D,IAAI;MAAA;MACF,MAAMC,KAAK,GAAG,IAAIf,gBAAgB,CAACc,IAAI,EAAEP,IAAI,CAAC;MAC9C,IAAI,uBAAAK,GAAG,CAACG,KAAK,CAACC,OAAO,CAAC,uDAAlB,mBAAqBD,KAAK,CAACE,OAAO,CAAC,MAAKN,SAAS,EAAE;QACrDO,OAAO,CAACC,IAAI,CAAE,4BAA2BJ,KAAK,CAACE,OAAQ,EAAC,CAAC;QACzD,OAAOL,GAAG;MACZ;MACA,IAAI,CAACA,GAAG,CAACG,KAAK,CAACC,OAAO,CAAC,EAAE;QACvBJ,GAAG,CAACG,KAAK,CAACC,OAAO,CAAC,GAAG,CAAC,CAAC;MACzB;MACAJ,GAAG,CAACG,KAAK,CAACC,OAAO,CAAC,CAACD,KAAK,CAACE,OAAO,CAAC,GAAG;QAAEF,KAAK;QAAER;MAAK,CAAC;MACnD,OAAOK,GAAG;IACZ,CAAC,CAAC,MAAM;MACN,OAAOA,GAAG;IACZ;EACF,CAAC,EAAE,CAAC,CAAC,CAAkB;EACvBX,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEmB,GAAG,CAAChB,MAAM,EAAEQ,GAAG,CAAC;EAC1B,OAAOA,GAAG;AACZ"},"metadata":{},"sourceType":"module"}