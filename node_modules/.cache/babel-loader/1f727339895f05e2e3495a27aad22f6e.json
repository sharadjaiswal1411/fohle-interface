{"ast":null,"code":"import { withScope, captureException, showReportDialog } from '@sentry/browser';\nimport { isError, logger } from '@sentry/utils';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport * as React from 'react';\nconst _jsxFileName = \"/home/runner/work/sentry-javascript/sentry-javascript/packages/react/src/errorboundary.tsx\";\nfunction isAtLeastReact17(version) {\n  const major = version.match(/^([^.]+)/);\n  return major !== null && parseInt(major[0]) >= 17;\n}\nconst UNKNOWN_COMPONENT = 'unknown';\nconst INITIAL_STATE = {\n  componentStack: null,\n  error: null,\n  eventId: null\n};\n\n/**\n * A ErrorBoundary component that logs errors to Sentry. Requires React >= 16.\n * NOTE: If you are a Sentry user, and you are seeing this stack frame, it means the\n * Sentry React SDK ErrorBoundary caught an error invoking your application code. This\n * is expected behavior and NOT indicative of a bug with the Sentry React SDK.\n */\nclass ErrorBoundary extends React.Component {\n  constructor() {\n    super(...arguments);\n    ErrorBoundary.prototype.__init.call(this);\n    ErrorBoundary.prototype.__init2.call(this);\n  }\n  __init() {\n    this.state = INITIAL_STATE;\n  }\n  componentDidCatch(error, _ref) {\n    let {\n      componentStack\n    } = _ref;\n    const {\n      beforeCapture,\n      onError,\n      showDialog,\n      dialogOptions\n    } = this.props;\n    withScope(scope => {\n      // If on React version >= 17, create stack trace from componentStack param and links\n      // to to the original error using `error.cause` otherwise relies on error param for stacktrace.\n      // Linking errors requires the `LinkedErrors` integration be enabled.\n      // See: https://reactjs.org/blog/2020/08/10/react-v17-rc.html#native-component-stacks\n      //\n      // Although `componentDidCatch` is typed to accept an `Error` object, it can also be invoked\n      // with non-error objects. This is why we need to check if the error is an error-like object.\n      // See: https://github.com/getsentry/sentry-javascript/issues/6167\n      if (isAtLeastReact17(React.version) && isError(error)) {\n        const errorBoundaryError = new Error(error.message);\n        errorBoundaryError.name = `React ErrorBoundary ${errorBoundaryError.name}`;\n        errorBoundaryError.stack = componentStack;\n\n        // Using the `LinkedErrors` integration to link the errors together.\n        error.cause = errorBoundaryError;\n      }\n      if (beforeCapture) {\n        beforeCapture(scope, error, componentStack);\n      }\n      const eventId = captureException(error, {\n        contexts: {\n          react: {\n            componentStack\n          }\n        }\n      });\n      if (onError) {\n        onError(error, componentStack, eventId);\n      }\n      if (showDialog) {\n        showReportDialog({\n          ...dialogOptions,\n          eventId\n        });\n      }\n\n      // componentDidCatch is used over getDerivedStateFromError\n      // so that componentStack is accessible through state.\n      this.setState({\n        error,\n        componentStack,\n        eventId\n      });\n    });\n  }\n  componentDidMount() {\n    const {\n      onMount\n    } = this.props;\n    if (onMount) {\n      onMount();\n    }\n  }\n  componentWillUnmount() {\n    const {\n      error,\n      componentStack,\n      eventId\n    } = this.state;\n    const {\n      onUnmount\n    } = this.props;\n    if (onUnmount) {\n      onUnmount(error, componentStack, eventId);\n    }\n  }\n  __init2() {\n    this.resetErrorBoundary = () => {\n      const {\n        onReset\n      } = this.props;\n      const {\n        error,\n        componentStack,\n        eventId\n      } = this.state;\n      if (onReset) {\n        onReset(error, componentStack, eventId);\n      }\n      this.setState(INITIAL_STATE);\n    };\n  }\n  render() {\n    const {\n      fallback,\n      children\n    } = this.props;\n    const {\n      error,\n      componentStack,\n      eventId\n    } = this.state;\n    if (error) {\n      let element = undefined;\n      if (typeof fallback === 'function') {\n        element = fallback({\n          error,\n          componentStack,\n          resetError: this.resetErrorBoundary,\n          eventId\n        });\n      } else {\n        element = fallback;\n      }\n      if (React.isValidElement(element)) {\n        return element;\n      }\n      if (fallback) {\n        (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.warn('fallback did not produce a valid ReactElement');\n      }\n\n      // Fail gracefully if no fallback provided or is not valid\n      return null;\n    }\n    if (typeof children === 'function') {\n      return children();\n    }\n    return children;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction withErrorBoundary(WrappedComponent, errorBoundaryOptions) {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  const componentDisplayName = WrappedComponent.displayName || WrappedComponent.name || UNKNOWN_COMPONENT;\n  const Wrapped = props => React.createElement(ErrorBoundary, {\n    ...errorBoundaryOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    }\n  }, React.createElement(WrappedComponent, {\n    ...props,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    }\n  }));\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  Wrapped.displayName = `errorBoundary(${componentDisplayName})`;\n\n  // Copy over static methods from Wrapped component to Profiler HOC\n  // See: https://reactjs.org/docs/higher-order-components.html#static-methods-must-be-copied-over\n  hoistNonReactStatics(Wrapped, WrappedComponent);\n  return Wrapped;\n}\nexport { ErrorBoundary, UNKNOWN_COMPONENT, isAtLeastReact17, withErrorBoundary };","map":{"version":3,"sources":["../../src/errorboundary.tsx"],"names":[],"mappings":"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","sourcesContent":["import { captureException, ReportDialogOptions, Scope, showReportDialog, withScope } from '@sentry/browser';\nimport { isError, logger } from '@sentry/utils';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport * as React from 'react';\n\nexport function isAtLeastReact17(version: string): boolean {\n  const major = version.match(/^([^.]+)/);\n  return major !== null && parseInt(major[0]) >= 17;\n}\n\nexport const UNKNOWN_COMPONENT = 'unknown';\n\nexport type FallbackRender = (errorData: {\n  error: Error;\n  componentStack: string | null;\n  eventId: string | null;\n  resetError(): void;\n}) => React.ReactElement;\n\nexport type ErrorBoundaryProps = {\n  children?: React.ReactNode | (() => React.ReactNode);\n  /** If a Sentry report dialog should be rendered on error */\n  showDialog?: boolean;\n  /**\n   * Options to be passed into the Sentry report dialog.\n   * No-op if {@link showDialog} is false.\n   */\n  dialogOptions?: ReportDialogOptions;\n  /**\n   * A fallback component that gets rendered when the error boundary encounters an error.\n   *\n   * Can either provide a React Component, or a function that returns React Component as\n   * a valid fallback prop. If a function is provided, the function will be called with\n   * the error, the component stack, and an function that resets the error boundary on error.\n   *\n   */\n  fallback?: React.ReactElement | FallbackRender;\n  /** Called when the error boundary encounters an error */\n  onError?(error: Error, componentStack: string, eventId: string): void;\n  /** Called on componentDidMount() */\n  onMount?(): void;\n  /** Called if resetError() is called from the fallback render props function  */\n  onReset?(error: Error | null, componentStack: string | null, eventId: string | null): void;\n  /** Called on componentWillUnmount() */\n  onUnmount?(error: Error | null, componentStack: string | null, eventId: string | null): void;\n  /** Called before the error is captured by Sentry, allows for you to add tags or context using the scope */\n  beforeCapture?(scope: Scope, error: Error | null, componentStack: string | null): void;\n};\n\ntype ErrorBoundaryState = {\n  componentStack: React.ErrorInfo['componentStack'] | null;\n  error: Error | null;\n  eventId: string | null;\n};\n\nconst INITIAL_STATE = {\n  componentStack: null,\n  error: null,\n  eventId: null,\n};\n\n/**\n * A ErrorBoundary component that logs errors to Sentry. Requires React >= 16.\n * NOTE: If you are a Sentry user, and you are seeing this stack frame, it means the\n * Sentry React SDK ErrorBoundary caught an error invoking your application code. This\n * is expected behavior and NOT indicative of a bug with the Sentry React SDK.\n */\nclass ErrorBoundary extends React.Component<ErrorBoundaryProps, ErrorBoundaryState> {\n  public state: ErrorBoundaryState = INITIAL_STATE;\n\n  public componentDidCatch(error: Error & { cause?: Error }, { componentStack }: React.ErrorInfo): void {\n    const { beforeCapture, onError, showDialog, dialogOptions } = this.props;\n\n    withScope(scope => {\n      // If on React version >= 17, create stack trace from componentStack param and links\n      // to to the original error using `error.cause` otherwise relies on error param for stacktrace.\n      // Linking errors requires the `LinkedErrors` integration be enabled.\n      // See: https://reactjs.org/blog/2020/08/10/react-v17-rc.html#native-component-stacks\n      //\n      // Although `componentDidCatch` is typed to accept an `Error` object, it can also be invoked\n      // with non-error objects. This is why we need to check if the error is an error-like object.\n      // See: https://github.com/getsentry/sentry-javascript/issues/6167\n      if (isAtLeastReact17(React.version) && isError(error)) {\n        const errorBoundaryError = new Error(error.message);\n        errorBoundaryError.name = `React ErrorBoundary ${errorBoundaryError.name}`;\n        errorBoundaryError.stack = componentStack;\n\n        // Using the `LinkedErrors` integration to link the errors together.\n        error.cause = errorBoundaryError;\n      }\n\n      if (beforeCapture) {\n        beforeCapture(scope, error, componentStack);\n      }\n      const eventId = captureException(error, { contexts: { react: { componentStack } } });\n      if (onError) {\n        onError(error, componentStack, eventId);\n      }\n      if (showDialog) {\n        showReportDialog({ ...dialogOptions, eventId });\n      }\n\n      // componentDidCatch is used over getDerivedStateFromError\n      // so that componentStack is accessible through state.\n      this.setState({ error, componentStack, eventId });\n    });\n  }\n\n  public componentDidMount(): void {\n    const { onMount } = this.props;\n    if (onMount) {\n      onMount();\n    }\n  }\n\n  public componentWillUnmount(): void {\n    const { error, componentStack, eventId } = this.state;\n    const { onUnmount } = this.props;\n    if (onUnmount) {\n      onUnmount(error, componentStack, eventId);\n    }\n  }\n\n  public resetErrorBoundary: () => void = () => {\n    const { onReset } = this.props;\n    const { error, componentStack, eventId } = this.state;\n    if (onReset) {\n      onReset(error, componentStack, eventId);\n    }\n    this.setState(INITIAL_STATE);\n  };\n\n  public render(): React.ReactNode {\n    const { fallback, children } = this.props;\n    const { error, componentStack, eventId } = this.state;\n\n    if (error) {\n      let element: React.ReactElement | undefined = undefined;\n      if (typeof fallback === 'function') {\n        element = fallback({ error, componentStack, resetError: this.resetErrorBoundary, eventId });\n      } else {\n        element = fallback;\n      }\n\n      if (React.isValidElement(element)) {\n        return element;\n      }\n\n      if (fallback) {\n        __DEBUG_BUILD__ && logger.warn('fallback did not produce a valid ReactElement');\n      }\n\n      // Fail gracefully if no fallback provided or is not valid\n      return null;\n    }\n\n    if (typeof children === 'function') {\n      return (children as () => React.ReactNode)();\n    }\n    return children;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction withErrorBoundary<P extends Record<string, any>>(\n  WrappedComponent: React.ComponentType<P>,\n  errorBoundaryOptions: ErrorBoundaryProps,\n): React.FC<P> {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  const componentDisplayName = WrappedComponent.displayName || WrappedComponent.name || UNKNOWN_COMPONENT;\n\n  const Wrapped: React.FC<P> = (props: P) => (\n    <ErrorBoundary {...errorBoundaryOptions}>\n      <WrappedComponent {...props} />\n    </ErrorBoundary>\n  );\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  Wrapped.displayName = `errorBoundary(${componentDisplayName})`;\n\n  // Copy over static methods from Wrapped component to Profiler HOC\n  // See: https://reactjs.org/docs/higher-order-components.html#static-methods-must-be-copied-over\n  hoistNonReactStatics(Wrapped, WrappedComponent);\n  return Wrapped;\n}\n\nexport { ErrorBoundary, withErrorBoundary };\n"]},"metadata":{},"sourceType":"module"}