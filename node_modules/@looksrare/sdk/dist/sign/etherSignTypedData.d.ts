import { ethers } from "ethers";
import { TypedDataDomain, TypedDataField } from "@ethersproject/abstract-signer";
/**
 * Some provider instances extend the JsonRpcProvider API.
 * Optional values here can be used to identify the wallet connector
 */
interface ExtendedJsonRpcProvider extends ethers.providers.JsonRpcProvider {
    provider?: {
        isFrame?: boolean;
    };
}
/**
 * Copy of ethers '_signTypedData' helper, modified to support EIP-712 typed signatures with different call names
 * https://github.com/ethers-io/ethers.js/blob/73a46efea32c3f9a4833ed77896a216e3d3752a0/packages/providers/src.ts/json-rpc-provider.ts#L263
 * TESTED WITH - MetaMask, Frame, Coinbase Wallet, WalletConnect: Trust, Rainbow, MetaMask Mobile, SafePal, TokenPocket, Math Wallet
 * NOT CURRENTLY SUPPORTED - Trezor
 */
export declare const etherSignTypedData: (provider: ExtendedJsonRpcProvider, address: string, domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>) => Promise<string>;
export {};
