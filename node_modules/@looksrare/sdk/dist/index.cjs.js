'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var hash = require('@ethersproject/hash');
var ethers = require('ethers');
var abi = require('@ethersproject/abi');
var contracts = require('@ethersproject/contracts');

var AggregatorFeeSharingWithUniswapV3 = [
	{
		inputs: [
			{
				internalType: "address",
				name: "_feeSharingSystem",
				type: "address"
			},
			{
				internalType: "address",
				name: "_uniswapRouter",
				type: "address"
			}
		],
		stateMutability: "nonpayable",
		type: "constructor"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: false,
				internalType: "uint256",
				name: "amountSold",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "amountReceived",
				type: "uint256"
			}
		],
		name: "ConversionToLOOKS",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "user",
				type: "address"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "amount",
				type: "uint256"
			}
		],
		name: "Deposit",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
		],
		name: "FailedConversion",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
		],
		name: "HarvestStart",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
		],
		name: "HarvestStop",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: false,
				internalType: "uint256",
				name: "harvestBufferBlocks",
				type: "uint256"
			}
		],
		name: "NewHarvestBufferBlocks",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: false,
				internalType: "uint256",
				name: "maxPriceLOOKSInWETH",
				type: "uint256"
			}
		],
		name: "NewMaximumPriceLOOKSInWETH",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: false,
				internalType: "uint256",
				name: "thresholdAmount",
				type: "uint256"
			}
		],
		name: "NewThresholdAmount",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: false,
				internalType: "uint24",
				name: "tradingFeeUniswapV3",
				type: "uint24"
			}
		],
		name: "NewTradingFeeUniswapV3",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "previousOwner",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "newOwner",
				type: "address"
			}
		],
		name: "OwnershipTransferred",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: false,
				internalType: "address",
				name: "account",
				type: "address"
			}
		],
		name: "Paused",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: false,
				internalType: "address",
				name: "account",
				type: "address"
			}
		],
		name: "Unpaused",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "user",
				type: "address"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "amount",
				type: "uint256"
			}
		],
		name: "Withdraw",
		type: "event"
	},
	{
		inputs: [
		],
		name: "MAXIMUM_HARVEST_BUFFER_BLOCKS",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "MINIMUM_DEPOSIT_LOOKS",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "calculateSharePriceInLOOKS",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "calculateSharePriceInPrimeShare",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "user",
				type: "address"
			}
		],
		name: "calculateSharesValueInLOOKS",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "canHarvest",
		outputs: [
			{
				internalType: "bool",
				name: "",
				type: "bool"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "checkAndAdjustLOOKSTokenAllowanceIfRequired",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "checkAndAdjustRewardTokenAllowanceIfRequired",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "amount",
				type: "uint256"
			}
		],
		name: "deposit",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "feeSharingSystem",
		outputs: [
			{
				internalType: "contract FeeSharingSystem",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "harvestAndSellAndCompound",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "harvestBufferBlocks",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "lastHarvestBlock",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "looksRareToken",
		outputs: [
			{
				internalType: "contract IERC20",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "maxPriceLOOKSInWETH",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "owner",
		outputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "pause",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "paused",
		outputs: [
			{
				internalType: "bool",
				name: "",
				type: "bool"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "renounceOwnership",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "rewardToken",
		outputs: [
			{
				internalType: "contract IERC20",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "startHarvest",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "stopHarvest",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "thresholdAmount",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "totalShares",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "tradingFeeUniswapV3",
		outputs: [
			{
				internalType: "uint24",
				name: "",
				type: "uint24"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "newOwner",
				type: "address"
			}
		],
		name: "transferOwnership",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "uniswapRouter",
		outputs: [
			{
				internalType: "contract ISwapRouter",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "unpause",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "_newHarvestBufferBlocks",
				type: "uint256"
			}
		],
		name: "updateHarvestBufferBlocks",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "_newMaxPriceLOOKSInWETH",
				type: "uint256"
			}
		],
		name: "updateMaxPriceOfLOOKSInWETH",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "_newThresholdAmount",
				type: "uint256"
			}
		],
		name: "updateThresholdAmount",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint24",
				name: "_newTradingFeeUniswapV3",
				type: "uint24"
			}
		],
		name: "updateTradingFeeUniswapV3",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			}
		],
		name: "userInfo",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "shares",
				type: "uint256"
			}
		],
		name: "withdraw",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "withdrawAll",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	}
];

var CurrencyManagerAbi = [
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "currency",
				type: "address"
			}
		],
		name: "CurrencyRemoved",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "currency",
				type: "address"
			}
		],
		name: "CurrencyWhitelisted",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "previousOwner",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "newOwner",
				type: "address"
			}
		],
		name: "OwnershipTransferred",
		type: "event"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "currency",
				type: "address"
			}
		],
		name: "addCurrency",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "currency",
				type: "address"
			}
		],
		name: "isCurrencyWhitelisted",
		outputs: [
			{
				internalType: "bool",
				name: "",
				type: "bool"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "owner",
		outputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "currency",
				type: "address"
			}
		],
		name: "removeCurrency",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "renounceOwnership",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "newOwner",
				type: "address"
			}
		],
		name: "transferOwnership",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "viewCountWhitelistedCurrencies",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "cursor",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "size",
				type: "uint256"
			}
		],
		name: "viewWhitelistedCurrencies",
		outputs: [
			{
				internalType: "address[]",
				name: "",
				type: "address[]"
			},
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	}
];

var ERC1155 = [
	{
		inputs: [
			{
				internalType: "string",
				name: "uri_",
				type: "string"
			}
		],
		stateMutability: "nonpayable",
		type: "constructor"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "account",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "operator",
				type: "address"
			},
			{
				indexed: false,
				internalType: "bool",
				name: "approved",
				type: "bool"
			}
		],
		name: "ApprovalForAll",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "operator",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "from",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "to",
				type: "address"
			},
			{
				indexed: false,
				internalType: "uint256[]",
				name: "ids",
				type: "uint256[]"
			},
			{
				indexed: false,
				internalType: "uint256[]",
				name: "values",
				type: "uint256[]"
			}
		],
		name: "TransferBatch",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "operator",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "from",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "to",
				type: "address"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "id",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "value",
				type: "uint256"
			}
		],
		name: "TransferSingle",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: false,
				internalType: "string",
				name: "value",
				type: "string"
			},
			{
				indexed: true,
				internalType: "uint256",
				name: "id",
				type: "uint256"
			}
		],
		name: "URI",
		type: "event"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "account",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "id",
				type: "uint256"
			}
		],
		name: "balanceOf",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address[]",
				name: "accounts",
				type: "address[]"
			},
			{
				internalType: "uint256[]",
				name: "ids",
				type: "uint256[]"
			}
		],
		name: "balanceOfBatch",
		outputs: [
			{
				internalType: "uint256[]",
				name: "",
				type: "uint256[]"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "account",
				type: "address"
			},
			{
				internalType: "address",
				name: "operator",
				type: "address"
			}
		],
		name: "isApprovedForAll",
		outputs: [
			{
				internalType: "bool",
				name: "",
				type: "bool"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "from",
				type: "address"
			},
			{
				internalType: "address",
				name: "to",
				type: "address"
			},
			{
				internalType: "uint256[]",
				name: "ids",
				type: "uint256[]"
			},
			{
				internalType: "uint256[]",
				name: "amounts",
				type: "uint256[]"
			},
			{
				internalType: "bytes",
				name: "data",
				type: "bytes"
			}
		],
		name: "safeBatchTransferFrom",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "from",
				type: "address"
			},
			{
				internalType: "address",
				name: "to",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "id",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "amount",
				type: "uint256"
			},
			{
				internalType: "bytes",
				name: "data",
				type: "bytes"
			}
		],
		name: "safeTransferFrom",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "operator",
				type: "address"
			},
			{
				internalType: "bool",
				name: "approved",
				type: "bool"
			}
		],
		name: "setApprovalForAll",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "bytes4",
				name: "interfaceId",
				type: "bytes4"
			}
		],
		name: "supportsInterface",
		outputs: [
			{
				internalType: "bool",
				name: "",
				type: "bool"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		name: "uri",
		outputs: [
			{
				internalType: "string",
				name: "",
				type: "string"
			}
		],
		stateMutability: "view",
		type: "function"
	}
];

var ERC20 = [
	{
		inputs: [
			{
				internalType: "string",
				name: "name_",
				type: "string"
			},
			{
				internalType: "string",
				name: "symbol_",
				type: "string"
			}
		],
		stateMutability: "nonpayable",
		type: "constructor"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "owner",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "spender",
				type: "address"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "value",
				type: "uint256"
			}
		],
		name: "Approval",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "from",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "to",
				type: "address"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "value",
				type: "uint256"
			}
		],
		name: "Transfer",
		type: "event"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "owner",
				type: "address"
			},
			{
				internalType: "address",
				name: "spender",
				type: "address"
			}
		],
		name: "allowance",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "spender",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "amount",
				type: "uint256"
			}
		],
		name: "approve",
		outputs: [
			{
				internalType: "bool",
				name: "",
				type: "bool"
			}
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "account",
				type: "address"
			}
		],
		name: "balanceOf",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "decimals",
		outputs: [
			{
				internalType: "uint8",
				name: "",
				type: "uint8"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "spender",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "subtractedValue",
				type: "uint256"
			}
		],
		name: "decreaseAllowance",
		outputs: [
			{
				internalType: "bool",
				name: "",
				type: "bool"
			}
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "spender",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "addedValue",
				type: "uint256"
			}
		],
		name: "increaseAllowance",
		outputs: [
			{
				internalType: "bool",
				name: "",
				type: "bool"
			}
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "name",
		outputs: [
			{
				internalType: "string",
				name: "",
				type: "string"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "symbol",
		outputs: [
			{
				internalType: "string",
				name: "",
				type: "string"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "totalSupply",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "recipient",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "amount",
				type: "uint256"
			}
		],
		name: "transfer",
		outputs: [
			{
				internalType: "bool",
				name: "",
				type: "bool"
			}
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "sender",
				type: "address"
			},
			{
				internalType: "address",
				name: "recipient",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "amount",
				type: "uint256"
			}
		],
		name: "transferFrom",
		outputs: [
			{
				internalType: "bool",
				name: "",
				type: "bool"
			}
		],
		stateMutability: "nonpayable",
		type: "function"
	}
];

var ERC721 = [
	{
		inputs: [
			{
				internalType: "string",
				name: "name_",
				type: "string"
			},
			{
				internalType: "string",
				name: "symbol_",
				type: "string"
			}
		],
		stateMutability: "nonpayable",
		type: "constructor"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "owner",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "approved",
				type: "address"
			},
			{
				indexed: true,
				internalType: "uint256",
				name: "tokenId",
				type: "uint256"
			}
		],
		name: "Approval",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "owner",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "operator",
				type: "address"
			},
			{
				indexed: false,
				internalType: "bool",
				name: "approved",
				type: "bool"
			}
		],
		name: "ApprovalForAll",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "from",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "to",
				type: "address"
			},
			{
				indexed: true,
				internalType: "uint256",
				name: "tokenId",
				type: "uint256"
			}
		],
		name: "Transfer",
		type: "event"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "to",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "tokenId",
				type: "uint256"
			}
		],
		name: "approve",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "owner",
				type: "address"
			}
		],
		name: "balanceOf",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "tokenId",
				type: "uint256"
			}
		],
		name: "getApproved",
		outputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "owner",
				type: "address"
			},
			{
				internalType: "address",
				name: "operator",
				type: "address"
			}
		],
		name: "isApprovedForAll",
		outputs: [
			{
				internalType: "bool",
				name: "",
				type: "bool"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "name",
		outputs: [
			{
				internalType: "string",
				name: "",
				type: "string"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "tokenId",
				type: "uint256"
			}
		],
		name: "ownerOf",
		outputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "from",
				type: "address"
			},
			{
				internalType: "address",
				name: "to",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "tokenId",
				type: "uint256"
			}
		],
		name: "safeTransferFrom",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "from",
				type: "address"
			},
			{
				internalType: "address",
				name: "to",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "tokenId",
				type: "uint256"
			},
			{
				internalType: "bytes",
				name: "_data",
				type: "bytes"
			}
		],
		name: "safeTransferFrom",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "operator",
				type: "address"
			},
			{
				internalType: "bool",
				name: "approved",
				type: "bool"
			}
		],
		name: "setApprovalForAll",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "bytes4",
				name: "interfaceId",
				type: "bytes4"
			}
		],
		name: "supportsInterface",
		outputs: [
			{
				internalType: "bool",
				name: "",
				type: "bool"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "symbol",
		outputs: [
			{
				internalType: "string",
				name: "",
				type: "string"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "tokenId",
				type: "uint256"
			}
		],
		name: "tokenURI",
		outputs: [
			{
				internalType: "string",
				name: "",
				type: "string"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "from",
				type: "address"
			},
			{
				internalType: "address",
				name: "to",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "tokenId",
				type: "uint256"
			}
		],
		name: "transferFrom",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	}
];

var ExecutionManager = [
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "previousOwner",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "newOwner",
				type: "address"
			}
		],
		name: "OwnershipTransferred",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "strategy",
				type: "address"
			}
		],
		name: "StrategyRemoved",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "strategy",
				type: "address"
			}
		],
		name: "StrategyWhitelisted",
		type: "event"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "strategy",
				type: "address"
			}
		],
		name: "addStrategy",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "strategy",
				type: "address"
			}
		],
		name: "isStrategyWhitelisted",
		outputs: [
			{
				internalType: "bool",
				name: "",
				type: "bool"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "owner",
		outputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "strategy",
				type: "address"
			}
		],
		name: "removeStrategy",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "renounceOwnership",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "newOwner",
				type: "address"
			}
		],
		name: "transferOwnership",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "viewCountWhitelistedStrategies",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "cursor",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "size",
				type: "uint256"
			}
		],
		name: "viewWhitelistedStrategies",
		outputs: [
			{
				internalType: "address[]",
				name: "",
				type: "address[]"
			},
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	}
];

var FeeSharingSystem = [
	{
		inputs: [
			{
				internalType: "address",
				name: "_looksRareToken",
				type: "address"
			},
			{
				internalType: "address",
				name: "_rewardToken",
				type: "address"
			},
			{
				internalType: "address",
				name: "_tokenDistributor",
				type: "address"
			}
		],
		stateMutability: "nonpayable",
		type: "constructor"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "user",
				type: "address"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "amount",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "harvestedAmount",
				type: "uint256"
			}
		],
		name: "Deposit",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "user",
				type: "address"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "harvestedAmount",
				type: "uint256"
			}
		],
		name: "Harvest",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: false,
				internalType: "uint256",
				name: "numberBlocks",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "rewardPerBlock",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "reward",
				type: "uint256"
			}
		],
		name: "NewRewardPeriod",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "previousOwner",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "newOwner",
				type: "address"
			}
		],
		name: "OwnershipTransferred",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "user",
				type: "address"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "amount",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "harvestedAmount",
				type: "uint256"
			}
		],
		name: "Withdraw",
		type: "event"
	},
	{
		inputs: [
		],
		name: "PRECISION_FACTOR",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "user",
				type: "address"
			}
		],
		name: "calculatePendingRewards",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "calculateSharePriceInLOOKS",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "user",
				type: "address"
			}
		],
		name: "calculateSharesValueInLOOKS",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "currentRewardPerBlock",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "amount",
				type: "uint256"
			},
			{
				internalType: "bool",
				name: "claimRewardToken",
				type: "bool"
			}
		],
		name: "deposit",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "harvest",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "lastRewardAdjustment",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "lastRewardBlock",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "lastUpdateBlock",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "looksRareToken",
		outputs: [
			{
				internalType: "contract IERC20",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "owner",
		outputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "periodEndBlock",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "renounceOwnership",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "rewardPerTokenStored",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "rewardToken",
		outputs: [
			{
				internalType: "contract IERC20",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "tokenDistributor",
		outputs: [
			{
				internalType: "contract TokenDistributor",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "totalShares",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "newOwner",
				type: "address"
			}
		],
		name: "transferOwnership",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "reward",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "rewardDurationInBlocks",
				type: "uint256"
			}
		],
		name: "updateRewards",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			}
		],
		name: "userInfo",
		outputs: [
			{
				internalType: "uint256",
				name: "shares",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "userRewardPerTokenPaid",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "rewards",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "shares",
				type: "uint256"
			},
			{
				internalType: "bool",
				name: "claimRewardToken",
				type: "bool"
			}
		],
		name: "withdraw",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "bool",
				name: "claimRewardToken",
				type: "bool"
			}
		],
		name: "withdrawAll",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	}
];

var IExecutionStrategy = [
	{
		inputs: [
			{
				components: [
					{
						internalType: "bool",
						name: "isOrderAsk",
						type: "bool"
					},
					{
						internalType: "address",
						name: "taker",
						type: "address"
					},
					{
						internalType: "uint256",
						name: "price",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "tokenId",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "minPercentageToAsk",
						type: "uint256"
					},
					{
						internalType: "bytes",
						name: "params",
						type: "bytes"
					}
				],
				internalType: "struct OrderTypes.TakerOrder",
				name: "takerAsk",
				type: "tuple"
			},
			{
				components: [
					{
						internalType: "bool",
						name: "isOrderAsk",
						type: "bool"
					},
					{
						internalType: "address",
						name: "signer",
						type: "address"
					},
					{
						internalType: "address",
						name: "collection",
						type: "address"
					},
					{
						internalType: "uint256",
						name: "price",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "tokenId",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "amount",
						type: "uint256"
					},
					{
						internalType: "address",
						name: "strategy",
						type: "address"
					},
					{
						internalType: "address",
						name: "currency",
						type: "address"
					},
					{
						internalType: "uint256",
						name: "nonce",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "startTime",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "endTime",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "minPercentageToAsk",
						type: "uint256"
					},
					{
						internalType: "bytes",
						name: "params",
						type: "bytes"
					},
					{
						internalType: "uint8",
						name: "v",
						type: "uint8"
					},
					{
						internalType: "bytes32",
						name: "r",
						type: "bytes32"
					},
					{
						internalType: "bytes32",
						name: "s",
						type: "bytes32"
					}
				],
				internalType: "struct OrderTypes.MakerOrder",
				name: "makerBid",
				type: "tuple"
			}
		],
		name: "canExecuteTakerAsk",
		outputs: [
			{
				internalType: "bool",
				name: "",
				type: "bool"
			},
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				components: [
					{
						internalType: "bool",
						name: "isOrderAsk",
						type: "bool"
					},
					{
						internalType: "address",
						name: "taker",
						type: "address"
					},
					{
						internalType: "uint256",
						name: "price",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "tokenId",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "minPercentageToAsk",
						type: "uint256"
					},
					{
						internalType: "bytes",
						name: "params",
						type: "bytes"
					}
				],
				internalType: "struct OrderTypes.TakerOrder",
				name: "takerBid",
				type: "tuple"
			},
			{
				components: [
					{
						internalType: "bool",
						name: "isOrderAsk",
						type: "bool"
					},
					{
						internalType: "address",
						name: "signer",
						type: "address"
					},
					{
						internalType: "address",
						name: "collection",
						type: "address"
					},
					{
						internalType: "uint256",
						name: "price",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "tokenId",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "amount",
						type: "uint256"
					},
					{
						internalType: "address",
						name: "strategy",
						type: "address"
					},
					{
						internalType: "address",
						name: "currency",
						type: "address"
					},
					{
						internalType: "uint256",
						name: "nonce",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "startTime",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "endTime",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "minPercentageToAsk",
						type: "uint256"
					},
					{
						internalType: "bytes",
						name: "params",
						type: "bytes"
					},
					{
						internalType: "uint8",
						name: "v",
						type: "uint8"
					},
					{
						internalType: "bytes32",
						name: "r",
						type: "bytes32"
					},
					{
						internalType: "bytes32",
						name: "s",
						type: "bytes32"
					}
				],
				internalType: "struct OrderTypes.MakerOrder",
				name: "makerAsk",
				type: "tuple"
			}
		],
		name: "canExecuteTakerBid",
		outputs: [
			{
				internalType: "bool",
				name: "",
				type: "bool"
			},
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "viewProtocolFee",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	}
];

var LooksRareAirdrop = [
	{
		inputs: [
			{
				internalType: "uint256",
				name: "_endTimestamp",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "_maximumAmountToClaim",
				type: "uint256"
			},
			{
				internalType: "address",
				name: "_looksRareToken",
				type: "address"
			},
			{
				internalType: "bytes32",
				name: "_domainSeparator",
				type: "bytes32"
			},
			{
				internalType: "address",
				name: "_transferManagerERC721",
				type: "address"
			},
			{
				internalType: "address",
				name: "_transferManagerERC1155",
				type: "address"
			},
			{
				internalType: "address",
				name: "_mainStrategy",
				type: "address"
			},
			{
				internalType: "address",
				name: "_weth",
				type: "address"
			}
		],
		stateMutability: "nonpayable",
		type: "constructor"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "user",
				type: "address"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "amount",
				type: "uint256"
			}
		],
		name: "AirdropRewardsClaim",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: false,
				internalType: "bytes32",
				name: "merkleRoot",
				type: "bytes32"
			}
		],
		name: "MerkleRootSet",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: false,
				internalType: "uint256",
				name: "endTimestamp",
				type: "uint256"
			}
		],
		name: "NewEndTimestamp",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "previousOwner",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "newOwner",
				type: "address"
			}
		],
		name: "OwnershipTransferred",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: false,
				internalType: "address",
				name: "account",
				type: "address"
			}
		],
		name: "Paused",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: false,
				internalType: "uint256",
				name: "amount",
				type: "uint256"
			}
		],
		name: "TokensWithdrawn",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: false,
				internalType: "address",
				name: "account",
				type: "address"
			}
		],
		name: "Unpaused",
		type: "event"
	},
	{
		inputs: [
		],
		name: "DOMAIN_SEPARATOR_EXCHANGE",
		outputs: [
			{
				internalType: "bytes32",
				name: "",
				type: "bytes32"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "MAIN_STRATEGY",
		outputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "MAXIMUM_AMOUNT_TO_CLAIM",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "TRANSFER_MANAGER_ERC1155",
		outputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "TRANSFER_MANAGER_ERC721",
		outputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "WETH",
		outputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "user",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "amount",
				type: "uint256"
			},
			{
				internalType: "bytes32[]",
				name: "merkleProof",
				type: "bytes32[]"
			}
		],
		name: "canClaim",
		outputs: [
			{
				internalType: "bool",
				name: "",
				type: "bool"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "amount",
				type: "uint256"
			},
			{
				internalType: "bytes32[]",
				name: "merkleProof",
				type: "bytes32[]"
			},
			{
				components: [
					{
						internalType: "bool",
						name: "isOrderAsk",
						type: "bool"
					},
					{
						internalType: "address",
						name: "signer",
						type: "address"
					},
					{
						internalType: "address",
						name: "collection",
						type: "address"
					},
					{
						internalType: "uint256",
						name: "price",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "tokenId",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "amount",
						type: "uint256"
					},
					{
						internalType: "address",
						name: "strategy",
						type: "address"
					},
					{
						internalType: "address",
						name: "currency",
						type: "address"
					},
					{
						internalType: "uint256",
						name: "nonce",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "startTime",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "endTime",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "minPercentageToAsk",
						type: "uint256"
					},
					{
						internalType: "bytes",
						name: "params",
						type: "bytes"
					},
					{
						internalType: "uint8",
						name: "v",
						type: "uint8"
					},
					{
						internalType: "bytes32",
						name: "r",
						type: "bytes32"
					},
					{
						internalType: "bytes32",
						name: "s",
						type: "bytes32"
					}
				],
				internalType: "struct OrderTypes.MakerOrder",
				name: "makerAsk",
				type: "tuple"
			},
			{
				internalType: "bool",
				name: "isERC721",
				type: "bool"
			}
		],
		name: "claim",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "endTimestamp",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			}
		],
		name: "hasClaimed",
		outputs: [
			{
				internalType: "bool",
				name: "",
				type: "bool"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "isMerkleRootSet",
		outputs: [
			{
				internalType: "bool",
				name: "",
				type: "bool"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "looksRareToken",
		outputs: [
			{
				internalType: "contract IERC20",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "merkleRoot",
		outputs: [
			{
				internalType: "bytes32",
				name: "",
				type: "bytes32"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "owner",
		outputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "pauseAirdrop",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "paused",
		outputs: [
			{
				internalType: "bool",
				name: "",
				type: "bool"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "renounceOwnership",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "bytes32",
				name: "_merkleRoot",
				type: "bytes32"
			}
		],
		name: "setMerkleRoot",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "newOwner",
				type: "address"
			}
		],
		name: "transferOwnership",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "unpauseAirdrop",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "newEndTimestamp",
				type: "uint256"
			}
		],
		name: "updateEndTimestamp",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "withdrawTokenRewards",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	}
];

var LooksRareExchange = [
	{
		inputs: [
			{
				internalType: "address",
				name: "_currencyManager",
				type: "address"
			},
			{
				internalType: "address",
				name: "_executionManager",
				type: "address"
			},
			{
				internalType: "address",
				name: "_royaltyFeeManager",
				type: "address"
			},
			{
				internalType: "address",
				name: "_WETH",
				type: "address"
			},
			{
				internalType: "address",
				name: "_protocolFeeRecipient",
				type: "address"
			}
		],
		stateMutability: "nonpayable",
		type: "constructor"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "user",
				type: "address"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "newMinNonce",
				type: "uint256"
			}
		],
		name: "CancelAllOrders",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "user",
				type: "address"
			},
			{
				indexed: false,
				internalType: "uint256[]",
				name: "orderNonces",
				type: "uint256[]"
			}
		],
		name: "CancelMultipleOrders",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "currencyManager",
				type: "address"
			}
		],
		name: "NewCurrencyManager",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "executionManager",
				type: "address"
			}
		],
		name: "NewExecutionManager",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "protocolFeeRecipient",
				type: "address"
			}
		],
		name: "NewProtocolFeeRecipient",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "royaltyFeeManager",
				type: "address"
			}
		],
		name: "NewRoyaltyFeeManager",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "transferSelectorNFT",
				type: "address"
			}
		],
		name: "NewTransferSelectorNFT",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "previousOwner",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "newOwner",
				type: "address"
			}
		],
		name: "OwnershipTransferred",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "collection",
				type: "address"
			},
			{
				indexed: true,
				internalType: "uint256",
				name: "tokenId",
				type: "uint256"
			},
			{
				indexed: true,
				internalType: "address",
				name: "royaltyRecipient",
				type: "address"
			},
			{
				indexed: false,
				internalType: "address",
				name: "currency",
				type: "address"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "amount",
				type: "uint256"
			}
		],
		name: "RoyaltyPayment",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: false,
				internalType: "bytes32",
				name: "orderHash",
				type: "bytes32"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "orderNonce",
				type: "uint256"
			},
			{
				indexed: true,
				internalType: "address",
				name: "taker",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "maker",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "strategy",
				type: "address"
			},
			{
				indexed: false,
				internalType: "address",
				name: "currency",
				type: "address"
			},
			{
				indexed: false,
				internalType: "address",
				name: "collection",
				type: "address"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "tokenId",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "amount",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "price",
				type: "uint256"
			}
		],
		name: "TakerAsk",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: false,
				internalType: "bytes32",
				name: "orderHash",
				type: "bytes32"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "orderNonce",
				type: "uint256"
			},
			{
				indexed: true,
				internalType: "address",
				name: "taker",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "maker",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "strategy",
				type: "address"
			},
			{
				indexed: false,
				internalType: "address",
				name: "currency",
				type: "address"
			},
			{
				indexed: false,
				internalType: "address",
				name: "collection",
				type: "address"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "tokenId",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "amount",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "price",
				type: "uint256"
			}
		],
		name: "TakerBid",
		type: "event"
	},
	{
		inputs: [
		],
		name: "DOMAIN_SEPARATOR",
		outputs: [
			{
				internalType: "bytes32",
				name: "",
				type: "bytes32"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "WETH",
		outputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "minNonce",
				type: "uint256"
			}
		],
		name: "cancelAllOrdersForSender",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256[]",
				name: "orderNonces",
				type: "uint256[]"
			}
		],
		name: "cancelMultipleMakerOrders",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "currencyManager",
		outputs: [
			{
				internalType: "contract ICurrencyManager",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "executionManager",
		outputs: [
			{
				internalType: "contract IExecutionManager",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "user",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "orderNonce",
				type: "uint256"
			}
		],
		name: "isUserOrderNonceExecutedOrCancelled",
		outputs: [
			{
				internalType: "bool",
				name: "",
				type: "bool"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				components: [
					{
						internalType: "bool",
						name: "isOrderAsk",
						type: "bool"
					},
					{
						internalType: "address",
						name: "taker",
						type: "address"
					},
					{
						internalType: "uint256",
						name: "price",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "tokenId",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "minPercentageToAsk",
						type: "uint256"
					},
					{
						internalType: "bytes",
						name: "params",
						type: "bytes"
					}
				],
				internalType: "struct OrderTypes.TakerOrder",
				name: "takerBid",
				type: "tuple"
			},
			{
				components: [
					{
						internalType: "bool",
						name: "isOrderAsk",
						type: "bool"
					},
					{
						internalType: "address",
						name: "signer",
						type: "address"
					},
					{
						internalType: "address",
						name: "collection",
						type: "address"
					},
					{
						internalType: "uint256",
						name: "price",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "tokenId",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "amount",
						type: "uint256"
					},
					{
						internalType: "address",
						name: "strategy",
						type: "address"
					},
					{
						internalType: "address",
						name: "currency",
						type: "address"
					},
					{
						internalType: "uint256",
						name: "nonce",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "startTime",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "endTime",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "minPercentageToAsk",
						type: "uint256"
					},
					{
						internalType: "bytes",
						name: "params",
						type: "bytes"
					},
					{
						internalType: "uint8",
						name: "v",
						type: "uint8"
					},
					{
						internalType: "bytes32",
						name: "r",
						type: "bytes32"
					},
					{
						internalType: "bytes32",
						name: "s",
						type: "bytes32"
					}
				],
				internalType: "struct OrderTypes.MakerOrder",
				name: "makerAsk",
				type: "tuple"
			}
		],
		name: "matchAskWithTakerBid",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				components: [
					{
						internalType: "bool",
						name: "isOrderAsk",
						type: "bool"
					},
					{
						internalType: "address",
						name: "taker",
						type: "address"
					},
					{
						internalType: "uint256",
						name: "price",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "tokenId",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "minPercentageToAsk",
						type: "uint256"
					},
					{
						internalType: "bytes",
						name: "params",
						type: "bytes"
					}
				],
				internalType: "struct OrderTypes.TakerOrder",
				name: "takerBid",
				type: "tuple"
			},
			{
				components: [
					{
						internalType: "bool",
						name: "isOrderAsk",
						type: "bool"
					},
					{
						internalType: "address",
						name: "signer",
						type: "address"
					},
					{
						internalType: "address",
						name: "collection",
						type: "address"
					},
					{
						internalType: "uint256",
						name: "price",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "tokenId",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "amount",
						type: "uint256"
					},
					{
						internalType: "address",
						name: "strategy",
						type: "address"
					},
					{
						internalType: "address",
						name: "currency",
						type: "address"
					},
					{
						internalType: "uint256",
						name: "nonce",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "startTime",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "endTime",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "minPercentageToAsk",
						type: "uint256"
					},
					{
						internalType: "bytes",
						name: "params",
						type: "bytes"
					},
					{
						internalType: "uint8",
						name: "v",
						type: "uint8"
					},
					{
						internalType: "bytes32",
						name: "r",
						type: "bytes32"
					},
					{
						internalType: "bytes32",
						name: "s",
						type: "bytes32"
					}
				],
				internalType: "struct OrderTypes.MakerOrder",
				name: "makerAsk",
				type: "tuple"
			}
		],
		name: "matchAskWithTakerBidUsingETHAndWETH",
		outputs: [
		],
		stateMutability: "payable",
		type: "function"
	},
	{
		inputs: [
			{
				components: [
					{
						internalType: "bool",
						name: "isOrderAsk",
						type: "bool"
					},
					{
						internalType: "address",
						name: "taker",
						type: "address"
					},
					{
						internalType: "uint256",
						name: "price",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "tokenId",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "minPercentageToAsk",
						type: "uint256"
					},
					{
						internalType: "bytes",
						name: "params",
						type: "bytes"
					}
				],
				internalType: "struct OrderTypes.TakerOrder",
				name: "takerAsk",
				type: "tuple"
			},
			{
				components: [
					{
						internalType: "bool",
						name: "isOrderAsk",
						type: "bool"
					},
					{
						internalType: "address",
						name: "signer",
						type: "address"
					},
					{
						internalType: "address",
						name: "collection",
						type: "address"
					},
					{
						internalType: "uint256",
						name: "price",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "tokenId",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "amount",
						type: "uint256"
					},
					{
						internalType: "address",
						name: "strategy",
						type: "address"
					},
					{
						internalType: "address",
						name: "currency",
						type: "address"
					},
					{
						internalType: "uint256",
						name: "nonce",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "startTime",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "endTime",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "minPercentageToAsk",
						type: "uint256"
					},
					{
						internalType: "bytes",
						name: "params",
						type: "bytes"
					},
					{
						internalType: "uint8",
						name: "v",
						type: "uint8"
					},
					{
						internalType: "bytes32",
						name: "r",
						type: "bytes32"
					},
					{
						internalType: "bytes32",
						name: "s",
						type: "bytes32"
					}
				],
				internalType: "struct OrderTypes.MakerOrder",
				name: "makerBid",
				type: "tuple"
			}
		],
		name: "matchBidWithTakerAsk",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "owner",
		outputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "protocolFeeRecipient",
		outputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "renounceOwnership",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "royaltyFeeManager",
		outputs: [
			{
				internalType: "contract IRoyaltyFeeManager",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "newOwner",
				type: "address"
			}
		],
		name: "transferOwnership",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "transferSelectorNFT",
		outputs: [
			{
				internalType: "contract ITransferSelectorNFT",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "_currencyManager",
				type: "address"
			}
		],
		name: "updateCurrencyManager",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "_executionManager",
				type: "address"
			}
		],
		name: "updateExecutionManager",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "_protocolFeeRecipient",
				type: "address"
			}
		],
		name: "updateProtocolFeeRecipient",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "_royaltyFeeManager",
				type: "address"
			}
		],
		name: "updateRoyaltyFeeManager",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "_transferSelectorNFT",
				type: "address"
			}
		],
		name: "updateTransferSelectorNFT",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			}
		],
		name: "userMinOrderNonce",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	}
];

var multicall2Abi = [
	{
		inputs: [
			{
				components: [
					{
						internalType: "address",
						name: "target",
						type: "address"
					},
					{
						internalType: "bytes",
						name: "callData",
						type: "bytes"
					}
				],
				internalType: "struct Multicall2.Call[]",
				name: "calls",
				type: "tuple[]"
			}
		],
		name: "aggregate",
		outputs: [
			{
				internalType: "uint256",
				name: "blockNumber",
				type: "uint256"
			},
			{
				internalType: "bytes[]",
				name: "returnData",
				type: "bytes[]"
			}
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				components: [
					{
						internalType: "address",
						name: "target",
						type: "address"
					},
					{
						internalType: "bytes",
						name: "callData",
						type: "bytes"
					}
				],
				internalType: "struct Multicall2.Call[]",
				name: "calls",
				type: "tuple[]"
			}
		],
		name: "blockAndAggregate",
		outputs: [
			{
				internalType: "uint256",
				name: "blockNumber",
				type: "uint256"
			},
			{
				internalType: "bytes32",
				name: "blockHash",
				type: "bytes32"
			},
			{
				components: [
					{
						internalType: "bool",
						name: "success",
						type: "bool"
					},
					{
						internalType: "bytes",
						name: "returnData",
						type: "bytes"
					}
				],
				internalType: "struct Multicall2.Result[]",
				name: "returnData",
				type: "tuple[]"
			}
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "blockNumber",
				type: "uint256"
			}
		],
		name: "getBlockHash",
		outputs: [
			{
				internalType: "bytes32",
				name: "blockHash",
				type: "bytes32"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "getBlockNumber",
		outputs: [
			{
				internalType: "uint256",
				name: "blockNumber",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "getCurrentBlockCoinbase",
		outputs: [
			{
				internalType: "address",
				name: "coinbase",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "getCurrentBlockDifficulty",
		outputs: [
			{
				internalType: "uint256",
				name: "difficulty",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "getCurrentBlockGasLimit",
		outputs: [
			{
				internalType: "uint256",
				name: "gaslimit",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "getCurrentBlockTimestamp",
		outputs: [
			{
				internalType: "uint256",
				name: "timestamp",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "addr",
				type: "address"
			}
		],
		name: "getEthBalance",
		outputs: [
			{
				internalType: "uint256",
				name: "balance",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "getLastBlockHash",
		outputs: [
			{
				internalType: "bytes32",
				name: "blockHash",
				type: "bytes32"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "bool",
				name: "requireSuccess",
				type: "bool"
			},
			{
				components: [
					{
						internalType: "address",
						name: "target",
						type: "address"
					},
					{
						internalType: "bytes",
						name: "callData",
						type: "bytes"
					}
				],
				internalType: "struct Multicall2.Call[]",
				name: "calls",
				type: "tuple[]"
			}
		],
		name: "tryAggregate",
		outputs: [
			{
				components: [
					{
						internalType: "bool",
						name: "success",
						type: "bool"
					},
					{
						internalType: "bytes",
						name: "returnData",
						type: "bytes"
					}
				],
				internalType: "struct Multicall2.Result[]",
				name: "returnData",
				type: "tuple[]"
			}
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "bool",
				name: "requireSuccess",
				type: "bool"
			},
			{
				components: [
					{
						internalType: "address",
						name: "target",
						type: "address"
					},
					{
						internalType: "bytes",
						name: "callData",
						type: "bytes"
					}
				],
				internalType: "struct Multicall2.Call[]",
				name: "calls",
				type: "tuple[]"
			}
		],
		name: "tryBlockAndAggregate",
		outputs: [
			{
				internalType: "uint256",
				name: "blockNumber",
				type: "uint256"
			},
			{
				internalType: "bytes32",
				name: "blockHash",
				type: "bytes32"
			},
			{
				components: [
					{
						internalType: "bool",
						name: "success",
						type: "bool"
					},
					{
						internalType: "bytes",
						name: "returnData",
						type: "bytes"
					}
				],
				internalType: "struct Multicall2.Result[]",
				name: "returnData",
				type: "tuple[]"
			}
		],
		stateMutability: "nonpayable",
		type: "function"
	}
];

var MultiRewardsDistributor = [
	{
		inputs: [
			{
				internalType: "address",
				name: "_looksRareToken",
				type: "address"
			}
		],
		stateMutability: "nonpayable",
		type: "constructor"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: false,
				internalType: "address",
				name: "user",
				type: "address"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "rewardRound",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "totalAmount",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint8[]",
				name: "treeIds",
				type: "uint8[]"
			},
			{
				indexed: false,
				internalType: "uint256[]",
				name: "amounts",
				type: "uint256[]"
			}
		],
		name: "Claim",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: false,
				internalType: "uint8",
				name: "treeId",
				type: "uint8"
			}
		],
		name: "NewTree",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "previousOwner",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "newOwner",
				type: "address"
			}
		],
		name: "OwnershipTransferred",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: false,
				internalType: "address",
				name: "account",
				type: "address"
			}
		],
		name: "Paused",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: false,
				internalType: "uint256",
				name: "amount",
				type: "uint256"
			}
		],
		name: "TokenWithdrawnOwner",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: false,
				internalType: "address",
				name: "account",
				type: "address"
			}
		],
		name: "Unpaused",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "uint256",
				name: "rewardRound",
				type: "uint256"
			}
		],
		name: "UpdateTradingRewards",
		type: "event"
	},
	{
		inputs: [
		],
		name: "BUFFER_ADMIN_WITHDRAW",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "SAFE_GUARD_AMOUNT",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "safeGuard",
				type: "address"
			}
		],
		name: "addNewTree",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			},
			{
				internalType: "uint8",
				name: "",
				type: "uint8"
			}
		],
		name: "amountClaimedByUserPerTreeId",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "user",
				type: "address"
			},
			{
				internalType: "uint8[]",
				name: "treeIds",
				type: "uint8[]"
			},
			{
				internalType: "uint256[]",
				name: "amounts",
				type: "uint256[]"
			},
			{
				internalType: "bytes32[][]",
				name: "merkleProofs",
				type: "bytes32[][]"
			}
		],
		name: "canClaim",
		outputs: [
			{
				internalType: "bool[]",
				name: "",
				type: "bool[]"
			},
			{
				internalType: "uint256[]",
				name: "",
				type: "uint256[]"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint8[]",
				name: "treeIds",
				type: "uint8[]"
			},
			{
				internalType: "uint256[]",
				name: "amounts",
				type: "uint256[]"
			},
			{
				internalType: "bytes32[][]",
				name: "merkleProofs",
				type: "bytes32[][]"
			}
		],
		name: "claim",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "currentRewardRound",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "lastPausedTimestamp",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "looksRareToken",
		outputs: [
			{
				internalType: "contract IERC20",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "bytes32",
				name: "",
				type: "bytes32"
			}
		],
		name: "merkleRootUsed",
		outputs: [
			{
				internalType: "bool",
				name: "",
				type: "bool"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "numberTrees",
		outputs: [
			{
				internalType: "uint8",
				name: "",
				type: "uint8"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "owner",
		outputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "pauseDistribution",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "paused",
		outputs: [
			{
				internalType: "bool",
				name: "",
				type: "bool"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "renounceOwnership",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			}
		],
		name: "safeGuardUsed",
		outputs: [
			{
				internalType: "bool",
				name: "",
				type: "bool"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "newOwner",
				type: "address"
			}
		],
		name: "transferOwnership",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint8",
				name: "",
				type: "uint8"
			}
		],
		name: "treeParameters",
		outputs: [
			{
				internalType: "address",
				name: "safeGuard",
				type: "address"
			},
			{
				internalType: "bytes32",
				name: "merkleRoot",
				type: "bytes32"
			},
			{
				internalType: "uint256",
				name: "maxAmountPerUserInCurrentTree",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "unpauseDistribution",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint8[]",
				name: "treeIds",
				type: "uint8[]"
			},
			{
				internalType: "bytes32[]",
				name: "merkleRoots",
				type: "bytes32[]"
			},
			{
				internalType: "uint256[]",
				name: "maxAmountsPerUser",
				type: "uint256[]"
			},
			{
				internalType: "bytes32[][]",
				name: "merkleProofsSafeGuards",
				type: "bytes32[][]"
			}
		],
		name: "updateTradingRewards",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "amount",
				type: "uint256"
			}
		],
		name: "withdrawTokenRewards",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	}
];

var OrderValidatorV1 = [
	{
		inputs: [
			{
				internalType: "address",
				name: "_looksRareExchange",
				type: "address"
			}
		],
		stateMutability: "nonpayable",
		type: "constructor"
	},
	{
		inputs: [
		],
		name: "CRITERIA_GROUPS",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "INTERFACE_ID_ERC1155",
		outputs: [
			{
				internalType: "bytes4",
				name: "",
				type: "bytes4"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "INTERFACE_ID_ERC2981",
		outputs: [
			{
				internalType: "bytes4",
				name: "",
				type: "bytes4"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "INTERFACE_ID_ERC721",
		outputs: [
			{
				internalType: "bytes4",
				name: "",
				type: "bytes4"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "MAGIC_VALUE_EIP1271",
		outputs: [
			{
				internalType: "bytes4",
				name: "",
				type: "bytes4"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "TRANSFER_MANAGER_ERC1155",
		outputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "TRANSFER_MANAGER_ERC721",
		outputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "_DOMAIN_SEPARATOR",
		outputs: [
			{
				internalType: "bytes32",
				name: "",
				type: "bytes32"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				components: [
					{
						internalType: "bool",
						name: "isOrderAsk",
						type: "bool"
					},
					{
						internalType: "address",
						name: "signer",
						type: "address"
					},
					{
						internalType: "address",
						name: "collection",
						type: "address"
					},
					{
						internalType: "uint256",
						name: "price",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "tokenId",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "amount",
						type: "uint256"
					},
					{
						internalType: "address",
						name: "strategy",
						type: "address"
					},
					{
						internalType: "address",
						name: "currency",
						type: "address"
					},
					{
						internalType: "uint256",
						name: "nonce",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "startTime",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "endTime",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "minPercentageToAsk",
						type: "uint256"
					},
					{
						internalType: "bytes",
						name: "params",
						type: "bytes"
					},
					{
						internalType: "uint8",
						name: "v",
						type: "uint8"
					},
					{
						internalType: "bytes32",
						name: "r",
						type: "bytes32"
					},
					{
						internalType: "bytes32",
						name: "s",
						type: "bytes32"
					}
				],
				internalType: "struct OrderTypes.MakerOrder[]",
				name: "makerOrders",
				type: "tuple[]"
			}
		],
		name: "checkMultipleOrderValidities",
		outputs: [
			{
				internalType: "uint256[][]",
				name: "validationCodes",
				type: "uint256[][]"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				components: [
					{
						internalType: "bool",
						name: "isOrderAsk",
						type: "bool"
					},
					{
						internalType: "address",
						name: "signer",
						type: "address"
					},
					{
						internalType: "address",
						name: "collection",
						type: "address"
					},
					{
						internalType: "uint256",
						name: "price",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "tokenId",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "amount",
						type: "uint256"
					},
					{
						internalType: "address",
						name: "strategy",
						type: "address"
					},
					{
						internalType: "address",
						name: "currency",
						type: "address"
					},
					{
						internalType: "uint256",
						name: "nonce",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "startTime",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "endTime",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "minPercentageToAsk",
						type: "uint256"
					},
					{
						internalType: "bytes",
						name: "params",
						type: "bytes"
					},
					{
						internalType: "uint8",
						name: "v",
						type: "uint8"
					},
					{
						internalType: "bytes32",
						name: "r",
						type: "bytes32"
					},
					{
						internalType: "bytes32",
						name: "s",
						type: "bytes32"
					}
				],
				internalType: "struct OrderTypes.MakerOrder",
				name: "makerOrder",
				type: "tuple"
			}
		],
		name: "checkOrderValidity",
		outputs: [
			{
				internalType: "uint256[]",
				name: "validationCodes",
				type: "uint256[]"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				components: [
					{
						internalType: "bool",
						name: "isOrderAsk",
						type: "bool"
					},
					{
						internalType: "address",
						name: "signer",
						type: "address"
					},
					{
						internalType: "address",
						name: "collection",
						type: "address"
					},
					{
						internalType: "uint256",
						name: "price",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "tokenId",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "amount",
						type: "uint256"
					},
					{
						internalType: "address",
						name: "strategy",
						type: "address"
					},
					{
						internalType: "address",
						name: "currency",
						type: "address"
					},
					{
						internalType: "uint256",
						name: "nonce",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "startTime",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "endTime",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "minPercentageToAsk",
						type: "uint256"
					},
					{
						internalType: "bytes",
						name: "params",
						type: "bytes"
					},
					{
						internalType: "uint8",
						name: "v",
						type: "uint8"
					},
					{
						internalType: "bytes32",
						name: "r",
						type: "bytes32"
					},
					{
						internalType: "bytes32",
						name: "s",
						type: "bytes32"
					}
				],
				internalType: "struct OrderTypes.MakerOrder",
				name: "makerOrder",
				type: "tuple"
			}
		],
		name: "checkValidityAmounts",
		outputs: [
			{
				internalType: "uint256",
				name: "validationCode",
				type: "uint256"
			}
		],
		stateMutability: "pure",
		type: "function"
	},
	{
		inputs: [
			{
				components: [
					{
						internalType: "bool",
						name: "isOrderAsk",
						type: "bool"
					},
					{
						internalType: "address",
						name: "signer",
						type: "address"
					},
					{
						internalType: "address",
						name: "collection",
						type: "address"
					},
					{
						internalType: "uint256",
						name: "price",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "tokenId",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "amount",
						type: "uint256"
					},
					{
						internalType: "address",
						name: "strategy",
						type: "address"
					},
					{
						internalType: "address",
						name: "currency",
						type: "address"
					},
					{
						internalType: "uint256",
						name: "nonce",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "startTime",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "endTime",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "minPercentageToAsk",
						type: "uint256"
					},
					{
						internalType: "bytes",
						name: "params",
						type: "bytes"
					},
					{
						internalType: "uint8",
						name: "v",
						type: "uint8"
					},
					{
						internalType: "bytes32",
						name: "r",
						type: "bytes32"
					},
					{
						internalType: "bytes32",
						name: "s",
						type: "bytes32"
					}
				],
				internalType: "struct OrderTypes.MakerOrder",
				name: "makerOrder",
				type: "tuple"
			}
		],
		name: "checkValidityApprovalsAndBalances",
		outputs: [
			{
				internalType: "uint256",
				name: "validationCode",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				components: [
					{
						internalType: "bool",
						name: "isOrderAsk",
						type: "bool"
					},
					{
						internalType: "address",
						name: "signer",
						type: "address"
					},
					{
						internalType: "address",
						name: "collection",
						type: "address"
					},
					{
						internalType: "uint256",
						name: "price",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "tokenId",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "amount",
						type: "uint256"
					},
					{
						internalType: "address",
						name: "strategy",
						type: "address"
					},
					{
						internalType: "address",
						name: "currency",
						type: "address"
					},
					{
						internalType: "uint256",
						name: "nonce",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "startTime",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "endTime",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "minPercentageToAsk",
						type: "uint256"
					},
					{
						internalType: "bytes",
						name: "params",
						type: "bytes"
					},
					{
						internalType: "uint8",
						name: "v",
						type: "uint8"
					},
					{
						internalType: "bytes32",
						name: "r",
						type: "bytes32"
					},
					{
						internalType: "bytes32",
						name: "s",
						type: "bytes32"
					}
				],
				internalType: "struct OrderTypes.MakerOrder",
				name: "makerOrder",
				type: "tuple"
			}
		],
		name: "checkValidityMinPercentageToAsk",
		outputs: [
			{
				internalType: "uint256",
				name: "validationCode",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				components: [
					{
						internalType: "bool",
						name: "isOrderAsk",
						type: "bool"
					},
					{
						internalType: "address",
						name: "signer",
						type: "address"
					},
					{
						internalType: "address",
						name: "collection",
						type: "address"
					},
					{
						internalType: "uint256",
						name: "price",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "tokenId",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "amount",
						type: "uint256"
					},
					{
						internalType: "address",
						name: "strategy",
						type: "address"
					},
					{
						internalType: "address",
						name: "currency",
						type: "address"
					},
					{
						internalType: "uint256",
						name: "nonce",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "startTime",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "endTime",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "minPercentageToAsk",
						type: "uint256"
					},
					{
						internalType: "bytes",
						name: "params",
						type: "bytes"
					},
					{
						internalType: "uint8",
						name: "v",
						type: "uint8"
					},
					{
						internalType: "bytes32",
						name: "r",
						type: "bytes32"
					},
					{
						internalType: "bytes32",
						name: "s",
						type: "bytes32"
					}
				],
				internalType: "struct OrderTypes.MakerOrder",
				name: "makerOrder",
				type: "tuple"
			}
		],
		name: "checkValidityNonces",
		outputs: [
			{
				internalType: "uint256",
				name: "validationCode",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				components: [
					{
						internalType: "bool",
						name: "isOrderAsk",
						type: "bool"
					},
					{
						internalType: "address",
						name: "signer",
						type: "address"
					},
					{
						internalType: "address",
						name: "collection",
						type: "address"
					},
					{
						internalType: "uint256",
						name: "price",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "tokenId",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "amount",
						type: "uint256"
					},
					{
						internalType: "address",
						name: "strategy",
						type: "address"
					},
					{
						internalType: "address",
						name: "currency",
						type: "address"
					},
					{
						internalType: "uint256",
						name: "nonce",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "startTime",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "endTime",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "minPercentageToAsk",
						type: "uint256"
					},
					{
						internalType: "bytes",
						name: "params",
						type: "bytes"
					},
					{
						internalType: "uint8",
						name: "v",
						type: "uint8"
					},
					{
						internalType: "bytes32",
						name: "r",
						type: "bytes32"
					},
					{
						internalType: "bytes32",
						name: "s",
						type: "bytes32"
					}
				],
				internalType: "struct OrderTypes.MakerOrder",
				name: "makerOrder",
				type: "tuple"
			}
		],
		name: "checkValiditySignature",
		outputs: [
			{
				internalType: "uint256",
				name: "validationCode",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				components: [
					{
						internalType: "bool",
						name: "isOrderAsk",
						type: "bool"
					},
					{
						internalType: "address",
						name: "signer",
						type: "address"
					},
					{
						internalType: "address",
						name: "collection",
						type: "address"
					},
					{
						internalType: "uint256",
						name: "price",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "tokenId",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "amount",
						type: "uint256"
					},
					{
						internalType: "address",
						name: "strategy",
						type: "address"
					},
					{
						internalType: "address",
						name: "currency",
						type: "address"
					},
					{
						internalType: "uint256",
						name: "nonce",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "startTime",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "endTime",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "minPercentageToAsk",
						type: "uint256"
					},
					{
						internalType: "bytes",
						name: "params",
						type: "bytes"
					},
					{
						internalType: "uint8",
						name: "v",
						type: "uint8"
					},
					{
						internalType: "bytes32",
						name: "r",
						type: "bytes32"
					},
					{
						internalType: "bytes32",
						name: "s",
						type: "bytes32"
					}
				],
				internalType: "struct OrderTypes.MakerOrder",
				name: "makerOrder",
				type: "tuple"
			}
		],
		name: "checkValidityTimestamps",
		outputs: [
			{
				internalType: "uint256",
				name: "validationCode",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				components: [
					{
						internalType: "bool",
						name: "isOrderAsk",
						type: "bool"
					},
					{
						internalType: "address",
						name: "signer",
						type: "address"
					},
					{
						internalType: "address",
						name: "collection",
						type: "address"
					},
					{
						internalType: "uint256",
						name: "price",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "tokenId",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "amount",
						type: "uint256"
					},
					{
						internalType: "address",
						name: "strategy",
						type: "address"
					},
					{
						internalType: "address",
						name: "currency",
						type: "address"
					},
					{
						internalType: "uint256",
						name: "nonce",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "startTime",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "endTime",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "minPercentageToAsk",
						type: "uint256"
					},
					{
						internalType: "bytes",
						name: "params",
						type: "bytes"
					},
					{
						internalType: "uint8",
						name: "v",
						type: "uint8"
					},
					{
						internalType: "bytes32",
						name: "r",
						type: "bytes32"
					},
					{
						internalType: "bytes32",
						name: "s",
						type: "bytes32"
					}
				],
				internalType: "struct OrderTypes.MakerOrder",
				name: "makerOrder",
				type: "tuple"
			}
		],
		name: "checkValidityWhitelists",
		outputs: [
			{
				internalType: "uint256",
				name: "validationCode",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "currencyManager",
		outputs: [
			{
				internalType: "contract ICurrencyManager",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "executionManager",
		outputs: [
			{
				internalType: "contract IExecutionManager",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "looksRareExchange",
		outputs: [
			{
				internalType: "contract LooksRareExchange",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "royaltyFeeRegistry",
		outputs: [
			{
				internalType: "contract IRoyaltyFeeRegistry",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "transferSelectorNFT",
		outputs: [
			{
				internalType: "contract ITransferSelectorNFTExtended",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	}
];

var PrivateSaleWithFeeSharing = [
	{
		inputs: [
			{
				internalType: "address",
				name: "_looksRareToken",
				type: "address"
			},
			{
				internalType: "address",
				name: "_rewardToken",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "_maxBlockForWithdrawal",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "_totalLooksDistributed",
				type: "uint256"
			}
		],
		stateMutability: "nonpayable",
		type: "constructor"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "user",
				type: "address"
			},
			{
				indexed: false,
				internalType: "uint8",
				name: "tier",
				type: "uint8"
			}
		],
		name: "Deposit",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "user",
				type: "address"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "amount",
				type: "uint256"
			}
		],
		name: "Harvest",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: false,
				internalType: "uint8",
				name: "tier",
				type: "uint8"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "allocationCostInETH",
				type: "uint256"
			}
		],
		name: "NewAllocationCostPerTier",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: false,
				internalType: "uint256",
				name: "blockForWithdrawal",
				type: "uint256"
			}
		],
		name: "NewBlockForWithdrawal",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: false,
				internalType: "uint256",
				name: "price",
				type: "uint256"
			}
		],
		name: "NewPriceOfETHInLOOKS",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: false,
				internalType: "enum PrivateSaleWithFeeSharing.SalePhase",
				name: "newSalePhase",
				type: "uint8"
			}
		],
		name: "NewSalePhase",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "previousOwner",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "newOwner",
				type: "address"
			}
		],
		name: "OwnershipTransferred",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: false,
				internalType: "address",
				name: "user",
				type: "address"
			}
		],
		name: "UserRemoved",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: false,
				internalType: "address[]",
				name: "users",
				type: "address[]"
			},
			{
				indexed: false,
				internalType: "uint8",
				name: "tier",
				type: "uint8"
			}
		],
		name: "UsersWhitelisted",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "user",
				type: "address"
			},
			{
				indexed: false,
				internalType: "uint8",
				name: "tier",
				type: "uint8"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "amount",
				type: "uint256"
			}
		],
		name: "Withdraw",
		type: "event"
	},
	{
		inputs: [
		],
		name: "MAX_BLOCK_FOR_WITHDRAWAL",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "NUMBER_TIERS",
		outputs: [
			{
				internalType: "uint8",
				name: "",
				type: "uint8"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "TOTAL_LOOKS_DISTRIBUTED",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint8",
				name: "",
				type: "uint8"
			}
		],
		name: "allocationCostPerTier",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "blockForWithdrawal",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "user",
				type: "address"
			}
		],
		name: "calculatePendingRewards",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "currentPhase",
		outputs: [
			{
				internalType: "enum PrivateSaleWithFeeSharing.SalePhase",
				name: "",
				type: "uint8"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "deposit",
		outputs: [
		],
		stateMutability: "payable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "getMaxAmountLOOKSToDistribute",
		outputs: [
			{
				internalType: "uint256",
				name: "maxAmountCollected",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "harvest",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "looksRareToken",
		outputs: [
			{
				internalType: "contract IERC20",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint8",
				name: "",
				type: "uint8"
			}
		],
		name: "numberOfParticipantsForATier",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "owner",
		outputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "priceOfETHInLOOKS",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "_user",
				type: "address"
			}
		],
		name: "removeUserFromWhitelist",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "renounceOwnership",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "rewardToken",
		outputs: [
			{
				internalType: "contract IERC20",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint8",
				name: "_tier",
				type: "uint8"
			},
			{
				internalType: "uint256",
				name: "_allocationCostInETH",
				type: "uint256"
			}
		],
		name: "setAllocationCostPerTier",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "_blockForWithdrawal",
				type: "uint256"
			}
		],
		name: "setBlockForWithdrawal",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "_priceOfETHinLOOKS",
				type: "uint256"
			}
		],
		name: "setPriceOfETHInLOOKS",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "totalAmountCommitted",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "totalRewardTokensDistributedToStakers",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "newOwner",
				type: "address"
			}
		],
		name: "transferOwnership",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "enum PrivateSaleWithFeeSharing.SalePhase",
				name: "_newSalePhase",
				type: "uint8"
			}
		],
		name: "updateSalePhase",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "updateSalePhaseToWithdraw",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			}
		],
		name: "userInfo",
		outputs: [
			{
				internalType: "uint256",
				name: "rewardsDistributedToAccount",
				type: "uint256"
			},
			{
				internalType: "uint8",
				name: "tier",
				type: "uint8"
			},
			{
				internalType: "bool",
				name: "hasDeposited",
				type: "bool"
			},
			{
				internalType: "bool",
				name: "hasWithdrawn",
				type: "bool"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address[]",
				name: "_users",
				type: "address[]"
			},
			{
				internalType: "uint8",
				name: "_tier",
				type: "uint8"
			}
		],
		name: "whitelistUsers",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "withdraw",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "withdrawCommittedAmount",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	}
];

var ReverseRecords = [
	{
		inputs: [
			{
				internalType: "contract ENS",
				name: "_ens",
				type: "address"
			}
		],
		stateMutability: "nonpayable",
		type: "constructor"
	},
	{
		inputs: [
			{
				internalType: "address[]",
				name: "addresses",
				type: "address[]"
			}
		],
		name: "getNames",
		outputs: [
			{
				internalType: "string[]",
				name: "r",
				type: "string[]"
			}
		],
		stateMutability: "view",
		type: "function"
	}
];

var RoyaltyFeeManager = [
	{
		inputs: [
			{
				internalType: "address",
				name: "_royaltyFeeRegistry",
				type: "address"
			}
		],
		stateMutability: "nonpayable",
		type: "constructor"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "previousOwner",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "newOwner",
				type: "address"
			}
		],
		name: "OwnershipTransferred",
		type: "event"
	},
	{
		inputs: [
		],
		name: "INTERFACE_ID_ERC2981",
		outputs: [
			{
				internalType: "bytes4",
				name: "",
				type: "bytes4"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "collection",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "tokenId",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "amount",
				type: "uint256"
			}
		],
		name: "calculateRoyaltyFeeAndGetRecipient",
		outputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "owner",
		outputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "renounceOwnership",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "royaltyFeeRegistry",
		outputs: [
			{
				internalType: "contract IRoyaltyFeeRegistry",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "newOwner",
				type: "address"
			}
		],
		name: "transferOwnership",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	}
];

var RoyaltyFeeRegistry = [
	{
		inputs: [
			{
				internalType: "uint256",
				name: "_royaltyFeeLimit",
				type: "uint256"
			}
		],
		stateMutability: "nonpayable",
		type: "constructor"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: false,
				internalType: "uint256",
				name: "royaltyFeeLimit",
				type: "uint256"
			}
		],
		name: "NewRoyaltyFeeLimit",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "previousOwner",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "newOwner",
				type: "address"
			}
		],
		name: "OwnershipTransferred",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "collection",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "setter",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "receiver",
				type: "address"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "fee",
				type: "uint256"
			}
		],
		name: "RoyaltyFeeUpdate",
		type: "event"
	},
	{
		inputs: [
		],
		name: "owner",
		outputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "renounceOwnership",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "collection",
				type: "address"
			}
		],
		name: "royaltyFeeInfoCollection",
		outputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			},
			{
				internalType: "address",
				name: "",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "royaltyFeeLimit",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "collection",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "amount",
				type: "uint256"
			}
		],
		name: "royaltyInfo",
		outputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "newOwner",
				type: "address"
			}
		],
		name: "transferOwnership",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "_royaltyFeeLimit",
				type: "uint256"
			}
		],
		name: "updateRoyaltyFeeLimit",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "collection",
				type: "address"
			},
			{
				internalType: "address",
				name: "setter",
				type: "address"
			},
			{
				internalType: "address",
				name: "receiver",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "fee",
				type: "uint256"
			}
		],
		name: "updateRoyaltyInfoForCollection",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	}
];

var RoyaltyFeeSetter = [
	{
		inputs: [
			{
				internalType: "address",
				name: "_royaltyFeeRegistry",
				type: "address"
			}
		],
		stateMutability: "nonpayable",
		type: "constructor"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "previousOwner",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "newOwner",
				type: "address"
			}
		],
		name: "OwnershipTransferred",
		type: "event"
	},
	{
		inputs: [
		],
		name: "INTERFACE_ID_ERC1155",
		outputs: [
			{
				internalType: "bytes4",
				name: "",
				type: "bytes4"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "INTERFACE_ID_ERC2981",
		outputs: [
			{
				internalType: "bytes4",
				name: "",
				type: "bytes4"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "INTERFACE_ID_ERC721",
		outputs: [
			{
				internalType: "bytes4",
				name: "",
				type: "bytes4"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "collection",
				type: "address"
			}
		],
		name: "checkForCollectionSetter",
		outputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			},
			{
				internalType: "uint8",
				name: "",
				type: "uint8"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "owner",
		outputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "renounceOwnership",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "royaltyFeeRegistry",
		outputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "newOwner",
				type: "address"
			}
		],
		name: "transferOwnership",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "_owner",
				type: "address"
			}
		],
		name: "updateOwnerOfRoyaltyFeeRegistry",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "_royaltyFeeLimit",
				type: "uint256"
			}
		],
		name: "updateRoyaltyFeeLimit",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "collection",
				type: "address"
			},
			{
				internalType: "address",
				name: "setter",
				type: "address"
			},
			{
				internalType: "address",
				name: "receiver",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "fee",
				type: "uint256"
			}
		],
		name: "updateRoyaltyInfoForCollection",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "collection",
				type: "address"
			},
			{
				internalType: "address",
				name: "setter",
				type: "address"
			},
			{
				internalType: "address",
				name: "receiver",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "fee",
				type: "uint256"
			}
		],
		name: "updateRoyaltyInfoForCollectionIfAdmin",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "collection",
				type: "address"
			},
			{
				internalType: "address",
				name: "setter",
				type: "address"
			},
			{
				internalType: "address",
				name: "receiver",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "fee",
				type: "uint256"
			}
		],
		name: "updateRoyaltyInfoForCollectionIfOwner",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "collection",
				type: "address"
			},
			{
				internalType: "address",
				name: "setter",
				type: "address"
			},
			{
				internalType: "address",
				name: "receiver",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "fee",
				type: "uint256"
			}
		],
		name: "updateRoyaltyInfoForCollectionIfSetter",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	}
];

var StakingPoolForUniswapV2Tokens = [
	{
		inputs: [
			{
				internalType: "address",
				name: "_stakedToken",
				type: "address"
			},
			{
				internalType: "address",
				name: "_looksRareToken",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "_rewardPerBlock",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "_startBlock",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "_endBlock",
				type: "uint256"
			}
		],
		stateMutability: "nonpayable",
		type: "constructor"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: false,
				internalType: "uint256",
				name: "amount",
				type: "uint256"
			}
		],
		name: "AdminRewardWithdraw",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "user",
				type: "address"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "amount",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "harvestedAmount",
				type: "uint256"
			}
		],
		name: "Deposit",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "user",
				type: "address"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "amount",
				type: "uint256"
			}
		],
		name: "EmergencyWithdraw",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "user",
				type: "address"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "harvestedAmount",
				type: "uint256"
			}
		],
		name: "Harvest",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: false,
				internalType: "uint256",
				name: "rewardPerBlock",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "endBlock",
				type: "uint256"
			}
		],
		name: "NewRewardPerBlockAndEndBlock",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "previousOwner",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "newOwner",
				type: "address"
			}
		],
		name: "OwnershipTransferred",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: false,
				internalType: "address",
				name: "account",
				type: "address"
			}
		],
		name: "Paused",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: false,
				internalType: "address",
				name: "account",
				type: "address"
			}
		],
		name: "Unpaused",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "user",
				type: "address"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "amount",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "harvestedAmount",
				type: "uint256"
			}
		],
		name: "Withdraw",
		type: "event"
	},
	{
		inputs: [
		],
		name: "PRECISION_FACTOR",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "START_BLOCK",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "accTokenPerShare",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "amount",
				type: "uint256"
			}
		],
		name: "adminRewardWithdraw",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "user",
				type: "address"
			}
		],
		name: "calculatePendingRewards",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "amount",
				type: "uint256"
			}
		],
		name: "deposit",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "emergencyWithdraw",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "endBlock",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "harvest",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "lastRewardBlock",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "looksRareToken",
		outputs: [
			{
				internalType: "contract IERC20",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "owner",
		outputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "pause",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "paused",
		outputs: [
			{
				internalType: "bool",
				name: "",
				type: "bool"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "renounceOwnership",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "rewardPerBlock",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "stakedToken",
		outputs: [
			{
				internalType: "contract IERC20",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "newOwner",
				type: "address"
			}
		],
		name: "transferOwnership",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "unpause",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "newRewardPerBlock",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "newEndBlock",
				type: "uint256"
			}
		],
		name: "updateRewardPerBlockAndEndBlock",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			}
		],
		name: "userInfo",
		outputs: [
			{
				internalType: "uint256",
				name: "amount",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "rewardDebt",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "amount",
				type: "uint256"
			}
		],
		name: "withdraw",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	}
];

var TokenDistributor = [
	{
		inputs: [
			{
				internalType: "address",
				name: "_looksRareToken",
				type: "address"
			},
			{
				internalType: "address",
				name: "_tokenSplitter",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "_startBlock",
				type: "uint256"
			},
			{
				internalType: "uint256[]",
				name: "_rewardsPerBlockForStaking",
				type: "uint256[]"
			},
			{
				internalType: "uint256[]",
				name: "_rewardsPerBlockForOthers",
				type: "uint256[]"
			},
			{
				internalType: "uint256[]",
				name: "_periodLengthesInBlocks",
				type: "uint256[]"
			},
			{
				internalType: "uint256",
				name: "_numberPeriods",
				type: "uint256"
			}
		],
		stateMutability: "nonpayable",
		type: "constructor"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "user",
				type: "address"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "harvestedAmount",
				type: "uint256"
			}
		],
		name: "Compound",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "user",
				type: "address"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "amount",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "harvestedAmount",
				type: "uint256"
			}
		],
		name: "Deposit",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "uint256",
				name: "currentPhase",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "startBlock",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "rewardPerBlockForStaking",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "rewardPerBlockForOthers",
				type: "uint256"
			}
		],
		name: "NewRewardsPerBlock",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "user",
				type: "address"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "amount",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "harvestedAmount",
				type: "uint256"
			}
		],
		name: "Withdraw",
		type: "event"
	},
	{
		inputs: [
		],
		name: "NUMBER_PERIODS",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "PRECISION_FACTOR",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "START_BLOCK",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "accTokenPerShare",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "user",
				type: "address"
			}
		],
		name: "calculatePendingRewards",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "currentPhase",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "amount",
				type: "uint256"
			}
		],
		name: "deposit",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "endBlock",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "harvestAndCompound",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "lastRewardBlock",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "looksRareToken",
		outputs: [
			{
				internalType: "contract ILooksRareToken",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "rewardPerBlockForOthers",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "rewardPerBlockForStaking",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		name: "stakingPeriod",
		outputs: [
			{
				internalType: "uint256",
				name: "rewardPerBlockForStaking",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "rewardPerBlockForOthers",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "periodLengthInBlock",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "tokenSplitter",
		outputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "totalAmountStaked",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "updatePool",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			}
		],
		name: "userInfo",
		outputs: [
			{
				internalType: "uint256",
				name: "amount",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "rewardDebt",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "amount",
				type: "uint256"
			}
		],
		name: "withdraw",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "withdrawAll",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	}
];

var TradingRewardsDistributor = [
	{
		inputs: [
			{
				internalType: "address",
				name: "_looksRareToken",
				type: "address"
			}
		],
		stateMutability: "nonpayable",
		type: "constructor"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "previousOwner",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "newOwner",
				type: "address"
			}
		],
		name: "OwnershipTransferred",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: false,
				internalType: "address",
				name: "account",
				type: "address"
			}
		],
		name: "Paused",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "user",
				type: "address"
			},
			{
				indexed: true,
				internalType: "uint256",
				name: "rewardRound",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "amount",
				type: "uint256"
			}
		],
		name: "RewardsClaim",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: false,
				internalType: "uint256",
				name: "amount",
				type: "uint256"
			}
		],
		name: "TokenWithdrawnOwner",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: false,
				internalType: "address",
				name: "account",
				type: "address"
			}
		],
		name: "Unpaused",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "uint256",
				name: "rewardRound",
				type: "uint256"
			}
		],
		name: "UpdateTradingRewards",
		type: "event"
	},
	{
		inputs: [
		],
		name: "BUFFER_ADMIN_WITHDRAW",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			}
		],
		name: "amountClaimedByUser",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "user",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "amount",
				type: "uint256"
			},
			{
				internalType: "bytes32[]",
				name: "merkleProof",
				type: "bytes32[]"
			}
		],
		name: "canClaim",
		outputs: [
			{
				internalType: "bool",
				name: "",
				type: "bool"
			},
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "amount",
				type: "uint256"
			},
			{
				internalType: "bytes32[]",
				name: "merkleProof",
				type: "bytes32[]"
			}
		],
		name: "claim",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "currentRewardRound",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			},
			{
				internalType: "address",
				name: "",
				type: "address"
			}
		],
		name: "hasUserClaimedForRewardRound",
		outputs: [
			{
				internalType: "bool",
				name: "",
				type: "bool"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "lastPausedTimestamp",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "looksRareToken",
		outputs: [
			{
				internalType: "contract IERC20",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "maximumAmountPerUserInCurrentTree",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		name: "merkleRootOfRewardRound",
		outputs: [
			{
				internalType: "bytes32",
				name: "",
				type: "bytes32"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "bytes32",
				name: "",
				type: "bytes32"
			}
		],
		name: "merkleRootUsed",
		outputs: [
			{
				internalType: "bool",
				name: "",
				type: "bool"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "owner",
		outputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "pauseDistribution",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "paused",
		outputs: [
			{
				internalType: "bool",
				name: "",
				type: "bool"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "renounceOwnership",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "newOwner",
				type: "address"
			}
		],
		name: "transferOwnership",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "unpauseDistribution",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "bytes32",
				name: "merkleRoot",
				type: "bytes32"
			},
			{
				internalType: "uint256",
				name: "newMaximumAmountPerUser",
				type: "uint256"
			}
		],
		name: "updateTradingRewards",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "amount",
				type: "uint256"
			}
		],
		name: "withdrawTokenRewards",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	}
];

var TransferSelectorNFT = [
	{
		inputs: [
			{
				internalType: "address",
				name: "collection",
				type: "address"
			}
		],
		name: "checkTransferManagerForToken",
		outputs: [
			{
				internalType: "address",
				name: "transferManager",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	}
];

var WETH = [
	{
		constant: true,
		inputs: [
		],
		name: "name",
		outputs: [
			{
				name: "",
				type: "string"
			}
		],
		payable: false,
		stateMutability: "view",
		type: "function"
	},
	{
		constant: false,
		inputs: [
			{
				name: "guy",
				type: "address"
			},
			{
				name: "wad",
				type: "uint256"
			}
		],
		name: "approve",
		outputs: [
			{
				name: "",
				type: "bool"
			}
		],
		payable: false,
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		constant: true,
		inputs: [
		],
		name: "totalSupply",
		outputs: [
			{
				name: "",
				type: "uint256"
			}
		],
		payable: false,
		stateMutability: "view",
		type: "function"
	},
	{
		constant: false,
		inputs: [
			{
				name: "src",
				type: "address"
			},
			{
				name: "dst",
				type: "address"
			},
			{
				name: "wad",
				type: "uint256"
			}
		],
		name: "transferFrom",
		outputs: [
			{
				name: "",
				type: "bool"
			}
		],
		payable: false,
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		constant: false,
		inputs: [
			{
				name: "wad",
				type: "uint256"
			}
		],
		name: "withdraw",
		outputs: [
		],
		payable: false,
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		constant: true,
		inputs: [
		],
		name: "decimals",
		outputs: [
			{
				name: "",
				type: "uint8"
			}
		],
		payable: false,
		stateMutability: "view",
		type: "function"
	},
	{
		constant: true,
		inputs: [
			{
				name: "",
				type: "address"
			}
		],
		name: "balanceOf",
		outputs: [
			{
				name: "",
				type: "uint256"
			}
		],
		payable: false,
		stateMutability: "view",
		type: "function"
	},
	{
		constant: true,
		inputs: [
		],
		name: "symbol",
		outputs: [
			{
				name: "",
				type: "string"
			}
		],
		payable: false,
		stateMutability: "view",
		type: "function"
	},
	{
		constant: false,
		inputs: [
			{
				name: "dst",
				type: "address"
			},
			{
				name: "wad",
				type: "uint256"
			}
		],
		name: "transfer",
		outputs: [
			{
				name: "",
				type: "bool"
			}
		],
		payable: false,
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		constant: false,
		inputs: [
		],
		name: "deposit",
		outputs: [
		],
		payable: true,
		stateMutability: "payable",
		type: "function"
	},
	{
		constant: true,
		inputs: [
			{
				name: "",
				type: "address"
			},
			{
				name: "",
				type: "address"
			}
		],
		name: "allowance",
		outputs: [
			{
				name: "",
				type: "uint256"
			}
		],
		payable: false,
		stateMutability: "view",
		type: "function"
	},
	{
		payable: true,
		stateMutability: "payable",
		type: "fallback"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				name: "src",
				type: "address"
			},
			{
				indexed: true,
				name: "guy",
				type: "address"
			},
			{
				indexed: false,
				name: "wad",
				type: "uint256"
			}
		],
		name: "Approval",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				name: "src",
				type: "address"
			},
			{
				indexed: true,
				name: "dst",
				type: "address"
			},
			{
				indexed: false,
				name: "wad",
				type: "uint256"
			}
		],
		name: "Transfer",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				name: "dst",
				type: "address"
			},
			{
				indexed: false,
				name: "wad",
				type: "uint256"
			}
		],
		name: "Deposit",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				name: "src",
				type: "address"
			},
			{
				indexed: false,
				name: "wad",
				type: "uint256"
			}
		],
		name: "Withdrawal",
		type: "event"
	}
];

exports.SupportedChainId = void 0;
(function (SupportedChainId) {
    SupportedChainId[SupportedChainId["MAINNET"] = 1] = "MAINNET";
    SupportedChainId[SupportedChainId["GOERLI"] = 5] = "GOERLI";
    SupportedChainId[SupportedChainId["HARDHAT"] = 31337] = "HARDHAT";
})(exports.SupportedChainId || (exports.SupportedChainId = {}));
/**
 * https://github.com/LooksRare/contracts-exchange-v1/blob/master/contracts/orderValidation/ValidationCodeConstants.sol
 */
exports.OrderValidatorEnum = void 0;
(function (OrderValidatorEnum) {
    OrderValidatorEnum[OrderValidatorEnum["ORDER_EXPECTED_TO_BE_VALID"] = 0] = "ORDER_EXPECTED_TO_BE_VALID";
    OrderValidatorEnum[OrderValidatorEnum["NONCE_EXECUTED_OR_CANCELLED"] = 101] = "NONCE_EXECUTED_OR_CANCELLED";
    OrderValidatorEnum[OrderValidatorEnum["NONCE_BELOW_MIN_ORDER_NONCE"] = 102] = "NONCE_BELOW_MIN_ORDER_NONCE";
    OrderValidatorEnum[OrderValidatorEnum["ORDER_AMOUNT_CANNOT_BE_ZERO"] = 201] = "ORDER_AMOUNT_CANNOT_BE_ZERO";
    OrderValidatorEnum[OrderValidatorEnum["MAKER_SIGNER_IS_NULL_SIGNER"] = 301] = "MAKER_SIGNER_IS_NULL_SIGNER";
    OrderValidatorEnum[OrderValidatorEnum["INVALID_S_PARAMETER_EOA"] = 302] = "INVALID_S_PARAMETER_EOA";
    OrderValidatorEnum[OrderValidatorEnum["INVALID_V_PARAMETER_EOA"] = 303] = "INVALID_V_PARAMETER_EOA";
    OrderValidatorEnum[OrderValidatorEnum["NULL_SIGNER_EOA"] = 304] = "NULL_SIGNER_EOA";
    OrderValidatorEnum[OrderValidatorEnum["WRONG_SIGNER_EOA"] = 305] = "WRONG_SIGNER_EOA";
    OrderValidatorEnum[OrderValidatorEnum["SIGNATURE_INVALID_EIP1271"] = 311] = "SIGNATURE_INVALID_EIP1271";
    OrderValidatorEnum[OrderValidatorEnum["MISSING_IS_VALID_SIGNATURE_FUNCTION_EIP1271"] = 312] = "MISSING_IS_VALID_SIGNATURE_FUNCTION_EIP1271";
    OrderValidatorEnum[OrderValidatorEnum["CURRENCY_NOT_WHITELISTED"] = 401] = "CURRENCY_NOT_WHITELISTED";
    OrderValidatorEnum[OrderValidatorEnum["STRATEGY_NOT_WHITELISTED"] = 402] = "STRATEGY_NOT_WHITELISTED";
    OrderValidatorEnum[OrderValidatorEnum["MIN_NET_RATIO_ABOVE_PROTOCOL_FEE"] = 501] = "MIN_NET_RATIO_ABOVE_PROTOCOL_FEE";
    OrderValidatorEnum[OrderValidatorEnum["MIN_NET_RATIO_ABOVE_ROYALTY_FEE_REGISTRY_AND_PROTOCOL_FEE"] = 502] = "MIN_NET_RATIO_ABOVE_ROYALTY_FEE_REGISTRY_AND_PROTOCOL_FEE";
    OrderValidatorEnum[OrderValidatorEnum["MIN_NET_RATIO_ABOVE_ROYALTY_FEE_ERC2981_AND_PROTOCOL_FEE"] = 503] = "MIN_NET_RATIO_ABOVE_ROYALTY_FEE_ERC2981_AND_PROTOCOL_FEE";
    OrderValidatorEnum[OrderValidatorEnum["MISSING_ROYALTY_INFO_FUNCTION_ERC2981"] = 504] = "MISSING_ROYALTY_INFO_FUNCTION_ERC2981";
    OrderValidatorEnum[OrderValidatorEnum["TOO_EARLY_TO_EXECUTE_ORDER"] = 601] = "TOO_EARLY_TO_EXECUTE_ORDER";
    OrderValidatorEnum[OrderValidatorEnum["TOO_LATE_TO_EXECUTE_ORDER"] = 602] = "TOO_LATE_TO_EXECUTE_ORDER";
    OrderValidatorEnum[OrderValidatorEnum["NO_TRANSFER_MANAGER_AVAILABLE_FOR_COLLECTION"] = 701] = "NO_TRANSFER_MANAGER_AVAILABLE_FOR_COLLECTION";
    OrderValidatorEnum[OrderValidatorEnum["CUSTOM_TRANSFER_MANAGER"] = 702] = "CUSTOM_TRANSFER_MANAGER";
    OrderValidatorEnum[OrderValidatorEnum["ERC20_BALANCE_INFERIOR_TO_PRICE"] = 711] = "ERC20_BALANCE_INFERIOR_TO_PRICE";
    OrderValidatorEnum[OrderValidatorEnum["ERC20_APPROVAL_INFERIOR_TO_PRICE"] = 712] = "ERC20_APPROVAL_INFERIOR_TO_PRICE";
    OrderValidatorEnum[OrderValidatorEnum["ERC721_TOKEN_ID_DOES_NOT_EXIST"] = 721] = "ERC721_TOKEN_ID_DOES_NOT_EXIST";
    OrderValidatorEnum[OrderValidatorEnum["ERC721_TOKEN_ID_NOT_IN_BALANCE"] = 722] = "ERC721_TOKEN_ID_NOT_IN_BALANCE";
    OrderValidatorEnum[OrderValidatorEnum["ERC721_NO_APPROVAL_FOR_ALL_OR_TOKEN_ID"] = 723] = "ERC721_NO_APPROVAL_FOR_ALL_OR_TOKEN_ID";
    OrderValidatorEnum[OrderValidatorEnum["ERC1155_BALANCE_OF_DOES_NOT_EXIST"] = 731] = "ERC1155_BALANCE_OF_DOES_NOT_EXIST";
    OrderValidatorEnum[OrderValidatorEnum["ERC1155_BALANCE_OF_TOKEN_ID_INFERIOR_TO_AMOUNT"] = 732] = "ERC1155_BALANCE_OF_TOKEN_ID_INFERIOR_TO_AMOUNT";
    OrderValidatorEnum[OrderValidatorEnum["ERC1155_IS_APPROVED_FOR_ALL_DOES_NOT_EXIST"] = 733] = "ERC1155_IS_APPROVED_FOR_ALL_DOES_NOT_EXIST";
    OrderValidatorEnum[OrderValidatorEnum["ERC1155_NO_APPROVAL_FOR_ALL"] = 734] = "ERC1155_NO_APPROVAL_FOR_ALL";
})(exports.OrderValidatorEnum || (exports.OrderValidatorEnum = {}));

const mainnetAddresses = {
    LOOKS: "0xf4d2888d29D722226FafA5d9B24F9164c092421E",
    LOOKS_LP: "0xDC00bA87Cc2D99468f7f34BC04CBf72E111A32f7",
    WETH: "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
    ROYALTY_FEE_MANAGER: "0xCBfebA41C3e69d24B5C8b04Ed60C42CC5D883620",
    ROYALTY_FEE_REGISTRY: "0x55010472a93921a117aAD9b055c141060c8d8022",
    ROYALTY_FEE_SETTER: "0x66466107d9cAE4da0176a699406419003F3C27a8",
    EXCHANGE: "0x59728544B08AB483533076417FbBB2fD0B17CE3a",
    TRANSFER_MANAGER_ERC721: "0xf42aa99F011A1fA7CDA90E5E98b277E306BcA83e",
    TRANSFER_MANAGER_ERC1155: "0xFED24eC7E22f573c2e08AEF55aA6797Ca2b3A051",
    TRANSFER_SELECTOR_NFT: "0x9Ba628F27aAc9B2D78A9f2Bf40A8a6DF4Ccd9e2c",
    STRATEGY_STANDARD_SALE_DEPRECATED: "0x56244Bb70CbD3EA9Dc8007399F61dFC065190031",
    STRATEGY_COLLECTION_SALE_DEPRECATED: "0x86F909F70813CdB1Bc733f4D97Dc6b03B8e7E8F3",
    STRATEGY_STANDARD_SALE: "0x579af6FD30BF83a5Ac0D636bc619f98DBdeb930c",
    STRATEGY_COLLECTION_SALE: "0x09F93623019049c76209C26517AcC2aF9d49c69b",
    STRATEGY_PRIVATE_SALE: "0x58D83536D3EfeDB9F7f2A1Ec3BDaad2b1A4DD98C",
    STRATEGY_DUTCH_AUCTION: "0x3E80795Cae5Ee215EBbDf518689467Bf4243BAe0",
    PRIVATE_SALE_WITH_FEE_SHARING: "0x9571cdD8ACB71C83393290F0D63A46173dddE65B",
    FEE_SHARING_SYSTEM: "0xBcD7254A1D759EFA08eC7c3291B2E85c5dCC12ce",
    STAKING_POOL_FOR_LOOKS_LP: "0x2A70e7F51f6cd40C3E9956aa964137668cBfAdC5",
    TOKEN_DISTRIBUTOR: "0x465A790B428268196865a3AE2648481ad7e0d3b1",
    TRADING_REWARDS_DISTRIBUTOR: "0x453c1208B400fE47aCF275315F14E8F9F9fbC3cD",
    MULTI_REWARDS_DISTRIBUTOR: "0x0554f068365eD43dcC98dcd7Fd7A8208a5638C72",
    MULTICALL2: "0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696",
    REVERSE_RECORDS: "0x3671aE578E63FdF66ad4F3E12CC0c0d71Ac7510C",
    AGGREGATOR_UNISWAP_V3: "0x3ab16Af1315dc6C95F83Cbf522fecF98D00fd9ba",
    EXECUTION_MANAGER: "0x9Cc58bf22a173C0Fa8791c13Df396d18185d62b2",
    CURRENCY_MANAGER: "0xC881ADdf409eE2C4b6bBc8B607c2C5CAFaB93d25",
    ORDER_VALIDATOR_V1: "0xdC56dE26C64B14f1A8e95582A16b6A9AEfEEd395",
};
const goerliAddresses = {
    LOOKS: "0x20A5A36ded0E4101C3688CBC405bBAAE58fE9eeC",
    LOOKS_LP: "",
    WETH: "0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6",
    ROYALTY_FEE_MANAGER: "0x37Ac5Af9eE9394F4356E0C7aaBeF3c93731A5c90",
    ROYALTY_FEE_REGISTRY: "0x12405dB79325D06a973aD913D6e9BdA1343cD526",
    ROYALTY_FEE_SETTER: "0x73d3922426f7F27DF51E9cd7B8B2A0e435abCa06",
    EXCHANGE: "0xD112466471b5438C1ca2D218694200e49d81D047",
    TRANSFER_MANAGER_ERC721: "0xF8C81f3ae82b6EFC9154c69E3db57fD4da57aB6E",
    TRANSFER_MANAGER_ERC1155: "0xF2ae42e871937F4e9ffb394C5A814357C16e06d6",
    TRANSFER_SELECTOR_NFT: "0x1b03835903D54dd4DB41F04B07188C0f7645edD7",
    STRATEGY_STANDARD_SALE_DEPRECATED: "0xc771c0A3a7d738A1E12Aa88829A658bAefb32f0f",
    STRATEGY_COLLECTION_SALE_DEPRECATED: "0xeF722abf61a1937E76DAcFcd58d51c2358dE7D1A",
    STRATEGY_STANDARD_SALE: "0x6ACbeb7f6E225FbC0D1CEe27a40ADC49E7277E57",
    STRATEGY_COLLECTION_SALE: "0xAfb81825DC076500BF19CBf69d443684F2EBd3f6",
    STRATEGY_PRIVATE_SALE: "0x6122D4B50B0e2b7D76e63C537038c69d71317943",
    STRATEGY_DUTCH_AUCTION: "0x550fBf31d44f72bA7b4e4bf567C72463C4d6CEDB",
    PRIVATE_SALE_WITH_FEE_SHARING: "",
    FEE_SHARING_SYSTEM: "0x8A29E7b241A32158Fd7F267d484199aAD8dd2E31",
    STAKING_POOL_FOR_LOOKS_LP: "",
    TOKEN_DISTRIBUTOR: "0x861fDb71CCc266b3c0A4b8da8A929E52E83F5e7c",
    TRADING_REWARDS_DISTRIBUTOR: "",
    MULTI_REWARDS_DISTRIBUTOR: "0xdC6dC8d1B784890BA2c38947218F89E963EC2673",
    MULTICALL2: "0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696",
    REVERSE_RECORDS: "0x333Fc8f550043f239a2CF79aEd5e9cF4A20Eb41e",
    AGGREGATOR_UNISWAP_V3: "0x63c38B3BE3eF075a00a5edaeC36F499088c7334C",
    EXECUTION_MANAGER: "0x972B3A1A89ABb5e489163345E3C44Ab1bB813986",
    CURRENCY_MANAGER: "0xAC56740Fa471C0266B59B101C76Ab771f199F2eA",
    ORDER_VALIDATOR_V1: "0xdD6178143Fb0a16DEC9261498F6007a7468D7Aea",
};
const addressesByNetwork = {
    [exports.SupportedChainId.MAINNET]: mainnetAddresses,
    [exports.SupportedChainId.GOERLI]: goerliAddresses,
    [exports.SupportedChainId.HARDHAT]: goerliAddresses,
};

const CHAIN_INFO = {
    [exports.SupportedChainId.MAINNET]: {
        label: "Ethereum",
        appUrl: "https://looksrare.org",
        explorer: "https://etherscan.io",
        rpcUrl: `https://eth-mainnet.g.alchemy.com/v2`,
        apiUrl: "https://graphql.looksrare.org/graphql",
        osApiUrl: "https://api.opensea.io",
        cdnUrl: "https://static.looksnice.org",
        rewardsSubgraphUrl: "https://api.thegraph.com/subgraphs/name/looksrare/looks-distribution",
        cloudinaryUrl: "https://looksrare.mo.cloudinary.net",
    },
    [exports.SupportedChainId.GOERLI]: {
        label: "Goerli",
        appUrl: "https://goerli.looksrare.org",
        explorer: "https://goerli.etherscan.io",
        rpcUrl: `https://eth-goerli.g.alchemy.com/v2`,
        apiUrl: "https://graphql-goerli.looksrare.org/graphql",
        osApiUrl: "https://testnets-api.opensea.io",
        cdnUrl: "https://static-goerli.looksnice.org",
        rewardsSubgraphUrl: "https://api.thegraph.com/subgraphs/name/0xjurassicpunk/looks-distribution",
        cloudinaryUrl: "https://looksrare.mo.cloudinary.net/goerli",
    },
    [exports.SupportedChainId.HARDHAT]: {
        label: "Hardhat",
        appUrl: "http://localhost:3000",
        explorer: "https://etherscan.io",
        rpcUrl: "http://127.0.0.1:8545",
        apiUrl: "http://localhost:4000/graphql",
        osApiUrl: "https://testnets-api.opensea.io",
        cdnUrl: "https://via.placeholder.com",
        rewardsSubgraphUrl: "https://api.thegraph.com/subgraphs/name/0xjurassicpunk/looks-distribution",
        cloudinaryUrl: "",
    },
};
const isSupportedChain = (chainId) => {
    return Object.values(exports.SupportedChainId).includes(chainId);
};

const minNetPriceRatio = 9800;
const minNetPriceRatioDeprecated = 9750;

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

var Wallet;
(function (Wallet) {
    Wallet[Wallet["METAMASK"] = 0] = "METAMASK";
    Wallet[Wallet["FRAME"] = 1] = "FRAME";
    Wallet[Wallet["OTHER"] = 2] = "OTHER";
})(Wallet || (Wallet = {}));
/**
 * Return the user wallet
 * Never use server side
 * @returns Wallet
 */
const getCurrentWallet = (provider) => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    const isMetaMask = provider.connection.url === "metamask";
    const isFrame = (_a = provider.provider) === null || _a === void 0 ? void 0 : _a.isFrame;
    if (isMetaMask) {
        return Wallet.METAMASK;
    }
    if (isFrame) {
        return Wallet.FRAME;
    }
    return Wallet.OTHER;
});
/**
 * Copy of ethers '_signTypedData' helper, modified to support EIP-712 typed signatures with different call names
 * https://github.com/ethers-io/ethers.js/blob/73a46efea32c3f9a4833ed77896a216e3d3752a0/packages/providers/src.ts/json-rpc-provider.ts#L263
 * TESTED WITH - MetaMask, Frame, Coinbase Wallet, WalletConnect: Trust, Rainbow, MetaMask Mobile, SafePal, TokenPocket, Math Wallet
 * NOT CURRENTLY SUPPORTED - Trezor
 */
const etherSignTypedData = (provider, address, domain, types, value) => __awaiter(void 0, void 0, void 0, function* () {
    // Populate any ENS names (in-place)
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    const populated = yield hash._TypedDataEncoder.resolveNames(domain, types, value, (name) => {
        return provider.resolveName(name);
    });
    const rpcData = hash._TypedDataEncoder.getPayload(populated.domain, types, populated.value);
    const wallet = yield getCurrentWallet(provider);
    if (wallet === Wallet.METAMASK || wallet === Wallet.FRAME) {
        return yield provider.send("eth_signTypedData_v4", [address, JSON.stringify(rpcData)]); // MetaMask, Frame
    }
    return yield provider.send("eth_signTypedData", [address, JSON.stringify(rpcData)]); // CoinBase wallet. WalletConnect: Trust, MetaMask Mobile, Rainbow, SafePal
});

const version = 1;
/**
 * Get LR typed data for creating maker orders.
 * Use with a signTypedData function.
 * @see https://eips.ethereum.org/EIPS/eip-712
 * @param chainId Current chain id
 * @param verifyingContract Exchange contract address
 * @returns { type: Record<string, TypedDataField[]>, domain: TypedDataDomain }
 */
const getMakerOrderTypeAndDomain = (chainId, verifyingContract) => {
    const domain = {
        name: "LooksRareExchange",
        version: version.toString(),
        chainId,
        verifyingContract: verifyingContract ? verifyingContract : addressesByNetwork[chainId].EXCHANGE,
    };
    const type = {
        MakerOrder: [
            { name: "isOrderAsk", type: "bool" },
            { name: "signer", type: "address" },
            { name: "collection", type: "address" },
            { name: "price", type: "uint256" },
            { name: "tokenId", type: "uint256" },
            { name: "amount", type: "uint256" },
            { name: "strategy", type: "address" },
            { name: "currency", type: "address" },
            { name: "nonce", type: "uint256" },
            { name: "startTime", type: "uint256" },
            { name: "endTime", type: "uint256" },
            { name: "minPercentageToAsk", type: "uint256" },
            { name: "params", type: "bytes" },
        ],
    };
    return {
        type,
        domain,
    };
};

/**
 * Given an array of params, return the params types, and the encoded params.
 * To be used for orders signature and orders execution
 * @param params array of params
 * @returns param types and encoded params
 */
const encodeOrderParams = (params) => {
    const nonNullParams = params || [];
    const paramsTypes = nonNullParams.map((param) => {
        if (ethers.utils.isAddress(param)) {
            return "address";
        }
        if (typeof param === "boolean") {
            return "bool";
        }
        try {
            ethers.BigNumber.from(param);
            return "uint256";
        }
        catch (error) {
            throw Error("Params have unsupported solidity types");
        }
    });
    return { paramsTypes, encodedParams: ethers.utils.defaultAbiCoder.encode(paramsTypes, nonNullParams) };
};

const generateMakerOrderTypedData = (signerAddress, chainId, order, verifyingContractAddress) => {
    const { domain, type } = getMakerOrderTypeAndDomain(chainId, verifyingContractAddress);
    const { encodedParams } = encodeOrderParams(order.params);
    const value = Object.assign(Object.assign({}, order), { signer: signerAddress, params: encodedParams });
    return { domain, type, value };
};

/**
 * Create a signature for a maker order
 * @param signer user signer
 * @param chainId current chain id
 * @param verifyingContractAddress Looksrare exchange contract address
 * @param order see MakerOrder
 * @returns String signature
 */
const signMakerOrder = (signer, chainId, order, verifyingContractAddress) => __awaiter(void 0, void 0, void 0, function* () {
    const signerAddress = yield signer.getAddress();
    const { domain, type, value } = generateMakerOrderTypedData(signerAddress, chainId, order, verifyingContractAddress);
    const signatureHash = yield etherSignTypedData(signer.provider, signerAddress, domain, type, value);
    return signatureHash;
});

/**
 * Batch multiple calls to contracts with the same abi to reduce rpc calls and increase response time.
 *
 * @param provider ethers.js provider
 * @param address multicall address
 * @param abi abi generated from the contract code
 * @param calls Array of Call objects to run through multicall
 */
const multicall = (provider, address, abi$1, calls) => __awaiter(void 0, void 0, void 0, function* () {
    // Setup contracts
    const multicallContract = new contracts.Contract(address, multicall2Abi, provider);
    const itf = new abi.Interface(abi$1);
    const calldata = calls.map((call) => [
        call.contractAddress.toLowerCase(),
        itf.encodeFunctionData(call.functionName, call.params),
    ]);
    const { returnData } = yield multicallContract.callStatic.aggregate(calldata);
    // [From ethers.js docs]: https://docs.ethers.io/v5/api/utils/abi/interface/#Interface--decoding
    // Decoding structured data returns a Result object, which
    // will include all values positionally and if the ABI
    // included names, values will additionally be available
    // by their name.
    const results = returnData.map((data, i) => {
        const [result] = itf.decodeFunctionResult(calls[i].functionName, data);
        return result;
    });
    return results;
});

exports.AggregatorFeeSharingWithUniswapV3Abi = AggregatorFeeSharingWithUniswapV3;
exports.CHAIN_INFO = CHAIN_INFO;
exports.CurrencyManagerAbi = CurrencyManagerAbi;
exports.ERC1155Abi = ERC1155;
exports.ERC20Abi = ERC20;
exports.ERC721Abi = ERC721;
exports.ExecutionManagerAbi = ExecutionManager;
exports.FeeSharingSystemAbi = FeeSharingSystem;
exports.IExecutionStrategyAbi = IExecutionStrategy;
exports.LooksRareAirdropAbi = LooksRareAirdrop;
exports.LooksRareExchangeAbi = LooksRareExchange;
exports.MultiRewardsDistributorAbi = MultiRewardsDistributor;
exports.Multicall2Abi = multicall2Abi;
exports.OrderValidatorV1Abi = OrderValidatorV1;
exports.PrivateSaleWithFeeSharingAbi = PrivateSaleWithFeeSharing;
exports.ReverseRecordsAbi = ReverseRecords;
exports.RoyaltyFeeManagerAbi = RoyaltyFeeManager;
exports.RoyaltyFeeRegistryAbi = RoyaltyFeeRegistry;
exports.RoyaltyFeeSetterAbi = RoyaltyFeeSetter;
exports.StakingPoolForUniswapV2TokensAbi = StakingPoolForUniswapV2Tokens;
exports.TokenDistributorAbi = TokenDistributor;
exports.TradingRewardsDistributorAbi = TradingRewardsDistributor;
exports.TransferSelectorNFTAbi = TransferSelectorNFT;
exports.WETHAbi = WETH;
exports.addressesByNetwork = addressesByNetwork;
exports.encodeOrderParams = encodeOrderParams;
exports.generateMakerOrderTypedData = generateMakerOrderTypedData;
exports.getMakerOrderTypeAndDomain = getMakerOrderTypeAndDomain;
exports.isSupportedChain = isSupportedChain;
exports.minNetPriceRatio = minNetPriceRatio;
exports.minNetPriceRatioDeprecated = minNetPriceRatioDeprecated;
exports.multicall = multicall;
exports.signMakerOrder = signMakerOrder;
