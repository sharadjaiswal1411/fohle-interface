import { BigNumberish, BytesLike } from "ethers";
/**
 * /!\ This type is used for the signature and should perfectly match the object signed by the user
 * Do not update unless the contract has been updated
 */
export interface MakerOrder {
    isOrderAsk: boolean;
    signer: string;
    collection: string;
    price: BigNumberish;
    tokenId: BigNumberish;
    amount: BigNumberish;
    strategy: string;
    currency: string;
    nonce: BigNumberish;
    startTime: BigNumberish;
    endTime: BigNumberish;
    minPercentageToAsk: BigNumberish;
    params: any[];
}
export interface MakerOrderWithEncodedParams extends Omit<MakerOrder, "params"> {
    params: BytesLike;
}
/** MakerOrderWithSignature matches the type used for API order mutations and contract calls. */
export interface MakerOrderWithSignature extends MakerOrder {
    signature: string;
}
/** MakerOrderWithVRS match the type sent to the contract when executing a trade */
export interface MakerOrderWithVRS extends Omit<MakerOrder, "params"> {
    v: number;
    r: string;
    s: string;
    params: BytesLike;
}
export interface TakerOrder {
    isOrderAsk: boolean;
    taker: string;
    price: BigNumberish;
    tokenId: BigNumberish;
    minPercentageToAsk: BigNumberish;
    params: any[];
}
export interface TakerOrderWithEncodedParams extends Omit<TakerOrder, "params"> {
    params: BytesLike;
}
